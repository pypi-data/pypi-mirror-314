{ "version": 3, "file": "py/std/temper_std/temporal.py", "sources": [ "std/temporal.temper.md" ], "sourcesContent": [ "# Temporal\n\nWe're creating an initial Date type to help with developing\nTemper's machinery to connect to existing Date types in\ntarget languages.\n\nSome facts about the Gregorian calendar.\n\n    /** Indexed by the month number: 1 = January */\n    let daysInMonth = [\n      0,\n      /* January   */ 31,\n      /* February  */ 28, // Special case leap days\n      /* March     */ 31,\n      /* April     */ 30,\n      /* May       */ 31,\n      /* June      */ 30,\n      /* July      */ 31,\n      /* August    */ 31,\n      /* September */ 30,\n      /* October   */ 31,\n      /* November  */ 30,\n      /* December  */ 31,\n    ];\n\n    let isLeapYear(year: Int): Boolean {\n       year % 4 == 0 \u0026\u0026 (year % 100 != 0 || year % 400 == 0)\n    }\n\n    let { StringBuilder } = import(\u0022./strings.temper.md\u0022);\n\n    /**\n     * If the decimal representation of \\|num\\| is longer than [minWidth],\n     * then appends that representation.\n     * Otherwise any sign for [num] followed by enough zeroes to bring the\n     * whole length up to [minWidth].\n     *\n     * ```temper\n     * // When the width is greater than the decimal's length,\n     * // we pad to that width.\n     * \u00220123\u0022 == do {\n     *   let sb = new StringBuilder();\n     *   padTo(4, 123, sb);\n     *   sb.toString()\n     * }\n     *\n     * // When the width is the same or lesser, we just use the string form.\n     * \u0022123\u0022 == do {\n     *   let sb = new StringBuilder();\n     *   padTo(2, 123, sb);\n     *   sb.toString()\n     * }\n     *\n     * // The sign is always on the left.\n     * \u0022-01\u0022 == do {\n     *   let sb = new StringBuilder();\n     *   padTo(3, -1, sb);\n     *   sb.toString()\n     * }\n     * ```\n     */\n    let padTo(minWidth: Int, num: Int, sb: StringBuilder): Void {\n      let decimal = num.toString(10);\n      var decimalIndex = String.begin;\n      let decimalEnd = decimal.end;\n      if (decimal[decimalIndex] == char'-') {\n        sb.append(\u0022-\u0022);\n        decimalIndex = decimal.next(decimalIndex);\n      }\n      var nNeeded = minWidth - decimal.countBetween(decimalIndex, decimalEnd);\n      while (nNeeded \u003e 0) {\n        sb.append('0');\n        nNeeded -= 1;\n      }\n      sb.appendBetween(decimal, decimalIndex, decimalEnd);\n    }\n\n    // Relates months (one-indexed) to numbers used in day-of-week\n    // computations non-leapy.\n    let dayOfWeekLookupTableLeapy: List\u003cInt\u003e = [\n      0, // Not a month\n      0, 3, 4, 0, 2, 5, 0, 3, 6, 1, 4, 6,\n    ];\n    let dayOfWeekLookupTableNotLeapy: List\u003cInt\u003e = [\n      0, // Not a month\n      0, 3, 3, 6, 1, 4, 6, 2, 5, 0, 3, 5,\n    ];\n\nHere's just enough of a Date type to get us started.\n\n    /**\n     * A Date identifies a day in the proleptic Gregorian calendar.\n     * It is unconnected to a time of day or a timezone.\n     */\n    @json\n    @connected(\u0022Date\u0022)\n    export class Date {\n      /** The year.  1900 means 1900. */\n      @connected(\u0022Date::getYear\u0022)\n      public year: Int;\n      /** The month of the year in [1, 12]. */\n      @connected(\u0022Date::getMonth\u0022)\n      public month: Int;\n      /**\n       * The day of the month in [1, 31]\n       * additionally constrained by the length of [month].\n       */\n      @connected(\u0022Date::getDay\u0022)\n      public day: Int;\n\n      @connected(\u0022Date::constructor\u0022)\n      public constructor(year: Int, month: Int, day: Int): Void | Bubble {\n        if (1 \u003c= month \u0026\u0026 month \u003c= 12 \u0026\u0026\n            1 \u003c= day \u0026\u0026 (\n              (month != 2 || day != 29)\n              ? day \u003c= daysInMonth[month]\n              : isLeapYear(year))) {\n          this.year = year;\n          this.month = month;\n          this.day = day;\n        } else {\n          bubble();\n        }\n      }\n\n      /** An ISO 8601 Date string with dashes like \u00222000-12-31\u0022. */\n      @connected(\u0022Date::toString\u0022)\n      public toString(): String {\n        let sb = new StringBuilder();\n        padTo(4, year, sb);\n        sb.append(\u0022-\u0022);\n        padTo(2, month, sb);\n        sb.append(\u0022-\u0022);\n        padTo(2, day, sb);\n        return sb.toString();\n      }\n\n      /** Parses a Date from an ISO 8601 Date string with dashes like \u00222000-12-21\u0022. */\n      @connected(\u0022Date::fromIsoString\u0022)\n      public static fromIsoString(isoString: String): Date | Bubble {\n        let end = isoString.end;\n        var strIndex = isoString.prev(isoString.prev(end));\n        // strIndex at '^'\n        // YYYY-MM-^DD\n        let beforeDay = strIndex;\n        strIndex = isoString.prev(strIndex);\n        // YYYY-MM^-DD\n        let afterMonth = strIndex;\n        if (!isoString.hasIndex(afterMonth) || isoString[strIndex] != char'-') {\n          bubble();\n        }\n        strIndex = isoString.prev(isoString.prev(strIndex));\n        // YYYY-^MM-DD\n        let beforeMonth = strIndex;\n        strIndex = isoString.prev(strIndex);\n        // YYYY^-MM-DD\n        if (isoString[strIndex] != char'-' ||\n            !isoString.hasAtLeast(String.begin, strIndex, 4)) {\n          bubble();\n        }\n        let day   = isoString.slice(beforeDay,    end)       .toInt(10);\n        let month = isoString.slice(beforeMonth,  afterMonth).toInt(10);\n        let year  = isoString.slice(String.begin, strIndex)  .toInt(10);\n        return new Date(year, month, day);\n      }\n\n      /**\n       * The count of whole years between the two dates.\n       *\n       * Think of this as floor of the magnitude of a range:\n       *\n       *     ⌊ [start, end] ⌋\n       *\n       * If you think of it as subtraction, you have to reverse\n       * the order of arguments.\n       *\n       *     ⌊ end - start ⌋, NOT ⌊ start - end ⌋\n       *\n       * \u0022Whole year\u0022 is based on month/day calculations, not\n       * day-of-year.  This means that there is one full year\n       * between 2020-03-01 and 2021-03-01 even though, because\n       * February of 2020 has 29 days, 2020-03-01 is the 61st\n       * day of 2020 but 2021-03-01 is only the 60th day of\n       * that year.\n       */\n      @connected(\u0022Date::yearsBetween\u0022)\n      public static let yearsBetween(start: Date, end: Date): Int {\n        let yearDelta = end.year - start.year;\n        let monthDelta = end.month - start.month;\n        yearDelta - (\n            // If the end month/day is before the start's then we\n            // don't have a full year.\n            (monthDelta \u003c 0 || monthDelta == 0 \u0026\u0026 end.day \u003c start.day)\n            ? 1 : 0)\n      }\n\n      /** Today's date in UTC */\n      // TODO: take a zone\n      @connected(\u0022Date::today\u0022)\n      public static let today(): Date;\n\n      /**\n       * ISO 8601 weekday number.\n       *\n       * | Number | Weekday  |\n       * | ------ | -------- |\n       * |      1 | Monday   |\n       * |      2 | Tuesday  |\n       * |      3 | Monday   |\n       * |      4 | Thursday |\n       * |      5 | Friday   |\n       * |      6 | Saturday |\n       * |      7 | Sunday   |\n       */\n      @connected(\u0022Date::getDayOfWeek\u0022)\n      public get dayOfWeek(): Int {\n        // Gauss's method.\n        let y = year;\n        let c = if (y \u003e= 0) { y / 100 } else { -(-y / 100) };\n        let yy = y - (c * 100);\n        // See note below about avoiding negative modulus to see why\n        // some of the offsets differ from Wikipedia's rendering of\n        // Gauss's formula.\n        let janFirst = (8 + 5*((yy + 3) % 4) + 3*(yy - 1) + 5*(c % 4)) % 7;\n        let table = if (isLeapYear(y)) {\n          dayOfWeekLookupTableLeapy\n        } else {\n          dayOfWeekLookupTableNotLeapy\n        };\n        let monthOffset = table[month];\n        // Gauss's method produces a number in 0..6 but\n        // ISO assigns 1..7 where all values are the same\n        // except that Sunday is 7 instead of 0.\n        // Below we do (day + 6) since that is equivalent to\n        // (day - 1) where we end up % 7 but avoids any chance\n        // of a negative left operand to `%`.\n        let gaussWeekday = (janFirst + (day + 6) + monthOffset) % 7;\n        gaussWeekday == 0 ? 7 : gaussWeekday\n      }\n\n      public encodeToJson(p: JsonProducer): Void {\n        p.stringValue(toString());\n      }\n\n      public static decodeFromJson(\n        t: JsonSyntaxTree,\n        ic: InterchangeContext,\n      ): Date | Bubble {\n        fromIsoString(t.as\u003cJsonString\u003e().content)\n      }\n    };\n\nDates marshal to and from JSON via the ISO string form.\n\n    let {\n      InterchangeContext,\n      JsonProducer,\n      JsonString,\n      JsonSyntaxTree\n    } = import(\u0022./json\u0022);\n\nTODO: an auto-balancing Date builder.\nOther temporal values\nDay of week\n" ], "names": [ "JsonProducer", "JsonSyntaxTree", "InterchangeContext", "JsonString", "date", "str", "int", "bool", "list", "len", "cast_by_type", "date_to_string", "int_to_string", "string_get", "string_next", "string_count_between", "Sequence", "JsonAdapter", "date_to_string#2830", "int_to_string#2831", "len#2832", "string_get#2833", "string_next#2835", "string_count_between#2836", "DateJsonAdapter", "this", "x", "p", "encodeToJson", "t", "ic", "decodeFromJson", "t#340", "t#196", "t#338", "fromIsoString", "jsonAdapter", "daysInMonth", "isLeapYear", "year", "return", "t#267", "padTo", "minWidth", "num", "sb", "t#379", "decimal", "decimalIndex", "decimalEnd", "t#261", "t#380", "nNeeded", "dayOfWeekLookupTableLeapy", "dayOfWeekLookupTableNotLeapy" ], "mappings": "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" }