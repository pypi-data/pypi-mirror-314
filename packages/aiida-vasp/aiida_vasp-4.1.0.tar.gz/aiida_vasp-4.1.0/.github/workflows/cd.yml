name: cd

on:
  push:
    tags:
    - v[0-9]+.[0-9]+.[0-9]+*
  workflow_dispatch:

jobs:
  validate-release-tag:
    if: github.repository == 'aiida-vasp/aiida-vasp' && github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Validate the tag version against the package version
      run: python .github/workflows/validate_release_tag.py $GITHUB_REF

  tests:
    runs-on: ubuntu-latest
    defaults:
        run:
          shell: bash -l {0}
    timeout-minutes: 90
    strategy:
      matrix:
        python: ['3.10', '3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      - uses: conda-incubator/setup-miniconda@v3
        with:
          miniforge-version: latest
      - name: Install dependencies
        run: |
          conda activate test
          conda install --yes -c conda-forge python=${{ matrix.python }}
          conda install --yes -c conda-forge pip "aiida-core>=2.6" ase lxml pytest pytest-cov seekpath PyCifRW
      - name: Setup parsevasp
        run: |
          conda activate test
          git clone --depth 1 https://github.com/aiida-vasp/parsevasp.git
          cd parsevasp
          pip install -e . -vvv
          cd ..
      - name: Install aiida-vasp
        run: |
          conda activate test
          pip install pymatgen
          pip install -e . -vvv
      - name: Run tests with pytest
        run: |
          conda activate test
          pytest tests

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [tests, validate-release-tag]
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install flit
      run: pip install flit~=3.4
    - name: Build and publish
      run: flit publish
      env:
        FLIT_USERNAME: __token__
        FLIT_PASSWORD: ${{ secrets.PYPI_KEY }}
