# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 2.8.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "2.8.12")
   message(FATAL_ERROR "CMake >= 2.8.12 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.8.12...3.27)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS rlc::backend)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
if(_IMPORT_PREFIX STREQUAL "/")
  set(_IMPORT_PREFIX "")
endif()

# Create imported target rlc::backend
add_library(rlc::backend STATIC IMPORTED)

set_target_properties(rlc::backend PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS"
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;/root/rlc-infrastructure/llvm-install-release/include;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "\$<LINK_ONLY:rlc::parser>;\$<LINK_ONLY:rlc::conversions>;\$<LINK_ONLY:rlc::dialect>;\$<LINK_ONLY:LLVMSupport>;\$<LINK_ONLY:MLIRTargetLLVMIRExport>;\$<LINK_ONLY:LLVMCodeGen>;\$<LINK_ONLY:LLVMAnalysis>;\$<LINK_ONLY:LLVMMC>;\$<LINK_ONLY:LLVMTransformUtils>;\$<LINK_ONLY:LLVMPasses>;\$<LINK_ONLY:LLVMInstrumentation>;\$<LINK_ONLY:LLVMAggressiveInstCombine>;\$<LINK_ONLY:MLIRLLVMToLLVMIRTranslation>;\$<LINK_ONLY:MLIRLLVMCommonConversion>;\$<LINK_ONLY:MLIRTargetLLVMIRExport>;\$<LINK_ONLY:MLIRTranslateLib>;\$<LINK_ONLY:MLIRSPIRVDialect>;\$<LINK_ONLY:lldCOFF>;\$<LINK_ONLY:clangDriver>;\$<LINK_ONLY:LLVMCore>;\$<LINK_ONLY:LLVMipo>;\$<LINK_ONLY:LLVMVectorize>;\$<LINK_ONLY:LLVMInstCombine>;\$<LINK_ONLY:LLVMTarget>;\$<LINK_ONLY:LLVMScalarOpts>;\$<LINK_ONLY:LLVMObjCARCOpts>;\$<LINK_ONLY:LLVMAArch64CodeGen>;\$<LINK_ONLY:LLVMAArch64AsmParser>;\$<LINK_ONLY:LLVMAArch64Desc>;\$<LINK_ONLY:LLVMAArch64Disassembler>;\$<LINK_ONLY:LLVMAArch64Info>;\$<LINK_ONLY:LLVMAArch64Utils>;\$<LINK_ONLY:LLVMAMDGPUCodeGen>;\$<LINK_ONLY:LLVMAMDGPUAsmParser>;\$<LINK_ONLY:LLVMAMDGPUDesc>;\$<LINK_ONLY:LLVMAMDGPUDisassembler>;\$<LINK_ONLY:LLVMAMDGPUInfo>;\$<LINK_ONLY:LLVMAMDGPUUtils>;\$<LINK_ONLY:LLVMARMCodeGen>;\$<LINK_ONLY:LLVMARMAsmParser>;\$<LINK_ONLY:LLVMARMDesc>;\$<LINK_ONLY:LLVMARMDisassembler>;\$<LINK_ONLY:LLVMARMInfo>;\$<LINK_ONLY:LLVMARMUtils>;\$<LINK_ONLY:LLVMAVRCodeGen>;\$<LINK_ONLY:LLVMAVRAsmParser>;\$<LINK_ONLY:LLVMAVRDesc>;\$<LINK_ONLY:LLVMAVRDisassembler>;\$<LINK_ONLY:LLVMAVRInfo>;\$<LINK_ONLY:LLVMBPFCodeGen>;\$<LINK_ONLY:LLVMBPFAsmParser>;\$<LINK_ONLY:LLVMBPFDesc>;\$<LINK_ONLY:LLVMBPFDisassembler>;\$<LINK_ONLY:LLVMBPFInfo>;\$<LINK_ONLY:LLVMHexagonCodeGen>;\$<LINK_ONLY:LLVMHexagonAsmParser>;\$<LINK_ONLY:LLVMHexagonDesc>;\$<LINK_ONLY:LLVMHexagonDisassembler>;\$<LINK_ONLY:LLVMHexagonInfo>;\$<LINK_ONLY:LLVMLanaiCodeGen>;\$<LINK_ONLY:LLVMLanaiAsmParser>;\$<LINK_ONLY:LLVMLanaiDesc>;\$<LINK_ONLY:LLVMLanaiDisassembler>;\$<LINK_ONLY:LLVMLanaiInfo>;\$<LINK_ONLY:LLVMLoongArchCodeGen>;\$<LINK_ONLY:LLVMLoongArchAsmParser>;\$<LINK_ONLY:LLVMLoongArchDesc>;\$<LINK_ONLY:LLVMLoongArchDisassembler>;\$<LINK_ONLY:LLVMLoongArchInfo>;\$<LINK_ONLY:LLVMMipsCodeGen>;\$<LINK_ONLY:LLVMMipsAsmParser>;\$<LINK_ONLY:LLVMMipsDesc>;\$<LINK_ONLY:LLVMMipsDisassembler>;\$<LINK_ONLY:LLVMMipsInfo>;\$<LINK_ONLY:LLVMMSP430CodeGen>;\$<LINK_ONLY:LLVMMSP430AsmParser>;\$<LINK_ONLY:LLVMMSP430Desc>;\$<LINK_ONLY:LLVMMSP430Disassembler>;\$<LINK_ONLY:LLVMMSP430Info>;\$<LINK_ONLY:LLVMNVPTXCodeGen>;\$<LINK_ONLY:LLVMNVPTXDesc>;\$<LINK_ONLY:LLVMNVPTXInfo>;\$<LINK_ONLY:LLVMPowerPCCodeGen>;\$<LINK_ONLY:LLVMPowerPCAsmParser>;\$<LINK_ONLY:LLVMPowerPCDesc>;\$<LINK_ONLY:LLVMPowerPCDisassembler>;\$<LINK_ONLY:LLVMPowerPCInfo>;\$<LINK_ONLY:LLVMRISCVCodeGen>;\$<LINK_ONLY:LLVMRISCVAsmParser>;\$<LINK_ONLY:LLVMRISCVDesc>;\$<LINK_ONLY:LLVMRISCVDisassembler>;\$<LINK_ONLY:LLVMRISCVInfo>;\$<LINK_ONLY:LLVMSparcCodeGen>;\$<LINK_ONLY:LLVMSparcAsmParser>;\$<LINK_ONLY:LLVMSparcDesc>;\$<LINK_ONLY:LLVMSparcDisassembler>;\$<LINK_ONLY:LLVMSparcInfo>;\$<LINK_ONLY:LLVMSystemZCodeGen>;\$<LINK_ONLY:LLVMSystemZAsmParser>;\$<LINK_ONLY:LLVMSystemZDesc>;\$<LINK_ONLY:LLVMSystemZDisassembler>;\$<LINK_ONLY:LLVMSystemZInfo>;\$<LINK_ONLY:LLVMVECodeGen>;\$<LINK_ONLY:LLVMVEAsmParser>;\$<LINK_ONLY:LLVMVEDesc>;\$<LINK_ONLY:LLVMVEDisassembler>;\$<LINK_ONLY:LLVMVEInfo>;\$<LINK_ONLY:LLVMWebAssemblyCodeGen>;\$<LINK_ONLY:LLVMWebAssemblyAsmParser>;\$<LINK_ONLY:LLVMWebAssemblyDesc>;\$<LINK_ONLY:LLVMWebAssemblyDisassembler>;\$<LINK_ONLY:LLVMWebAssemblyInfo>;\$<LINK_ONLY:LLVMWebAssemblyUtils>;\$<LINK_ONLY:LLVMX86CodeGen>;\$<LINK_ONLY:LLVMX86AsmParser>;\$<LINK_ONLY:LLVMX86Desc>;\$<LINK_ONLY:LLVMX86Disassembler>;\$<LINK_ONLY:LLVMX86Info>;\$<LINK_ONLY:LLVMXCoreCodeGen>;\$<LINK_ONLY:LLVMXCoreDesc>;\$<LINK_ONLY:LLVMXCoreDisassembler>;\$<LINK_ONLY:LLVMXCoreInfo>"
)

# Load information for each installed configuration.
file(GLOB _cmake_config_files "${CMAKE_CURRENT_LIST_DIR}/backendTargets-*.cmake")
foreach(_cmake_config_file IN LISTS _cmake_config_files)
  include("${_cmake_config_file}")
endforeach()
unset(_cmake_config_file)
unset(_cmake_config_files)

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(_cmake_target IN LISTS _cmake_import_check_targets)
  if(CMAKE_VERSION VERSION_LESS "3.28"
      OR NOT DEFINED _cmake_import_check_xcframework_for_${_cmake_target}
      OR NOT IS_DIRECTORY "${_cmake_import_check_xcframework_for_${_cmake_target}}")
    foreach(_cmake_file IN LISTS "_cmake_import_check_files_for_${_cmake_target}")
      if(NOT EXISTS "${_cmake_file}")
        message(FATAL_ERROR "The imported target \"${_cmake_target}\" references the file
   \"${_cmake_file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
      endif()
    endforeach()
  endif()
  unset(_cmake_file)
  unset("_cmake_import_check_files_for_${_cmake_target}")
endforeach()
unset(_cmake_target)
unset(_cmake_import_check_targets)

# Make sure the targets which have been exported in some other
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "rlc::parser" "rlc::conversions" "rlc::dialect" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
