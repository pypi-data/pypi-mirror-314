# Generated from /home/davide/Desktop/olinfo/make-templates/grammar/IOLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,29,192,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
        1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,
        11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,
        17,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,
        20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,
        22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,5,24,149,8,24,10,
        24,12,24,152,9,24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,160,8,25,10,
        25,12,25,163,9,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,5,26,172,8,
        26,10,26,12,26,175,9,26,1,26,1,26,1,27,1,27,5,27,181,8,27,10,27,
        12,27,184,9,27,1,28,1,28,5,28,188,8,28,10,28,12,28,191,9,28,1,161,
        0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,1,0,5,3,0,9,9,13,13,32,32,2,0,10,
        10,13,13,1,0,34,34,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,
        196,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,
        3,63,1,0,0,0,5,68,1,0,0,0,7,75,1,0,0,0,9,80,1,0,0,0,11,87,1,0,0,
        0,13,89,1,0,0,0,15,91,1,0,0,0,17,93,1,0,0,0,19,95,1,0,0,0,21,97,
        1,0,0,0,23,99,1,0,0,0,25,101,1,0,0,0,27,103,1,0,0,0,29,105,1,0,0,
        0,31,107,1,0,0,0,33,109,1,0,0,0,35,111,1,0,0,0,37,113,1,0,0,0,39,
        115,1,0,0,0,41,122,1,0,0,0,43,127,1,0,0,0,45,133,1,0,0,0,47,140,
        1,0,0,0,49,144,1,0,0,0,51,155,1,0,0,0,53,169,1,0,0,0,55,178,1,0,
        0,0,57,185,1,0,0,0,59,60,5,105,0,0,60,61,5,110,0,0,61,62,5,116,0,
        0,62,2,1,0,0,0,63,64,5,108,0,0,64,65,5,111,0,0,65,66,5,110,0,0,66,
        67,5,103,0,0,67,4,1,0,0,0,68,69,5,100,0,0,69,70,5,111,0,0,70,71,
        5,117,0,0,71,72,5,98,0,0,72,73,5,108,0,0,73,74,5,101,0,0,74,6,1,
        0,0,0,75,76,5,99,0,0,76,77,5,104,0,0,77,78,5,97,0,0,78,79,5,114,
        0,0,79,8,1,0,0,0,80,81,5,115,0,0,81,82,5,116,0,0,82,83,5,114,0,0,
        83,84,5,105,0,0,84,85,5,110,0,0,85,86,5,103,0,0,86,10,1,0,0,0,87,
        88,5,43,0,0,88,12,1,0,0,0,89,90,5,45,0,0,90,14,1,0,0,0,91,92,5,42,
        0,0,92,16,1,0,0,0,93,94,5,47,0,0,94,18,1,0,0,0,95,96,5,40,0,0,96,
        20,1,0,0,0,97,98,5,41,0,0,98,22,1,0,0,0,99,100,5,91,0,0,100,24,1,
        0,0,0,101,102,5,93,0,0,102,26,1,0,0,0,103,104,5,123,0,0,104,28,1,
        0,0,0,105,106,5,125,0,0,106,30,1,0,0,0,107,108,5,44,0,0,108,32,1,
        0,0,0,109,110,5,58,0,0,110,34,1,0,0,0,111,112,5,59,0,0,112,36,1,
        0,0,0,113,114,5,10,0,0,114,38,1,0,0,0,115,116,5,114,0,0,116,117,
        5,101,0,0,117,118,5,112,0,0,118,119,5,101,0,0,119,120,5,97,0,0,120,
        121,5,116,0,0,121,40,1,0,0,0,122,123,5,117,0,0,123,124,5,112,0,0,
        124,125,5,116,0,0,125,126,5,111,0,0,126,42,1,0,0,0,127,128,5,105,
        0,0,128,129,5,110,0,0,129,130,5,112,0,0,130,131,5,117,0,0,131,132,
        5,116,0,0,132,44,1,0,0,0,133,134,5,111,0,0,134,135,5,117,0,0,135,
        136,5,116,0,0,136,137,5,112,0,0,137,138,5,117,0,0,138,139,5,116,
        0,0,139,46,1,0,0,0,140,141,7,0,0,0,141,142,1,0,0,0,142,143,6,23,
        0,0,143,48,1,0,0,0,144,145,5,47,0,0,145,146,5,47,0,0,146,150,1,0,
        0,0,147,149,8,1,0,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,
        0,0,150,151,1,0,0,0,151,153,1,0,0,0,152,150,1,0,0,0,153,154,6,24,
        0,0,154,50,1,0,0,0,155,156,5,47,0,0,156,157,5,42,0,0,157,161,1,0,
        0,0,158,160,9,0,0,0,159,158,1,0,0,0,160,163,1,0,0,0,161,162,1,0,
        0,0,161,159,1,0,0,0,162,164,1,0,0,0,163,161,1,0,0,0,164,165,5,42,
        0,0,165,166,5,47,0,0,166,167,1,0,0,0,167,168,6,25,0,0,168,52,1,0,
        0,0,169,173,5,34,0,0,170,172,8,2,0,0,171,170,1,0,0,0,172,175,1,0,
        0,0,173,171,1,0,0,0,173,174,1,0,0,0,174,176,1,0,0,0,175,173,1,0,
        0,0,176,177,5,34,0,0,177,54,1,0,0,0,178,182,2,49,57,0,179,181,2,
        48,57,0,180,179,1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,
        1,0,0,0,183,56,1,0,0,0,184,182,1,0,0,0,185,189,7,3,0,0,186,188,7,
        4,0,0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,
        0,0,0,190,58,1,0,0,0,191,189,1,0,0,0,6,0,150,161,173,182,189,1,6,
        0,0
    ]

class IOLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT = 1
    LONG = 2
    DOUBLE = 3
    CHAR = 4
    STRING = 5
    PLUS = 6
    MINUS = 7
    MULT = 8
    DIV = 9
    LPAREN = 10
    RPAREN = 11
    LBRACK = 12
    RBRACK = 13
    LBRACE = 14
    RBRACE = 15
    COMMA = 16
    COLON = 17
    SEMICOL = 18
    NL = 19
    REPEAT = 20
    UPTO = 21
    INPUT = 22
    OUTPUT = 23
    WS = 24
    INLINE_COMMENT = 25
    BLOCK_COMMENT = 26
    STR = 27
    NUM = 28
    IDENT = 29

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'long'", "'double'", "'char'", "'string'", "'+'", 
            "'-'", "'*'", "'/'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
            "','", "':'", "';'", "'\\n'", "'repeat'", "'upto'", "'input'", 
            "'output'" ]

    symbolicNames = [ "<INVALID>",
            "INT", "LONG", "DOUBLE", "CHAR", "STRING", "PLUS", "MINUS", 
            "MULT", "DIV", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "LBRACE", 
            "RBRACE", "COMMA", "COLON", "SEMICOL", "NL", "REPEAT", "UPTO", 
            "INPUT", "OUTPUT", "WS", "INLINE_COMMENT", "BLOCK_COMMENT", 
            "STR", "NUM", "IDENT" ]

    ruleNames = [ "INT", "LONG", "DOUBLE", "CHAR", "STRING", "PLUS", "MINUS", 
                  "MULT", "DIV", "LPAREN", "RPAREN", "LBRACK", "RBRACK", 
                  "LBRACE", "RBRACE", "COMMA", "COLON", "SEMICOL", "NL", 
                  "REPEAT", "UPTO", "INPUT", "OUTPUT", "WS", "INLINE_COMMENT", 
                  "BLOCK_COMMENT", "STR", "NUM", "IDENT" ]

    grammarFileName = "IOLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


