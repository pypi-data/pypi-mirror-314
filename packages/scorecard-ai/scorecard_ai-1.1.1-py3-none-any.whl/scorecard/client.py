# This file was initially auto-generated by Fern, but is now manually updated.

import httpx
import typing

from .base_client import BaseScorecard, AsyncBaseScorecard
from .core.api_error import ApiError
from .types import Run


try:
    from opentelemetry import propagate
    from opentelemetry.propagators.composite import CompositePropagator
    from opentelemetry.baggage.propagation import W3CBaggagePropagator
    from opentelemetry.trace.propagation.tracecontext import (
        TraceContextTextMapPropagator,
    )

    propagate.set_global_textmap(
        CompositePropagator([TraceContextTextMapPropagator(), W3CBaggagePropagator()])
    )

    def trace(request: httpx.Request):
        propagate.inject(carrier=request.headers)

except ModuleNotFoundError:

    def trace(request: httpx.Request):
        pass


class Scorecard(BaseScorecard):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        client = self._client_wrapper.httpx_client.httpx_client
        client.event_hooks["request"].append(trace)

    def run_tests(
        self,
        *,
        input_testset_id: int,
        scoring_config_id: int,
        model_invocation: typing.Callable[[str], typing.Any],
    ) -> Run:
        """
        Runs all tests within a testset.
        Parameters:
            - input_testset_id: int. The ID of the Test Set you want to run.
            - scoring_config_id: int.
            - model_invocation: typing.Callable[[typing.str], typing.Any].
            A function that will call your AI model with a prompt.
        Returns:
            - Run: an object representing the test run that was executed.
        """
        run = self.run.create(
            testset_id=input_testset_id, scoring_config_id=scoring_config_id
        )
        if run.id is None:
            raise ApiError(
                body=f"Didn't receive run id after creating run for testid={input_testset_id}"
            )
        self.run.update_status(run.id, status="running_execution")
        testcases = self.testset.get_testcases(input_testset_id)

        for testcase in testcases.results:
            if testcase.id is None:
                continue

            testcase_id = testcase.id
            query = testcase.user_query

            print(f"Running testcase {testcase_id}...")
            print(f"User query: {query}")

            response = model_invocation(query)

            self.testrecord.create(
                run_id=run.id,
                testcase_id=testcase_id,
                testset_id=input_testset_id,
                user_query=testcase.user_query,
                context=testcase.context,
                ideal=testcase.ideal,
                response=response,
            )

        self.run.update_status(run.id, status="awaiting_scoring")

        print("Finished running testcases.")
        print(
            f"You can view the run details at https://app.getscorecard.ai/view-records/{run.id}"
        )
        return run


class AsyncScorecard(AsyncBaseScorecard):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        client = self._client_wrapper.httpx_client.httpx_client
        client.event_hooks["request"].append(trace)

    async def run_tests(
        self,
        *,
        input_testset_id: int,
        scoring_config_id: int,
        model_invocation: typing.Callable[[str], typing.Any],
    ) -> Run:
        """
        Runs all tests within a testset.
        Parameters:
            - input_testset_id: int. The ID of the Test Set you want to run.
            - scoring_config_id: int.
            - model_invocation: typing.Callable[[typing.str], typing.Any].
            A function that will call your AI model with a prompt.
        Returns:
            - Run: an object representing the test run that was executed.
        """
        run = await self.run.create(
            testset_id=input_testset_id, scoring_config_id=scoring_config_id
        )
        if run.id is None:
            raise ApiError(
                body=f"Didn't receive run id after creating run for testid={input_testset_id}"
            )
        await self.run.update_status(run.id, status="running_execution")
        testcases = await self.testset.get_testcases(input_testset_id)

        for testcase in testcases.results:
            if testcase.id is None:
                continue

            testcase_id = testcase.id
            query = testcase.user_query

            print(f"Running testcase {testcase_id}...")
            print(f"User query: {query}")

            response = await model_invocation(query)

            await self.testrecord.create(
                run_id=run.id,
                testcase_id=testcase_id,
                testset_id=input_testset_id,
                user_query=testcase.user_query,
                context=testcase.context,
                ideal=testcase.ideal,
                response=response,
            )

        await self.run.update_status(run.id, status="awaiting_scoring")

        print("Finished running testcases.")
        print(
            f"You can view the run details at https://app.getscorecard.ai/view-records/{run.id}"
        )
        return run
