# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.testset_cursor_page import TestsetCursorPage
from ..core.unchecked_base_model import construct_type
from ..errors.unauthorized_error import UnauthorizedError
from ..types.unauthenticated_error import UnauthenticatedError
from ..errors.forbidden_error import ForbiddenError
from ..types.unauthorized_error_body import UnauthorizedErrorBody
from ..errors.not_found_error import NotFoundError
from ..types.not_found_error_body import NotFoundErrorBody
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.testset import Testset
from ..core.jsonable_encoder import jsonable_encoder
from ..types.custom_schema import CustomSchema
from ..types.ingestion_method import IngestionMethod
from ..types.paginated_testcase_response import PaginatedTestcaseResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TestsetClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def get(
        self,
        *,
        cursor: typing.Optional[str] = None,
        size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestsetCursorPage:
        """
        Retrieve all Testsets with cursor-based pagination

        Parameters
        ----------
        cursor : typing.Optional[str]

        size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestsetCursorPage
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/testset",
            method="GET",
            params={
                "cursor": cursor,
                "size": size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestsetCursorPage,
                    construct_type(
                        type_=TestsetCursorPage,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(self, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Testset:
        """
        Delete a Testset

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.delete(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Testset,
                    construct_type(
                        type_=Testset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        testset_id: int,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        using_retrieval: typing.Optional[bool] = OMIT,
        custom_schema: typing.Optional[CustomSchema] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Testset:
        """
        Update a Testset.

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to update.

        name : typing.Optional[str]

        description : typing.Optional[str]
            A description for the testset.

        using_retrieval : typing.Optional[bool]
            Whether or not the testset uses retrieval.

        custom_schema : typing.Optional[CustomSchema]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.update(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}",
            method="PATCH",
            json={
                "name": name,
                "description": description,
                "using_retrieval": using_retrieval,
                "custom_schema": custom_schema,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Testset,
                    construct_type(
                        type_=Testset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def create(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        using_retrieval: typing.Optional[bool] = OMIT,
        custom_schema: typing.Optional[CustomSchema] = OMIT,
        project_id: typing.Optional[int] = OMIT,
        ingestion_method: typing.Optional[IngestionMethod] = OMIT,
        published: typing.Optional[bool] = OMIT,
        created_by_playground: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Testset:
        """
        Create a new Testset

        Parameters
        ----------
        name : str

        description : typing.Optional[str]
            A description for the testset.

        using_retrieval : typing.Optional[bool]
            Whether or not the testset uses retrieval.

        custom_schema : typing.Optional[CustomSchema]

        project_id : typing.Optional[int]
            The ID of the project to create the testset in. Omitting this optional argument will create the testset inside your Organization's default project.

        ingestion_method : typing.Optional[IngestionMethod]
            The method of ingestion for the testset.

        published : typing.Optional[bool]
            Whether or not the testset is published.

        created_by_playground : typing.Optional[bool]
            Whether or not the testset was created by the playground.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.create(
            name="name",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            "v1/testset",
            method="POST",
            json={
                "name": name,
                "description": description,
                "using_retrieval": using_retrieval,
                "custom_schema": custom_schema,
                "project_id": project_id,
                "ingestion_method": ingestion_method,
                "published": published,
                "created_by_playground": created_by_playground,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Testset,
                    construct_type(
                        type_=Testset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def read_schema(self, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> CustomSchema:
        """
        Read the schema of a Testset

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to retrieve the schema from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomSchema
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.read_schema(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/schema",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CustomSchema,
                    construct_type(
                        type_=CustomSchema,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get_testcases(
        self,
        testset_id: int,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedTestcaseResponse:
        """
        Retrieve all Testcases from a Testset

        Parameters
        ----------
        testset_id : int
            The Testset ID to retrieve testcases from.

        offset : typing.Optional[int]
            The offset to start from.

        limit : typing.Optional[int]
            The number of testcases to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedTestcaseResponse
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testset.get_testcases(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase",
            method="GET",
            params={
                "offset": offset,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedTestcaseResponse,
                    construct_type(
                        type_=PaginatedTestcaseResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTestsetClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def get(
        self,
        *,
        cursor: typing.Optional[str] = None,
        size: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestsetCursorPage:
        """
        Retrieve all Testsets with cursor-based pagination

        Parameters
        ----------
        cursor : typing.Optional[str]

        size : typing.Optional[int]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestsetCursorPage
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testset.get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/testset",
            method="GET",
            params={
                "cursor": cursor,
                "size": size,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestsetCursorPage,
                    construct_type(
                        type_=TestsetCursorPage,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(self, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None) -> Testset:
        """
        Delete a Testset

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testset.delete(
                testset_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Testset,
                    construct_type(
                        type_=Testset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        testset_id: int,
        *,
        name: typing.Optional[str] = OMIT,
        description: typing.Optional[str] = OMIT,
        using_retrieval: typing.Optional[bool] = OMIT,
        custom_schema: typing.Optional[CustomSchema] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Testset:
        """
        Update a Testset.

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to update.

        name : typing.Optional[str]

        description : typing.Optional[str]
            A description for the testset.

        using_retrieval : typing.Optional[bool]
            Whether or not the testset uses retrieval.

        custom_schema : typing.Optional[CustomSchema]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testset.update(
                testset_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}",
            method="PATCH",
            json={
                "name": name,
                "description": description,
                "using_retrieval": using_retrieval,
                "custom_schema": custom_schema,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Testset,
                    construct_type(
                        type_=Testset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def create(
        self,
        *,
        name: str,
        description: typing.Optional[str] = OMIT,
        using_retrieval: typing.Optional[bool] = OMIT,
        custom_schema: typing.Optional[CustomSchema] = OMIT,
        project_id: typing.Optional[int] = OMIT,
        ingestion_method: typing.Optional[IngestionMethod] = OMIT,
        published: typing.Optional[bool] = OMIT,
        created_by_playground: typing.Optional[bool] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Testset:
        """
        Create a new Testset

        Parameters
        ----------
        name : str

        description : typing.Optional[str]
            A description for the testset.

        using_retrieval : typing.Optional[bool]
            Whether or not the testset uses retrieval.

        custom_schema : typing.Optional[CustomSchema]

        project_id : typing.Optional[int]
            The ID of the project to create the testset in. Omitting this optional argument will create the testset inside your Organization's default project.

        ingestion_method : typing.Optional[IngestionMethod]
            The method of ingestion for the testset.

        published : typing.Optional[bool]
            Whether or not the testset is published.

        created_by_playground : typing.Optional[bool]
            Whether or not the testset was created by the playground.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Testset
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testset.create(
                name="name",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "v1/testset",
            method="POST",
            json={
                "name": name,
                "description": description,
                "using_retrieval": using_retrieval,
                "custom_schema": custom_schema,
                "project_id": project_id,
                "ingestion_method": ingestion_method,
                "published": published,
                "created_by_playground": created_by_playground,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Testset,
                    construct_type(
                        type_=Testset,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def read_schema(
        self, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> CustomSchema:
        """
        Read the schema of a Testset

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to retrieve the schema from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        CustomSchema
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testset.read_schema(
                testset_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/schema",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    CustomSchema,
                    construct_type(
                        type_=CustomSchema,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get_testcases(
        self,
        testset_id: int,
        *,
        offset: typing.Optional[int] = None,
        limit: typing.Optional[int] = None,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> PaginatedTestcaseResponse:
        """
        Retrieve all Testcases from a Testset

        Parameters
        ----------
        testset_id : int
            The Testset ID to retrieve testcases from.

        offset : typing.Optional[int]
            The offset to start from.

        limit : typing.Optional[int]
            The number of testcases to return.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        PaginatedTestcaseResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testset.get_testcases(
                testset_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase",
            method="GET",
            params={
                "offset": offset,
                "limit": limit,
            },
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    PaginatedTestcaseResponse,
                    construct_type(
                        type_=PaginatedTestcaseResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
