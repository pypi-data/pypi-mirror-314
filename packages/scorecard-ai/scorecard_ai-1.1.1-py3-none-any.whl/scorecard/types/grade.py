# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
from .score_status import ScoreStatus
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Grade(UncheckedBaseModel):
    user_id: typing.Optional[str] = None
    id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The ID of the grade.
    """

    run_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The ID of the run that created the grade.
    """

    testcase_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The ID of the testcase associated with the grade.
    """

    testrecord_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The ID of the testrecord for which the grade was created.
    """

    metric_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The ID of the metric used to compute the grade.
    """

    binary_score: typing.Optional[bool] = pydantic.Field(default=None)
    """
    The binary score assigned to the grade.
    """

    int_score: typing.Optional[int] = pydantic.Field(default=None)
    """
    The integer score assigned to the grade.
    """

    reasoning: typing.Optional[str] = pydantic.Field(default=None)
    """
    The reasoning for the assigned score.
    """

    human_eval: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Indicates if a human should assign a grade.
    """

    status: typing.Optional[ScoreStatus] = pydantic.Field(default=None)
    """
    The status of the grade.
    """

    error_message: typing.Optional[str] = pydantic.Field(default=None)
    """
    The error message if the grade was not created successfully.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    when the grade was created.
    """

    updated_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    when the grade was last updated.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
