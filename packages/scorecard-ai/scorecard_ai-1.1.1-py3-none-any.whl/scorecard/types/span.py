# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
import datetime as dt
from ..core.pydantic_utilities import IS_PYDANTIC_V2
from ..core.pydantic_utilities import update_forward_refs


class Span(UncheckedBaseModel):
    children: typing.List["Span"] = pydantic.Field(alias="Children")
    timestamp: dt.datetime = pydantic.Field(alias="Timestamp")
    trace_id: str = pydantic.Field(alias="TraceId")
    span_id: str = pydantic.Field(alias="SpanId")
    parent_span_id: str = pydantic.Field(alias="ParentSpanId")
    trace_state: str = pydantic.Field(alias="TraceState")
    span_name: str = pydantic.Field(alias="SpanName")
    span_kind: str = pydantic.Field(alias="SpanKind")
    service_name: str = pydantic.Field(alias="ServiceName")
    resource_attributes: typing.Dict[str, str] = pydantic.Field(alias="ResourceAttributes")
    scope_name: str = pydantic.Field(alias="ScopeName")
    scope_version: str = pydantic.Field(alias="ScopeVersion")
    span_attributes: typing.Dict[str, str] = pydantic.Field(alias="SpanAttributes")
    duration: int = pydantic.Field(alias="Duration")
    status_code: str = pydantic.Field(alias="StatusCode")
    status_message: str = pydantic.Field(alias="StatusMessage")
    events_timestamp: typing.List[dt.datetime] = pydantic.Field(alias="Events.Timestamp")
    events_name: typing.List[str] = pydantic.Field(alias="Events.Name")
    events_attributes: typing.List[typing.Dict[str, str]] = pydantic.Field(alias="Events.Attributes")
    links_trace_id: typing.List[str] = pydantic.Field(alias="Links.TraceId")
    links_span_id: typing.List[str] = pydantic.Field(alias="Links.SpanId")
    links_trace_state: typing.List[str] = pydantic.Field(alias="Links.TraceState")
    links_attributes: typing.List[typing.Dict[str, str]] = pydantic.Field(alias="Links.Attributes")

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


update_forward_refs(Span)
