# This file was auto-generated by Fern from our API Definition.

from ..core.unchecked_base_model import UncheckedBaseModel
import typing
import pydantic
import datetime as dt
from .custom_schema import CustomSchema
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Testset(UncheckedBaseModel):
    id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The ID of the testset.
    """

    created_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The creation date and time of the testset.
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    A human-readable name for the testset. This will be displayed in the UI.
    """

    description: typing.Optional[str] = pydantic.Field(default=None)
    """
    A description for the testset.
    """

    using_retrieval: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether or not the testset uses retrieval.
    """

    ingestion_method: typing.Optional[str] = pydantic.Field(default=None)
    """
    The method used to ingest the testset.
    """

    num_testcases: typing.Optional[int] = pydantic.Field(default=None)
    """
    The number of testcases in the testset.
    """

    published: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether or not the testset is published.
    """

    updated_at: typing.Optional[dt.datetime] = pydantic.Field(default=None)
    """
    The last time the testset was updated.
    """

    is_archived: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether or not the testset is archived.
    """

    project_id: typing.Optional[int] = pydantic.Field(default=None)
    """
    The ID of the project the testset belongs to.
    """

    custom_schema: typing.Optional[CustomSchema] = None
    created_by_playground: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Whether or not the testset was created by the playground.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
