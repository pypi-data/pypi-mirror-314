# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..core.request_options import RequestOptions
from ..types.grade import Grade
from ..core.jsonable_encoder import jsonable_encoder
from ..core.unchecked_base_model import construct_type
from ..errors.unauthorized_error import UnauthorizedError
from ..types.unauthenticated_error import UnauthenticatedError
from ..errors.forbidden_error import ForbiddenError
from ..types.unauthorized_error_body import UnauthorizedErrorBody
from ..errors.not_found_error import NotFoundError
from ..types.not_found_error_body import NotFoundErrorBody
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ScoreClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        run_id: int,
        testrecord_id: int,
        *,
        metric_id: int,
        int_score: typing.Optional[int] = OMIT,
        binary_score: typing.Optional[bool] = OMIT,
        reasoning: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Grade:
        """
        Create a score

        Parameters
        ----------
        run_id : int
            The ID of the run that created the testrecord to be scored.

        testrecord_id : int
            The ID of the testrecord to be scored.

        metric_id : int
            The ID of the metric

        int_score : typing.Optional[int]
            Specify integer scores.

        binary_score : typing.Optional[bool]
            Specify boolean scores.

        reasoning : typing.Optional[str]
            The reasoning for the assigned score.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Grade
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.score.create(
            run_id=1,
            testrecord_id=1,
            metric_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/run/{jsonable_encoder(run_id)}/testrecord/{jsonable_encoder(testrecord_id)}/score",
            method="POST",
            json={
                "metric_id": metric_id,
                "int_score": int_score,
                "binary_score": binary_score,
                "reasoning": reasoning,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Grade,
                    construct_type(
                        type_=Grade,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        run_id: int,
        testrecord_id: int,
        score_id: int,
        *,
        int_score: typing.Optional[int] = OMIT,
        binary_score: typing.Optional[bool] = OMIT,
        reasoning: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Grade:
        """
        Update a score

        Parameters
        ----------
        run_id : int
            The run ID that created the test record to be scored.

        testrecord_id : int
            The ID of the testrecord whose score will be updated.

        score_id : int
            The ID of the score to be updated.

        int_score : typing.Optional[int]
            The new integer score to assign.

        binary_score : typing.Optional[bool]
            The new boolean score to assign.

        reasoning : typing.Optional[str]
            The reasoning for the score update.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Grade
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.score.update(
            run_id=1,
            testrecord_id=1,
            score_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/run/{jsonable_encoder(run_id)}/testrecord/{jsonable_encoder(testrecord_id)}/score/{jsonable_encoder(score_id)}",
            method="PATCH",
            json={
                "int_score": int_score,
                "binary_score": binary_score,
                "reasoning": reasoning,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Grade,
                    construct_type(
                        type_=Grade,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncScoreClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        run_id: int,
        testrecord_id: int,
        *,
        metric_id: int,
        int_score: typing.Optional[int] = OMIT,
        binary_score: typing.Optional[bool] = OMIT,
        reasoning: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Grade:
        """
        Create a score

        Parameters
        ----------
        run_id : int
            The ID of the run that created the testrecord to be scored.

        testrecord_id : int
            The ID of the testrecord to be scored.

        metric_id : int
            The ID of the metric

        int_score : typing.Optional[int]
            Specify integer scores.

        binary_score : typing.Optional[bool]
            Specify boolean scores.

        reasoning : typing.Optional[str]
            The reasoning for the assigned score.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Grade
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.score.create(
                run_id=1,
                testrecord_id=1,
                metric_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/run/{jsonable_encoder(run_id)}/testrecord/{jsonable_encoder(testrecord_id)}/score",
            method="POST",
            json={
                "metric_id": metric_id,
                "int_score": int_score,
                "binary_score": binary_score,
                "reasoning": reasoning,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Grade,
                    construct_type(
                        type_=Grade,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        run_id: int,
        testrecord_id: int,
        score_id: int,
        *,
        int_score: typing.Optional[int] = OMIT,
        binary_score: typing.Optional[bool] = OMIT,
        reasoning: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> Grade:
        """
        Update a score

        Parameters
        ----------
        run_id : int
            The run ID that created the test record to be scored.

        testrecord_id : int
            The ID of the testrecord whose score will be updated.

        score_id : int
            The ID of the score to be updated.

        int_score : typing.Optional[int]
            The new integer score to assign.

        binary_score : typing.Optional[bool]
            The new boolean score to assign.

        reasoning : typing.Optional[str]
            The reasoning for the score update.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        Grade
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.score.update(
                run_id=1,
                testrecord_id=1,
                score_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/run/{jsonable_encoder(run_id)}/testrecord/{jsonable_encoder(testrecord_id)}/score/{jsonable_encoder(score_id)}",
            method="PATCH",
            json={
                "int_score": int_score,
                "binary_score": binary_score,
                "reasoning": reasoning,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    Grade,
                    construct_type(
                        type_=Grade,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
