# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .types.testcase_create_params_custom_inputs_value import TestcaseCreateParamsCustomInputsValue
from .types.testcase_create_params_custom_labels_value import TestcaseCreateParamsCustomLabelsValue
from ..core.request_options import RequestOptions
from ..types.test_case import TestCase
from ..core.jsonable_encoder import jsonable_encoder
from ..core.unchecked_base_model import construct_type
from ..errors.unauthorized_error import UnauthorizedError
from ..types.unauthenticated_error import UnauthenticatedError
from ..errors.forbidden_error import ForbiddenError
from ..types.unauthorized_error_body import UnauthorizedErrorBody
from ..errors.not_found_error import NotFoundError
from ..types.not_found_error_body import NotFoundErrorBody
from ..errors.unprocessable_entity_error import UnprocessableEntityError
from ..types.http_validation_error import HttpValidationError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.testcase_deletion_response import TestcaseDeletionResponse
from .types.testcase_update_params_custom_inputs_value import TestcaseUpdateParamsCustomInputsValue
from .types.testcase_update_params_custom_labels_value import TestcaseUpdateParamsCustomLabelsValue
from ..types.testcase_batch_deletion_response import TestcaseBatchDeletionResponse
from ..core.client_wrapper import AsyncClientWrapper

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TestcaseClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        testset_id: int,
        *,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        custom_inputs: typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomInputsValue]]] = OMIT,
        custom_labels: typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomLabelsValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestCase:
        """
        Create a new Testcase

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to create the Testcase in.

        user_query : typing.Optional[str]
            The user query to be executed.

        context : typing.Optional[str]
            The context to be used while generating the testcase.

        ideal : typing.Optional[str]
            The ideal response to the user query.

        custom_inputs : typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomInputsValue]]]

        custom_labels : typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomLabelsValue]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestCase
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testcase.create(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase",
            method="POST",
            json={
                "user_query": user_query,
                "context": context,
                "ideal": ideal,
                "custom_inputs": custom_inputs,
                "custom_labels": custom_labels,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestCase,
                    construct_type(
                        type_=TestCase,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, testcase_id: int, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestCase:
        """
        Retrieve Testcase data

        Parameters
        ----------
        testcase_id : int
            The ID of the Testcase to retrieve.

        testset_id : int
            The ID of the Testset to retrieve the Testcase from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestCase
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testcase.get(
            testcase_id=1,
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase/{jsonable_encoder(testcase_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestCase,
                    construct_type(
                        type_=TestCase,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def delete(
        self, testcase_id: int, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestcaseDeletionResponse:
        """
        Delete a Testcase

        Parameters
        ----------
        testcase_id : int
            The ID of the Testcase to delete.

        testset_id : int
            The ID of the Testset to delete the Testcase from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestcaseDeletionResponse
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testcase.delete(
            testcase_id=1,
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase/{jsonable_encoder(testcase_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestcaseDeletionResponse,
                    construct_type(
                        type_=TestcaseDeletionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def update(
        self,
        testcase_id: int,
        testset_id: int,
        *,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        custom_inputs: typing.Optional[typing.Dict[str, typing.Optional[TestcaseUpdateParamsCustomInputsValue]]] = OMIT,
        custom_labels: typing.Optional[typing.Dict[str, typing.Optional[TestcaseUpdateParamsCustomLabelsValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestCase:
        """
        Update a Testcase.

        Parameters
        ----------
        testcase_id : int
            The ID of the Testcase to update.

        testset_id : int
            The ID of the Testset to retrieve the Testcase from.

        user_query : typing.Optional[str]
            The user query to be executed.

        context : typing.Optional[str]
            The context to be used while generating the testcase.

        ideal : typing.Optional[str]
            The ideal response to the user query.

        custom_inputs : typing.Optional[typing.Dict[str, typing.Optional[TestcaseUpdateParamsCustomInputsValue]]]

        custom_labels : typing.Optional[typing.Dict[str, typing.Optional[TestcaseUpdateParamsCustomLabelsValue]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestCase
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testcase.update(
            testcase_id=1,
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase/{jsonable_encoder(testcase_id)}",
            method="PATCH",
            json={
                "user_query": user_query,
                "context": context,
                "ideal": ideal,
                "custom_inputs": custom_inputs,
                "custom_labels": custom_labels,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestCase,
                    construct_type(
                        type_=TestCase,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def batch_copy(
        self,
        testset_id: int,
        *,
        ids: typing.Optional[typing.Sequence[int]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TestCase]:
        """
        Batch copy Testcases

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to create the Testcase in.

        ids : typing.Optional[typing.Sequence[int]]
            List of Testcase IDs to copy.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TestCase]
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testcase.batch_copy(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase/batch_copy",
            method="POST",
            json={
                "ids": ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[TestCase],
                    construct_type(
                        type_=typing.List[TestCase],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def batch_delete(
        self,
        testset_id: int,
        *,
        ids: typing.Optional[typing.Sequence[int]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestcaseBatchDeletionResponse:
        """
        Batch delete Testcases

        Parameters
        ----------
        testset_id : int
            The ID of the Testset from which the Testcases will be deleted.

        ids : typing.Optional[typing.Sequence[int]]
            List of Testcase IDs to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestcaseBatchDeletionResponse
            Successful Response

        Examples
        --------
        from scorecard import Scorecard

        client = Scorecard(
            api_key="YOUR_API_KEY",
        )
        client.testcase.batch_delete(
            testset_id=1,
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase/batch_delete",
            method="PATCH",
            json={
                "ids": ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestcaseBatchDeletionResponse,
                    construct_type(
                        type_=TestcaseBatchDeletionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncTestcaseClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        testset_id: int,
        *,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        custom_inputs: typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomInputsValue]]] = OMIT,
        custom_labels: typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomLabelsValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestCase:
        """
        Create a new Testcase

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to create the Testcase in.

        user_query : typing.Optional[str]
            The user query to be executed.

        context : typing.Optional[str]
            The context to be used while generating the testcase.

        ideal : typing.Optional[str]
            The ideal response to the user query.

        custom_inputs : typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomInputsValue]]]

        custom_labels : typing.Optional[typing.Dict[str, typing.Optional[TestcaseCreateParamsCustomLabelsValue]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestCase
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testcase.create(
                testset_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase",
            method="POST",
            json={
                "user_query": user_query,
                "context": context,
                "ideal": ideal,
                "custom_inputs": custom_inputs,
                "custom_labels": custom_labels,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestCase,
                    construct_type(
                        type_=TestCase,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, testcase_id: int, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestCase:
        """
        Retrieve Testcase data

        Parameters
        ----------
        testcase_id : int
            The ID of the Testcase to retrieve.

        testset_id : int
            The ID of the Testset to retrieve the Testcase from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestCase
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testcase.get(
                testcase_id=1,
                testset_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase/{jsonable_encoder(testcase_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestCase,
                    construct_type(
                        type_=TestCase,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def delete(
        self, testcase_id: int, testset_id: int, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TestcaseDeletionResponse:
        """
        Delete a Testcase

        Parameters
        ----------
        testcase_id : int
            The ID of the Testcase to delete.

        testset_id : int
            The ID of the Testset to delete the Testcase from.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestcaseDeletionResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testcase.delete(
                testcase_id=1,
                testset_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase/{jsonable_encoder(testcase_id)}",
            method="DELETE",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestcaseDeletionResponse,
                    construct_type(
                        type_=TestcaseDeletionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def update(
        self,
        testcase_id: int,
        testset_id: int,
        *,
        user_query: typing.Optional[str] = OMIT,
        context: typing.Optional[str] = OMIT,
        ideal: typing.Optional[str] = OMIT,
        custom_inputs: typing.Optional[typing.Dict[str, typing.Optional[TestcaseUpdateParamsCustomInputsValue]]] = OMIT,
        custom_labels: typing.Optional[typing.Dict[str, typing.Optional[TestcaseUpdateParamsCustomLabelsValue]]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestCase:
        """
        Update a Testcase.

        Parameters
        ----------
        testcase_id : int
            The ID of the Testcase to update.

        testset_id : int
            The ID of the Testset to retrieve the Testcase from.

        user_query : typing.Optional[str]
            The user query to be executed.

        context : typing.Optional[str]
            The context to be used while generating the testcase.

        ideal : typing.Optional[str]
            The ideal response to the user query.

        custom_inputs : typing.Optional[typing.Dict[str, typing.Optional[TestcaseUpdateParamsCustomInputsValue]]]

        custom_labels : typing.Optional[typing.Dict[str, typing.Optional[TestcaseUpdateParamsCustomLabelsValue]]]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestCase
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testcase.update(
                testcase_id=1,
                testset_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase/{jsonable_encoder(testcase_id)}",
            method="PATCH",
            json={
                "user_query": user_query,
                "context": context,
                "ideal": ideal,
                "custom_inputs": custom_inputs,
                "custom_labels": custom_labels,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestCase,
                    construct_type(
                        type_=TestCase,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def batch_copy(
        self,
        testset_id: int,
        *,
        ids: typing.Optional[typing.Sequence[int]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> typing.List[TestCase]:
        """
        Batch copy Testcases

        Parameters
        ----------
        testset_id : int
            The ID of the Testset to create the Testcase in.

        ids : typing.Optional[typing.Sequence[int]]
            List of Testcase IDs to copy.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        typing.List[TestCase]
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testcase.batch_copy(
                testset_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase/batch_copy",
            method="POST",
            json={
                "ids": ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    typing.List[TestCase],
                    construct_type(
                        type_=typing.List[TestCase],  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def batch_delete(
        self,
        testset_id: int,
        *,
        ids: typing.Optional[typing.Sequence[int]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TestcaseBatchDeletionResponse:
        """
        Batch delete Testcases

        Parameters
        ----------
        testset_id : int
            The ID of the Testset from which the Testcases will be deleted.

        ids : typing.Optional[typing.Sequence[int]]
            List of Testcase IDs to delete.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TestcaseBatchDeletionResponse
            Successful Response

        Examples
        --------
        import asyncio

        from scorecard import AsyncScorecard

        client = AsyncScorecard(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.testcase.batch_delete(
                testset_id=1,
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"v1/testset/{jsonable_encoder(testset_id)}/testcase/batch_delete",
            method="PATCH",
            json={
                "ids": ids,
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(
                    TestcaseBatchDeletionResponse,
                    construct_type(
                        type_=TestcaseBatchDeletionResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        UnauthenticatedError,
                        construct_type(
                            type_=UnauthenticatedError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(
                        UnauthorizedErrorBody,
                        construct_type(
                            type_=UnauthorizedErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 404:
                raise NotFoundError(
                    typing.cast(
                        NotFoundErrorBody,
                        construct_type(
                            type_=NotFoundErrorBody,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 422:
                raise UnprocessableEntityError(
                    typing.cast(
                        HttpValidationError,
                        construct_type(
                            type_=HttpValidationError,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
