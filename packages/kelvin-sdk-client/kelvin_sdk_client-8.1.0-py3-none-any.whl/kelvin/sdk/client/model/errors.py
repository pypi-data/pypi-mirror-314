# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2024-02-05T18:54:09+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic.v1 import Field

from kelvin.sdk.client.data_model import DataModelBase


class Error(DataModelBase):
    """
    Error object.

    Parameters
    ----------
    description: Optional[str]
    name: Optional[str]
    payload: Optional[List]
    solution: Optional[str]
    title: Optional[str]
    type: Optional[str]

    """

    description: Optional[str] = Field(None, description="Description of what the error is about.")
    name: Optional[str] = Field(None, description="Unique identifier name of the error.")
    payload: Optional[List] = Field(
        None,
        description="A dictionary of all the individual error names, error titles, descriptions and solutions within the submitted information.",
    )
    solution: Optional[str] = Field(None, description="Possible solutions to resolve the error.")
    title: Optional[str] = Field(None, description="The Display name (title) of the error.")
    type: Optional[str] = Field(
        None, description="The type of error that has occured, e.g. `system`."
    )


class ErrorMessage(DataModelBase):
    """
    ErrorMessage object.

    Parameters
    ----------
    errors: Optional[List[Error]]

    """

    errors: Optional[List[Error]] = Field(
        None,
        description="Array of dictionary objects detailing all errors that were found in the request data.",
    )
