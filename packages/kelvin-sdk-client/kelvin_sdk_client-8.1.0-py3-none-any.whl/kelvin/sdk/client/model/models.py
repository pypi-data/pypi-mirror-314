# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2024-02-05T18:54:09+00:00

from __future__ import annotations

from typing import TYPE_CHECKING, Any, List, Mapping, Optional, Sequence, Union

from typing_extensions import Literal

from kelvin.sdk.client.data_model import DataModelBase
from kelvin.sdk.client.utils import instance_classmethod

if TYPE_CHECKING:
    from . import kerrors, requests, responses


class AppStatusResourceCount(DataModelBase):
    """
    AppStatusResourceCount object.

    Parameters
    ----------
    running: Optional[int]
    total: Optional[int]

    """

    running: Optional[int] = None
    total: Optional[int] = None


class AppVersion(DataModelBase):
    """
    AppVersion object.

    Parameters
    ----------
    created: Optional[str]
    id: Optional[str]
    updated: Optional[str]
    version: Optional[str]

    """

    created: Optional[str] = None
    id: Optional[str] = None
    updated: Optional[str] = None
    version: Optional[str] = None


class AppVersionResumedProjection(DataModelBase):
    """
    AppVersionResumedProjection object.

    Parameters
    ----------
    description: Optional[str]
    name: Optional[str]
    title: Optional[str]
    version: Optional[str]

    """

    description: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    version: Optional[str] = None

    @classmethod
    def get_app_manager_resource(
        cls,
        resource_krn: str,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 10000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AppVersionResumedProjection], responses.ListAppVersionResumedPaginatedResponse]:
        """
        Get App Manager Resource

        **Pagination Sortable Columns:** `name`, `title`, `description`, `version`

        **Permission Required:** `kelvin.permission.appmanager.read`.

        ``getAppManagerResource``: ``GET`` ``/api/v4/app-manager/resource/{resource_krn}/get``

        Parameters
        ----------
        resource_krn : :obj:`str`, optional
            Resource krn
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Method of handling pages in the returned data. There are three options
            available;</p> limits: This is used with the query parameters `page“
            to select which page of data to return. The start of the data returned
            will be calculated using the `page_size“ and `page` query parameters
            for the location to start and the query parameters `sort_by` and
            `direction` will determine the order of the data.</p> cursor: This is
            used with the query parameters `next` and `previous` which uses a
            string as the start or end location reference. The string to use is
            returned in the previous query json response in the keys `next_page`
            and `previous_page`.</p> stream: This will return all the data in one
            response. (limits, cursor, stream)
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> failure statistic objects to be returned. Page size can be
            between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistic objects.
        page : :obj:`int`
            Used only with query parameter `pagination_type` set as `limits`.</p>
            An integer for the wanted page of results. The start of the data
            returned will be calculated using the `page_size“ and `page` query
            parameters for the location to start and the query parameters
            `sort_by` and `direction` will determine the order of the data.
        next : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        previous : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        direction : :obj:`Literal['asc', 'desc']`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `asc` (ascending order) and
            `desc` (descending order).</p> The default is `asc` (ascending). (asc,
            desc)
        sort_by : :obj:`Sequence[str]`
            Sort the results by one of the following options; `name`, `title`,
            `description` and `version`.

        """

        from . import kerrors, responses

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/app-manager/resource/{resource_krn}/get",
            {"resource_krn": resource_krn},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": responses.ListAppVersionResumedPaginatedResponse,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
                "404": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/app-manager/resource/{resource_krn}/get", "GET")
            if fetch and not _dry_run
            else result
        )


class AppDetails(DataModelBase):
    """
    AppDetails object.

    Parameters
    ----------
    created: Optional[str]
    description: Optional[str]
    latest_version: Optional[str]
    name: Optional[str]
    title: Optional[str]
    updated: Optional[str]
    versions: Optional[List[AppVersion]]

    """

    created: Optional[str] = None
    description: Optional[str] = None
    latest_version: Optional[str] = None
    name: Optional[str] = None
    title: Optional[str] = None
    updated: Optional[str] = None
    versions: Optional[List[AppVersion]] = None


class AppStatus(DataModelBase):
    """
    AppStatus object.

    Parameters
    ----------
    last_seen: Optional[str]
    resource_count: Optional[AppStatusResourceCount]
    status: Optional[str]

    """

    last_seen: Optional[str] = None
    resource_count: Optional[AppStatusResourceCount] = None
    status: Optional[str] = None


class AppProjection(DataModelBase):
    """
    AppProjection object.

    Parameters
    ----------
    app: Optional[AppDetails]
    status: Optional[AppStatus]
    updated: Optional[str]
    updated_by: Optional[str]

    """

    app: Optional[AppDetails] = None
    status: Optional[AppStatus] = None
    updated: Optional[str] = None
    updated_by: Optional[str] = None

    @classmethod
    def get_app_manager_app(
        cls, app_name: str, _dry_run: bool = False, _client: Any = None
    ) -> AppProjection:
        """
        Get App Manager App

        **Permission Required:** `kelvin.permission.appmanager.read`.

        ``getAppManagerApp``: ``GET`` ``/api/v4/app-manager/app/{app_name}/get``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name

        """

        from . import kerrors

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/app-manager/app/{app_name}/get",
            {"app_name": app_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": AppProjection,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
                "404": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def get_app_planner_rules(
        cls, app_name: str, _dry_run: bool = False, _client: Any = None
    ) -> responses.PlannerRulesResponse:
        """
        Get App Planner Rules

        **Permission Required:** `kelvin.permission.appmanager.read`.

        ``getAppPlannerRules``: ``GET`` ``/api/v4/app-manager/app/{app_name}/planner-rules/get``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name

        """

        from . import kerrors, responses

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/app-manager/app/{app_name}/planner-rules/get",
            {"app_name": app_name},
            {},
            {},
            {},
            None,
            None,
            False,
            {
                "200": responses.PlannerRulesResponse,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
                "404": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return result

    @classmethod
    def update_app_planner_rules(
        cls,
        app_name: str,
        data: Optional[Union[requests.PlannerRulesUpdateRequest, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> responses.PlannerRulesResponse:
        """
        Update App Planner Rules

        **Permission Required:** `kelvin.permission.appmanager.update`.

        ``updateAppPlannerRules``: ``POST`` ``/api/v4/app-manager/app/{app_name}/planner-rules/update``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        data: requests.PlannerRulesUpdateRequest, optional
        **kwargs:
            Extra parameters for requests.PlannerRulesUpdateRequest
              - cluster: str
              - max_resources: int

        """

        from . import kerrors, responses

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/app-manager/app/{app_name}/planner-rules/update",
            {"app_name": app_name},
            {},
            {},
            {},
            data,
            "requests.PlannerRulesUpdateRequest",
            False,
            {
                "200": responses.PlannerRulesResponse,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
                "404": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_app_manager_app_resources(
        cls,
        app_name: str,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 10000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        data: Optional[Union[requests.ListResourcesRequest, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[responses.ResourceAppProjection], responses.ListResourcesPaginatedResponse]:
        """
        List App Manager App Resources
        **Pagination Sortable Columns:** `name`, `title`, `status`, `created`, `updated`

        **Permission Required:** `kelvin.permission.appmanager.read`.

        ``listAppManagerAppResources``: ``POST`` ``/api/v4/app-manager/app/{app_name}/resources/list``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Method of handling pages in the returned data. There are three options
            available;</p> limits: This is used with the query parameters `page“
            to select which page of data to return. The start of the data returned
            will be calculated using the `page_size“ and `page` query parameters
            for the location to start and the query parameters `sort_by` and
            `direction` will determine the order of the data.</p> cursor: This is
            used with the query parameters `next` and `previous` which uses a
            string as the start or end location reference. The string to use is
            returned in the previous query json response in the keys `next_page`
            and `previous_page`.</p> stream: This will return all the data in one
            response. (limits, cursor, stream)
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> failure statistic objects to be returned. Page size can be
            between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistic objects.
        page : :obj:`int`
            Used only with query parameter `pagination_type` set as `limits`.</p>
            An integer for the wanted page of results. The start of the data
            returned will be calculated using the `page_size“ and `page` query
            parameters for the location to start and the query parameters
            `sort_by` and `direction` will determine the order of the data.
        next : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        previous : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        direction : :obj:`Literal['asc', 'desc']`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `asc` (ascending order) and
            `desc` (descending order).</p> The default is `asc` (ascending). (asc,
            desc)
        sort_by : :obj:`Sequence[str]`
            Sort the results by one of the following options; `workload_name`,
            `workload_cluster`, `app_name`, `app_title`, `app_description`,
            `app_version`, `resource_name`, `resource_title`, `resource_created`,
            `resource_updated`, `status`, `status_last_seen`, `status_updated` and
            `status_updated_by`.</p> The default is `workload_name`
        data: requests.ListResourcesRequest, optional
        **kwargs:
            Extra parameters for requests.ListResourcesRequest
              - app_versions: list
              - enabled_states: list
              - resources: list
              - statuses: list

        """

        from . import kerrors, responses

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/app-manager/app/{app_name}/resources/list",
            {"app_name": app_name},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            "requests.ListResourcesRequest",
            False,
            {
                "200": responses.ListResourcesPaginatedResponse,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/app-manager/app/{app_name}/resources/list", "POST")
            if fetch and not _dry_run
            else result
        )

    @classmethod
    def get_data_mapping(
        cls,
        app_name: str,
        version: str,
        data: Optional[Union[requests.DataMappingsRequest, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> responses.DataMappingsResponse:
        """
        Get Data Mapping

        **Permission Required:** `kelvin.permission.appmanager.read`.

        ``getDataMapping``: ``POST`` ``/api/v4/app-manager/app/{app_name}/v/{version}/data-mapping``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        version : :obj:`str`, optional
            App version
        data: requests.DataMappingsRequest, optional
        **kwargs:
            Extra parameters for requests.DataMappingsRequest
              - resources: list

        """

        from . import kerrors, responses

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/app-manager/app/{app_name}/v/{version}/data-mapping",
            {"app_name": app_name, "version": version},
            {},
            {},
            {},
            data,
            "requests.DataMappingsRequest",
            False,
            {
                "200": responses.DataMappingsResponse,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def deploy_app_manager_app_version(
        cls,
        app_name: str,
        version: str,
        dry_run: Optional[bool] = None,
        data: Optional[Union[requests.ExecuteDeploymentRequest, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> responses.Deployment:
        """
        Deploy App Manager App Version Workloads

        **Permission Required:** `kelvin.permission.appmanager.create`.

        ``deployAppManagerAppVersion``: ``POST`` ``/api/v4/app-manager/app/{app_name}/v/{version}/deploy``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        version : :obj:`str`, optional
            App version
        dry_run : :obj:`bool`
            Dry Run
        data: requests.ExecuteDeploymentRequest, optional
        **kwargs:
            Extra parameters for requests.ExecuteDeploymentRequest
              - mappings: str
              - resources: list

        """

        from . import kerrors, responses

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/app-manager/app/{app_name}/v/{version}/deploy",
            {"app_name": app_name, "version": version},
            {"dry_run": dry_run},
            {},
            {},
            data,
            "requests.ExecuteDeploymentRequest",
            False,
            {
                "201": responses.Deployment,
                "207": responses.Deployment,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def start_app_manager_app_version(
        cls,
        app_name: str,
        version: str,
        data: Optional[Union[requests.ExecuteActionRequest, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Start App Manager App Version Workloads

        **Permission Required:** `kelvin.permission.appmanager.update`.

        ``startAppManagerAppVersion``: ``POST`` ``/api/v4/app-manager/app/{app_name}/v/{version}/start``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        version : :obj:`str`, optional
            App version
        data: requests.ExecuteActionRequest, optional
        **kwargs:
            Extra parameters for requests.ExecuteActionRequest
              - resources: list

        """

        from . import kerrors

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/app-manager/app/{app_name}/v/{version}/start",
            {"app_name": app_name, "version": version},
            {},
            {},
            {},
            data,
            "requests.ExecuteActionRequest",
            False,
            {
                "200": None,
                "207": kerrors.ErrorMessage,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def stop_app_manager_app_version(
        cls,
        app_name: str,
        version: str,
        data: Optional[Union[requests.ExecuteActionRequest, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Stop App Manager App Version Workloads

        **Permission Required:** `kelvin.permission.appmanager.update`.

        ``stopAppManagerAppVersion``: ``POST`` ``/api/v4/app-manager/app/{app_name}/v/{version}/stop``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        version : :obj:`str`, optional
            App version
        data: requests.ExecuteActionRequest, optional
        **kwargs:
            Extra parameters for requests.ExecuteActionRequest
              - resources: list

        """

        from . import kerrors

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/app-manager/app/{app_name}/v/{version}/stop",
            {"app_name": app_name, "version": version},
            {},
            {},
            {},
            data,
            "requests.ExecuteActionRequest",
            False,
            {
                "200": None,
                "207": kerrors.ErrorMessage,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def undeploy_app_manager_app_version(
        cls,
        app_name: str,
        version: str,
        data: Optional[Union[requests.ExecuteActionRequest, Mapping[str, Any]]] = None,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> None:
        """
        Undeploy App Manager App Version Workloads

        **Permission Required:** `kelvin.permission.appmanager.delete`.

        ``undeployAppManagerAppVersion``: ``POST`` ``/api/v4/app-manager/app/{app_name}/v/{version}/undeploy``

        Parameters
        ----------
        app_name : :obj:`str`, optional
            App name
        version : :obj:`str`, optional
            App version
        data: requests.ExecuteActionRequest, optional
        **kwargs:
            Extra parameters for requests.ExecuteActionRequest
              - resources: list

        """

        from . import kerrors

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/app-manager/app/{app_name}/v/{version}/undeploy",
            {"app_name": app_name, "version": version},
            {},
            {},
            {},
            data,
            "requests.ExecuteActionRequest",
            False,
            {
                "200": None,
                "207": kerrors.ErrorMessage,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return result

    @classmethod
    def list_app_manager_apps(
        cls,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 10000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        data: Optional[Union[requests.ListAppsRequest, Mapping[str, Any]]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
        **kwargs: Any,
    ) -> Union[List[AppProjection], responses.ListAppsPaginatedResponse]:
        """
        List App Manager Apps

        **Pagination Sortable Columns:** `name`, `title`, `description`, `created`, `updated`, `status`

        **Permission Required:** `kelvin.permission.appmanager.read`.

        ``listAppManagerApps``: ``POST`` ``/api/v4/app-manager/list``

        Parameters
        ----------
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Method of handling pages in the returned data. There are three options
            available;</p> limits: This is used with the query parameters `page“
            to select which page of data to return. The start of the data returned
            will be calculated using the `page_size“ and `page` query parameters
            for the location to start and the query parameters `sort_by` and
            `direction` will determine the order of the data.</p> cursor: This is
            used with the query parameters `next` and `previous` which uses a
            string as the start or end location reference. The string to use is
            returned in the previous query json response in the keys `next_page`
            and `previous_page`.</p> stream: This will return all the data in one
            response. (limits, cursor, stream)
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> failure statistic objects to be returned. Page size can be
            between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistic objects.
        page : :obj:`int`
            Used only with query parameter `pagination_type` set as `limits`.</p>
            An integer for the wanted page of results. The start of the data
            returned will be calculated using the `page_size“ and `page` query
            parameters for the location to start and the query parameters
            `sort_by` and `direction` will determine the order of the data.
        next : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        previous : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        direction : :obj:`Literal['asc', 'desc']`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `asc` (ascending order) and
            `desc` (descending order).</p> The default is `asc` (ascending). (asc,
            desc)
        sort_by : :obj:`Sequence[str]`
            Sort the results by one of the following options; `name`, `title`,
            `description`, `created`, `updated`, `status`, `updated_by`,
            `status_updated`, and `last_seen`.</p> The default is `name`
        data: requests.ListAppsRequest, optional
        **kwargs:
            Extra parameters for requests.ListAppsRequest
              - app_names: list
              - resources: list
              - search: str
              - statuses: list

        """

        from . import kerrors, responses

        result = cls._make_request(
            _client,
            "post",
            "/api/v4/app-manager/list",
            {},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            data,
            "requests.ListAppsRequest",
            False,
            {
                "200": responses.ListAppsPaginatedResponse,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
            kwargs,
        )
        return (
            result.fetch("/api/v4/app-manager/list", "POST") if fetch and not _dry_run else result
        )

    @classmethod
    def get_app_manager_resource(
        cls,
        resource_krn: str,
        pagination_type: Optional[Literal["limits", "cursor", "stream"]] = None,
        page_size: Optional[int] = 10000,
        page: Optional[int] = None,
        next: Optional[str] = None,
        previous: Optional[str] = None,
        direction: Optional[Literal["asc", "desc"]] = None,
        sort_by: Optional[Sequence[str]] = None,
        fetch: bool = True,
        _dry_run: bool = False,
        _client: Any = None,
    ) -> Union[List[AppVersionResumedProjection], responses.ListAppVersionResumedPaginatedResponse]:
        """
        Get App Manager Resource

        **Pagination Sortable Columns:** `name`, `title`, `description`, `version`

        **Permission Required:** `kelvin.permission.appmanager.read`.

        ``getAppManagerResource``: ``GET`` ``/api/v4/app-manager/resource/{resource_krn}/get``

        Parameters
        ----------
        resource_krn : :obj:`str`, optional
            Resource krn
        pagination_type : :obj:`Literal['limits', 'cursor', 'stream']`
            Method of handling pages in the returned data. There are three options
            available;</p> limits: This is used with the query parameters `page“
            to select which page of data to return. The start of the data returned
            will be calculated using the `page_size“ and `page` query parameters
            for the location to start and the query parameters `sort_by` and
            `direction` will determine the order of the data.</p> cursor: This is
            used with the query parameters `next` and `previous` which uses a
            string as the start or end location reference. The string to use is
            returned in the previous query json response in the keys `next_page`
            and `previous_page`.</p> stream: This will return all the data in one
            response. (limits, cursor, stream)
        page_size : :obj:`int`
            Number of <a href='https://docs.kelvininc.com/latest/kelvin-
            overview/kelvin-platform/kelvin-assets/' target='_blank'>Kelvin
            Assets</a> failure statistic objects to be returned. Page size can be
            between 1 and 1000 objects.</p> The default is 20 <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistic objects.
        page : :obj:`int`
            Used only with query parameter `pagination_type` set as `limits`.</p>
            An integer for the wanted page of results. The start of the data
            returned will be calculated using the `page_size“ and `page` query
            parameters for the location to start and the query parameters
            `sort_by` and `direction` will determine the order of the data.
        next : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the next page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> next_page alphanumeric string should be used here to
            show a list of the next page of results.
        previous : :obj:`str`
            Used only with query parameter `pagination_type` set as `cursor`.</p>
            An alphanumeric string to move to the previous page of <a
            href='https://docs.kelvininc.com/latest/kelvin-overview/kelvin-
            platform/kelvin-assets/' target='_blank'>Kelvin Assets</a> failure
            statistics in the list.</p> The alphanumeric string which are the
            bookmarks for the beginning and end of the current list is given in
            the previous JSON response value under the key pagination ->
            previous_page and pagination -> next_page respectively.</p> The
            pagination -> previous_page alphanumeric string should be used here to
            show a list of the previous page of results.
        direction : :obj:`Literal['asc', 'desc']`
            Sorting order for the results according to the `sort_by`
            parameter.</p> There are two options; `asc` (ascending order) and
            `desc` (descending order).</p> The default is `asc` (ascending). (asc,
            desc)
        sort_by : :obj:`Sequence[str]`
            Sort the results by one of the following options; `name`, `title`,
            `description` and `version`.

        """

        from . import kerrors, responses

        result = cls._make_request(
            _client,
            "get",
            "/api/v4/app-manager/resource/{resource_krn}/get",
            {"resource_krn": resource_krn},
            {
                "pagination_type": pagination_type,
                "page_size": page_size,
                "page": page,
                "next": next,
                "previous": previous,
                "direction": direction,
                "sort_by": sort_by,
            },
            {},
            {},
            None,
            None,
            False,
            {
                "200": responses.ListAppVersionResumedPaginatedResponse,
                "400": kerrors.ErrorMessage,
                "401": kerrors.ErrorMessage,
                "404": kerrors.ErrorMessage,
            },
            False,
            _dry_run,
        )
        return (
            result.fetch("/api/v4/app-manager/resource/{resource_krn}/get", "GET")
            if fetch and not _dry_run
            else result
        )
