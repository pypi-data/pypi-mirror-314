# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2024-02-05T18:54:09+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic.v1 import Field

from kelvin.sdk.client.data_model import DataModelBase


class ParameterJSONSchemaProperties(DataModelBase):
    """
    ParameterJSONSchemaProperties object.

    Parameters
    ----------
    default: Optional[Any]
    description: Optional[str]
    enum: Optional[Dict[str, Any]]
    examples: Optional[Dict[str, Any]]
    maxLength: Optional[int]
    maximum: Optional[float]
    minLength: Optional[int]
    minimum: Optional[float]
    pattern: Optional[str]
    title: Optional[str]
    type: Optional[str]

    """

    default: Optional[Any] = None
    description: Optional[str] = None
    enum: Optional[Dict[str, Any]] = None
    examples: Optional[Dict[str, Any]] = None
    maxLength: Optional[int] = None
    maximum: Optional[float] = None
    minLength: Optional[int] = None
    minimum: Optional[float] = None
    pattern: Optional[str] = None
    title: Optional[str] = None
    type: Optional[str] = None


class ParameterJSONSchema(DataModelBase):
    """
    ParameterJSONSchema object.

    Parameters
    ----------
    additionalProperties: Optional[bool]
    properties: Optional[Dict[str, ParameterJSONSchemaProperties]]
    required: Optional[List[str]]
    type: Optional[str]

    """

    additionalProperties: Optional[bool] = None
    properties: Optional[Dict[str, ParameterJSONSchemaProperties]] = None
    required: Optional[List[str]] = None
    type: Optional[str] = Field(None, max_length=64)
