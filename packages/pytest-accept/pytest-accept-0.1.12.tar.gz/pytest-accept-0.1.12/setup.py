# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['pytest_accept', 'pytest_accept.tests']

package_data = \
{'': ['*']}

install_requires = \
['pytest>=7']

entry_points = \
{'pytest11': ['accept = pytest_accept']}

setup_kwargs = {
    'name': 'pytest-accept',
    'version': '0.1.12',
    'description': 'A pytest-plugin for updating doctest outputs',
    'long_description': '# pytest-accept\n\n[![GitHub Workflow CI Status](https://img.shields.io/github/actions/workflow/status/max-sixty/pytest-accept/test.yaml?branch=main&logo=github&style=for-the-badge)](https://github.com/max-sixty/pytest-accept/actions?query=workflow:test)\n[![PyPI Version](https://img.shields.io/pypi/v/pytest-accept?style=for-the-badge)](https://pypi.python.org/pypi/pytest-accept/)\n[![GitHub License](https://img.shields.io/github/license/max-sixty/pytest-accept?style=for-the-badge)](https://github.com/max-sixty/pytest-accept/blob/main/LICENSE)\n\npytest-accept is a pytest plugin for automatically updating doctest outputs. It\nruns doctests, observes the generated outputs, and writes them to the doctests\'\ndocumented outputs.\n\nIt\'s designed for a couple of audiences:\n\n- Folks who work with doctests, and don\'t enjoy manually copying & pasting\n  outputs from the pytest error log to their doctests\' documented outputs.\n  pytest-accept does the copying & pasting for you.\n- Folks who generally find writing any tests a bit annoying, and prefer to\n  develop by "running the code and seeing if it works". This library aims to\n  make testing a joyful part of that development loop.\n\npytest-accept is decoupled from the doctests it works with — it can be used with\nexisting doctests, and the doctests it edits are no different from normal\ndoctests.\n\n## Jesse, what the?\n\nHere\'s an example of what pytest-accept does: given a file like\n[**`add.py`**](examples/add.py) containing an incorrect documented output:\n\n```python\ndef add(x, y):\n    """\n    Adds two values.\n\n    >>> add(1, 1)\n    3\n\n    >>> add("ab", "c")\n    \'bac\'\n    """\n\n    return x + y\n```\n\n...running doctests using pytest and passing `--accept` replaces the existing\nincorrect values with correct values:\n\n```sh\npytest --doctest-modules examples/add.py --accept\n```\n\n```diff\ndiff --git a/examples/add.py b/examples/add.py\nindex 10a71fd..c2c945f 100644\n--- a/examples/add.py\n+++ b/examples/add.py\n@@ -3,10 +3,10 @@ def add(x, y):\n     Adds two values.\n\n     >>> add(1, 1)\n-    3\n+    2\n\n     >>> add("ab", "c")\n-    \'bac\'\n+    \'abc\'\n     """\n\n     return x + y\n\n```\n\nThis style of testing is fairly well-developed in some languages, although still\ndoesn\'t receive the attention I think it deserves, and historically hasn\'t had\ngood support in python.\n\nConfusingly, it\'s referred to "snapshot testing" or "regression testing" or\n"expect testing" or "literate testing" or "acceptance testing". The best\nexplanation I\'ve seen on this testing style is from\n**[@yminsky](https://github.com/yminsky)** in a\n[Jane Street Blogpost](https://blog.janestreet.com/testing-with-expectations/).\n**[@matklad](https://github.com/matklad)** also has an excellent summary in his\nblog post [How to Test](https://matklad.github.io//2021/05/31/how-to-test.html).\n\n## Installation\n\n```sh\npip install pytest-accept\n```\n\n## What about pytest tests?\n\nA previous effort in [**`assert_plugin.py`**](pytest_accept/assert_plugin.py)\nattempted to do this for `assert` statements, and the file contains some notes\non the effort. The biggest problem is pytest stops on the first `assert` failure\nin each test, which is very limiting. (Whereas pytest can be configured to\ncontinue on doctest failures, which this library takes advantage of.)\n\nIt\'s\n[probably possible to change pytest\'s behavior](https://mail.python.org/pipermail/pytest-dev/2020-March/004918.html)\nhere, but it\'s a significant effort on the pytest codebase.\n\nSome alternatives:\n\n- Use an existing library like\n  [pytest-regtest](https://gitlab.com/uweschmitt/pytest-regtest), which offers\n  file snapshot testing (i.e. not inline).\n- We could write a specific function / fixture, like `accept(result, "abc")`,\n  similar to frameworks like rust\'s excellent\n  [insta](https://github.com/mitsuhiko/insta) (which I developed some features\n  for), or [ocaml\'s ppx_expect](https://github.com/janestreet/ppx_expect).\n  - But this has the disadvantage of coupling the test to the plugin: it\'s not\n    possible to run tests independently of the plugin, or use the plugin on\n    general `assert` tests. And one of the great elegances of pytest is its\n    deferral to a normal `assert` statement.\n- Some of this testing feels like writing a notebook and testing that.\n  [pytest-notebook](https://github.com/chrisjsewell/pytest-notebook) fully\n  implements this.\n\n## Anything else?\n\nNothing ground-breaking! Some notes:\n\n- If a docstring uses escape characters such as `\\n`, python will interpret them\n  as the escape character rather than the literal. Use a raw string to have it\n  interpreted as a literal. e.g. this fails:\n\n  ```python\n  def raw_string():\n      """\n      >>> "\\n"\n      \'\\n\'\n      """\n  ```\n\n  but succeeds with:\n\n  ```diff\n  def raw_string():\n  -    """\n  +    r"""\n      >>> "\\n"\n      \'\\n\'\n  ```\n\n  Possibly pytest-accept could do more here —\xa0e.g. change the format of the\n  docstring. But that would not be trivial to implement, and may be too\n  invasive.\n\n- The library attempts to confirm the file hasn\'t changed between the start and\n  end of the test and won\'t overwrite the file where it detects there\'s been a\n  change. This can be helpful for workflows where the tests run repeatedly in\n  the background (e.g. using something like\n  [watchexec](https://github.com/watchexec/watchexec)) while a person is working\n  on the file, or when the tests take a long time, maybe because of `--pdb`. To\n  be doubly careful, passing `--accept-copy` will cause the plugin to instead\n  create a file named `{file}.py.new` rather than overwriting the file on any\n  doctest failure.\n  - It will overwrite the existing documented values, though these aren\'t\n    generally useful per se — they\'re designed to match the generated of the\n    code. The only instances they could be useful is where they\'ve been manual\n    curated (e.g. removing volatile outputs like hashes), and in those cases\n    ideally they can be restored from version control. Or as above, pass\n    `--accept-copy` to be conservative.\n- This is still fairly early, has mostly been used by me &\n  [xarray](https://github.com/pydata/xarray/pull/5950#issuecomment-974687406)\n  and there may be some small bugs. Let me know anything at all and I\'ll attempt\n  to fix them.\n- It currently doesn\'t affect the printing of test results; the doctests will\n  still print as failures.\n  - TODO: A future version could print something about them being fixed.\n- Python\'s doctest library is imperfect:\n  - It can\'t handle indents, and probably other things.\n    - We modify the output to match the doctest format; e.g. with blanklines. If\n      generated output isn\'t sufficient for the doctest to pass, and there is\n      some form of output that\'s sufficient, please report as a bug.\n  - The syntax for `.*` is an ellipsis `...`, which is also the syntax for\n    continuing a code line, so the beginning of a line must always be specified.\n  - The syntax for all the directives is arguably less than aesthetically\n    pleasing.\n  - It doesn\'t have an option for pretty printing, so the test must pretty print\n    itself with `pprint(x)`, which is verbose.\n  - It reports line numbers incorrectly in some cases —\xa0two docstring lines\n    separated with continuation character `\\` is counted as one, meaning this\n    library will not have access to the correct line number for doctest inputs\n    and outputs.\n',
    'author': 'Maximilian Roos',
    'author_email': 'm@maxroos.com',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://github.com/max-sixty/pytest-accept',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.9,<4',
}


setup(**setup_kwargs)
