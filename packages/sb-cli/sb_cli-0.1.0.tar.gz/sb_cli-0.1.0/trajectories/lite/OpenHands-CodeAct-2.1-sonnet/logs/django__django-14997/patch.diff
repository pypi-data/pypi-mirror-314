diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index f0c81c123b..fa10c50340 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -18,6 +18,53 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
     sql_create_unique = "CREATE UNIQUE INDEX %(name)s ON %(table)s (%(columns)s)"
     sql_delete_unique = "DROP INDEX %(name)s"
 
+    def _get_field_name_from_expression(self, expression):
+        """Convert an F() expression to its field name for SQLite unique constraints."""
+        from django.db.models import F
+        from django.db.models.expressions import Col
+        from django.db.models.indexes import IndexExpression
+        if isinstance(expression, F):
+            return expression.name
+        elif isinstance(expression, Col):
+            return expression.target.name
+        elif isinstance(expression, IndexExpression):
+            # Get the source expressions and find the F() expression
+            for source in expression.get_source_expressions():
+                if isinstance(source, F):
+                    return source.name
+                # Recursively check nested expressions
+                field_name = self._get_field_name_from_expression(source)
+                if field_name:
+                    return field_name
+        return expression
+
+    def _create_unique_sql(
+        self, model, fields, name=None, condition=None, deferrable=None,
+        include=None, opclasses=None, expressions=None,
+    ):
+        """
+        Override to handle F() expressions in unique constraints for SQLite.
+        """
+        if expressions:
+            # Convert F() expressions to field names for SQLite
+            fields = []
+            if hasattr(expressions, 'source_expressions'):
+                # Handle ExpressionList
+                for expr in expressions.source_expressions:
+                    field_name = self._get_field_name_from_expression(expr)
+                    fields.append(model._meta.get_field(field_name))
+            else:
+                # Handle list/tuple of expressions
+                for expr in expressions:
+                    field_name = self._get_field_name_from_expression(expr)
+                    fields.append(model._meta.get_field(field_name))
+            expressions = None
+        return super()._create_unique_sql(
+            model, fields, name=name, condition=condition,
+            deferrable=deferrable, include=include,
+            opclasses=opclasses, expressions=expressions,
+        )
+
     def __enter__(self):
         # Some SQLite schema alterations need foreign key constraints to be
         # disabled. Enforce it here for the duration of the schema edition.
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..1dc34abf17
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,124 @@
+import os
+import sys
+from pathlib import Path
+
+import django
+from django.conf import settings
+from django.db import models
+
+# Create a test app package
+test_dir = Path('test_app')
+test_dir.mkdir(exist_ok=True)
+(test_dir / '__init__.py').touch()
+
+# Add test app to Python path
+sys.path.append('.')
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': 'test.db',
+            }
+        },
+        INSTALLED_APPS=[
+            'test_app',
+        ],
+    )
+    django.setup()
+
+# Create the model
+class Tag(models.Model):
+    name = models.SlugField(help_text="The tag key.")
+    value = models.CharField(max_length=150, help_text="The tag value.")
+    class Meta:
+        app_label = 'test_app'
+        ordering = ["name", "value"]
+        constraints = [
+            models.UniqueConstraint(
+                models.F("name"),
+                models.F("value"),
+                name="unique_name_value",
+            )
+        ]
+    def __str__(self):
+        return f"{self.name}={self.value}"
+
+# Create migrations
+from django.apps import apps
+from django.db import migrations
+from django.db.migrations.state import ProjectState
+from django.db.migrations.autodetector import MigrationAutodetector
+from django.db.migrations.loader import MigrationLoader
+from django.db.migrations.questioner import NonInteractiveMigrationQuestioner
+
+# Create migrations directory
+migrations_dir = Path('test_app/migrations')
+migrations_dir.mkdir(exist_ok=True)
+(migrations_dir / '__init__.py').touch()
+
+# Write initial migration
+initial_migration = '''from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+    operations = [
+        migrations.CreateModel(
+            name='Tag',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.SlugField(help_text='The tag key.')),
+                ('value', models.CharField(help_text='The tag value.', max_length=200)),
+            ],
+            options={
+                'ordering': ['name', 'value'],
+            },
+        ),
+        migrations.AddConstraint(
+            model_name='tag',
+            constraint=models.UniqueConstraint(models.F('name'), models.F('value'), name='unique_name_value'),
+        ),
+    ]
+'''
+
+with open('test_app/migrations/0001_initial.py', 'w') as f:
+    f.write(initial_migration)
+
+# Write second migration
+second_migration = '''from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    dependencies = [
+        ('test_app', '0001_initial'),
+    ]
+    operations = [
+        migrations.AlterField(
+            model_name='tag',
+            name='value',
+            field=models.CharField(help_text='The tag value.', max_length=150),
+        ),
+    ]
+'''
+
+with open('test_app/migrations/0002_alter_tag_value.py', 'w') as f:
+    f.write(second_migration)
+
+# Apply migrations
+from django.core.management import execute_from_command_line
+execute_from_command_line(['manage.py', 'migrate'])
+
+# Test the unique constraint
+from django.db import IntegrityError
+
+try:
+    # Create first tag
+    Tag.objects.create(name='test', value='value1')
+    print("Created first tag successfully")
+
+    # Try to create a duplicate tag
+    Tag.objects.create(name='test', value='value1')
+    print("ERROR: Created duplicate tag - unique constraint not working!")
+except IntegrityError:
+    print("SUCCESS: Unique constraint prevented duplicate tag creation")
\ No newline at end of file
diff --git a/test.db b/test.db
new file mode 100644
index 0000000000..d43b5aaaf4
Binary files /dev/null and b/test.db differ
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..eb1c0eac25
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,22 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+    operations = [
+        migrations.CreateModel(
+            name='Tag',
+            fields=[
+                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.SlugField(help_text='The tag key.')),
+                ('value', models.CharField(help_text='The tag value.', max_length=200)),
+            ],
+            options={
+                'ordering': ['name', 'value'],
+            },
+        ),
+        migrations.AddConstraint(
+            model_name='tag',
+            constraint=models.UniqueConstraint(models.F('name'), models.F('value'), name='unique_name_value'),
+        ),
+    ]
diff --git a/test_app/migrations/0002_alter_tag_value.py b/test_app/migrations/0002_alter_tag_value.py
new file mode 100644
index 0000000000..d45b5a9245
--- /dev/null
+++ b/test_app/migrations/0002_alter_tag_value.py
@@ -0,0 +1,13 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    dependencies = [
+        ('test_app', '0001_initial'),
+    ]
+    operations = [
+        migrations.AlterField(
+            model_name='tag',
+            name='value',
+            field=models.CharField(help_text='The tag value.', max_length=150),
+        ),
+    ]
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
