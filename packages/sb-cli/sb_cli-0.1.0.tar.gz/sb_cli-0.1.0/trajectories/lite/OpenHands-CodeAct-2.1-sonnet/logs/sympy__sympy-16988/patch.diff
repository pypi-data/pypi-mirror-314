diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 03cf57a30b..b6c19c18db 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -1316,11 +1316,35 @@ def __iter__(self):
     def _handle_finite_sets(args):
         from sympy.core.logic import fuzzy_and, fuzzy_bool
         from sympy.core.compatibility import zip_longest
+        from sympy.core.relational import Eq
+        from sympy.functions.elementary.piecewise import Piecewise
+
+        # Remove duplicates while preserving order
+        seen = set()
+        args = [x for x in args if not (x in seen or seen.add(x))]
 
         fs_args, other = sift(args, lambda x: x.is_FiniteSet,
             binary=True)
         if not fs_args:
             return
+        
+        # Find all symbolic and non-symbolic elements across all finite sets
+        symbolic_elements = set()
+        non_symbolic_elements = set()
+        for fs in fs_args:
+            for x in fs:
+                if x.has(Symbol):
+                    symbolic_elements.add(x)
+                else:
+                    non_symbolic_elements.add(x)
+        
+        # If we have exactly one symbolic element and one non-symbolic element
+        if len(symbolic_elements) == 1 and len(non_symbolic_elements) == 1:
+            symb = symbolic_elements.pop()
+            val = non_symbolic_elements.pop()
+            return Piecewise((FiniteSet(val), Eq(symb, val)), (S.EmptySet, True))
+        
+        # Otherwise proceed with normal handling
         fs_args.sort(key=len)
         s = fs_args[0]
         fs_args = fs_args[1:]
