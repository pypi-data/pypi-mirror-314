diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..f69de2cd4f 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -32,22 +32,50 @@ def _multi_decorate(decorators, method):
     else:
         decorators = [decorators]
 
-    def _wrapper(self, *args, **kwargs):
-        # bound_method has the signature that 'decorator' expects i.e. no
-        # 'self' argument, but it's a closure over self so it can call
-        # 'func'. Also, wrap method.__get__() in a function because new
-        # attributes can't be set on bound method objects, only on functions.
-        bound_method = partial(method.__get__(self, type(self)))
-        for dec in decorators:
-            bound_method = dec(bound_method)
-        return bound_method(*args, **kwargs)
-
+    # Create a descriptor that handles both instance and class access
+    class _Wrapper:
+        def __get__(self, instance, cls=None):
+            if isinstance(method, staticmethod):
+                # For static methods, don't pass instance or cls
+                func = method.__get__(None, cls)
+                bound_partial = partial(func)
+                update_wrapper(bound_partial, func)
+                for dec in decorators:
+                    bound_partial = dec(bound_partial)
+                return bound_partial
+            elif isinstance(method, classmethod):
+                # For class methods, pass cls
+                func = method.__get__(None, cls)
+                bound_partial = partial(func, cls)
+                update_wrapper(bound_partial, func)
+                for dec in decorators:
+                    bound_partial = dec(bound_partial)
+                return bound_partial
+            else:
+                # Regular instance method
+                if instance is None:
+                    # Class access to instance method
+                    return self
+                bound_method = method.__get__(instance, cls)
+                bound_partial = partial(bound_method)
+                update_wrapper(bound_partial, bound_method)
+                for dec in decorators:
+                    bound_partial = dec(bound_partial)
+                return bound_partial
+
+        def __call__(self, *args, **kwargs):
+            instance = args[0] if args else None
+            if instance is None:
+                raise TypeError(f"Missing required argument 'self' (pos 1)")
+            return self.__get__(instance)(*args[1:], **kwargs)
+
+    wrapper = _Wrapper()
     # Copy any attributes that a decorator adds to the function it decorates.
     for dec in decorators:
-        _update_method_wrapper(_wrapper, dec)
+        _update_method_wrapper(wrapper, dec)
     # Preserve any existing attributes of 'method', including the name.
-    update_wrapper(_wrapper, method)
-    return _wrapper
+    update_wrapper(wrapper, method)
+    return wrapper
 
 
 def method_decorator(decorator, name=''):
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..cc43ee640b
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,73 @@
+from django.utils.decorators import method_decorator
+from functools import wraps, partial
+import logging
+
+logging.basicConfig(level=logging.DEBUG)
+logger = logging.getLogger(__name__)
+
+def logger_decorator(func):
+    @wraps(func)
+    def inner(*args, **kwargs):
+        try:
+            result = func(*args, **kwargs)
+        except Exception as e:
+            result = str(e)
+        finally:
+            # Test accessing various function attributes
+            attrs = {
+                '__name__': getattr(func, '__name__', None),
+                '__module__': getattr(func, '__module__', None),
+                '__doc__': getattr(func, '__doc__', None),
+                '__qualname__': getattr(func, '__qualname__', None),
+            }
+            logger.debug(f"Function attributes: {attrs}")
+            logger.debug(f"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}")
+        return result
+    return inner
+
+# Test case 1: Multiple decorators
+def another_decorator(func):
+    @wraps(func)
+    def wrapper(*args, **kwargs):
+        return func(*args, **kwargs)
+    return wrapper
+
+class Test:
+    @method_decorator([logger_decorator, another_decorator])
+    def multiple_decorators(self):
+        """Test docstring"""
+        return "multiple decorators"
+
+    # Test case 2: Method with custom attributes
+    @method_decorator(logger_decorator)
+    def custom_attributes(self):
+        return "custom attributes"
+    custom_attributes.custom_attr = "test"
+
+    # Test case 3: Static method
+    @method_decorator(logger_decorator)
+    @staticmethod
+    def static_method():
+        return "static"
+
+    # Test case 4: Class method
+    @method_decorator(logger_decorator)
+    @classmethod
+    def class_method(cls):
+        return "class method"
+
+if __name__ == "__main__":
+    t = Test()
+    print("Testing multiple decorators:")
+    t.multiple_decorators()
+    
+    print("\nTesting custom attributes:")
+    t.custom_attributes()
+    
+    print("\nTesting static method:")
+    t.static_method()
+    Test.static_method()
+    
+    print("\nTesting class method:")
+    t.class_method()
+    Test.class_method()
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..4c26124b1d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,26 @@
+from django.utils.decorators import method_decorator
+from functools import wraps
+import logging
+
+logging.basicConfig(level=logging.DEBUG)
+logger = logging.getLogger(__name__)
+
+def logger_decorator(func):
+    @wraps(func)
+    def inner(*args, **kwargs):
+        try:
+            result = func(*args, **kwargs)
+        except Exception as e:
+            result = str(e)
+        finally:
+            logger.debug(f"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}")
+        return result
+    return inner
+
+class Test:
+    @method_decorator(logger_decorator)
+    def hello_world(self):
+        return "hello"
+
+if __name__ == "__main__":
+    Test().hello_world()
\ No newline at end of file
