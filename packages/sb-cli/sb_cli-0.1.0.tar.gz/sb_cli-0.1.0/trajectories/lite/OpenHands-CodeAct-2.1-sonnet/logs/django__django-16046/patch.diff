diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 488d6a77cd..f2730b9d66 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -30,6 +30,9 @@ def format(
     ) and settings.USE_THOUSAND_SEPARATOR
     use_grouping = use_grouping or force_grouping
     use_grouping = use_grouping and grouping != 0
+    # Handle None values
+    if number is None:
+        return number
     # Make the common case fast
     if isinstance(number, int) and not use_grouping and not decimal_pos:
         return mark_safe(number)
@@ -68,7 +71,7 @@ def format(
             str_number = "{:f}".format(number)
     else:
         str_number = str(number)
-    if str_number[0] == "-":
+    if str_number and str_number[0] == "-":
         sign = "-"
         str_number = str_number[1:]
     # decimal part
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..722fd2c01f
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,46 @@
+from django.conf import settings
+from django.utils.numberformat import format
+
+# Configure minimal settings
+settings.configure(USE_L10N=False, USE_THOUSAND_SEPARATOR=False)
+
+# Test with None value
+try:
+    result = format(None, decimal_sep=".")
+    print("Result:", result)
+except IndexError as e:
+    print("Got expected IndexError:", e)
+
+# Test with empty string
+try:
+    result = format("", decimal_sep=".")
+    print("Result:", result)
+except IndexError as e:
+    print("Got expected IndexError:", e)
+
+# Test edge cases
+print("\nTesting edge cases:")
+
+# Test with valid number for comparison
+result = format("123.45", decimal_sep=".")
+print("Valid number result:", result)
+
+# Test with negative number
+result = format("-123.45", decimal_sep=".")
+print("Negative number result:", result)
+
+# Test with zero
+result = format(0, decimal_sep=".")
+print("Zero result:", result)
+
+# Test with negative zero
+result = format(-0, decimal_sep=".")
+print("Negative zero result:", result)
+
+# Test with very small decimal
+result = format("0.0000001", decimal_sep=".", decimal_pos=4)
+print("Small decimal result:", result)
+
+# Test with very large number
+result = format("12345678901234567890.1234", decimal_sep=".", grouping=3, thousand_sep=",")
+print("Large number with grouping result:", result)
\ No newline at end of file
