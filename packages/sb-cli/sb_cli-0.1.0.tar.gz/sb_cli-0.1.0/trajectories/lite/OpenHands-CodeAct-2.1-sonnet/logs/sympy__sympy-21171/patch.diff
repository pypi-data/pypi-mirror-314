diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..57888afde1
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,23 @@
+from sympy import *
+from sympy.physics.continuum_mechanics import Beam
+
+# Young's modulus
+E = symbols("E")
+# length of the beam
+L = symbols("L")
+# concentrated load at the end tip of the beam
+F = symbols("F")
+# square cross section
+B, H = symbols("B, H")
+I = B * H**3 / 12
+# numerical values (material: steel)
+d = {B: 1e-02, H: 1e-02, E: 210e09, L: 0.2, F: 100}
+
+b2 = Beam(L, E, I)
+b2.apply_load(-F, L / 2, -1)
+b2.apply_support(0, "fixed")
+R0, M0 = symbols("R_0, M_0")
+b2.solve_for_reaction_loads(R0, M0)
+
+print("Shear force:")
+print(b2.shear_force())
\ No newline at end of file
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 43f9e6ad8d..d055d9b51e 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -1968,10 +1968,12 @@ def _print_DiracDelta(self, expr, exp=None):
             tex = r"\left(%s\right)^{%s}" % (tex, exp)
         return tex
 
-    def _print_SingularityFunction(self, expr):
+    def _print_SingularityFunction(self, expr, exp=None):
         shift = self._print(expr.args[0] - expr.args[1])
         power = self._print(expr.args[2])
         tex = r"{\left\langle %s \right\rangle}^{%s}" % (shift, power)
+        if exp:
+            tex = r"\left(%s\right)^{%s}" % (tex, exp)
         return tex
 
     def _print_Heaviside(self, expr, exp=None):
diff --git a/test_singularity.py b/test_singularity.py
new file mode 100644
index 0000000000..074220911e
--- /dev/null
+++ b/test_singularity.py
@@ -0,0 +1,48 @@
+from sympy import *
+from sympy.physics.continuum_mechanics import Beam
+
+def test_basic():
+    # Original case from PR description
+    E = symbols("E")
+    L = symbols("L")
+    F = symbols("F")
+    B, H = symbols("B, H")
+    I = B * H**3 / 12
+    d = {B: 1e-02, H: 1e-02, E: 210e09, L: 0.2, F: 100}
+
+    b2 = Beam(L, E, I)
+    b2.apply_load(-F, L / 2, -1)
+    b2.apply_support(0, "fixed")
+    R0, M0 = symbols("R_0, M_0")
+    b2.solve_for_reaction_loads(R0, M0)
+    
+    print("Basic test:")
+    print(latex(b2.shear_force()))
+
+def test_edge_cases():
+    # Test direct use of SingularityFunction with various exponents
+    x, a = symbols('x a')
+    
+    # Basic singularity function
+    f1 = SingularityFunction(x, a, 0)
+    print("\nEdge case 1 - Basic:")
+    print(latex(f1))
+    
+    # Singularity function raised to a power
+    f2 = SingularityFunction(x, a, 0)**2
+    print("\nEdge case 2 - Power:")
+    print(latex(f2))
+    
+    # Singularity function with negative power
+    f3 = SingularityFunction(x, a, -1)
+    print("\nEdge case 3 - Negative power:")
+    print(latex(f3))
+    
+    # Multiple singularity functions multiplied
+    f4 = SingularityFunction(x, a, 0) * SingularityFunction(x, a, 1)
+    print("\nEdge case 4 - Multiplication:")
+    print(latex(f4))
+
+if __name__ == '__main__':
+    test_basic()
+    test_edge_cases()
\ No newline at end of file
