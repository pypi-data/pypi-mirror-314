diff --git a/lib/mpl_toolkits/mplot3d/art3d.py b/lib/mpl_toolkits/mplot3d/art3d.py
index 8fe6e7a9c1..e78048f8e8 100644
--- a/lib/mpl_toolkits/mplot3d/art3d.py
+++ b/lib/mpl_toolkits/mplot3d/art3d.py
@@ -209,11 +209,18 @@ class Line3D(lines.Line2D):
         """
         return self._verts3d
 
-    @artist.allow_rasterization
-    def draw(self, renderer):
+    def do_3d_projection(self):
+        """
+        Project the points according to renderer matrix.
+        """
         xs3d, ys3d, zs3d = self._verts3d
         xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, self.axes.M)
         self.set_data(xs, ys)
+        return min(zs)
+
+    @artist.allow_rasterization
+    def draw(self, renderer):
+        self.do_3d_projection()
         super().draw(renderer)
         self.stale = False
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..3a46f8172a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,73 @@
+import numpy as np
+import matplotlib.pyplot as plt
+from mpl_toolkits.mplot3d import Axes3D
+
+def plot_3d_lines(x_s_0, x_e_0, y_s_0, y_e_0, z_s_0, z_e_0, ax=None):
+    if ax is None:
+        fig = plt.figure()
+        ax = fig.add_subplot(111, projection='3d')
+        ax.view_init(elev=90, azim=0)
+        ax.set_zlim3d(-10, 10)
+    
+    clr_list = 'r-'
+
+    for n in range(len(x_s_0)):
+        ax.plot([x_s_0[n], x_e_0[n]],
+               [y_s_0[n], y_e_0[n]],
+               [z_s_0[n], z_e_0[n]], clr_list)
+        
+    plt.xlabel('x')
+    plt.ylabel('y')
+    plt.title('90-0')
+    
+    if ax is None:
+        plt.show()
+        plt.close()
+
+print("Test 1: First plot")
+x_s_0 = np.array([1, 2, 3])
+x_e_0 = np.array([2, 3, 4])
+y_s_0 = np.array([1, 2, 3])
+y_e_0 = np.array([2, 3, 4])
+z_s_0 = np.array([1, 2, 3])
+z_e_0 = np.array([2, 3, 4])
+
+fig = plt.figure()
+ax = fig.add_subplot(111, projection='3d')
+ax.view_init(elev=90, azim=0)
+ax.set_zlim3d(-10, 10)
+
+plot_3d_lines(x_s_0, x_e_0, y_s_0, y_e_0, z_s_0, z_e_0, ax)
+plt.show()
+
+print("\nTest 2: Plot with 2D arrays")
+x_s_0 = np.array([[1, 2], [3, 4]])
+x_e_0 = np.array([[2, 3], [4, 5]])
+y_s_0 = np.array([[1, 2], [3, 4]])
+y_e_0 = np.array([[2, 3], [4, 5]])
+z_s_0 = np.array([[1, 2], [3, 4]])
+z_e_0 = np.array([[2, 3], [4, 5]])
+
+fig = plt.figure()
+ax = fig.add_subplot(111, projection='3d')
+ax.view_init(elev=90, azim=0)
+ax.set_zlim3d(-10, 10)
+
+plot_3d_lines(x_s_0[:,0], x_e_0[:,0], y_s_0[:,0], y_e_0[:,0], z_s_0[:,0], z_e_0[:,0], ax)
+plt.show()
+
+print("\nTest 3: Back to 1D arrays")
+x_s_0 = np.array([1, 2, 3])
+x_e_0 = np.array([2, 3, 4])
+y_s_0 = np.array([1, 2, 3])
+y_e_0 = np.array([2, 3, 4])
+z_s_0 = np.array([1, 2, 3])
+z_e_0 = np.array([2, 3, 4])
+
+fig = plt.figure()
+ax = fig.add_subplot(111, projection='3d')
+ax.view_init(elev=90, azim=0)
+ax.set_zlim3d(-10, 10)
+
+plot_3d_lines(x_s_0, x_e_0, y_s_0, y_e_0, z_s_0, z_e_0, ax)
+plt.show()
\ No newline at end of file
