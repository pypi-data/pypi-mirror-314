diff --git a/repro_test/Makefile b/repro_test/Makefile
new file mode 100644
index 000000000..d0c3cbf10
--- /dev/null
+++ b/repro_test/Makefile
@@ -0,0 +1,20 @@
+# Minimal makefile for Sphinx documentation
+#
+
+# You can set these variables from the command line, and also
+# from the environment for the first two.
+SPHINXOPTS    ?=
+SPHINXBUILD   ?= sphinx-build
+SOURCEDIR     = source
+BUILDDIR      = build
+
+# Put it first so that "make" without argument is like "make help".
+help:
+	@$(SPHINXBUILD) -M help "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
+
+.PHONY: help Makefile
+
+# Catch-all target: route all unknown targets to Sphinx using the new
+# "make mode" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).
+%: Makefile
+	@$(SPHINXBUILD) -M $@ "$(SOURCEDIR)" "$(BUILDDIR)" $(SPHINXOPTS) $(O)
diff --git a/repro_test/a.py b/repro_test/a.py
new file mode 100644
index 000000000..4763c71f3
--- /dev/null
+++ b/repro_test/a.py
@@ -0,0 +1,8 @@
+class A:
+    """
+    Attributes
+    ----------
+    hello_: int
+        hi
+    """
+    pass
\ No newline at end of file
diff --git a/repro_test/make.bat b/repro_test/make.bat
new file mode 100644
index 000000000..6247f7e23
--- /dev/null
+++ b/repro_test/make.bat
@@ -0,0 +1,35 @@
+@ECHO OFF
+
+pushd %~dp0
+
+REM Command file for Sphinx documentation
+
+if "%SPHINXBUILD%" == "" (
+	set SPHINXBUILD=sphinx-build
+)
+set SOURCEDIR=source
+set BUILDDIR=build
+
+if "%1" == "" goto help
+
+%SPHINXBUILD% >NUL 2>NUL
+if errorlevel 9009 (
+	echo.
+	echo.The 'sphinx-build' command was not found. Make sure you have Sphinx
+	echo.installed, then set the SPHINXBUILD environment variable to point
+	echo.to the full path of the 'sphinx-build' executable. Alternatively you
+	echo.may add the Sphinx directory to PATH.
+	echo.
+	echo.If you don't have Sphinx installed, grab it from
+	echo.http://sphinx-doc.org/
+	exit /b 1
+)
+
+%SPHINXBUILD% -M %1 %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
+goto end
+
+:help
+%SPHINXBUILD% -M help %SOURCEDIR% %BUILDDIR% %SPHINXOPTS% %O%
+
+:end
+popd
diff --git a/repro_test/source/conf.py b/repro_test/source/conf.py
new file mode 100644
index 000000000..1bac776b1
--- /dev/null
+++ b/repro_test/source/conf.py
@@ -0,0 +1,67 @@
+# Configuration file for the Sphinx documentation builder.
+#
+# This file only contains a selection of the most common options. For a full
+# list see the documentation:
+# https://www.sphinx-doc.org/en/master/usage/configuration.html
+
+# -- Path setup --------------------------------------------------------------
+
+# If extensions (or modules to document with autodoc) are in another directory,
+# add these directories to sys.path here. If the directory is relative to the
+# documentation root, use os.path.abspath to make it absolute, like shown here.
+#
+import os
+import sys
+sys.path.insert(0, os.path.abspath('../..'))
+
+
+# -- Project information -----------------------------------------------------
+
+project = 'TestProject'
+copyright = '2024, TestAuthor'
+author = 'TestAuthor'
+
+# The short X.Y version
+version = '1.0'
+
+# The full version, including alpha/beta/rc tags
+release = '1.0'
+
+
+# -- General configuration ---------------------------------------------------
+
+# Add any Sphinx extension module names here, as strings. They can be
+# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
+# ones.
+extensions = [
+    'sphinx.ext.autodoc',
+    'sphinx.ext.napoleon'
+]
+
+# Add any paths that contain templates here, relative to this directory.
+templates_path = ['_templates']
+
+# The language for content autogenerated by Sphinx. Refer to documentation
+# for a list of supported languages.
+#
+# This is also used if you do content translation via gettext catalogs.
+# Usually you set "language" from the command line for these cases.
+language = 'en'
+
+# List of patterns, relative to source directory, that match files and
+# directories to ignore when looking for source files.
+# This pattern also affects html_static_path and html_extra_path.
+exclude_patterns = []
+
+
+# -- Options for HTML output -------------------------------------------------
+
+# The theme to use for HTML and HTML Help pages.  See the documentation for
+# a list of builtin themes.
+#
+html_theme = 'alabaster'
+
+# Add any paths that contain custom static files (such as style sheets) here,
+# relative to this directory. They are copied after the builtin static files,
+# so a file named "default.css" will overwrite the builtin "default.css".
+html_static_path = ['_static']
\ No newline at end of file
diff --git a/repro_test/source/index.rst b/repro_test/source/index.rst
new file mode 100644
index 000000000..d01588281
--- /dev/null
+++ b/repro_test/source/index.rst
@@ -0,0 +1,22 @@
+.. TestProject documentation master file, created by
+   sphinx-quickstart on Fri Oct 25 16:57:11 2024.
+   You can adapt this file completely to your liking, but it should at least
+   contain the root `toctree` directive.
+
+Welcome to TestProject's documentation!
+=======================================
+
+.. toctree::
+   :maxdepth: 2
+   :caption: Contents:
+
+.. autoclass:: repro_test.a.A
+   :members:
+
+
+Indices and tables
+==================
+
+* :ref:`genindex`
+* :ref:`modindex`
+* :ref:`search`
diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py
index 11409e6f6..b2b0ddb0a 100644
--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -238,7 +238,11 @@ class GoogleDocstring:
                 _name = match.group(1)
                 _type = match.group(2)
 
-        _name = self._escape_args_and_kwargs(_name)
+        # Don't escape trailing underscores for attributes
+        escape_trailing = True
+        if hasattr(self, '_section') and self._section.lower() == 'attributes':
+            escape_trailing = False
+        _name = self._escape_args_and_kwargs(_name, escape_trailing)
 
         if prefer_type and not _type:
             _type, _name = _name, _type
@@ -254,6 +258,12 @@ class GoogleDocstring:
         while not self._is_section_break():
             _name, _type, _desc = self._consume_field(parse_type, prefer_type)
             if _name or _type or _desc:
+                # Don't escape trailing underscores for attributes
+                if hasattr(self, '_sections') and self._is_in_section and hasattr(self, '_section'):
+                    current_section = next((k for k, v in self._sections.items() 
+                                         if v == self._sections[self._section.lower()]), '')
+                    if current_section == 'attributes':
+                        _name = _name[:-2] + '_' if _name.endswith(r'\_') else _name
                 fields.append((_name, _type, _desc,))
         return fields
 
@@ -317,8 +327,8 @@ class GoogleDocstring:
             min_indent = self._get_min_indent(lines)
             return [line[min_indent:] for line in lines]
 
-    def _escape_args_and_kwargs(self, name: str) -> str:
-        if name.endswith('_'):
+    def _escape_args_and_kwargs(self, name: str, escape_trailing_underscore: bool = True) -> str:
+        if escape_trailing_underscore and name.endswith('_'):
             name = name[:-1] + r'\_'
 
         if name[:2] == '**':
@@ -578,6 +588,9 @@ class GoogleDocstring:
     def _parse_attributes_section(self, section: str) -> List[str]:
         lines = []
         for _name, _type, _desc in self._consume_fields():
+            # Remove escaped trailing underscore for attributes
+            if _name.endswith(r'\_'):
+                _name = _name[:-2] + '_'
             if self._config.napoleon_use_ivar:
                 _name = self._qualify_name(_name, self._obj)
                 field = ':ivar %s: ' % _name
