diff --git a/django/dispatch/dispatcher.py b/django/dispatch/dispatcher.py
index b7d9d26389..1284092318 100644
--- a/django/dispatch/dispatcher.py
+++ b/django/dispatch/dispatcher.py
@@ -198,6 +198,9 @@ class Signal:
         If any receiver raises an error (specifically any subclass of
         Exception), return the error instance as the result for that receiver.
         """
+        import logging
+        logger = logging.getLogger('django.dispatch')
+
         if not self.receivers or self.sender_receivers_cache.get(sender) is NO_RECEIVERS:
             return []
 
@@ -208,6 +211,7 @@ class Signal:
             try:
                 response = receiver(signal=self, sender=sender, **named)
             except Exception as err:
+                logger.exception('Error calling signal receiver %r', receiver)
                 responses.append((receiver, err))
             else:
                 responses.append((receiver, response))
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..c7c21e8465
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,51 @@
+import logging
+from django.dispatch import Signal
+
+# Configure logging
+logging.basicConfig(
+    level=logging.DEBUG,
+    format='%(name)s - %(levelname)s - %(message)s'
+)
+
+# Create test signals
+test_signal = Signal()
+nested_signal = Signal()
+
+# Create receivers with different behaviors
+def succeeding_receiver(sender, **kwargs):
+    print("Succeeding receiver called")
+    return "Success"
+
+def failing_receiver_value_error(sender, **kwargs):
+    raise ValueError("Test ValueError from receiver")
+
+def failing_receiver_type_error(sender, **kwargs):
+    raise TypeError("Test TypeError from receiver")
+
+def nested_signal_receiver(sender, **kwargs):
+    print("Nested signal receiver called")
+    # Trigger another signal inside this receiver
+    nested_signal.send_robust(sender=None)
+    raise RuntimeError("Test RuntimeError from nested receiver")
+
+def nested_signal_handler(sender, **kwargs):
+    print("Nested signal handler called")
+    return "Nested success"
+
+# Connect all receivers
+test_signal.connect(succeeding_receiver)
+test_signal.connect(failing_receiver_value_error)
+test_signal.connect(failing_receiver_type_error)
+test_signal.connect(nested_signal_receiver)
+nested_signal.connect(nested_signal_handler)
+
+print("Testing multiple receivers with different behaviors:")
+results = test_signal.send_robust(sender=None)
+
+print("\nResults:")
+for receiver, response in results:
+    print(f"\nReceiver: {receiver.__name__}")
+    if isinstance(response, Exception):
+        print(f"Response (error): {type(response).__name__}: {str(response)}")
+    else:
+        print(f"Response: {response}")
\ No newline at end of file
