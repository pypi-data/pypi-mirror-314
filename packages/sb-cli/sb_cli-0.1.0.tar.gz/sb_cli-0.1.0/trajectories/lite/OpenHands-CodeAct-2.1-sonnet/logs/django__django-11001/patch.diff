diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 7649c39262..48e53cd763 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -353,7 +353,9 @@ class SQLCompiler:
             # not taken into account so we strip it. When this entire method
             # is refactored into expressions, then we can check each part as we
             # generate it.
-            without_ordering = self.ordering_parts.search(sql).group(1)
+            # Clean multiline SQL by joining lines with spaces
+            sql_oneline = ' '.join(sql.split('\n'))
+            without_ordering = self.ordering_parts.search(sql_oneline).group(1)
             params_hash = make_hashable(params)
             if (without_ordering, params_hash) in seen:
                 continue
@@ -366,7 +368,9 @@ class SQLCompiler:
         if self.query.distinct and not self.query.distinct_fields:
             select_sql = [t[1] for t in select]
             for expr, (sql, params, is_ref) in order_by:
-                without_ordering = self.ordering_parts.search(sql).group(1)
+                # Clean multiline SQL by joining lines with spaces
+                sql_oneline = ' '.join(sql.split('\n'))
+                without_ordering = self.ordering_parts.search(sql_oneline).group(1)
                 if not is_ref and (without_ordering, params) not in select_sql:
                     extra_select.append((expr, (without_ordering, params), None))
         return extra_select
diff --git a/myapp/__init__.py b/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..4e33e3c5f4
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,77 @@
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['myapp'],
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models.expressions import RawSQL
+
+class MyModel(models.Model):
+    status = models.CharField(max_length=20)
+    accepted_datetime = models.DateTimeField(null=True)
+    preferred_datetime = models.DateTimeField(null=True)
+    created_at = models.DateTimeField(auto_now_add=True)
+
+    class Meta:
+        app_label = 'myapp'
+
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['myapp'],
+    )
+
+# Create the tables
+import django
+django.setup()
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(MyModel)
+
+# Create some test data
+MyModel.objects.create(
+    status='accepted',
+    accepted_datetime='2023-01-01 10:00:00',
+    preferred_datetime='2023-01-01 09:00:00'
+)
+MyModel.objects.create(
+    status='pending',
+    accepted_datetime='2023-01-02 10:00:00',
+    preferred_datetime='2023-01-02 09:00:00'
+)
+
+# Reproduce the issue
+query = MyModel.objects.all().order_by(
+    RawSQL('''
+        case when status in ('accepted', 'verification')
+             then 2 else 1 end''', []).desc(),
+    RawSQL('''
+        case when status in ('accepted', 'verification')
+             then (accepted_datetime, preferred_datetime)
+             else null end''', []).asc(),
+    RawSQL('''
+        case when status not in ('accepted', 'verification')
+             then (accepted_datetime, preferred_datetime, created_at)
+             else null end''', []).desc())
+
+# Print the generated SQL query
+print("Generated SQL:")
+print(query.query)
\ No newline at end of file
diff --git a/reproduce2.py b/reproduce2.py
new file mode 100644
index 0000000000..2a87236c02
--- /dev/null
+++ b/reproduce2.py
@@ -0,0 +1,63 @@
+# Configure Django settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['myapp'],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField'
+    )
+
+import django
+django.setup()
+
+from django.db import models
+from django.db.models.expressions import RawSQL
+
+class MyModel(models.Model):
+    status = models.CharField(max_length=20)
+    accepted_datetime = models.DateTimeField(null=True)
+    preferred_datetime = models.DateTimeField(null=True)
+    created_at = models.DateTimeField(auto_now_add=True)
+
+    class Meta:
+        app_label = 'myapp'
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(MyModel)
+
+# Create some test data
+MyModel.objects.create(
+    status='accepted',
+    accepted_datetime='2023-01-01 10:00:00',
+    preferred_datetime='2023-01-01 09:00:00'
+)
+MyModel.objects.create(
+    status='pending',
+    accepted_datetime='2023-01-02 10:00:00',
+    preferred_datetime='2023-01-02 09:00:00'
+)
+
+# Reproduce the issue
+query = MyModel.objects.all().order_by(
+    RawSQL('''
+        case when status in ('accepted', 'verification')
+             then 2 else 1 end''', []).desc(),
+    RawSQL('''
+        case when status in ('accepted', 'verification')
+             then (accepted_datetime, preferred_datetime)
+             else null end''', []).asc(),
+    RawSQL('''
+        case when status not in ('accepted', 'verification')
+             then (accepted_datetime, preferred_datetime, created_at)
+             else null end''', []).desc())
+
+# Print the generated SQL query
+print("Generated SQL:")
+print(query.query)
\ No newline at end of file
