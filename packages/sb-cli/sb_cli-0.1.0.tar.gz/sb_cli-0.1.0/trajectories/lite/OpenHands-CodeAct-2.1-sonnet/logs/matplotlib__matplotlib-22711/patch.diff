diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py
index da5b40a5ef..914e41813a 100644
--- a/lib/matplotlib/widgets.py
+++ b/lib/matplotlib/widgets.py
@@ -899,17 +899,21 @@ class RangeSlider(SliderBase):
         val[1] = self._max_in_bounds(val[1])
         xy = self.poly.xy
         if self.orientation == "vertical":
-            xy[0] = .25, val[0]
-            xy[1] = .25, val[1]
-            xy[2] = .75, val[1]
-            xy[3] = .75, val[0]
-            xy[4] = .25, val[0]
+            xy = np.array([
+                [.25, val[0]],
+                [.25, val[1]],
+                [.75, val[1]],
+                [.75, val[0]],
+                [.25, val[0]]
+            ])
         else:
-            xy[0] = val[0], .25
-            xy[1] = val[0], .75
-            xy[2] = val[1], .75
-            xy[3] = val[1], .25
-            xy[4] = val[0], .25
+            xy = np.array([
+                [val[0], .25],
+                [val[0], .75],
+                [val[1], .75],
+                [val[1], .25],
+                [val[0], .25]
+            ])
         self.poly.xy = xy
         self.valtext.set_text(self._format(val))
         if self.drawon:
diff --git a/reproduce_rangeslider.py b/reproduce_rangeslider.py
new file mode 100644
index 0000000000..f2a6e4c368
--- /dev/null
+++ b/reproduce_rangeslider.py
@@ -0,0 +1,41 @@
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.widgets import RangeSlider
+
+# generate a fake image
+np.random.seed(19680801)
+N = 128
+img = np.random.randn(N, N)
+
+fig, axs = plt.subplots(1, 2, figsize=(10, 5))
+fig.subplots_adjust(bottom=0.25)
+
+im = axs[0].imshow(img)
+axs[1].hist(img.flatten(), bins='auto')
+axs[1].set_title('Histogram of pixel intensities')
+
+# Create the RangeSlider
+slider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])
+slider = RangeSlider(slider_ax, "Threshold", img.min(), img.max(), valinit=[0.0, 0.0])
+
+# Create the Vertical lines on the histogram
+lower_limit_line = axs[1].axvline(slider.val[0], color='k')
+upper_limit_line = axs[1].axvline(slider.val[1], color='k')
+
+def update(val):
+    # The val passed to a callback by the RangeSlider will
+    # be a tuple of (min, max)
+
+    # Update the image's colormap
+    im.norm.vmin = val[0]
+    im.norm.vmax = val[1]
+
+    # Update the position of the vertical lines
+    lower_limit_line.set_xdata([val[0], val[0]])
+    upper_limit_line.set_xdata([val[1], val[1]])
+
+    # Redraw the figure to ensure it updates
+    fig.canvas.draw_idle()
+
+slider.on_changed(update)
+plt.show()
\ No newline at end of file
diff --git a/test_rangeslider_edges.py b/test_rangeslider_edges.py
new file mode 100644
index 0000000000..bb37339272
--- /dev/null
+++ b/test_rangeslider_edges.py
@@ -0,0 +1,16 @@
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.widgets import RangeSlider
+
+fig, ax = plt.subplots()
+fig.subplots_adjust(bottom=0.25)
+
+# Create the RangeSlider with extreme values
+slider_ax = fig.add_axes([0.20, 0.1, 0.60, 0.03])
+slider = RangeSlider(slider_ax, "Test", -100, 100, valinit=[-100, 100])  # Test extreme values
+
+def update(val):
+    print(f"Slider value: {val}")
+
+slider.on_changed(update)
+plt.show()
\ No newline at end of file
