diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py
index ff6abdb958..48eba5fbe7 100644
--- a/lib/matplotlib/legend.py
+++ b/lib/matplotlib/legend.py
@@ -73,6 +73,18 @@ class DraggableLegend(DraggableOffsetBox):
 
         super().__init__(legend, legend._legend_box, use_blit=use_blit)
 
+    def __getstate__(self):
+        """Get the state for pickling."""
+        state = super().__getstate__()
+        state['legend'] = self.legend
+        state['_update'] = self._update
+        return state
+
+    def __setstate__(self, state):
+        """Set the state after unpickling."""
+        super().__setstate__(state)
+        self.restore_callbacks()
+
     def finalize_offset(self):
         if self._update == "loc":
             self._update_loc(self.get_loc_in_canvas())
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index 1dee8a23d9..8353ee295c 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1514,6 +1514,35 @@ class DraggableBase:
                 'button_release_event', self.on_release),
         ]
 
+    def __getstate__(self):
+        """Get the state for pickling."""
+        state = self.__dict__.copy()
+        # Remove unpicklable attributes
+        state['canvas'] = None
+        state['cids'] = []
+        state['_motion_id'] = None if '_motion_id' not in state else None
+        state['background'] = None if 'background' not in state else None
+        return state
+
+    def __setstate__(self, state):
+        """Set the state after unpickling."""
+        self.__dict__ = state
+        # Initialize with empty callbacks - they will be restored when the figure is set
+        self.canvas = None
+        self.cids = []
+
+    def restore_callbacks(self):
+        """Restore the callbacks after unpickling."""
+        if hasattr(self.ref_artist, 'figure') and self.ref_artist.figure:
+            self.canvas = self.ref_artist.figure.canvas
+            if self.canvas:
+                self.cids = [
+                    self.canvas.callbacks._connect_picklable(
+                        'pick_event', self.on_pick),
+                    self.canvas.callbacks._connect_picklable(
+                        'button_release_event', self.on_release),
+                ]
+
     def on_motion(self, evt):
         if self._check_still_parented() and self.got_artist:
             dx = evt.x - self.mouse_x
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..0e0425c8a9
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,33 @@
+import matplotlib.pyplot as plt
+import pickle
+
+def create_figure():
+    # Create figure
+    fig = plt.figure()
+    ax = fig.add_subplot(111)
+    
+    time=[0,1,2,3,4]
+    speed=[40,43,45,47,48]
+    
+    ax.plot(time,speed,label="speed")
+    
+    leg=ax.legend()
+    leg.set_draggable(True)
+    return fig
+
+# Create original figure
+fig = create_figure()
+
+# Pickle and unpickle
+pickled_fig = pickle.dumps(fig)
+unpickled_fig = pickle.loads(pickled_fig)
+
+# Show both figures to verify they work
+plt.figure(1)
+plt.title("Original Figure")
+
+plt.figure(2)
+plt.title("Unpickled Figure")
+unpickled_fig.show()
+
+plt.show()
\ No newline at end of file
