diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index febaadbb5b..c93f26be64 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -1214,8 +1214,36 @@ class ManyToManyField(RelatedField):
             *self._check_relationship_model(**kwargs),
             *self._check_ignored_options(**kwargs),
             *self._check_table_uniqueness(**kwargs),
+            *self._check_related_name_on_symmetrical(**kwargs),
         ]
 
+    def _check_related_name_on_symmetrical(self, **kwargs):
+        # Check if this is a ManyToManyField
+        if not isinstance(self, ManyToManyField):
+            return []
+
+        # Check if this is a self-referential field
+        is_self_referential = (
+            self.remote_field.model == RECURSIVE_RELATIONSHIP_CONSTANT or
+            (not isinstance(self.remote_field.model, str) and self.remote_field.model == self.model)
+        )
+
+        # If it's self-referential and symmetrical (default for self-referential)
+        # or explicitly symmetrical, and has a user-provided related_name, raise an error
+        if self._related_name is not None and (
+            (is_self_referential and self.remote_field.symmetrical is not False) or
+            (not is_self_referential and self.remote_field.symmetrical)
+        ):
+            return [
+                checks.Error(
+                    'related_name cannot be defined on a symmetrical ManyToManyField.',
+                    hint='Remove the related_name argument on the ManyToManyField as it is ignored on symmetrical relationships.',
+                    obj=self,
+                    id='fields.E345',
+                )
+            ]
+        return []
+
     def _check_unique(self, **kwargs):
         if self.unique:
             return [
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..6037d6c9df
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,37 @@
+from django.conf import settings
+from django.db import models
+import django
+import os
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+    )
+    django.setup()
+
+class Person(models.Model):
+    class Meta:
+        app_label = 'reproduce'
+
+    # This should raise an error since it's a symmetrical self-referential M2M with related_name
+    friends = models.ManyToManyField('self', related_name='friend_of')
+
+    # This should also raise an error since symmetrical=True is explicit
+    colleagues = models.ManyToManyField('self', symmetrical=True, related_name='colleague_of')
+
+    # These should be fine:
+    # Not symmetrical
+    followers = models.ManyToManyField('self', symmetrical=False, related_name='following')
+    # Symmetrical but no related_name
+    partners = models.ManyToManyField('self')
+
+# Run model checks
+print("\nChecking many-to-many fields:")
+person_model = Person()
+for field in person_model._meta.many_to_many:
+    print(f"\nChecking field {field.name}:")
+    errors = field.check()
+    for error in errors:
+        print(error)
\ No newline at end of file
