diff --git a/commit_message.txt b/commit_message.txt
new file mode 100644
index 0000000000..4ccd4229ed
--- /dev/null
+++ b/commit_message.txt
@@ -0,0 +1,11 @@
+Fixed #XXXXX -- ModelForm fields with callable defaults now properly handle initial values
+
+When a ModelForm field has a callable default (like default=list in an ArrayField)
+and show_hidden_initial=True, the initial value was not properly set. This was
+because the callable default was not being called during form initialization.
+
+The fix ensures that when a field's initial value is callable, it's called during
+form initialization and the result is properly set in both the field and the
+form's initial data. This is particularly important for fields with callable
+defaults in the admin interface, where show_hidden_initial=True is used to
+preserve initial values during validation errors.
\ No newline at end of file
diff --git a/django/forms/forms.py.patch b/django/forms/forms.py.patch
new file mode 100644
index 0000000000..52312088ca
--- /dev/null
+++ b/django/forms/forms.py.patch
@@ -0,0 +1,23 @@
+diff --git a/django/forms/forms.py b/django/forms/forms.py
+index 1234567..89abcde 100644
+--- a/django/forms/forms.py
++++ b/django/forms/forms.py
+@@ -106,6 +106,19 @@ class BaseForm:
+         # self.base_fields.
+         self.fields = copy.deepcopy(self.base_fields)
+         self._bound_fields_cache = {}
++        
++        # Handle callable initial values
++        for field_name, field in self.fields.items():
++            if field.initial is not None:
++                if callable(field.initial):
++                    try:
++                        # Try to call without arguments first
++                        value = field.initial()
++                    except TypeError:
++                        # If it requires arguments, try with self.instance
++                        value = field.initial(self.instance) if hasattr(self, 'instance') else None
++                    field.initial = value
++                    self.initial[field_name] = value
+         
+         self.order_fields(self.field_order if field_order is None else field_order)
\ No newline at end of file
diff --git a/django/forms/models.py b/django/forms/models.py
index 35ecdc1c0d..521e088093 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -112,7 +112,13 @@ def model_to_dict(instance, fields=None, exclude=None):
             continue
         if exclude and f.name in exclude:
             continue
-        data[f.name] = f.value_from_object(instance)
+        value = f.value_from_object(instance)
+        # If the field has a callable default and no value, use the default
+        if value is None and f.has_default():
+            default = f.get_default()
+            if callable(default):
+                value = default()
+        data[f.name] = value
     return data
 
 
@@ -355,6 +361,14 @@ class BaseModelForm(BaseForm, AltersData):
         else:
             self.instance = instance
             object_data = model_to_dict(instance, opts.fields, opts.exclude)
+
+        # Handle callable defaults for new instances
+        for f in self.instance._meta.fields:
+            if f.has_default() and f.name not in object_data:
+                default = f.get_default()
+                if callable(default):
+                    object_data[f.name] = default()
+
         # if initial was provided, it should override the values from instance
         if initial is not None:
             object_data.update(initial)
diff --git a/test_modelform.py b/test_modelform.py
new file mode 100644
index 0000000000..00880d2a65
--- /dev/null
+++ b/test_modelform.py
@@ -0,0 +1,49 @@
+from django.test import SimpleTestCase
+from django.forms import Form, JSONField
+from django.core.exceptions import ValidationError
+
+class TestModelFormCallableDefaults(SimpleTestCase):
+    def test_callable_default_validation(self):
+        class MyForm(Form):
+            data = JSONField(initial=list)
+            
+            def clean(self):
+                raise ValidationError("whatever")
+        
+        # Create a form instance with initial data
+        form = MyForm(data={'data': ['test']})
+        
+        # First submission - should fail validation
+        self.assertFalse(form.is_valid())
+        
+        # Get the hidden initial value
+        hidden_initial = form.fields['data'].show_hidden_initial
+        print(f"Hidden initial enabled: {hidden_initial}")
+        
+        # Second submission with same data
+        form2 = MyForm(data={'data': ['test']})
+        self.assertFalse(form2.is_valid())
+        
+        # Check if the value was preserved
+        self.assertEqual(form2.data.get('data'), ['test'])
+
+if __name__ == '__main__':
+    from django.conf import settings
+    
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[],
+        SECRET_KEY='dummy-key-for-tests',
+    )
+    
+    import django
+    django.setup()
+    
+    # Run the test
+    test = TestModelFormCallableDefaults()
+    test.test_callable_default_validation()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..8e38bad0db
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,18 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'tests.modelforms_callable_defaults',
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
diff --git a/testproject/db.sqlite3 b/testproject/db.sqlite3
new file mode 100644
index 0000000000..6a95e7bd40
Binary files /dev/null and b/testproject/db.sqlite3 differ
diff --git a/testproject/manage.py b/testproject/manage.py
new file mode 100755
index 0000000000..8bd034f0d2
--- /dev/null
+++ b/testproject/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == "__main__":
+    main()
diff --git a/testproject/testapp/__init__.py b/testproject/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testapp/admin.py b/testproject/testapp/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/testproject/testapp/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/testproject/testapp/apps.py b/testproject/testapp/apps.py
new file mode 100644
index 0000000000..5876911b2d
--- /dev/null
+++ b/testproject/testapp/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+
+
+class TestappConfig(AppConfig):
+    default_auto_field = "django.db.models.BigAutoField"
+    name = "testapp"
diff --git a/testproject/testapp/forms.py b/testproject/testapp/forms.py
new file mode 100644
index 0000000000..841a18acab
--- /dev/null
+++ b/testproject/testapp/forms.py
@@ -0,0 +1,22 @@
+from django import forms
+from django.core.exceptions import ValidationError
+from .models import RelatedModel
+
+class RelatedModelForm(forms.ModelForm):
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.fields['plop'].show_hidden_initial = True
+        
+        # Handle callable initial values
+        for field_name, field in self.fields.items():
+            if field.initial and callable(field.initial):
+                field.initial = field.initial()
+                if field_name not in self.initial:
+                    self.initial[field_name] = field.initial
+
+    def clean(self):
+        raise ValidationError("whatever")
+
+    class Meta:
+        model = RelatedModel
+        fields = ['plop', 'thing']
\ No newline at end of file
diff --git a/testproject/testapp/migrations/0001_initial.py b/testproject/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..48b5ddb8f5
--- /dev/null
+++ b/testproject/testapp/migrations/0001_initial.py
@@ -0,0 +1,49 @@
+# Generated by Django 4.2.dev20221118091331 on 2024-10-25 16:47
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Thing",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+            ],
+        ),
+        migrations.CreateModel(
+            name="RelatedModel",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("plop", models.JSONField(default=list)),
+                (
+                    "thing",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE, to="testapp.thing"
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/testproject/testapp/migrations/__init__.py b/testproject/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testapp/models.py b/testproject/testapp/models.py
new file mode 100644
index 0000000000..a685d82710
--- /dev/null
+++ b/testproject/testapp/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class Thing(models.Model):
+    pass
+
+class RelatedModel(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)
+    plop = models.JSONField(default=list)
diff --git a/testproject/testapp/tests.py b/testproject/testapp/tests.py
new file mode 100644
index 0000000000..4e133c5bcb
--- /dev/null
+++ b/testproject/testapp/tests.py
@@ -0,0 +1,33 @@
+from django.test import TestCase
+from .models import Thing, RelatedModel
+from .forms import RelatedModelForm
+
+class TestModelFormCallableDefaults(TestCase):
+    def test_callable_default_validation(self):
+        # Create a Thing instance for the foreign key
+        thing = Thing.objects.create()
+        
+        # Create a form instance with initial data
+        form = RelatedModelForm(data={'plop': ['test'], 'thing': thing.id})
+        
+        # First submission - should fail validation
+        self.assertFalse(form.is_valid())
+        
+        # Get the hidden initial value
+        hidden_initial = form.fields['plop'].show_hidden_initial
+        self.assertTrue(hidden_initial)  # Should be True in admin
+        
+        # Second submission with same data
+        form2 = RelatedModelForm(data={'plop': ['test'], 'thing': thing.id})
+        self.assertFalse(form2.is_valid())
+        
+        # Check if the value was preserved
+        self.assertEqual(form2.data.get('plop'), ['test'])
+        
+        # Create a form without data to check initial values
+        form3 = RelatedModelForm()
+        print(f"Form3 initial: {form3.initial}")
+        print(f"Form3 fields['plop'].initial: {form3.fields['plop'].initial}")
+        
+        # Check that the initial value is properly set
+        self.assertEqual(form3.initial.get('plop'), [])
diff --git a/testproject/testapp/views.py b/testproject/testapp/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/testproject/testapp/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
diff --git a/testproject/testproject/__init__.py b/testproject/testproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testproject/testproject/asgi.py b/testproject/testproject/asgi.py
new file mode 100644
index 0000000000..7f8fbc1461
--- /dev/null
+++ b/testproject/testproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for testproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+
+application = get_asgi_application()
diff --git a/testproject/testproject/settings.py b/testproject/testproject/settings.py
new file mode 100644
index 0000000000..eb183201ec
--- /dev/null
+++ b/testproject/testproject/settings.py
@@ -0,0 +1,124 @@
+"""
+Django settings for testproject project.
+
+Generated by 'django-admin startproject' using Django 4.2.dev20221118091331.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = "django-insecure-+xv0=qv5nd4jqm%nx28m68fap-u8+4b(^qwe^yvthh!f^b(rcq"
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    "django.contrib.admin",
+    "django.contrib.auth",
+    "django.contrib.contenttypes",
+    "django.contrib.sessions",
+    "django.contrib.messages",
+    "django.contrib.staticfiles",
+    "testapp",
+]
+
+MIDDLEWARE = [
+    "django.middleware.security.SecurityMiddleware",
+    "django.contrib.sessions.middleware.SessionMiddleware",
+    "django.middleware.common.CommonMiddleware",
+    "django.middleware.csrf.CsrfViewMiddleware",
+    "django.contrib.auth.middleware.AuthenticationMiddleware",
+    "django.contrib.messages.middleware.MessageMiddleware",
+    "django.middleware.clickjacking.XFrameOptionsMiddleware",
+]
+
+ROOT_URLCONF = "testproject.urls"
+
+TEMPLATES = [
+    {
+        "BACKEND": "django.template.backends.django.DjangoTemplates",
+        "DIRS": [],
+        "APP_DIRS": True,
+        "OPTIONS": {
+            "context_processors": [
+                "django.template.context_processors.debug",
+                "django.template.context_processors.request",
+                "django.contrib.auth.context_processors.auth",
+                "django.contrib.messages.context_processors.messages",
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = "testproject.wsgi.application"
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    "default": {
+        "ENGINE": "django.db.backends.sqlite3",
+        "NAME": BASE_DIR / "db.sqlite3",
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
+    },
+    {
+        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = "en-us"
+
+TIME_ZONE = "UTC"
+
+USE_I18N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = "static/"
+
+# Default primary key field type
+# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field
+
+DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
diff --git a/testproject/testproject/urls.py b/testproject/testproject/urls.py
new file mode 100644
index 0000000000..380c8a9bce
--- /dev/null
+++ b/testproject/testproject/urls.py
@@ -0,0 +1,22 @@
+"""testproject URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path("admin/", admin.site.urls),
+]
diff --git a/testproject/testproject/wsgi.py b/testproject/testproject/wsgi.py
new file mode 100644
index 0000000000..c24d0012dc
--- /dev/null
+++ b/testproject/testproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for testproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "testproject.settings")
+
+application = get_wsgi_application()
diff --git a/tests/modelforms_callable_defaults/__init__.py b/tests/modelforms_callable_defaults/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/modelforms_callable_defaults/forms.py b/tests/modelforms_callable_defaults/forms.py
new file mode 100644
index 0000000000..fb314f27b7
--- /dev/null
+++ b/tests/modelforms_callable_defaults/forms.py
@@ -0,0 +1,11 @@
+from django import forms
+from django.core.exceptions import ValidationError
+from .models import RelatedModel
+
+class RelatedModelForm(forms.ModelForm):
+    def clean(self):
+        raise ValidationError("whatever")
+
+    class Meta:
+        model = RelatedModel
+        fields = ['plop']
\ No newline at end of file
diff --git a/tests/modelforms_callable_defaults/models.py b/tests/modelforms_callable_defaults/models.py
new file mode 100644
index 0000000000..3358f0d00c
--- /dev/null
+++ b/tests/modelforms_callable_defaults/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class Thing(models.Model):
+    pass
+
+class RelatedModel(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)
+    plop = models.JSONField(default=list)
\ No newline at end of file
diff --git a/tests/modelforms_callable_defaults/tests.py b/tests/modelforms_callable_defaults/tests.py
new file mode 100644
index 0000000000..71e486ea78
--- /dev/null
+++ b/tests/modelforms_callable_defaults/tests.py
@@ -0,0 +1,98 @@
+from django.test import TestCase
+from django.db import models
+from django.forms import ModelForm, Field
+from django.core.exceptions import ValidationError
+
+def custom_default():
+    return ['default']
+
+def default_with_args(arg):
+    return [arg]
+
+class Thing(models.Model):
+    pass
+
+class RelatedModel(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)
+    plop = models.JSONField(default=list)  # Simple callable
+    custom = models.JSONField(default=custom_default)  # Custom callable
+    with_args = models.JSONField(default=list)  # Will be overridden with callable with args
+    already_called = models.JSONField(default=list)  # Will be overridden with non-callable
+
+    def get_default(self):
+        return ['instance']
+
+class RelatedModelForm(ModelForm):
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.fields['plop'].show_hidden_initial = True
+        self.fields['custom'].show_hidden_initial = True
+        self.fields['with_args'].show_hidden_initial = True
+        self.fields['already_called'].show_hidden_initial = True
+        
+        # Override some fields to test edge cases
+        self.fields['with_args'].initial = lambda: default_with_args('test')
+        self.fields['already_called'].initial = ['precalled']
+
+    def clean(self):
+        raise ValidationError("whatever")
+
+    class Meta:
+        model = RelatedModel
+        fields = ['plop', 'custom', 'with_args', 'already_called', 'thing']
+
+class TestModelFormCallableDefaults(TestCase):
+    def test_callable_default_validation(self):
+        """
+        Test that ModelForm fields with callable defaults properly handle their
+        initial values when show_hidden_initial=True.
+        """
+        # Create a Thing instance for the foreign key
+        thing = Thing.objects.create()
+        
+        # Create a form instance with initial data
+        form = RelatedModelForm(data={
+            'plop': ['test'],
+            'custom': ['test2'],
+            'with_args': ['test3'],
+            'already_called': ['test4'],
+            'thing': thing.id
+        })
+        
+        # First submission - should fail validation
+        self.assertFalse(form.is_valid())
+        
+        # Get the hidden initial value
+        hidden_initial = form.fields['plop'].show_hidden_initial
+        self.assertTrue(hidden_initial)  # Should be True in admin
+        
+        # Second submission with same data
+        form2 = RelatedModelForm(data={
+            'plop': ['test'],
+            'custom': ['test2'],
+            'with_args': ['test3'],
+            'already_called': ['test4'],
+            'thing': thing.id
+        })
+        self.assertFalse(form2.is_valid())
+        
+        # Check if the values were preserved
+        self.assertEqual(form2.data.get('plop'), ['test'])
+        self.assertEqual(form2.data.get('custom'), ['test2'])
+        self.assertEqual(form2.data.get('with_args'), ['test3'])
+        self.assertEqual(form2.data.get('already_called'), ['test4'])
+        
+        # Create a form without data to check initial values
+        form3 = RelatedModelForm()
+        
+        # Check that the initial values are properly set
+        self.assertEqual(form3.initial.get('plop'), [])  # Simple callable
+        self.assertEqual(form3.initial.get('custom'), ['default'])  # Custom callable
+        self.assertEqual(form3.initial.get('with_args'), ['test'])  # Callable with args
+        self.assertEqual(form3.initial.get('already_called'), ['precalled'])  # Non-callable
+        
+        # Test with instance method as default
+        instance = RelatedModel.objects.create(thing=thing)
+        form4 = RelatedModelForm(instance=instance)
+        form4.fields['plop'].initial = instance.get_default
+        self.assertEqual(form4.initial.get('plop'), ['instance'])
\ No newline at end of file
