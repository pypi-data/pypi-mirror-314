diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..ade0e48308
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,45 @@
+from sympy.abc import a, b, c, d, x, y
+from sympy import IndexedBase, printing, Symbol, sin
+
+# Test case 1: Multiple indices
+A = IndexedBase('A')
+expr1 = A[a, b, c]
+print("Testing multiple indices:")
+try:
+    result = printing.mathml(expr1)
+    print("Success!")
+    print(result)
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {str(e)}")
+
+# Test case 2: Nested expressions in indices
+expr2 = A[sin(x), y**2]
+print("\nTesting complex indices:")
+try:
+    result = printing.mathml(expr2)
+    print("Success!")
+    print(result)
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {str(e)}")
+
+# Test case 3: Multiple indexed terms in expression
+B = IndexedBase('B')
+expr3 = A[a,b] + 2*B[c,d]
+print("\nTesting multiple indexed terms:")
+try:
+    result = printing.mathml(expr3)
+    print("Success!")
+    print(result)
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {str(e)}")
+
+# Test case 4: Non-symbol base
+C = IndexedBase(Symbol('C', real=True))
+expr4 = C[a]
+print("\nTesting non-symbol base:")
+try:
+    result = printing.mathml(expr4)
+    print("Success!")
+    print(result)
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {str(e)}")
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..f1dc33a1a7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,22 @@
+from sympy.abc import a, b
+from sympy import IndexedBase, printing
+
+# Simple case
+expr = IndexedBase(a)[b]
+print("Testing simple indexed expression:")
+try:
+    result = printing.mathml(expr)
+    print("Success!")
+    print(result)
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {str(e)}")
+
+# More complex case with arithmetic
+expr2 = 2 * IndexedBase(a)[b] + 1
+print("\nTesting complex expression with indexed term:")
+try:
+    result = printing.mathml(expr2)
+    print("Success!")
+    print(result)
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {str(e)}")
\ No newline at end of file
diff --git a/sympy/printing/mathml.py b/sympy/printing/mathml.py
index 1aa0ee01a2..db130028c3 100644
--- a/sympy/printing/mathml.py
+++ b/sympy/printing/mathml.py
@@ -12,6 +12,7 @@
 from sympy.printing.pretty.pretty_symbology import greek_unicode
 from sympy.printing.printer import Printer
 
+
 class MathMLPrinterBase(Printer):
     """Contains common code required for MathMLContentPrinter and
     MathMLPresentationPrinter.
@@ -449,6 +450,21 @@ def _print_Basic(self, e):
             x.appendChild(self._print(arg))
         return x
 
+    def _print_Indexed(self, e):
+        x = self.dom.createElement('indexed')
+        base = self.dom.createElement('indexedbase')
+        # For IndexedBase objects, just print their label
+        if hasattr(e.base, 'name'):
+            ci = self.dom.createElement('ci')
+            ci.appendChild(self.dom.createTextNode(e.base.name))
+            base.appendChild(ci)
+        else:
+            base.appendChild(self._print(e.base))
+        x.appendChild(base)
+        for idx in e.indices:
+            x.appendChild(self._print(idx))
+        return x
+
     def _print_AssocOp(self, e):
         x = self.dom.createElement('apply')
         x_1 = self.dom.createElement(self.mathml_tag(e))
