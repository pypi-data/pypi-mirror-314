diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py
index ccc2223a5f..79cdee9fc0 100644
--- a/django/db/models/fields/reverse_related.py
+++ b/django/db/models/fields/reverse_related.py
@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):
     def identity(self):
         return super().identity + (
             self.through,
-            self.through_fields,
+            make_hashable(self.through_fields) if self.through_fields else None,
             self.db_constraint,
         )
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..692e444e5e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,87 @@
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.admin',
+        'django.contrib.messages',
+        'django.contrib.sessions',
+    ],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    }],
+    SECRET_KEY='dummy',
+)
+
+import django
+django.setup()
+
+from django.db import models
+
+class Parent(models.Model):
+    name = models.CharField(max_length=256)
+
+    class Meta:
+        app_label = 'test_app'
+
+class ProxyParent(Parent):
+    class Meta:
+        proxy = True
+        app_label = 'test_app'
+
+class Child(models.Model):
+    class Meta:
+        app_label = 'test_app'
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+    
+    # Test case 1: through_fields as a list
+    many_to_many_field = models.ManyToManyField(
+        to=Parent,
+        through="ManyToManyModel",
+        through_fields=list(['child', 'parent']),  # Force it to be a list
+        related_name="something"
+    )
+    
+    # Test case 2: through_fields as None (default)
+    many_to_many_field2 = models.ManyToManyField(
+        to=Parent,
+        through="ManyToManyModel",
+        related_name="something2"
+    )
+    
+    # Test case 3: through_fields as a tuple
+    many_to_many_field3 = models.ManyToManyField(
+        to=Parent,
+        through="ManyToManyModel",
+        through_fields=('child', 'parent'),  # As a tuple
+        related_name="something3"
+    )
+
+class ManyToManyModel(models.Model):
+    class Meta:
+        app_label = 'test_app'
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')
+    child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')
+    second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)
+
+# Force model validation which will trigger the error
+from django.core import management
+from django.core import checks
+from django.core.checks import registry
+
+# Run all model checks
+errors = registry.run_checks(tags=['models'])
+print("Model check errors:", errors)
\ No newline at end of file
