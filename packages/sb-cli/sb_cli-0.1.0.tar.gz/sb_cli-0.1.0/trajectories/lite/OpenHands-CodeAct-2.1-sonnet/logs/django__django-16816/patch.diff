diff --git a/cookies.txt b/cookies.txt
new file mode 100644
index 0000000000..c31d9899c3
--- /dev/null
+++ b/cookies.txt
@@ -0,0 +1,4 @@
+# Netscape HTTP Cookie File
+# https://curl.se/docs/http-cookies.html
+# This file was generated by libcurl! Edit at your own risk.
+
diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..53b9c93cf3
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index 0fefe65e48..31ee8a7485 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -895,27 +895,140 @@ class ModelAdminChecks(BaseModelAdminChecks):
             return []
         elif hasattr(obj, item):
             return []
+
+        # Check if it's a field on the current model
         try:
             field = obj.model._meta.get_field(item)
+            return []
         except FieldDoesNotExist:
-            try:
-                field = getattr(obj.model, item)
-            except AttributeError:
-                return [
-                    checks.Error(
-                        "The value of '%s' refers to '%s', which is not a "
-                        "callable, an attribute of '%s', or an attribute or "
-                        "method on '%s'."
+            pass
+
+        # Check if it's a field on a related model
+        related_fields = []
+        for field in obj.model._meta.get_fields():
+            if hasattr(field, 'remote_field') and field.remote_field:
+                try:
+                    related_model = field.remote_field.model
+                    related_field = related_model._meta.get_field(item)
+                    related_fields.append((field.name, related_model._meta.label))
+                except FieldDoesNotExist:
+                    continue
+
+        if related_fields:
+            # Field exists on one or more related models but not on this model
+            suggestions = [f"'{field}__{item}'" for field, _ in related_fields]
+            models = [model for _, model in related_fields]
+            if len(models) == 1:
+                msg = (
+                    "The value of '%s' refers to '%s', which is a field on "
+                    "'%s' but not on '%s'. Did you mean to use a method or "
+                    "property that returns the related field? For example: %s"
+                    % (
+                        label,
+                        item,
+                        models[0],
+                        obj.model._meta.label,
+                        suggestions[0],
+                    )
+                )
+            else:
+                msg = (
+                    "The value of '%s' refers to '%s', which is a field on "
+                    "%s but not on '%s'. Did you mean to use a method or "
+                    "property that returns the related field? For example: %s"
+                    % (
+                        label,
+                        item,
+                        " and ".join(f"'{m}'" for m in models),
+                        obj.model._meta.label,
+                        " or ".join(suggestions),
+                    )
+                )
+            return [
+                checks.Error(
+                    msg,
+                    obj=obj.__class__,
+                    id="admin.E108",
+                    hint=(
+                        "To fix this, either:\n"
+                        "1. Add a method/property named '%s' to your model that returns "
+                        "the related field value, or\n"
+                        "2. Use the field lookup syntax in list_display (e.g. %s), or\n"
+                        "3. Remove '%s' from list_display.\n\n"
+                        "For example, to add a method that returns the related field value:\n\n"
+                        "    class %s(models.Model):\n"
+                        "        def %s(self):\n"
+                        "            # Get the field value from the related model\n"
+                        "            try:\n"
+                        "                return self.%s.%s\n"
+                        "            except (AttributeError, %s.DoesNotExist):\n"
+                        "                return None\n\n"
+                        "Or to use the field lookup syntax in your ModelAdmin:\n\n"
+                        "    class %s(admin.ModelAdmin):\n"
+                        "        list_display = [%s]  # Use field lookup syntax to access related field\n\n"
+                        "Note: Using field lookup syntax (option 2) is recommended as it's more efficient "
+                        "and handles related object access automatically. It also works with admin features "
+                        "like sorting and filtering. For example:\n\n"
+                        "- Sorting: Clicking the column header will sort by the related field\n"
+                        "- Filtering: The field will be available in list_filter\n"
+                        "- Search: The field can be included in search_fields using %s__search\n\n"
+                        "See https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display "
+                        "for more information about list_display and field lookup syntax.\n\n"
+                        "If you meant to access a field on a related model, you must use the field lookup "
+                        "syntax (option 2) or create a method/property (option 1) to handle the relationship."
                         % (
-                            label,
                             item,
+                            suggestions[0],
+                            item,
+                            obj.model.__name__,
+                            item,
+                            related_fields[0][0],  # First related field name
+                            item,
+                            obj.model._meta.label.split('.')[-1],  # Model name
                             obj.__class__.__name__,
-                            obj.model._meta.label,
-                        ),
-                        obj=obj.__class__,
-                        id="admin.E108",
-                    )
-                ]
+                            suggestions[0],
+                            suggestions[0].strip("'"),
+                        )
+                    ),
+                )
+            ]
+
+        # Finally check if it's an attribute/method
+        try:
+            field = getattr(obj.model, item)
+            return []
+        except AttributeError:
+            return [
+                checks.Error(
+                    "The value of '%s' refers to '%s', which is not a "
+                    "callable, an attribute of '%s', or an attribute or "
+                    "method on '%s'."
+                    % (
+                        label,
+                        item,
+                        obj.__class__.__name__,
+                        obj.model._meta.label,
+                    ),
+                    obj=obj.__class__,
+                    id="admin.E108",
+                    hint=(
+                        "To fix this, either:\n"
+                        "1. Add a method/property named '%s' to your model, or\n"
+                        "2. Remove '%s' from list_display.\n\n"
+                        "For example, to add a method to your model:\n\n"
+                        "    class %s(models.Model):\n"
+                        "        def %s(self):\n"
+                        "            # Return a computed or derived value\n"
+                        "            return ..."
+                        % (
+                            item,
+                            item,
+                            obj.model.__name__,
+                            item,
+                        )
+                    ),
+                )
+            ]
         if isinstance(field, models.ManyToManyField) or (
             getattr(field, "rel", None) and field.rel.field.many_to_one
         ):
diff --git a/manage.py b/manage.py
new file mode 100644
index 0000000000..37c99140d8
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/polls/__init__.py b/polls/__init__.py
new file mode 100644
index 0000000000..a71e87e53e
--- /dev/null
+++ b/polls/__init__.py
@@ -0,0 +1 @@
+# polls app
\ No newline at end of file
diff --git a/polls/admin.py b/polls/admin.py
new file mode 100644
index 0000000000..e1f83f2914
--- /dev/null
+++ b/polls/admin.py
@@ -0,0 +1,8 @@
+from django.contrib import admin
+from .models import Question, Choice
+
+class QuestionAdmin(admin.ModelAdmin):
+    list_display = ['choice']  # This should raise error E108
+
+admin.site.register(Question, QuestionAdmin)
+admin.site.register(Choice)
\ No newline at end of file
diff --git a/polls/apps.py b/polls/apps.py
new file mode 100644
index 0000000000..31ad6235af
--- /dev/null
+++ b/polls/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class PollsConfig(AppConfig):
+    default_auto_field = 'django.db.models.BigAutoField'
+    name = 'polls'
\ No newline at end of file
diff --git a/polls/migrations/0001_initial.py b/polls/migrations/0001_initial.py
new file mode 100644
index 0000000000..b870ee9180
--- /dev/null
+++ b/polls/migrations/0001_initial.py
@@ -0,0 +1,50 @@
+# Generated by Django 5.0.dev20230501165724 on 2024-10-25 16:46
+
+import django.db.models.deletion
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name="Question",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("question_text", models.CharField(max_length=200)),
+            ],
+        ),
+        migrations.CreateModel(
+            name="Choice",
+            fields=[
+                (
+                    "id",
+                    models.BigAutoField(
+                        auto_created=True,
+                        primary_key=True,
+                        serialize=False,
+                        verbose_name="ID",
+                    ),
+                ),
+                ("choice_text", models.CharField(max_length=200)),
+                (
+                    "question",
+                    models.ForeignKey(
+                        on_delete=django.db.models.deletion.CASCADE, to="polls.question"
+                    ),
+                ),
+            ],
+        ),
+    ]
diff --git a/polls/migrations/__init__.py b/polls/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/polls/models.py b/polls/models.py
new file mode 100644
index 0000000000..4d6aec2435
--- /dev/null
+++ b/polls/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class Question(models.Model):
+    question_text = models.CharField(max_length=200)
+
+class Choice(models.Model):
+    question = models.ForeignKey(Question, on_delete=models.CASCADE)
+    choice_text = models.CharField(max_length=200)
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..f4c9b08923
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,71 @@
+import os
+import django
+from django.conf import settings
+from django.apps import apps
+from django.core.management import execute_from_command_line
+
+# Configure Django settings before importing models/admin
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'settings')
+
+# Configure Django settings
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+        'polls',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+        }
+    },
+    MIDDLEWARE=[
+        'django.middleware.security.SecurityMiddleware',
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+        'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    ],
+    ROOT_URLCONF='urls',
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    }],
+    SECRET_KEY='dummy-key',
+)
+
+
+
+# Run validation checks
+if __name__ == '__main__':
+    django.setup()
+    from django.core.checks import run_checks, Tags
+    from django.contrib.admin.sites import site
+    errors = run_checks(tags=[Tags.admin])
+    for error in errors:
+        print(f"{error.id}: {error.msg}")
+    
+    # Force admin checks
+    from polls.admin import QuestionAdmin
+    from polls.models import Question
+    admin_obj = QuestionAdmin(Question, site)
+    errors = admin_obj.check()
+    for error in errors:
+        print(f"{error.id}: {error.msg}")
\ No newline at end of file
diff --git a/server.log b/server.log
new file mode 100644
index 0000000000..6a28bacc0a
--- /dev/null
+++ b/server.log
@@ -0,0 +1,234 @@
+Watching for file changes with StatReloader
+[25/Oct/2024 11:47:06] "GET /admin/polls/question/ HTTP/1.1" 302 0
+Forbidden (CSRF cookie not set.): /admin/login/
+[25/Oct/2024 11:47:25] "POST /admin/login/ HTTP/1.1" 403 2869
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:46:52
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:47:53
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:48:19
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:48:50
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:49:21
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:49:49
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:50:19
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:50:47
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:51:17
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:51:53
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:52:28
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:53:09
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:53:50
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:54:41
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:55:29
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:56:19
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:57:07
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:58:01
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:58:56
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 11:59:47
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 12:00:41
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 12:01:42
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+/testbed/django/contrib/admin/checks.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 25, 2024 - 12:02:45
+Django version 5.0.dev20230501165724, using settings 'settings'
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..29575fd2d4
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,51 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+DEBUG = True
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'polls',
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'urls'
+
+TEMPLATES = [{
+    'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    'APP_DIRS': True,
+    'OPTIONS': {
+        'context_processors': [
+            'django.template.context_processors.debug',
+            'django.template.context_processors.request',
+            'django.contrib.auth.context_processors.auth',
+            'django.contrib.messages.context_processors.messages',
+        ],
+    },
+}]
+
+SECRET_KEY = 'dummy-key'
+
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/urls.py b/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
