diff --git a/django/db/models/base.py b/django/db/models/base.py
index 7bb3fa4706..c81cf683e0 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1279,6 +1279,7 @@ class Model(metaclass=ModelBase):
                 *cls._check_unique_together(),
                 *cls._check_indexes(databases),
                 *cls._check_ordering(),
+                *cls._check_constraint_fields(),
                 *cls._check_constraints(databases),
             ]
 
@@ -1585,6 +1586,15 @@ class Model(metaclass=ModelBase):
                 errors.extend(cls._check_local_fields(fields, "unique_together"))
             return errors
 
+    @classmethod
+    def _check_constraint_fields(cls):
+        """Check fields in constraints."""
+        errors = []
+        for constraint in cls._meta.constraints:
+            if hasattr(constraint, 'check'):
+                errors.extend(constraint.check(cls))
+        return errors
+
     @classmethod
     def _check_indexes(cls, databases):
         """Check fields, names, and conditions of indexes."""
diff --git a/django/db/models/constraints.py b/django/db/models/constraints.py
index 64bd60484e..9842ee00de 100644
--- a/django/db/models/constraints.py
+++ b/django/db/models/constraints.py
@@ -1,5 +1,7 @@
 from enum import Enum
 
+from django.core import checks
+from django.db import models
 from django.db.models.query_utils import Q
 from django.db.models.sql.query import Query
 
@@ -95,6 +97,39 @@ class UniqueConstraint(BaseConstraint):
         self.deferrable = deferrable
         super().__init__(name)
 
+    def check(self, model):
+        """Check if all the fields exist on the model."""
+        errors = []
+        # Get all fields on the model including reverse relations
+        forward_fields_map = {}
+        for field in model._meta._get_fields(reverse=False):
+            forward_fields_map[field.name] = field
+            if hasattr(field, 'attname'):
+                forward_fields_map[field.attname] = field
+
+        for field_name in self.fields:
+            try:
+                field = forward_fields_map[field_name]
+            except KeyError:
+                errors.append(
+                    checks.Error(
+                        "'constraints' refers to the nonexistent field '%s'." % field_name,
+                        obj=model,
+                        id='models.E012',
+                    )
+                )
+            else:
+                if isinstance(field.remote_field, models.ManyToManyRel):
+                    errors.append(
+                        checks.Error(
+                            "'constraints' refers to a ManyToManyField '%s', but "
+                            "ManyToManyFields are not permitted in 'constraints'." % field_name,
+                            obj=model,
+                            id='models.E013',
+                        )
+                    )
+        return errors
+
     def _get_condition_sql(self, model, schema_editor):
         if self.condition is None:
             return None
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..9b29a848fa
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,23 @@
+from django.conf import settings
+from django.db import models
+from django.core.checks import Error
+import django
+
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+django.setup()
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+        constraints = [
+            models.UniqueConstraint(fields=['missing_field'], name='unique_missing')
+        ]
+
+if __name__ == '__main__':
+    errors = TestModel.check()
+    print("Errors:", errors)
\ No newline at end of file
diff --git a/reproduce_m2m.py b/reproduce_m2m.py
new file mode 100644
index 0000000000..63cb5124b6
--- /dev/null
+++ b/reproduce_m2m.py
@@ -0,0 +1,24 @@
+from django.conf import settings
+from django.db import models
+from django.core.checks import Error
+import django
+
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+django.setup()
+
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    m2m = models.ManyToManyField('self')
+    
+    class Meta:
+        app_label = 'testapp'
+        constraints = [
+            models.UniqueConstraint(fields=['m2m'], name='unique_m2m')
+        ]
+
+if __name__ == '__main__':
+    errors = TestModel.check()
+    print("Errors:", errors)
\ No newline at end of file
