diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..53c4dcc543 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -915,17 +915,16 @@ class RenameIndex(IndexOperation):
 
     def state_forwards(self, app_label, state):
         if self.old_fields:
-            state.add_index(
-                app_label,
-                self.model_name_lower,
-                models.Index(fields=self.old_fields, name=self.new_name),
-            )
-            state.remove_model_options(
-                app_label,
-                self.model_name_lower,
-                AlterIndexTogether.option_name,
-                self.old_fields,
+            # Get the model state
+            model_state = state.models[app_label, self.model_name_lower]
+            # Create a new unique index with the new name
+            new_index = models.Index(
+                fields=self.old_fields,
+                name=self.new_name,
+                unique=True,
             )
+            # Add the new index to the model state
+            model_state.options['indexes'] = list(model_state.options.get('indexes', [])) + [new_index]
         else:
             state.rename_index(
                 app_label, self.model_name_lower, self.old_name, self.new_name
@@ -942,7 +941,7 @@ class RenameIndex(IndexOperation):
                 from_model._meta.get_field(field).column for field in self.old_fields
             ]
             matching_index_name = schema_editor._constraint_names(
-                from_model, column_names=columns, index=True
+                from_model, column_names=columns, unique=True
             )
             if len(matching_index_name) != 1:
                 raise ValueError(
@@ -953,21 +952,68 @@ class RenameIndex(IndexOperation):
                         ", ".join(columns),
                     )
                 )
-            old_index = models.Index(
-                fields=self.old_fields,
-                name=matching_index_name[0],
+            # Drop the old unique constraint
+            schema_editor.execute(
+                schema_editor.sql_delete_unique % {
+                    "table": schema_editor.quote_name(from_model._meta.db_table),
+                    "name": schema_editor.quote_name(matching_index_name[0]),
+                }
+            )
+            # Create a new unique constraint with the new name
+            schema_editor.execute(
+                schema_editor.sql_create_unique % {
+                    "table": schema_editor.quote_name(from_model._meta.db_table),
+                    "name": schema_editor.quote_name(self.new_name),
+                    "columns": ", ".join(schema_editor.quote_name(col) for col in columns),
+                    "deferrable": "",
+                }
             )
         else:
             from_model_state = from_state.models[app_label, self.model_name_lower]
             old_index = from_model_state.get_index_by_name(self.old_name)
-
-        to_model_state = to_state.models[app_label, self.model_name_lower]
-        new_index = to_model_state.get_index_by_name(self.new_name)
-        schema_editor.rename_index(model, old_index, new_index)
+            to_model_state = to_state.models[app_label, self.model_name_lower]
+            new_index = to_model_state.get_index_by_name(self.new_name)
+            schema_editor.rename_index(model, old_index, new_index)
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
         if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
+            # Get the model from the from_state
+            model = from_state.apps.get_model(app_label, self.model_name)
+            if not self.allow_migrate_model(schema_editor.connection.alias, model):
+                return
+
+            # Get the old auto-generated name
+            columns = [
+                model._meta.get_field(field).column for field in self.old_fields
+            ]
+            matching_index_name = schema_editor._constraint_names(
+                model, column_names=columns, unique=True
+            )
+            if len(matching_index_name) != 1:
+                raise ValueError(
+                    "Found wrong number (%s) of indexes for %s(%s)."
+                    % (
+                        len(matching_index_name),
+                        model._meta.db_table,
+                        ", ".join(columns),
+                    )
+                )
+            # Drop the unique constraint with the new name
+            schema_editor.execute(
+                schema_editor.sql_delete_unique % {
+                    "table": schema_editor.quote_name(model._meta.db_table),
+                    "name": schema_editor.quote_name(self.new_name),
+                }
+            )
+            # Create a new unique constraint with the old name
+            schema_editor.execute(
+                schema_editor.sql_create_unique % {
+                    "table": schema_editor.quote_name(model._meta.db_table),
+                    "name": schema_editor.quote_name(matching_index_name[0]),
+                    "columns": ", ".join(schema_editor.quote_name(col) for col in columns),
+                    "deferrable": "",
+                }
+            )
             return
 
         self.new_name_lower, self.old_name_lower = (
