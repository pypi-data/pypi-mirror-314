diff --git a/astropy/wcs/wcs.py b/astropy/wcs/wcs.py
index d3a06f2b31..672cceb690 100644
--- a/astropy/wcs/wcs.py
+++ b/astropy/wcs/wcs.py
@@ -1212,12 +1212,24 @@ reduce these to 2 dimensions using the naxis kwarg.
         """
 
         def _return_list_of_arrays(axes, origin):
+            # Check if arrays are either all empty or all non-empty
+            empty_arrays = [x.size == 0 for x in axes]
+            if not all(empty_arrays) and any(empty_arrays):
+                raise ValueError("Cannot mix empty and non-empty coordinate arrays")
+
             try:
                 axes = np.broadcast_arrays(*axes)
             except ValueError:
                 raise ValueError(
                     "Coordinate arrays are not broadcastable to each other")
 
+            # Handle empty arrays
+            if any(empty_arrays):
+                if ra_dec_order and sky == 'output':
+                    return (np.array([], dtype=np.float64),
+                           np.array([], dtype=np.float64))
+                return [np.array([], dtype=np.float64) for _ in range(self.naxis)]
+
             xy = np.hstack([x.reshape((x.size, 1)) for x in axes])
 
             if ra_dec_order and sky == 'input':
@@ -1235,6 +1247,9 @@ reduce these to 2 dimensions using the naxis kwarg.
                 raise ValueError(
                     "When providing two arguments, the array must be "
                     "of shape (N, {0})".format(self.naxis))
+            # Handle empty arrays
+            if xy.size == 0:
+                return np.zeros((0, self.naxis), dtype=np.float64)
             if ra_dec_order and sky == 'input':
                 xy = self._denormalize_sky(xy)
             result = func(xy, origin)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..db7a394138
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,25 @@
+from astropy.wcs import WCS
+import numpy as np
+
+# Create a simple WCS object
+w = WCS(naxis=2)
+w.wcs.crpix = [1, 1]
+w.wcs.cdelt = [1, 1]
+w.wcs.crval = [1, 1]
+w.wcs.ctype = ["RA---TAN", "DEC--TAN"]
+
+# Try with empty lists
+print("Testing with empty lists:")
+try:
+    result = w.wcs_pix2world([], [], 0)
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error:", str(e))
+
+# Try with empty numpy arrays
+print("\nTesting with empty numpy arrays:")
+try:
+    result = w.wcs_pix2world(np.array([]), np.array([]), 0)
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error:", str(e))
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..79646bf15d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,40 @@
+from astropy.wcs import WCS
+import numpy as np
+
+# Create a simple WCS object
+w = WCS(naxis=2)
+w.wcs.crpix = [1, 1]
+w.wcs.cdelt = [1, 1]
+w.wcs.crval = [1, 1]
+w.wcs.ctype = ["RA---TAN", "DEC--TAN"]
+
+print("Test 1: Empty lists")
+result = w.wcs_pix2world([], [], 0)
+print("Result:", result)
+
+print("\nTest 2: Empty numpy arrays")
+result = w.wcs_pix2world(np.array([]), np.array([]), 0)
+print("Result:", result)
+
+print("\nTest 3: Single point")
+result = w.wcs_pix2world([1], [1], 0)
+print("Result:", result)
+
+print("\nTest 4: Multiple points")
+result = w.wcs_pix2world([1, 2], [1, 2], 0)
+print("Result:", result)
+
+print("\nTest 5: Empty array with shape (0,2)")
+result = w.wcs_pix2world(np.zeros((0, 2)), 0)
+print("Result:", result)
+
+print("\nTest 6: Mixed empty and non-empty arrays (should fail)")
+try:
+    result = w.wcs_pix2world([1], [], 0)
+    print("Result:", result)
+except ValueError as e:
+    print("Expected error:", str(e))
+
+print("\nTest 7: 3D empty array with correct last dimension")
+result = w.wcs_pix2world(np.zeros((0, 0, 2)), 0)
+print("Result:", result)
\ No newline at end of file
