diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 9344979c56..3973a9e66b 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -462,6 +462,14 @@ class IsNull(BuiltinLookup):
     lookup_name = 'isnull'
     prepare_rhs = False
 
+    def get_prep_lookup(self):
+        if not isinstance(self.rhs, bool):
+            raise ValueError(
+                'The __isnull lookup requires a boolean value. '
+                'Got %r of type %s.' % (self.rhs, type(self.rhs).__name__)
+            )
+        return self.rhs
+
     def as_sql(self, compiler, connection):
         sql, params = compiler.compile(self.lhs)
         if self.rhs:
diff --git a/reproduce_isnull.py b/reproduce_isnull.py
new file mode 100644
index 0000000000..666d5b28bc
--- /dev/null
+++ b/reproduce_isnull.py
@@ -0,0 +1,60 @@
+from django.conf import settings
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField'
+)
+
+# Initialize Django
+import django
+django.setup()
+
+# Create a test model
+class TestModel(models.Model):
+    name = models.CharField(max_length=100, null=True)
+    
+    class Meta:
+        app_label = 'auth'  # Use an existing app from INSTALLED_APPS
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+# Try using __isnull with non-boolean values
+print("Testing __isnull with non-boolean values:")
+
+# Create a test object
+obj = TestModel.objects.create(name=None)
+
+# Test with integer
+try:
+    result = TestModel.objects.filter(name__isnull=1).exists()
+    print("Integer value (1) accepted - should be rejected")
+except Exception as e:
+    print("Integer value (1) correctly rejected:", str(e))
+
+# Test with string
+try:
+    result = TestModel.objects.filter(name__isnull="true").exists()
+    print("String value ('true') accepted - should be rejected")
+except Exception as e:
+    print("String value ('true') correctly rejected:", str(e))
+
+# Test with boolean (should work)
+try:
+    result = TestModel.objects.filter(name__isnull=True).exists()
+    print("Boolean value (True) correctly accepted")
+except Exception as e:
+    print("Boolean value (True) unexpectedly rejected:", str(e))
\ No newline at end of file
