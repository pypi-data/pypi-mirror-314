diff --git a/django/forms/models.py b/django/forms/models.py
index 422bc5d178..e03a3803cd 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1188,7 +1188,7 @@ class ModelChoiceField(ChoiceField):
     # This class is a subclass of ChoiceField for purity, but it doesn't
     # actually use any of ChoiceField's implementation.
     default_error_messages = {
-        'invalid_choice': _('Select a valid choice. That choice is not one of'
+        'invalid_choice': _('Select a valid choice. %(value)s is not one of'
                             ' the available choices.'),
     }
     iterator = ModelChoiceIterator
@@ -1284,7 +1284,11 @@ class ModelChoiceField(ChoiceField):
                 value = getattr(value, key)
             value = self.queryset.get(**{key: value})
         except (ValueError, TypeError, self.queryset.model.DoesNotExist):
-            raise ValidationError(self.error_messages['invalid_choice'], code='invalid_choice')
+            raise ValidationError(
+                self.error_messages['invalid_choice'],
+                code='invalid_choice',
+                params={'value': value},
+            )
         return value
 
     def validate(self, value):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..b3b9e7613d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,50 @@
+from django.forms import ModelChoiceField
+from django.core.exceptions import ValidationError
+from django.db import models
+from django.conf import settings
+import django
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+)
+django.setup()
+
+# Create a ModelChoiceField instance with a mock queryset
+class MockModel:
+    DoesNotExist = models.ObjectDoesNotExist
+
+class MockQuerySet:
+    def get(self, **kwargs):
+        raise MockModel.DoesNotExist("Object does not exist")
+    
+    def all(self):
+        return self
+    
+    @property
+    def model(self):
+        return MockModel
+
+field = ModelChoiceField(queryset=MockQuerySet(), required=False)
+
+# Try to validate an invalid choice
+def test_value(value):
+    try:
+        field.clean(value)
+    except ValidationError as e:
+        print(f"Value: {value!r}")
+        print("Error message:", e.messages[0])
+        print()
+
+# Test cases
+test_value(999)  # Invalid ID
+test_value(None)  # None value
+test_value("")  # Empty string
+test_value("abc")  # Non-numeric value
+    # Should show something like: "Select a valid choice. 999 is not one of the available choices."
\ No newline at end of file
