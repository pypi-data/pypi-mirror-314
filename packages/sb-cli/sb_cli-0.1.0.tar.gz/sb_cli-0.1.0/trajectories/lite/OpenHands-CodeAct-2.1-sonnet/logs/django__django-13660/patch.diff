diff --git a/django/core/management/commands/shell.py b/django/core/management/commands/shell.py
index 2b306a579e..f46d45a85b 100644
--- a/django/core/management/commands/shell.py
+++ b/django/core/management/commands/shell.py
@@ -82,15 +82,18 @@ class Command(BaseCommand):
         code.interact(local=imported_objects)
 
     def handle(self, **options):
+        # Set up a dictionary to serve as the environment for code execution
+        imported_objects = {}
+
         # Execute the command and exit.
         if options['command']:
-            exec(options['command'])
+            exec(options['command'], imported_objects)
             return
 
         # Execute stdin if it has anything to read and exit.
         # Not supported on Windows due to select.select() limitations.
         if sys.platform != 'win32' and not sys.stdin.isatty() and select.select([sys.stdin], [], [], 0)[0]:
-            exec(sys.stdin.read())
+            exec(sys.stdin.read(), imported_objects)
             return
 
         available_shells = [options['interface']] if options['interface'] else self.shells
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..c70bb45f6e
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,35 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+# Configure minimal settings
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy',
+        PASSWORD_RESET_TIMEOUT=3600,
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+    )
+
+import django
+django.setup()
+
+from django.core.management import execute_from_command_line
+
+# Test the shell command with nested functions and imports
+test_code = '''
+import django
+from django.conf import settings
+
+def outer():
+    def inner():
+        import sys
+        print(f"Django {django.__version__} on Python {sys.version.split()[0]}")
+        print(f"Debug mode: {settings.DEBUG}")
+    inner()
+
+outer()
+'''
+
+execute_from_command_line(['manage.py', 'shell', '-c', test_code])
\ No newline at end of file
