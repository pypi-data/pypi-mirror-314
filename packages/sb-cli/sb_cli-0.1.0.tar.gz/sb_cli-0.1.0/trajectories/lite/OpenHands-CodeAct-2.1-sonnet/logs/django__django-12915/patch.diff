diff --git a/django/contrib/staticfiles/handlers.py b/django/contrib/staticfiles/handlers.py
index 711d8864ad..39741ed8f8 100644
--- a/django/contrib/staticfiles/handlers.py
+++ b/django/contrib/staticfiles/handlers.py
@@ -33,14 +33,23 @@ class StaticFilesHandlerMixin:
         * the host is provided as part of the base_url
         * the request's path isn't under the media path (or equal)
         """
+        print(f"Checking path: {path}")
+        print(f"Base URL: {self.base_url}")
+        print(f"Base URL[2]: {self.base_url[2]}")
+        print(f"Base URL[1]: {self.base_url[1]}")
         return path.startswith(self.base_url[2]) and not self.base_url[1]
 
     def file_path(self, url):
         """
         Return the relative path to the media file on disk for the given URL.
         """
+        print(f"Getting file path for URL: {url}")
+        print(f"Base URL[2]: {self.base_url[2]}")
         relative_url = url[len(self.base_url[2]):]
-        return url2pathname(relative_url)
+        print(f"Relative URL: {relative_url}")
+        result = url2pathname(relative_url)
+        print(f"Final path: {result}")
+        return result
 
     def serve(self, request):
         """Serve the request path."""
@@ -52,6 +61,17 @@ class StaticFilesHandlerMixin:
         except Http404 as e:
             return response_for_exception(request, e)
 
+    async def get_response_async(self, request):
+        """
+        Async version of get_response.
+        """
+        try:
+            # Since serve() is synchronous, we need to run it in a thread
+            from asgiref.sync import sync_to_async
+            return await sync_to_async(self.serve, thread_sensitive=True)(request)
+        except Http404 as e:
+            return await sync_to_async(response_for_exception, thread_sensitive=True)(request, e)
+
 
 class StaticFilesHandler(StaticFilesHandlerMixin, WSGIHandler):
     """
diff --git a/django/contrib/staticfiles/views.py b/django/contrib/staticfiles/views.py
index 6c36e7a91b..e3a7d192a4 100644
--- a/django/contrib/staticfiles/views.py
+++ b/django/contrib/staticfiles/views.py
@@ -27,13 +27,20 @@ def serve(request, path, insecure=False, **kwargs):
 
     It uses the django.views.static.serve() view to serve the found files.
     """
+    print(f"Serving path: {path}")
+    print(f"DEBUG: {settings.DEBUG}")
+    print(f"insecure: {insecure}")
     if not settings.DEBUG and not insecure:
         raise Http404
     normalized_path = posixpath.normpath(path).lstrip('/')
+    print(f"Normalized path: {normalized_path}")
     absolute_path = finders.find(normalized_path)
+    print(f"Absolute path: {absolute_path}")
     if not absolute_path:
         if path.endswith('/') or path == '':
             raise Http404("Directory indexes are not allowed here.")
         raise Http404("'%s' could not be found" % path)
     document_root, path = os.path.split(absolute_path)
+    print(f"Document root: {document_root}")
+    print(f"Final path: {path}")
     return static.serve(request, path, document_root=document_root, **kwargs)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..ed2a2b73ae
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,58 @@
+import os
+import django
+from django.conf import settings
+from django.core.asgi import get_asgi_application
+from django.contrib.staticfiles.handlers import ASGIStaticFilesHandler
+
+import os
+
+# Configure minimal Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='secret',
+    ROOT_URLCONF='urls',
+    STATIC_URL='/static/',
+    INSTALLED_APPS=[
+        'django.contrib.staticfiles',
+    ],
+    STATIC_ROOT=os.path.join(os.path.dirname(__file__), 'static'),
+    STATICFILES_DIRS=[os.path.join(os.path.dirname(__file__), 'static')],
+    ALLOWED_HOSTS=['*'],
+    LOGGING_CONFIG=None,
+    LOGGING={},
+)
+
+django.setup()
+
+# Run collectstatic
+from django.core.management import call_command
+call_command('collectstatic', '--noinput', verbosity=0)
+
+# Create ASGI application with static files handler
+application = get_asgi_application()
+application = ASGIStaticFilesHandler(application)
+
+# Test the application with a mock request
+async def test_app():
+    scope = {
+        'type': 'http',
+        'method': 'GET',
+        'path': '/static/test.css',
+        'headers': [],
+    }
+    
+    async def receive():
+        return {'type': 'http.request'}
+    
+    async def send(message):
+        print(f"Response: {message}")
+    
+    print(f"Requesting path: {scope['path']}")
+    print(f"Static root: {settings.STATIC_ROOT}")
+    print(f"Static URL: {settings.STATIC_URL}")
+    await application(scope, receive, send)
+
+if __name__ == '__main__':
+    import asyncio
+    loop = asyncio.get_event_loop()
+    loop.run_until_complete(test_app())
\ No newline at end of file
diff --git a/static/test.css b/static/test.css
new file mode 100644
index 0000000000..991912d894
--- /dev/null
+++ b/static/test.css
@@ -0,0 +1 @@
+body { color: red; }
diff --git a/urls.py b/urls.py
new file mode 100644
index 0000000000..a848dfb64f
--- /dev/null
+++ b/urls.py
@@ -0,0 +1,3 @@
+from django.urls import path
+
+urlpatterns = []
\ No newline at end of file
