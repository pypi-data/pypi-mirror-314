diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 2d4610aac4..72b3165b8c 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -155,11 +155,15 @@ class RegexPattern(CheckURLMixin):
     def match(self, path):
         match = self.regex.search(path)
         if match:
-            # If there are any named groups, use those as kwargs, ignoring
-            # non-named groups. Otherwise, pass all non-named arguments as
+            # If there are any named groups, use those as kwargs, including None values
+            # for optional groups. Otherwise, pass all non-named arguments as
             # positional arguments.
-            kwargs = {k: v for k, v in match.groupdict().items() if v is not None}
-            args = () if kwargs else match.groups()
+            if match.groupdict():
+                kwargs = match.groupdict()
+                args = ()
+            else:
+                kwargs = {}
+                args = match.groups()
             return path[match.end():], args, kwargs
         return None
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..5d038c40ae
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,52 @@
+from django.conf import settings
+from django.http import HttpResponse
+from django.urls import re_path, get_resolver
+from django.core.handlers.base import BaseHandler
+
+# Configure minimal Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='secret',
+    ROOT_URLCONF=__name__,
+)
+
+# Define the view function
+def modules(request, format='html'):
+    return HttpResponse(f'Format: {format}')
+
+# Define URL patterns
+urlpatterns = [
+    re_path(r'^module/(?P<format>(html|json|xml))?/?$', modules, name='modules'),
+]
+
+# Test the URL resolution
+if __name__ == '__main__':
+    import django
+    django.setup()
+
+    # Create a request handler
+    handler = BaseHandler()
+    handler.load_middleware()
+
+    # Test URL resolution
+    resolver = get_resolver()
+    
+    # Test with no format specified
+    print("\nTesting URL without format:")
+    try:
+        match = resolver.resolve('/module/')
+        print(f"Match found: {match}")
+        print(f"Args: {match.args}")
+        print(f"Kwargs: {match.kwargs}")
+    except Exception as e:
+        print(f"Error: {e}")
+
+    # Test with format specified
+    print("\nTesting URL with format:")
+    try:
+        match = resolver.resolve('/module/json/')
+        print(f"Match found: {match}")
+        print(f"Args: {match.args}")
+        print(f"Kwargs: {match.kwargs}")
+    except Exception as e:
+        print(f"Error: {e}")
\ No newline at end of file
