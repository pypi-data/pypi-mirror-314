diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..cb3f7b48d
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,32 @@
+import numpy as np
+from sklearn.feature_selection.mutual_info_ import _estimate_mi
+
+# Create sample data
+# Create sample data with both continuous and discrete features
+np.random.seed(42)
+n_samples = 20
+n_features = 3
+
+# Create features: first and last are discrete (integers), middle one is continuous
+X = np.zeros((n_samples, n_features))
+X[:, 0] = np.random.randint(0, 5, n_samples)  # Discrete feature
+X[:, 1] = np.random.rand(n_samples)  # Continuous feature
+X[:, 2] = np.random.randint(0, 3, n_samples)  # Discrete feature
+y = np.random.randint(0, 2, n_samples)  # Binary target
+
+# This will work fine
+print("Testing with discrete_features='auto':")
+mi = _estimate_mi(X, y, discrete_features='auto')
+print("MI scores:", mi)
+
+# This will raise a warning in future numpy versions
+print("\nTesting with discrete_features as boolean array:")
+discrete_features = np.array([True, False, True])
+mi = _estimate_mi(X, y, discrete_features=discrete_features)
+print("MI scores:", mi)
+
+# This will also raise a warning in future numpy versions
+print("\nTesting with discrete_features as index array:")
+discrete_features = np.array([0, 2])  # indices of discrete features
+mi = _estimate_mi(X, y, discrete_features=discrete_features)
+print("MI scores:", mi)
\ No newline at end of file
diff --git a/sklearn/feature_selection/mutual_info_.py b/sklearn/feature_selection/mutual_info_.py
index d5d1b7fb5..7a760d175 100644
--- a/sklearn/feature_selection/mutual_info_.py
+++ b/sklearn/feature_selection/mutual_info_.py
@@ -247,7 +247,7 @@ def _estimate_mi(X, y, discrete_features='auto', discrete_target=False,
     X, y = check_X_y(X, y, accept_sparse='csc', y_numeric=not discrete_target)
     n_samples, n_features = X.shape
 
-    if discrete_features == 'auto':
+    if isinstance(discrete_features, str) and discrete_features == 'auto':
         discrete_features = issparse(X)
 
     if isinstance(discrete_features, bool):
