diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py
index 4153dfccb2..0b93cf784b 100644
--- a/astropy/nddata/mixins/ndarithmetic.py
+++ b/astropy/nddata/mixins/ndarithmetic.py
@@ -512,19 +512,22 @@ class NDArithmeticMixin:
             If neither had a mask ``None`` is returned. Otherwise
             ``handle_mask`` must create (and copy) the returned mask.
         """
-        # If only one mask is present we need not bother about any type checks
-        if (
-            self.mask is None and operand is not None and operand.mask is None
-        ) or handle_mask is None:
+        # If handle_mask is None, return None
+        if handle_mask is None:
             return None
-        elif self.mask is None and operand is not None:
-            # Make a copy so there is no reference in the result.
+            
+        # If neither operand has a mask, return None
+        if self.mask is None and (operand is None or operand.mask is None):
+            return None
+            
+        # If only one operand has a mask, return a copy of that mask
+        if self.mask is None and operand is not None and operand.mask is not None:
             return deepcopy(operand.mask)
-        elif operand is None:
+        elif (operand is None or operand.mask is None) and self.mask is not None:
             return deepcopy(self.mask)
-        else:
-            # Now lets calculate the resulting mask (operation enforces copy)
-            return handle_mask(self.mask, operand.mask, **kwds)
+            
+        # If both operands have masks, apply the handle_mask function
+        return handle_mask(self.mask, operand.mask, **kwds)
 
     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):
         """
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..e878669208
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,36 @@
+import numpy as np
+from astropy.nddata import NDDataRef
+
+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])
+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])
+
+nref_nomask = NDDataRef(array)
+nref_mask = NDDataRef(array, mask=mask)
+
+print("Testing mask propagation...")
+
+# Test 1: multiply no mask by constant (no mask * no mask)
+result = nref_nomask.multiply(1., handle_mask=np.bitwise_or)
+print("Test 1 (no mask * no mask): OK - mask is", result.mask)
+
+# Test 2: multiply no mask by itself (no mask * no mask)  
+result = nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or)
+print("Test 2 (no mask * no mask): OK - mask is", result.mask)
+
+# Test 3: multiply mask by constant (mask * no mask)
+try:
+    result = nref_mask.multiply(1., handle_mask=np.bitwise_or)
+    print("Test 3 (mask * no mask): OK - mask is", result.mask)
+except TypeError as e:
+    print("Test 3 (mask * no mask): FAILED -", str(e))
+
+# Test 4: multiply mask by itself (mask * mask)
+result = nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or)
+print("Test 4 (mask * mask): OK - mask is\n", result.mask)
+
+# Test 5: multiply mask by no mask (mask * no mask)
+try:
+    result = nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or)
+    print("Test 5 (mask * no mask): OK - mask is\n", result.mask)
+except TypeError as e:
+    print("Test 5 (mask * no mask): FAILED -", str(e))
\ No newline at end of file
