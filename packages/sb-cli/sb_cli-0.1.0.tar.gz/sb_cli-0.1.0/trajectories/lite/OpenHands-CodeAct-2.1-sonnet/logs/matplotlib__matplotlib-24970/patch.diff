diff --git a/lib/matplotlib/colors.py b/lib/matplotlib/colors.py
index 2d3072da04..9db31ce10b 100644
--- a/lib/matplotlib/colors.py
+++ b/lib/matplotlib/colors.py
@@ -714,6 +714,9 @@ class Colormap:
             mask_bad = np.isnan(xa)
         if not xa.dtype.isnative:
             xa = xa.byteswap().newbyteorder()  # Native byteorder is faster.
+        # Ensure xa can hold values up to self._i_bad (258)
+        if xa.dtype.kind in ['u', 'i'] and xa.dtype.itemsize == 1:
+            xa = xa.astype(np.int16)
         if xa.dtype.kind == "f":
             with np.errstate(invalid="ignore"):
                 xa *= self.N
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..24623463b9
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,23 @@
+import warnings
+warnings.filterwarnings('always')
+
+import matplotlib.pyplot as plt
+import numpy as np
+import warnings
+warnings.filterwarnings('always')
+
+# Test original case
+print("Testing empty uint8 array...")
+plt.get_cmap()(np.empty((0, ), dtype=np.uint8))
+
+# Test with uint8 array containing values
+print("\nTesting uint8 array with values...")
+plt.get_cmap()(np.array([0, 127, 255], dtype=np.uint8))
+
+# Test with uint8 array containing max value
+print("\nTesting uint8 array with max value...")
+plt.get_cmap()(np.array([255], dtype=np.uint8))
+
+# Test with uint8 array containing values that would overflow
+print("\nTesting uint8 array with values that would overflow...")
+plt.get_cmap()(np.array([0, 127, 255, 256], dtype=float))
\ No newline at end of file
