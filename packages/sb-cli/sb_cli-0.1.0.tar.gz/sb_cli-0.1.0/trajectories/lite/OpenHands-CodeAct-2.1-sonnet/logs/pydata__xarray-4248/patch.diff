diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 00000000..0d19bcf0
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,57 @@
+import xarray as xr
+import numpy as np
+import pandas as pd
+
+# Test case 1: No units specified
+ds1 = xr.Dataset(
+    data_vars={
+        'temp': ('time', np.array([20, 25, 30])),
+    },
+    coords={
+        'time': pd.date_range('2023-01-01', periods=3),
+    }
+)
+print("Test case 1: No units")
+print(ds1)
+print("\n" + "="*80 + "\n")
+
+# Test case 2: Very long unit names
+ds2 = xr.Dataset(
+    data_vars={
+        'temp': ('time', np.array([20, 25, 30])),
+    },
+    coords={
+        'time': pd.date_range('2023-01-01', periods=3),
+    }
+)
+ds2.temp.attrs['units'] = 'very_long_unit_name_that_should_be_handled_gracefully'
+print("Test case 2: Very long unit names")
+print(ds2)
+print("\n" + "="*80 + "\n")
+
+# Test case 3: Empty string units
+ds3 = xr.Dataset(
+    data_vars={
+        'temp': ('time', np.array([20, 25, 30])),
+    },
+    coords={
+        'time': pd.date_range('2023-01-01', periods=3),
+    }
+)
+ds3.temp.attrs['units'] = ''
+print("Test case 3: Empty string units")
+print(ds3)
+print("\n" + "="*80 + "\n")
+
+# Test case 4: Units with special characters
+ds4 = xr.Dataset(
+    data_vars={
+        'temp': ('time', np.array([20, 25, 30])),
+    },
+    coords={
+        'time': pd.date_range('2023-01-01', periods=3),
+    }
+)
+ds4.temp.attrs['units'] = 'kg m^2 s^-1'
+print("Test case 4: Units with special characters")
+print(ds4)
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 00000000..7ea18ce9
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,33 @@
+import xarray as xr
+import numpy as np
+import pandas as pd
+
+# Create sample data
+times = pd.date_range('2023-01-01', periods=3)
+x = np.linspace(0, 1000, 988)
+y = np.linspace(0, 800, 822)
+
+# Create random data for rainfall and max_temp
+rainfall = np.random.rand(3, 822, 988).astype('float32')
+max_temp = np.random.rand(3, 822, 988).astype('float32') * 30
+
+# Create the dataset
+ds = xr.Dataset(
+    data_vars={
+        'rainfall': (['time', 'y', 'x'], rainfall),
+        'max_temp': (['time', 'y', 'x'], max_temp),
+    },
+    coords={
+        'time': times,
+        'x': x,
+        'y': y,
+    }
+)
+
+# Add units as attributes
+ds.x.attrs['units'] = 'metres'
+ds.y.attrs['units'] = 'metres'
+ds.rainfall.attrs['units'] = 'mm'
+ds.max_temp.attrs['units'] = 'deg C'
+
+print(ds)
\ No newline at end of file
diff --git a/xarray/core/formatting.py b/xarray/core/formatting.py
index 28eaae5f..9f9c6950 100644
--- a/xarray/core/formatting.py
+++ b/xarray/core/formatting.py
@@ -278,7 +278,17 @@ def summarize_variable(
             raise TypeError(f"`max_width` value of `{max_width}` is not a valid int")
         else:
             max_width = max_width_options
-    first_col = pretty_print(f"  {marker} {name} ", col_width)
+    
+    # Add units if available and non-empty
+    units_str = ""
+    if hasattr(var, 'attrs') and 'units' in var.attrs and var.attrs['units'].strip():
+        units = var.attrs['units'].strip()
+        # Truncate very long unit names
+        if len(units) > 10:
+            units = units[:8] + "..."
+        units_str = f", in {units}"
+    
+    first_col = pretty_print(f"  {marker} {name}{units_str} ", col_width)
     if var.dims:
         dims_str = "({}) ".format(", ".join(map(str, var.dims)))
     else:
@@ -358,7 +368,8 @@ def _get_col_items(mapping):
 
 def _calculate_col_width(col_items):
     max_name_length = max(len(str(s)) for s in col_items) if col_items else 0
-    col_width = max(max_name_length, 7) + 6
+    # Add extra space for potential units (", in metres" is 10 chars)
+    col_width = max(max_name_length, 7) + 16
     return col_width
