diff --git a/django/conf/global_settings.py b/django/conf/global_settings.py
index acee9887d2..bdeec80610 100644
--- a/django/conf/global_settings.py
+++ b/django/conf/global_settings.py
@@ -304,7 +304,7 @@ FILE_UPLOAD_TEMP_DIR = None
 
 # The numeric mode to set newly-uploaded files to. The value should be a mode
 # you'd pass directly to os.chmod; see https://docs.python.org/library/os.html#files-and-directories.
-FILE_UPLOAD_PERMISSIONS = None
+FILE_UPLOAD_PERMISSIONS = 0o644
 
 # The numeric mode to assign to newly-created directories, when uploading files.
 # The value should be a mode as you'd pass to os.chmod;
diff --git a/django/core/files/storage.py b/django/core/files/storage.py
index cbdab1de47..9d806cb268 100644
--- a/django/core/files/storage.py
+++ b/django/core/files/storage.py
@@ -280,8 +280,9 @@ class FileSystemStorage(Storage):
                 # OK, the file save worked. Break out of the loop.
                 break
 
-        if self.file_permissions_mode is not None:
-            os.chmod(full_path, self.file_permissions_mode)
+        # Set file permissions. If file_permissions_mode is None, use the default 0o644
+        file_permissions = self.file_permissions_mode if self.file_permissions_mode is not None else 0o644
+        os.chmod(full_path, file_permissions)
 
         # Store filenames with forward slashes, even on Windows.
         return name.replace('\\', '/')
diff --git a/test_upload.py b/test_upload.py
new file mode 100644
index 0000000000..80f43d009a
--- /dev/null
+++ b/test_upload.py
@@ -0,0 +1,45 @@
+import os
+import tempfile
+from django.conf import settings
+from django.core.files.storage import FileSystemStorage
+from django.core.files.uploadedfile import SimpleUploadedFile, TemporaryUploadedFile
+
+# Configure minimal Django settings
+settings.configure(
+    DEBUG=True,
+    MEDIA_ROOT=tempfile.mkdtemp(),
+    FILE_UPLOAD_PERMISSIONS=None  # Default value
+)
+
+def test_file_permissions(custom_perms=None):
+    print(f"\nTesting with FILE_UPLOAD_PERMISSIONS = {custom_perms}")
+    settings.FILE_UPLOAD_PERMISSIONS = custom_perms
+    storage = FileSystemStorage()
+    
+    # Test with MemoryUploadedFile (small file)
+    small_content = b'Small file content'
+    small_file = SimpleUploadedFile('small.txt', small_content)
+    small_path = storage.save('small.txt', small_file)
+    small_perms = oct(os.stat(storage.path(small_path)).st_mode & 0o777)
+    print(f"Small file permissions: {small_perms}")
+    
+    # Test with TemporaryUploadedFile (large file)
+    large_content = b'Large file content' * 1000  # Make it larger than 2.5MB
+    temp_file = tempfile.NamedTemporaryFile(delete=False)
+    temp_file.write(large_content)
+    temp_file.close()
+    
+    with open(temp_file.name, 'rb') as f:
+        large_file = TemporaryUploadedFile('large.txt', 'text/plain', len(large_content), None)
+        large_file.file = f
+        large_path = storage.save('large.txt', large_file)
+    
+    large_perms = oct(os.stat(storage.path(large_path)).st_mode & 0o777)
+    print(f"Large file permissions: {large_perms}")
+
+if __name__ == '__main__':
+    # Test with default permissions (should be 0o644)
+    test_file_permissions()
+    
+    # Test with explicit permissions
+    test_file_permissions(0o666)
\ No newline at end of file
