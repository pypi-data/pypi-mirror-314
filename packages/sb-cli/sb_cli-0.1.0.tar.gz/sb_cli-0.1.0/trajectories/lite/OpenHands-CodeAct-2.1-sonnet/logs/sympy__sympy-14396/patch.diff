diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..ebb9128751
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,48 @@
+from sympy import Poly, symbols
+
+x, y, z = symbols('x y z')
+
+# Test case 1: Auto-detection of RR[y,z] domain
+print("Test case 1:")
+p1 = Poly(1.2*x*y*z, x)
+print(p1)
+
+# Test case 2: Explicit RR[y,z] domain
+print("\nTest case 2:")
+try:
+    p2 = Poly(1.2*x*y*z, x, domain='RR[y,z]')
+    print(p2)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 3: Multiple parameters in RR domain
+print("\nTest case 3:")
+try:
+    p3 = Poly(1.2*x*y*z + 2.5*x*y, x, domain='RR[y,z]')
+    print(p3)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 4: Single parameter in RR domain
+print("\nTest case 4:")
+try:
+    p4 = Poly(1.2*x*y, x, domain='RR[y]')
+    print(p4)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 5: No parameters in RR domain
+print("\nTest case 5:")
+try:
+    p5 = Poly(1.2*x, x, domain='RR[]')
+    print(p5)
+except Exception as e:
+    print(f"Error: {e}")
+
+# Test case 6: R domain instead of RR
+print("\nTest case 6:")
+try:
+    p6 = Poly(1.2*x*y*z, x, domain='R[y,z]')
+    print(p6)
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/sympy/polys/polyoptions.py b/sympy/polys/polyoptions.py
index 6e504a3057..06987b7678 100644
--- a/sympy/polys/polyoptions.py
+++ b/sympy/polys/polyoptions.py
@@ -405,7 +405,7 @@ class Domain(with_metaclass(OptionType, Option)):
     _re_realfield = re.compile(r"^(R|RR)(_(\d+))?$")
     _re_complexfield = re.compile(r"^(C|CC)(_(\d+))?$")
     _re_finitefield = re.compile(r"^(FF|GF)\((\d+)\)$")
-    _re_polynomial = re.compile(r"^(Z|ZZ|Q|QQ)\[(.+)\]$")
+    _re_polynomial = re.compile(r"^(Z|ZZ|Q|QQ|R|RR)\[(.+)\]$")
     _re_fraction = re.compile(r"^(Z|ZZ|Q|QQ)\((.+)\)$")
     _re_algebraic = re.compile(r"^(Q|QQ)\<(.+)\>$")
 
@@ -455,10 +455,15 @@ def preprocess(cls, domain):
             if r is not None:
                 ground, gens = r.groups()
 
+                if not gens.strip():
+                    raise OptionError("polynomial ring requires at least one generator")
+
                 gens = list(map(sympify, gens.split(',')))
 
                 if ground in ['Z', 'ZZ']:
                     return sympy.polys.domains.ZZ.poly_ring(*gens)
+                elif ground in ['R', 'RR']:
+                    return sympy.polys.domains.RR.poly_ring(*gens)
                 else:
                     return sympy.polys.domains.QQ.poly_ring(*gens)
