diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index abbb1e37cb..cd8629f0c7 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -725,9 +725,14 @@ class SQLCompiler:
         field, targets, alias, joins, path, opts, transform_function = self._setup_joins(pieces, opts, alias)
 
         # If we get to this point and the field is a relation to another model,
-        # append the default ordering for that model unless it is the pk
-        # shortcut or the attribute name of the field that is specified.
-        if field.is_relation and opts.ordering and getattr(field, 'attname', None) != name and name != 'pk':
+        # append the default ordering for that model unless:
+        # - it is the pk shortcut
+        # - it is the attribute name of the field that is specified
+        # - we're ordering by a foreign key's ID field directly
+        if (field.is_relation and opts.ordering and 
+            getattr(field, 'attname', None) != name and 
+            name != 'pk' and 
+            not (name.endswith('_id') and field.is_relation)):
             # Firstly, avoid infinite loops.
             already_seen = already_seen or set()
             join_tuple = tuple(getattr(self.query.alias_map[j], 'join_cols', None) for j in joins)
diff --git a/reproduce_app/__init__.py b/reproduce_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_app/apps.py b/reproduce_app/apps.py
new file mode 100644
index 0000000000..24fbfde41d
--- /dev/null
+++ b/reproduce_app/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class ReproduceAppConfig(AppConfig):
+    name = 'reproduce_app'
+    label = 'reproduce_app'
\ No newline at end of file
diff --git a/reproduce_app/migrations/0001_initial.py b/reproduce_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..00c76e8d16
--- /dev/null
+++ b/reproduce_app/migrations/0001_initial.py
@@ -0,0 +1,34 @@
+# Generated by Django 3.2 on 2024-10-25 11:36
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='OneModel',
+            fields=[
+                ('id', models.BigAutoField(primary_key=True, serialize=False)),
+                ('oneval', models.BigIntegerField(null=True)),
+                ('root', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='reproduce_app.onemodel')),
+            ],
+            options={
+                'ordering': ('-id',),
+            },
+        ),
+        migrations.CreateModel(
+            name='TwoModel',
+            fields=[
+                ('id', models.BigAutoField(primary_key=True, serialize=False)),
+                ('twoval', models.BigIntegerField(null=True)),
+                ('record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reproduce_app.onemodel')),
+            ],
+        ),
+    ]
diff --git a/reproduce_app/migrations/__init__.py b/reproduce_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_app/models.py b/reproduce_app/models.py
new file mode 100644
index 0000000000..19604a586c
--- /dev/null
+++ b/reproduce_app/models.py
@@ -0,0 +1,18 @@
+from django.db import models
+
+class OneModel(models.Model):
+    class Meta:
+        ordering = ("-id",)
+        app_label = 'reproduce_app'
+
+    id = models.BigAutoField(primary_key=True)
+    root = models.ForeignKey("OneModel", on_delete=models.CASCADE, null=True)
+    oneval = models.BigIntegerField(null=True)
+
+class TwoModel(models.Model):
+    class Meta:
+        app_label = 'reproduce_app'
+
+    id = models.BigAutoField(primary_key=True)
+    record = models.ForeignKey(OneModel, on_delete=models.CASCADE)
+    twoval = models.BigIntegerField(null=True)
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..5863885102
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,72 @@
+import os
+import django
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+# Create test settings module
+if not os.path.exists('test_settings.py'):
+    with open('test_settings.py', 'w') as f:
+        f.write('''
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'test.db',
+    }
+}
+INSTALLED_APPS = ['reproduce_app']
+SECRET_KEY = 'dummy'
+''')
+
+# Setup Django
+django.setup()
+
+# Import models after django setup
+from reproduce_app.models import OneModel, TwoModel
+from django.db.models import F
+
+# Create the database tables
+from django.core.management import call_command
+call_command('makemigrations', 'reproduce_app')
+call_command('migrate')
+
+# Create some test data
+def create_test_data():
+    # Create root records
+    root1 = OneModel.objects.create(oneval=1)
+    root2 = OneModel.objects.create(oneval=2)
+    root3 = OneModel.objects.create(oneval=3)
+
+    # Create child records pointing to roots
+    child1 = OneModel.objects.create(root=root1, oneval=11)
+    child2 = OneModel.objects.create(root=root2, oneval=22)
+    child3 = OneModel.objects.create(root=root3, oneval=33)
+
+    # Create TwoModel records
+    TwoModel.objects.create(record=child1, twoval=111)
+    TwoModel.objects.create(record=child2, twoval=222)
+    TwoModel.objects.create(record=child3, twoval=333)
+
+create_test_data()
+
+# Test the queries
+print("\nTesting order_by('record__root_id'):")
+qs = TwoModel.objects.filter(record__oneval__in=[11,22,33])
+qs = qs.order_by("record__root_id")
+print(qs.query)
+
+print("\nTesting order_by('record__root__id'):")
+qs = TwoModel.objects.filter(record__oneval__in=[11,22,33])
+qs = qs.order_by("record__root__id")
+print(qs.query)
+
+print("\nTesting order_by('-record__root_id'):")
+qs = TwoModel.objects.filter(record__oneval__in=[11,22,33])
+qs = qs.order_by("-record__root_id")
+print(qs.query)
+
+print("\nTesting with annotation:")
+qs = TwoModel.objects.filter(record__oneval__in=[11,22,33])
+qs = qs.annotate(root_id=F("record__root_id"))
+qs = qs.order_by("root_id")
+print(qs.query)
\ No newline at end of file
diff --git a/test.db b/test.db
new file mode 100644
index 0000000000..4c3f56f9bb
Binary files /dev/null and b/test.db differ
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..e93782eb89
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,9 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': 'test.db',
+    }
+}
+INSTALLED_APPS = ['reproduce_app']
+SECRET_KEY = 'dummy'
