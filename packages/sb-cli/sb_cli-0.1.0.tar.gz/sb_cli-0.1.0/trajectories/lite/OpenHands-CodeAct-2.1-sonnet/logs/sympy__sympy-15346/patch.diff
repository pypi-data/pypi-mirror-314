diff --git a/debug.py b/debug.py
new file mode 100644
index 0000000000..24923ffc1c
--- /dev/null
+++ b/debug.py
@@ -0,0 +1,13 @@
+from sympy import *
+
+# Test case 3
+expr = -sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))
+
+print("Expression:", expr)
+print("Type:", type(expr))
+print("Is Add?", expr.is_Add)
+print("Args:", expr.args)
+print("First term type:", type(expr.args[0]))
+print("First term args:", expr.args[0].args)
+print("Second term type:", type(expr.args[1]))
+print("Second term args:", expr.args[1].args)
\ No newline at end of file
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..dbb4bcada8
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,53 @@
+from sympy import *
+
+# Test edge cases
+print("Edge case tests:")
+
+# Test 1: Zero arguments
+r = sin(Rational(0))*sin(Rational(0)) + cos(Rational(0))*cos(Rational(0))
+print("Test 1: Zero arguments")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
+
+# Test 2: Negative arguments
+r = sin(Rational(-1, 50))*sin(Rational(-1, 25)) + cos(Rational(-1, 50))*cos(Rational(-1, 25))
+print("Test 2: Negative arguments")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
+
+# Test 3: Mixed signs
+r = sin(Rational(-1, 50))*sin(Rational(1, 25)) + cos(Rational(-1, 50))*cos(Rational(1, 25))
+print("Test 3: Mixed signs")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
+
+# Test 4: Large numbers
+r = sin(Rational(100, 1))*sin(Rational(200, 1)) + cos(Rational(100, 1))*cos(Rational(200, 1))
+print("Test 4: Large numbers")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
+
+# Test 5: Different denominators
+r = sin(Rational(1, 3))*sin(Rational(2, 5)) + cos(Rational(1, 3))*cos(Rational(2, 5))
+print("Test 5: Different denominators")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
+
+# Test 6: Same arguments
+r = sin(Rational(1, 3))*sin(Rational(1, 3)) + cos(Rational(1, 3))*cos(Rational(1, 3))
+print("Test 6: Same arguments")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
+
+# Test 7: Non-matching terms
+r = sin(Rational(1, 3))*sin(Rational(2, 5)) + cos(Rational(1, 4))*cos(Rational(2, 5))
+print("Test 7: Non-matching terms")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..eb71802bf8
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,39 @@
+from sympy import *
+
+# Test 1: Symbolic simplification
+x, y = symbols('x, y', real=True)
+r = sin(x)*sin(y) + cos(x)*cos(y)
+print("Test 1: Symbolic simplification")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
+
+# Test 2: Rational number arithmetic
+r = Rational(1, 50) - Rational(1, 25)
+print("Test 2: Rational number arithmetic")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
+
+# Test 3: Trigonometric with rational numbers
+r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))
+print("Test 3: Trigonometric with rational numbers")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
+
+# Test 4: Matrix version
+t1 = Matrix([sin(Rational(1, 50)), cos(Rational(1, 50)), 0])
+t2 = Matrix([sin(Rational(1, 25)), cos(Rational(1, 25)), 0])
+r = t1.dot(t2)
+print("Test 4: Matrix version")
+print("Input:", r)
+print("Simplified:", r.simplify())
+print()
+
+# Test 5: acos of the result
+r = sin(Rational(1, 50))*sin(Rational(1, 25)) + cos(Rational(1, 50))*cos(Rational(1, 25))
+print("Test 5: acos of the result")
+print("Input:", acos(r))
+print("Simplified:", acos(r).simplify())
+print()
\ No newline at end of file
diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py
index 8ba346adbe..987762975d 100644
--- a/sympy/simplify/trigsimp.py
+++ b/sympy/simplify/trigsimp.py
@@ -4,7 +4,7 @@
 
 from sympy.core.cache import cacheit
 from sympy.core import (sympify, Basic, S, Expr, expand_mul, factor_terms,
-    Mul, Dummy, igcd, FunctionClass, Add, symbols, Wild, expand)
+    Mul, Dummy, igcd, FunctionClass, Add, symbols, Wild, expand, Rational)
 from sympy.core.compatibility import reduce, iterable, SYMPY_INTS
 from sympy.core.numbers import I, Integer
 from sympy.core.function import count_ops, _mexpand
@@ -1126,8 +1126,60 @@ def _futrig(e, **kwargs):
     Lops = lambda x: (L(x), x.count_ops(), _nodes(x), len(x.args), x.is_Add)
     trigs = lambda x: x.has(TrigonometricFunction)
 
+    def TR_rational(expr):
+        """Handle trigonometric expressions with rational numbers."""
+        if not expr.is_Add:
+            return expr
+        
+        # Extract terms and coefficients
+        terms = []
+        for arg in expr.args:
+            coeff = S.One
+            term = arg
+            if arg.is_Mul:
+                # Extract coefficient
+                for a in arg.args:
+                    if a.is_Number:
+                        coeff *= a
+                    else:
+                        term = a if term == arg else term*a
+            terms.append((coeff, term))
+        
+        # Look for sin(a)*sin(b) and cos(a)*cos(b) terms
+        sin_terms = []
+        cos_terms = []
+        for coeff, term in terms:
+            if term.is_Mul and len(term.args) == 2:
+                if all(arg.func == sin for arg in term.args):
+                    sin_terms.append((coeff, [arg.args[0] for arg in term.args]))
+                elif all(arg.func == cos for arg in term.args):
+                    cos_terms.append((coeff, [arg.args[0] for arg in term.args]))
+        
+        # If we have both sin and cos terms
+        if len(sin_terms) == 1 and len(cos_terms) == 1:
+            sin_coeff, sin_args = sin_terms[0]
+            cos_coeff, cos_args = cos_terms[0]
+            # Check if arguments match and are rational
+            if (set(sin_args) == set(cos_args) and
+                all(isinstance(x, Rational) for x in sin_args)):
+                # Sort arguments to ensure consistent ordering
+                a, b = sorted(sin_args, key=lambda x: float(x))
+                # Handle case where one argument is negative
+                if (a < 0 and b > 0) or (a > 0 and b < 0):
+                    result = cos(abs(a) + abs(b))
+                else:
+                    result = cos(abs(a - b))
+                # Apply coefficients
+                if sin_coeff == cos_coeff:
+                    return sin_coeff * result
+                elif sin_coeff == -cos_coeff:
+                    return sin_coeff * result.expand()
+        
+        return expr
+
     tree = [identity,
         (
+        TR_rational,  # handle rational trig expressions
         TR3,  # canonical angles
         TR1,  # sec-csc -> cos-sin
         TR12,  # expand tan of sum
