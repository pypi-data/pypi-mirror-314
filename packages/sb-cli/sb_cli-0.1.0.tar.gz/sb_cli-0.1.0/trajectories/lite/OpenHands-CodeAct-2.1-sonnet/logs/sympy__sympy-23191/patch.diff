diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..48b1e2f99b
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,23 @@
+from sympy import *
+from sympy.vector import CoordSys3D, Del
+
+init_printing()
+
+delop = Del()
+CC_ = CoordSys3D("C")
+x,    y,    z    = CC_.x, CC_.y, CC_.z
+xhat, yhat, zhat = CC_.i, CC_.j, CC_.k
+
+t = symbols("t")
+ten = symbols("10", positive=True)
+eps, mu = 4*pi*ten**(-11), ten**(-5)
+
+Bx = 2 * ten**(-4) * cos(ten**5 * t) * sin(ten**(-3) * y)
+vecB = Bx * xhat
+vecE = (1/eps) * Integral(delop.cross(vecB/mu).doit(), t)
+
+pprint(vecB)
+print()
+pprint(vecE)
+print()
+pprint(vecE.doit())
\ No newline at end of file
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 66461181d0..9014c3d1cf 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1112,85 +1112,32 @@ def _print_BasisDependent(self, expr):
             for k, v in inneritems:
                 #if the coef of the basis vector is 1
                 #we skip the 1
+                # Create pretty form for the basis vector
+                basis_form = prettyForm(k._pretty_form)
+                
                 if v == 1:
-                    o1.append("" +
-                              k._pretty_form)
-                #Same for -1
+                    term = basis_form
                 elif v == -1:
-                    o1.append("(-1) " +
-                              k._pretty_form)
-                #For a general expr
+                    term = prettyForm(*basis_form.left('-'))
                 else:
-                    #We always wrap the measure numbers in
-                    #parentheses
-                    arg_str = self._print(
-                        v).parens()[0]
-
-                    o1.append(arg_str + ' ' + k._pretty_form)
+                    # Create pretty form for the coefficient
+                    coeff = self._print(v)
+                    if not isinstance(v, (Number, Symbol)):
+                        coeff = prettyForm(*coeff.parens())
+                    # Put coefficient before basis vector
+                    term = prettyForm(*coeff.right(' '))
+                    term = prettyForm(*term.right(basis_form))
+                
+                o1.append(term)
                 vectstrs.append(k._pretty_form)
 
-        #outstr = u("").join(o1)
-        if o1[0].startswith(" + "):
-            o1[0] = o1[0][3:]
-        elif o1[0].startswith(" "):
-            o1[0] = o1[0][1:]
-        #Fixing the newlines
-        lengths = []
-        strs = ['']
-        flag = []
-        for i, partstr in enumerate(o1):
-            flag.append(0)
-            # XXX: What is this hack?
-            if '\n' in partstr:
-                tempstr = partstr
-                tempstr = tempstr.replace(vectstrs[i], '')
-                if '\N{right parenthesis extension}' in tempstr:   # If scalar is a fraction
-                    for paren in range(len(tempstr)):
-                        flag[i] = 1
-                        if tempstr[paren] == '\N{right parenthesis extension}':
-                            tempstr = tempstr[:paren] + '\N{right parenthesis extension}'\
-                                         + ' '  + vectstrs[i] + tempstr[paren + 1:]
-                            break
-                elif '\N{RIGHT PARENTHESIS LOWER HOOK}' in tempstr:
-                    flag[i] = 1
-                    tempstr = tempstr.replace('\N{RIGHT PARENTHESIS LOWER HOOK}',
-                                        '\N{RIGHT PARENTHESIS LOWER HOOK}'
-                                        + ' ' + vectstrs[i])
-                else:
-                    tempstr = tempstr.replace('\N{RIGHT PARENTHESIS UPPER HOOK}',
-                                        '\N{RIGHT PARENTHESIS UPPER HOOK}'
-                                        + ' ' + vectstrs[i])
-                o1[i] = tempstr
-
-        o1 = [x.split('\n') for x in o1]
-        n_newlines = max([len(x) for x in o1])  # Width of part in its pretty form
-
-        if 1 in flag:                           # If there was a fractional scalar
-            for i, parts in enumerate(o1):
-                if len(parts) == 1:             # If part has no newline
-                    parts.insert(0, ' ' * (len(parts[0])))
-                    flag[i] = 1
-
-        for i, parts in enumerate(o1):
-            lengths.append(len(parts[flag[i]]))
-            for j in range(n_newlines):
-                if j+1 <= len(parts):
-                    if j >= len(strs):
-                        strs.append(' ' * (sum(lengths[:-1]) +
-                                           3*(len(lengths)-1)))
-                    if j == flag[i]:
-                        strs[flag[i]] += parts[flag[i]] + ' + '
-                    else:
-                        strs[j] += parts[j] + ' '*(lengths[-1] -
-                                                   len(parts[j])+
-                                                   3)
-                else:
-                    if j >= len(strs):
-                        strs.append(' ' * (sum(lengths[:-1]) +
-                                           3*(len(lengths)-1)))
-                    strs[j] += ' '*(lengths[-1]+3)
-
-        return prettyForm('\n'.join([s[:-3] for s in strs]))
+        # Combine all terms with + between them
+        result = o1[0]
+        for term in o1[1:]:
+            result = prettyForm(*result.right(' + '))
+            result = prettyForm(*result.right(term))
+        
+        return result
 
     def _print_NDimArray(self, expr):
         from sympy.matrices.immutable import ImmutableMatrix
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3466dcc2e9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,35 @@
+from sympy import *
+from sympy.vector import CoordSys3D, Del
+
+init_printing()
+
+# Test case 1: Multiple terms with different basis vectors
+C = CoordSys3D('C')
+v1 = 2*C.i + 3*C.j + 4*C.k
+pprint(v1)
+print()
+
+# Test case 2: Negative coefficients
+v2 = -2*C.i - 3*C.j + 4*C.k
+pprint(v2)
+print()
+
+# Test case 3: Complex expressions with fractions
+x = Symbol('x')
+v3 = (x/2)*C.i + (1/x)*C.j + (x**2/3)*C.k
+pprint(v3)
+print()
+
+# Test case 4: Zero vector
+v4 = C.i - C.i
+pprint(v4)
+print()
+
+# Test case 5: Single basis vector with complex coefficient
+v5 = (1 + I)*C.i
+pprint(v5)
+print()
+
+# Test case 6: Nested expressions
+v6 = sin(x)*C.i + cos(x)*C.j + tan(x)*C.k
+pprint(v6)
\ No newline at end of file
