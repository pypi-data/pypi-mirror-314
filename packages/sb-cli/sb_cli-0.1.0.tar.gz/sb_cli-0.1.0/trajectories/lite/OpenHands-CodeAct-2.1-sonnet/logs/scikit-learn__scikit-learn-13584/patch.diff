diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..e6bf30390
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,5 @@
+import sklearn
+import numpy as np
+from sklearn.linear_model import LogisticRegressionCV
+sklearn.set_config(print_changed_only=True)
+print(LogisticRegressionCV(Cs=np.array([0.1, 1])))
\ No newline at end of file
diff --git a/sklearn/utils/_pprint.py b/sklearn/utils/_pprint.py
index b8686dba5..15e370480 100644
--- a/sklearn/utils/_pprint.py
+++ b/sklearn/utils/_pprint.py
@@ -66,6 +66,7 @@ BaseEstimator.__repr__ for pretty-printing estimators"""
 from inspect import signature
 import pprint
 from collections import OrderedDict
+import numpy as np
 
 from ..base import BaseEstimator
 from .._config import get_config
@@ -95,7 +96,14 @@ def _changed_params(estimator):
     init_params = signature(init_func).parameters
     init_params = {name: param.default for name, param in init_params.items()}
     for k, v in params.items():
-        if (v != init_params[k] and
+        # Handle numpy arrays specially
+        if isinstance(v, np.ndarray):
+            if init_params[k] is None or not isinstance(init_params[k], np.ndarray):
+                filtered_params[k] = v
+            elif not np.array_equal(v, init_params[k]):
+                filtered_params[k] = v
+        # Handle other cases
+        elif (v != init_params[k] and
                 not (is_scalar_nan(init_params[k]) and is_scalar_nan(v))):
             filtered_params[k] = v
     return filtered_params
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..00fc0d076
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,31 @@
+import sklearn
+import numpy as np
+from sklearn.linear_model import LogisticRegressionCV
+
+# Test with print_changed_only=True
+sklearn.set_config(print_changed_only=True)
+
+# Test empty array
+print("Empty array:")
+print(LogisticRegressionCV(Cs=np.array([])))
+
+# Test array with one element
+print("\nOne element array:")
+print(LogisticRegressionCV(Cs=np.array([1.0])))
+
+# Test array with many elements
+print("\nMany elements array:")
+print(LogisticRegressionCV(Cs=np.array([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0])))
+
+# Test array with different dtype
+print("\nInteger array:")
+print(LogisticRegressionCV(Cs=np.array([1, 2, 3], dtype=int)))
+
+# Test array with NaN
+print("\nArray with NaN:")
+print(LogisticRegressionCV(Cs=np.array([0.1, np.nan, 1.0])))
+
+# Test with print_changed_only=False
+sklearn.set_config(print_changed_only=False)
+print("\nWith print_changed_only=False:")
+print(LogisticRegressionCV(Cs=np.array([0.1, 1.0])))
\ No newline at end of file
