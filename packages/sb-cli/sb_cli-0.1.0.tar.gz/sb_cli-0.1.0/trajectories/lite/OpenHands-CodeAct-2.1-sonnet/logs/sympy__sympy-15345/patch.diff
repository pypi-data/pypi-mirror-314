diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..6d52771e17
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,6 @@
+from sympy import symbols, mathematica_code, Max
+
+x = symbols('x')
+result = mathematica_code(Max(x, 2))
+print(f"Result: {result}")
+print(f"Expected: Max[x,2]")
\ No newline at end of file
diff --git a/sympy/printing/mathematica.py b/sympy/printing/mathematica.py
index ea7e3a2d94..888cdd9154 100644
--- a/sympy/printing/mathematica.py
+++ b/sympy/printing/mathematica.py
@@ -31,6 +31,8 @@
     "asech": [(lambda x: True, "ArcSech")],
     "acsch": [(lambda x: True, "ArcCsch")],
     "conjugate": [(lambda x: True, "Conjugate")],
+    "Max": [(lambda *x: True, "Max")],
+    "Min": [(lambda *x: True, "Min")],
 
 }
 
@@ -116,6 +118,12 @@ def _print_Derivative(self, expr):
         dvars = [i[0] if i[1] == 1 else i for i in expr.variable_count]
         return "Hold[D[" + ', '.join(self.doprint(a) for a in [dexpr] + dvars) + "]]"
 
+    def _print_Max(self, expr):
+        return "Max[%s]" % self.stringify(expr.args, ", ")
+
+    def _print_Min(self, expr):
+        return "Min[%s]" % self.stringify(expr.args, ", ")
+
 
 def mathematica_code(expr, **settings):
     r"""Converts an expr to a string of the Wolfram Mathematica code
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..053542e7f8
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,16 @@
+from sympy import symbols, mathematica_code, Max, Min
+
+x, y, z = symbols('x y z')
+
+# Test multiple arguments
+print("Max with multiple args:")
+print(mathematica_code(Max(x, y, z)))
+
+# Test nested Max/Min
+print("\nNested Max/Min:")
+print(mathematica_code(Max(x, Min(y, z))))
+
+# Test with numeric values
+print("\nMix of numeric and symbolic:")
+print(mathematica_code(Max(1, x, 2)))
+print(mathematica_code(Min(1, x, 2)))
\ No newline at end of file
