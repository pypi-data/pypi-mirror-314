diff --git a/reproduce_multiindex_error.py b/reproduce_multiindex_error.py
new file mode 100644
index 00000000..e79f00be
--- /dev/null
+++ b/reproduce_multiindex_error.py
@@ -0,0 +1,19 @@
+import numpy as np
+import pandas as pd
+import seaborn as sns
+
+# Set random seed for reproducibility
+np.random.seed(42)
+
+# Create test data with MultiIndex columns
+data = {
+    ("A", "1"): np.random.rand(100),
+    ("A", "2"): np.random.rand(100),
+    ("B", "1"): np.random.rand(100),
+    ("B", "2"): np.random.rand(100),
+}
+df = pd.DataFrame(data)
+print("DataFrame shape:", df.shape)
+print("DataFrame columns:", df.columns)
+print("\nAttempting to create pairplot...")
+sns.pairplot(df)
\ No newline at end of file
diff --git a/seaborn/axisgrid.py b/seaborn/axisgrid.py
index 75349099..47bed5d3 100644
--- a/seaborn/axisgrid.py
+++ b/seaborn/axisgrid.py
@@ -1245,13 +1245,38 @@ class PairGrid(Grid):
         numeric_cols = self._find_numeric_cols(data)
         if hue in numeric_cols:
             numeric_cols.remove(hue)
-        if vars is not None:
-            x_vars = list(vars)
-            y_vars = list(vars)
-        if x_vars is None:
-            x_vars = numeric_cols
-        if y_vars is None:
-            y_vars = numeric_cols
+
+        # For MultiIndex columns, we want to preserve the tuples
+        if isinstance(data.columns, pd.MultiIndex):
+            # If vars is provided, ensure they are tuples matching the column names
+            if vars is not None:
+                if not all(isinstance(v, tuple) for v in vars):
+                    # Try to find matching columns for string inputs
+                    resolved_vars = []
+                    for v in vars:
+                        if isinstance(v, str):
+                            matches = [col for col in data.columns if v in col]
+                            if len(matches) == 1:
+                                resolved_vars.append(matches[0])
+                            else:
+                                raise ValueError(f"Could not uniquely resolve variable '{v}' in MultiIndex columns")
+                        else:
+                            resolved_vars.append(v)
+                    vars = resolved_vars
+                x_vars = list(vars)
+                y_vars = list(vars)
+            else:
+                x_vars = numeric_cols
+                y_vars = numeric_cols
+        else:
+            # Regular DataFrame handling
+            if vars is not None:
+                x_vars = list(vars)
+                y_vars = list(vars)
+            if x_vars is None:
+                x_vars = numeric_cols
+            if y_vars is None:
+                y_vars = numeric_cols
 
         if np.isscalar(x_vars):
             x_vars = [x_vars]
@@ -1448,7 +1473,11 @@ class PairGrid(Grid):
                     if x_var == y_var:
 
                         # Make the density axes
-                        diag_vars.append(x_var)
+                        # For MultiIndex columns, we need to preserve the tuple
+                        if isinstance(x_var, tuple):
+                            diag_vars.append(x_var)
+                        else:
+                            diag_vars.append(x_var)
                         ax = self.axes[i, j]
                         diag_ax = ax.twinx()
                         diag_ax.set_axis_off()
@@ -1472,7 +1501,8 @@ class PairGrid(Grid):
                 for ax in diag_axes[1:]:
                     share_axis(diag_axes[0], ax, "y")
 
-            self.diag_vars = np.array(diag_vars, np.object_)
+            # Convert to list to preserve tuples
+            self.diag_vars = diag_vars
             self.diag_axes = np.array(diag_axes, np.object_)
 
         if "hue" not in signature(func).parameters:
@@ -1487,7 +1517,9 @@ class PairGrid(Grid):
             else:
                 plt.sca(ax)
 
+            # Get the data vector, handling both regular and MultiIndex columns
             vector = self.data[var]
+
             if self._hue_var is not None:
                 hue = self.data[self._hue_var]
             else:
@@ -1657,14 +1689,21 @@ class PairGrid(Grid):
     def _add_axis_labels(self):
         """Add labels to the left and bottom Axes."""
         for ax, label in zip(self.axes[-1, :], self.x_vars):
+            # For MultiIndex columns, join the levels with an underscore
+            if isinstance(label, tuple):
+                label = "_".join(str(l) for l in label)
             ax.set_xlabel(label)
         for ax, label in zip(self.axes[:, 0], self.y_vars):
+            # For MultiIndex columns, join the levels with an underscore
+            if isinstance(label, tuple):
+                label = "_".join(str(l) for l in label)
             ax.set_ylabel(label)
 
     def _find_numeric_cols(self, data):
         """Find which variables in a DataFrame are numeric."""
         numeric_cols = []
         for col in data:
+            # Handle both regular and MultiIndex columns
             if variable_type(data[col]) == "numeric":
                 numeric_cols.append(col)
         return numeric_cols
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..c294d3cb
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,48 @@
+import numpy as np
+import pandas as pd
+import seaborn as sns
+
+# Set random seed for reproducibility
+np.random.seed(42)
+
+# Test case 1: Mix of single and multi-level columns
+data1 = {
+    ("A", "1"): np.random.rand(100),
+    ("A", "2"): np.random.rand(100),
+    "B": np.random.rand(100),  # Single level column
+}
+df1 = pd.DataFrame(data1)
+print("\nTest case 1: Mix of single and multi-level columns")
+print("DataFrame shape:", df1.shape)
+print("DataFrame columns:", df1.columns)
+print("\nAttempting to create pairplot...")
+sns.pairplot(df1)
+
+# Test case 2: With hue parameter
+data2 = {
+    ("A", "1"): np.random.rand(100),
+    ("A", "2"): np.random.rand(100),
+    ("B", "1"): np.random.rand(100),
+    ("B", "2"): np.random.rand(100),
+    "category": np.random.choice(["cat1", "cat2"], size=100)
+}
+df2 = pd.DataFrame(data2)
+print("\nTest case 2: With hue parameter")
+print("DataFrame shape:", df2.shape)
+print("DataFrame columns:", df2.columns)
+print("\nAttempting to create pairplot with hue...")
+sns.pairplot(df2, hue="category")
+
+# Test case 3: With vars parameter
+data3 = {
+    ("A", "1"): np.random.rand(100),
+    ("A", "2"): np.random.rand(100),
+    ("B", "1"): np.random.rand(100),
+    ("B", "2"): np.random.rand(100),
+}
+df3 = pd.DataFrame(data3)
+print("\nTest case 3: With vars parameter")
+print("DataFrame shape:", df3.shape)
+print("DataFrame columns:", df3.columns)
+print("\nAttempting to create pairplot with vars...")
+sns.pairplot(df3, vars=[("A", "1"), ("B", "2")])
\ No newline at end of file
