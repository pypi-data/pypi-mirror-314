diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..81bdaee8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,37 @@
+import requests
+import sys
+from requests.packages.urllib3.exceptions import DecodeError, TimeoutError
+
+def test_decode_error():
+    print("Testing DecodeError handling...")
+    try:
+        # Create a session that will force a decode error by setting an invalid encoding
+        session = requests.Session()
+        session.headers['Accept-Encoding'] = 'invalid_encoding'
+        response = session.get('http://httpbin.org/get')
+    except DecodeError as e:
+        print("FAIL: urllib3 DecodeError passed through instead of being wrapped")
+        print(f"Got exception: {type(e)}")
+    except requests.exceptions.RequestException as e:
+        print("SUCCESS: urllib3 DecodeError was properly wrapped")
+        print(f"Got exception: {type(e)}")
+    except Exception as e:
+        print(f"Unexpected error: {type(e)}")
+
+def test_timeout_error():
+    print("\nTesting TimeoutError handling...")
+    try:
+        # Set an extremely short timeout to force a timeout error
+        response = requests.get('http://httpbin.org/delay/5', timeout=0.001)
+    except TimeoutError as e:
+        print("FAIL: urllib3 TimeoutError passed through instead of being wrapped")
+        print(f"Got exception: {type(e)}")
+    except requests.exceptions.Timeout as e:
+        print("SUCCESS: urllib3 TimeoutError was properly wrapped")
+        print(f"Got exception: {type(e)}")
+    except Exception as e:
+        print(f"Unexpected error: {type(e)}")
+
+if __name__ == '__main__':
+    test_decode_error()
+    test_timeout_error()
\ No newline at end of file
diff --git a/requests/adapters.py b/requests/adapters.py
index 841cbbfe..9b6d294c 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -27,9 +27,10 @@ from .packages.urllib3.exceptions import ProtocolError
 from .packages.urllib3.exceptions import ReadTimeoutError
 from .packages.urllib3.exceptions import SSLError as _SSLError
 from .packages.urllib3.exceptions import ResponseError
+from .packages.urllib3.exceptions import DecodeError
 from .cookies import extract_cookies_to_jar
 from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,
-                         ProxyError, RetryError)
+                         ProxyError, RetryError, ContentDecodingError)
 from .auth import _basic_auth_str
 
 DEFAULT_POOLBLOCK = False
@@ -424,11 +425,13 @@ class HTTPAdapter(BaseAdapter):
         except _ProxyError as e:
             raise ProxyError(e)
 
-        except (_SSLError, _HTTPError) as e:
+        except (_SSLError, _HTTPError, DecodeError) as e:
             if isinstance(e, _SSLError):
                 raise SSLError(e, request=request)
             elif isinstance(e, ReadTimeoutError):
                 raise ReadTimeout(e, request=request)
+            elif isinstance(e, DecodeError):
+                raise ContentDecodingError(e, request=request)
             else:
                 raise
