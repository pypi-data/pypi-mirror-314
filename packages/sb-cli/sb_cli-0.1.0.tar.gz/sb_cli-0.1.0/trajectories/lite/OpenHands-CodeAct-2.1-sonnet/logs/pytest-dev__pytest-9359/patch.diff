diff --git a/src/_pytest/_code/source.py b/src/_pytest/_code/source.py
index 6f54057c0..638594fbe 100644
--- a/src/_pytest/_code/source.py
+++ b/src/_pytest/_code/source.py
@@ -150,6 +150,10 @@ def get_statement_startend2(lineno: int, node: ast.AST) -> Tuple[int, Optional[i
     for x in ast.walk(node):
         if isinstance(x, (ast.stmt, ast.ExceptHandler)):
             values.append(x.lineno - 1)
+            # Handle decorators
+            if isinstance(x, ast.FunctionDef) and x.decorator_list:
+                for decorator in x.decorator_list:
+                    values.append(decorator.lineno - 1)
             for name in ("finalbody", "orelse"):
                 val: Optional[List[ast.stmt]] = getattr(x, name, None)
                 if val:
diff --git a/test_decorators.py b/test_decorators.py
new file mode 100644
index 000000000..fa44821dc
--- /dev/null
+++ b/test_decorators.py
@@ -0,0 +1,41 @@
+from pytest import fixture
+
+def deco1(f):
+    return f
+
+def deco2(f):
+    return f
+
+@fixture
+def value():
+    return 1
+
+def test_multiple_decorators(value):
+    assert value == 10
+
+    @deco1
+    @deco2
+    def inner():
+        return 2
+
+    assert 2 == inner()
+
+@deco1
+@deco2
+def outer():
+    return 2
+
+def test_nested_decorators(value):
+    assert value == 20
+
+    def wrapper(f):
+        @deco1
+        def inner():
+            return f()
+        return inner
+
+    @wrapper
+    def func():
+        return 3
+
+    assert 3 == func()
\ No newline at end of file
diff --git a/test_statement.py b/test_statement.py
new file mode 100644
index 000000000..28e060c41
--- /dev/null
+++ b/test_statement.py
@@ -0,0 +1,25 @@
+from pytest import fixture
+
+
+def t(foo):
+    return foo
+
+
+@fixture
+def foo():
+    return 1
+
+
+def test_right_statement(foo):
+    assert foo == (3 + 2) * (6 + 9)
+
+    @t
+    def inner():
+        return 2
+
+    assert 2 == inner
+
+
+@t
+def outer():
+    return 2
\ No newline at end of file
