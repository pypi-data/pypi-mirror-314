diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..9371c6b9c6
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,19 @@
+from sympy import *
+
+# Test regular cases still work
+n = symbols('n')
+print("Regular case bell(5):", bell(5))
+
+# Test polynomial case still works 
+x = Symbol('x')
+print("Polynomial case bell(3, x):", bell(3, x))
+
+# Test limit case
+print("Limit case bell(n).limit(n, oo):", bell(n).limit(n, oo))
+
+# Test negative infinity
+print("Negative infinity case bell(n).limit(n, -oo):", bell(n).limit(n, -oo))
+
+# Test incomplete Bell polynomials still work
+x1, x2 = symbols('x1 x2')
+print("Incomplete Bell polynomial case bell(3, 2, (x1, x2)):", bell(3, 2, (x1, x2)))
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..c4ee484524
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,3 @@
+from sympy import *
+n = symbols('n')
+print(bell(n).limit(n, oo))
\ No newline at end of file
diff --git a/sympy/functions/combinatorial/numbers.py b/sympy/functions/combinatorial/numbers.py
index 896729ac87..afca02891a 100644
--- a/sympy/functions/combinatorial/numbers.py
+++ b/sympy/functions/combinatorial/numbers.py
@@ -434,6 +434,9 @@ def _bell_incomplete_poly(n, k, symbols):
 
     @classmethod
     def eval(cls, n, k_sym=None, symbols=None):
+        if n is S.Infinity:
+            return S.Infinity
+            
         if n.is_Integer and n.is_nonnegative:
             if k_sym is None:
                 return Integer(cls._bell(int(n)))
