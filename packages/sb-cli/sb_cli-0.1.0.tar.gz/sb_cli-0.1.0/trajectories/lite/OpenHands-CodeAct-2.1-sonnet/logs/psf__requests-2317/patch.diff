diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 00000000..b578b750
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,26 @@
+import requests
+
+def test_request(method, url='http://httpbin.org/get'):
+    s = requests.Session()
+    try:
+        response = s.request(method=method, url=url)
+        print(f"Method: {method!r}")
+        print(f"Response status code: {response.status_code}")
+        print("Success!")
+    except Exception as e:
+        print(f"Method: {method!r}")
+        print(f"Error occurred: {e}")
+    print()
+
+# Test cases
+print("Testing binary string method (neutronclient case):")
+test_request(b'GET')
+
+print("Testing regular string method (normal case):")
+test_request('GET')
+
+print("Testing unicode string method:")
+test_request(u'GET')
+
+print("Testing binary string with non-ASCII chars:")
+test_request(b'GET\xe2\x80\x99')  # Contains a curly quote
\ No newline at end of file
diff --git a/requests/sessions.py b/requests/sessions.py
index d701ff2e..b6eb93cc 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -425,7 +425,14 @@ class Session(SessionRedirectMixin):
             If Tuple, ('cert', 'key') pair.
         """
 
-        method = builtin_str(method)
+        # Handle binary strings in Python 3
+        if isinstance(method, bytes):
+            # Only decode the ASCII subset to ensure valid HTTP methods
+            method = method.decode('ascii', errors='ignore')
+        else:
+            method = builtin_str(method)
+            # Ensure only ASCII characters are used
+            method = ''.join(c for c in method if ord(c) < 128)
 
         # Create the Request.
         req = Request(
