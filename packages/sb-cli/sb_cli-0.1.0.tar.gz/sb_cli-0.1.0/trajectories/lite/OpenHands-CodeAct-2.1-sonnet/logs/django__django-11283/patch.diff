diff --git a/django/contrib/auth/migrations/0011_update_proxy_permissions.py b/django/contrib/auth/migrations/0011_update_proxy_permissions.py
index 0e66649695..09de01fb78 100644
--- a/django/contrib/auth/migrations/0011_update_proxy_permissions.py
+++ b/django/contrib/auth/migrations/0011_update_proxy_permissions.py
@@ -24,10 +24,14 @@ def update_proxy_model_permissions(apps, schema_editor, reverse=False):
         proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)
         old_content_type = proxy_content_type if reverse else concrete_content_type
         new_content_type = concrete_content_type if reverse else proxy_content_type
-        Permission.objects.filter(
-            permissions_query,
-            content_type=old_content_type,
-        ).update(content_type=new_content_type)
+        # First check if permissions already exist for the target content type
+        existing_perms = Permission.objects.filter(permissions_query, content_type=new_content_type)
+        if not existing_perms.exists():
+            # Only update if no permissions exist for the target content type
+            Permission.objects.filter(
+                permissions_query,
+                content_type=old_content_type,
+            ).update(content_type=new_content_type)
 
 
 def revert_proxy_model_permissions(apps, schema_editor):
diff --git a/reproduce_proxy_permissions.py b/reproduce_proxy_permissions.py
new file mode 100644
index 0000000000..f952cc142e
--- /dev/null
+++ b/reproduce_proxy_permissions.py
@@ -0,0 +1,167 @@
+import os
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'test.db',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    MIDDLEWARE=[],
+    SECRET_KEY='dummy'
+)
+
+import django
+django.setup()
+
+# Import Django models
+from django.contrib.auth.models import Permission
+from django.contrib.contenttypes.models import ContentType
+from django.db import models
+from django.db.models import Q
+
+# Create our test models
+class Agency(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'myapp'
+
+# Create proxy model
+class AgencyProxy(Agency):
+    class Meta:
+        proxy = True
+        app_label = 'myapp'
+
+# Create the tables
+from django.core.management import call_command
+call_command('migrate', verbosity=0)
+
+# Register models with Django
+from django.apps import apps
+apps.all_models['myapp'] = {
+    'agency': Agency,
+    'agencyproxy': AgencyProxy
+}
+
+# Create content types
+agency_ct = ContentType.objects.create(
+    app_label='myapp',
+    model='agency'
+)
+agency_proxy_ct = ContentType.objects.create(
+    app_label='myapp',
+    model='agencyproxy'
+)
+
+# Define the fixed migration function
+def update_proxy_model_permissions(apps, schema_editor, reverse=False):
+    """
+    Update the content_type of proxy model permissions to use the ContentType
+    of the proxy model.
+    """
+    from django.contrib.auth.models import Permission
+    from django.contrib.contenttypes.models import ContentType
+    for Model in [AgencyProxy]:  # For testing, we only care about our proxy model
+        opts = Model._meta
+        if not opts.proxy:
+            continue
+        proxy_default_permissions_codenames = [
+            '%s_%s' % (action, opts.model_name)
+            for action in opts.default_permissions
+        ]
+        permissions_query = Q(codename__in=proxy_default_permissions_codenames)
+        for codename, name in opts.permissions:
+            permissions_query = permissions_query | Q(codename=codename, name=name)
+        concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)
+        proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)
+        old_content_type = proxy_content_type if reverse else concrete_content_type
+        new_content_type = concrete_content_type if reverse else proxy_content_type
+        
+        # First check if permissions already exist for the target content type
+        existing_perms = Permission.objects.filter(permissions_query, content_type=new_content_type)
+        if not existing_perms.exists():
+            # Only update if no permissions exist for the target content type
+            Permission.objects.filter(
+                permissions_query,
+                content_type=old_content_type,
+            ).update(content_type=new_content_type)
+
+# Test Case 1: Create permission for concrete model first
+print("\nTest Case 1: Permission exists for concrete model")
+Permission.objects.create(
+    codename='add_agency',
+    name='Can add agency',
+    content_type=agency_ct
+)
+
+# Run migration - should handle existing permission gracefully
+try:
+    update_proxy_model_permissions(apps=django.apps, schema_editor=None)
+    print("Migration succeeded!")
+    # Verify permissions
+    perm = Permission.objects.get(codename='add_agency')
+    print(f"Permission content type: {perm.content_type.model}")
+except Exception as e:
+    print("Migration failed:", str(e))
+
+# Clean up for next test
+Permission.objects.all().delete()
+
+# Test Case 2: Create permission for proxy model first
+print("\nTest Case 2: Permission exists for proxy model")
+Permission.objects.create(
+    codename='add_agency',
+    name='Can add agency',
+    content_type=agency_proxy_ct
+)
+
+# Run migration - should handle existing permission gracefully
+try:
+    update_proxy_model_permissions(apps=django.apps, schema_editor=None)
+    print("Migration succeeded!")
+    # Verify permissions
+    perm = Permission.objects.get(codename='add_agency')
+    print(f"Permission content type: {perm.content_type.model}")
+except Exception as e:
+    print("Migration failed:", str(e))
+
+# Define the fixed migration function
+def update_proxy_model_permissions(apps, schema_editor, reverse=False):
+    """
+    Update the content_type of proxy model permissions to use the ContentType
+    of the proxy model.
+    """
+    Permission = apps.get_model('auth', 'Permission')
+    ContentType = apps.get_model('contenttypes', 'ContentType')
+    for Model in apps.get_models():
+        opts = Model._meta
+        if not opts.proxy:
+            continue
+        proxy_default_permissions_codenames = [
+            '%s_%s' % (action, opts.model_name)
+            for action in opts.default_permissions
+        ]
+        permissions_query = Q(codename__in=proxy_default_permissions_codenames)
+        for codename, name in opts.permissions:
+            permissions_query = permissions_query | Q(codename=codename, name=name)
+        concrete_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=True)
+        proxy_content_type = ContentType.objects.get_for_model(Model, for_concrete_model=False)
+        old_content_type = proxy_content_type if reverse else concrete_content_type
+        new_content_type = concrete_content_type if reverse else proxy_content_type
+        
+        # First check if permissions already exist for the target content type
+        existing_perms = Permission.objects.filter(permissions_query, content_type=new_content_type)
+        if not existing_perms.exists():
+            # Only update if no permissions exist for the target content type
+            Permission.objects.filter(
+                permissions_query,
+                content_type=old_content_type,
+            ).update(content_type=new_content_type)
\ No newline at end of file
diff --git a/test.db b/test.db
new file mode 100644
index 0000000000..3580022a38
Binary files /dev/null and b/test.db differ
