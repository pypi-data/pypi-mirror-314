diff --git a/requests/models.py b/requests/models.py
index 0dc55568..c55702c5 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -9,6 +9,7 @@ This module contains the primary objects that power Requests.
 
 import collections
 import datetime
+import socket
 
 from io import BytesIO, UnsupportedOperation
 from .hooks import default_hooks
@@ -19,7 +20,7 @@ from .cookies import cookiejar_from_dict, get_cookie_header
 from .packages.urllib3.fields import RequestField
 from .packages.urllib3.filepost import encode_multipart_formdata
 from .packages.urllib3.util import parse_url
-from .packages.urllib3.exceptions import DecodeError
+from .packages.urllib3.exceptions import DecodeError, ProtocolError
 from .exceptions import (
     HTTPError, RequestException, MissingSchema, InvalidURL,
     ChunkedEncodingError, ContentDecodingError)
@@ -640,6 +641,10 @@ class Response(object):
                     raise ChunkedEncodingError(e)
                 except DecodeError as e:
                     raise ContentDecodingError(e)
+                except socket.error as e:
+                    raise ConnectionError(e)
+                except ProtocolError as e:
+                    raise ConnectionError(e)
             except AttributeError:
                 # Standard file-like object.
                 while True:
diff --git a/test_socket_reset.py b/test_socket_reset.py
new file mode 100644
index 00000000..c068cef4
--- /dev/null
+++ b/test_socket_reset.py
@@ -0,0 +1,46 @@
+import socket
+import threading
+import time
+import requests
+
+def server():
+    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+    server_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
+    server_socket.bind(('localhost', 8888))
+    server_socket.listen(1)
+    
+    while True:
+        client_socket, _ = server_socket.accept()
+        # Read request headers
+        data = client_socket.recv(1024)
+        
+        # Send partial response and reset connection
+        response = (
+            'HTTP/1.1 200 OK\r\n'
+            'Transfer-Encoding: chunked\r\n'
+            '\r\n'
+            '5\r\n'
+            'Hello'
+        )
+        client_socket.send(response.encode())
+        time.sleep(0.1)  # Wait a bit before resetting
+        client_socket.shutdown(socket.SHUT_RDWR)
+        client_socket.close()
+
+def main():
+    # Start server in background thread
+    server_thread = threading.Thread(target=server)
+    server_thread.daemon = True
+    server_thread.start()
+    
+    time.sleep(1)  # Wait for server to start
+    
+    try:
+        # Make request that will get reset
+        response = requests.get('http://localhost:8888')
+        print(response.text)
+    except Exception as e:
+        print(f"Caught exception: {type(e).__name__}: {str(e)}")
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
