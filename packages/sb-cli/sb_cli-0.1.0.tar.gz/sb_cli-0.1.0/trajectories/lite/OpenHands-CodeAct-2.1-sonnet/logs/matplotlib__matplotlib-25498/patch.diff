diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
index d3d53e3d98..f30f112554 100644
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -1102,8 +1102,13 @@ class Colorbar:
 
         # transform from 0-1 to vmin-vmax:
         if not self.norm.scaled():
-            self.norm.vmin = 0
-            self.norm.vmax = 1
+            if isinstance(self.norm, colors.LogNorm):
+                # For LogNorm, use 1 as vmin to avoid taking log(0)
+                self.norm.vmin = 1
+                self.norm.vmax = 10
+            else:
+                self.norm.vmin = 0
+                self.norm.vmax = 1
         self.norm.vmin, self.norm.vmax = mtransforms.nonsingular(
             self.norm.vmin, self.norm.vmax, expander=0.1)
         if (not isinstance(self.norm, colors.BoundaryNorm) and
diff --git a/reproduce_colorbar.py b/reproduce_colorbar.py
new file mode 100644
index 0000000000..43dc896a39
--- /dev/null
+++ b/reproduce_colorbar.py
@@ -0,0 +1,13 @@
+import matplotlib.pyplot as plt
+from matplotlib.colors import LogNorm
+import numpy as np
+
+img = 10**np.random.normal(1, 1, size=(50, 50))
+
+fig, ax = plt.subplots(1, 1)
+plot = ax.imshow(img, cmap='gray')
+cb = fig.colorbar(plot, ax=ax)
+plot.norm = LogNorm()
+cb.update_normal(plot)  # no effect
+cb.update_bruteforce(plot)  # throws ZeroDivisionError
+plt.show()
\ No newline at end of file
diff --git a/test1.png b/test1.png
new file mode 100644
index 0000000000..f23e0ffdc3
Binary files /dev/null and b/test1.png differ
diff --git a/test2.png b/test2.png
new file mode 100644
index 0000000000..0a1f9da10d
Binary files /dev/null and b/test2.png differ
diff --git a/test3.png b/test3.png
new file mode 100644
index 0000000000..9fd208a19f
Binary files /dev/null and b/test3.png differ
diff --git a/test_colorbar_norm.py b/test_colorbar_norm.py
new file mode 100644
index 0000000000..d3cae2d004
--- /dev/null
+++ b/test_colorbar_norm.py
@@ -0,0 +1,39 @@
+import matplotlib.pyplot as plt
+from matplotlib.colors import LogNorm, Normalize
+import numpy as np
+
+# Test 1: Basic LogNorm case
+print("Test 1: Basic LogNorm case")
+img = 10**np.random.normal(1, 1, size=(50, 50))
+fig, ax = plt.subplots(1, 1)
+plot = ax.imshow(img, cmap='gray')
+cb = fig.colorbar(plot, ax=ax)
+plot.norm = LogNorm()
+cb.update_normal(plot)  # should work now
+plt.savefig('test1.png')
+plt.close()
+
+# Test 2: Edge case - changing between different norm types
+print("\nTest 2: Changing between different norm types")
+img = np.random.normal(10, 5, size=(50, 50))
+img = np.abs(img)  # ensure positive values
+fig, ax = plt.subplots(1, 1)
+plot = ax.imshow(img, cmap='viridis', norm=Normalize())
+cb = fig.colorbar(plot, ax=ax)
+plot.norm = LogNorm()
+cb.update_normal(plot)
+plt.savefig('test2.png')
+plt.close()
+
+# Test 3: Edge case - very small positive values
+print("\nTest 3: Very small positive values")
+img = 10**np.random.normal(-10, 1, size=(50, 50))  # Very small positive values
+fig, ax = plt.subplots(1, 1)
+plot = ax.imshow(img, cmap='plasma')
+cb = fig.colorbar(plot, ax=ax)
+plot.norm = LogNorm()
+cb.update_normal(plot)
+plt.savefig('test3.png')
+plt.close()
+
+print("\nAll tests completed successfully!")
\ No newline at end of file
