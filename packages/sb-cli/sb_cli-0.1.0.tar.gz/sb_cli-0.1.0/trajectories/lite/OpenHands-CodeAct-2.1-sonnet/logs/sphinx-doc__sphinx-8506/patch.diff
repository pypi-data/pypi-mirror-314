diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..e39a1afb4
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,35 @@
+from sphinx.application import Sphinx
+import os
+import tempfile
+
+# Create a temporary directory for the test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create source and build directories
+    srcdir = os.path.join(tmpdir, 'src')
+    builddir = os.path.join(tmpdir, 'build')
+    os.makedirs(srcdir)
+    os.makedirs(builddir)
+
+    # Create conf.py
+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+        f.write("""
+project = 'Test'
+copyright = '2023'
+author = 'Test'
+extensions = []
+""")
+
+    # Create test RST file with the problematic option directive
+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+        f.write("""
+Test Document
+============
+
+.. option:: [enable=]PATTERN
+
+   Immediately enable events matching *PATTERN*
+""")
+
+    # Initialize and build Sphinx project
+    app = Sphinx(srcdir, srcdir, builddir, builddir, 'html')
+    app.build()
\ No newline at end of file
diff --git a/sphinx/domains/std.py b/sphinx/domains/std.py
index c87217c56..bc6dde0b8 100644
--- a/sphinx/domains/std.py
+++ b/sphinx/domains/std.py
@@ -43,7 +43,7 @@ logger = logging.getLogger(__name__)
 
 
 # RE for option descriptions
-option_desc_re = re.compile(r'((?:/|--|-|\+)?[^\s=[]+)(=?\s*.*)')
+option_desc_re = re.compile(r'((?:/|--|-|\+)?[^\s]+)(=?\s*.*)')
 # RE for grammar tokens
 token_re = re.compile(r'`(\w+)`', re.U)
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..adce62d0c
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,63 @@
+from sphinx.application import Sphinx
+import os
+import tempfile
+
+# Create a temporary directory for the test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create source and build directories
+    srcdir = os.path.join(tmpdir, 'src')
+    builddir = os.path.join(tmpdir, 'build')
+    os.makedirs(srcdir)
+    os.makedirs(builddir)
+
+    # Create conf.py
+    with open(os.path.join(srcdir, 'conf.py'), 'w') as f:
+        f.write("""
+project = 'Test'
+copyright = '2023'
+author = 'Test'
+extensions = []
+""")
+
+    # Create test RST file with edge cases
+    with open(os.path.join(srcdir, 'index.rst'), 'w') as f:
+        f.write("""
+Test Document
+============
+
+.. option:: [enable=]PATTERN
+   
+   Original case that needed fixing
+
+.. option:: --option[key=value]
+   
+   Option with square brackets and equals
+
+.. option:: /path/with/slashes[param]
+   
+   Option with path-like syntax and brackets
+
+.. option:: +flag{type}[index]
+   
+   Option with curly braces and brackets
+
+.. option:: -p[123]=value
+   
+   Short option with numeric index and equals
+
+.. option:: --very-complex[key1=val1,key2=val2]
+   
+   Complex option with multiple key-value pairs
+
+.. option:: [brackets]only
+   
+   Option starting with brackets
+
+.. option:: no-special-chars
+   
+   Option with only alphanumeric and hyphens
+
+.. option:: --traditional-option
+   
+   Traditional command-line option style
+""")
\ No newline at end of file
