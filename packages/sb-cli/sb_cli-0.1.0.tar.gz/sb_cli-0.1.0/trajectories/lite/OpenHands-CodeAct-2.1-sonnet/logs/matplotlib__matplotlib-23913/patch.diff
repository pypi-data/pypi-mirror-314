diff --git a/lib/matplotlib/legend.py b/lib/matplotlib/legend.py
index 9e5b903d59..ca4a82c3c1 100644
--- a/lib/matplotlib/legend.py
+++ b/lib/matplotlib/legend.py
@@ -261,6 +261,9 @@ alignment : {'center', 'left', 'right'}, default: 'center'
     The alignment of the legend title and the box of entries. The entries
     are aligned as a single block, so that markers always lined up.
 
+draggable : bool, default: False
+    If True, the legend will be draggable with the mouse.
+
 borderpad : float, default: :rc:`legend.borderpad`
     The fractional whitespace inside the legend border, in font-size units.
 
@@ -341,6 +344,7 @@ class Legend(Artist):
         handler_map=None,
         title_fontproperties=None,  # properties for the legend title
         alignment="center",       # control the alignment within the legend box
+        draggable=False,      # whether the legend should be draggable
         *,
         ncol=1  # synonym for ncols (backward compatibility)
     ):
@@ -390,9 +394,11 @@ class Legend(Artist):
             if isinstance(prop, dict) and "size" not in prop:
                 self.prop.set_size(mpl.rcParams["legend.fontsize"])
 
+        # Initialize draggable state
+        self._draggable = None
         self._fontsize = self.prop.get_size_in_points()
-
         self.texts = []
+        self._draggable_init = draggable  # Store draggable state for later
         self.legendHandles = []
         self._legend_title_box = None
 
@@ -516,6 +522,10 @@ class Legend(Artist):
         # init with null renderer
         self._init_legend_box(handles, labels, markerfirst)
 
+        # Enable draggable if requested
+        if getattr(self, '_draggable_init', False):
+            self.set_draggable(True)
+
         tmp = self._loc_used_default
         self._set_loc(loc)
         self._loc_used_default = tmp  # ignore changes done by _set_loc
diff --git a/test_legend_draggable.py b/test_legend_draggable.py
new file mode 100644
index 0000000000..620ce00ad7
--- /dev/null
+++ b/test_legend_draggable.py
@@ -0,0 +1,19 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Create some sample data
+x = np.linspace(0, 10, 100)
+y1 = np.sin(x)
+y2 = np.cos(x)
+
+# Create a plot
+plt.figure()
+plt.plot(x, y1, label='sin(x)')
+plt.plot(x, y2, label='cos(x)')
+
+# Create a legend and make it draggable after creation
+legend = plt.legend()
+legend.set_draggable(True)
+
+plt.title('Test Legend Draggable')
+plt.show()
\ No newline at end of file
diff --git a/test_legend_draggable_edge_cases.py b/test_legend_draggable_edge_cases.py
new file mode 100644
index 0000000000..724c874599
--- /dev/null
+++ b/test_legend_draggable_edge_cases.py
@@ -0,0 +1,34 @@
+import matplotlib.pyplot as plt
+import matplotlib.legend_handler as legend_handler
+import numpy as np
+
+# Create some sample data
+x = np.linspace(0, 10, 100)
+y1 = np.sin(x)
+y2 = np.cos(x)
+
+# Test case 1: Empty legend with draggable=True
+plt.figure()
+plt.plot(x, y1, label='sin(x)')
+plt.plot(x, y2, label='cos(x)')
+plt.legend(draggable=True)  # With labels
+plt.title('Basic Legend Test')
+
+# Test case 2: Multiple legends with draggable=True
+plt.figure()
+plt.plot(x, y1, label='sin(x)')
+plt.plot(x, y2, label='cos(x)')
+leg1 = plt.legend(['sin(x)'], loc='upper left', draggable=True)
+leg2 = plt.legend(['cos(x)'], loc='upper right', draggable=True)
+plt.gca().add_artist(leg1)  # Add back the first legend
+plt.title('Multiple Draggable Legends Test')
+
+# Test case 3: Legend with custom handler_map and draggable=True
+plt.figure()
+plt.plot(x, y1, label='sin(x)', color='red')
+plt.plot(x, y2, label='cos(x)', color='blue')
+handler_map = {plt.Line2D: legend_handler.HandlerLine2D(numpoints=4)}
+plt.legend(draggable=True, handler_map=handler_map)
+plt.title('Custom Handler Map Test')
+
+plt.show()
\ No newline at end of file
diff --git a/test_legend_draggable_param.py b/test_legend_draggable_param.py
new file mode 100644
index 0000000000..66ae4a5ee5
--- /dev/null
+++ b/test_legend_draggable_param.py
@@ -0,0 +1,18 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Create some sample data
+x = np.linspace(0, 10, 100)
+y1 = np.sin(x)
+y2 = np.cos(x)
+
+# Create a plot
+plt.figure()
+plt.plot(x, y1, label='sin(x)')
+plt.plot(x, y2, label='cos(x)')
+
+# Create a legend with draggable=True
+plt.legend(draggable=True)
+
+plt.title('Test Legend Draggable Parameter')
+plt.show()
\ No newline at end of file
