diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..b253768078
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index ce18098fd2..23399d6a27 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1124,11 +1124,16 @@ class Query(BaseExpression):
 
     def check_filterable(self, expression):
         """Raise an error if expression cannot be used in a WHERE clause."""
-        if not getattr(expression, 'filterable', True):
-            raise NotSupportedError(
-                expression.__class__.__name__ + ' is disallowed in the filter '
-                'clause.'
-            )
+        # Skip the filterable check if the expression is a model field, foreign key, or model instance
+        from django.db.models.fields.related import ForeignObject
+        from django.db.models import Model
+        if not (isinstance(expression, (Field, ForeignObject, Model)) or 
+                (hasattr(expression, 'field') and isinstance(expression.field, (Field, ForeignObject)))):
+            if not getattr(expression, 'filterable', True):
+                raise NotSupportedError(
+                    expression.__class__.__name__ + ' is disallowed in the filter '
+                    'clause.'
+                )
         if hasattr(expression, 'get_source_expressions'):
             for expr in expression.get_source_expressions():
                 self.check_filterable(expr)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..cdce805a23
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,73 @@
+from django.db import models
+from django.utils import timezone
+from django.conf import settings
+import os
+
+# Configure Django settings
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+import django
+django.setup()
+
+# Define the models
+class ProductMetaDataType(models.Model):
+    label = models.CharField(max_length=255, unique=True)
+    filterable = models.BooleanField(default=False)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class Product(models.Model):
+    name = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class ProductMetaData(models.Model):
+    product = models.ForeignKey(Product, on_delete=models.CASCADE)
+    value = models.TextField()
+    metadata_type = models.ForeignKey(ProductMetaDataType, on_delete=models.CASCADE)
+    date_created = models.DateTimeField(default=timezone.now)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create the database tables
+from django.db import connection
+with connection.cursor() as cursor:
+    cursor.execute("DROP TABLE IF EXISTS testapp_productmetadata")
+    cursor.execute("DROP TABLE IF EXISTS testapp_product")
+    cursor.execute("DROP TABLE IF EXISTS testapp_productmetadatatype")
+
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Product)
+    schema_editor.create_model(ProductMetaDataType)
+    schema_editor.create_model(ProductMetaData)
+
+# Create test data
+product = Product.objects.create(name="Test Product")
+brand_metadata = ProductMetaDataType.objects.create(label="Brand", filterable=False)
+ProductMetaData.objects.create(
+    product=product,
+    value="Dark Vador",
+    metadata_type=brand_metadata
+)
+
+# Try to filter - this should raise NotSupportedError
+try:
+    list(ProductMetaData.objects.filter(value="Dark Vador", metadata_type=brand_metadata))
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
