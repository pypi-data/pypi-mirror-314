diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py
index 93298f47e6..7e3ba50aab 100644
--- a/sympy/polys/factortools.py
+++ b/sympy/polys/factortools.py
@@ -124,21 +124,60 @@ def dmp_trial_division(f, factors, u, K):
 
 
 def dup_zz_mignotte_bound(f, K):
-    """Mignotte bound for univariate polynomials in `K[x]`. """
-    a = dup_max_norm(f, K)
-    b = abs(dup_LC(f, K))
+    """Knuth-Cohen bound for univariate polynomials in `K[x]`.
+    
+    This bound is tighter than the classical Mignotte bound.
+    Reference: Knuth's The Art of Computer Programming, Vol. 2 and Cohen's
+    A Course in Computational Algebraic Number Theory.
+    """
     n = dup_degree(f)
-
-    return K.sqrt(K(n + 1))*2**n*a*b
+    if n <= 0:
+        return K.zero
+    
+    # Get leading coefficient
+    an = abs(dup_LC(f, K))
+    
+    # Calculate sum of absolute values of other coefficients
+    coeff_sum = sum(abs(c) for c in f[1:])
+    
+    return K(2**(n-1) * an * coeff_sum)
 
 
 def dmp_zz_mignotte_bound(f, u, K):
-    """Mignotte bound for multivariate polynomials in `K[X]`. """
-    a = dmp_max_norm(f, u, K)
-    b = abs(dmp_ground_LC(f, u, K))
+    """Knuth-Cohen bound for multivariate polynomials in `K[X]`.
+    
+    This bound is tighter than the classical Mignotte bound.
+    Reference: Knuth's The Art of Computer Programming, Vol. 2 and Cohen's
+    A Course in Computational Algebraic Number Theory.
+    """
+    if dmp_zero_p(f, u):
+        return K.zero
+    
+    # Get total degree
     n = sum(dmp_degree_list(f, u))
-
-    return K.sqrt(K(n + 1))*2**n*a*b
+    if n <= 0:
+        return K.zero
+    
+    # Get leading coefficient
+    an = abs(dmp_ground_LC(f, u, K))
+    
+    # For multivariate case, we need to sum all coefficients
+    def sum_abs_coeffs(poly, level):
+        if level == 0:
+            # Base case - univariate polynomial
+            return sum(abs(c) for c in poly)
+        else:
+            # Recursive case
+            total = K.zero
+            for p in poly:
+                if p:  # If polynomial is not zero
+                    total += sum_abs_coeffs(p, level - 1)
+            return total
+    
+    # Get sum of absolute values of all coefficients except leading term
+    coeff_sum = sum_abs_coeffs(f, u) - an
+    
+    return K(2**(n-1) * an * coeff_sum)
 
 
 def dup_zz_hensel_step(m, f, g, h, s, t, K):
