diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 84960d77e1..b31d918347 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1051,7 +1051,7 @@ class Subquery(Expression):
 
     def get_group_by_cols(self, alias=None):
         if alias:
-            return [Ref(alias, self)]
+            return [self]
         external_cols = self.query.get_external_cols()
         if any(col.possibly_multivalued for col in external_cols):
             return [self]
diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 63ca817355..72769802cd 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -6,7 +6,7 @@ from itertools import chain
 from django.core.exceptions import EmptyResultSet, FieldError
 from django.db import DatabaseError, NotSupportedError
 from django.db.models.constants import LOOKUP_SEP
-from django.db.models.expressions import OrderBy, Random, RawSQL, Ref, Value
+from django.db.models.expressions import OrderBy, Random, RawSQL, Ref, Subquery, Value
 from django.db.models.functions import Cast
 from django.db.models.query_utils import Q, select_related_descend
 from django.db.models.sql.constants import (
@@ -112,11 +112,26 @@ class SQLCompiler:
         ref_sources = {
             expr.source for expr in expressions if isinstance(expr, Ref)
         }
-        for expr, _, _ in select:
+        for expr, _, alias in select:
             # Skip members of the select clause that are already included
             # by reference.
             if expr in ref_sources:
                 continue
+            # If this is a subquery and it's referenced in group_by or values(), use the full subquery
+            if alias and (
+                (isinstance(self.query.group_by, (list, tuple)) and alias in self.query.group_by) or
+                (hasattr(expr, 'contains_aggregate') and expr.contains_aggregate) or
+                (isinstance(expr, Subquery) and alias in self.query.values_select)
+            ):
+                # For subqueries, we need to use the full subquery in GROUP BY
+                if isinstance(expr, Subquery):
+                    expressions.append(expr)
+                # For other expressions, we need to get their group by columns
+                else:
+                    cols = expr.get_group_by_cols()
+                    for col in cols:
+                        expressions.append(col)
+                continue
             cols = expr.get_group_by_cols()
             for col in cols:
                 expressions.append(col)
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 78c4f47b5b..c5ef4d046b 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2107,6 +2107,10 @@ class Query(BaseExpression):
                     if f in self.extra_select:
                         extra_names.append(f)
                     elif f in self.annotation_select:
+                        # For subqueries in annotations, we need to use the full subquery in GROUP BY
+                        annotation = self.annotations.get(f, self.annotation_select.get(f))
+                        if hasattr(annotation, 'contains_aggregate') and annotation.contains_aggregate:
+                            self.group_by = [annotation]
                         annotation_names.append(f)
                     else:
                         field_names.append(f)
diff --git a/test_project/repro_project/manage.py b/test_project/repro_project/manage.py
new file mode 100755
index 0000000000..92bb9a3b2d
--- /dev/null
+++ b/test_project/repro_project/manage.py
@@ -0,0 +1,22 @@
+#!/usr/bin/env python
+"""Django's command-line utility for administrative tasks."""
+import os
+import sys
+
+
+def main():
+    """Run administrative tasks."""
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+
+if __name__ == '__main__':
+    main()
diff --git a/test_project/repro_project/myproject/__init__.py b/test_project/repro_project/myproject/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/repro_project/myproject/asgi.py b/test_project/repro_project/myproject/asgi.py
new file mode 100644
index 0000000000..63130befdc
--- /dev/null
+++ b/test_project/repro_project/myproject/asgi.py
@@ -0,0 +1,16 @@
+"""
+ASGI config for myproject project.
+
+It exposes the ASGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/asgi/
+"""
+
+import os
+
+from django.core.asgi import get_asgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+
+application = get_asgi_application()
diff --git a/test_project/repro_project/myproject/settings.py b/test_project/repro_project/myproject/settings.py
new file mode 100644
index 0000000000..0729446ae5
--- /dev/null
+++ b/test_project/repro_project/myproject/settings.py
@@ -0,0 +1,125 @@
+"""
+Django settings for myproject project.
+
+Generated by 'django-admin startproject' using Django 3.1.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/topics/settings/
+
+For the full list of settings and their values, see
+https://docs.djangoproject.com/en/dev/ref/settings/
+"""
+
+from pathlib import Path
+
+# Build paths inside the project like this: BASE_DIR / 'subdir'.
+BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
+
+
+# Quick-start development settings - unsuitable for production
+# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'rykl7+3x*9qr0ro&hnqyc6&#scs%jz%w@v&#7456uxs+8js!_a'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+
+# Application definition
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'test_app',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'myproject.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'myproject.wsgi.application'
+
+
+# Database
+# https://docs.djangoproject.com/en/dev/ref/settings/#databases
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.postgresql',
+        'NAME': 'test_db',
+        'USER': 'postgres',
+        'PASSWORD': 'postgres',
+        'HOST': 'localhost',
+        'PORT': '5432',
+    }
+}
+
+
+# Password validation
+# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+
+# Internationalization
+# https://docs.djangoproject.com/en/dev/topics/i18n/
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+
+# Static files (CSS, JavaScript, Images)
+# https://docs.djangoproject.com/en/dev/howto/static-files/
+
+STATIC_URL = '/static/'
diff --git a/test_project/repro_project/myproject/urls.py b/test_project/repro_project/myproject/urls.py
new file mode 100644
index 0000000000..f1bb5b6525
--- /dev/null
+++ b/test_project/repro_project/myproject/urls.py
@@ -0,0 +1,21 @@
+"""myproject URL Configuration
+
+The `urlpatterns` list routes URLs to views. For more information please see:
+    https://docs.djangoproject.com/en/dev/topics/http/urls/
+Examples:
+Function views
+    1. Add an import:  from my_app import views
+    2. Add a URL to urlpatterns:  path('', views.home, name='home')
+Class-based views
+    1. Add an import:  from other_app.views import Home
+    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
+Including another URLconf
+    1. Import the include() function: from django.urls import include, path
+    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
+"""
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
diff --git a/test_project/repro_project/myproject/wsgi.py b/test_project/repro_project/myproject/wsgi.py
new file mode 100644
index 0000000000..b3f18eed49
--- /dev/null
+++ b/test_project/repro_project/myproject/wsgi.py
@@ -0,0 +1,16 @@
+"""
+WSGI config for myproject project.
+
+It exposes the WSGI callable as a module-level variable named ``application``.
+
+For more information on this file, see
+https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/
+"""
+
+import os
+
+from django.core.wsgi import get_wsgi_application
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+
+application = get_wsgi_application()
diff --git a/test_project/repro_project/reproduce.py b/test_project/repro_project/reproduce.py
new file mode 100644
index 0000000000..f8e64e256c
--- /dev/null
+++ b/test_project/repro_project/reproduce.py
@@ -0,0 +1,28 @@
+import os
+import django
+from django.db.models import Q, Count, OuterRef, Subquery
+
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')
+django.setup()
+
+from test_app.models import A, B, AB, C
+
+def reproduce_issue():
+    ab_query = AB.objects.filter(a=OuterRef("pk"), b=1)
+    filter_conditions = Q(pk=1) | Q(ab_a__b=1)
+    query = A.objects.\
+        filter(filter_conditions).\
+        annotate(
+            status=Subquery(ab_query.values("status")),
+            c_count=Count("c"),
+    )
+    print("\nQuery before values():")
+    print(query.query)
+    answer = query.values("status").annotate(total_count=Count("status"))
+    print("\nQuery after values():")
+    print(answer.query)
+    print("\nQuery Results:")
+    print(answer)
+
+if __name__ == "__main__":
+    reproduce_issue()
\ No newline at end of file
diff --git a/test_project/repro_project/test_app/__init__.py b/test_project/repro_project/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/repro_project/test_app/admin.py b/test_project/repro_project/test_app/admin.py
new file mode 100644
index 0000000000..8c38f3f3da
--- /dev/null
+++ b/test_project/repro_project/test_app/admin.py
@@ -0,0 +1,3 @@
+from django.contrib import admin
+
+# Register your models here.
diff --git a/test_project/repro_project/test_app/apps.py b/test_project/repro_project/test_app/apps.py
new file mode 100644
index 0000000000..fc04070e83
--- /dev/null
+++ b/test_project/repro_project/test_app/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
diff --git a/test_project/repro_project/test_app/migrations/0001_initial.py b/test_project/repro_project/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..80d61f3b21
--- /dev/null
+++ b/test_project/repro_project/test_app/migrations/0001_initial.py
@@ -0,0 +1,49 @@
+# Generated by Django 3.1 on 2024-10-25 16:34
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='A',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='B',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='C',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('status', models.IntegerField()),
+                ('a', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='c', to='test_app.A', verbose_name='a')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='AB',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('status', models.IntegerField()),
+                ('a', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ab_a', to='test_app.A')),
+                ('b', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ab_b', to='test_app.B')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='a',
+            name='bs',
+            field=models.ManyToManyField(related_name='a', through='test_app.AB', to='test_app.B'),
+        ),
+    ]
diff --git a/test_project/repro_project/test_app/migrations/__init__.py b/test_project/repro_project/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/repro_project/test_app/models.py b/test_project/repro_project/test_app/models.py
new file mode 100644
index 0000000000..cc39c912ac
--- /dev/null
+++ b/test_project/repro_project/test_app/models.py
@@ -0,0 +1,26 @@
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+
+class A(models.Model):
+    bs = models.ManyToManyField('B',
+                               related_name="a",
+                               through="AB")
+
+class B(models.Model):
+    pass
+
+class AB(models.Model):
+    a = models.ForeignKey(A, on_delete=models.CASCADE, related_name="ab_a")
+    b = models.ForeignKey(B, on_delete=models.CASCADE, related_name="ab_b")
+    status = models.IntegerField()
+
+class C(models.Model):
+    a = models.ForeignKey(
+        A,
+        null=True,
+        blank=True,
+        on_delete=models.SET_NULL,
+        related_name="c",
+        verbose_name=_("a")
+    )
+    status = models.IntegerField()
diff --git a/test_project/repro_project/test_app/tests.py b/test_project/repro_project/test_app/tests.py
new file mode 100644
index 0000000000..7ce503c2dd
--- /dev/null
+++ b/test_project/repro_project/test_app/tests.py
@@ -0,0 +1,3 @@
+from django.test import TestCase
+
+# Create your tests here.
diff --git a/test_project/repro_project/test_app/views.py b/test_project/repro_project/test_app/views.py
new file mode 100644
index 0000000000..91ea44a218
--- /dev/null
+++ b/test_project/repro_project/test_app/views.py
@@ -0,0 +1,3 @@
+from django.shortcuts import render
+
+# Create your views here.
