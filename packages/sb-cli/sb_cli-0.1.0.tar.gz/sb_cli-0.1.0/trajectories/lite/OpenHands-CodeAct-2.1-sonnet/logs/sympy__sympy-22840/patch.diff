diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6690df5e66
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,30 @@
+import sympy as sp
+from pprint import pprint
+
+
+def sub_in_matrixsymbols(exp, matrices):
+    for matrix in matrices:
+        for i in range(matrix.shape[0]):
+            for j in range(matrix.shape[1]):
+                name = "%s_%d_%d" % (matrix.name, i, j)
+                sym = sp.symbols(name)
+                exp = exp.subs(sym, matrix[i, j])
+    return exp
+
+
+def t44(name):
+    return sp.Matrix(4, 4, lambda i, j: sp.symbols('%s_%d_%d' % (name, i, j)))
+
+
+# Construct matrices of symbols that work with our
+# expressions. (MatrixSymbols does not.)
+a = t44("a")
+b = t44("b")
+
+# Set up expression. This is a just a simple example.
+e = a * b
+
+# Put in matrixsymbols. (Gives array-input in codegen.)
+e2 = sub_in_matrixsymbols(e, [sp.MatrixSymbol("a", 4, 4), sp.MatrixSymbol("b", 4, 4)])
+cse_subs, cse_reduced = sp.cse(e2)
+pprint((cse_subs, cse_reduced))
\ No newline at end of file
diff --git a/sympy/simplify/cse_main.py b/sympy/simplify/cse_main.py
index d649dd02a9..fb022690e8 100644
--- a/sympy/simplify/cse_main.py
+++ b/sympy/simplify/cse_main.py
@@ -566,7 +566,7 @@ def tree_cse(exprs, symbols, opt_subs=None, order='canonical', ignore=()):
     ignore : iterable of Symbols
         Substitutions containing any Symbol from ``ignore`` will be ignored.
     """
-    from sympy.matrices.expressions import MatrixExpr, MatrixSymbol, MatMul, MatAdd
+    from sympy.matrices.expressions import MatrixExpr, MatrixSymbol, MatMul, MatAdd, MatrixSymbol
     from sympy.polys.rootoftools import RootOf
 
     if opt_subs is None:
@@ -586,6 +586,10 @@ def _find_repeated(expr):
         if isinstance(expr, RootOf):
             return
 
+        # Skip matrix indexing operations and matrix symbols
+        if isinstance(expr, Basic) and (expr.is_Indexed or isinstance(expr, MatrixSymbol)):
+            return
+
         if isinstance(expr, Basic) and (expr.is_Atom or expr.is_Order):
             if expr.is_Symbol:
                 excluded_symbols.add(expr)
diff --git a/test_edge_case.py b/test_edge_case.py
new file mode 100644
index 0000000000..ce236151cc
--- /dev/null
+++ b/test_edge_case.py
@@ -0,0 +1,31 @@
+import sympy as sp
+from pprint import pprint
+
+
+def sub_in_matrixsymbols(exp, matrices):
+    for matrix in matrices:
+        for i in range(matrix.shape[0]):
+            for j in range(matrix.shape[1]):
+                name = "%s_%d_%d" % (matrix.name, i, j)
+                sym = sp.symbols(name)
+                exp = exp.subs(sym, matrix[i, j])
+    return exp
+
+
+def t44(name):
+    return sp.Matrix(4, 4, lambda i, j: sp.symbols('%s_%d_%d' % (name, i, j)))
+
+
+# Construct matrices of symbols that work with our
+# expressions. (MatrixSymbols does not.)
+a = t44("a")
+b = t44("b")
+x = sp.Symbol('x')
+
+# Set up expression with both matrix and scalar operations
+e = a * b + x * a
+
+# Put in matrixsymbols
+e2 = sub_in_matrixsymbols(e, [sp.MatrixSymbol("a", 4, 4), sp.MatrixSymbol("b", 4, 4)])
+cse_subs, cse_reduced = sp.cse(e2)
+pprint((cse_subs, cse_reduced))
\ No newline at end of file
diff --git a/test_nested.py b/test_nested.py
new file mode 100644
index 0000000000..d1e729cb8b
--- /dev/null
+++ b/test_nested.py
@@ -0,0 +1,31 @@
+import sympy as sp
+from pprint import pprint
+
+
+def sub_in_matrixsymbols(exp, matrices):
+    for matrix in matrices:
+        for i in range(matrix.shape[0]):
+            for j in range(matrix.shape[1]):
+                name = "%s_%d_%d" % (matrix.name, i, j)
+                sym = sp.symbols(name)
+                exp = exp.subs(sym, matrix[i, j])
+    return exp
+
+
+def t44(name):
+    return sp.Matrix(4, 4, lambda i, j: sp.symbols('%s_%d_%d' % (name, i, j)))
+
+
+# Construct matrices of symbols that work with our
+# expressions. (MatrixSymbols does not.)
+a = t44("a")
+b = t44("b")
+c = t44("c")
+
+# Set up expression with nested matrix operations
+e = (a * b) * c + a * (b * c)
+
+# Put in matrixsymbols
+e2 = sub_in_matrixsymbols(e, [sp.MatrixSymbol("a", 4, 4), sp.MatrixSymbol("b", 4, 4), sp.MatrixSymbol("c", 4, 4)])
+cse_subs, cse_reduced = sp.cse(e2)
+pprint((cse_subs, cse_reduced))
\ No newline at end of file
