diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index dadd4acfa1..e5771d7bd5 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2040,7 +2040,14 @@ class InlineModelAdmin(BaseModelAdmin):
         if self.verbose_name is None:
             self.verbose_name = self.model._meta.verbose_name
         if self.verbose_name_plural is None:
-            self.verbose_name_plural = self.model._meta.verbose_name_plural
+            # If verbose_name was explicitly set, use its pluralized version
+            if self.verbose_name != self.model._meta.verbose_name:
+                from django.utils.translation import gettext_lazy as _
+                # Use Django's translation system for proper pluralization
+                # This allows for proper translation in different languages
+                self.verbose_name_plural = _(f"{self.verbose_name}s")
+            else:
+                self.verbose_name_plural = self.model._meta.verbose_name_plural
 
     @property
     def media(self):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..9182c5a36a
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,59 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+django.setup()
+
+from django.contrib import admin
+from django.db import models
+from django.test import TestCase
+
+from reproduce.models import Author, Book
+
+# Create inline admin
+class BookInline(admin.TabularInline):
+    model = Book
+    verbose_name = "Published Work"  # This should automatically pluralize to "Published Works"
+
+# Create test case
+class TestInlineVerboseName(TestCase):
+    def test_inline_verbose_name_plural(self):
+        # Test 1: When verbose_name is explicitly set
+        inline = BookInline(Author, admin.site)
+        assert inline.verbose_name_plural == "Published Works", \
+            f"Expected 'Published Works' but got '{inline.verbose_name_plural}'"
+
+        # Test 2: When verbose_name is not set
+        class DefaultInline(admin.TabularInline):
+            model = Book
+        inline = DefaultInline(Author, admin.site)
+        assert inline.verbose_name_plural == "books", \
+            f"Expected 'books' but got '{inline.verbose_name_plural}'"
+
+        # Test 3: Common inline verbose names
+        test_cases = [
+            ("Related Item", "Related Items"),
+            ("Extra Content", "Extra Contents"),
+            ("Book Review", "Book Reviews"),
+            ("Author Note", "Author Notes"),
+        ]
+        for singular, expected_plural in test_cases:
+            class CommonInline(admin.TabularInline):
+                model = Book
+                verbose_name = singular
+            inline = CommonInline(Author, admin.site)
+            assert str(inline.verbose_name_plural) == expected_plural, \
+                f"For '{singular}', expected '{expected_plural}' but got '{inline.verbose_name_plural}'"
+
+        # Test 4: When verbose_name_plural is explicitly set
+        class ExplicitPluralInline(admin.TabularInline):
+            model = Book
+            verbose_name = "Published Work"
+            verbose_name_plural = "Custom Plural"
+        inline = ExplicitPluralInline(Author, admin.site)
+        assert inline.verbose_name_plural == "Custom Plural", \
+            f"Expected 'Custom Plural' but got '{inline.verbose_name_plural}'"
+
+if __name__ == '__main__':
+    test = TestInlineVerboseName()
+    test.test_inline_verbose_name_plural()
\ No newline at end of file
diff --git a/reproduce/__init__.py b/reproduce/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce/apps.py b/reproduce/apps.py
new file mode 100644
index 0000000000..876bd875d6
--- /dev/null
+++ b/reproduce/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class ReproduceConfig(AppConfig):
+    name = 'reproduce'
+    verbose_name = 'Reproduce'
\ No newline at end of file
diff --git a/reproduce/models.py b/reproduce/models.py
new file mode 100644
index 0000000000..2bf0deafde
--- /dev/null
+++ b/reproduce/models.py
@@ -0,0 +1,8 @@
+from django.db import models
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+class Book(models.Model):
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    title = models.CharField(max_length=100)
\ No newline at end of file
diff --git a/reproduce_models.py b/reproduce_models.py
new file mode 100644
index 0000000000..ea3558a0b2
--- /dev/null
+++ b/reproduce_models.py
@@ -0,0 +1,14 @@
+from django.db import models
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'reproduce'
+
+class Book(models.Model):
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    title = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'reproduce'
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..0062c09feb
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,18 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'reproduce.apps.ReproduceConfig',  # Our test module
+]
+
+SECRET_KEY = 'dummy-key-for-tests'
\ No newline at end of file
