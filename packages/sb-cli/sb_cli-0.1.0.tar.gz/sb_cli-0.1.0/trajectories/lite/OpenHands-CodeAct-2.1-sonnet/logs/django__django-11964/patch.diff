diff --git a/django/db/models/enums.py b/django/db/models/enums.py
index bbe362a6ab..d553db8ab0 100644
--- a/django/db/models/enums.py
+++ b/django/db/models/enums.py
@@ -33,6 +33,9 @@ class ChoicesMeta(enum.EnumMeta):
         cls.label = property(lambda self: cls._value2label_map_.get(self.value))
         return enum.unique(cls)
 
+    def __str__(cls):
+        return str(cls.__name__)
+
     def __contains__(cls, member):
         if not isinstance(member, enum.Enum):
             # Allow non-enums to match against member values.
@@ -60,7 +63,8 @@ class ChoicesMeta(enum.EnumMeta):
 
 class Choices(enum.Enum, metaclass=ChoicesMeta):
     """Class for creating enumerated choices."""
-    pass
+    def __str__(self):
+        return str(self.value)
 
 
 class IntegerChoices(int, Choices):
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index d610dc86f0..bc70b18e07 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -152,6 +152,12 @@ class Field(RegisterLookupMixin):
         if isinstance(choices, collections.abc.Iterator):
             choices = list(choices)
         self.choices = choices
+        # Use custom descriptor if choices come from TextChoices/IntegerChoices
+        if choices and hasattr(choices, '__module__'):
+            module = choices.__module__
+            if module == 'django.db.models' and choices.__class__.__name__ in ('TextChoices', 'IntegerChoices'):
+                from django.db.models.fields.choices import ChoicesDescriptor
+                self.descriptor_class = ChoicesDescriptor
         self.help_text = help_text
         self.db_index = db_index
         self.db_column = db_column
@@ -186,6 +192,20 @@ class Field(RegisterLookupMixin):
         app = model._meta.app_label
         return '%s.%s.%s' % (app, model._meta.object_name, self.name)
 
+    def contribute_to_class(self, cls, name, private_only=False):
+        """
+        Register the field with the model class it belongs to.
+        """
+        super().contribute_to_class(cls, name, private_only)
+        if self.choices:
+            # Use custom descriptor if choices come from TextChoices/IntegerChoices
+            if hasattr(self.choices, '__module__'):
+                module = self.choices.__module__
+                if module == 'django.db.models' and self.choices.__class__.__name__ in ('TextChoices', 'IntegerChoices'):
+                    from django.db.models.fields.choices import ChoicesDescriptor
+                    self.descriptor_class = ChoicesDescriptor
+            setattr(cls, self.name, self.descriptor_class(self))
+
     def __repr__(self):
         """Display the module, class, and name of the field."""
         path = '%s.%s' % (self.__class__.__module__, self.__class__.__qualname__)
@@ -792,6 +812,9 @@ class Field(RegisterLookupMixin):
         """Perform preliminary non-db specific value checks and conversions."""
         if isinstance(value, Promise):
             value = value._proxy____cast()
+        # Handle TextChoices/IntegerChoices enums
+        if isinstance(value, enum.Enum):
+            return value.value
         return value
 
     def get_db_prep_value(self, value, connection, prepared=False):
diff --git a/django/db/models/fields/choices.py b/django/db/models/fields/choices.py
new file mode 100644
index 0000000000..89918593d4
--- /dev/null
+++ b/django/db/models/fields/choices.py
@@ -0,0 +1,12 @@
+import enum
+from django.db.models.query_utils import DeferredAttribute
+
+class ChoicesDescriptor(DeferredAttribute):
+    """
+    A descriptor that converts enum values to their actual values when accessed.
+    """
+    def __get__(self, instance, cls=None):
+        value = super().__get__(instance, cls)
+        if isinstance(value, enum.Enum):
+            return value.value
+        return value
\ No newline at end of file
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..2c0614e9ae
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,62 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.conf import settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+
+# Test case 1: Empty string value
+class EmptyChoice(models.TextChoices):
+    EMPTY = "", _("Empty value")
+    NORMAL = "normal", _("Normal value")
+
+class EmptyObject(models.Model):
+    my_str_value = models.CharField(max_length=10, choices=EmptyChoice.choices)
+    
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Test case 2: Integer choices
+class IntChoice(models.IntegerChoices):
+    ZERO = 0, _("Zero value")
+    ONE = 1, _("One value")
+
+class IntObject(models.Model):
+    my_int_value = models.IntegerField(choices=IntChoice.choices)
+    
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Test case 3: None value
+class NullObject(models.Model):
+    my_str_value = models.CharField(max_length=10, choices=EmptyChoice.choices, null=True)
+    
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Test the edge cases
+print("Testing empty string value:")
+obj1 = EmptyObject(my_str_value=EmptyChoice.EMPTY)
+print(f"Value type: {type(obj1.my_str_value)}")
+print(f"Value str: {str(obj1.my_str_value)}")
+print(f"Expected: '', got: {obj1.my_str_value}")
+
+print("\nTesting integer value:")
+obj2 = IntObject(my_int_value=IntChoice.ZERO)
+print(f"Value type: {type(obj2.my_int_value)}")
+print(f"Value str: {str(obj2.my_int_value)}")
+print(f"Expected: '0', got: {obj2.my_int_value}")
+
+print("\nTesting null value:")
+obj3 = NullObject(my_str_value=None)
+print(f"Value type: {type(obj3.my_str_value)}")
+print(f"Value str: {str(obj3.my_str_value)}")
+print(f"Expected: 'None', got: {obj3.my_str_value}")
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..6f284264c2
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,30 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.conf import settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+
+class MyChoice(models.TextChoices):
+    FIRST_CHOICE = "first", _("The first choice, it is")
+    SECOND_CHOICE = "second", _("The second choice, it is")
+
+class MyObject(models.Model):
+    my_str_value = models.CharField(max_length=10, choices=MyChoice.choices)
+
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Create an instance
+obj = MyObject(my_str_value=MyChoice.FIRST_CHOICE)
+print(f"Value type: {type(obj.my_str_value)}")
+print(f"Value str: {str(obj.my_str_value)}")
+print(f"Expected: 'first', got: {obj.my_str_value}")
\ No newline at end of file
