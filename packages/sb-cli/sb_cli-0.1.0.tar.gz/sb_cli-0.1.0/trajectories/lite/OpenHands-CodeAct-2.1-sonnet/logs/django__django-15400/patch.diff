diff --git a/django/utils/functional.py b/django/utils/functional.py
index 9e1be0fe0f..1da894364d 100644
--- a/django/utils/functional.py
+++ b/django/utils/functional.py
@@ -432,6 +432,11 @@ class SimpleLazyObject(LazyObject):
             return result
         return copy.deepcopy(self._wrapped, memo)
 
+    def __radd__(self, other):
+        if self._wrapped is empty:
+            self._setup()
+        return other + self._wrapped
+
 
 def partition(predicate, values):
     """
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4789965c9b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,11 @@
+from django.utils.functional import SimpleLazyObject
+
+# Create a lazy object that returns a number
+lazy_num = SimpleLazyObject(lambda: 42)
+
+# Try to use __radd__ by adding a number to the lazy object
+try:
+    result = 10 + lazy_num
+    print(f"Success! 10 + lazy_num = {result}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..5482c6e04b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,43 @@
+from django.utils.functional import SimpleLazyObject
+
+# Test case 1: Adding float to lazy int
+lazy_int = SimpleLazyObject(lambda: 42)
+try:
+    result = 10.5 + lazy_int
+    print(f"Success! 10.5 + lazy_int = {result}")
+except Exception as e:
+    print(f"Error in test case 1: {e}")
+
+# Test case 2: Adding string to lazy string
+lazy_str = SimpleLazyObject(lambda: "world")
+try:
+    result = "hello " + lazy_str
+    print(f"Success! 'hello ' + lazy_str = {result}")
+except Exception as e:
+    print(f"Error in test case 2: {e}")
+
+# Test case 3: Adding list to lazy list
+lazy_list = SimpleLazyObject(lambda: [3, 4])
+try:
+    result = [1, 2] + lazy_list
+    print(f"Success! [1, 2] + lazy_list = {result}")
+except Exception as e:
+    print(f"Error in test case 3: {e}")
+
+# Test case 4: Adding to None (should fail gracefully)
+lazy_none = SimpleLazyObject(lambda: None)
+try:
+    result = 42 + lazy_none
+    print(f"Success! 42 + lazy_none = {result}")
+except Exception as e:
+    print(f"Error in test case 4 (expected): {e}")
+
+# Test case 5: Adding to lazy object that raises exception during evaluation
+def raises_error():
+    raise ValueError("Test error")
+lazy_error = SimpleLazyObject(raises_error)
+try:
+    result = 42 + lazy_error
+    print(f"Success! 42 + lazy_error = {result}")
+except Exception as e:
+    print(f"Error in test case 5 (expected): {e}")
\ No newline at end of file
