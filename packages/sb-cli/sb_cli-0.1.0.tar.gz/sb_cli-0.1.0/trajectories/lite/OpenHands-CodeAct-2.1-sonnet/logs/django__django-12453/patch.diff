diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..2e38248f66
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,91 @@
+import os
+import django
+from django.conf import settings
+from django.db import models, connection, transaction
+from django.test import TransactionTestCase
+from django.db.backends.base.creation import BaseDatabaseCreation
+from django.core import serializers
+from django.apps import apps
+from io import StringIO
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+    MIDDLEWARE=[],
+)
+
+django.setup()
+
+# Create models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'test'
+
+# Register models
+apps.all_models['test'] = {
+    'author': Author,
+    'book': Book,
+}
+
+# Create a test app
+apps.app_configs['test'] = type('TestConfig', (), {
+    'name': 'test',
+    'label': 'test',
+    'models': {'Author': Author, 'Book': Book},
+    'models_module': type('ModelsModule', (), {
+        'Author': Author,
+        'Book': Book,
+    })
+})
+
+# Create tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Author)
+    schema_editor.create_model(Book)
+
+# Create a test database creation instance
+creation = BaseDatabaseCreation(connection)
+
+# Test data in JSON format - note that Book comes before Author
+test_data = '''[
+    {"model": "test.book", "pk": 1, "fields": {"title": "Test Book", "author": 1}},
+    {"model": "test.author", "pk": 1, "fields": {"name": "Test Author"}}
+]'''
+
+# Try to deserialize the data - this should fail due to FK constraint
+try:
+    creation.deserialize_db_from_string(test_data)
+    print("Error: Expected IntegrityError was not raised!")
+except Exception as e:
+    print(f"Got expected error: {e}")
+
+# Now let's fix the deserialize_db_from_string method
+def fixed_deserialize_db_from_string(self, data):
+    """Fixed version that wraps deserialization in a transaction"""
+    data = StringIO(data)
+    with transaction.atomic(using=self.connection.alias):
+        for obj in serializers.deserialize("json", data, using=self.connection.alias):
+            obj.save()
+
+# Test the fixed version
+creation.deserialize_db_from_string = fixed_deserialize_db_from_string.__get__(creation)
+try:
+    creation.deserialize_db_from_string(test_data)
+    print("Success: Fixed version handled FK constraints correctly!")
+except Exception as e:
+    print(f"Error: Fixed version failed: {e}")
\ No newline at end of file
diff --git a/tests/backends/test_creation.py b/tests/backends/test_creation.py
new file mode 100644
index 0000000000..072aea268e
--- /dev/null
+++ b/tests/backends/test_creation.py
@@ -0,0 +1,50 @@
+from django.db import models, connection
+from django.test import TestCase
+from django.db.backends.base.creation import BaseDatabaseCreation
+from django.core import serializers
+from io import StringIO
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'backends'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'backends'
+
+class TestDatabaseCreation(TestCase):
+    def test_deserialize_db_from_string_handles_foreign_keys(self):
+        # Create test data with Book before Author to test FK constraint handling
+        test_data = '''[
+            {"model": "backends.book", "pk": 1, "fields": {"title": "Test Book", "author": 1}},
+            {"model": "backends.author", "pk": 1, "fields": {"name": "Test Author"}}
+        ]'''
+
+        # Test that deserialize_db_from_string handles FK constraints correctly
+        creation = BaseDatabaseCreation(connection)
+        with self.assertRaises(Exception):
+            creation.deserialize_db_from_string(test_data)
+
+        # Now let's fix the deserialize_db_from_string method
+        from django.db import transaction
+
+        def fixed_deserialize_db_from_string(self, data):
+            """Fixed version that wraps deserialization in a transaction"""
+            data = StringIO(data)
+            with transaction.atomic(using=self.connection.alias):
+                for obj in serializers.deserialize("json", data, using=self.connection.alias):
+                    obj.save()
+
+        # Test the fixed version
+        creation.deserialize_db_from_string = fixed_deserialize_db_from_string.__get__(creation)
+        creation.deserialize_db_from_string(test_data)
+
+        # Verify that both objects were created
+        self.assertEqual(Author.objects.count(), 1)
+        self.assertEqual(Book.objects.count(), 1)
+        self.assertEqual(Book.objects.first().author, Author.objects.first())
\ No newline at end of file
diff --git a/tests/test_creation/__init__.py b/tests/test_creation/__init__.py
new file mode 100644
index 0000000000..e55a53f088
--- /dev/null
+++ b/tests/test_creation/__init__.py
@@ -0,0 +1 @@
+default_app_config = 'tests.test_creation.apps.TestCreationConfig'
\ No newline at end of file
diff --git a/tests/test_creation/apps.py b/tests/test_creation/apps.py
new file mode 100644
index 0000000000..25d049db05
--- /dev/null
+++ b/tests/test_creation/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class TestCreationConfig(AppConfig):
+    name = 'tests.test_creation'
+    label = 'test_creation'
\ No newline at end of file
diff --git a/tests/test_creation/models.py b/tests/test_creation/models.py
new file mode 100644
index 0000000000..e50c369dcc
--- /dev/null
+++ b/tests/test_creation/models.py
@@ -0,0 +1,14 @@
+from django.db import models
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test_creation'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'test_creation'
\ No newline at end of file
diff --git a/tests/test_creation/tests.py b/tests/test_creation/tests.py
new file mode 100644
index 0000000000..860de5c1d9
--- /dev/null
+++ b/tests/test_creation/tests.py
@@ -0,0 +1,25 @@
+from django.db import connection, transaction
+from django.test import TestCase
+from django.db.backends.base.creation import BaseDatabaseCreation
+from django.core import serializers
+from io import StringIO
+
+from .models import Author, Book
+
+class TestDatabaseCreation(TestCase):
+    def test_deserialize_db_from_string_method(self):
+        """Test that deserialize_db_from_string method handles foreign key constraints correctly"""
+        # Create test data with Book before Author to test FK constraint handling
+        test_data = '''[
+            {"model": "test_creation.book", "pk": 1, "fields": {"title": "Test Book", "author": 1}},
+            {"model": "test_creation.author", "pk": 1, "fields": {"name": "Test Author"}}
+        ]'''
+
+        # Test that deserialize_db_from_string method succeeds
+        creation = BaseDatabaseCreation(connection)
+        creation.deserialize_db_from_string(test_data)
+
+        # Verify that both objects were created
+        self.assertEqual(Author.objects.count(), 1)
+        self.assertEqual(Book.objects.count(), 1)
+        self.assertEqual(Book.objects.first().author, Author.objects.first())
\ No newline at end of file
diff --git a/tests/test_db_creation.py b/tests/test_db_creation.py
new file mode 100644
index 0000000000..e6325ff76a
--- /dev/null
+++ b/tests/test_db_creation.py
@@ -0,0 +1,87 @@
+import unittest
+import django
+from django.conf import settings
+from django.db import models, connection, transaction
+from django.db.backends.base.creation import BaseDatabaseCreation
+from django.core import serializers
+from io import StringIO
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+    MIDDLEWARE=[],
+)
+django.setup()
+
+# Create models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'test'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+    class Meta:
+        app_label = 'test'
+
+# Register models
+from django.apps import apps
+apps.all_models['test'] = {
+    'author': Author,
+    'book': Book,
+}
+apps.app_configs['test'] = type('TestConfig', (), {
+    'name': 'test',
+    'label': 'test',
+    'models': {'Author': Author, 'Book': Book},
+    'models_module': type('ModelsModule', (), {
+        'Author': Author,
+        'Book': Book,
+    })
+})
+
+def test_deserialize_db_from_string():
+    """Test that deserialize_db_from_string handles foreign key constraints correctly"""
+    # Create tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+    # Create test data with Book before Author to test FK constraint handling
+    test_data = '''[
+        {"model": "test.book", "pk": 1, "fields": {"title": "Test Book", "author": 1}},
+        {"model": "test.author", "pk": 1, "fields": {"name": "Test Author"}}
+    ]'''
+
+    # Create a test database creation instance
+    creation = BaseDatabaseCreation(connection)
+
+    # First try without transaction - should fail
+    try:
+        data = StringIO(test_data)
+        for obj in serializers.deserialize("json", data, using=connection.alias):
+            obj.save()
+        print("Error: Expected IntegrityError was not raised!")
+    except Exception as e:
+        print(f"Got expected error: {e}")
+
+    # Now try with transaction - should succeed
+    try:
+        data = StringIO(test_data)
+        with transaction.atomic(using=connection.alias):
+            for obj in serializers.deserialize("json", data, using=connection.alias):
+                obj.save()
+        print("Success: Fixed version handled FK constraints correctly!")
+    except Exception as e:
+        print(f"Error: Fixed version failed: {e}")
+
+if __name__ == '__main__':
+    test_deserialize_db_from_string()
\ No newline at end of file
diff --git a/tests/test_settings.py b/tests/test_settings.py
new file mode 100644
index 0000000000..ab406c2c10
--- /dev/null
+++ b/tests/test_settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'tests.test_creation',
+]
+
+SECRET_KEY = 'test'
\ No newline at end of file
