diff --git a/sympy/utilities/autowrap.py b/sympy/utilities/autowrap.py
index bd6afb12d1..2adb9b489d 100644
--- a/sympy/utilities/autowrap.py
+++ b/sympy/utilities/autowrap.py
@@ -441,9 +441,13 @@ def _prototype_arg(self, arg):
         np_types = {'double': 'np.double_t',
                     'int': 'np.int_t'}
         t = arg.get_datatype('c')
-        if arg.dimensions:
+        if arg.dimensions or getattr(arg, 'is_matrix', False):
             self._need_numpy = True
-            ndim = len(arg.dimensions)
+            if arg.dimensions:
+                ndim = len(arg.dimensions)
+            else:
+                # For MatrixSymbol, get dimensions from the symbol
+                ndim = len(arg.name.shape)
             mtype = np_types[t]
             return mat_dec.format(mtype=mtype, ndim=ndim, name=self._string_var(arg.name))
         else:
@@ -458,7 +462,7 @@ def _declare_arg(self, arg):
             return proto + " = 0"
 
     def _call_arg(self, arg):
-        if arg.dimensions:
+        if arg.dimensions or getattr(arg, 'is_matrix', False):
             t = arg.get_datatype('c')
             return "<{0}*> {1}.data".format(t, self._string_var(arg.name))
         elif isinstance(arg, ResultBase):
diff --git a/sympy/utilities/codegen.py b/sympy/utilities/codegen.py
index f0befb2bd7..4afa8add5f 100644
--- a/sympy/utilities/codegen.py
+++ b/sympy/utilities/codegen.py
@@ -371,7 +371,18 @@ class Argument(Variable):
 
 
 class InputArgument(Argument):
-    pass
+    """An input argument to a routine.
+
+    Attributes
+    ==========
+    name : Symbol, MatrixSymbol
+        The name of the argument.
+    """
+    @property
+    def is_matrix(self):
+        """True if the argument is a matrix."""
+        from sympy.matrices.expressions.matexpr import MatrixSymbol
+        return isinstance(self.name, MatrixSymbol)
 
 
 class ResultBase(object):
@@ -910,7 +921,7 @@ def get_prototype(self, routine):
         type_args = []
         for arg in routine.arguments:
             name = self.printer.doprint(arg.name)
-            if arg.dimensions or isinstance(arg, ResultBase):
+            if arg.dimensions or isinstance(arg, ResultBase) or getattr(arg, 'is_matrix', False):
                 type_args.append((arg.get_datatype('C'), "*%s" % name))
             else:
                 type_args.append((arg.get_datatype('C'), name))
