diff --git a/src/_pytest/_io/saferepr.py b/src/_pytest/_io/saferepr.py
index 23af4d0bb..060dcceef 100644
--- a/src/_pytest/_io/saferepr.py
+++ b/src/_pytest/_io/saferepr.py
@@ -8,19 +8,56 @@ def _try_repr_or_str(obj):
         return repr(obj)
     except (KeyboardInterrupt, SystemExit):
         raise
+    except RuntimeError as exc:
+        if str(exc) == "No active exception to reraise":
+            return "<[RuntimeError: No active exception to reraise] {} object at 0x{:x}>".format(
+                obj.__class__.__name__, id(obj)
+            )
+        return '{}("{}")'.format(type(obj).__name__, obj)
     except BaseException:
         return '{}("{}")'.format(type(obj).__name__, obj)
 
 
+def _safe_getattr(obj: Any, name: str, default: Any = None) -> Any:
+    """Get attribute value without triggering __getattribute__."""
+    try:
+        return object.__getattribute__(obj, name)
+    except Exception:
+        try:
+            return getattr(type(obj), name, default)
+        except Exception:
+            return default
+
+def _safe_type_name(obj: Any) -> str:
+    """Get type name without triggering __getattribute__."""
+    try:
+        return type(obj).__name__
+    except Exception:
+        return "Unknown"
+
+def _safe_id(obj: Any) -> int:
+    """Get object id without triggering __getattribute__."""
+    try:
+        return id(obj)
+    except Exception:
+        return 0
+
 def _format_repr_exception(exc: BaseException, obj: Any) -> str:
     try:
-        exc_info = _try_repr_or_str(exc)
+        if isinstance(exc, RuntimeError):
+            if str(exc) == "No active exception to reraise":
+                exc_info = "RuntimeError: No active exception to reraise"
+            else:
+                exc_info = _try_repr_or_str(exc)
+        else:
+            exc_info = _try_repr_or_str(exc)
     except (KeyboardInterrupt, SystemExit):
         raise
     except BaseException as exc:
         exc_info = "unpresentable exception ({})".format(_try_repr_or_str(exc))
+
     return "<[{} raised in repr()] {} object at 0x{:x}>".format(
-        exc_info, obj.__class__.__name__, id(obj)
+        exc_info, _safe_type_name(obj), _safe_id(obj)
     )
 
 
diff --git a/test_repr_error.py b/test_repr_error.py
new file mode 100644
index 000000000..5a5c1f133
--- /dev/null
+++ b/test_repr_error.py
@@ -0,0 +1,29 @@
+class SomeClass:
+    def __getattribute__(self, attr):
+        raise RuntimeError("Error in __getattribute__")
+    def __repr__(self):
+        raise RuntimeError("Error in __repr__")
+
+class WeirdClass:
+    def __getattribute__(self, attr):
+        raise
+    def __repr__(self):
+        raise
+
+class EvilClass:
+    def __getattribute__(self, attr):
+        raise KeyboardInterrupt()
+    def __repr__(self):
+        raise SystemExit()
+
+def test_normal():
+    SomeClass().attr
+
+def test_bare_raise():
+    WeirdClass().attr
+
+def test_special_exceptions():
+    try:
+        EvilClass().attr
+    except (KeyboardInterrupt, SystemExit):
+        pass  # Expected
\ No newline at end of file
