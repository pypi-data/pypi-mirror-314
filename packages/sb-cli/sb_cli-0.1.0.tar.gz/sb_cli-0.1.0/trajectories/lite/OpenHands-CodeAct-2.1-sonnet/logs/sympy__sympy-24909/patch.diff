diff --git a/reproduce_milli_bug.py b/reproduce_milli_bug.py
new file mode 100644
index 0000000000..36bbeac560
--- /dev/null
+++ b/reproduce_milli_bug.py
@@ -0,0 +1,19 @@
+from sympy.physics.units import milli, W, kilo, V
+
+print("Testing milli*W:")
+result = milli*W
+print(f"milli*W = {result}")
+print(f"milli*W == 1: {result == 1}")
+print(f"Type: {type(result)}")
+
+print("\nTesting W*milli:")
+result2 = W*milli
+print(f"W*milli = {result2}")
+print(f"W*milli == 1: {result2 == 1}")
+print(f"Type: {type(result2)}")
+
+print("\nTesting with other units:")
+print(f"milli*V = {milli*V}")
+print(f"kilo*W = {kilo*W}")
+print(f"Type of milli*V: {type(milli*V)}")
+print(f"Type of kilo*W: {type(kilo*W)}")
\ No newline at end of file
diff --git a/sympy/physics/units/prefixes.py b/sympy/physics/units/prefixes.py
index ca6a642156..446f3b9142 100644
--- a/sympy/physics/units/prefixes.py
+++ b/sympy/physics/units/prefixes.py
@@ -85,14 +85,24 @@ def __mul__(self, other):
 
         fact = self.scale_factor * other.scale_factor
 
-        if fact == 1:
-            return 1
-        elif isinstance(other, Prefix):
+        if isinstance(other, Prefix):
             # simplify prefix
             for p in PREFIXES:
                 if PREFIXES[p].scale_factor == fact:
                     return PREFIXES[p]
             return fact
+        elif isinstance(other, Quantity):
+            # Create a new prefixed quantity
+            from sympy.physics.units import UnitSystem
+            quantity = Quantity(
+                f"{self.name}{other.name}",
+                abbrev=f"{self.abbrev}{other.abbrev}",
+                is_prefixed=True,
+            )
+            # Set the scale factor and dimensional equivalence
+            UnitSystem._quantity_dimensional_equivalence_map_global[quantity] = other
+            UnitSystem._quantity_scale_factors_global[quantity] = (self.scale_factor, other)
+            return quantity
 
         return self.scale_factor * other
 
@@ -119,6 +129,12 @@ def __rtruediv__(self, other):
                     return PREFIXES[p]
         return other / self.scale_factor
 
+    def __rmul__(self, other):
+        from sympy.physics.units import Quantity
+        if isinstance(other, Quantity):
+            return self * other
+        return other * self.scale_factor
+
 
 def prefix_unit(unit, prefixes):
     """
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..608b90e74b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,21 @@
+from sympy.physics.units import milli, W, kilo, V, mega, micro, A
+
+# Test different prefixes
+print("Testing different prefixes:")
+print(f"mega*W = {mega*W}")
+print(f"micro*A = {micro*A}")
+
+# Test prefix combinations
+print("\nTesting prefix combinations:")
+print(f"kilo*(milli*W) = {kilo*(milli*W)}")
+print(f"(kilo*milli)*W = {(kilo*milli)*W}")
+
+# Test with non-unit multiplication
+print("\nTesting with non-unit multiplication:")
+print(f"2*milli*W = {2*milli*W}")
+print(f"milli*W*2 = {milli*W*2}")
+
+# Test division
+print("\nTesting division:")
+print(f"(kilo*W)/milli = {(kilo*W)/milli}")
+print(f"W/(milli*A) = {W/(milli*A)}")
\ No newline at end of file
