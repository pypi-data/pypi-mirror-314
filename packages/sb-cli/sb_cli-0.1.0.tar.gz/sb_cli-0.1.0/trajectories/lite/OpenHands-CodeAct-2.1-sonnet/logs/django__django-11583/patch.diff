diff --git a/django/utils/autoreload.py b/django/utils/autoreload.py
index 25c3b44250..18903be808 100644
--- a/django/utils/autoreload.py
+++ b/django/utils/autoreload.py
@@ -138,10 +138,14 @@ def iter_modules_and_files(modules, extra_files):
             continue
         path = Path(filename)
         try:
+            # Check for null bytes in the path string
+            if '\x00' in str(path):
+                logger.warning('Skipping path with null byte: %s', path)
+                continue
             resolved_path = path.resolve(strict=True).absolute()
-        except FileNotFoundError:
-            # The module could have been removed, don't fail loudly if this
-            # is the case.
+        except (FileNotFoundError, ValueError):
+            # The module could have been removed or the path could be invalid,
+            # don't fail loudly if this is the case.
             continue
         results.add(resolved_path)
     return frozenset(results)
@@ -186,8 +190,12 @@ def sys_path_directories():
     for path in sys.path:
         path = Path(path)
         try:
+            # Check for null bytes in the path string
+            if '\x00' in str(path):
+                logger.warning('Skipping path with null byte: %s', path)
+                continue
             resolved_path = path.resolve(strict=True).absolute()
-        except FileNotFoundError:
+        except (FileNotFoundError, ValueError):
             continue
         # If the path is a file (like a zip file), watch the parent directory.
         if resolved_path.is_file():
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..ca438ad310
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,14 @@
+import os
+import sys
+from pathlib import Path
+
+# Create a path with a null byte
+bad_path = b'/Users/test\x00something'.decode('utf-8')
+path = Path(bad_path)
+
+try:
+    # This should raise the ValueError
+    resolved = path.resolve(strict=True).absolute()
+except ValueError as e:
+    print(f"Got expected error: {e}")
+    sys.exit(1)
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 0000000000..19fa86453c
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,17 @@
+import os
+import sys
+import logging
+from pathlib import Path
+from django.utils.autoreload import iter_modules_and_files
+
+# Set up logging to see the warnings
+logging.basicConfig(level=logging.WARNING)
+
+# Create a mix of good and bad paths
+good_path = Path(__file__).parent
+bad_path = Path(b'/Users/test\x00something'.decode('utf-8'))
+
+# Test the iter_modules_and_files function
+paths = iter_modules_and_files(tuple([sys.modules[__name__]]), frozenset({good_path, bad_path}))
+print("Successfully processed paths:", paths)
+print("Test passed - no ValueError raised")
\ No newline at end of file
