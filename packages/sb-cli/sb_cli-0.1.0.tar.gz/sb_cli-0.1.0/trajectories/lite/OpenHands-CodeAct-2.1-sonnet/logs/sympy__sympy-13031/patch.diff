diff --git a/reproduce_hstack.py b/reproduce_hstack.py
new file mode 100644
index 0000000000..855b115a2f
--- /dev/null
+++ b/reproduce_hstack.py
@@ -0,0 +1,26 @@
+import sympy as sy
+
+def test_hstack_empty_rows():
+    # Test case 1: All matrices have 0 rows
+    M1 = sy.Matrix.zeros(0, 0)
+    M2 = sy.Matrix.zeros(0, 1)
+    M3 = sy.Matrix.zeros(0, 2)
+    M4 = sy.Matrix.zeros(0, 3)
+    result = sy.Matrix.hstack(M1, M2, M3, M4)
+    print("Test case 1 (0 rows):")
+    print(f"Result shape: {result.shape}")
+    print(f"Expected: (0, 6)")
+    print()
+
+    # Test case 2: Matrices have 1 row
+    M1 = sy.Matrix.zeros(1, 0)
+    M2 = sy.Matrix.zeros(1, 1)
+    M3 = sy.Matrix.zeros(1, 2)
+    M4 = sy.Matrix.zeros(1, 3)
+    result = sy.Matrix.hstack(M1, M2, M3, M4)
+    print("Test case 2 (1 row):")
+    print(f"Result shape: {result.shape}")
+    print(f"Expected: (1, 6)")
+
+if __name__ == "__main__":
+    test_hstack_empty_rows()
\ No newline at end of file
diff --git a/sympy/matrices/common.py b/sympy/matrices/common.py
index 7ef51bc847..8f6336a465 100644
--- a/sympy/matrices/common.py
+++ b/sympy/matrices/common.py
@@ -475,13 +475,20 @@ def row_join(self, other):
         row
         col_join
         """
-        # A null matrix can always be stacked (see  #10770)
-        if self.cols == 0 and self.rows != other.rows:
-            return self._new(other.rows, 0, []).row_join(other)
+        # Handle empty matrices
+        if self.cols == 0:
+            if self.rows == 0:
+                # If self is 0x0, use other's rows
+                return other
+            else:
+                # If self is nx0, ensure other has n rows
+                if self.rows != other.rows:
+                    raise ShapeError("`self` and `rhs` must have the same number of rows.")
+                return other
 
+        # For non-empty matrices, rows must match
         if self.rows != other.rows:
-            raise ShapeError(
-                "`self` and `rhs` must have the same number of rows.")
+            raise ShapeError("`self` and `rhs` must have the same number of rows.")
         return self._eval_row_join(other)
 
     def row(self, i):
