diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 000000000..df8523836
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,47 @@
+from sklearn.metrics.cluster import mutual_info_score
+import numpy as np
+
+print("Test 1: Mixed string types")
+x = np.array(['a', 'b', 'c', 'd']).astype(object)
+y = np.array(['a', 'b', 'c', 'd'])
+try:
+    result = mutual_info_score(x, y)
+    print("Success:", result)
+except Exception as e:
+    print("Error:", str(e))
+
+print("\nTest 2: Empty arrays")
+x = np.array([]).astype(object)
+y = np.array([])
+try:
+    result = mutual_info_score(x, y)
+    print("Success:", result)
+except Exception as e:
+    print("Error:", str(e))
+
+print("\nTest 3: Single element arrays")
+x = np.array(['a']).astype(object)
+y = np.array(['a'])
+try:
+    result = mutual_info_score(x, y)
+    print("Success:", result)
+except Exception as e:
+    print("Error:", str(e))
+
+print("\nTest 4: Different string values")
+x = np.array(['x', 'y', 'z']).astype(object)
+y = np.array(['a', 'b', 'c'])
+try:
+    result = mutual_info_score(x, y)
+    print("Success:", result)
+except Exception as e:
+    print("Error:", str(e))
+
+print("\nTest 5: Unicode strings")
+x = np.array(['é', 'ñ', 'ü']).astype(object)
+y = np.array(['é', 'ñ', 'ü'])
+try:
+    result = mutual_info_score(x, y)
+    print("Success:", result)
+except Exception as e:
+    print("Error:", str(e))
\ No newline at end of file
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..4d730cc18
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,18 @@
+from sklearn.metrics.cluster import mutual_info_score
+import numpy as np
+
+print("Test 1: With astype(object)")
+x = np.random.choice(['a', 'b'], size=20).astype(object)
+try:
+    result = mutual_info_score(x, x)
+    print("Success:", result)
+except ValueError as e:
+    print("Error:", str(e))
+
+print("\nTest 2: Without astype(object)")
+x = np.random.choice(['a', 'b'], size=20)
+try:
+    result = mutual_info_score(x, x)
+    print("Success:", result)
+except ValueError as e:
+    print("Error:", str(e))
\ No newline at end of file
diff --git a/sklearn/metrics/cluster/_supervised.py b/sklearn/metrics/cluster/_supervised.py
index 4bddae35c..869237f56 100644
--- a/sklearn/metrics/cluster/_supervised.py
+++ b/sklearn/metrics/cluster/_supervised.py
@@ -43,10 +43,10 @@ def check_clusterings(labels_true, labels_pred):
         The predicted labels.
     """
     labels_true = check_array(
-        labels_true, ensure_2d=False, ensure_min_samples=0
+        labels_true, ensure_2d=False, ensure_min_samples=0, dtype=None
     )
     labels_pred = check_array(
-        labels_pred, ensure_2d=False, ensure_min_samples=0
+        labels_pred, ensure_2d=False, ensure_min_samples=0, dtype=None
     )
 
     # input checks
diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py
index dad56850f..faae4dce9 100644
--- a/sklearn/utils/validation.py
+++ b/sklearn/utils/validation.py
@@ -551,7 +551,11 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,
 
         # make sure we actually converted to numeric:
         if dtype_numeric and array.dtype.kind == "O":
-            array = array.astype(np.float64)
+            try:
+                array = array.astype(np.float64)
+            except (TypeError, ValueError):
+                # If conversion to float64 fails, keep the object array
+                pass
         if not allow_nd and array.ndim >= 3:
             raise ValueError("Found array with dim %d. %s expected <= 2."
                              % (array.ndim, estimator_name))
