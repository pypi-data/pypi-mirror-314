diff --git a/repro/pmxbot-logging/pmxbot/store.py b/repro/pmxbot-logging/pmxbot/store.py
new file mode 100644
index 000000000..1349a9920
--- /dev/null
+++ b/repro/pmxbot-logging/pmxbot/store.py
@@ -0,0 +1,13 @@
+"""
+Module to hold the global store instance.
+This module is imported by both logging.py and core.py to ensure they share the same store.
+"""
+
+_STORE = None
+
+def get_store():
+    return _STORE
+
+def set_store(store):
+    global _STORE
+    _STORE = store
\ No newline at end of file
diff --git a/repro/pmxbot/__init__.py b/repro/pmxbot/__init__.py
new file mode 100644
index 000000000..dc494e4ae
--- /dev/null
+++ b/repro/pmxbot/__init__.py
@@ -0,0 +1 @@
+# Package initialization
\ No newline at end of file
diff --git a/repro/pmxbot/core/__init__.py b/repro/pmxbot/core/__init__.py
new file mode 100644
index 000000000..05b3901e9
--- /dev/null
+++ b/repro/pmxbot/core/__init__.py
@@ -0,0 +1,6 @@
+from pmxbot import logging
+
+def initialize(config):
+    store = logging.Store()
+    logging.Logger.set_store(store)
+    return store
\ No newline at end of file
diff --git a/repro/pmxbot/logging/__init__.py b/repro/pmxbot/logging/__init__.py
new file mode 100644
index 000000000..26a065025
--- /dev/null
+++ b/repro/pmxbot/logging/__init__.py
@@ -0,0 +1,22 @@
+import sys
+
+# Module-level store instance
+_STORE = None
+
+class Store:
+    def __init__(self):
+        self.initialized = True
+        
+    def message(self, type, sender, text):
+        print(f"Storing message: {type} from {sender}: {text}")
+
+class Logger:
+    @classmethod
+    def set_store(cls, store_instance):
+        global _STORE
+        _STORE = store_instance
+    
+    @classmethod
+    @property
+    def store(cls):
+        return _STORE
\ No newline at end of file
diff --git a/repro/pmxbot/tests/__init__.py b/repro/pmxbot/tests/__init__.py
new file mode 100644
index 000000000..3a123698b
--- /dev/null
+++ b/repro/pmxbot/tests/__init__.py
@@ -0,0 +1 @@
+# Tests package initialization
\ No newline at end of file
diff --git a/repro/pmxbot/tests/conftest.py b/repro/pmxbot/tests/conftest.py
new file mode 100644
index 000000000..08d0f0b66
--- /dev/null
+++ b/repro/pmxbot/tests/conftest.py
@@ -0,0 +1,12 @@
+import pytest
+import sys
+
+def pytest_configure(config):
+    # Force importlib mode
+    config.option.importmode = "importlib"
+    
+    # Add debug info
+    print("\nInitial sys.modules state:")
+    for name, module in sys.modules.items():
+        if name.startswith('pmxbot'):
+            print(f"{name}: {id(module)}")
\ No newline at end of file
diff --git a/repro/pmxbot/tests/unit/__init__.py b/repro/pmxbot/tests/unit/__init__.py
new file mode 100644
index 000000000..b129a9aab
--- /dev/null
+++ b/repro/pmxbot/tests/unit/__init__.py
@@ -0,0 +1 @@
+# Unit tests package initialization
\ No newline at end of file
diff --git a/repro/pmxbot/tests/unit/test_commands.py b/repro/pmxbot/tests/unit/test_commands.py
new file mode 100644
index 000000000..4e135271c
--- /dev/null
+++ b/repro/pmxbot/tests/unit/test_commands.py
@@ -0,0 +1,12 @@
+import os
+import sys
+from pmxbot import core
+from pmxbot import logging
+
+def test_logging_store():
+    # Initialize the store
+    bot = core.initialize({})
+    assert logging.Logger.store is not None
+    
+    # Try to use the store
+    logging.Logger.store.message("logged", "testrunner", "some text")
\ No newline at end of file
diff --git a/repro/reproduce.py b/repro/reproduce.py
new file mode 100644
index 000000000..757d6e7c1
--- /dev/null
+++ b/repro/reproduce.py
@@ -0,0 +1,14 @@
+import pytest
+import sys
+import os
+
+# Add the parent directory to sys.path
+repo_dir = os.path.dirname(os.path.abspath(__file__))
+sys.path.append(repo_dir)
+
+print("Python paths:")
+for p in sys.path:
+    print(f"  {p}")
+
+# Run the test with import-mode=importlib
+pytest.main(["-v", "--import-mode=importlib", "pmxbot/tests/unit/test_commands.py"])
\ No newline at end of file
