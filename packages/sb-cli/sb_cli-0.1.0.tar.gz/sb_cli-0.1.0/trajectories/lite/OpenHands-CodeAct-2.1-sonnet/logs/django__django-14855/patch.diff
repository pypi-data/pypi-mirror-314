diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index dd154f72ee..8d5d57228e 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -209,7 +209,11 @@ class AdminReadonlyField:
             remote_field.model._meta.model_name,
         )
         try:
-            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            url = reverse(
+                url_name,
+                args=[quote(remote_obj.pk)],
+                current_app=self.model_admin.admin_site.name if self.model_admin and hasattr(self.model_admin, 'admin_site') else None
+            )
             return format_html('<a href="{}">{}</a>', url, remote_obj)
         except NoReverseMatch:
             return str(remote_obj)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..1919ef2d01
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,131 @@
+from django.conf import settings
+from django.contrib import admin
+from django.contrib.admin import AdminSite
+from django.contrib.admin.utils import quote
+from django.db import models
+from django.test import RequestFactory
+from django.contrib.admin.helpers import AdminReadonlyField
+from django.forms import ModelForm
+from django.urls import reverse
+
+# Create a custom admin site
+class CustomAdminSite(AdminSite):
+    site_url = '/custom-admin/'
+    name = 'custom_admin'
+
+# Create a middleware to set current_app
+class AdminSiteMiddleware:
+    def __init__(self, get_response):
+        self.get_response = get_response
+
+    def __call__(self, request):
+        if request.path.startswith('/custom-admin/'):
+            request.current_app = custom_admin_site.name
+        return self.get_response(request)
+
+# Configure Django settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.admin', 'django.contrib.contenttypes', 'django.contrib.auth'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    ROOT_URLCONF='urlconf_module',
+    SECRET_KEY='dummy-key-for-test',
+    MIDDLEWARE=['urlconf_module.AdminSiteMiddleware']
+)
+
+import django
+django.setup()
+
+# Create test models with explicit app_label
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    class Meta:
+        app_label = 'admin'  # Use admin app_label to avoid app registration
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'admin'  # Use admin app_label to avoid app registration
+
+# Create URL patterns module
+import sys
+from django.urls import path
+
+# Create a single instance of the custom admin site
+custom_admin_site = CustomAdminSite()
+
+# Create model admin
+class BookAdmin(admin.ModelAdmin):
+    readonly_fields = ('author',)
+
+# Register models with both admin sites
+admin.site.register(Author)
+admin.site.register(Book)
+custom_admin_site.register(Author)
+custom_admin_site.register(Book, BookAdmin)
+
+# Create URL patterns
+urlpatterns = [
+    path('admin/', admin.site.urls, name='admin'),  # Default admin site comes first
+    path('custom-admin/', custom_admin_site.urls, name='custom_admin'),  # Custom admin site comes second
+]
+
+# Create a module for URL patterns
+class URLPatternsModule:
+    pass
+module = URLPatternsModule()
+module.urlpatterns = urlpatterns
+sys.modules['urlconf_module'] = module
+
+# Create a form
+class BookForm(ModelForm):
+    class Meta:
+        model = Book
+        fields = ['title', 'author']
+
+# Get the registered admin
+book_admin = custom_admin_site._registry[Book]
+
+# Create test objects
+author = Author(id=1, name='Test Author')
+book = Book(id=1, title='Test Book', author=author)
+
+# Create a request
+factory = RequestFactory()
+request = factory.get('/custom-admin/admin/book/1/change/')
+
+# Create the admin form
+form = BookForm(instance=book)
+form._meta.model = Book  # Needed for AdminReadonlyField
+
+# Create the readonly field
+readonly_field = AdminReadonlyField(form, 'author', is_first=True, model_admin=book_admin)
+
+# Print URLs with different current_app values
+url_name = 'admin:admin_author_change'  # Fixed URL name for admin app_label
+
+# Create requests for different URLs
+default_request = factory.get('/admin/admin/book/1/change/')
+custom_request = factory.get('/custom-admin/admin/book/1/change/')
+
+# Apply middleware
+middleware = AdminSiteMiddleware(lambda r: r)
+middleware(custom_request)
+
+# 1. Default admin site URL
+print("\nTest 1: Default admin site URL")
+print("URL:", reverse(url_name, args=[quote(author.pk)], current_app=default_request.current_app if hasattr(default_request, 'current_app') else None))
+
+# 2. Custom admin site URL
+print("\nTest 2: Custom admin site URL")
+print("URL:", reverse(url_name, args=[quote(author.pk)], current_app=custom_request.current_app if hasattr(custom_request, 'current_app') else None))
+
+# 3. AdminReadonlyField without current_app (old code)
+print("\nTest 3: AdminReadonlyField without current_app (old code)")
+readonly_field.model_admin = None  # Simulate old code without model_admin
+print("URL:", readonly_field.get_admin_url(book._meta.get_field('author').remote_field, author))
+
+# 4. AdminReadonlyField with current_app (our fix)
+print("\nTest 4: AdminReadonlyField with current_app (our fix)")
+readonly_field.model_admin = book_admin  # Use custom admin site
+print("URL:", readonly_field.get_admin_url(book._meta.get_field('author').remote_field, author))
\ No newline at end of file
