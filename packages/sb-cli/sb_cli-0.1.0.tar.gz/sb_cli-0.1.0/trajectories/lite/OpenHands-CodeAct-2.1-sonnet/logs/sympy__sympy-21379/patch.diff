diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..f54c0b8ec8
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,36 @@
+from sympy import *
+from sympy.core.cache import clear_cache
+
+def test_case(expr, msg=""):
+    print(f"\nTesting {msg}:")
+    try:
+        result = expr.subs({1: 1.0})
+        print("Success! Result:", result)
+    except Exception as e:
+        print("Error:", str(e))
+
+# Test 1: Nested Piecewise
+clear_cache()
+x, y, z = symbols('x y z', real=True)
+expr = exp(sinh(Piecewise((x, y > x), (Piecewise((y, z > 0), (z, True)), True)) / z))
+test_case(expr, "nested Piecewise")
+
+# Test 2: Multiple Piecewise terms
+clear_cache()
+expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z + Piecewise((x, z > 0), (y, True))))
+test_case(expr, "multiple Piecewise terms")
+
+# Test 3: Piecewise in numerator and denominator
+clear_cache()
+expr = exp(sinh(Piecewise((x, y > x), (y, True)) / Piecewise((z, z > 0), (1, True))))
+test_case(expr, "Piecewise in numerator and denominator")
+
+# Test 4: Complex expressions with Piecewise
+clear_cache()
+expr = exp(sinh(Piecewise((x**2 + y, y > x), (y - x, True)) / z))
+test_case(expr, "complex expressions with Piecewise")
+
+# Test 5: Piecewise with boolean combinations
+clear_cache()
+expr = exp(sinh(Piecewise((x, (y > x) & (z > 0)), (y, True)) / z))
+test_case(expr, "Piecewise with boolean combinations")
\ No newline at end of file
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6e30b1c269
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,54 @@
+from sympy import *
+from sympy.core.cache import clear_cache
+
+def test_case(real_symbols=False):
+    clear_cache()
+    if real_symbols:
+        x, y, z = symbols('x y z', real=True)
+    else:
+        x, y, z = symbols('x y z')
+    
+    expr = exp(sinh(Piecewise((x, y > x), (y, True)) / z))
+    print(f"\nTesting with real_symbols={real_symbols}:")
+    try:
+        result = expr.subs({1: 1.0})
+        print("Success! Result:", result)
+    except Exception as e:
+        print("Error:", str(e))
+
+print("Test 1: Without real symbols")
+test_case(real_symbols=False)
+
+print("\nTest 2: With real symbols")
+test_case(real_symbols=True)
+
+# Additional test cases to verify the PR description claims
+print("\nTest 3: With cosh instead of sinh")
+clear_cache()
+x, y, z = symbols('x y z', real=True)
+expr = exp(cosh(Piecewise((x, y > x), (y, True)) / z))
+try:
+    result = expr.subs({1: 1.0})
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error:", str(e))
+
+print("\nTest 4: Without division by z")
+clear_cache()
+x, y, z = symbols('x y z', real=True)
+expr = exp(sinh(Piecewise((x, y > x), (y, True))))
+try:
+    result = expr.subs({1: 1.0})
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error:", str(e))
+
+print("\nTest 5: Without exp")
+clear_cache()
+x, y, z = symbols('x y z', real=True)
+expr = sinh(Piecewise((x, y > x), (y, True)) / z)
+try:
+    result = expr.subs({1: 1.0})
+    print("Success! Result:", result)
+except Exception as e:
+    print("Error:", str(e))
\ No newline at end of file
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index bfec61de64..18751d2810 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -4396,7 +4396,8 @@ def _parallel_poly_from_expr(exprs, opt):
 
     for k in opt.gens:
         if isinstance(k, Piecewise):
-            raise PolynomialError("Piecewise generators do not make sense")
+            # Skip Piecewise terms in polynomial conversion
+            continue
 
     coeffs_list, lengths = [], []
 
diff --git a/sympy/polys/polyutils.py b/sympy/polys/polyutils.py
index f51f80098d..d74156d8b0 100644
--- a/sympy/polys/polyutils.py
+++ b/sympy/polys/polyutils.py
@@ -208,6 +208,11 @@ def _parallel_dict_from_expr_if_gens(exprs, opt):
                         else:
                             base, exp = decompose_power_rat(factor)
 
+                        # Skip Piecewise terms in polynomial conversion
+                        if base.has(Piecewise):
+                            coeff.append(factor)
+                            continue
+
                         monom[indices[base]] = exp
                     except KeyError:
                         if not factor.free_symbols.intersection(opt.gens):
@@ -241,7 +246,7 @@ def _is_coeff(factor):
             return factor is S.ImaginaryUnit
     else:
         def _is_coeff(factor):
-            return factor.is_number
+            return factor.is_number or factor.has(Piecewise)
 
     gens, reprs = set(), []
