diff --git a/sympy/physics/units/util.py b/sympy/physics/units/util.py
index b03ed4cd88..2b3ac38b05 100644
--- a/sympy/physics/units/util.py
+++ b/sympy/physics/units/util.py
@@ -18,6 +18,17 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):
     expr_dim = Dimension(unit_system.get_dimensional_expr(expr))
     dim_dependencies = dimension_system.get_dimensional_dependencies(expr_dim, mark_dimensionless=True)
     target_dims = [Dimension(unit_system.get_dimensional_expr(x)) for x in target_units]
+    
+    # Check if target units can represent the source dimensions
+    target_dim_combined = Dimension(1)
+    for dim, exp in zip(target_dims, [1]*len(target_dims)):
+        target_dim_combined *= dim**exp
+    target_dependencies = dimension_system.get_dimensional_dependencies(target_dim_combined, mark_dimensionless=True)
+    
+    # If the target units can't represent all dimensions in the expression, return None
+    if set(dim_dependencies.keys()) != set(target_dependencies.keys()):
+        return None
+    
     canon_dim_units = [i for x in target_dims for i in dimension_system.get_dimensional_dependencies(x, mark_dimensionless=True)]
     canon_expr_units = {i for i in dim_dependencies}
 
@@ -30,8 +41,21 @@ def _get_conversion_matrix_for_expr(expr, target_units, unit_system):
     camat = Matrix([[dimension_system.get_dimensional_dependencies(i, mark_dimensionless=True).get(j, 0) for i in target_dims] for j in canon_dim_units])
     exprmat = Matrix([dim_dependencies.get(k, 0) for k in canon_dim_units])
 
-    res_exponents = camat.solve_least_squares(exprmat, method=None)
-    return res_exponents
+    try:
+        res_exponents = camat.solve_least_squares(exprmat, method=None)
+        # Verify that the solution actually works
+        result = Matrix([[0]*1 for _ in range(len(canon_dim_units))])
+        for i, exp in enumerate(res_exponents):
+            for j, unit in enumerate(canon_dim_units):
+                result[j, 0] += camat[j, i] * exp
+        
+        # Check if the solution matches the original dimensions
+        if any(abs(result[i, 0] - exprmat[i, 0]) > 1e-10 for i in range(len(canon_dim_units))):
+            return None
+            
+        return res_exponents
+    except:
+        return None
 
 
 def convert_to(expr, target_units, unit_system="SI"):
