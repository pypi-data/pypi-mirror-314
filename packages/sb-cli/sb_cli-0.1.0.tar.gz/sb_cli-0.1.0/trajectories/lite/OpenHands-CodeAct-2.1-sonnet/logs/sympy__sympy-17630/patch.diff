diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..3280d52de8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,16 @@
+from sympy import MatrixSymbol, ZeroMatrix, BlockMatrix, block_collapse
+
+# Create the matrices
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+b = BlockMatrix([[a, z], [z, z]])
+
+# Test single multiplication
+print("Testing single multiplication:")
+print(block_collapse(b * b))
+print(b._blockmul(b))
+
+# Test double multiplication
+print("\nTesting double multiplication:")
+print(block_collapse(b * b * b))
+print(b._blockmul(b)._blockmul(b))
\ No newline at end of file
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..4ede0edefc 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -164,7 +164,39 @@ def structurally_equal(self, other):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            # Get the block dimensions
+            rows = self.blockshape[0]
+            cols = other.blockshape[1]
+            inner = self.blockshape[1]
+            
+            # Create result blocks
+            from sympy.matrices.immutable import ImmutableDenseMatrix
+            blocks = []
+            for i in range(rows):
+                row = []
+                for j in range(cols):
+                    # Calculate each block
+                    block = None
+                    block_rows = self.blocks[i,0].rows
+                    block_cols = other.blocks[0,j].cols
+                    for k in range(inner):
+                        term = self.blocks[i,k] * other.blocks[k,j]
+                        # Convert Zero to ZeroMatrix with proper dimensions
+                        if term == 0 or getattr(term, 'is_zero', False):
+                            term = ZeroMatrix(block_rows, block_cols)
+                        if block is None:
+                            block = term
+                        else:
+                            # If either term is zero, use the non-zero term
+                            if getattr(block, 'is_zero', False):
+                                block = term
+                            elif getattr(term, 'is_zero', False):
+                                continue
+                            else:
+                                block = block + term
+                    row.append(block)
+                blocks.append(row)
+            return BlockMatrix(ImmutableDenseMatrix(blocks))
 
         return self * other
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..3719576dad
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,21 @@
+from sympy import MatrixSymbol, ZeroMatrix, BlockMatrix, block_collapse, Identity
+
+print("Test 1: Different sized blocks")
+a = MatrixSymbol("a", 3, 2)
+b = MatrixSymbol("b", 2, 3)
+z1 = ZeroMatrix(3, 3)
+z2 = ZeroMatrix(2, 2)
+block1 = BlockMatrix([[a, z1], [z2, b]])
+print(block_collapse(block1 * block1))
+
+print("\nTest 2: Identity blocks")
+i = Identity(2)
+block2 = BlockMatrix([[i, z2], [z2, i]])
+print(block_collapse(block2 * block2))
+print(block_collapse(block2 * block2 * block2))
+
+print("\nTest 3: All zero blocks except one")
+a = MatrixSymbol("a", 2, 2)  # Redefine a to be 2x2
+z3 = ZeroMatrix(2, 2)
+block3 = BlockMatrix([[z3, a], [z3, z3]])
+print(block_collapse(block3 * block3))
\ No newline at end of file
