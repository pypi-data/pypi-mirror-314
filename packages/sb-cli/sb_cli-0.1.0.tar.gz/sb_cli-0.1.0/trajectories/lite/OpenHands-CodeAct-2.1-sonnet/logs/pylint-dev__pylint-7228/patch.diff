diff --git a/pylint/config/argument.py b/pylint/config/argument.py
index 3c2951517..06d8a91d1 100644
--- a/pylint/config/argument.py
+++ b/pylint/config/argument.py
@@ -17,6 +17,11 @@ import sys
 from collections.abc import Callable
 from typing import Any, Pattern, Sequence, Tuple, Union
 
+try:
+    import regex
+except ImportError:
+    pass  # regex module is optional
+
 from pylint import interfaces
 from pylint import utils as pylint_utils
 from pylint.config.callback_actions import _CallbackAction, _ExtendAction
@@ -101,10 +106,22 @@ def _py_version_transformer(value: str) -> tuple[int, ...]:
 
 def _regexp_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
     """Transforms a comma separated list of regular expressions."""
-    patterns: list[Pattern[str]] = []
-    for pattern in _csv_transformer(value):
-        patterns.append(re.compile(pattern))
-    return patterns
+    try:
+        patterns: list[Pattern[str]] = []
+        for pattern in _csv_transformer(value):
+            try:
+                patterns.append(re.compile(pattern))
+            except re.error:
+                # If re.compile fails, try using the regex module which supports Unicode properties
+                import regex
+                patterns.append(regex.compile(pattern))
+        return patterns
+    except ImportError:
+        # If regex module is not available, fall back to re
+        patterns = []
+        for pattern in _csv_transformer(value):
+            patterns.append(re.compile(pattern))
+        return patterns
 
 
 def _regexp_paths_csv_transfomer(value: str) -> Sequence[Pattern[str]]:
@@ -130,7 +147,11 @@ _TYPE_TRANSFORMERS: dict[str, Callable[[str], _ArgumentTypes]] = {
     "non_empty_string": _non_empty_string_transformer,
     "path": _path_transformer,
     "py_version": _py_version_transformer,
-    "regexp": re.compile,
+    "regexp": lambda pattern: (
+        re.compile(pattern) if not any(x in pattern for x in [r"\p{", r"\P{"])
+        else regex.compile(pattern) if "regex" in globals()
+        else re.compile(pattern)
+    ),
     "regexp_csv": _regexp_csv_transfomer,
     "regexp_paths_csv": _regexp_paths_csv_transfomer,
     "string": pylint_utils._unquote,
diff --git a/pyproject.toml b/pyproject.toml
index b5ed6a13b..c968fb44c 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -50,6 +50,7 @@ dynamic = ["version"]
 [project.optional-dependencies]
 testutils = ["gitpython>3"]
 spelling = ["pyenchant~=3.2"]
+unicode = ["regex>=2024.9.11"]
 
 [project.urls]
 "Docs: User Guide"  = "https://pylint.pycqa.org/en/latest/"
diff --git a/test_regex/pylintrc b/test_regex/pylintrc
new file mode 100644
index 000000000..e494b5132
--- /dev/null
+++ b/test_regex/pylintrc
@@ -0,0 +1,2 @@
+[BASIC]
+function-rgx=(?:[\p{Han}\p{InvalidProperty}][_\p{Han}\p{Latin}0-9]*|__[a-z]+__)$
\ No newline at end of file
diff --git a/test_regex/test.py b/test_regex/test.py
new file mode 100644
index 000000000..de6f4f294
--- /dev/null
+++ b/test_regex/test.py
@@ -0,0 +1,14 @@
+def 你好_world():
+    pass
+
+def __init__():
+    pass
+
+def 测试123():
+    pass
+
+def hello_世界():
+    pass
+
+def __special__():
+    pass
\ No newline at end of file
