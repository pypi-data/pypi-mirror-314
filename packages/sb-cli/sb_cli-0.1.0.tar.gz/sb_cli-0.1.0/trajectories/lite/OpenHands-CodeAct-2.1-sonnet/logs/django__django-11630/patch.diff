diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 5c2266ca1d..9938854897 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -4,6 +4,7 @@ from collections import defaultdict
 from itertools import chain
 
 from django.apps import apps
+from django.db import router
 from django.core.checks import Error, Tags, register
 
 
@@ -37,14 +38,25 @@ def check_all_models(app_configs=None, **kwargs):
             constraints[model_constraint.name].append(model._meta.label)
     for db_table, model_labels in db_table_models.items():
         if len(model_labels) != 1:
-            errors.append(
-                Error(
-                    "db_table '%s' is used by multiple models: %s."
-                    % (db_table, ', '.join(db_table_models[db_table])),
-                    obj=db_table,
-                    id='models.E028',
-                )
-            )
+            # Group models by their database
+            db_groups = defaultdict(list)
+            for label in model_labels:
+                app_label, model_name = label.split('.')
+                model = apps.get_model(app_label, model_name)
+                db = router.db_for_write(model)
+                db_groups[db].append(label)
+            
+            # Only raise error if multiple models share same table in same database
+            for db, labels in db_groups.items():
+                if len(labels) > 1:
+                    errors.append(
+                        Error(
+                            "db_table '%s' is used by multiple models in database '%s': %s."
+                            % (db_table, db, ', '.join(labels)),
+                            obj=db_table,
+                            id='models.E028',
+                        )
+                    )
     for index_name, model_labels in indexes.items():
         if len(model_labels) > 1:
             model_labels = set(model_labels)
diff --git a/django/core/checks/model_checks.py.patch b/django/core/checks/model_checks.py.patch
new file mode 100644
index 0000000000..aba7daa50e
--- /dev/null
+++ b/django/core/checks/model_checks.py.patch
@@ -0,0 +1,47 @@
+diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
+index 1234567..89abcdef 100644
+--- a/django/core/checks/model_checks.py
++++ b/django/core/checks/model_checks.py
+@@ -4,6 +4,7 @@ from collections import defaultdict
+ from itertools import chain
+ 
+ from django.apps import apps
++from django.db import router
+ from django.core.checks import Error, Tags, register
+ 
+ 
+@@ -35,15 +36,24 @@ def check_all_models(app_configs=None, **kwargs):
+             indexes[model_index.name].append(model._meta.label)
+         for model_constraint in model._meta.constraints:
+             constraints[model_constraint.name].append(model._meta.label)
++
+     for db_table, model_labels in db_table_models.items():
+         if len(model_labels) != 1:
+-            errors.append(
+-                Error(
+-                    "db_table '%s' is used by multiple models: %s."
+-                    % (db_table, ', '.join(db_table_models[db_table])),
+-                    obj=db_table,
+-                    id='models.E028',
+-                )
++            # Group models by their database
++            db_groups = defaultdict(list)
++            for label in model_labels:
++                app_label, model_name = label.split('.')
++                model = apps.get_model(app_label, model_name)
++                db = router.db_for_write(model)
++                db_groups[db].append(label)
++            
++            # Only raise error if multiple models share same table in same database
++            for db, labels in db_groups.items():
++                if len(labels) > 1:
++                    errors.append(
++                        Error(
++                            "db_table '%s' is used by multiple models in database '%s': %s."
++                            % (db_table, db, ', '.join(labels)),
++                            obj=db_table,
++                            id='models.E028',
++                        )
+             )
+     for index_name, model_labels in indexes.items():
+         if len(model_labels) > 1:
\ No newline at end of file
