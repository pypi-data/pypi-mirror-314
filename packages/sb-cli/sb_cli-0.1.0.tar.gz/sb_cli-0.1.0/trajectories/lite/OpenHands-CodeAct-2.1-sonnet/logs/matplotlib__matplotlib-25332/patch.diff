diff --git a/lib/matplotlib/cbook.py b/lib/matplotlib/cbook.py
index c9699b2e21..435c0ad77b 100644
--- a/lib/matplotlib/cbook.py
+++ b/lib/matplotlib/cbook.py
@@ -791,6 +791,21 @@ class Grouper:
     def __contains__(self, item):
         return weakref.ref(item) in self._mapping
 
+    def __getstate__(self):
+        """Convert weak references to strong references for pickling."""
+        # Convert weak references to strong references
+        clean_mapping = {}
+        for key, val in self._mapping.items():
+            if key() is not None:  # Only include live references
+                clean_mapping[key()] = [v() for v in val if v() is not None]
+        return {'_mapping': clean_mapping}
+
+    def __setstate__(self, state):
+        """Convert strong references back to weak references after unpickling."""
+        # Convert back to weak references
+        self._mapping = {weakref.ref(key): [weakref.ref(x) for x in val]
+                        for key, val in state['_mapping'].items()}
+
     def clean(self):
         """Clean dead weak references from the dictionary."""
         mapping = self._mapping
diff --git a/reproduce_pickle_error.py b/reproduce_pickle_error.py
new file mode 100644
index 0000000000..0a871241e3
--- /dev/null
+++ b/reproduce_pickle_error.py
@@ -0,0 +1,23 @@
+import matplotlib.pyplot as plt
+import pickle
+
+fig = plt.figure()
+ax1 = fig.add_subplot(211)
+ax2 = fig.add_subplot(212)
+time=[0,1,2,3,4]
+speed=[40000,4300,4500,4700,4800]
+acc=[10,11,12,13,14]
+ax1.plot(time,speed)
+ax1.set_ylabel('speed')
+ax2.plot(time,acc)
+ax2.set_ylabel('acc')
+
+fig.align_labels()  # This line causes the pickling issue
+
+try:
+    pickle.dumps(fig)
+    print("Success: Figure was pickled successfully!")
+except Exception as e:
+    print(f"Error: {type(e).__name__}: {str(e)}")
+
+plt.show()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..31eeb15998
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,50 @@
+import matplotlib.pyplot as plt
+import pickle
+
+def test_case(title, func):
+    print(f"\nTesting: {title}")
+    try:
+        fig = func()
+        pickle.dumps(fig)
+        print("Success: Figure was pickled successfully!")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {str(e)}")
+
+# Test case 1: Multiple subplots with different alignments
+def test_multiple_subplots():
+    fig = plt.figure(figsize=(10, 8))
+    gs = fig.add_gridspec(2, 2)
+    ax1 = fig.add_subplot(gs[0, 0])
+    ax2 = fig.add_subplot(gs[0, 1])
+    ax3 = fig.add_subplot(gs[1, :])
+    
+    ax1.plot([1, 2, 3], [1, 2, 3])
+    ax2.plot([1, 2, 3], [2, 4, 6])
+    ax3.plot([1, 2, 3], [3, 6, 9])
+    
+    ax1.set_ylabel('Y1')
+    ax2.set_ylabel('Y2')
+    ax3.set_ylabel('Y3')
+    
+    fig.align_labels()
+    return fig
+
+# Test case 2: Empty figure with align_labels
+def test_empty_figure():
+    fig = plt.figure()
+    fig.align_labels()
+    return fig
+
+# Test case 3: Figure with text but no axes
+def test_figure_with_text():
+    fig = plt.figure()
+    fig.text(0.5, 0.5, 'Test Text')
+    fig.align_labels()
+    return fig
+
+# Run all test cases
+test_case("Multiple subplots with different alignments", test_multiple_subplots)
+test_case("Empty figure", test_empty_figure)
+test_case("Figure with text but no axes", test_figure_with_text)
+
+plt.show()
\ No newline at end of file
