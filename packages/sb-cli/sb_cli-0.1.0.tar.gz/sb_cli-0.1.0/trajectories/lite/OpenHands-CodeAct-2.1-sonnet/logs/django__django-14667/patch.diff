diff --git a/django/db/models/query.py b/django/db/models/query.py
index 71a52fb754..51375811e1 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -1242,6 +1242,8 @@ class QuerySet:
             if field in self.query._filtered_relations:
                 raise ValueError('only() is not supported with FilteredRelation.')
         clone = self._chain()
+        # Clear any existing deferred loading state before setting up only() state
+        clone.query.clear_deferred_loading()
         clone.query.add_immediate_loading(fields)
         return clone
 
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 8837881579..625e1dba08 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -2081,12 +2081,22 @@ class Query(BaseExpression):
         # splitting and handling when computing the SQL column names (as part of
         # get_columns()).
         existing, defer = self.deferred_loading
+        field_names = set(field_names)
         if defer:
             # Add to existing deferred names.
             self.deferred_loading = existing.union(field_names), True
         else:
-            # Remove names from the set of any existing "immediate load" names.
-            self.deferred_loading = existing.difference(field_names), False
+            # When in "only load these fields" mode (defer=False),
+            # we need to remove the deferred fields from the set of fields to load.
+            # If we're deferring all fields that were marked for immediate loading,
+            # we should switch back to loading all fields except the deferred ones.
+            remaining = existing - field_names
+            if not remaining:
+                # If no fields remain in the only() set, switch to deferring these fields
+                self.deferred_loading = field_names, True
+            else:
+                # Otherwise keep the remaining fields in only() mode
+                self.deferred_loading = remaining, False
 
     def add_immediate_loading(self, field_names):
         """
@@ -2098,19 +2108,13 @@ class Query(BaseExpression):
         for immediate loading. (That is, immediate loading overrides any
         existing immediate values, but respects existing deferrals.)
         """
-        existing, defer = self.deferred_loading
         field_names = set(field_names)
         if 'pk' in field_names:
             field_names.remove('pk')
             field_names.add(self.get_meta().pk.name)
 
-        if defer:
-            # Remove any existing deferred names from the current set before
-            # setting the new names.
-            self.deferred_loading = field_names.difference(existing), False
-        else:
-            # Replace any existing "immediate load" field names.
-            self.deferred_loading = frozenset(field_names), False
+        # When using only(), we want to start fresh with just these fields
+        self.deferred_loading = frozenset(field_names), False
 
     def get_loaded_field_names(self):
         """
