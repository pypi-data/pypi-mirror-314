+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/migrations/operations/models.py
	modified:   django/db/migrations/state.py
	modified:   django/db/models/options.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	db.sqlite3
	reproduce_warning.py
	test_app/
	test_project/

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit c61219a7ae051d2baab53f041e00592011fc550c
Author: Bakdolot <80908236+Bakdolot@users.noreply.github.com>
Date:   Tue May 2 10:46:22 2023 +0600

    Fixed #34513 -- Added system check for relational fields in ModelAdmin.list_display.

diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index 0fefe65e48..c395b0bde2 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -916,9 +916,10 @@ class ModelAdminChecks(BaseModelAdminChecks):
                         id="admin.E108",
                     )
                 ]
-        if isinstance(field, models.ManyToManyField) or (
-            getattr(field, "rel", None) and field.rel.field.many_to_one
-        ):
+        if (
+            getattr(field, "is_relation", False)
+            and (field.many_to_many or field.one_to_many)
+        ) or (getattr(field, "rel", None) and field.rel.field.many_to_one):
             return [
                 checks.Error(
                     f"The value of '{label}' must not be a many-to-many field or a "
diff --git a/tests/modeladmin/test_checks.py b/tests/modeladmin/test_checks.py
index 85f2eda69e..69aa242a64 100644
--- a/tests/modeladmin/test_checks.py
+++ b/tests/modeladmin/test_checks.py
@@ -554,6 +554,30 @@ class ListDisplayTests(CheckTestCase):
             "admin.E109",
         )
 
+    def test_invalid_related_field(self):
+        class TestModelAdmin(ModelAdmin):
+            list_display = ["song"]
+
+        self.assertIsInvalid(
+            TestModelAdmin,
+            Band,
+            "The value of 'list_display[0]' must not be a many-to-many field or a "
+            "reverse foreign key.",
+            "admin.E109",
+        )
+
+    def test_invalid_m2m_related_name(self):
+        class TestModelAdmin(ModelAdmin):
+            list_display = ["featured"]
+
+        self.assertIsInvalid(
+            TestModelAdmin,
+            Band,
+            "The value of 'list_display[0]' must not be a many-to-many field or a "
+            "reverse foreign key.",
+            "admin.E109",
+        )
+
     def test_valid_case(self):
         @admin.display
         def a_callable(obj):
+ git diff c61219a7ae051d2baab53f041e00592011fc550c
diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index b89b6b511b..6ecdc7517a 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -645,7 +645,24 @@ class AlterIndexTogether(AlterTogetherOptionOperation):
     option_name = "index_together"
 
     def __init__(self, name, index_together):
-        super().__init__(name, index_together)
+        from django.db.models import Index
+        # Convert index_together to indexes
+        self.indexes = []
+        if index_together:
+            for fields in index_together:
+                index_name = f"idx_{'_'.join(str(f) for f in fields)}"
+                self.indexes.append(Index(fields=list(fields), name=index_name))
+        super().__init__(name, [])
+
+    def database_forwards(self, app_label, schema_editor, from_state, to_state):
+        from django.db.migrations.operations.models import AddIndex
+        model = to_state.apps.get_model(app_label, self.name)
+        if self.indexes:
+            for index in self.indexes:
+                operation = AddIndex(self.name, index)
+                operation.state_forwards(app_label, to_state)
+                operation.database_forwards(app_label, schema_editor, from_state, to_state)
+        super().database_forwards(app_label, schema_editor, from_state, to_state)
 
 
 class AlterOrderWithRespectTo(ModelOptionOperation):
diff --git a/django/db/migrations/state.py b/django/db/migrations/state.py
index ae55967383..29d031b54a 100644
--- a/django/db/migrations/state.py
+++ b/django/db/migrations/state.py
@@ -10,7 +10,7 @@ from django.conf import settings
 from django.core.exceptions import FieldDoesNotExist
 from django.db import models
 from django.db.migrations.utils import field_is_referenced, get_references
-from django.db.models import NOT_PROVIDED
+from django.db.models import NOT_PROVIDED, Index
 from django.db.models.fields.related import RECURSIVE_RELATIONSHIP_CONSTANT
 from django.db.models.options import DEFAULT_NAMES, normalize_together
 from django.db.models.utils import make_model_tuple
@@ -724,7 +724,16 @@ class ModelState:
     ):
         self.app_label = app_label
         self.name = name
-        self.fields = dict(fields)
+        self.fields = {}
+        if isinstance(fields, dict):
+            self.fields = fields
+        else:
+            for field in fields:
+                if isinstance(field, (list, tuple)):
+                    if len(field) == 2 and not isinstance(field[1], str):
+                        self.fields[field[0]] = field[1]
+                elif hasattr(field, 'name') and hasattr(field, 'clone'):
+                    self.fields[field.name] = field.clone()
         self.options = options or {}
         self.options.setdefault("indexes", [])
         self.options.setdefault("constraints", [])
@@ -774,28 +783,72 @@ class ModelState:
                 continue
             if isinstance(field, models.OrderWrt):
                 continue
-            name = field.name
             try:
-                fields.append((name, field.clone()))
+                field_copy = field.clone()
+                field_copy.model = None
+                field_copy.concrete = True
+                if hasattr(field_copy, 'db_column') and not isinstance(getattr(field_copy.__class__, 'db_column', None), property):
+                    field_copy.db_column = None
+                if hasattr(field_copy, 'db_tablespace') and not isinstance(getattr(field_copy.__class__, 'db_tablespace', None), property):
+                    field_copy.db_tablespace = None
+                if hasattr(field_copy, 'db_index') and not isinstance(getattr(field_copy.__class__, 'db_index', None), property):
+                    field_copy.db_index = False
+                if hasattr(field_copy, '_unique') and not isinstance(getattr(field_copy.__class__, '_unique', None), property):
+                    field_copy._unique = False
+                if hasattr(field_copy, '_validators') and not isinstance(getattr(field_copy.__class__, '_validators', None), property):
+                    field_copy._validators = []
+                if hasattr(field_copy, '_error_messages') and not isinstance(getattr(field_copy.__class__, '_error_messages', None), property):
+                    field_copy._error_messages = {}
+                if hasattr(field_copy, '_choices') and not isinstance(getattr(field_copy.__class__, '_choices', None), property):
+                    field_copy._choices = []
+                if hasattr(field_copy, '_help_text') and not isinstance(getattr(field_copy.__class__, '_help_text', None), property):
+                    field_copy._help_text = ''
+                if hasattr(field_copy, '_verbose_name') and not isinstance(getattr(field_copy.__class__, '_verbose_name', None), property):
+                    field_copy._verbose_name = None
+                if hasattr(field_copy, '_default') and not isinstance(getattr(field_copy.__class__, '_default', None), property):
+                    field_copy._default = None
+                fields.append((field.name, field_copy))
             except TypeError as e:
                 raise TypeError(
                     "Couldn't reconstruct field %s on %s: %s"
                     % (
-                        name,
+                        field.name,
                         model._meta.label,
                         e,
                     )
                 )
         if not exclude_rels:
             for field in model._meta.local_many_to_many:
-                name = field.name
                 try:
-                    fields.append((name, field.clone()))
+                    field_copy = field.clone()
+                    field_copy.model = None
+                    field_copy.concrete = True
+                    if hasattr(field_copy, 'db_column') and not isinstance(getattr(field_copy.__class__, 'db_column', None), property):
+                        field_copy.db_column = None
+                    if hasattr(field_copy, 'db_tablespace') and not isinstance(getattr(field_copy.__class__, 'db_tablespace', None), property):
+                        field_copy.db_tablespace = None
+                    if hasattr(field_copy, 'db_index') and not isinstance(getattr(field_copy.__class__, 'db_index', None), property):
+                        field_copy.db_index = False
+                    if hasattr(field_copy, '_unique') and not isinstance(getattr(field_copy.__class__, '_unique', None), property):
+                        field_copy._unique = False
+                    if hasattr(field_copy, '_validators') and not isinstance(getattr(field_copy.__class__, '_validators', None), property):
+                        field_copy._validators = []
+                    if hasattr(field_copy, '_error_messages') and not isinstance(getattr(field_copy.__class__, '_error_messages', None), property):
+                        field_copy._error_messages = {}
+                    if hasattr(field_copy, '_choices') and not isinstance(getattr(field_copy.__class__, '_choices', None), property):
+                        field_copy._choices = []
+                    if hasattr(field_copy, '_help_text') and not isinstance(getattr(field_copy.__class__, '_help_text', None), property):
+                        field_copy._help_text = ''
+                    if hasattr(field_copy, '_verbose_name') and not isinstance(getattr(field_copy.__class__, '_verbose_name', None), property):
+                        field_copy._verbose_name = None
+                    if hasattr(field_copy, '_default') and not isinstance(getattr(field_copy.__class__, '_default', None), property):
+                        field_copy._default = None
+                    fields.append((field.name, field_copy))
                 except TypeError as e:
                     raise TypeError(
                         "Couldn't reconstruct m2m field %s on %s: %s"
                         % (
-                            name,
+                            field.name,
                             model._meta.object_name,
                             e,
                         )
@@ -812,6 +865,13 @@ class ModelState:
                     options[name] = set(normalize_together(ut))
                 elif name == "index_together":
                     it = model._meta.original_attrs["index_together"]
+                    # Convert index_together to indexes
+                    if it:
+                        if "indexes" not in options:
+                            options["indexes"] = []
+                        for fields in normalize_together(it):
+                            index_name = f"idx_{'_'.join(str(f) for f in fields)}"
+                            options["indexes"].append(Index(fields=list(fields), name=index_name))
                     options[name] = set(normalize_together(it))
                 elif name == "indexes":
                     indexes = [idx.clone() for idx in model._meta.indexes]
diff --git a/django/db/models/options.py b/django/db/models/options.py
index be3d68f390..a658d7b5e3 100644
--- a/django/db/models/options.py
+++ b/django/db/models/options.py
@@ -212,6 +212,12 @@ class Options:
                     f"{self.label!r} instead.",
                     RemovedInDjango51Warning,
                 )
+                # Convert index_together to indexes
+                from django.db.models import Index
+                for fields in self.index_together:
+                    index_name = f"idx_{'_'.join(str(f) for f in fields)}"
+                    self.indexes.append(Index(fields=list(fields), name=index_name))
+                self.index_together = []
             # App label/class name interpolation for names of constraints and
             # indexes.
             if not getattr(cls._meta, "abstract", False):
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.6.0 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Django==5.0.dev20230502044622) (3.8.1)
Requirement already satisfied: sqlparse>=0.3.1 in /opt/miniconda3/envs/testbed/lib/python3.11/site-packages (from Django==5.0.dev20230502044622) (0.5.1)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=Django-5.0.dev20230502044622-0.editable-py3-none-any.whl size=27405 sha256=d5621b3a23dc75d4ea3c9383d0b2ca32ee4b462cb58901e59639d68366091654
  Stored in directory: /tmp/pip-ephem-wheel-cache-ao04772s/wheels/49/5f/4f/01b7d31ea6ddac9643da788242d33e5fd3467d95d17b032c6b
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 5.0.dev20230502044622
    Uninstalling Django-5.0.dev20230502044622:
      Successfully uninstalled Django-5.0.dev20230502044622
Successfully installed Django-5.0.dev20230502044622
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout c61219a7ae051d2baab53f041e00592011fc550c tests/migrations/test_autodetector.py tests/migrations/test_optimizer.py
Updated 0 paths from 27397957fb
+ git apply -v -
Checking patch tests/migrations/test_autodetector.py...
Checking patch tests/migrations/test_optimizer.py...
Applied patch tests/migrations/test_autodetector.py cleanly.
Applied patch tests/migrations/test_optimizer.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 migrations.test_autodetector migrations.test_optimizer
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application migrations
Found 217 test(s).
Skipping setup of unused database(s): other.
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, migrations, sessions, staticfiles
  Apply all migrations: admin, sites
Traceback (most recent call last):
  File "/testbed/./tests/runtests.py", line 770, in <module>
    failures = django_tests(
               ^^^^^^^^^^^^^
  File "/testbed/./tests/runtests.py", line 429, in django_tests
    failures = test_runner.run_tests(test_labels)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/testbed/django/test/runner.py", line 1037, in run_tests
    old_config = self.setup_databases(
                 ^^^^^^^^^^^^^^^^^^^^^
  File "/testbed/django/test/runner.py", line 939, in setup_databases
    return _setup_databases(
           ^^^^^^^^^^^^^^^^^
  File "/testbed/django/test/utils.py", line 203, in setup_databases
    connection.creation.create_test_db(
  File "/testbed/django/db/backends/base/creation.py", line 78, in create_test_db
    call_command(
  File "/testbed/django/core/management/__init__.py", line 194, in call_command
    return command.execute(*args, **defaults)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/testbed/django/core/management/base.py", line 458, in execute
    output = self.handle(*args, **options)
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/testbed/django/core/management/base.py", line 106, in wrapper
    res = handle_func(*args, **kwargs)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/testbed/django/core/management/commands/migrate.py", line 302, in handle
    pre_migrate_apps = pre_migrate_state.apps
                       ^^^^^^^^^^^^^^^^^^^^^^
  File "/testbed/django/utils/functional.py", line 47, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
                                         ^^^^^^^^^^^^^^^^^^^
  File "/testbed/django/db/migrations/state.py", line 566, in apps
    return StateApps(self.real_apps, self.models)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/testbed/django/db/migrations/state.py", line 613, in __init__
    self.real_models.append(ModelState.from_model(model, exclude_rels=True))
                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/testbed/django/db/migrations/state.py", line 957, in from_model
    return cls(
           ^^^^
  File "/testbed/django/db/migrations/state.py", line 745, in __init__
    raise ValueError(
ValueError: ModelState.fields cannot be bound to a model - "id" is.
+ git checkout c61219a7ae051d2baab53f041e00592011fc550c tests/migrations/test_autodetector.py tests/migrations/test_optimizer.py
Updated 2 paths from 27397957fb
