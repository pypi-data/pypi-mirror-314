diff --git a/django/core/management/commands/sqlmigrate.py b/django/core/management/commands/sqlmigrate.py
index f0b663222a..0ccf82ba27 100644
--- a/django/core/management/commands/sqlmigrate.py
+++ b/django/core/management/commands/sqlmigrate.py
@@ -55,8 +55,8 @@ class Command(BaseCommand):
                 migration_name, app_label))
         targets = [(app_label, migration.name)]
 
-        # Show begin/end around output only for atomic migrations
-        self.output_transaction = migration.atomic
+        # Show begin/end around output only for atomic migrations and if the database supports DDL transactions
+        self.output_transaction = migration.atomic and connection.features.can_rollback_ddl
 
         # Make a plan that represents just the requested migrations and show SQL
         # for it
diff --git a/test_sqlmigrate.py b/test_sqlmigrate.py
new file mode 100644
index 0000000000..41e97ca328
--- /dev/null
+++ b/test_sqlmigrate.py
@@ -0,0 +1,40 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db import connection
+from io import StringIO
+
+# Add Django source to Python path
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+# Configure minimal Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+django.setup()
+
+# Capture output of sqlmigrate command
+output = StringIO()
+call_command('sqlmigrate', 'auth', '0001_initial', stdout=output)
+sql = output.getvalue()
+
+print("Database backend:", connection.vendor)
+print("Supports DDL transactions:", connection.features.can_rollback_ddl)
+print("\nSQL output:")
+print(sql)
+
+# Check if BEGIN/COMMIT are present
+has_transaction = 'BEGIN;' in sql and 'COMMIT;' in sql
+print("\nTransaction statements present:", has_transaction)
\ No newline at end of file
diff --git a/test_sqlmigrate_no_ddl.py b/test_sqlmigrate_no_ddl.py
new file mode 100644
index 0000000000..67941bea86
--- /dev/null
+++ b/test_sqlmigrate_no_ddl.py
@@ -0,0 +1,43 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db import connection
+from io import StringIO
+
+# Add Django source to Python path
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+# Configure minimal Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+django.setup()
+
+# Mock the database feature to not support DDL transactions
+connection.features.can_rollback_ddl = False
+
+# Capture output of sqlmigrate command
+output = StringIO()
+call_command('sqlmigrate', 'auth', '0001_initial', stdout=output)
+sql = output.getvalue()
+
+print("Database backend:", connection.vendor)
+print("Supports DDL transactions:", connection.features.can_rollback_ddl)
+print("\nSQL output:")
+print(sql)
+
+# Check if BEGIN/COMMIT are present
+has_transaction = 'BEGIN;' in sql and 'COMMIT;' in sql
+print("\nTransaction statements present:", has_transaction)
\ No newline at end of file
