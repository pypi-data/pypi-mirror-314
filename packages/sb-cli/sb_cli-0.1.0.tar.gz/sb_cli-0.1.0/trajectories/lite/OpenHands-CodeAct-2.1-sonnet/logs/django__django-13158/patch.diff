diff --git a/django/forms/models.py b/django/forms/models.py
index ab611afca7..354f978753 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -1323,6 +1323,10 @@ class ModelMultipleChoiceField(ModelChoiceField):
         if self.required and not value:
             raise ValidationError(self.error_messages['required'], code='required')
         elif not self.required and not value:
+            # For combined queries (union), return an empty queryset using filter(pk__in=[])
+            # instead of none() to ensure consistent behavior
+            if hasattr(self.queryset, 'query') and getattr(self.queryset.query, 'combinator', None) is not None:
+                return self.queryset.model.objects.filter(pk__in=[])
             return self.queryset.none()
         if not isinstance(value, (list, tuple)):
             raise ValidationError(
diff --git a/migrations/0001_initial.py b/migrations/0001_initial.py
new file mode 100644
index 0000000000..2c1858ed0f
--- /dev/null
+++ b/migrations/0001_initial.py
@@ -0,0 +1,28 @@
+# Generated by Django 3.2 on 2024-10-25 16:35
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Publication',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Article',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('publications', models.ManyToManyField(blank=True, to='__main__.Publication')),
+            ],
+        ),
+    ]
diff --git a/migrations/__init__.py b/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..b1ea2db154
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,90 @@
+import os
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            "default": {
+                "ENGINE": "django.db.backends.sqlite3",
+                "NAME": ":memory:",
+            }
+        },
+        INSTALLED_APPS=[
+            "django.contrib.contenttypes",
+            "django.contrib.auth",
+            "__main__",
+        ],
+        USE_TZ=False,
+        SECRET_KEY="dummy",
+    )
+django.setup()
+
+from django.db import models
+from django.forms import ModelForm, ModelMultipleChoiceField
+from django.test import TestCase
+
+class Publication(models.Model):
+    name = models.CharField(max_length=100)
+
+class Article(models.Model):
+    publications = models.ManyToManyField(Publication, blank=True)
+
+# Test with OR operator
+class ArticleFormWithOR(ModelForm):
+    publications = ModelMultipleChoiceField(
+        Publication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5),
+        required=False,
+    )
+    class Meta:
+        model = Article
+        fields = ["publications"]
+
+# Test with union()
+class ArticleFormWithUnion(ModelForm):
+    publications = ModelMultipleChoiceField(
+        Publication.objects.filter(id__lt=2).union(
+            Publication.objects.filter(id__gt=5)
+        ),
+        required=False,
+    )
+    class Meta:
+        model = Article
+        fields = ["publications"]
+
+# Setup test case
+class TestQuerySetNone(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        # Create test publications
+        for i in range(1, 8):
+            Publication.objects.create(name=f"Pub {i}")
+
+    def test_empty_submission(self):
+        # Test OR operator form
+        form_or = ArticleFormWithOR(data={"publications": []})
+        self.assertTrue(form_or.is_valid())
+        article_or = form_or.save()
+        print("\nOR operator form publications:", article_or.publications.all())
+
+        # Test union() form
+        form_union = ArticleFormWithUnion(data={"publications": []})
+        self.assertTrue(form_union.is_valid())
+        article_union = form_union.save()
+        print("Union form publications:", article_union.publications.all())
+
+if __name__ == "__main__":
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    test_runner.setup_databases()
+    
+    # Create tables for our models
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Publication)
+        schema_editor.create_model(Article)
+    
+    test = TestQuerySetNone()
+    test.setUpTestData()
+    test.test_empty_submission()
\ No newline at end of file
