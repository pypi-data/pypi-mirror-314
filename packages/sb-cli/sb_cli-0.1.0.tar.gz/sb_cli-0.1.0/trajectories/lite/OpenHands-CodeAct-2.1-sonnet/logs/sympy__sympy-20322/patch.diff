diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..52dbfaf26f
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,34 @@
+import sympy
+
+def test_ceiling_simplify():
+    print("Testing with evaluate=False:")
+    expr1 = sympy.sympify('4*ceiling(x/4 - 3/4)', evaluate=False)
+    print("Original:", expr1)
+    print("Simplified:", expr1.simplify())
+    
+    print("\nTesting with evaluate=True:")
+    expr2 = sympy.sympify('4*ceiling(x/4 - 3/4)', evaluate=True)
+    print("Original:", expr2)
+    print("Simplified:", expr2.simplify())
+
+def test_edge_cases():
+    print("\nTesting edge cases:")
+    
+    print("\nCase 1: Nested ceiling functions")
+    expr = sympy.sympify('ceiling(ceiling(x/2) - 1/2)', evaluate=False)
+    print("Original:", expr)
+    print("Simplified:", expr.simplify())
+    
+    print("\nCase 2: Multiple ceiling functions")
+    expr = sympy.sympify('ceiling(x/2) + ceiling(x/3)', evaluate=False)
+    print("Original:", expr)
+    print("Simplified:", expr.simplify())
+    
+    print("\nCase 3: Complex expression")
+    expr = sympy.sympify('2*ceiling(x/2 - 1/4) + 3*ceiling(x/3 - 1/3)', evaluate=False)
+    print("Original:", expr)
+    print("Simplified:", expr.simplify())
+
+if __name__ == "__main__":
+    test_ceiling_simplify()
+    test_edge_cases()
\ No newline at end of file
diff --git a/sympy/functions/elementary/integers.py b/sympy/functions/elementary/integers.py
index fe1e71e3f2..912d697bb2 100644
--- a/sympy/functions/elementary/integers.py
+++ b/sympy/functions/elementary/integers.py
@@ -8,6 +8,7 @@
 from sympy.core.function import Function
 from sympy.core.logic import fuzzy_or
 from sympy.core.numbers import Integer
+from sympy.core.parameters import global_parameters
 from sympy.core.relational import Gt, Lt, Ge, Le, Relational, is_eq
 from sympy.core.symbol import Symbol
 from sympy.core.sympify import _sympify
@@ -36,6 +37,10 @@ def eval(cls, arg):
                 return cls(i)*S.ImaginaryUnit
             return cls(arg, evaluate=False)
 
+        # If evaluate=False, don't split the argument
+        if not global_parameters.evaluate:
+            return None
+
         # Integral, numerical, symbolic part
         ipart = npart = spart = S.Zero
 
@@ -85,6 +90,27 @@ def _eval_is_real(self):
     def _eval_is_integer(self):
         return self.args[0].is_real
 
+    def _eval_simplify(self, **kwargs):
+        # If evaluate=False, don't simplify the argument
+        if not global_parameters.evaluate:
+            return self
+        # Simplify the argument but preserve its structure
+        arg = self.args[0]
+        if isinstance(arg, Add):
+            # Don't split Add terms when evaluate=False
+            if not global_parameters.evaluate:
+                return self.func(arg)
+            # Otherwise, simplify each term separately
+            terms = [t.simplify(**kwargs) for t in arg.args]
+            return self.func(Add(*terms))
+        return self.func(arg.simplify(**kwargs))
+
+    def _eval_expand_func(self, **hints):
+        # Don't expand function arguments when evaluate=False
+        if not global_parameters.evaluate:
+            return self
+        return self.func(self.args[0].expand(**hints))
+
 
 class floor(RoundFunction):
     """
@@ -270,6 +296,33 @@ def _eval_number(cls, arg):
         if arg.is_NumberSymbol:
             return arg.approximation_interval(Integer)[1]
 
+    def _eval_simplify(self, **kwargs):
+        # If evaluate=False, don't simplify the argument
+        if not global_parameters.evaluate:
+            return self
+        # Simplify the argument but preserve its structure
+        arg = self.args[0]
+        if isinstance(arg, Add):
+            # Don't split Add terms when evaluate=False
+            if not global_parameters.evaluate:
+                return self.func(arg)
+            # Otherwise, simplify each term separately
+            terms = [t.simplify(**kwargs) for t in arg.args]
+            return self.func(Add(*terms))
+        return self.func(arg.simplify(**kwargs))
+
+    def _eval_expand_func(self, **hints):
+        # Don't expand function arguments when evaluate=False
+        if not global_parameters.evaluate:
+            return self
+        return self.func(self.args[0].expand(**hints))
+
+    def _eval_rewrite_as_floor(self, arg, **kwargs):
+        # Don't rewrite when evaluate=False
+        if not global_parameters.evaluate:
+            return self
+        return -floor(-arg)
+
     def _eval_nseries(self, x, n, logx, cdir=0):
         r = self.subs(x, 0)
         args = self.args[0]
diff --git a/sympy/parsing/sympy_parser.py b/sympy/parsing/sympy_parser.py
index 0e3c8e4be7..008a10423b 100644
--- a/sympy/parsing/sympy_parser.py
+++ b/sympy/parsing/sympy_parser.py
@@ -1047,52 +1047,104 @@ def flatten(self, args, func):
                 result.append(arg)
         return result
 
+    def visit_Call(self, node):
+        # Visit function arguments but preserve their structure
+        node.args = [self.visit(arg) for arg in node.args]
+        # Add evaluate=False only to specific functions
+        if isinstance(node.func, ast.Name) and node.func.id in ('ceiling', 'floor'):
+            if not node.keywords:
+                node.keywords = []
+            node.keywords.append(ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load())))
+        return node
+
     def visit_BinOp(self, node):
         if node.op.__class__ in self.operators:
             sympy_class = self.operators[node.op.__class__]
             right = self.visit(node.right)
             left = self.visit(node.left)
-            if isinstance(node.left, ast.UnaryOp) and (isinstance(node.right, ast.UnaryOp) == 0) and sympy_class in ('Mul',):
-                left, right = right, left
-            if isinstance(node.op, ast.Sub):
-                right = ast.Call(
-                    func=ast.Name(id='Mul', ctx=ast.Load()),
-                    args=[ast.UnaryOp(op=ast.USub(), operand=ast.Num(1)), right],
-                    keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
-                    starargs=None,
-                    kwargs=None
-                )
-            if isinstance(node.op, ast.Div):
-                if isinstance(node.left, ast.UnaryOp):
-                    if isinstance(node.right,ast.UnaryOp):
-                        left, right = right, left
-                    left = ast.Call(
-                    func=ast.Name(id='Pow', ctx=ast.Load()),
-                    args=[left, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))],
+
+            # Check if either operand is a function call
+            if isinstance(node.left, ast.Call) or isinstance(node.right, ast.Call):
+                # Don't split function arguments
+                if isinstance(node.op, ast.Sub):
+                    right = ast.Call(
+                        func=ast.Name(id='Mul', ctx=ast.Load()),
+                        args=[ast.UnaryOp(op=ast.USub(), operand=ast.Num(1)), right],
+                        keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                        starargs=None,
+                        kwargs=None
+                    )
+                if isinstance(node.op, ast.Div):
+                    if isinstance(node.left, ast.UnaryOp):
+                        if isinstance(node.right,ast.UnaryOp):
+                            left, right = right, left
+                        left = ast.Call(
+                            func=ast.Name(id='Pow', ctx=ast.Load()),
+                            args=[left, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))],
+                            keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                            starargs=None,
+                            kwargs=None
+                        )
+                    else:
+                        right = ast.Call(
+                            func=ast.Name(id='Pow', ctx=ast.Load()),
+                            args=[right, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))],
+                            keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                            starargs=None,
+                            kwargs=None
+                        )
+
+                new_node = ast.Call(
+                    func=ast.Name(id=sympy_class, ctx=ast.Load()),
+                    args=[left, right],
                     keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
                     starargs=None,
                     kwargs=None
                 )
-                else:
+                return new_node
+            else:
+                # Regular case - no function calls
+                if isinstance(node.left, ast.UnaryOp) and (isinstance(node.right, ast.UnaryOp) == 0) and sympy_class in ('Mul',):
+                    left, right = right, left
+                if isinstance(node.op, ast.Sub):
                     right = ast.Call(
-                    func=ast.Name(id='Pow', ctx=ast.Load()),
-                    args=[right, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))],
+                        func=ast.Name(id='Mul', ctx=ast.Load()),
+                        args=[ast.UnaryOp(op=ast.USub(), operand=ast.Num(1)), right],
+                        keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                        starargs=None,
+                        kwargs=None
+                    )
+                if isinstance(node.op, ast.Div):
+                    if isinstance(node.left, ast.UnaryOp):
+                        if isinstance(node.right,ast.UnaryOp):
+                            left, right = right, left
+                        left = ast.Call(
+                            func=ast.Name(id='Pow', ctx=ast.Load()),
+                            args=[left, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))],
+                            keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                            starargs=None,
+                            kwargs=None
+                        )
+                    else:
+                        right = ast.Call(
+                            func=ast.Name(id='Pow', ctx=ast.Load()),
+                            args=[right, ast.UnaryOp(op=ast.USub(), operand=ast.Num(1))],
+                            keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
+                            starargs=None,
+                            kwargs=None
+                        )
+
+                new_node = ast.Call(
+                    func=ast.Name(id=sympy_class, ctx=ast.Load()),
+                    args=[left, right],
                     keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
                     starargs=None,
                     kwargs=None
                 )
 
-            new_node = ast.Call(
-                func=ast.Name(id=sympy_class, ctx=ast.Load()),
-                args=[left, right],
-                keywords=[ast.keyword(arg='evaluate', value=ast.NameConstant(value=False, ctx=ast.Load()))],
-                starargs=None,
-                kwargs=None
-            )
-
-            if sympy_class in ('Add', 'Mul'):
-                # Denest Add or Mul as appropriate
-                new_node.args = self.flatten(new_node.args, sympy_class)
+                if sympy_class in ('Add', 'Mul'):
+                    # Denest Add or Mul as appropriate
+                    new_node.args = self.flatten(new_node.args, sympy_class)
 
-            return new_node
+                return new_node
         return node
