diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..60c4d65355 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -403,10 +403,27 @@ class BaseDatabaseSchemaEditor:
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
-        constraint_names = self._constraint_names(
-            model, columns, exclude=meta_constraint_names | meta_index_names,
-            **constraint_kwargs
-        )
+
+        # When deleting an index, exclude unique constraints and vice versa
+        if constraint_kwargs.get('index'):
+            # When deleting an index, exclude unique constraints
+            constraint_names = self._constraint_names(
+                model, columns, exclude=meta_constraint_names | meta_index_names,
+                index=True, unique=False
+            )
+        elif constraint_kwargs.get('unique'):
+            # When deleting a unique constraint, exclude regular indexes
+            constraint_names = self._constraint_names(
+                model, columns, exclude=meta_constraint_names | meta_index_names,
+                unique=True
+            )
+        else:
+            # For other cases, use original behavior
+            constraint_names = self._constraint_names(
+                model, columns, exclude=meta_constraint_names | meta_index_names,
+                **constraint_kwargs
+            )
+
         if len(constraint_names) != 1:
             raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
                 len(constraint_names),
diff --git a/test_index_deletion.py b/test_index_deletion.py
new file mode 100644
index 0000000000..3c56bf4557
--- /dev/null
+++ b/test_index_deletion.py
@@ -0,0 +1,122 @@
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.backends.base.schema import BaseDatabaseSchemaEditor
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.postgresql',
+            'NAME': 'test_db',
+            'USER': 'postgres',
+            'PASSWORD': 'postgres',
+            'HOST': 'localhost',
+            'PORT': '5432',
+        }
+    },
+    INSTALLED_APPS=[],
+)
+
+django.setup()
+
+# Define test model
+class TestModel(models.Model):
+    field1 = models.CharField(max_length=100)
+    field2 = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+        unique_together = [('field1', 'field2')]
+        index_together = [('field1', 'field2')]
+
+# Create schema editor
+with connection.schema_editor() as schema_editor:
+    try:
+        # Create model with both unique_together and index_together
+        schema_editor.create_model(TestModel)
+        print("Model created successfully with both unique_together and index_together")
+
+        # Get constraints before
+        with connection.cursor() as cursor:
+            cursor.execute("""
+                SELECT conname, contype 
+                FROM pg_constraint 
+                WHERE conrelid = 'testapp_testmodel'::regclass;
+            """)
+            print("\nConstraints before:")
+            for name, type_ in cursor.fetchall():
+                print(f"- {name} (type: {type_})")
+
+            cursor.execute("""
+                SELECT indexname, indexdef 
+                FROM pg_indexes 
+                WHERE tablename = 'testapp_testmodel';
+            """)
+            print("\nIndexes before:")
+            for name, defn in cursor.fetchall():
+                print(f"- {name}")
+                print(f"  {defn}")
+
+        # Create unique constraint and index manually
+        with connection.cursor() as cursor:
+            cursor.execute("""
+                ALTER TABLE testapp_testmodel 
+                ADD CONSTRAINT testapp_testmodel_field1_field2_uniq 
+                UNIQUE (field1, field2);
+            """)
+            cursor.execute("""
+                CREATE INDEX testapp_testmodel_field1_field2_idx 
+                ON testapp_testmodel (field1, field2);
+            """)
+
+        print("\nManually created unique constraint and index")
+
+        # Get constraints after creation
+        with connection.cursor() as cursor:
+            cursor.execute("""
+                SELECT conname, contype 
+                FROM pg_constraint 
+                WHERE conrelid = 'testapp_testmodel'::regclass;
+            """)
+            print("\nConstraints after creation:")
+            for name, type_ in cursor.fetchall():
+                print(f"- {name} (type: {type_})")
+
+            cursor.execute("""
+                SELECT indexname, indexdef 
+                FROM pg_indexes 
+                WHERE tablename = 'testapp_testmodel';
+            """)
+            print("\nIndexes after creation:")
+            for name, defn in cursor.fetchall():
+                print(f"- {name}")
+                print(f"  {defn}")
+
+        # Remove index_together while keeping unique_together
+        schema_editor.alter_index_together(TestModel, [('field1', 'field2')], [])
+        print("\nSuccessfully removed index_together")
+
+        # Get constraints after removal
+        with connection.cursor() as cursor:
+            cursor.execute("""
+                SELECT conname, contype 
+                FROM pg_constraint 
+                WHERE conrelid = 'testapp_testmodel'::regclass;
+            """)
+            print("\nConstraints after removal:")
+            for name, type_ in cursor.fetchall():
+                print(f"- {name} (type: {type_})")
+
+            cursor.execute("""
+                SELECT indexname, indexdef 
+                FROM pg_indexes 
+                WHERE tablename = 'testapp_testmodel';
+            """)
+            print("\nIndexes after removal:")
+            for name, defn in cursor.fetchall():
+                print(f"- {name}")
+                print(f"  {defn}")
+
+    except Exception as e:
+        print(f"Error: {e}")
\ No newline at end of file
