diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index 92fe4affb9..c47b9f6ff0 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -277,6 +277,7 @@ class Collector:
             if self.can_fast_delete(instance):
                 with transaction.mark_for_rollback_on_error():
                     count = sql.DeleteQuery(model).delete_batch([instance.pk], self.using)
+                    setattr(instance, model._meta.pk.attname, None)
                 return count, {model._meta.label: count}
 
         with transaction.atomic(using=self.using, savepoint=False):
@@ -291,6 +292,10 @@ class Collector:
             for qs in self.fast_deletes:
                 count = qs._raw_delete(using=self.using)
                 deleted_counter[qs.model._meta.label] += count
+                # Set PKs to None for fast-deleted objects
+                if hasattr(qs, '_result_cache') and qs._result_cache is not None:
+                    for obj in qs._result_cache:
+                        setattr(obj, qs.model._meta.pk.attname, None)
 
             # update fields
             for model, instances_for_fieldvalues in self.field_updates.items():
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..e8318f6686
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,64 @@
+from django.conf import settings
+from django.db import models
+import os
+
+# Configure minimal Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+)
+
+import django
+django.setup()
+
+# Create a simple model with no dependencies
+class SimpleModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'reproduction'
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(SimpleModel)
+
+# Test Case 1: Single instance deletion
+print("\nTest Case 1: Single instance deletion")
+instance = SimpleModel.objects.create(name='test1')
+print(f"Before deletion - PK: {instance.pk}")
+instance.delete()
+print(f"After deletion - PK: {instance.pk}")
+
+# Test Case 2: Bulk deletion through instance list
+print("\nTest Case 2: Bulk deletion through instance list")
+instances = [
+    SimpleModel.objects.create(name='test2'),
+    SimpleModel.objects.create(name='test3')
+]
+print(f"Before deletion - PKs: {[obj.pk for obj in instances]}")
+for instance in instances:
+    instance.delete()
+print(f"After deletion - PKs: {[obj.pk for obj in instances]}")
+
+# Test Case 3: QuerySet deletion with instance refresh
+print("\nTest Case 3: QuerySet deletion with instance refresh")
+instance = SimpleModel.objects.create(name='test4')
+print(f"Before deletion - PK: {instance.pk}")
+instance.delete()
+print(f"After deletion - PK: {instance.pk}")
+
+# Test Case 4: Delete and recreate
+print("\nTest Case 4: Delete and recreate")
+instance = SimpleModel.objects.create(name='test5')
+original_pk = instance.pk
+print(f"Original PK: {original_pk}")
+instance.delete()
+print(f"After deletion - PK: {instance.pk}")
+instance = SimpleModel.objects.create(name='test5')
+print(f"After recreation - PK: {instance.pk}")  # Should be different from original PK
\ No newline at end of file
diff --git a/reproduce_extended.py b/reproduce_extended.py
new file mode 100644
index 0000000000..8d61a4f50f
--- /dev/null
+++ b/reproduce_extended.py
@@ -0,0 +1,105 @@
+from django.conf import settings
+from django.db import models, transaction
+import os
+
+# Configure minimal Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+)
+
+import django
+django.setup()
+
+# Model with default primary key
+class SimpleModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'reproduction'
+
+# Model with custom primary key
+class CustomPKModel(models.Model):
+    custom_id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'reproduction'
+
+# Base model for inheritance test
+class BaseModel(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'reproduction'
+
+# Inherited model
+class ChildModel(BaseModel):
+    extra = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'reproduction'
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(SimpleModel)
+    schema_editor.create_model(CustomPKModel)
+    schema_editor.create_model(BaseModel)
+    schema_editor.create_model(ChildModel)
+
+print("\nTest Case 1: Basic model deletion")
+instance = SimpleModel.objects.create(name='test1')
+print(f"Before deletion - PK: {instance.pk}")
+instance.delete()
+print(f"After deletion - PK: {instance.pk}")
+
+print("\nTest Case 2: Custom PK model deletion")
+instance = CustomPKModel.objects.create(name='test2')
+print(f"Before deletion - custom_id: {instance.custom_id}")
+instance.delete()
+print(f"After deletion - custom_id: {instance.custom_id}")
+
+print("\nTest Case 3: Deletion within transaction")
+instance = SimpleModel.objects.create(name='test3')
+print(f"Before transaction - PK: {instance.pk}")
+try:
+    with transaction.atomic():
+        instance.delete()
+        print(f"Inside transaction after delete - PK: {instance.pk}")
+        raise Exception("Rollback test")
+except Exception:
+    print(f"After rollback - PK: {instance.pk}")
+
+print("\nTest Case 4: Inherited model deletion")
+instance = ChildModel.objects.create(name='test4', extra='extra')
+print(f"Before deletion - PK: {instance.pk}")
+instance.delete()
+print(f"After deletion - PK: {instance.pk}")
+
+print("\nTest Case 5: Multiple instance deletion")
+instances = [
+    SimpleModel.objects.create(name=f'test5_{i}')
+    for i in range(3)
+]
+print(f"Before deletion - PKs: {[obj.pk for obj in instances]}")
+for instance in instances:
+    instance.delete()
+print(f"After deletion - PKs: {[obj.pk for obj in instances]}")
+
+print("\nTest Case 6: Bulk create and delete")
+instances = SimpleModel.objects.bulk_create([
+    SimpleModel(name=f'test6_{i}')
+    for i in range(3)
+])
+# Refresh instances from database to get their PKs
+instances = list(SimpleModel.objects.filter(name__startswith='test6_'))
+print(f"Before deletion - PKs: {[obj.pk for obj in instances]}")
+for instance in instances:
+    instance.delete()
+print(f"After deletion - PKs: {[obj.pk for obj in instances]}")
\ No newline at end of file
