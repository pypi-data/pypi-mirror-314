diff --git a/django/views/debug.py b/django/views/debug.py
index e6b7d4d821..fc00f5becc 100644
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -83,13 +83,15 @@ class SafeExceptionReporterFilter:
     def cleanse_setting(self, key, value):
         """
         Cleanse an individual setting key/value of sensitive content. If the
-        value is a dictionary, recursively cleanse the keys in that dictionary.
+        value is a dictionary or iterable, recursively cleanse the keys and values.
         """
         try:
             if self.hidden_settings.search(key):
                 cleansed = self.cleansed_substitute
             elif isinstance(value, dict):
                 cleansed = {k: self.cleanse_setting(k, v) for k, v in value.items()}
+            elif isinstance(value, (list, tuple)):
+                cleansed = [self.cleanse_setting(key, item) for item in value]
             else:
                 cleansed = value
         except TypeError:
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..9107412f50
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,51 @@
+from django.conf import settings
+from django.views.debug import SafeExceptionReporterFilter
+import pprint
+
+# Configure Django settings
+settings.configure()
+
+# Test edge cases
+EDGE_CASES = {
+    # Empty list
+    "empty_list": [],
+    
+    # Empty tuple
+    "empty_tuple": (),
+    
+    # Nested empty structures
+    "nested_empty": [[], {}, ()],
+    
+    # Mixed types
+    "mixed_types": [
+        {"secret": 123},  # Number instead of string
+        {"token": None},  # None value
+        {"api_key": []},  # Empty list as value
+        {"password": {}}, # Empty dict as value
+    ],
+    
+    # Deeply nested structure
+    "deep_nest": [
+        [
+            [
+                {"secret": "value"},
+                {"token": [{"nested_secret": "value"}]}
+            ]
+        ]
+    ],
+    
+    # Non-string keys
+    123: "value",
+    None: "secret_value",
+    
+    # Generator expression
+    "generator": (x for x in range(1)),
+}
+
+setattr(settings, 'EDGE_CASES', EDGE_CASES)
+
+# Test the cleansing
+filter = SafeExceptionReporterFilter()
+safe_settings = filter.get_safe_settings()
+print("Safe settings for EDGE_CASES:")
+pprint.pprint(safe_settings["EDGE_CASES"])
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..3420ec8358
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,38 @@
+from django.conf import settings
+from django.views.debug import SafeExceptionReporterFilter
+import pprint
+
+# Configure Django settings
+settings.configure()
+
+# Add the test setting to Django settings
+MY_SETTING = {
+    "foo": "value",
+    "secret": "value",
+    "token": "value",
+    "something": [
+        {"foo": "value"},
+        {"secret": "value"},
+        {"token": "value"},
+    ],
+    "else": [
+        [
+            {"foo": "value"},
+            {"secret": "value"},
+            {"token": "value"},
+        ],
+        [
+            {"foo": "value"},
+            {"secret": "value"},
+            {"token": "value"},
+        ],
+    ]
+}
+
+setattr(settings, 'MY_SETTING', MY_SETTING)
+
+# Test the cleansing
+filter = SafeExceptionReporterFilter()
+safe_settings = filter.get_safe_settings()
+print("Safe settings for MY_SETTING:")
+pprint.pprint(safe_settings["MY_SETTING"])
\ No newline at end of file
