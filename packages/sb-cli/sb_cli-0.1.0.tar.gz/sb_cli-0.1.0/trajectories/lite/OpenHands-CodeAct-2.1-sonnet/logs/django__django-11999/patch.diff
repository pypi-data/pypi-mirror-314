diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0a5e5ff673..635689d93c 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -939,9 +939,16 @@ class Model(metaclass=ModelBase):
     delete.alters_data = True
 
     def _get_FIELD_display(self, field):
+        from django.utils.encoding import force_str
         value = getattr(self, field.attname)
+        choices_dict = dict(field.flatchoices)
+        # Convert value to int if possible since choices are often stored as integers
+        try:
+            value = int(value)
+        except (TypeError, ValueError):
+            pass
         # force_str() to coerce lazy strings.
-        return force_str(dict(field.flatchoices).get(value, value), strings_only=True)
+        return force_str(choices_dict.get(value, value), strings_only=True)
 
     def _get_next_or_previous_by_FIELD(self, field, is_next, **kwargs):
         if not self.pk:
diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index ee45bb941e..345307c419 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -763,8 +763,18 @@ class Field(RegisterLookupMixin):
             if not getattr(cls, self.attname, None):
                 setattr(cls, self.attname, self.descriptor_class(self))
         if self.choices is not None:
-            setattr(cls, 'get_%s_display' % self.name,
-                    partialmethod(cls._get_FIELD_display, field=self))
+            # Create a method that allows overriding get_FOO_display
+            method_name = 'get_%s_display' % self.name
+            
+            # If the method is already defined and it's not our default implementation,
+            # don't override it
+            if hasattr(cls, method_name):
+                existing_method = getattr(cls, method_name)
+                if not isinstance(existing_method, partialmethod):
+                    return
+            
+            # Set up the default implementation that can be overridden
+            setattr(cls, method_name, partialmethod(cls._get_FIELD_display, field=self))
 
     def get_filter_kwargs_for_object(self, obj):
         """
