diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index ba3b62620d..a03b27fa73 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -32,6 +32,8 @@ class StaticFilesStorage(FileSystemStorage):
         if not location:
             self.base_location = None
             self.location = None
+        # Store the original base_url for SCRIPT_NAME handling
+        self._original_base_url = base_url
 
     def path(self, name):
         if not self.location:
@@ -110,7 +112,7 @@ class HashedFilesMixin:
             unparsed_name[2] += '?'
         return urlunsplit(unparsed_name)
 
-    def _url(self, hashed_name_func, name, force=False, hashed_files=None):
+    def _url(self, hashed_name_func, name, force=False, hashed_files=None, context=None):
         """
         Return the non-hashed URL in DEBUG mode.
         """
@@ -123,10 +125,12 @@ class HashedFilesMixin:
             else:
                 args = (clean_name,)
                 if hashed_files is not None:
+                    hashed_files = dict(hashed_files)
+                    hashed_files['context'] = context
                     args += (hashed_files,)
                 hashed_name = hashed_name_func(*args)
 
-        final_url = super().url(hashed_name)
+        final_url = super().url(hashed_name, context=hashed_files.get('context') if hashed_files else None)
 
         # Special casing for a @font-face hack, like url(myfont.eot?#iefix")
         # http://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax
@@ -141,11 +145,21 @@ class HashedFilesMixin:
 
         return unquote(final_url)
 
-    def url(self, name, force=False):
+    def url(self, name, force=False, context=None):
         """
         Return the non-hashed URL in DEBUG mode.
         """
-        return self._url(self.stored_name, name, force)
+        url = self._url(self.stored_name, name, force, context=context)
+        if context and hasattr(context, 'request') and 'SCRIPT_NAME' in context.request.META:
+            script_name = context.request.META['SCRIPT_NAME']
+            if not script_name.endswith('/'):
+                script_name += '/'
+            if not script_name.startswith('/'):
+                script_name = '/' + script_name
+            if not url.startswith('/'):
+                url = '/' + url
+            return script_name + url.lstrip('/')
+        return url
 
     def url_converter(self, name, hashed_files, template=None):
         """
diff --git a/django/core/files/storage.py b/django/core/files/storage.py
index 4c27fce605..8753477319 100644
--- a/django/core/files/storage.py
+++ b/django/core/files/storage.py
@@ -217,7 +217,10 @@ class FileSystemStorage(Storage):
     def base_url(self):
         if self._base_url is not None and not self._base_url.endswith('/'):
             self._base_url += '/'
-        return self._value_or_setting(self._base_url, settings.MEDIA_URL)
+        base_url = self._value_or_setting(self._base_url, settings.MEDIA_URL)
+        if hasattr(self, '_original_base_url'):
+            base_url = self._original_base_url
+        return base_url
 
     @cached_property
     def file_permissions_mode(self):
@@ -326,13 +329,23 @@ class FileSystemStorage(Storage):
     def size(self, name):
         return os.path.getsize(self.path(name))
 
-    def url(self, name):
+    def url(self, name, context=None):
         if self.base_url is None:
             raise ValueError("This file is not accessible via a URL.")
         url = filepath_to_uri(name)
         if url is not None:
             url = url.lstrip('/')
-        return urljoin(self.base_url, url)
+        base_url = self.base_url
+        if not base_url.startswith('/'):
+            base_url = '/' + base_url
+        if context and hasattr(context, 'request') and 'SCRIPT_NAME' in context.request.META:
+            script_name = context.request.META['SCRIPT_NAME']
+            if not script_name.endswith('/'):
+                script_name += '/'
+            if not script_name.startswith('/'):
+                script_name = '/' + script_name
+            return script_name + base_url.lstrip('/') + url
+        return base_url + url
 
     def _datetime_from_timestamp(self, ts):
         """
diff --git a/django/templatetags/static.py b/django/templatetags/static.py
index 39712aaba0..c62d131f29 100644
--- a/django/templatetags/static.py
+++ b/django/templatetags/static.py
@@ -37,17 +37,24 @@ class PrefixNode(template.Node):
         return cls(varname, name)
 
     @classmethod
-    def handle_simple(cls, name):
+    def handle_simple(cls, name, context=None):
         try:
             from django.conf import settings
         except ImportError:
             prefix = ''
         else:
             prefix = iri_to_uri(getattr(settings, name, ''))
+            if context and hasattr(context, 'request') and 'SCRIPT_NAME' in context.request.META:
+                script_name = context.request.META['SCRIPT_NAME']
+                if not script_name.endswith('/'):
+                    script_name += '/'
+                if not prefix.startswith('/'):
+                    prefix = '/' + prefix
+                prefix = script_name + prefix.lstrip('/')
         return prefix
 
     def render(self, context):
-        prefix = self.handle_simple(self.name)
+        prefix = self.handle_simple(self.name, context)
         if self.varname is None:
             return prefix
         context[self.varname] = prefix
@@ -100,7 +107,7 @@ class StaticNode(template.Node):
 
     def url(self, context):
         path = self.path.resolve(context)
-        return self.handle_simple(path)
+        return self.handle_simple(path, context)
 
     def render(self, context):
         url = self.url(context)
@@ -112,12 +119,34 @@ class StaticNode(template.Node):
         return ''
 
     @classmethod
-    def handle_simple(cls, path):
+    def handle_simple(cls, path, context=None):
         if apps.is_installed('django.contrib.staticfiles'):
             from django.contrib.staticfiles.storage import staticfiles_storage
-            return staticfiles_storage.url(path)
+            url = staticfiles_storage.url(path, context=context)
+            if context and hasattr(context, 'request') and 'SCRIPT_NAME' in context.request.META:
+                script_name = context.request.META['SCRIPT_NAME']
+                if not script_name.endswith('/'):
+                    script_name += '/'
+                if not script_name.startswith('/'):
+                    script_name = '/' + script_name
+                if not url.startswith('/'):
+                    url = '/' + url
+                url = script_name + url.lstrip('/')
+            return url
         else:
-            return urljoin(PrefixNode.handle_simple("STATIC_URL"), quote(path))
+            script_name = ''
+            if context and hasattr(context, 'request') and 'SCRIPT_NAME' in context.request.META:
+                script_name = context.request.META['SCRIPT_NAME']
+                if not script_name.endswith('/'):
+                    script_name += '/'
+                if not script_name.startswith('/'):
+                    script_name = '/' + script_name
+            static_url = PrefixNode.handle_simple("STATIC_URL", context)
+            if not static_url.startswith('/'):
+                static_url = '/' + static_url
+            if script_name:
+                return script_name + static_url.lstrip('/') + quote(path)
+            return static_url + quote(path)
 
     @classmethod
     def handle_token(cls, parser, token):
@@ -159,9 +188,9 @@ def do_static(parser, token):
     return StaticNode.handle_token(parser, token)
 
 
-def static(path):
+def static(path, context=None):
     """
     Given a relative path to a static asset, return the absolute path to the
     asset.
     """
-    return StaticNode.handle_simple(path)
+    return StaticNode.handle_simple(path, context)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..9cead35ccb
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,57 @@
+from django.conf import settings
+from django.template import Template, Context
+from django.core.wsgi import get_wsgi_application
+from django.test import RequestFactory, Client
+from django.http import HttpResponse
+from django.urls import path
+import os
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.contrib.staticfiles',
+    ],
+    STATIC_URL='/static/',
+    MIDDLEWARE=[
+        'django.middleware.common.CommonMiddleware',
+    ],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.request',
+            ],
+        },
+    }],
+    ROOT_URLCONF=__name__,
+    ALLOWED_HOSTS=['testserver'],
+)
+
+# Define a view
+def test_view(request):
+    if 'SCRIPT_NAME' in os.environ:
+        request.META['SCRIPT_NAME'] = os.environ['SCRIPT_NAME']
+    template = Template('{% load static %}{% static "test.css" %}')
+    context = Context({'request': request})
+    return HttpResponse(template.render(context))
+
+# Define URL patterns
+urlpatterns = [
+    path('test/', test_view, name='test'),
+]
+
+# Initialize Django
+get_wsgi_application()
+
+# Create a client
+client = Client()
+
+# Test case 1: Without SCRIPT_NAME
+print("Without SCRIPT_NAME:", client.get('/test/').content.decode())
+
+# Test case 2: With SCRIPT_NAME
+os.environ['SCRIPT_NAME'] = '/myapp'
+print("With SCRIPT_NAME:", client.get('/test/').content.decode())
\ No newline at end of file
diff --git a/test_server.py b/test_server.py
new file mode 100644
index 0000000000..a336123e43
--- /dev/null
+++ b/test_server.py
@@ -0,0 +1,46 @@
+from wsgiref.simple_server import make_server
+from wsgi_app import application
+import threading
+import time
+import requests
+
+def run_server():
+    httpd = make_server('', 8000, application)
+    print("Serving on port 8000...")
+    httpd.serve_forever()
+
+# Start server in a thread
+server_thread = threading.Thread(target=run_server)
+server_thread.daemon = True
+server_thread.start()
+
+# Wait for server to start
+time.sleep(1)
+
+# Test without SCRIPT_NAME
+print("Testing without SCRIPT_NAME...")
+response = requests.get('http://localhost:8000/test/')
+print("Response:", response.text)
+
+# Test with SCRIPT_NAME
+print("\nTesting with SCRIPT_NAME...")
+class ScriptNameMiddleware:
+    def __init__(self, app):
+        self.app = app
+
+    def __call__(self, environ, start_response):
+        environ['SCRIPT_NAME'] = '/myapp'
+        return self.app(environ, start_response)
+
+# Create a new server with the middleware
+app_with_script_name = ScriptNameMiddleware(application)
+httpd_with_script_name = make_server('', 8001, app_with_script_name)
+server_thread_with_script_name = threading.Thread(target=httpd_with_script_name.serve_forever)
+server_thread_with_script_name.daemon = True
+server_thread_with_script_name.start()
+
+# Wait for server to start
+time.sleep(1)
+
+response = requests.get('http://localhost:8001/test/')
+print("Response:", response.text)
\ No newline at end of file
diff --git a/test_wsgi.py b/test_wsgi.py
new file mode 100644
index 0000000000..499f2edca4
--- /dev/null
+++ b/test_wsgi.py
@@ -0,0 +1,45 @@
+from wsgiref.simple_server import make_server
+from wsgi_app import application
+import os
+
+def start_response(status, headers):
+    print("Status:", status)
+    print("Headers:", headers)
+    return lambda x: None
+
+# Test without SCRIPT_NAME
+print("Testing without SCRIPT_NAME...")
+environ = {
+    'REQUEST_METHOD': 'GET',
+    'PATH_INFO': '/test/',
+    'SERVER_NAME': 'localhost',
+    'SERVER_PORT': '8000',
+    'wsgi.url_scheme': 'http',
+    'wsgi.input': None,
+    'wsgi.errors': None,
+    'wsgi.version': (1, 0),
+    'wsgi.multithread': False,
+    'wsgi.multiprocess': False,
+    'wsgi.run_once': True,
+}
+response = application(environ, start_response)
+print("Response:", b''.join(response).decode())
+
+# Test with SCRIPT_NAME
+print("\nTesting with SCRIPT_NAME...")
+environ = {
+    'REQUEST_METHOD': 'GET',
+    'PATH_INFO': '/test/',
+    'SCRIPT_NAME': '/myapp',
+    'SERVER_NAME': 'localhost',
+    'SERVER_PORT': '8000',
+    'wsgi.url_scheme': 'http',
+    'wsgi.input': None,
+    'wsgi.errors': None,
+    'wsgi.version': (1, 0),
+    'wsgi.multithread': False,
+    'wsgi.multiprocess': False,
+    'wsgi.run_once': True,
+}
+response = application(environ, start_response)
+print("Response:", b''.join(response).decode())
\ No newline at end of file
diff --git a/test_wsgi_client.py b/test_wsgi_client.py
new file mode 100644
index 0000000000..81d726bd2f
--- /dev/null
+++ b/test_wsgi_client.py
@@ -0,0 +1,22 @@
+import requests
+import threading
+import time
+from test_wsgi_server import httpd
+
+# Start server in a thread
+server_thread = threading.Thread(target=httpd.serve_forever)
+server_thread.daemon = True
+server_thread.start()
+
+# Wait for server to start
+time.sleep(1)
+
+# Test without SCRIPT_NAME
+print("Testing without SCRIPT_NAME...")
+response = requests.get('http://localhost:8000/')
+print("Response:", response.text)
+
+# Test with SCRIPT_NAME
+print("\nTesting with SCRIPT_NAME...")
+response = requests.get('http://localhost:8000/', headers={'SCRIPT_NAME': '/myapp'})
+print("Response:", response.text)
\ No newline at end of file
diff --git a/test_wsgi_server.py b/test_wsgi_server.py
new file mode 100644
index 0000000000..3e711a4c2c
--- /dev/null
+++ b/test_wsgi_server.py
@@ -0,0 +1,18 @@
+from wsgiref.simple_server import make_server
+import os
+
+def application(environ, start_response):
+    status = '200 OK'
+    headers = [('Content-type', 'text/plain')]
+    start_response(status, headers)
+
+    # Print the SCRIPT_NAME
+    print("SCRIPT_NAME:", environ.get('SCRIPT_NAME', ''))
+
+    # Return the SCRIPT_NAME
+    return [environ.get('SCRIPT_NAME', '').encode()]
+
+# Create server
+httpd = make_server('', 8000, application)
+print("Serving on port 8000...")
+httpd.serve_forever()
\ No newline at end of file
diff --git a/test_wsgi_simple.py b/test_wsgi_simple.py
new file mode 100644
index 0000000000..783182ccd6
--- /dev/null
+++ b/test_wsgi_simple.py
@@ -0,0 +1,32 @@
+from wsgi_app import application
+
+# Test without SCRIPT_NAME
+print("Testing without SCRIPT_NAME...")
+environ = {
+    'REQUEST_METHOD': 'GET',
+    'PATH_INFO': '/test/',
+    'SERVER_NAME': 'localhost',
+    'SERVER_PORT': '8000',
+    'wsgi.url_scheme': 'http',
+    'wsgi.input': None,
+    'wsgi.errors': None,
+    'wsgi.version': (1, 0),
+    'wsgi.multithread': False,
+    'wsgi.multiprocess': False,
+    'wsgi.run_once': True,
+    'SCRIPT_NAME': '',
+}
+
+def start_response(status, headers):
+    print("Status:", status)
+    print("Headers:", headers)
+    return lambda x: None
+
+response = application(environ, start_response)
+print("Response:", b''.join(response).decode())
+
+# Test with SCRIPT_NAME
+print("\nTesting with SCRIPT_NAME...")
+environ['SCRIPT_NAME'] = '/myapp'
+response = application(environ, start_response)
+print("Response:", b''.join(response).decode())
\ No newline at end of file
diff --git a/wsgi_app.py b/wsgi_app.py
new file mode 100644
index 0000000000..cf93b67873
--- /dev/null
+++ b/wsgi_app.py
@@ -0,0 +1,57 @@
+from django.conf import settings
+from django.template import Template, Context
+from django.core.wsgi import get_wsgi_application
+from django.http import HttpResponse
+from django.urls import path
+import os
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.contrib.staticfiles',
+    ],
+    STATIC_URL='/static/',
+    MIDDLEWARE=[
+        'django.middleware.common.CommonMiddleware',
+    ],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.request',
+            ],
+        },
+    }],
+    ROOT_URLCONF=__name__,
+    ALLOWED_HOSTS=['*'],
+)
+
+# Define a view
+def test_view(request):
+    print("Request META:", request.META)
+    template = Template('''
+        {% load static %}
+        <html>
+        <head>
+            <link rel="stylesheet" href="{% static 'test.css' %}">
+        </head>
+        <body>
+            <h1>Test Page</h1>
+            <p>SCRIPT_NAME: {{ request.META.SCRIPT_NAME }}</p>
+            <p>Static URL: {% static 'test.css' %}</p>
+        </body>
+        </html>
+    ''')
+    context = Context({'request': request})
+    return HttpResponse(template.render(context))
+
+# Define URL patterns
+urlpatterns = [
+    path('test/', test_view, name='test'),
+]
+
+# Initialize Django
+application = get_wsgi_application()
\ No newline at end of file
