diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..fa8786c2
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,5 @@
+import seaborn.objects as so
+
+# Reproduce the error with boolean data
+plot = so.Plot(["a", "b"], [1, 2], color=[True, False]).add(so.Bar())
+plot.show()
\ No newline at end of file
diff --git a/seaborn/_core/properties.py b/seaborn/_core/properties.py
index cd10e260..a599843c 100644
--- a/seaborn/_core/properties.py
+++ b/seaborn/_core/properties.py
@@ -3,6 +3,7 @@ import itertools
 import warnings
 
 import numpy as np
+import pandas as pd
 from pandas import Series
 import matplotlib as mpl
 from matplotlib.colors import to_rgb, to_rgba, to_rgba_array
@@ -682,6 +683,18 @@ class Color(Property):
         def _mapping(x):
             # Remove alpha channel so it does not override alpha property downstream
             # TODO this will need to be more flexible to support RGBA tuples (see above)
+            # Convert boolean data to numeric before checking for invalid values
+            if isinstance(x, pd.Series):
+                x = x.to_numpy()
+            if isinstance(x, np.ndarray):
+                # Convert array to float, handling boolean values
+                if x.dtype == bool:
+                    x = x.astype(float)
+                else:
+                    # Handle mixed types by converting booleans to float
+                    x = np.array([float(val) if isinstance(val, (bool, np.bool_)) else val for val in x])
+            elif isinstance(x, (bool, np.bool_)):
+                x = float(x)
             invalid = ~np.isfinite(x)
             out = mapping(x)[:, :3]
             out[invalid] = np.nan
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index 6c9ecbc9..4bf22265 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -32,6 +32,7 @@ from matplotlib.dates import (
 )
 from matplotlib.axis import Axis
 from matplotlib.scale import ScaleBase
+import pandas as pd
 from pandas import Series
 
 from seaborn._core.rules import categorical_order
@@ -347,10 +348,19 @@ class ContinuousBase(Scale):
             else:
                 vmin, vmax = new.norm
             vmin, vmax = axis.convert_units((vmin, vmax))
+            # Convert boolean values to integers before normalization
+            if isinstance(vmin, (bool, np.bool_)):
+                vmin = int(vmin)
+                vmax = int(vmax)
             a = forward(vmin)
             b = forward(vmax) - forward(vmin)
 
             def normalize(x):
+                # Convert boolean input to integers
+                if isinstance(x, (np.ndarray, pd.Series)) and x.dtype == bool:
+                    x = x.astype(int)
+                elif isinstance(x, (bool, np.bool_)):
+                    x = int(x)
                 return (x - a) / b
 
         else:
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..8f0288e5
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,18 @@
+import seaborn.objects as so
+import numpy as np
+
+# Test with numpy boolean array
+plot1 = so.Plot(["a", "b"], [1, 2], color=np.array([True, False])).add(so.Bar())
+plot1.show()
+
+# Test with mixed boolean/numeric data
+plot2 = so.Plot(["a", "b", "c"], [1, 2, 3], color=[True, False, 1]).add(so.Bar())
+plot2.show()
+
+# Test with all True values
+plot3 = so.Plot(["a", "b"], [1, 2], color=[True, True]).add(so.Bar())
+plot3.show()
+
+# Test with all False values
+plot4 = so.Plot(["a", "b"], [1, 2], color=[False, False]).add(so.Bar())
+plot4.show()
\ No newline at end of file
