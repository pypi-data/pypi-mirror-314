diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..e5402271d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,14 @@
+from sklearn.utils.validation import check_array
+import pandas as pd
+import warnings
+
+# Enable all warnings
+warnings.simplefilter('always')
+
+# Create test DataFrame
+df = pd.DataFrame([[1, 2, 3], [2, 3, 4]], dtype=object)
+print("Original DataFrame dtype:", df.dtypes[0])
+
+# Try to convert with warn_on_dtype=True
+checked = check_array(df, warn_on_dtype=True)
+print("Converted array dtype:", checked.dtype)
\ No newline at end of file
diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py
index fe1f7236e..4c953950c 100644
--- a/sklearn/utils/validation.py
+++ b/sklearn/utils/validation.py
@@ -461,7 +461,14 @@ def check_array(array, accept_sparse=False, accept_large_sparse=True,
     # store whether originally we wanted numeric dtype
     dtype_numeric = isinstance(dtype, six.string_types) and dtype == "numeric"
 
-    dtype_orig = getattr(array, "dtype", None)
+    # Get original dtype - handle pandas DataFrame case specially
+    if hasattr(array, 'dtypes'):  # pandas DataFrame
+        if len(array.dtypes) > 0:
+            dtype_orig = array.dtypes[0]  # Use first column's dtype as reference
+        else:
+            dtype_orig = None  # Empty DataFrame
+    else:
+        dtype_orig = getattr(array, "dtype", None)
     if not hasattr(dtype_orig, 'kind'):
         # not a data type (e.g. a column named dtype in a pandas DataFrame)
         dtype_orig = None
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..bbe9b82f8
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,35 @@
+from sklearn.utils.validation import check_array
+import pandas as pd
+import numpy as np
+import warnings
+
+# Enable all warnings
+warnings.simplefilter('always')
+
+print("Test 1: Empty DataFrame")
+df = pd.DataFrame([], dtype=object)
+try:
+    checked = check_array(df, warn_on_dtype=True)
+except ValueError as e:
+    print("Got expected ValueError:", str(e))
+
+print("\nTest 2: Mixed dtypes in DataFrame")
+df = pd.DataFrame({
+    'a': [1, 2],
+    'b': ['3', '4'],
+    'c': [5.0, 6.0]
+}, dtype=object)
+checked = check_array(df, warn_on_dtype=True)
+print("Converted array dtype:", checked.dtype)
+
+print("\nTest 3: DataFrame with float dtype")
+df = pd.DataFrame([[1.0, 2.0], [3.0, 4.0]], dtype=np.float64)
+checked = check_array(df, warn_on_dtype=True)
+print("Converted array dtype:", checked.dtype)
+
+print("\nTest 4: DataFrame with non-numeric data")
+df = pd.DataFrame([['a', 'b'], ['c', 'd']], dtype=object)
+try:
+    checked = check_array(df, warn_on_dtype=True)
+except ValueError as e:
+    print("Got expected ValueError:", str(e))
\ No newline at end of file
