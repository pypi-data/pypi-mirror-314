diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py
index e6e7e29f11..8f16e70762 100644
--- a/lib/matplotlib/axis.py
+++ b/lib/matplotlib/axis.py
@@ -1237,8 +1237,10 @@ class Axis(martist.Artist):
         if auto is not None:
             self._set_autoscale_on(bool(auto))
 
+        # Always trigger the callback since limits have changed
+        self.axes.callbacks.process(f"{name}lim_changed", self.axes)
+
         if emit:
-            self.axes.callbacks.process(f"{name}lim_changed", self.axes)
             # Call all of the other axes that are shared with this one
             for other in self._get_shared_axes():
                 if other is not self.axes:
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..a67156edfd
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,42 @@
+import matplotlib.pyplot as plt
+import numpy as np
+
+# Create figure with two subplots sharing x axis
+fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)
+
+# Plot some data
+x = np.linspace(0, 10, 100)
+ax1.plot(x, np.sin(x))
+ax2.plot(x, np.cos(x))
+
+# Counter to track callback calls
+callback_count = {'ax1': 0, 'ax2': 0}
+
+# Define callback functions
+def on_xlim_changed_ax1(event):
+    callback_count['ax1'] += 1
+    print(f"ax1 xlim changed! Count: {callback_count['ax1']}")
+
+def on_xlim_changed_ax2(event):
+    callback_count['ax2'] += 1
+    print(f"ax2 xlim changed! Count: {callback_count['ax2']}")
+
+# Register callbacks
+ax1.callbacks.connect('xlim_changed', on_xlim_changed_ax1)
+ax2.callbacks.connect('xlim_changed', on_xlim_changed_ax2)
+
+print("Initial limits:", ax1.get_xlim())
+
+# Change limits on ax1
+print("\nChanging limits on ax1...")
+ax1.set_xlim(2, 8)
+print("New limits ax1:", ax1.get_xlim())
+print("New limits ax2:", ax2.get_xlim())
+
+# Change limits on ax2
+print("\nChanging limits on ax2...")
+ax2.set_xlim(4, 6)
+print("New limits ax1:", ax1.get_xlim())
+print("New limits ax2:", ax2.get_xlim())
+
+plt.close()
\ No newline at end of file
