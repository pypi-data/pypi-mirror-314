diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 9b00e24509..51f9ad30ec 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -45,6 +45,16 @@ class ResolverMatch:
         self.namespaces = [x for x in namespaces if x] if namespaces else []
         self.namespace = ':'.join(self.namespaces)
 
+        # Handle functools.partial functions
+        if isinstance(func, functools.partial):
+            # Get the underlying function
+            base_func = func.func
+            # Store partial args/kwargs for repr
+            self._partial_args = func.args
+            self._partial_kwargs = func.keywords or {}
+            # Use the base function for path
+            func = base_func
+
         if not hasattr(func, '__name__'):
             # A class-based view
             self._func_path = func.__class__.__module__ + '.' + func.__class__.__name__
@@ -59,8 +69,17 @@ class ResolverMatch:
         return (self.func, self.args, self.kwargs)[index]
 
     def __repr__(self):
+        func_repr = self._func_path
+        if isinstance(self.func, functools.partial):
+            # Include partial args/kwargs in the repr
+            func_repr = "%s.partial(%s%s%s)" % (
+                func_repr,
+                ", ".join(repr(arg) for arg in self._partial_args),
+                ", " if self._partial_args and self._partial_kwargs else "",
+                ", ".join("%s=%r" % item for item in self._partial_kwargs.items())
+            )
         return "ResolverMatch(func=%s, args=%s, kwargs=%s, url_name=%s, app_names=%s, namespaces=%s, route=%s)" % (
-            self._func_path, self.args, self.kwargs, self.url_name,
+            func_repr, self.args, self.kwargs, self.url_name,
             self.app_names, self.namespaces, self.route,
         )
 
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..c81bb876c5
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,35 @@
+from django.urls import ResolverMatch
+import functools
+
+def my_view(request, param1, param2, param3=None):
+    return f"View called with {param1}, {param2}, and {param3}"
+
+# Test case 1: Partial with multiple args and kwargs
+partial_view1 = functools.partial(my_view, "fixed1", param2="fixed2", param3="fixed3")
+match1 = ResolverMatch(partial_view1, (), {}, url_name="test1")
+print("Test 1 - Multiple args and kwargs:")
+print(repr(match1))
+
+# Test case 2: Nested partials
+partial_view2 = functools.partial(my_view, "fixed1")
+nested_partial = functools.partial(partial_view2, param2="fixed2")
+match2 = ResolverMatch(nested_partial, (), {}, url_name="test2")
+print("\nTest 2 - Nested partials:")
+print(repr(match2))
+
+# Test case 3: Partial with no args
+partial_view3 = functools.partial(my_view)
+match3 = ResolverMatch(partial_view3, (), {"param1": "dynamic1", "param2": "dynamic2"}, url_name="test3")
+print("\nTest 3 - Partial with no args:")
+print(repr(match3))
+
+# Test case 4: Class-based view with partial
+class MyClassView:
+    def __call__(self, request, param1, param2):
+        return f"Class view called with {param1} and {param2}"
+
+view_instance = MyClassView()
+partial_view4 = functools.partial(view_instance, param1="fixed")
+match4 = ResolverMatch(partial_view4, (), {"param2": "dynamic"}, url_name="test4")
+print("\nTest 4 - Class-based view with partial:")
+print(repr(match4))
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..f3c749b3fc
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,19 @@
+from django.urls import ResolverMatch
+import functools
+
+def my_view(request, param1, param2):
+    return f"View called with {param1} and {param2}"
+
+# Create a partial function with some args pre-filled
+partial_view = functools.partial(my_view, param1="fixed")
+
+# Create a ResolverMatch instance with the partial function
+match = ResolverMatch(
+    func=partial_view,
+    args=(),
+    kwargs={"param2": "dynamic"},
+    url_name="test_view"
+)
+
+# Print the repr to see how it handles partial functions
+print(repr(match))
\ No newline at end of file
