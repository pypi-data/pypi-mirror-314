diff --git a/reproduce_repr.py b/reproduce_repr.py
new file mode 100644
index 000000000..8d8000b9b
--- /dev/null
+++ b/reproduce_repr.py
@@ -0,0 +1,6 @@
+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold
+
+print("RepeatedKFold repr:")
+print(repr(RepeatedKFold()))
+print("\nRepeatedStratifiedKFold repr:")
+print(repr(RepeatedStratifiedKFold()))
\ No newline at end of file
diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index c49a3ce6a..06cea9405 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -1063,7 +1063,7 @@ class LeavePGroupsOut(BaseCrossValidator):
         return super().split(X, y, groups)
 
 
-class _RepeatedSplits(metaclass=ABCMeta):
+class _RepeatedSplits(BaseCrossValidator, metaclass=ABCMeta):
     """Repeated splits for an arbitrary randomized CV splitter.
 
     Repeats splits for cross-validators n times with different randomization
@@ -1103,6 +1103,27 @@ class _RepeatedSplits(metaclass=ABCMeta):
         self.random_state = random_state
         self.cvargs = cvargs
 
+    def get_n_splits(self, X=None, y=None, groups=None):
+        """Returns the number of splitting iterations in the cross-validator
+
+        Parameters
+        ----------
+        X : object
+            Always ignored, exists for compatibility.
+
+        y : object
+            Always ignored, exists for compatibility.
+
+        groups : object
+            Always ignored, exists for compatibility.
+
+        Returns
+        -------
+        n_splits : int
+            Returns the number of splitting iterations in the cross-validator.
+        """
+        return self.cvargs.get('n_splits', 5) * self.n_repeats
+
     def split(self, X, y=None, groups=None):
         """Generates indices to split data into training and test set.
 
@@ -1213,6 +1234,7 @@ class RepeatedKFold(_RepeatedSplits):
     RepeatedStratifiedKFold: Repeats Stratified K-Fold n times.
     """
     def __init__(self, n_splits=5, n_repeats=10, random_state=None):
+        self.n_splits = n_splits
         super().__init__(
             KFold, n_repeats, random_state, n_splits=n_splits)
 
@@ -1266,6 +1288,7 @@ class RepeatedStratifiedKFold(_RepeatedSplits):
     RepeatedKFold: Repeats K-Fold n times.
     """
     def __init__(self, n_splits=5, n_repeats=10, random_state=None):
+        self.n_splits = n_splits
         super().__init__(
             StratifiedKFold, n_repeats, random_state, n_splits=n_splits)
 
diff --git a/test_repr.py b/test_repr.py
new file mode 100644
index 000000000..bb71b0906
--- /dev/null
+++ b/test_repr.py
@@ -0,0 +1,7 @@
+from sklearn.model_selection import RepeatedKFold, RepeatedStratifiedKFold
+
+print("RepeatedKFold repr:")
+print(repr(RepeatedKFold()))
+
+print("\nRepeatedStratifiedKFold repr:")
+print(repr(RepeatedStratifiedKFold()))
\ No newline at end of file
