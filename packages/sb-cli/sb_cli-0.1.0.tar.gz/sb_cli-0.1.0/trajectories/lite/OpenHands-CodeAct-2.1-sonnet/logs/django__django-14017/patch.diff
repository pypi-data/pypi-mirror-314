diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..c6a97cf35f 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -40,6 +40,14 @@ class Q(tree.Node):
         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)
 
     def _combine(self, other, conn):
+        # Handle Exists objects directly
+        if hasattr(other, 'resolve_expression'):
+            obj = type(self)()
+            obj.connector = conn
+            obj.add(self, conn)
+            obj.add(other, conn)
+            return obj
+        
         if not isinstance(other, Q):
             raise TypeError(other)
 
@@ -64,6 +72,19 @@ class Q(tree.Node):
     def __and__(self, other):
         return self._combine(other, self.AND)
 
+    def __rand__(self, other):
+        """
+        Implements the reverse operation of __and__ to support Exists(...) & Q().
+        """
+        if hasattr(other, 'resolve_expression'):
+            # Create a new Q object with the Exists as the first child
+            obj = type(self)()
+            obj.connector = self.AND
+            obj.add(other, self.AND)
+            obj.add(self, self.AND)
+            return obj
+        return NotImplemented
+
     def __invert__(self):
         obj = type(self)()
         obj.add(self, self.AND)
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..be11016337
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,48 @@
+from django.db.models import Q
+from django.db.models.expressions import Exists
+from django.db.models.query import QuerySet
+
+# Create a mock QuerySet since we don't need a real one for this test
+class MockQuerySet(QuerySet):
+    def __init__(self):
+        pass
+
+# Test case 1: Empty Q() with Exists
+print("Test case 1: Empty Q() with Exists")
+try:
+    result = Q() & Exists(MockQuerySet())
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+# Test case 2: Q with conditions with Exists
+print("\nTest case 2: Q with conditions with Exists")
+try:
+    result = Q(id=1) & Exists(MockQuerySet())
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+# Test case 3: Multiple operations
+print("\nTest case 3: Multiple operations")
+try:
+    result = Q(id=1) & Exists(MockQuerySet()) & Q(name='test')
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+# Test case 4: OR operation
+print("\nTest case 4: OR operation")
+try:
+    result = Q(id=1) | Exists(MockQuerySet())
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
+
+# Test case 5: Complex nested operations
+print("\nTest case 5: Complex nested operations")
+try:
+    result = (Q(id=1) & Exists(MockQuerySet())) | (Q(name='test') & Exists(MockQuerySet()))
+    print("Success:", result)
+except Exception as e:
+    print("Error:", e)
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..8f8700df1b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,23 @@
+from django.db.models import Q
+from django.db.models.expressions import Exists
+from django.db.models.query import QuerySet
+
+# Create a mock QuerySet since we don't need a real one for this test
+class MockQuerySet(QuerySet):
+    def __init__(self):
+        pass
+
+# Test both directions of the operation
+print("Testing Exists(...) & Q():")
+try:
+    result = Exists(MockQuerySet()) & Q()
+    print("Success:", result)
+except TypeError as e:
+    print("Error:", e)
+
+print("\nTesting Q() & Exists(...):")
+try:
+    result = Q() & Exists(MockQuerySet())
+    print("Success:", result)
+except TypeError as e:
+    print("Error:", e)
\ No newline at end of file
