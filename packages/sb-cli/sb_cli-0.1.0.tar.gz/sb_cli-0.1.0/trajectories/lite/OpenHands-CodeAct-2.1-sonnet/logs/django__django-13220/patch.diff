diff --git a/django/core/exceptions.py b/django/core/exceptions.py
index dc084b8692..650db5bdb6 100644
--- a/django/core/exceptions.py
+++ b/django/core/exceptions.py
@@ -182,6 +182,36 @@ class ValidationError(Exception):
     def __repr__(self):
         return 'ValidationError(%s)' % self
 
+    def __eq__(self, other):
+        if not isinstance(other, ValidationError):
+            return NotImplemented
+
+        # Compare error_dict if present
+        if hasattr(self, 'error_dict') and hasattr(other, 'error_dict'):
+            if set(self.error_dict.keys()) != set(other.error_dict.keys()):
+                return False
+            # For each field, compare error lists ignoring order
+            for field in self.error_dict:
+                self_errors = sorted(str(err) for err in self.error_dict[field])
+                other_errors = sorted(str(err) for err in other.error_dict[field])
+                if self_errors != other_errors:
+                    return False
+            return True
+
+        # Compare error_list if present, ignoring order
+        if hasattr(self, 'error_list') and hasattr(other, 'error_list'):
+            self_errors = sorted(str(err) for err in self.error_list)
+            other_errors = sorted(str(err) for err in other.error_list)
+            return self_errors == other_errors
+
+        # Compare simple messages
+        if hasattr(self, 'message') and hasattr(other, 'message'):
+            return (self.message == other.message and
+                   self.code == other.code and
+                   self.params == other.params)
+
+        return False
+
 
 class EmptyResultSet(Exception):
     """A database query predicate is impossible."""
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..fb63be030b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,53 @@
+from django.core.exceptions import ValidationError
+
+# Test case 1: Simple string messages
+error1 = ValidationError("Invalid value")
+error2 = ValidationError("Invalid value")
+print("Test 1 - Simple messages:")
+print(f"error1: {error1}")
+print(f"error2: {error2}")
+print(f"error1 == error2: {error1 == error2}")  # Should be True, but currently False
+
+# Test case 2: List of errors
+error3 = ValidationError(["Error 1", "Error 2"])
+error4 = ValidationError(["Error 1", "Error 2"])
+print("\nTest 2 - List of errors:")
+print(f"error3: {error3}")
+print(f"error4: {error4}")
+print(f"error3 == error4: {error3 == error4}")  # Should be True, but currently False
+
+# Test case 3: Dictionary of errors
+error5 = ValidationError({
+    'field1': ['Error 1', 'Error 2'],
+    'field2': 'Error 3'
+})
+error6 = ValidationError({
+    'field1': ['Error 1', 'Error 2'],
+    'field2': 'Error 3'
+})
+print("\nTest 3 - Dictionary of errors:")
+print(f"error5: {error5}")
+print(f"error6: {error6}")
+print(f"error5 == error6: {error5 == error6}")  # Should be True, but currently False
+
+# Test case 4: Different order in lists
+error7 = ValidationError(["Error 1", "Error 2"])
+error8 = ValidationError(["Error 2", "Error 1"])
+print("\nTest 4 - Different order in lists:")
+print(f"error7: {error7}")
+print(f"error8: {error8}")
+print(f"error7 == error8: {error7 == error8}")  # Should be True per requirements, but currently False
+
+# Test case 5: Different order in dictionary values
+error9 = ValidationError({
+    'field1': ['Error 1', 'Error 2'],
+    'field2': ['Error 3', 'Error 4']
+})
+error10 = ValidationError({
+    'field1': ['Error 2', 'Error 1'],
+    'field2': ['Error 4', 'Error 3']
+})
+print("\nTest 5 - Different order in dictionary values:")
+print(f"error9: {error9}")
+print(f"error10: {error10}")
+print(f"error9 == error10: {error9 == error10}")  # Should be True per requirements, but currently False
\ No newline at end of file
