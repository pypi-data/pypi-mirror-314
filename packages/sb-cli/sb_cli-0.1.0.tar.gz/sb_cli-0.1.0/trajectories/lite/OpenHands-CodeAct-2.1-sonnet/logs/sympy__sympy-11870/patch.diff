diff --git a/sympy/simplify/trigsimp.py b/sympy/simplify/trigsimp.py
index 34a3bab3fc..c79518f8a4 100644
--- a/sympy/simplify/trigsimp.py
+++ b/sympy/simplify/trigsimp.py
@@ -11,6 +11,19 @@
 from sympy.functions.elementary.trigonometric import TrigonometricFunction
 from sympy.functions.elementary.hyperbolic import HyperbolicFunction
 from sympy.functions import sin, cos, exp, cosh, tanh, sinh, tan, cot, coth
+from sympy.core.function import Function
+
+class sinc(Function):
+    """
+    The unnormalized sinc function, sin(x)/x
+    """
+    @classmethod
+    def eval(cls, arg):
+        if arg == 0:
+            return S.One
+        if arg.is_zero:
+            return S.One
+        return sin(arg) / arg
 
 from sympy.strategies.core import identity
 from sympy.strategies.tree import greedy
@@ -510,6 +523,41 @@ def traverse(e):
         'old': lambda x: trigsimp_old(x, **opts),
                    }[method]
 
+    # Try exptrigsimp first if the expression has exponentials
+    if expr.has(exp):
+        # Try different forms of the expression
+        forms = [expr]
+        # Try expanding
+        forms.append(expand(expr))
+        # Try factoring
+        forms.append(factor_terms(expr))
+        # Try different combinations
+        forms.append(factor_terms(expand(expr)))
+        forms.append(expand(factor_terms(expr)))
+        
+        # Try with numerator and denominator separately
+        num, den = expr.as_numer_denom()
+        if den != 1:
+            # Try simplifying numerator and denominator separately
+            num_simp = exptrigsimp(num)
+            den_simp = exptrigsimp(den)
+            if num_simp != num or den_simp != den:
+                return num_simp/den_simp
+            
+            # Try expanding numerator and denominator separately
+            num_exp = expand(num)
+            den_exp = expand(den)
+            if num_exp != num or den_exp != den:
+                num_simp = exptrigsimp(num_exp)
+                den_simp = exptrigsimp(den_exp)
+                if num_simp != num_exp or den_simp != den_exp:
+                    return num_simp/den_simp
+        
+        for form in forms:
+            result = exptrigsimp(form)
+            if result != form:
+                return result
+
     return trigsimpfunc(expr)
 
 
@@ -520,13 +568,17 @@ def exptrigsimp(expr):
     Examples
     ========
 
-    >>> from sympy import exptrigsimp, exp, cosh, sinh
-    >>> from sympy.abc import z
+    >>> from sympy import exptrigsimp, exp, cosh, sinh, I
+    >>> from sympy.abc import z, k
 
     >>> exptrigsimp(exp(z) + exp(-z))
     2*cosh(z)
     >>> exptrigsimp(cosh(z) - sinh(z))
     exp(-z)
+    >>> exptrigsimp(1/2 * (-I*exp(I*k) + I*exp(-I*k)))
+    sin(k)
+    >>> exptrigsimp(1/2/k * (-I*exp(I*k) + I*exp(-I*k)))
+    sinc(k)
     """
     from sympy.simplify.fu import hyper_as_trig, TR2i
     from sympy.simplify.simplify import bottom_up
@@ -538,6 +590,81 @@ def exp_trig(e):
         if e.has(*_trigs):
             choices.append(e.rewrite(exp))
         choices.append(e.rewrite(cos))
+
+        # Handle special cases for exponential to trig conversion
+        if e.has(exp) and e.has(I):
+            try:
+                # First try to match the pattern directly
+                if e.is_Add:
+                    terms = e.args
+                else:
+                    terms = [e]
+
+                # Look for exponential terms
+                exp_terms = []
+                for term in terms:
+                    if term.has(exp):
+                        exp_terms.append(term)
+
+                if len(exp_terms) == 2:
+                    # Check if we have the pattern -I*exp(I*k)/2 + I*exp(-I*k)/2
+                    # or -I*exp(I*k)/(2*k) + I*exp(-I*k)/(2*k)
+                    t1, t2 = exp_terms
+                    if t1.is_Mul and t2.is_Mul:
+                        # Extract the exponential parts
+                        exp1 = [f for f in t1.args if f.is_Function and f.func == exp]
+                        exp2 = [f for f in t2.args if f.is_Function and f.func == exp]
+                        
+                        if exp1 and exp2:
+                            exp1 = exp1[0]
+                            exp2 = exp2[0]
+                            
+                            # Extract the arguments of the exponentials
+                            arg1 = exp1.args[0]
+                            arg2 = exp2.args[0]
+                            
+                            # Check if they are conjugates (one has I*k, other has -I*k)
+                            if arg1.is_Mul and arg2.is_Mul:
+                                k = None
+                                if I in arg1.args and -I in arg2.args:
+                                    k = [a for a in arg1.args if a != I][0]
+                                elif -I in arg1.args and I in arg2.args:
+                                    k = [a for a in arg2.args if a != I][0]
+                                
+                                if k is not None:
+                                    # Check if we have 1/k factor for sinc
+                                    if any(1/k in term.args for term in [t1, t2]):
+                                        return sinc(k)  # sinc(k)
+                                    # Check if we have 1/2 factor
+                                    if any(S.Half in term.args for term in [t1, t2]):
+                                        return sin(k)  # sin(k)
+
+                # If direct pattern match failed, try expanding
+                expanded = expand(e)
+                if expanded != e:
+                    result = exp_trig(expanded)
+                    if result != expanded:
+                        return result
+
+                # Try factoring
+                factored = factor_terms(e)
+                if factored != e:
+                    result = exp_trig(factored)
+                    if result != factored:
+                        return result
+
+                # Try with numerator and denominator separately
+                num, den = e.as_numer_denom()
+                if den != 1:
+                    # Try simplifying numerator and denominator separately
+                    num_simp = exp_trig(num)
+                    den_simp = exp_trig(den)
+                    if num_simp != num or den_simp != den:
+                        return num_simp/den_simp
+
+            except:
+                pass
+
         return min(*choices, key=count_ops)
     newexpr = bottom_up(expr, exp_trig)
