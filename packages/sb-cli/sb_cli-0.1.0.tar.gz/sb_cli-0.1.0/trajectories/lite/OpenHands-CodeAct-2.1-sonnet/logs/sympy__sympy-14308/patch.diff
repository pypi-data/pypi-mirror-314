diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index 09e2b00735..fecbb6655b 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -916,11 +916,31 @@ def _print_BasisDependent(self, expr):
                 #For a general expr
                 else:
                     #We always wrap the measure numbers in
-                    #parentheses
-                    arg_str = self._print(
-                        v).parens()[0]
-
-                    o1.append(arg_str + ' ' + k._pretty_form)
+                    #parentheses and handle baseline alignment
+                    pform = self._print(v)
+                    vform = prettyForm(k._pretty_form)
+                    
+                    # Always use parentheses for consistency
+                    pform = prettyForm(*pform.parens())
+                    
+                    # Add space between coefficient and vector
+                    pform = prettyForm(*pform.right(' '))
+                    
+                    # Combine with vector, adjusting baseline if needed
+                    if pform.baseline > 0:
+                        # For expressions with non-zero baseline (fractions, exponents),
+                        # center the vector vertically relative to the coefficient
+                        # Calculate the vertical center of the coefficient
+                        coeff_center = (pform.height() - 1) // 2
+                        # Adjust vector position to align with center
+                        vform.baseline = coeff_center
+                        combined = prettyForm(*pform.right(vform))
+                        # Set baseline to match coefficient
+                        combined.baseline = pform.baseline
+                        o1.append(combined)
+                    else:
+                        # For simple expressions, keep them on the same line
+                        o1.append(prettyForm(*pform.right(vform)))
                 vectstrs.append(k._pretty_form)
 
         #outstr = u("").join(o1)
