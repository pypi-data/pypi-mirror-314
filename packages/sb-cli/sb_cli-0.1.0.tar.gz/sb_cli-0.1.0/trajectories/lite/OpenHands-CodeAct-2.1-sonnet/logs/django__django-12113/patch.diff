diff --git a/db_default.sqlite3 b/db_default.sqlite3
new file mode 100644
index 0000000000..08bf0933da
Binary files /dev/null and b/db_default.sqlite3 differ
diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index a3ae1f048e..ff1362f40f 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -180,6 +180,7 @@ class DatabaseWrapper(BaseDatabaseWrapper):
             # https://bugs.python.org/issue33496
             'database': str(settings_dict['NAME']),
             'detect_types': Database.PARSE_DECLTYPES | Database.PARSE_COLNAMES,
+            'timeout': 60.0,  # 60 seconds timeout
             **settings_dict['OPTIONS'],
         }
         # Always allow the underlying SQLite connection to be shareable
@@ -202,6 +203,9 @@ class DatabaseWrapper(BaseDatabaseWrapper):
     @async_unsafe
     def get_new_connection(self, conn_params):
         conn = Database.connect(**conn_params)
+        # Enable WAL mode and increase timeout to handle concurrent access
+        conn.execute('PRAGMA journal_mode=WAL')
+        conn.execute('PRAGMA busy_timeout=60000')  # 60 seconds
         conn.create_function("django_date_extract", 2, _sqlite_datetime_extract)
         conn.create_function("django_date_trunc", 2, _sqlite_date_trunc)
         conn.create_function('django_datetime_cast_date', 3, _sqlite_datetime_cast_date)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bcc9d8ada8
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,74 @@
+import os
+import sys
+import django
+from django.test.utils import setup_test_environment
+from django.test.runner import DiscoverRunner
+from django.conf import settings
+
+if __name__ == "__main__":
+    # Configure minimal Django settings
+    os.environ['DJANGO_SETTINGS_MODULE'] = 'test_sqlite'
+    
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': 'db_default.sqlite3',
+                'TEST': {
+                    'NAME': 'test_default.sqlite3',
+                    'SERIALIZE': False
+                },
+            },
+            'other': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': 'db_other.sqlite3',
+                'TEST': {
+                    'NAME': 'test_other.sqlite3',
+                    'SERIALIZE': False
+                },
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+            'django.contrib.sites',
+            'tests.admin_views',
+        ],
+        MIDDLEWARE=[
+            'django.middleware.security.SecurityMiddleware',
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+        ],
+        ROOT_URLCONF='tests.urls',
+        TEMPLATES=[{
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            'APP_DIRS': True,
+            'OPTIONS': {
+                'context_processors': [
+                    'django.template.context_processors.debug',
+                    'django.template.context_processors.request',
+                    'django.contrib.auth.context_processors.auth',
+                    'django.contrib.messages.context_processors.messages',
+                ],
+            },
+        }],
+        SECRET_KEY='dummy-key-for-tests',
+    )
+    
+    django.setup()
+    
+    # Create test runner
+    test_runner = DiscoverRunner(verbosity=2, keepdb=True)
+    
+    # Run the test
+    test_labels = ['tests.admin_views.test_multidb.MultiDatabaseTests.test_add_view']
+    failures = test_runner.run_tests(test_labels)
+    sys.exit(bool(failures))
\ No newline at end of file
diff --git a/test_default.sqlite3 b/test_default.sqlite3
new file mode 100644
index 0000000000..ae7096bd5a
Binary files /dev/null and b/test_default.sqlite3 differ
diff --git a/test_other.sqlite3 b/test_other.sqlite3
new file mode 100644
index 0000000000..ce7978bb64
Binary files /dev/null and b/test_other.sqlite3 differ
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..f56e1797cb
--- /dev/null
+++ b/tests/__init__.py
@@ -0,0 +1 @@
+default_app_config = 'tests.apps.TestsConfig'
\ No newline at end of file
diff --git a/tests/admin_views/migrations/0001_initial.py b/tests/admin_views/migrations/0001_initial.py
new file mode 100644
index 0000000000..8764a85d75
--- /dev/null
+++ b/tests/admin_views/migrations/0001_initial.py
@@ -0,0 +1,36 @@
+from django.db import migrations, models
+from django.conf import settings
+import django.db.models.deletion
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = [
+        ('auth', '0001_initial'),
+        ('contenttypes', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Section',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Book',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100, verbose_name='Â¿Name?')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='UserProxy',
+            fields=[],
+            options={
+                'proxy': True,
+            },
+            bases=('auth.user',),
+        ),
+    ]
\ No newline at end of file
diff --git a/tests/admin_views/migrations/__init__.py b/tests/admin_views/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/tests/apps.py b/tests/apps.py
new file mode 100644
index 0000000000..b793a941c1
--- /dev/null
+++ b/tests/apps.py
@@ -0,0 +1,6 @@
+from django.apps import AppConfig
+import os
+
+class TestsConfig(AppConfig):
+    name = 'tests'
+    path = os.path.dirname(os.path.abspath(__file__))
\ No newline at end of file
