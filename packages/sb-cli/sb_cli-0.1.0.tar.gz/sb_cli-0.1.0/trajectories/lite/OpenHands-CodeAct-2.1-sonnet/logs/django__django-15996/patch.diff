diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py
index 38da1e6ecc..0618d05df1 100644
--- a/django/db/migrations/serializer.py
+++ b/django/db/migrations/serializer.py
@@ -125,10 +125,52 @@ class EnumSerializer(BaseSerializer):
     def serialize(self):
         enum_class = self.value.__class__
         module = enum_class.__module__
-        return (
-            "%s.%s[%r]" % (module, enum_class.__qualname__, self.value.name),
-            {"import %s" % module},
-        )
+        
+        # Special handling for RegexFlag
+        if enum_class.__name__ == "RegexFlag":
+            # Handle empty flags
+            if not self.value:
+                return f"{module}.RegexFlag(0)", {"import %s" % module}
+            
+            # Get individual flags
+            flags = []
+            for flag in enum_class:
+                if self.value & flag.value == flag.value and flag.value != 0:
+                    flags.append(flag)
+            
+            # If we found component flags, combine them
+            if flags:
+                flags_str = " | ".join(f"{module}.{flag.name}" for flag in flags)
+                return flags_str, {"import %s" % module}
+            
+            # Fallback to raw value if no named flags match
+            return f"{module}.RegexFlag({self.value})", {"import %s" % module}
+        
+        # Handle other IntFlag/Flag enums
+        if hasattr(enum_class, "_decompose"):
+            # Special case for empty flags
+            if not self.value:
+                return f"{module}.{enum_class.__qualname__}(0)", {"import %s" % module}
+            
+            # Get the individual flags that make up this value
+            flags = list(enum_class._decompose(self.value))
+            if flags:
+                flags_str = " | ".join(f"{module}.{enum_class.__qualname__}.{flag.name}" for flag in flags)
+                return flags_str, {"import %s" % module}
+            
+            # If no flags were found but value is non-zero, use the raw value
+            if self.value != 0:
+                return f"{module}.{enum_class.__qualname__}({self.value})", {"import %s" % module}
+        
+        # Default behavior for single enum values
+        if hasattr(self.value, "name"):
+            return (
+                "%s.%s[%r]" % (module, enum_class.__qualname__, self.value.name),
+                {"import %s" % module},
+            )
+        
+        # Fallback for unknown cases
+        return f"{module}.{enum_class.__qualname__}({self.value})", {"import %s" % module}
 
 
 class FloatSerializer(BaseSimpleSerializer):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..a7a07831a1
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,25 @@
+import re
+from django.db import models
+from django.db.migrations.serializer import serializer_factory
+
+def test_serialization(value, desc):
+    print(f"\nTesting {desc}...")
+    field = models.IntegerField(default=value)
+    serializer = serializer_factory(field)
+    try:
+        result = serializer.serialize()
+        print("Success! Result:", result)
+    except Exception as e:
+        print("Error:", str(e))
+
+# Test single flag
+test_serialization(re.UNICODE, "single flag (re.UNICODE)")
+
+# Test combined flags
+test_serialization(re.UNICODE | re.IGNORECASE, "combined flags (re.UNICODE | re.IGNORECASE)")
+
+# Test more complex combination
+test_serialization(re.UNICODE | re.IGNORECASE | re.MULTILINE, "three flags combined")
+
+# Test empty flags
+test_serialization(re.RegexFlag(0), "empty flags")
\ No newline at end of file
