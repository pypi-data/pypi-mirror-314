diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..2d0658a0a
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,59 @@
+from sklearn.neighbors import NearestNeighbors
+from sklearn.datasets import make_blobs
+import numpy as np
+
+X, y = make_blobs()
+
+# Test case 1: Float n_neighbors in constructor
+print("Test case 1: Float n_neighbors in constructor")
+try:
+    neighbors = NearestNeighbors(n_neighbors=3.)
+    neighbors.fit(X)
+    neighbors.kneighbors(X)
+except TypeError as e:
+    print(f"Error caught: {str(e)}")
+
+# Test case 2: Float n_neighbors in kneighbors method
+print("\nTest case 2: Float n_neighbors in kneighbors method")
+try:
+    neighbors = NearestNeighbors(n_neighbors=3)
+    neighbors.fit(X)
+    neighbors.kneighbors(X, n_neighbors=3.)
+except TypeError as e:
+    print(f"Error caught: {str(e)}")
+
+# Test case 3: numpy integer types
+print("\nTest case 3: numpy integer types")
+try:
+    neighbors = NearestNeighbors(n_neighbors=np.int32(3))
+    neighbors.fit(X)
+    neighbors.kneighbors(X, n_neighbors=np.int64(3))
+    print("Success: numpy integer types work correctly")
+except TypeError as e:
+    print(f"Error: numpy integer types failed - {str(e)}")
+
+# Test case 4: None value for n_neighbors
+print("\nTest case 4: None value for n_neighbors")
+try:
+    neighbors = NearestNeighbors(n_neighbors=None)
+    neighbors.fit(X)
+    neighbors.kneighbors(X)
+    print("Success: None value works correctly")
+except TypeError as e:
+    print(f"Error: None value failed - {str(e)}")
+
+# Test case 5: Zero or negative n_neighbors
+print("\nTest case 5: Zero or negative n_neighbors")
+try:
+    neighbors = NearestNeighbors(n_neighbors=0)
+    neighbors.fit(X)
+    neighbors.kneighbors(X)
+except ValueError as e:
+    print(f"Success: Caught zero n_neighbors - {str(e)}")
+
+try:
+    neighbors = NearestNeighbors(n_neighbors=-1)
+    neighbors.fit(X)
+    neighbors.kneighbors(X)
+except ValueError as e:
+    print(f"Success: Caught negative n_neighbors - {str(e)}")
\ No newline at end of file
diff --git a/sklearn/neighbors/base.py b/sklearn/neighbors/base.py
index 3e5e729c2..b2bcaf5be 100644
--- a/sklearn/neighbors/base.py
+++ b/sklearn/neighbors/base.py
@@ -107,6 +107,11 @@ class NeighborsBase(six.with_metaclass(ABCMeta, BaseEstimator)):
                  algorithm='auto', leaf_size=30, metric='minkowski',
                  p=2, metric_params=None, n_jobs=1):
 
+        if n_neighbors is not None and not isinstance(n_neighbors, (int, np.integer)):
+            raise TypeError(
+                "n_neighbors does not take %s value, "
+                "enter integer value" % type(n_neighbors))
+
         self.n_neighbors = n_neighbors
         self.radius = radius
         self.algorithm = algorithm
@@ -327,6 +332,13 @@ class KNeighborsMixin(object):
 
         if n_neighbors is None:
             n_neighbors = self.n_neighbors
+            if n_neighbors is None:
+                raise ValueError(
+                    "n_neighbors parameter is required for kneighbors query")
+        elif not isinstance(n_neighbors, (int, np.integer)):
+            raise TypeError(
+                "n_neighbors does not take %s value, "
+                "enter integer value" % type(n_neighbors))
 
         if X is not None:
             query_is_train = False
