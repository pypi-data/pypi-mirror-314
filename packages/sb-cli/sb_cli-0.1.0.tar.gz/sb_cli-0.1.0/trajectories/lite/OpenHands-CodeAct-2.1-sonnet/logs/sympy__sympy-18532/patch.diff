diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..3897941200
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,46 @@
+from sympy import Symbol, Function, sin, I, pi, S
+from sympy.core.basic import Atom
+
+# Create some test expressions
+x = Symbol('x')
+y = Symbol('y')
+f = Function('f')
+
+# Test case 1: Simple expression with atoms
+expr1 = 1 + x + 2*sin(y + I*pi)
+print("Test case 1: Simple expression")
+print("Expression:", expr1)
+print("Current atoms():", expr1.atoms())
+print("All objects with no args:", {a for a in expr1.atoms() if not a.args})
+print()
+
+# Test case 2: Expression with special numbers
+expr2 = S.Zero + S.One + S.Infinity + x
+print("Test case 2: Expression with special numbers")
+print("Expression:", expr2)
+print("Current atoms():", expr2.atoms())
+print("All objects with no args:", {a for a in expr2.atoms() if not a.args})
+print()
+
+# Test case 3: Expression with nested functions
+expr3 = f(x) + sin(y)
+print("Test case 3: Expression with nested functions")
+print("Expression:", expr3)
+print("Current atoms():", expr3.atoms())
+print("All objects with no args:", {a for a in expr3.atoms() if not a.args})
+print()
+
+# Test case 4: Edge cases with empty args
+from sympy.core.expr import AtomicExpr
+
+class EmptyArgsAtom(AtomicExpr):
+    @property
+    def args(self):
+        return ()
+
+empty_atom = EmptyArgsAtom()
+expr4 = empty_atom + x
+print("Test case 4: Edge cases")
+print("Expression:", expr4)
+print("Current atoms():", expr4.atoms())
+print("All objects with no args:", {a for a in expr4.atoms() if not a.args})
\ No newline at end of file
diff --git a/sympy/core/basic.py b/sympy/core/basic.py
index 6866648d4e..c3684721c1 100644
--- a/sympy/core/basic.py
+++ b/sympy/core/basic.py
@@ -503,13 +503,18 @@ def atoms(self, *types):
         if types:
             types = tuple(
                 [t if isinstance(t, type) else type(t) for t in types])
+            result = set()
+            for expr in preorder_traversal(self):
+                if isinstance(expr, types):
+                    result.add(expr)
+            return result
         else:
-            types = (Atom,)
-        result = set()
-        for expr in preorder_traversal(self):
-            if isinstance(expr, types):
-                result.add(expr)
-        return result
+            # When no types are specified, return objects with no args
+            result = set()
+            for expr in preorder_traversal(self):
+                if not expr.args:
+                    result.add(expr)
+            return result
 
     @property
     def free_symbols(self):
