diff --git a/django/urls/resolvers.py b/django/urls/resolvers.py
index 2154a46320..c6935e70fc 100644
--- a/django/urls/resolvers.py
+++ b/django/urls/resolvers.py
@@ -17,6 +17,7 @@ from django.conf import settings
 from django.core.checks import Error, Warning
 from django.core.checks.urls import check_resolver
 from django.core.exceptions import ImproperlyConfigured, ViewDoesNotExist
+from django.http import Http404
 from django.utils.datastructures import MultiValueDict
 from django.utils.functional import cached_property
 from django.utils.http import RFC3986_SUBDELIMS, escape_leading_slashes
@@ -260,6 +261,10 @@ class RoutePattern(CheckURLMixin):
                     kwargs[key] = converter.to_python(value)
                 except ValueError:
                     return None
+                except Http404:
+                    # Let Http404 exceptions from path converters propagate up
+                    # so they can be handled by the normal exception handling
+                    raise
             return path[match.end():], (), kwargs
         return None
 
diff --git a/django/views/debug.py b/django/views/debug.py
index cb3e8c7ec1..d1853894d5 100644
--- a/django/views/debug.py
+++ b/django/views/debug.py
@@ -5,7 +5,7 @@ import types
 from pathlib import Path
 
 from django.conf import settings
-from django.http import HttpResponse, HttpResponseNotFound
+from django.http import Http404, HttpResponse, HttpResponseNotFound
 from django.template import Context, Engine, TemplateDoesNotExist
 from django.template.defaultfilters import pprint
 from django.urls import Resolver404, resolve
@@ -483,7 +483,7 @@ def technical_404_response(request, exception):
     caller = ''
     try:
         resolver_match = resolve(request.path)
-    except Resolver404:
+    except (Resolver404, Http404):
         pass
     else:
         obj = resolver_match.func
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..e634cfda00
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,50 @@
+from django.conf import settings
+import django
+from django.http import Http404, HttpResponse
+from django.urls import path, register_converter
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='dummy',
+    ROOT_URLCONF=__name__,
+    ALLOWED_HOSTS=['*'],
+)
+
+# Custom path converter that raises Http404
+class CustomConverter:
+    regex = '[0-9]+'
+    
+    def to_python(self, value):
+        if value == '404':
+            raise Http404("Item not found")
+        return int(value)
+    
+    def to_url(self, value):
+        return str(value)
+
+# Register the custom converter
+register_converter(CustomConverter, 'custom')
+
+# Define a simple view
+def test_view(request, param):
+    return HttpResponse(f"Value: {param}")
+
+# URL patterns
+urlpatterns = [
+    path('test/<custom:param>/', test_view),
+]
+
+if __name__ == '__main__':
+    django.setup()
+    
+    # Create a simple WSGI app
+    from django.core.handlers.wsgi import WSGIHandler
+    from wsgiref.simple_server import make_server
+    
+    application = WSGIHandler()
+    
+    # Run the server
+    httpd = make_server('', 8000, application)
+    print("Server running at http://localhost:8000/")
+    httpd.serve_forever()
\ No newline at end of file
diff --git a/server.log b/server.log
new file mode 100644
index 0000000000..20c8b1c5c5
--- /dev/null
+++ b/server.log
@@ -0,0 +1 @@
+Not Found: /test/404/
