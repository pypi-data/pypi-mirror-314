diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index f32ce64629..3e13bf4e1b 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1587,7 +1587,7 @@ class DurationField(Field):
     empty_strings_allowed = False
     default_error_messages = {
         'invalid': _("'%(value)s' value has an invalid format. It must be in "
-                     "[DD] [HH:[MM:]]ss[.uuuuuu] format.")
+                     "[DD] [[HH:]MM:]ss[.uuuuuu] format.")
     }
     description = _("Duration")
 
@@ -1631,10 +1631,13 @@ class DurationField(Field):
         return '' if val is None else duration_string(val)
 
     def formfield(self, **kwargs):
-        return super().formfield(**{
+        defaults = {
             'form_class': forms.DurationField,
-            **kwargs,
-        })
+            'help_text': _("Enter a duration in the format: [DD] [[HH:]MM:]ss[.uuuuuu] "
+                          "(e.g. '14:00' for 14 minutes, '1:14:00' for 1 hour 14 minutes)"),
+        }
+        defaults.update(kwargs)
+        return super().formfield(**defaults)
 
 
 class EmailField(CharField):
diff --git a/django/forms/fields.py b/django/forms/fields.py
index a977256525..1f582380e6 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -468,7 +468,8 @@ class DateTimeField(BaseTemporalField):
 
 class DurationField(Field):
     default_error_messages = {
-        'invalid': _('Enter a valid duration.'),
+        'invalid': _("Enter a duration in the format: [DD] [[HH:]MM:]ss[.uuuuuu] "
+                    "(e.g. '14:00' for 14 minutes, '1:14:00' for 1 hour 14 minutes)"),
         'overflow': _('The number of days must be between {min_days} and {max_days}.')
     }
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..673a233df1
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,43 @@
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.core.exceptions import ValidationError
+from django import forms
+
+class TestModel(models.Model):
+    duration = models.DurationField()
+
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+class TestForm(forms.ModelForm):
+    class Meta:
+        model = TestModel
+        fields = ['duration']
+
+# Show form field help text
+form = TestForm()
+print("Form field help text:", form['duration'].help_text)
+
+# Show form field error message
+try:
+    form = TestForm(data={'duration': 'invalid'})
+    form.is_valid()
+    print("\nForm validation errors:", form.errors['duration'][0])
+except Exception as e:
+    print("\nError:", str(e))
+
+# Try to validate a duration in HH:MM format
+try:
+    form = TestForm(data={'duration': '14:00'})
+    form.is_valid()
+    print("\nError for '14:00':", form.errors['duration'][0])
+except Exception as e:
+    print("\nError:", str(e))
\ No newline at end of file
