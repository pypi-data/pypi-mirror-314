diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..abd29f96df
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,9 @@
+import sympy
+
+class C:
+    def __repr__(self):
+        return 'x.y'
+
+_ = sympy.Symbol('x') == C()
+
+print("If you see this, the error was fixed!")
\ No newline at end of file
diff --git a/repro2.py b/repro2.py
new file mode 100644
index 0000000000..ae4c086fed
--- /dev/null
+++ b/repro2.py
@@ -0,0 +1,9 @@
+import sympy
+
+class C:
+    def __repr__(self):
+        return 'x'
+
+assert sympy.Symbol('x') != C()  # should pass now
+
+print("If you see this, both fixes work!")
\ No newline at end of file
diff --git a/sympy/core/expr.py b/sympy/core/expr.py
index 24d89897f7..55a0051300 100644
--- a/sympy/core/expr.py
+++ b/sympy/core/expr.py
@@ -120,14 +120,20 @@ def _hashable_content(self):
         return self._args
 
     def __eq__(self, other):
-        try:
-            other = sympify(other)
-            if not isinstance(other, Expr):
+        # First try to handle known safe types that can be sympified
+        if isinstance(other, (int, float, str, bool)) or other is None:
+            try:
+                other = sympify(other)
+                if not isinstance(other, Expr):
+                    return False
+            except (SympifyError, SyntaxError):
                 return False
-        except (SympifyError, SyntaxError):
+        # For unknown types, don't try to sympify to avoid evaluating arbitrary code
+        elif not isinstance(other, Expr):
             return False
+            
         # check for pure number expr
-        if  not (self.is_Number and other.is_Number) and (
+        if not (self.is_Number and other.is_Number) and (
                 type(self) != type(other)):
             return False
         a, b = self._hashable_content(), other._hashable_content()
