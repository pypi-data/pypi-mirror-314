+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sphinx/domains/python.py
	modified:   sphinx/environment/adapters/toctree.py
	modified:   sphinx/environment/collectors/title.py
	modified:   sphinx/environment/collectors/toctree.py
	modified:   sphinx/io.py
	modified:   sphinx/parsers.py
	modified:   sphinx/roles.py
	modified:   sphinx/transforms/__init__.py
	modified:   sphinx/util/rst.py
	modified:   tox.ini

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	test_complex/
	test_domain_heading/
	test_multiple/

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 71db08c05197545944949d5aa76cd340e7143627
Author: James Addison <55152140+jayaddison@users.noreply.github.com>
Date:   Sun Jul 23 14:31:09 2023 +0100

    Style refactoring in the ``linkcheck`` builder (#11501)
    
    - Omit a variable that is unused aside from a ``return`` statement on the subsequent line.
    - Extract a variable for readability, and to reduce the complexity of a line.

diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index b4ee064ed..428669349 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -441,7 +441,8 @@ class HyperlinkAvailabilityCheckWorker(Thread):
             return 'broken', error_message, 0
 
         # Success; clear rate limits for the origin
-        self.rate_limits.pop(urlsplit(req_url).netloc, None)
+        netloc = urlsplit(req_url).netloc
+        self.rate_limits.pop(netloc, None)
 
         if ((response_url.rstrip('/') == req_url.rstrip('/'))
                 or _allowed_redirect(req_url, response_url,
@@ -503,8 +504,7 @@ def _get_request_headers(
 
     for u in candidates:
         if u in request_headers:
-            headers = {**DEFAULT_REQUEST_HEADERS, **request_headers[u]}
-            return headers
+            return {**DEFAULT_REQUEST_HEADERS, **request_headers[u]}
     return {}
 
 
+ git diff 71db08c05197545944949d5aa76cd340e7143627
diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 3fda52703..f70c95ac3 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -1104,6 +1104,22 @@ class PyXRefRole(XRefRole):
                      has_explicit_title: bool, title: str, target: str) -> tuple[str, str]:
         refnode['py:module'] = env.ref_context.get('py:module')
         refnode['py:class'] = env.ref_context.get('py:class')
+
+        # Check if we're in a title node
+        parent = refnode.parent
+        while parent:
+            if isinstance(parent, nodes.title):
+                # We're in a title, so preserve both the original title and target
+                refnode['title'] = title
+                refnode['reftarget'] = target
+                refnode['in_title'] = True
+                # Also store the reftype for later use
+                refnode['reftype'] = self.name.split(':')[1] if ':' in self.name else self.name
+                # Store the original text for later use
+                refnode['original_text'] = title
+                break
+            parent = parent.parent
+
         if not has_explicit_title:
             title = title.lstrip('.')    # only has a meaning for the target
             target = target.lstrip('~')  # only has a meaning for the title
@@ -1119,6 +1135,11 @@ class PyXRefRole(XRefRole):
         if target[0:1] == '.':
             target = target[1:]
             refnode['refspecific'] = True
+
+        # If we're in a title, preserve the original text
+        if refnode.get('in_title'):
+            title = refnode['original_text']
+
         return title, target
 
 
diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py
index a7e9eca89..02f161c26 100644
--- a/sphinx/environment/adapters/toctree.py
+++ b/sphinx/environment/adapters/toctree.py
@@ -132,7 +132,17 @@ class TocTree:
                         # toctree originates
                         ref = toctreenode['parent']
                         if not title:
-                            title = clean_astext(self.env.titles[ref])
+                            # Get the title from the referenced document
+                            title_node = self.env.titles[ref]
+                            # Check for domain directives in title
+                            for ref_node in title_node.findall(addnodes.pending_xref):
+                                if ref_node.get('reftype') == 'mod':
+                                    # Found a module domain directive, use its target
+                                    title = ref_node['reftarget']
+                                    break
+                            else:
+                                # No domain directives found, use normal processing
+                                title = clean_astext(title_node)
                         reference = nodes.reference('', '', internal=True,
                                                     refuri=ref,
                                                     anchorname='',
@@ -166,12 +176,27 @@ class TocTree:
                         else:
                             toc = toc.deepcopy()
                         process_only_nodes(toc, builder.tags)
-                        if title and toc.children and len(toc.children) == 1:
+                        if toc.children and len(toc.children) == 1:
                             child = toc.children[0]
                             for refnode in child.findall(nodes.reference):
                                 if refnode['refuri'] == ref and \
                                    not refnode['anchorname']:
-                                    refnode.children = [nodes.Text(title)]
+                                    if title:
+                                        # Use provided title
+                                        refnode.children = [nodes.Text(title)]
+                                    else:
+                                        # Get title from referenced document
+                                        title_node = self.env.titles[ref]
+                                        # Check for domain directives in title
+                                        for ref_node in title_node.findall(addnodes.pending_xref):
+                                            if ref_node.get('reftype') == 'mod':
+                                                # Found a module domain directive, use its target
+                                                title = ref_node['reftarget']
+                                                break
+                                        else:
+                                            # No domain directives found, use normal processing
+                                            title = clean_astext(title_node)
+                                        refnode.children = [nodes.Text(title)]
                     if not toc.children:
                         # empty toc means: no titles will show up in the toctree
                         logger.warning(__('toctree contains reference to document %r that '
diff --git a/sphinx/environment/collectors/title.py b/sphinx/environment/collectors/title.py
index 45dfbd095..c912ecb21 100644
--- a/sphinx/environment/collectors/title.py
+++ b/sphinx/environment/collectors/title.py
@@ -6,6 +6,7 @@ from typing import Any
 
 from docutils import nodes
 
+from sphinx import addnodes
 from sphinx.application import Sphinx
 from sphinx.environment import BuildEnvironment
 from sphinx.environment.collectors import EnvironmentCollector
@@ -38,9 +39,19 @@ class TitleCollector(EnvironmentCollector):
             longtitlenode += nodes.Text(doctree['title'])
         # look for first section title and use that as the title
         for node in doctree.findall(nodes.section):
-            visitor = SphinxContentsFilter(doctree)
-            node[0].walkabout(visitor)
-            titlenode += visitor.get_entry_text()
+            if len(node) > 0 and isinstance(node[0], nodes.title):
+                title = node[0]
+                # Check for domain directives in title
+                for ref in title.findall(addnodes.pending_xref):
+                    if ref.get('reftype') == 'mod':
+                        # Found a module domain directive, use its target
+                        titlenode += nodes.Text(ref['reftarget'])
+                        break
+                else:
+                    # No domain directives found, use normal processing
+                    visitor = SphinxContentsFilter(doctree)
+                    title.walkabout(visitor)
+                    titlenode += visitor.get_entry_text()
             break
         else:
             # document has no title
diff --git a/sphinx/environment/collectors/toctree.py b/sphinx/environment/collectors/toctree.py
index 7e4e887e6..387245be4 100644
--- a/sphinx/environment/collectors/toctree.py
+++ b/sphinx/environment/collectors/toctree.py
@@ -70,11 +70,19 @@ class TocTreeCollector(EnvironmentCollector):
                 # resolved in self.get_and_resolve_doctree)
                 if isinstance(sectionnode, nodes.section):
                     title = sectionnode[0]
-                    # copy the contents of the section title, but without references
-                    # and unnecessary stuff
-                    visitor = SphinxContentsFilter(doctree)
-                    title.walkabout(visitor)
-                    nodetext = visitor.get_entry_text()
+                    # Check for domain directives in title
+                    nodetext = []
+                    for ref in title.findall(addnodes.pending_xref):
+                        if 'title' in ref:
+                            # Found a domain directive with preserved title
+                            nodetext.append(nodes.Text(ref['title']))
+                            break
+                    else:
+                        # No domain directives found, use normal processing
+                        visitor = SphinxContentsFilter(doctree)
+                        title.walkabout(visitor)
+                        nodetext = visitor.get_entry_text()
+
                     anchorname = _make_anchor_name(sectionnode['ids'], numentries)
                     # make these nodes:
                     # list_item -> compact_paragraph -> reference
diff --git a/sphinx/io.py b/sphinx/io.py
index efd2b4ea9..91ab011d7 100644
--- a/sphinx/io.py
+++ b/sphinx/io.py
@@ -108,10 +108,24 @@ class SphinxStandaloneReader(SphinxBaseReader):
         """Read content from source and do post-process."""
         content = self.source.read()
 
-        # emit "source-read" event
-        arg = [content]
-        env.events.emit('source-read', env.docname, arg)
-        return arg[0]
+        # Check if the content starts with a domain directive title
+        lines = content.splitlines()
+        if lines and ':' in lines[0] and '`' in lines[0]:
+            # Found a domain directive title, preserve it
+            title_line = lines[0]
+            underline_line = lines[1] if len(lines) > 1 else ''
+            # Remove title and underline temporarily
+            lines = lines[2:]
+            # Emit "source-read" event with modified content
+            arg = ['\n'.join(lines)]
+            env.events.emit('source-read', env.docname, arg)
+            # Restore title and underline
+            return '\n'.join([title_line, underline_line, arg[0]])
+        else:
+            # No domain directive title, process normally
+            arg = [content]
+            env.events.emit('source-read', env.docname, arg)
+            return arg[0]
 
 
 class SphinxI18nReader(SphinxBaseReader):
diff --git a/sphinx/parsers.py b/sphinx/parsers.py
index 3bcd69f52..29923129d 100644
--- a/sphinx/parsers.py
+++ b/sphinx/parsers.py
@@ -76,7 +76,26 @@ class RSTParser(docutils.parsers.rst.Parser, Parser):
         else:
             inputlines = inputstring
 
-        self.decorate(inputlines)
+        # Check if the first line contains a domain directive
+        if len(inputlines) >= 2 and ':' in inputlines[0] and '`' in inputlines[0]:
+            # Found a domain directive title, preserve it
+            title_line = inputlines[0]
+            title_source = inputlines.source(0)
+            title_offset = inputlines.offset(0)
+            underline_line = inputlines[1]
+            underline_source = inputlines.source(1)
+            underline_offset = inputlines.offset(1)
+            # Remove title and underline temporarily
+            del inputlines[0:2]
+            # Apply prolog and epilog
+            self.decorate(inputlines)
+            # Restore title and underline with their original source info
+            inputlines.insert(0, underline_line, underline_source, underline_offset)
+            inputlines.insert(0, title_line, title_source, title_offset)
+        else:
+            # No domain directive title, process normally
+            self.decorate(inputlines)
+
         self.statemachine.run(inputlines, document, inliner=self.inliner)
         self.finish_parse()
 
diff --git a/sphinx/roles.py b/sphinx/roles.py
index 6a3558f02..f226c33d4 100644
--- a/sphinx/roles.py
+++ b/sphinx/roles.py
@@ -148,6 +148,15 @@ class XRefRole(ReferenceRole):
         reference node and must return a new (or the same) ``(title, target)``
         tuple.
         """
+        # Check if we're in a title node
+        parent = refnode.parent
+        while parent:
+            if isinstance(parent, nodes.title):
+                # We're in a title, so make sure the title text is preserved
+                refnode['title'] = title
+                break
+            parent = parent.parent
+
         return title, ws_re.sub(' ', target)
 
     def result_nodes(self, document: nodes.document, env: BuildEnvironment, node: Element,
diff --git a/sphinx/transforms/__init__.py b/sphinx/transforms/__init__.py
index f36473084..fa303eb6f 100644
--- a/sphinx/transforms/__init__.py
+++ b/sphinx/transforms/__init__.py
@@ -290,11 +290,30 @@ class SphinxContentsFilter(ContentsFilter):
     Used with BuildEnvironment.add_toc_from() to discard cross-file links
     within table-of-contents link nodes.
     """
-    visit_pending_xref = ContentsFilter.ignore_node_but_process_children
+    def visit_pending_xref(self, node: nodes.pending_xref) -> None:
+        if node.get('in_title'):
+            # Found a domain directive in a title
+            if node.get('reftype') == 'mod':
+                # For module references, use the target
+                self.get_entry_text().append(nodes.Text(node['reftarget']))
+            else:
+                # For other references, use the original text
+                self.get_entry_text().append(nodes.Text(node['original_text']))
+            # Add any text that follows
+            next_node = node.next_node(descend=False, siblings=True)
+            if isinstance(next_node, nodes.Text):
+                self.get_entry_text().append(nodes.Text(next_node.astext()))
+        else:
+            # Not in a title, use normal processing
+            self.ignore_node_but_process_children(node)
 
     def visit_image(self, node: nodes.image) -> None:
         raise nodes.SkipNode
 
+    def visit_desc_name(self, node: nodes.Element) -> None:
+        # Process desc_name nodes (domain directive names) by getting their text content
+        self.get_entry_text().extend(node.traverse(nodes.Text))
+
 
 class SphinxSmartQuotes(SmartQuotes, SphinxTransform):
     """
diff --git a/sphinx/util/rst.py b/sphinx/util/rst.py
index 7a1538325..ad2fdf637 100644
--- a/sphinx/util/rst.py
+++ b/sphinx/util/rst.py
@@ -79,9 +79,18 @@ def prepend_prolog(content: StringList, prolog: str) -> None:
     """Prepend a string to content body as prolog."""
     if prolog:
         pos = 0
-        for line in content:
+        has_domain_title = False
+        title_underline_pos = 0
+
+        # Check if first non-docinfo line is a domain directive title
+        for i, line in enumerate(content):
             if docinfo_re.match(line):
-                pos += 1
+                pos = i + 1
+            elif i == pos and ':' in line and '`' in line:
+                # This looks like a domain directive title
+                has_domain_title = True
+                title_underline_pos = i + 1
+                break
             else:
                 break
 
@@ -90,7 +99,12 @@ def prepend_prolog(content: StringList, prolog: str) -> None:
             content.insert(pos, '', '<generated>', 0)
             pos += 1
 
-        # insert prolog (after docinfo if exists)
+        # If we have a domain directive title, insert prolog after the title and its underline
+        if has_domain_title:
+            # Skip title and underline
+            pos = title_underline_pos + 1
+
+        # insert prolog
         for lineno, line in enumerate(prolog.splitlines()):
             content.insert(pos + lineno, line, '<rst_prolog>', lineno)
 
diff --git a/tox.ini b/tox.ini
index 512aa5f74..84c8093a3 100644
--- a/tox.ini
+++ b/tox.ini
@@ -24,7 +24,7 @@ setenv =
     PYTHONWARNINGS = error
     PYTEST_ADDOPTS = {env:PYTEST_ADDOPTS:} --color yes
 commands=
-    python -X dev -X warn_default_encoding -m pytest --durations 25 {posargs}
+    python -X dev -X warn_default_encoding -m pytest -rA --durations 25 {posargs}
 
 [testenv:docs]
 basepython = python3
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e '.[test]'
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: sphinxcontrib-applehelp in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (2.0.0)
Requirement already satisfied: sphinxcontrib-devhelp in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (2.0.0)
Requirement already satisfied: sphinxcontrib-jsmath in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (1.0.1)
Requirement already satisfied: sphinxcontrib-htmlhelp>=2.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (2.1.0)
Requirement already satisfied: sphinxcontrib-serializinghtml>=1.1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (2.0.0)
Requirement already satisfied: sphinxcontrib-qthelp in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (2.0.0)
Requirement already satisfied: Jinja2>=3.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (3.1.4)
Requirement already satisfied: Pygments>=2.13 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (2.18.0)
Requirement already satisfied: docutils<0.21,>=0.18.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (0.20.1)
Requirement already satisfied: snowballstemmer>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (2.2.0)
Requirement already satisfied: babel>=2.9 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (2.16.0)
Requirement already satisfied: alabaster<0.8,>=0.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (0.7.16)
Requirement already satisfied: imagesize>=1.3 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (1.4.1)
Requirement already satisfied: requests>=2.25.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (2.32.3)
Requirement already satisfied: packaging>=21.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (24.1)
Requirement already satisfied: importlib-metadata>=4.8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (8.5.0)
Requirement already satisfied: pytest>=4.6 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (8.3.3)
Requirement already satisfied: html5lib in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (1.1)
Requirement already satisfied: cython in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (3.0.11)
Requirement already satisfied: filelock in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==7.1.0) (3.16.1)
Requirement already satisfied: zipp>=3.20 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from importlib-metadata>=4.8->Sphinx==7.1.0) (3.20.2)
Requirement already satisfied: MarkupSafe>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Jinja2>=3.0->Sphinx==7.1.0) (3.0.2)
Requirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=4.6->Sphinx==7.1.0) (2.0.0)
Requirement already satisfied: pluggy<2,>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=4.6->Sphinx==7.1.0) (1.5.0)
Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=4.6->Sphinx==7.1.0) (1.2.2)
Requirement already satisfied: tomli>=1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest>=4.6->Sphinx==7.1.0) (2.0.2)
Requirement already satisfied: charset-normalizer<4,>=2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.25.0->Sphinx==7.1.0) (3.4.0)
Requirement already satisfied: idna<4,>=2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.25.0->Sphinx==7.1.0) (3.10)
Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.25.0->Sphinx==7.1.0) (2.2.3)
Requirement already satisfied: certifi>=2017.4.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.25.0->Sphinx==7.1.0) (2024.8.30)
Requirement already satisfied: six>=1.9 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from html5lib->Sphinx==7.1.0) (1.16.0)
Requirement already satisfied: webencodings in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from html5lib->Sphinx==7.1.0) (0.5.1)
Building wheels for collected packages: Sphinx
  Building editable for Sphinx (pyproject.toml): started
  Building editable for Sphinx (pyproject.toml): finished with status 'done'
  Created wheel for Sphinx: filename=sphinx-7.1.0-py3-none-any.whl size=4481 sha256=8ff4abd3fe4efcb9a1b5a853bf50fa9291d17e8ea2a3f7590c5a96c2f885db85
  Stored in directory: /tmp/pip-ephem-wheel-cache-3voa6d6h/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Sphinx
Installing collected packages: Sphinx
  Attempting uninstall: Sphinx
    Found existing installation: Sphinx 7.1.0
    Uninstalling Sphinx-7.1.0:
      Successfully uninstalled Sphinx-7.1.0
Successfully installed Sphinx-7.1.0
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 71db08c05197545944949d5aa76cd340e7143627 tests/test_util_rst.py
Updated 0 paths from 1afe5fca8
+ git apply -v -
Checking patch tests/test_util_rst.py...
Applied patch tests/test_util_rst.py cleanly.
+ tox --current-env -epy39 -v -- tests/test_util_rst.py
py39: commands[0]> python -X dev -X warn_default_encoding -m pytest -rA --durations 25 tests/test_util_rst.py
[1m============================= test session starts ==============================[0m
platform linux -- Python 3.9.20, pytest-8.3.3, pluggy-1.5.0
cachedir: .tox/py39/.pytest_cache
libraries: Sphinx-7.1.0+/71db08c05, docutils-0.20.1
base tempdir: /tmp/pytest-of-root/pytest-0
rootdir: /testbed
configfile: pyproject.toml
collected 10 items

tests/test_util_rst.py [32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[32m.[0m[31mF[0m[31mF[0m[32m.[0m[32m.[0m[31m                                        [100%][0m

=================================== FAILURES ===================================
[31m[1m___________ test_prepend_prolog_with_roles_in_sections_with_newline ____________[0m

app = <SphinxTestApp buildername='html'>

    [0m[94mdef[39;49;00m [92mtest_prepend_prolog_with_roles_in_sections_with_newline[39;49;00m(app):[90m[39;49;00m
        [90m# prologue with trailing line break[39;49;00m[90m[39;49;00m
        prolog = [33m'[39;49;00m[33mthis is rst_prolog[39;49;00m[33m\n[39;49;00m[33mhello reST![39;49;00m[33m\n[39;49;00m[33m'[39;49;00m[90m[39;49;00m
        content = StringList([[33m'[39;49;00m[33m:mod:`foo`[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m-[39;49;00m[33m'[39;49;00m * [94m10[39;49;00m, [33m'[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mhello[39;49;00m[33m'[39;49;00m], [33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        prepend_prolog(content, prolog)[90m[39;49;00m
    [90m[39;49;00m
>       [94massert[39;49;00m [96mlist[39;49;00m(content.xitems()) == [([33m'[39;49;00m[33m<rst_prolog>[39;49;00m[33m'[39;49;00m, [94m0[39;49;00m, [33m'[39;49;00m[33mthis is rst_prolog[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33m<rst_prolog>[39;49;00m[33m'[39;49;00m, [94m1[39;49;00m, [33m'[39;49;00m[33mhello reST![39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33m<generated>[39;49;00m[33m'[39;49;00m, [94m0[39;49;00m, [33m'[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m0[39;49;00m, [33m'[39;49;00m[33m:mod:`foo`[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m1[39;49;00m, [33m'[39;49;00m[33m----------[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m2[39;49;00m, [33m'[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m3[39;49;00m, [33m'[39;49;00m[33mhello[39;49;00m[33m'[39;49;00m)][90m[39;49;00m
[1m[31mE       AssertionError: assert [('dummy.rst'...------'), ...] == [('<rst_prolo..., 2, ''), ...][0m
[1m[31mE         [0m
[1m[31mE         At index 0 diff: [0m([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m0[39;49;00m, [33m'[39;49;00m[33m:mod:`foo`[39;49;00m[33m'[39;49;00m)[90m[39;49;00m != [0m([33m'[39;49;00m[33m<rst_prolog>[39;49;00m[33m'[39;49;00m, [94m0[39;49;00m, [33m'[39;49;00m[33mthis is rst_prolog[39;49;00m[33m'[39;49;00m)[90m[39;49;00m[0m
[1m[31mE         Left contains one more item: [0m([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m3[39;49;00m, [33m'[39;49;00m[33mhello[39;49;00m[33m'[39;49;00m)[90m[39;49;00m[0m
[1m[31mE         Use -v to get more diff[0m

[1m[31mtests/test_util_rst.py[0m:112: AssertionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/root
# outdir: /tmp/pytest-of-root/pytest-0/root/_build/html
# status: 
[01mRunning Sphinx v7.1.0+/71db08c05[39;49;00m

# warning: 

[31m[1m__________ test_prepend_prolog_with_roles_in_sections_without_newline __________[0m

app = <SphinxTestApp buildername='html'>

    [0m[94mdef[39;49;00m [92mtest_prepend_prolog_with_roles_in_sections_without_newline[39;49;00m(app):[90m[39;49;00m
        [90m# prologue with no trailing line break[39;49;00m[90m[39;49;00m
        prolog = [33m'[39;49;00m[33mthis is rst_prolog[39;49;00m[33m\n[39;49;00m[33mhello reST![39;49;00m[33m'[39;49;00m[90m[39;49;00m
        content = StringList([[33m'[39;49;00m[33m:mod:`foo`[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33m-[39;49;00m[33m'[39;49;00m * [94m10[39;49;00m, [33m'[39;49;00m[33m'[39;49;00m, [33m'[39;49;00m[33mhello[39;49;00m[33m'[39;49;00m], [33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m)[90m[39;49;00m
        prepend_prolog(content, prolog)[90m[39;49;00m
    [90m[39;49;00m
>       [94massert[39;49;00m [96mlist[39;49;00m(content.xitems()) == [([33m'[39;49;00m[33m<rst_prolog>[39;49;00m[33m'[39;49;00m, [94m0[39;49;00m, [33m'[39;49;00m[33mthis is rst_prolog[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33m<rst_prolog>[39;49;00m[33m'[39;49;00m, [94m1[39;49;00m, [33m'[39;49;00m[33mhello reST![39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33m<generated>[39;49;00m[33m'[39;49;00m, [94m0[39;49;00m, [33m'[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m0[39;49;00m, [33m'[39;49;00m[33m:mod:`foo`[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m1[39;49;00m, [33m'[39;49;00m[33m----------[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m2[39;49;00m, [33m'[39;49;00m[33m'[39;49;00m),[90m[39;49;00m
                                          ([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m3[39;49;00m, [33m'[39;49;00m[33mhello[39;49;00m[33m'[39;49;00m)][90m[39;49;00m
[1m[31mE       AssertionError: assert [('dummy.rst'...------'), ...] == [('<rst_prolo..., 2, ''), ...][0m
[1m[31mE         [0m
[1m[31mE         At index 0 diff: [0m([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m0[39;49;00m, [33m'[39;49;00m[33m:mod:`foo`[39;49;00m[33m'[39;49;00m)[90m[39;49;00m != [0m([33m'[39;49;00m[33m<rst_prolog>[39;49;00m[33m'[39;49;00m, [94m0[39;49;00m, [33m'[39;49;00m[33mthis is rst_prolog[39;49;00m[33m'[39;49;00m)[90m[39;49;00m[0m
[1m[31mE         Left contains one more item: [0m([33m'[39;49;00m[33mdummy.rst[39;49;00m[33m'[39;49;00m, [94m3[39;49;00m, [33m'[39;49;00m[33mhello[39;49;00m[33m'[39;49;00m)[90m[39;49;00m[0m
[1m[31mE         Use -v to get more diff[0m

[1m[31mtests/test_util_rst.py[0m:127: AssertionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/root
# outdir: /tmp/pytest-of-root/pytest-0/root/_build/html
# status: 
[01mRunning Sphinx v7.1.0+/71db08c05[39;49;00m

# warning: 

==================================== PASSES ====================================
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/root
# outdir: /tmp/pytest-of-root/pytest-0/root/_build/html
# status: 
[01mRunning Sphinx v7.1.0+/71db08c05[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/root
# outdir: /tmp/pytest-of-root/pytest-0/root/_build/html
# status: 
[01mRunning Sphinx v7.1.0+/71db08c05[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/root
# outdir: /tmp/pytest-of-root/pytest-0/root/_build/html
# status: 
[01mRunning Sphinx v7.1.0+/71db08c05[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/root
# outdir: /tmp/pytest-of-root/pytest-0/root/_build/html
# status: 
[01mRunning Sphinx v7.1.0+/71db08c05[39;49;00m

# warning: 

--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/root
# outdir: /tmp/pytest-of-root/pytest-0/root/_build/html
# status: 
[01mRunning Sphinx v7.1.0+/71db08c05[39;49;00m

# warning: 

============================= slowest 25 durations =============================
0.47s setup    tests/test_util_rst.py::test_append_epilog
0.04s setup    tests/test_util_rst.py::test_prepend_prolog_with_roles_in_sections_without_newline
0.03s call     tests/test_util_rst.py::test_prepend_prolog_with_roles_in_sections_with_newline
0.02s setup    tests/test_util_rst.py::test_prepend_prolog_without_CR
0.02s setup    tests/test_util_rst.py::test_prepend_prolog
0.02s setup    tests/test_util_rst.py::test_prepend_prolog_with_CR
0.02s setup    tests/test_util_rst.py::test_prepend_prolog_with_roles_in_sections
0.02s setup    tests/test_util_rst.py::test_prepend_prolog_with_roles_in_sections_with_newline

(17 durations < 0.005s hidden.  Use -vv to show these durations.)
[36m[1m=========================== short test summary info ============================[0m
[32mPASSED[0m tests/test_util_rst.py::[1mtest_escape[0m
[32mPASSED[0m tests/test_util_rst.py::[1mtest_append_epilog[0m
[32mPASSED[0m tests/test_util_rst.py::[1mtest_prepend_prolog[0m
[32mPASSED[0m tests/test_util_rst.py::[1mtest_prepend_prolog_with_CR[0m
[32mPASSED[0m tests/test_util_rst.py::[1mtest_prepend_prolog_without_CR[0m
[32mPASSED[0m tests/test_util_rst.py::[1mtest_prepend_prolog_with_roles_in_sections[0m
[32mPASSED[0m tests/test_util_rst.py::[1mtest_textwidth[0m
[32mPASSED[0m tests/test_util_rst.py::[1mtest_heading[0m
[31mFAILED[0m tests/test_util_rst.py::[1mtest_prepend_prolog_with_roles_in_sections_with_newline[0m - AssertionError: assert [('dummy.rst'...------'), ...] == [('<rst_prolo..., ...
[31mFAILED[0m tests/test_util_rst.py::[1mtest_prepend_prolog_with_roles_in_sections_without_newline[0m - AssertionError: assert [('dummy.rst'...------'), ...] == [('<rst_prolo..., ...
[31m========================= [31m[1m2 failed[0m, [32m8 passed[0m[31m in 0.73s[0m[31m ==========================[0m
py39: exit 1 (1.28 seconds) /testbed> python -X dev -X warn_default_encoding -m pytest -rA --durations 25 tests/test_util_rst.py pid=116
  py39: FAIL code 1 (1.29=setup[0.01]+cmd[1.28] seconds)
  evaluation failed :( (1.38 seconds)
+ git checkout 71db08c05197545944949d5aa76cd340e7143627 tests/test_util_rst.py
Updated 1 path from 1afe5fca8
