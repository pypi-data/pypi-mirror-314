diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 8642e1f151..1274affb88 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -979,7 +979,44 @@ class ExpressionWrapper(SQLiteNumericMixin, Expression):
         return super().get_group_by_cols()
 
     def as_sql(self, compiler, connection):
-        return compiler.compile(self.expression)
+        """
+        Compile the wrapped expression. If it's a Q object with pk__in=[], 
+        handle it specially to avoid the empty result set.
+        """
+        if isinstance(self.expression, Q):
+            # For Q(pk__in=[]) and ~Q(pk__in=[]), we know the result
+            # without needing to query the database
+            if (len(self.expression.children) == 1 and 
+                isinstance(self.expression.children[0], tuple) and
+                self.expression.children[0][0] == 'pk__in' and
+                self.expression.children[0][1] == []):
+                # Return 0 for Q(pk__in=[]) and 1 for ~Q(pk__in=[])
+                return str(1 if self.expression.negated else 0), []
+            # For other Q objects, resolve them to a SQL expression
+            resolved = self.expression.resolve_expression(compiler.query)
+            try:
+                sql, params = compiler.compile(resolved)
+                if not sql:
+                    # Empty SQL means the condition is always true
+                    # For negated Q objects, this means the condition is always false
+                    return str(0 if self.expression.negated else 1), []
+                # The SQL will be a WHERE clause, we need to convert it to a SELECT
+                return f'CASE WHEN {sql} THEN 1 ELSE 0 END', params
+            except EmptyResultSet:
+                # EmptyResultSet means the condition is always false
+                # For negated Q objects, this means the condition is always true
+                return str(1 if self.expression.negated else 0), []
+        try:
+            sql, params = compiler.compile(self.expression)
+            if not sql:
+                # Empty SQL means the condition is always true
+                return '1', []
+            return sql, params
+        except EmptyResultSet:
+            # If we get an EmptyResultSet, use 0 for Q(pk__in=[]) and 1 for ~Q(pk__in=[])
+            if isinstance(self.expression, Q):
+                return str(1 if self.expression.negated else 0), []
+            return '0', []
 
     def __repr__(self):
         return "{}({})".format(self.__class__.__name__, self.expression)
