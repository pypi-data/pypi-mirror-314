diff --git a/apps.py b/apps.py
new file mode 100644
index 0000000000..1abe1153a1
--- /dev/null
+++ b/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class AppsConfig(AppConfig):
+    name = 'apps'
+    default_auto_field = 'django.db.models.AutoField'
\ No newline at end of file
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 6f26dff0e0..28e275dcf8 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1150,6 +1150,8 @@ class Subquery(BaseExpression, Combinable):
     def __init__(self, queryset, output_field=None, **extra):
         # Allow the usage of both QuerySet and sql.Query objects.
         self.query = getattr(queryset, 'query', queryset)
+        # Set subquery=True to ensure proper SQL generation
+        self.query.subquery = True
         self.extra = extra
         super().__init__(output_field)
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..63eb91cef6
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,55 @@
+import os
+import sys
+
+# Add current directory to Python path
+sys.path.append(os.path.dirname(os.path.abspath(__file__)))
+
+from django.conf import settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['apps'],
+)
+
+import django
+django.setup()
+
+from django.db import connection
+from django.db.models import Subquery
+from django.db.models import Model, IntegerField, CharField
+
+# Create a simple model class for testing
+class App(Model):
+    id = IntegerField(primary_key=True)
+    name = CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'apps'
+        db_table = 'apps_app'
+
+# Create a Subquery instance
+q = Subquery(App.objects.all())
+
+# Print the raw SQL
+print("Raw SQL from str(q.query):")
+print(str(q.query))
+print()
+
+# Print the SQL from as_sql()
+print("SQL from as_sql():")
+compiler = q.query.get_compiler('default')
+sql, params = q.as_sql(compiler, connection)
+print(f"SQL: {sql}")
+print(f"Params: {params}")
+print()
+
+# Test with subquery=True
+print("SQL from as_sql() with subquery=True:")
+q.query.subquery = True
+sql, params = q.as_sql(compiler, connection)
+print(f"SQL: {sql}")
+print(f"Params: {params}")
\ No newline at end of file
