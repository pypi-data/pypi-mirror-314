diff --git a/config.toml b/config.toml
new file mode 100644
index 00000000..14d04451
--- /dev/null
+++ b/config.toml
@@ -0,0 +1,5 @@
+
+[DATABASE]
+HOST = "localhost"
+PORT = 5432
+NAME = "myapp"
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..7aeea91b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,34 @@
+import tomllib
+from flask import Flask
+
+app = Flask(__name__)
+
+# Create a sample TOML config file
+with open("config.toml", "w") as f:
+    f.write("""
+[DATABASE]
+HOST = "localhost"
+PORT = 5432
+NAME = "myapp"
+""")
+
+print("Test 1: Without mode parameter (should fail)")
+try:
+    app.config.from_file("config.toml", load=tomllib.load)
+except TypeError as e:
+    print(f"Error occurred as expected: {e}")
+
+print("\nTest 2: With mode='rb' parameter (should work)")
+try:
+    # First load the TOML directly to verify its content
+    with open("config.toml", "rb") as f:
+        toml_data = tomllib.load(f)
+    print("Raw TOML data:", toml_data)
+    
+    # Now try loading via Flask config
+    app.config.from_file("config.toml", load=tomllib.load, mode="rb")
+    print("Success! Config loaded:")
+    print("DATABASE" in app.config)  # Check if the key exists
+    print(dict(app.config))  # Convert to dict for better viewing
+except Exception as e:
+    print(f"Unexpected error: {e}")
\ No newline at end of file
diff --git a/src/flask/config.py b/src/flask/config.py
index d4fc310f..47a020e9 100644
--- a/src/flask/config.py
+++ b/src/flask/config.py
@@ -234,6 +234,7 @@ class Config(dict):
         filename: str,
         load: t.Callable[[t.IO[t.Any]], t.Mapping],
         silent: bool = False,
+        mode: str = "r",
     ) -> bool:
         """Update the values in the config from a file that is loaded
         using the ``load`` parameter. The loaded data is passed to the
@@ -244,8 +245,8 @@ class Config(dict):
             import json
             app.config.from_file("config.json", load=json.load)
 
-            import toml
-            app.config.from_file("config.toml", load=toml.load)
+            import tomllib
+            app.config.from_file("config.toml", load=tomllib.load, mode="rb")
 
         :param filename: The path to the data file. This can be an
             absolute path or relative to the config root path.
@@ -254,6 +255,8 @@ class Config(dict):
         :type load: ``Callable[[Reader], Mapping]`` where ``Reader``
             implements a ``read`` method.
         :param silent: Ignore the file if it doesn't exist.
+        :param mode: The mode to open the file in, e.g. "r" for text mode (default)
+            or "rb" for binary mode.
         :return: ``True`` if the file was loaded successfully.
 
         .. versionadded:: 2.0
@@ -261,7 +264,7 @@ class Config(dict):
         filename = os.path.join(self.root_path, filename)
 
         try:
-            with open(filename) as f:
+            with open(filename, mode=mode) as f:
                 obj = load(f)
         except OSError as e:
             if silent and e.errno in (errno.ENOENT, errno.EISDIR):
