+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   src/_pytest/assertion/rewrite.py
	modified:   src/_pytest/assertion/util.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	src/_pytest/assertion/all_any.py
	test_all_any.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 10ca84ffc56c2dd2d9dc4bd71b7b898e083500cd
Merge: b4d75ad31 f9f41e69a
Author: Daniel Hahler <git@thequod.de>
Date:   Fri May 24 18:28:43 2019 +0200

    Merge pull request #5119 from blueyed/reportopts-A-order
    
    reportopts: A: put "Pp" in front

+ git diff 10ca84ffc56c2dd2d9dc4bd71b7b898e083500cd
diff --git a/src/_pytest/assertion/rewrite.py b/src/_pytest/assertion/rewrite.py
index 2903b8995..748bb3d9d 100644
--- a/src/_pytest/assertion/rewrite.py
+++ b/src/_pytest/assertion/rewrite.py
@@ -19,6 +19,8 @@ import atomicwrites
 import py
 import six
 
+from _pytest.assertion.all_any import rewrite_all_any_assert
+
 from _pytest._io.saferepr import saferepr
 from _pytest.assertion import util
 from _pytest.assertion.util import (  # noqa: F401
@@ -819,7 +821,91 @@ class AssertionRewriter(ast.NodeVisitor):
         raises an assertion error with a detailed explanation in case
         the expression is false.
 
+        Special handling is done for all() and any() calls to provide better error messages.
         """
+        # Special handling for all() and any() calls
+        if isinstance(assert_.test, ast.Call) and isinstance(assert_.test.func, ast.Name):
+            if assert_.test.func.id in ('all', 'any'):
+                if len(assert_.test.args) == 1:
+                    # Get the iterator argument
+                    iter_arg = assert_.test.args[0]
+                    if isinstance(iter_arg, ast.GeneratorExp):
+                        # For generator expressions, materialize the list first
+                        list_call = ast.Call(
+                            func=ast.Name(id='list', ctx=ast.Load()),
+                            args=[iter_arg],
+                            keywords=[]
+                        )
+                        list_var = self.variable()
+                        self.statements.append(
+                            ast.Assign([ast.Name(id=list_var, ctx=ast.Store())], list_call)
+                        )
+                        # Create a loop to check each item
+                        loop_var = self.variable()
+                        loop_body = []
+                        
+                        # Create the test condition based on whether it's all() or any()
+                        is_all = assert_.test.func.id == 'all'
+                        if is_all:
+                            # For all(), we want to fail on the first False
+                            test = ast.If(
+                                test=ast.UnaryOp(
+                                    op=ast.Not(),
+                                    operand=ast.Name(id=loop_var, ctx=ast.Load())
+                                ),
+                                body=[
+                                    ast.Raise(
+                                        exc=ast.Call(
+                                            func=ast.Name(id='AssertionError', ctx=ast.Load()),
+                                            args=[
+                                                ast.BinOp(
+                                                    left=ast.Str(s='assert all(...) - failed at item: '),
+                                                    op=ast.Add(),
+                                                    right=ast.Call(
+                                                        func=ast.Name(id='str', ctx=ast.Load()),
+                                                        args=[ast.Name(id=loop_var, ctx=ast.Load())],
+                                                        keywords=[]
+                                                    )
+                                                )
+                                            ],
+                                            keywords=[]
+                                        ),
+                                        cause=None
+                                    )
+                                ],
+                                orelse=[]
+                            )
+                        else:
+                            # For any(), we want to succeed on the first True
+                            test = ast.If(
+                                test=ast.Name(id=loop_var, ctx=ast.Load()),
+                                body=[ast.Return(value=None)],
+                                orelse=[]
+                            )
+
+                        loop_body.append(test)
+                        loop = ast.For(
+                            target=ast.Name(id=loop_var, ctx=ast.Store()),
+                            iter=ast.Name(id=list_var, ctx=ast.Load()),
+                            body=loop_body,
+                            orelse=[]
+                        )
+                        self.statements.append(loop)
+
+                        if not is_all:
+                            # For any(), if we get here it means no item was True
+                            self.statements.append(
+                                ast.Raise(
+                                    exc=ast.Call(
+                                        func=ast.Name(id='AssertionError', ctx=ast.Load()),
+                                        args=[ast.Str(s='assert any(...) - no items were true')],
+                                        keywords=[]
+                                    ),
+                                    cause=None
+                                )
+                            )
+
+                        return
         if isinstance(assert_.test, ast.Tuple) and len(assert_.test.elts) >= 1:
             from _pytest.warning_types import PytestAssertRewriteWarning
             import warnings
@@ -839,7 +925,94 @@ class AssertionRewriter(ast.NodeVisitor):
         self.stack = []
         self.on_failure = []
         self.push_format_context()
-        # Rewrite assert into a bunch of statements.
+        # Special handling for all() and any() calls
+        from _pytest.assertion.util import is_all_any_call
+        if is_all_any_call(assert_.test):
+            call = assert_.test
+            if len(call.args) != 1:
+                # Not a valid all/any call, fall back to normal handling
+                top_condition, explanation = self.visit(assert_.test)
+            else:
+                # Get the iterator argument
+                iter_arg = call.args[0]
+                if isinstance(iter_arg, ast.GeneratorExp):
+                    # For generator expressions, we need to create a list to avoid consuming it
+                    list_call = ast.Call(
+                        func=ast.Name(id='list', ctx=ast.Load()),
+                        args=[iter_arg],
+                        keywords=[]
+                    )
+                    iter_var = self.variable()
+                    self.statements.append(
+                        ast.Assign([ast.Name(id=iter_var, ctx=ast.Store())], list_call)
+                    )
+                else:
+                    # For other iterables (lists, etc.), use them directly
+                    iter_var = self.variable()
+                    self.statements.append(
+                        ast.Assign([ast.Name(id=iter_var, ctx=ast.Store())], iter_arg)
+                    )
+
+                # Create a loop to check each item
+                loop_var = self.variable()
+                loop_body = []
+
+                # Create the test condition based on whether it's all() or any()
+                is_all = call.func.id == 'all'
+                if is_all:
+                    # For all(), we want to fail on the first False
+                    test = ast.If(
+                        test=ast.UnaryOp(
+                            op=ast.Not(),
+                            operand=ast.Name(id=loop_var, ctx=ast.Load())
+                        ),
+                        body=[
+                            ast.Raise(
+                                exc=ast.Call(
+                                    func=ast.Name(id='AssertionError', ctx=ast.Load()),
+                                    args=[
+                                        ast.Str(s='assert all(...) - failed at item: {}'.format(loop_var))
+                                    ],
+                                    keywords=[]
+                                ),
+                                cause=None
+                            )
+                        ],
+                        orelse=[]
+                    )
+                else:
+                    # For any(), we want to succeed on the first True
+                    test = ast.If(
+                        test=ast.Name(id=loop_var, ctx=ast.Load()),
+                        body=[ast.Return(value=None)],
+                        orelse=[]
+                    )
+
+                loop_body.append(test)
+                loop = ast.For(
+                    target=ast.Name(id=loop_var, ctx=ast.Store()),
+                    iter=ast.Name(id=iter_var, ctx=ast.Load()),
+                    body=loop_body,
+                    orelse=[]
+                )
+                self.statements.append(loop)
+
+                if not is_all:
+                    # For any(), if we get here it means no item was True
+                    self.statements.append(
+                        ast.Raise(
+                            exc=ast.Call(
+                                func=ast.Name(id='AssertionError', ctx=ast.Load()),
+                                args=[ast.Str(s='assert any(...) - no items were true')],
+                                keywords=[]
+                            ),
+                            cause=None
+                        )
+                    )
+
+                return
+
+        # Normal assertion handling
         top_condition, explanation = self.visit(assert_.test)
         # If in a test module, check if directly asserting None, in order to warn [Issue #3191]
         if self.module_path is not None:
@@ -969,6 +1142,34 @@ warn_explicit(
         visit `ast.Call` nodes on Python3.5 and after
         """
         new_func, func_expl = self.visit(call.func)
+        
+        # Special handling for all() and any() calls
+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):
+            if len(call.args) == 1:
+                # Get the iterator argument
+                iter_arg = call.args[0]
+                if isinstance(iter_arg, ast.GeneratorExp):
+                    # For generator expressions, materialize the list first
+                    list_call = ast.Call(
+                        func=ast.Name(id='list', ctx=ast.Load()),
+                        args=[iter_arg],
+                        keywords=[]
+                    )
+                    list_var = self.assign(list_call)
+                    # Create a new call with the list instead of generator
+                    new_call = ast.Call(
+                        func=new_func,
+                        args=[ast.Name(id=list_var, ctx=ast.Load())],
+                        keywords=[]
+                    )
+                    res = self.assign(new_call)
+                    # Add the list contents to the explanation
+                    list_expl = self.explanation_param(self.display(ast.Name(id=list_var, ctx=ast.Load())))
+                    res_expl = self.explanation_param(self.display(res))
+                    outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, list_expl)
+                    return res, outer_expl
+
+        # Normal call handling
         arg_expls = []
         new_args = []
         new_kwargs = []
@@ -988,6 +1189,18 @@ warn_explicit(
         new_call = ast.Call(new_func, new_args, new_kwargs)
         res = self.assign(new_call)
         res_expl = self.explanation_param(self.display(res))
+        
+        # Special handling for all() and any() calls - add more detail to the explanation
+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):
+            if len(call.args) == 1:
+                # Get the iterator argument
+                iter_arg = call.args[0]
+                if isinstance(iter_arg, ast.GeneratorExp):
+                    # Add the list contents to the explanation
+                    list_expl = self.explanation_param(self.display(ast.Name(id=res, ctx=ast.Load())))
+                    outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, list_expl)
+                    return res, outer_expl
+        
         outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
         return res, outer_expl
 
@@ -1002,6 +1215,34 @@ warn_explicit(
         visit `ast.Call nodes on 3.4 and below`
         """
         new_func, func_expl = self.visit(call.func)
+        
+        # Special handling for all() and any() calls
+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):
+            if len(call.args) == 1:
+                # Get the iterator argument
+                iter_arg = call.args[0]
+                if isinstance(iter_arg, ast.GeneratorExp):
+                    # For generator expressions, materialize the list first
+                    list_call = ast.Call(
+                        func=ast.Name(id='list', ctx=ast.Load()),
+                        args=[iter_arg],
+                        keywords=[]
+                    )
+                    list_var = self.assign(list_call)
+                    # Create a new call with the list instead of generator
+                    new_call = ast.Call(
+                        func=new_func,
+                        args=[ast.Name(id=list_var, ctx=ast.Load())],
+                        keywords=[]
+                    )
+                    res = self.assign(new_call)
+                    # Add the list contents to the explanation
+                    list_expl = self.explanation_param(self.display(ast.Name(id=list_var, ctx=ast.Load())))
+                    res_expl = self.explanation_param(self.display(res))
+                    outer_expl = "%s\n{%s = %s(%s)\n}" % (res_expl, res_expl, func_expl, list_expl)
+                    return res, outer_expl
+
+        # Normal call handling
         arg_expls = []
         new_args = []
         new_kwargs = []
@@ -1024,6 +1265,27 @@ warn_explicit(
         new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)
         res = self.assign(new_call)
         res_expl = self.explanation_param(self.display(res))
+        
+        # Special handling for all() and any() calls - add more detail to the explanation
+        if isinstance(call.func, ast.Name) and call.func.id in ('all', 'any'):
+            if len(call.args) == 1:
+                # Get the iterator argument
+                iter_arg = call.args[0]
+                if isinstance(iter_arg, ast.GeneratorExp):
+                    # Add the list contents to the explanation
+                    list_expl = self.explanation_param(self.display(ast.Name(id=res, ctx=ast.Load())))
+                    outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, list_expl)
+                    return res, outer_expl
+        
+        outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
+        return res, outer_expl
+        if call.kwargs:
+            new_kwarg, expl = self.visit(call.kwargs)
+            arg_expls.append("**" + expl)
+        expl = "%s(%s)" % (func_expl, ", ".join(arg_expls))
+        new_call = ast.Call(new_func, new_args, new_kwargs, new_star, new_kwarg)
+        res = self.assign(new_call)
+        res_expl = self.explanation_param(self.display(res))
         outer_expl = "%s\n{%s = %s\n}" % (res_expl, res_expl, expl)
         return res, outer_expl
 
diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py
index b53646859..5305a01c9 100644
--- a/src/_pytest/assertion/util.py
+++ b/src/_pytest/assertion/util.py
@@ -3,7 +3,9 @@ from __future__ import absolute_import
 from __future__ import division
 from __future__ import print_function
 
+import ast
 import pprint
+import sys
 
 import six
 
@@ -135,8 +137,49 @@ def isiterable(obj):
         return False
 
 
+def is_all_any_call(node):
+    """Return whether the AST node is a call to all() or any()."""
+    if not isinstance(node, ast.Call):
+        return False
+    if not isinstance(node.func, ast.Name):
+        return False
+    return node.func.id in ('all', 'any')
+
+
 def assertrepr_compare(config, op, left, right):
     """Return specialised explanations for some operators/operands"""
+    # Special handling for all() and any() calls
+    if op == "==" and isinstance(right, bool) and isinstance(left, bool):
+        # Check if this is from an all() or any() call
+        frame = sys._getframe(1)
+        while frame:
+            if frame.f_code.co_name == "visit_Assert":
+                # Found the assertion frame
+                test_expr = frame.f_locals.get("assert_", None)
+                if test_expr and hasattr(test_expr, "test"):
+                    test = test_expr.test
+                    if isinstance(test, ast.Call) and isinstance(test.func, ast.Name):
+                        if test.func.id in ("all", "any") and len(test.args) == 1:
+                            # This is an all() or any() call
+                            arg = test.args[0]
+                            if isinstance(arg, ast.GeneratorExp):
+                                # Convert generator to list for better error message
+                                gen = eval(compile(ast.Expression(arg), "<string>", "eval"), frame.f_globals, frame.f_locals)
+                                values = list(gen)
+                                if test.func.id == "all":
+                                    failed = [v for v in values if not v]
+                                    if failed:
+                                        return [
+                                            "assert all(...) - the following values were false:",
+                                            *[saferepr(v) for v in failed]
+                                        ]
+                                else:  # any()
+                                    if not any(values):
+                                        return [
+                                            "assert any(...) - all values were false:",
+                                            *[saferepr(v) for v in values]
+                                        ]
+            frame = frame.f_back
     width = 80 - 15 - len(op) - 2  # 15 chars indentation, 1 space around op
     left_repr = saferepr(left, maxsize=int(width // 2))
     right_repr = saferepr(right, maxsize=width - len(left_repr))
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: py>=1.5.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==4.5.1.dev40+g10ca84ffc.d20241025) (1.11.0)
Requirement already satisfied: six>=1.10.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==4.5.1.dev40+g10ca84ffc.d20241025) (1.16.0)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==4.5.1.dev40+g10ca84ffc.d20241025) (68.0.0)
Requirement already satisfied: attrs>=17.4.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==4.5.1.dev40+g10ca84ffc.d20241025) (23.1.0)
Requirement already satisfied: atomicwrites>=1.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==4.5.1.dev40+g10ca84ffc.d20241025) (1.4.1)
Requirement already satisfied: pluggy!=0.10,<1.0,>=0.9 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==4.5.1.dev40+g10ca84ffc.d20241025) (0.11.0)
Requirement already satisfied: wcwidth in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==4.5.1.dev40+g10ca84ffc.d20241025) (0.2.6)
Requirement already satisfied: more-itertools>=4.0.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest==4.5.1.dev40+g10ca84ffc.d20241025) (10.1.0)
Building wheels for collected packages: pytest
  Building editable for pytest (pyproject.toml): started
  Building editable for pytest (pyproject.toml): finished with status 'done'
  Created wheel for pytest: filename=pytest-4.5.1.dev40+g10ca84ffc.d20241025-0.editable-py2.py3-none-any.whl size=4987 sha256=adbccf9dcafac2c6bc6532dc0eb377b22884a42be6727a3f5688888a0a5ec893
  Stored in directory: /tmp/pip-ephem-wheel-cache-qmmanvky/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built pytest
Installing collected packages: pytest
  Attempting uninstall: pytest
    Found existing installation: pytest 4.5.1.dev40+g10ca84ffc
    Uninstalling pytest-4.5.1.dev40+g10ca84ffc:
      Successfully uninstalled pytest-4.5.1.dev40+g10ca84ffc
Successfully installed pytest-4.5.1.dev40+g10ca84ffc.d20241025
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 10ca84ffc56c2dd2d9dc4bd71b7b898e083500cd testing/test_assertrewrite.py
Updated 0 paths from b4f186029
+ git apply -v -
Checking patch testing/test_assertrewrite.py...
Applied patch testing/test_assertrewrite.py cleanly.
+ pytest -rA testing/test_assertrewrite.py
============================= test session starts ==============================
platform linux -- Python 3.9.20, pytest-4.5.1.dev40+g10ca84ffc.d20241025, py-1.11.0, pluggy-0.11.0
rootdir: /testbed, inifile: tox.ini
collected 0 items / 1 errors

==================================== ERRORS ====================================
________________ ERROR collecting testing/test_assertrewrite.py ________________
<frozen importlib._bootstrap>:919: in _find_spec
    ???
E   AttributeError: 'AssertionRewritingHook' object has no attribute 'find_spec'

During handling of the above exception, another exception occurred:
/opt/miniconda3/envs/testbed/lib/python3.9/site-packages/py/_path/local.py:704: in pyimport
    __import__(modname)
<frozen importlib._bootstrap>:1007: in _find_and_load
    ???
<frozen importlib._bootstrap>:982: in _find_and_load_unlocked
    ???
<frozen importlib._bootstrap>:921: in _find_spec
    ???
<frozen importlib._bootstrap>:895: in _find_spec_legacy
    ???
src/_pytest/assertion/rewrite.py:168: in find_module
    source_stat, co = _rewrite_test(self.config, fn_pypath)
src/_pytest/assertion/rewrite.py:421: in _rewrite_test
    rewrite_asserts(tree, fn, config)
src/_pytest/assertion/rewrite.py:470: in rewrite_asserts
    AssertionRewriter(module_path, config).run(mod)
src/_pytest/assertion/rewrite.py:718: in run
    new.extend(self.visit(child))
E   TypeError: 'NoneType' object is not iterable
=========================== short test summary info ============================
FAILED testing/test_assertrewrite.py - TypeError: 'NoneType' object is not it...
!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!
=========================== 1 error in 0.11 seconds ============================
+ git checkout 10ca84ffc56c2dd2d9dc4bd71b7b898e083500cd testing/test_assertrewrite.py
Updated 1 path from b4f186029
