diff --git a/sympy/geometry/point.py b/sympy/geometry/point.py
index 7c978c47be..fdd2d152f0 100644
--- a/sympy/geometry/point.py
+++ b/sympy/geometry/point.py
@@ -22,6 +22,7 @@
 import warnings
 
 from sympy.core import S, sympify, Expr
+from sympy.core.singleton import S
 from sympy.core.compatibility import is_sequence
 from sympy.core.containers import Tuple
 from sympy.simplify import nsimplify, simplify
@@ -213,6 +214,31 @@ def __add__(self, other):
         sympy.geometry.point.Point.translate
 
         """
+        from sympy.core.mul import Mul
+        from sympy.core.numbers import Zero
+
+        # Handle zero addition
+        if isinstance(other, Zero):
+            return self
+
+        if isinstance(other, Mul):
+            # Handle case where other is a Mul object (e.g., 2*Point)
+            args = other.args
+            # Find the Point in the Mul's arguments
+            point_arg = None
+            scalar = 1
+            for arg in args:
+                if isinstance(arg, Point):
+                    point_arg = arg
+                else:
+                    scalar *= arg
+            if point_arg is not None:
+                # If scalar is zero, return self
+                if scalar == 0:
+                    return self
+                # If we found a Point, multiply it by the scalar and add
+                return self + point_arg * scalar
+
         try:
             s, o = Point._normalize_dimension(self, Point(other, evaluate=False))
         except TypeError:
@@ -283,6 +309,20 @@ def __neg__(self):
         coords = [-x for x in self.args]
         return Point(coords, evaluate=False)
 
+    def __rmul__(self, factor):
+        """Called when a number multiplies a point from the left.
+
+        This is the same as multiplying the point by the number from the right.
+        """
+        return self.__mul__(factor)
+
+    def as_coeff_Mul(self, rational=False):
+        """Return the point as a tuple (coeff, Mul) where coeff is 1.
+
+        This is required for SymPy's general multiplication to work.
+        """
+        return S.One, self
+
     def __sub__(self, other):
         """Subtract two points, or subtract a factor from this point's
         coordinates."""
