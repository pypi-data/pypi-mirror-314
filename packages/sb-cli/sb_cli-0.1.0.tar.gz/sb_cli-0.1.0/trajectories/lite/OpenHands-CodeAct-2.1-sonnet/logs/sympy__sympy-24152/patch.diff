diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..2a2e9de002
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,10 @@
+from sympy import *
+from sympy.physics.quantum import *
+
+U = Operator('U')
+V = Operator('V')
+P = TensorProduct(2*U - V, U + V)
+print("Original expression:")
+print(P)
+print("\nExpanded expression (should show full expansion but doesn't):")
+print(P.expand(tensorproduct=True))
\ No newline at end of file
diff --git a/sympy/physics/quantum/tensorproduct.py b/sympy/physics/quantum/tensorproduct.py
index 78accaf295..b32d2a4388 100644
--- a/sympy/physics/quantum/tensorproduct.py
+++ b/sympy/physics/quantum/tensorproduct.py
@@ -246,9 +246,10 @@ def _eval_expand_tensorproduct(self, **hints):
             if isinstance(args[i], Add):
                 for aa in args[i].args:
                     tp = TensorProduct(*args[:i] + (aa,) + args[i + 1:])
-                    if isinstance(tp, TensorProduct):
-                        tp = tp._eval_expand_tensorproduct()
-                    add_args.append(tp)
+                    c_part, nc_part = tp.args_cnc()
+                    if len(nc_part)==1 and isinstance(nc_part[0], TensorProduct):
+                        nc_part = (nc_part[0]._eval_expand_tensorproduct(), )
+                    add_args.append(Mul(*c_part)*Mul(*nc_part))
                 break
 
         if add_args:
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..13fe69e615
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,29 @@
+from sympy import *
+from sympy.physics.quantum import *
+
+U = Operator('U')
+V = Operator('V')
+
+# Test case 1: More complex scalar factors
+P1 = TensorProduct(3*U - 2*V, 4*U + 5*V)
+print("Test case 1 - Complex scalar factors:")
+print("Original:", P1)
+print("Expanded:", P1.expand(tensorproduct=True))
+
+# Test case 2: Zero in one factor
+P2 = TensorProduct(U - U, U + V)
+print("\nTest case 2 - Zero in first factor:")
+print("Original:", P2)
+print("Expanded:", P2.expand(tensorproduct=True))
+
+# Test case 3: Multiple tensor factors
+P3 = TensorProduct(2*U - V, U + V, 3*U - 2*V)
+print("\nTest case 3 - Three tensor factors:")
+print("Original:", P3)
+print("Expanded:", P3.expand(tensorproduct=True))
+
+# Test case 4: Nested expressions
+P4 = TensorProduct(2*(U + V) - V, U + 2*V)
+print("\nTest case 4 - Nested expressions:")
+print("Original:", P4)
+print("Expanded:", P4.expand(tensorproduct=True))
\ No newline at end of file
