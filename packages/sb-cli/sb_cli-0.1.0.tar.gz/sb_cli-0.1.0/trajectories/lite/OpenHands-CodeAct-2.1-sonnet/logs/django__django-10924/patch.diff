diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0c64748ccd..344cca127d 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -1663,7 +1663,9 @@ class FilePathField(Field):
 
     def __init__(self, verbose_name=None, name=None, path='', match=None,
                  recursive=False, allow_files=True, allow_folders=False, **kwargs):
-        self.path, self.match, self.recursive = path, match, recursive
+        self.path_callable = path if callable(path) else None
+        self.path = path() if callable(path) else path
+        self.match, self.recursive = match, recursive
         self.allow_files, self.allow_folders = allow_files, allow_folders
         kwargs.setdefault('max_length', 100)
         super().__init__(verbose_name, name, **kwargs)
@@ -1709,7 +1711,7 @@ class FilePathField(Field):
 
     def formfield(self, **kwargs):
         return super().formfield(**{
-            'path': self.path,
+            'path': self.path_callable if self.path_callable else self.path,
             'match': self.match,
             'recursive': self.recursive,
             'form_class': forms.FilePathField,
diff --git a/django/forms/fields.py b/django/forms/fields.py
index a977256525..5b72ade483 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -1078,7 +1078,9 @@ class MultiValueField(Field):
 class FilePathField(ChoiceField):
     def __init__(self, path, *, match=None, recursive=False, allow_files=True,
                  allow_folders=False, **kwargs):
-        self.path, self.match, self.recursive = path, match, recursive
+        self.path_callable = path if callable(path) else None
+        self.path = path() if callable(path) else path
+        self.match, self.recursive = match, recursive
         self.allow_files, self.allow_folders = allow_files, allow_folders
         super().__init__(choices=(), **kwargs)
 
@@ -1096,7 +1098,7 @@ class FilePathField(ChoiceField):
                     for f in sorted(files):
                         if self.match is None or self.match_re.search(f):
                             f = os.path.join(root, f)
-                            self.choices.append((f, f.replace(path, "", 1)))
+                            self.choices.append((f, f.replace(self.path, "", 1)))
                 if self.allow_folders:
                     for f in sorted(dirs):
                         if f == '__pycache__':
diff --git a/django_test/__init__.py b/django_test/__init__.py
new file mode 100644
index 0000000000..adfac37025
--- /dev/null
+++ b/django_test/__init__.py
@@ -0,0 +1 @@
+# Django test app
diff --git a/django_test/apps.py b/django_test/apps.py
new file mode 100644
index 0000000000..2b68b0faa5
--- /dev/null
+++ b/django_test/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class DjangoTestConfig(AppConfig):
+    name = 'django_test'
\ No newline at end of file
diff --git a/django_test/migrations/0001_initial.py b/django_test/migrations/0001_initial.py
new file mode 100644
index 0000000000..ad33b62731
--- /dev/null
+++ b/django_test/migrations/0001_initial.py
@@ -0,0 +1,12 @@
+# Generated by Django 3.0.dev20190502071320 on 2024-10-25 16:38
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+    ]
+
+    operations = [
+    ]
diff --git a/django_test/migrations/0002_add_model.py b/django_test/migrations/0002_add_model.py
new file mode 100644
index 0000000000..96f0960cc5
--- /dev/null
+++ b/django_test/migrations/0002_add_model.py
@@ -0,0 +1,23 @@
+# Generated by Django 3.0.dev20190502071320 on 2024-10-25 16:38
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+        ('django_test', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='LocalFiles',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=255)),
+                ('file', models.FilePathField(path='/tmp/test_files/example_dir')),
+            ],
+        ),
+    ]
diff --git a/django_test/migrations/0003_initial.py b/django_test/migrations/0003_initial.py
new file mode 100644
index 0000000000..2935b0b099
--- /dev/null
+++ b/django_test/migrations/0003_initial.py
@@ -0,0 +1,13 @@
+# Generated by Django 3.0.dev20190502071320 on 2024-10-25 16:39
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('django_test', '0002_add_model'),
+    ]
+
+    operations = [
+    ]
diff --git a/django_test/migrations/0004_initial.py b/django_test/migrations/0004_initial.py
new file mode 100644
index 0000000000..f835fac0fa
--- /dev/null
+++ b/django_test/migrations/0004_initial.py
@@ -0,0 +1,13 @@
+# Generated by Django 3.0.dev20190502071320 on 2024-10-25 16:39
+
+from django.db import migrations
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('django_test', '0003_initial'),
+    ]
+
+    operations = [
+    ]
diff --git a/django_test/migrations/__init__.py b/django_test/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..c9959c915f
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,85 @@
+import os
+from django.conf import settings
+from django.db import models
+
+# Create migrations directory
+os.makedirs('migrations', exist_ok=True)
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.db.models',
+        'django_test.apps.DjangoTestConfig',
+    ],
+    LOCAL_FILE_DIR='/tmp/test_files',
+    MIGRATION_MODULES={'django_test': 'django_test.migrations'}
+)
+
+import django
+django.setup()
+
+# Create test directory
+os.makedirs('/tmp/test_files/example_dir', exist_ok=True)
+with open('/tmp/test_files/example_dir/test.txt', 'w') as f:
+    f.write('test')
+
+# Define path function
+def get_path():
+    return os.path.join(settings.LOCAL_FILE_DIR, 'example_dir')
+
+# Define model
+class LocalFiles(models.Model):
+    name = models.CharField(max_length=255)
+    file = models.FilePathField(path=get_path)
+
+    class Meta:
+        app_label = 'django_test'
+
+# Try to create migrations
+from django.core.management.commands.makemigrations import Command
+cmd = Command()
+options = {
+    'verbosity': 1,
+    'dry_run': False,
+    'interactive': False,
+    'merge': False,
+    'empty': True,
+    'name': 'initial',
+    'include_header': True,
+    'check_changes': False,
+    'update': False,
+}
+cmd.handle('django_test', **options)
+
+# Create a second migration for the model
+options['empty'] = False
+options['name'] = 'add_model'
+cmd.handle('django_test', **options)
+
+# Print the generated migration
+import glob
+migration_files = glob.glob('django_test/migrations/*.py')
+if migration_files:
+    with open(migration_files[-1]) as f:
+        print(f.read())
+
+# Test that the path is evaluated correctly
+from django.core.management import call_command
+call_command('migrate', 'django_test', verbosity=0)
+
+# Create a test instance
+test_file = LocalFiles(name='test', file='/tmp/test_files/example_dir/test.txt')
+print(f"\nTest instance file path: {test_file.file}")
+
+# Change the LOCAL_FILE_DIR setting and verify the path is updated
+settings.LOCAL_FILE_DIR = '/var/test_files'
+test_file2 = LocalFiles(name='test2', file='/var/test_files/example_dir/test.txt')
+print(f"Test instance 2 file path: {test_file2.file}")
\ No newline at end of file
