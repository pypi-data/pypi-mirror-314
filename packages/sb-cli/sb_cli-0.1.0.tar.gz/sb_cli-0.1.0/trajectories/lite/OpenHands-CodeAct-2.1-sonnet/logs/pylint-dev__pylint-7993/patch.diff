diff --git a/pylint/reporters/text.py b/pylint/reporters/text.py
index 29bd46798..904d1bd74 100644
--- a/pylint/reporters/text.py
+++ b/pylint/reporters/text.py
@@ -175,15 +175,34 @@ class TextReporter(BaseReporter):
         self._template = template
 
         # Check to see if all parameters in the template are attributes of the Message
-        arguments = re.findall(r"\{(.+?)(:.*)?\}", template)
+        # First, find all escaped braces (double braces) and temporarily replace them
+        # We need to handle triple braces correctly - they should be treated as escaped + unescaped
+        template_escaped = template
+        
+        # Replace escaped braces with markers, handling triple braces correctly
+        # Triple braces: {{{ becomes {{ {
+        template_escaped = re.sub(r"\{\{\{", "<<LBRACE>>{", template_escaped)
+        template_escaped = re.sub(r"\}\}\}", "}<<RBRACE>>", template_escaped)
+        # Double braces
+        template_escaped = re.sub(r"\{\{(?!\{)", "<<LBRACE>>", template_escaped)
+        template_escaped = re.sub(r"(?<!\})\}\}", "<<RBRACE>>", template_escaped)
+        
+        # Now find all actual template arguments
+        arguments = re.findall(r"\{(.+?)(:.*)?\}", template_escaped)
+        
+        # Process each argument
         for argument in arguments:
             if argument[0] not in MESSAGE_FIELDS:
                 warnings.warn(
                     f"Don't recognize the argument '{argument[0]}' in the --msg-template. "
                     "Are you sure it is supported on the current version of pylint?"
                 )
-                template = re.sub(r"\{" + argument[0] + r"(:.*?)?\}", "", template)
-        self._fixed_template = template
+                template_escaped = re.sub(r"\{" + re.escape(argument[0]) + r"(:.*?)?\}", "", template_escaped)
+        
+        # Restore escaped braces
+        template_escaped = re.sub(r"<<LBRACE>>", "{{", template_escaped)
+        template_escaped = re.sub(r"<<RBRACE>>", "}}", template_escaped)
+        self._fixed_template = template_escaped
 
     def write_message(self, msg: Message) -> None:
         """Convenience method to write a formatted message with class default
diff --git a/test.py b/test.py
new file mode 100644
index 000000000..95f521f47
--- /dev/null
+++ b/test.py
@@ -0,0 +1,6 @@
+
+def test():
+    x = 1
+    y = None
+    return x + y  # This will cause a type error
+    unused = 10  # This will cause an unused variable warning
diff --git a/test_msg_template.py b/test_msg_template.py
new file mode 100644
index 000000000..7433c1cb8
--- /dev/null
+++ b/test_msg_template.py
@@ -0,0 +1,47 @@
+"""Test script to reproduce the message template issue."""
+
+import sys
+from io import StringIO
+from pylint.lint import Run
+from pylint.reporters.text import TextReporter
+
+# Create a simple Python file with some issues
+with open("test.py", "w") as f:
+    f.write("""
+def test():
+    x = 1
+    y = None
+    return x + y  # This will cause a type error
+    unused = 10  # This will cause an unused variable warning
+""")
+
+# Create a custom reporter with the problematic template
+output = StringIO()
+reporter = TextReporter(output)
+
+# Create a linter instance and configure it
+from pylint.lint.pylinter import PyLinter
+linter = PyLinter(reporter=reporter)
+linter.load_default_plugins()
+linter.disable("all")
+linter.enable("unreachable")
+linter.enable("unused-variable")
+# Test different templates
+templates = [
+    '{{ "Category": "{category}" }}',  # Original case
+    '{{{category}}}',  # Triple braces
+    '{{ "Msg": "{msg}", "Category": "{category}" }}',  # Multiple fields
+    '{{ "{category}" }}',  # Nested quotes
+    '{{ "Category": "{invalid}" }}',  # Invalid field
+]
+
+# Test each template
+for template in templates:
+    print("\n=== Testing template:", template)
+    linter.set_option("msg-template", template)
+    output.truncate(0)  # Clear previous output
+    output.seek(0)
+    linter.check(["test.py"])
+    print("Template after:", reporter._fixed_template)
+    print("\nOutput:")
+    print(output.getvalue())
\ No newline at end of file
