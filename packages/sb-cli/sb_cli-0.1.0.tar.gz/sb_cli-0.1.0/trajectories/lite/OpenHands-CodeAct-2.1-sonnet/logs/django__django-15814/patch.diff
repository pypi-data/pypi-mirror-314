diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 33cc636b22..5036335bec 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -748,7 +748,7 @@ class Query(BaseExpression):
                     cur_model = source.related_model
                 else:
                     cur_model = source.remote_field.model
-                opts = cur_model._meta
+                opts = cur_model._meta.concrete_model._meta
                 # Even if we're "just passing through" this model, we must add
                 # both the current model's pk and the related reference field
                 # (if it's not a reverse relation) to the things we select.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..be2ea3e0f3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,61 @@
+from django.db import models
+from django.core.management import BaseCommand
+from django.conf import settings
+import django
+import os
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+    django.setup()
+
+# Define the models
+class CustomModel(models.Model):
+    name = models.CharField(max_length=16)
+    
+    class Meta:
+        managed = False
+        app_label = 'testapp'
+
+class ProxyCustomModel(CustomModel):
+    class Meta:
+        proxy = True
+        app_label = 'testapp'
+
+class AnotherModel(models.Model):
+    class Meta:
+        managed = False
+        app_label = 'testapp'
+        
+    custom = models.ForeignKey(
+        ProxyCustomModel,
+        on_delete=models.SET_NULL,
+        null=True,
+        blank=True,
+    )
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(CustomModel)
+    schema_editor.create_model(AnotherModel)
+
+# Create some test data
+custom = ProxyCustomModel.objects.create(name="test")
+another = AnotherModel.objects.create(custom=custom)
+
+# Try to reproduce the error
+objs = list(AnotherModel.objects.select_related("custom").only("custom__name").all())
+print("Success! Got objects:", objs)
\ No newline at end of file
