diff --git a/src/_pytest/outcomes.py b/src/_pytest/outcomes.py
index 2addf5572..922c63b9e 100644
--- a/src/_pytest/outcomes.py
+++ b/src/_pytest/outcomes.py
@@ -144,6 +144,26 @@ def skip(msg: str = "", *, allow_module_level: bool = False) -> "NoReturn":
     raise Skipped(msg=msg, allow_module_level=allow_module_level)
 
 
+@_with_exception(Skipped)
+def skip_module(msg: str = "") -> "NoReturn":
+    """Skip the current module with the given message.
+
+    This is a convenience function that calls :func:`skip` with ``allow_module_level=True``.
+    It can be used to skip a module that contains code that should not be executed
+    under certain conditions (e.g. Python version incompatibility).
+
+    Example::
+
+        import sys
+        if sys.version_info < (3, 8):
+            pytest.skip_module("Requires Python >= 3.8")
+
+    :param str msg: Message to display when the module is skipped.
+    """
+    __tracebackhide__ = True
+    raise Skipped(msg=msg, allow_module_level=True)
+
+
 @_with_exception(Failed)
 def fail(msg: str = "", pytrace: bool = True) -> "NoReturn":
     """Explicitly fail an executing test with the given message.
diff --git a/src/_pytest/python.py b/src/_pytest/python.py
index 79dfb7320..2ad8a7bb7 100644
--- a/src/_pytest/python.py
+++ b/src/_pytest/python.py
@@ -610,8 +610,9 @@ class Module(nodes.File, PyCollector):
             raise self.CollectError(
                 "Using pytest.skip outside of a test is not allowed. "
                 "To decorate a test function, use the @pytest.mark.skip "
-                "or @pytest.mark.skipif decorators instead, and to skip a "
-                "module use `pytestmark = pytest.mark.{skip,skipif}."
+                "or @pytest.mark.skipif decorators instead. To skip a "
+                "module, either use `pytestmark = pytest.mark.{skip,skipif}` "
+                "or call `pytest.skip(msg, allow_module_level=True)`."
             ) from e
         self.config.pluginmanager.consider_module(mod)
         return mod
diff --git a/src/pytest/__init__.py b/src/pytest/__init__.py
index 3694f0fc4..45ce9e7bf 100644
--- a/src/pytest/__init__.py
+++ b/src/pytest/__init__.py
@@ -40,6 +40,7 @@ from _pytest.outcomes import exit
 from _pytest.outcomes import fail
 from _pytest.outcomes import importorskip
 from _pytest.outcomes import skip
+from _pytest.outcomes import skip_module
 from _pytest.outcomes import xfail
 from _pytest.pytester import Pytester
 from _pytest.pytester import Testdir
@@ -131,6 +132,7 @@ __all__ = [
     "Session",
     "set_trace",
     "skip",
+    "skip_module",
     "version_tuple",
     "TempPathFactory",
     "Testdir",
diff --git a/testing/test_skip_module.py b/testing/test_skip_module.py
new file mode 100644
index 000000000..0c14fb1b1
--- /dev/null
+++ b/testing/test_skip_module.py
@@ -0,0 +1,48 @@
+"""Test the new skip_module functionality."""
+import sys
+import pytest
+from _pytest.pytester import Pytester
+
+
+def test_skip_module_function(pytester: Pytester) -> None:
+    """Test that skip_module works correctly."""
+    pytester.makepyfile(
+        """
+        import sys
+        import pytest
+
+        if sys.version_info < (999, 0):  # Always True
+            pytest.skip_module("Requires Python >= 999.0")
+
+        def test_never_runs():
+            assert False  # Should never get here
+        """
+    )
+    result = pytester.runpytest()
+    result.stdout.fnmatch_lines([
+        "*collected 0 items / 1 skipped*",
+        "*1 skipped in*",
+    ])
+    # When no tests are collected, pytest returns NO_TESTS_COLLECTED
+    assert result.ret == 5  # ExitCode.NO_TESTS_COLLECTED
+
+
+def test_skip_module_error_message(pytester: Pytester) -> None:
+    """Test that the error message for skip() without allow_module_level is helpful."""
+    pytester.makepyfile(
+        """
+        import sys
+        import pytest
+
+        if sys.version_info < (999, 0):  # Always True
+            pytest.skip("Requires Python >= 999.0")  # Missing allow_module_level=True
+
+        def test_never_runs():
+            assert False  # Should never get here
+        """
+    )
+    result = pytester.runpytest()
+    result.stdout.fnmatch_lines([
+        "*Using pytest.skip outside of a test is not allowed. To decorate a test function, use the @pytest.mark.skip or @pytest.mark.skipif decorators instead. To skip a module, either use `pytestmark = pytest.mark.{skip,skipif}` or call `pytest.skip(msg, allow_module_level=True)`.*",
+    ])
+    assert result.ret != 0
\ No newline at end of file
