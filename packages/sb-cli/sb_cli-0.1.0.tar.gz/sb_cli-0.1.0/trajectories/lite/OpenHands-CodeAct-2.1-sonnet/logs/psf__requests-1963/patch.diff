diff --git a/reproduce_redirect.py b/reproduce_redirect.py
new file mode 100644
index 00000000..57a5770e
--- /dev/null
+++ b/reproduce_redirect.py
@@ -0,0 +1,45 @@
+import requests
+from http.server import HTTPServer, BaseHTTPRequestHandler
+import threading
+import time
+
+class RedirectHandler(BaseHTTPRequestHandler):
+    def do_POST(self):
+        if self.path == '/do_something':
+            # Return 303 See Other
+            self.send_response(303)
+            self.send_header('Location', '/new_thing_1513')
+            self.end_headers()
+        else:
+            self.send_response(404)
+            self.end_headers()
+            
+    def do_GET(self):
+        if self.path == '/new_thing_1513':
+            # Return 307 Temporary Redirect
+            self.send_response(307)
+            self.send_header('Location', '//localhost:8000/final')
+            self.end_headers()
+        else:
+            self.send_response(200)
+            self.send_header('Content-Type', 'text/plain')
+            self.end_headers()
+            self.wfile.write(f'Method: {self.command}\n'.encode())
+
+def run_server():
+    server = HTTPServer(('localhost', 8000), RedirectHandler)
+    server.serve_forever()
+
+if __name__ == '__main__':
+    # Start server in background thread
+    server_thread = threading.Thread(target=run_server)
+    server_thread.daemon = True
+    server_thread.start()
+    
+    # Give server time to start
+    time.sleep(1)
+    
+    # Make request
+    print("Making POST request to /do_something...")
+    response = requests.post('http://localhost:8000/do_something')
+    print(f"Final response: {response.text}")
\ No newline at end of file
diff --git a/requests/sessions.py b/requests/sessions.py
index 425db22c..86d156d3 100644
--- a/requests/sessions.py
+++ b/requests/sessions.py
@@ -99,7 +99,8 @@ class SessionRedirectMixin(object):
             resp.close()
 
             url = resp.headers['location']
-            method = req.method
+            # Use the method from the previous request instead of the original
+            method = resp.request.method
 
             # Handle redirection without scheme (see: RFC 1808 Section 4)
             if url.startswith('//'):
