diff --git a/reproduce_nca_error.py b/reproduce_nca_error.py
new file mode 100644
index 000000000..29cb498fc
--- /dev/null
+++ b/reproduce_nca_error.py
@@ -0,0 +1,24 @@
+import numpy as np
+
+from sklearn.pipeline import Pipeline
+from sklearn.model_selection import GridSearchCV
+from sklearn.neighbors import NeighborhoodComponentsAnalysis
+from sklearn.neighbors import KNeighborsClassifier
+
+# Set random seed for reproducibility
+np.random.seed(42)
+
+X = np.random.random_sample((100, 10))
+y = np.random.randint(2, size=100)
+
+nca = NeighborhoodComponentsAnalysis()
+knn = KNeighborsClassifier()
+
+pipe = Pipeline([('nca', nca),
+                ('knn', knn)])
+                
+params = {'nca__tol': [0.1, 0.5, 1],
+          'nca__n_components': np.arange(1, 10)}
+          
+gs = GridSearchCV(estimator=pipe, param_grid=params, error_score='raise')
+gs.fit(X,y)
\ No newline at end of file
diff --git a/sklearn/utils/validation.py b/sklearn/utils/validation.py
index 8747844e5..7fe423a2a 100644
--- a/sklearn/utils/validation.py
+++ b/sklearn/utils/validation.py
@@ -971,7 +971,18 @@ def check_scalar(x, name, target_type, min_val=None, max_val=None):
     ValueError
         If the parameter's value violates the given bounds.
     """
-
+    import numpy as np
+
+    # Handle numpy numeric types and type conversions
+    if target_type == int:
+        if isinstance(x, np.integer):
+            x = int(x)
+        elif isinstance(x, (int, float, np.floating)):
+            x = int(x)
+    elif target_type == float:
+        if isinstance(x, (np.integer, np.floating, int, float)):
+            x = float(x)
+    
     if not isinstance(x, target_type):
         raise TypeError('`{}` must be an instance of {}, not {}.'
                         .format(name, target_type, type(x)))
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..2fcdaadff
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,62 @@
+import numpy as np
+from sklearn.utils.validation import check_scalar
+
+# Test cases for int target_type
+print("Testing int target_type:")
+try:
+    check_scalar(np.int64(42), 'test', int)
+    print("✓ np.int64 -> int")
+except Exception as e:
+    print("✗ np.int64 -> int:", str(e))
+
+try:
+    check_scalar(42.0, 'test', int)
+    print("✓ float -> int")
+except Exception as e:
+    print("✗ float -> int:", str(e))
+
+try:
+    check_scalar(np.float64(42), 'test', int)
+    print("✓ np.float64 -> int")
+except Exception as e:
+    print("✗ np.float64 -> int:", str(e))
+
+# Test cases for float target_type
+print("\nTesting float target_type:")
+try:
+    check_scalar(1, 'test', float)
+    print("✓ int -> float")
+except Exception as e:
+    print("✗ int -> float:", str(e))
+
+try:
+    check_scalar(np.int64(1), 'test', float)
+    print("✓ np.int64 -> float")
+except Exception as e:
+    print("✗ np.int64 -> float:", str(e))
+
+try:
+    check_scalar(np.float64(1.5), 'test', float)
+    print("✓ np.float64 -> float")
+except Exception as e:
+    print("✗ np.float64 -> float:", str(e))
+
+# Test min/max validation
+print("\nTesting min/max validation:")
+try:
+    check_scalar(5, 'test', int, min_val=0, max_val=10)
+    print("✓ Valid range")
+except Exception as e:
+    print("✗ Valid range:", str(e))
+
+try:
+    check_scalar(-1, 'test', int, min_val=0)
+    print("✗ Below min_val (should fail)")
+except ValueError:
+    print("✓ Below min_val caught correctly")
+
+try:
+    check_scalar(11, 'test', int, max_val=10)
+    print("✗ Above max_val (should fail)")
+except ValueError:
+    print("✓ Above max_val caught correctly")
\ No newline at end of file
