diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..965a5032ba
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,30 @@
+from sympy import Symbol, S, simplify, N
+
+x = Symbol('x')
+
+# Test case 1: Symbol with integer=True, positive=True
+print("Test case 1: Symbol with integer=True, positive=True")
+a = Symbol('a', integer=True, positive=True)
+e = (-a)**x * a**(-x)
+f = simplify(e)
+print("e =", e)
+print("f =", f)
+t = -S(10)/3
+n1 = e.subs(x,t)
+n2 = f.subs(x,t)
+print("n1 =", N(n1))
+print("n2 =", N(n2))
+print()
+
+# Test case 2: Concrete integer value
+print("Test case 2: Concrete integer value")
+a = S(2)
+e = (-a)**x * a**(-x)
+f = simplify(e)
+print("e =", e)
+print("f =", f)
+t = -S(10)/3
+n1 = e.subs(x,t)
+n2 = f.subs(x,t)
+print("n1 =", N(n1))
+print("n2 =", N(n2))
\ No newline at end of file
diff --git a/sympy/core/power.py b/sympy/core/power.py
index 02ec6480cb..2c6e0dbc5a 100644
--- a/sympy/core/power.py
+++ b/sympy/core/power.py
@@ -320,6 +320,11 @@ def _eval_power(self, other):
         if b is S.NaN:
             return (b**e)**other  # let __new__ handle it
 
+        # Special case for (-a)**x where a is a concrete positive integer
+        if b.is_negative and b.is_Integer and e.is_Symbol:
+            # Split (-a)**x into (-1)**x * a**x
+            return (S.NegativeOne**e * (-b)**e)**other
+
         s = None
         if other.is_integer:
             s = 1
diff --git a/sympy/simplify/powsimp.py b/sympy/simplify/powsimp.py
index a7fd30e118..69a1858ad4 100644
--- a/sympy/simplify/powsimp.py
+++ b/sympy/simplify/powsimp.py
@@ -209,6 +209,23 @@ def recurse(arg, **kwargs):
                         c_powers[_n] += e
                     else:
                         c_powers[_n] = e
+            # Special case for concrete integers
+            elif b.is_negative and b.is_Integer and not e.is_integer:
+                # Split (-a)**x into (-1)**x * a**x
+                if _n in c_powers:
+                    c_powers[_n] += e
+                else:
+                    c_powers[_n] = e
+                if -b in c_powers:
+                    c_powers[-b] += e
+                else:
+                    c_powers[-b] = e
+                c_powers.pop(b)
+                c_powers.pop(b)
+                    c_powers[-b] += e
+                else:
+                    c_powers[-b] = e
+                c_powers.pop(b)
 
         # filter c_powers and convert to a list
         c_powers = [(b, e) for b, e in c_powers.items() if e]
