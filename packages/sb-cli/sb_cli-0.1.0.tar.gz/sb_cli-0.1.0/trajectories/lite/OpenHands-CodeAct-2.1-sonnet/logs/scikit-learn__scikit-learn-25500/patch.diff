diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..45f1fde35
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,9 @@
+import numpy as np
+from sklearn import set_config
+from sklearn.calibration import CalibratedClassifierCV
+from sklearn.linear_model import SGDClassifier
+
+set_config(transform_output="pandas")
+model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')
+model.fit(np.arange(90).reshape(30, -1), np.arange(30) % 2)
+model.predict(np.arange(90).reshape(30, -1))
\ No newline at end of file
diff --git a/sklearn/calibration.py b/sklearn/calibration.py
index 2c4a33616..52addf340 100644
--- a/sklearn/calibration.py
+++ b/sklearn/calibration.py
@@ -760,7 +760,13 @@ class _CalibratedClassifier:
                 # When binary, `predictions` consists only of predictions for
                 # clf.classes_[1] but `pos_class_indices` = 0
                 class_idx += 1
-            proba[:, class_idx] = calibrator.predict(this_pred)
+            calibrated_predictions = calibrator.predict(this_pred)
+            # Handle case when calibrator returns a pandas DataFrame
+            if hasattr(calibrated_predictions, "values"):
+                calibrated_predictions = calibrated_predictions.values
+            if calibrated_predictions.ndim == 2:
+                calibrated_predictions = calibrated_predictions.ravel()
+            proba[:, class_idx] = calibrated_predictions
 
         # Normalize the probabilities
         if n_classes == 2:
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..c9efb2e44
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,30 @@
+import numpy as np
+from sklearn import set_config
+from sklearn.calibration import CalibratedClassifierCV
+from sklearn.linear_model import SGDClassifier
+
+# Test multi-class case
+print("Testing multi-class case...")
+set_config(transform_output="pandas")
+X = np.arange(90).reshape(30, -1)
+y = np.arange(30) % 3  # 3 classes
+model = CalibratedClassifierCV(SGDClassifier(), method='isotonic')
+model.fit(X, y)
+probs = model.predict_proba(X)
+print("Multi-class predictions shape:", probs.shape)
+print("Sum of probabilities:", np.allclose(np.sum(probs, axis=1), 1.0))
+
+# Test with different input shapes
+print("\nTesting different input shapes...")
+X_single = np.arange(3).reshape(1, -1)
+probs_single = model.predict_proba(X_single)
+print("Single sample prediction shape:", probs_single.shape)
+
+# Test with different dtypes
+print("\nTesting different dtypes...")
+X_float32 = X.astype(np.float32)
+model_float32 = CalibratedClassifierCV(SGDClassifier(), method='isotonic')
+model_float32.fit(X_float32, y)
+probs_float32 = model_float32.predict_proba(X_float32)
+print("float32 predictions shape:", probs_float32.shape)
+print("Sum of probabilities (float32):", np.allclose(np.sum(probs_float32, axis=1), 1.0))
\ No newline at end of file
