diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index e287a6f55a..c8b6db12b9 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -132,6 +132,12 @@ class SQLCompiler:
         return result
 
     def collapse_group_by(self, expressions, having):
+        # If this is a subquery used in a filter condition, we should preserve the original
+        # GROUP BY fields and not add additional ones
+        if self.query.subquery and self.query.group_by and isinstance(self.query.group_by, tuple):
+            # Keep only the original GROUP BY expressions
+            return [expr for expr in expressions if expr in self.query.group_by]
+
         # If the DB can group by primary key, then group by the primary key of
         # query's main model. Note that for PostgreSQL the GROUP BY clause must
         # include the primary key of every table, but for MySQL it is enough to
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..bc5079da47
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,45 @@
+from django.conf import settings
+from django.db import connection
+
+# Configure minimal Django settings first
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ]
+)
+
+import django
+django.setup()
+
+# Now we can import models
+from django.contrib.auth import models
+from django.db.models import Max
+
+# Create tables
+from django.core.management import call_command
+call_command('migrate', verbosity=0)
+
+# Create some test data
+models.User.objects.create(username='user1', email='user1@example.com')
+models.User.objects.create(username='user2', email='user2@example.com')
+models.User.objects.create(username='user3', email='')  # Empty string instead of None
+models.User.objects.create(username='user4', email='')
+
+# Reproduce the issue
+a = models.User.objects.filter(email='').values('email').annotate(m=Max('id')).values('m')
+print("Original query:")
+print(a.query)
+print("\nSliced query:")
+print(a[:1].query)
+
+b = models.User.objects.filter(id=a[:1])
+print("\nFinal query:")
+print(b.query)
\ No newline at end of file
