diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..b4d88544
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,27 @@
+import seaborn.objects as so
+import pandas as pd
+
+def test_polyfit(x, y, name=""):
+    data = pd.DataFrame({"x": x, "y": y})
+    polyfit = so.PolyFit()
+    result = polyfit._fit_predict(data)
+    print(f"\nTest {name}:")
+    print("Input x:", x)
+    print("Input y:", y)
+    print("Result shape:", result.shape)
+    return result
+
+# Test case 1: Original case with one missing value
+test_polyfit([1, 2, 3, None, 4], [1, 2, 3, 4, 5], "one missing value")
+
+# Test case 2: Multiple missing values
+test_polyfit([1, None, 3, None, 5], [1, 2, None, 4, 5], "multiple missing values")
+
+# Test case 3: All missing values
+test_polyfit([None, None, None], [None, None, None], "all missing values")
+
+# Test case 4: Not enough points after dropping NaNs
+test_polyfit([1, None, None, None, 5], [1, 2, 3, 4, 5], "not enough points")
+
+# Test case 5: Empty input
+test_polyfit([], [], "empty input")
\ No newline at end of file
diff --git a/seaborn/_stats/regression.py b/seaborn/_stats/regression.py
index 7b7ddc8d..ebaba767 100644
--- a/seaborn/_stats/regression.py
+++ b/seaborn/_stats/regression.py
@@ -23,12 +23,18 @@ class PolyFit(Stat):
 
         x = data["x"]
         y = data["y"]
-        if x.nunique() <= self.order:
-            # TODO warn?
+        
+        # Drop any missing values
+        mask = pd.notna(x) & pd.notna(y)
+        x_clean = x[mask]
+        y_clean = y[mask]
+        
+        if len(x_clean) <= self.order:
+            # Not enough valid points to fit polynomial of this order
             xx = yy = []
         else:
-            p = np.polyfit(x, y, self.order)
-            xx = np.linspace(x.min(), x.max(), self.gridsize)
+            p = np.polyfit(x_clean, y_clean, self.order)
+            xx = np.linspace(x_clean.min(), x_clean.max(), self.gridsize)
             yy = np.polyval(p, xx)
 
         return pd.DataFrame(dict(x=xx, y=yy))
