diff --git a/django/core/validators.py b/django/core/validators.py
index 72fbe15551..45193afa35 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -127,7 +127,11 @@ class URLValidator(RegexValidator):
                 raise
         else:
             # Now verify IPv6 in the netloc part
-            host_match = re.search(r'^\[(.+)\](?::\d{1,5})?$', urlsplit(value).netloc)
+            try:
+                netloc = urlsplit(value).netloc
+            except ValueError:
+                raise ValidationError(self.message, code=self.code, params={'value': value})
+            host_match = re.search(r'^\[(.+)\](?::\d{1,5})?$', netloc)
             if host_match:
                 potential_ip = host_match[1]
                 try:
diff --git a/django/forms/fields.py b/django/forms/fields.py
index 65d6a9ec82..a8e829a5d3 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -687,26 +687,30 @@ class URLField(CharField):
             """
             try:
                 return list(urlsplit(url))
-            except ValueError:
+            except ValueError as e:
                 # urlparse.urlsplit can raise a ValueError with some
-                # misformatted URLs.
-                raise ValidationError(self.error_messages['invalid'], code='invalid')
+                # misformatted URLs, including malformed IPv6 URLs
+                raise ValidationError(self.error_messages['invalid'], code='invalid', params={'value': url})
 
         value = super().to_python(value)
         if value:
-            url_fields = split_url(value)
-            if not url_fields[0]:
-                # If no URL scheme given, assume http://
-                url_fields[0] = 'http'
-            if not url_fields[1]:
-                # Assume that if no domain is provided, that the path segment
-                # contains the domain.
-                url_fields[1] = url_fields[2]
-                url_fields[2] = ''
-                # Rebuild the url_fields list, since the domain segment may now
-                # contain the path too.
-                url_fields = split_url(urlunsplit(url_fields))
-            value = urlunsplit(url_fields)
+            try:
+                url_fields = split_url(value)
+                if not url_fields[0]:
+                    # If no URL scheme given, assume http://
+                    url_fields[0] = 'http'
+                if not url_fields[1]:
+                    # Assume that if no domain is provided, that the path segment
+                    # contains the domain.
+                    url_fields[1] = url_fields[2]
+                    url_fields[2] = ''
+                    # Rebuild the url_fields list, since the domain segment may now
+                    # contain the path too.
+                    url_fields = split_url(urlunsplit(url_fields))
+                value = urlunsplit(url_fields)
+            except ValueError:
+                # Handle any ValueError that might occur during URL manipulation
+                raise ValidationError(self.error_messages['invalid'], code='invalid', params={'value': value})
         return value
