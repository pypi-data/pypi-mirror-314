diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..15a826581
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,8 @@
+from sklearn.cluster import AffinityPropagation
+import pandas as pd
+
+data = pd.DataFrame([[1,0,0,0,0,0],[0,1,1,1,0,0],[0,0,1,0,0,1]])
+af = AffinityPropagation(affinity='euclidean', verbose=True, copy=False, max_iter=2).fit(data)
+
+print("Cluster centers indices:", af.cluster_centers_indices_)
+print("Labels:", af.labels_)
\ No newline at end of file
diff --git a/sklearn/cluster/_affinity_propagation.py b/sklearn/cluster/_affinity_propagation.py
index 4806afee9..3606ccaef 100644
--- a/sklearn/cluster/_affinity_propagation.py
+++ b/sklearn/cluster/_affinity_propagation.py
@@ -151,6 +151,7 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,
     e = np.zeros((n_samples, convergence_iter))
 
     ind = np.arange(n_samples)
+    converged = False
 
     for it in range(max_iter):
         # tmp = A + S; compute responsibilities
@@ -193,7 +194,8 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,
             se = np.sum(e, axis=1)
             unconverged = (np.sum((se == convergence_iter) + (se == 0))
                            != n_samples)
-            if (not unconverged and (K > 0)) or (it == max_iter):
+            if not unconverged and (K > 0):
+                converged = True
                 if verbose:
                     print("Converged after %d iterations." % it)
                 break
@@ -204,7 +206,7 @@ def affinity_propagation(S, preference=None, convergence_iter=15, max_iter=200,
     I = np.flatnonzero(E)
     K = I.size  # Identify exemplars
 
-    if K > 0:
+    if converged and K > 0:
         c = np.argmax(S[:, I], axis=1)
         c[I] = np.arange(K)  # Identify clusters
         # Refine the final set of exemplars and clusters and return results
diff --git a/test_converge.py b/test_converge.py
new file mode 100644
index 000000000..eb9f7620f
--- /dev/null
+++ b/test_converge.py
@@ -0,0 +1,12 @@
+from sklearn.cluster import AffinityPropagation
+import numpy as np
+
+# Create well-separated data that should converge quickly
+X = np.array([[1, 1], [2, 1], [1, 2],  # Cluster 1
+              [8, 8], [9, 8], [8, 9],  # Cluster 2
+              [15, 15], [16, 15], [15, 16]])  # Cluster 3
+
+af = AffinityPropagation(affinity='euclidean', verbose=True, copy=False).fit(X)
+
+print("Cluster centers indices:", af.cluster_centers_indices_)
+print("Labels:", af.labels_)
\ No newline at end of file
