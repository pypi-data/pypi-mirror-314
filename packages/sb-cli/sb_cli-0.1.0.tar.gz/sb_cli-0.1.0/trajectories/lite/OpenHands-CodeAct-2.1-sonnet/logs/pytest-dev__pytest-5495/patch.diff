diff --git a/src/_pytest/assertion/util.py b/src/_pytest/assertion/util.py
index 762e5761d..e7fcb057f 100644
--- a/src/_pytest/assertion/util.py
+++ b/src/_pytest/assertion/util.py
@@ -181,6 +181,9 @@ def _diff_text(left, right, verbose=0):
         This is done using repr() which then needs post-processing to fix the encompassing quotes and un-escape
         newlines and carriage returns (#429).
         """
+        if isinstance(binary_text, bytes):
+            # For bytes, we want to show the actual bytes in hex format
+            return ' '.join('{:02x}'.format(b) for b in binary_text)
         r = str(repr(binary_text)[1:-1])
         r = r.replace(r"\n", "\n")
         r = r.replace(r"\r", "\r")
@@ -257,31 +260,49 @@ def _compare_eq_sequence(left, right, verbose=0):
     explanation = []
     len_left = len(left)
     len_right = len(right)
-    for i in range(min(len_left, len_right)):
-        if left[i] != right[i]:
-            explanation += [
-                "At index {} diff: {!r} != {!r}".format(i, left[i], right[i])
-            ]
-            break
-    len_diff = len_left - len_right
+    
+    # Special handling for byte strings
+    if isinstance(left, bytes) and isinstance(right, bytes):
+        for i in range(min(len_left, len_right)):
+            if left[i] != right[i]:
+                explanation += [
+                    "At index {} diff: {:#x} != {:#x} (hex), {} != {} (decimal)".format(
+                        i, left[i], right[i], left[i], right[i]
+                    )
+                ]
+                break
+    else:
+        for i in range(min(len_left, len_right)):
+            if left[i] != right[i]:
+                explanation += [
+                    "At index {} diff: {!r} != {!r}".format(i, left[i], right[i])
+                ]
+                break
 
+    len_diff = len_left - len_right
     if len_diff:
         if len_diff > 0:
             dir_with_more = "Left"
-            extra = saferepr(left[len_right])
+            extra = left[len_right]
         else:
             len_diff = 0 - len_diff
             dir_with_more = "Right"
-            extra = saferepr(right[len_left])
+            extra = right[len_left]
+
+        # Special handling for byte strings
+        if isinstance(left, bytes) and isinstance(right, bytes):
+            extra_repr = "{:#x} (hex), {} (decimal)".format(extra, extra)
+        else:
+            extra_repr = saferepr(extra)
 
         if len_diff == 1:
             explanation += [
-                "{} contains one more item: {}".format(dir_with_more, extra)
+                "{} contains one more item: {}".format(dir_with_more, extra_repr)
             ]
         else:
             explanation += [
                 "%s contains %d more items, first extra item: %s"
-                % (dir_with_more, len_diff, extra)
+                % (dir_with_more, len_diff, extra_repr)
             ]
     return explanation
 
diff --git a/test_bytes.py b/test_bytes.py
new file mode 100644
index 000000000..00cce9b84
--- /dev/null
+++ b/test_bytes.py
@@ -0,0 +1,5 @@
+def test_bytes():
+    assert b"" == b"42"
+
+def test_bytes_2():
+    assert b"hello" == b"world"
\ No newline at end of file
