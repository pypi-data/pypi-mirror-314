diff --git a/django/contrib/auth/management/__init__.py b/django/contrib/auth/management/__init__.py
index 0b5a982617..8020f10829 100644
--- a/django/contrib/auth/management/__init__.py
+++ b/django/contrib/auth/management/__init__.py
@@ -95,11 +95,14 @@ def create_permissions(
         .values_list("content_type", "codename")
     )
 
-    perms = [
-        Permission(codename=codename, name=name, content_type=ct)
-        for ct, (codename, name) in searched_perms
-        if (ct.pk, codename) not in all_perms
-    ]
+    # Create new permissions with the correct database state
+    perms = []
+    for ct, (codename, name) in searched_perms:
+        if (ct.pk, codename) not in all_perms:
+            perm = Permission(codename=codename, name=name, content_type=ct)
+            perm._state.db = using  # Set the database for the instance
+            perms.append(perm)
+
     Permission.objects.using(using).bulk_create(perms)
     if verbosity >= 2:
         for perm in perms:
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..b2eff3f844
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,66 @@
+import os
+import django
+from django.conf import settings
+from threading import local
+
+# Configure Django settings
+local_state = local()
+
+if not settings.configured:
+    settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        },
+        'other': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    DATABASE_ROUTERS=['reproduce.TenantDatabaseRouter'],
+    MIGRATION_MODULES={
+        'contenttypes': None,
+        'auth': None,
+    },
+)
+
+
+
+class TenantDatabaseRouter:
+    def db_for_read(self, model, **hints):
+        print(f"read {hints} for {model.__name__}")
+        return hints.get('using', 'other')
+    
+    def db_for_write(self, model, **hints):
+        print(f"write {hints} for {model.__name__}")
+        return hints.get('using', 'other')
+    
+    def allow_relation(self, obj1, obj2, **hints):
+        return True
+    
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        # Allow migrations on both databases
+        return True
+
+django.setup()
+
+# Now run migrations
+import os
+from django.core.management import call_command
+
+
+
+
+
+
+
+
+
+print("\nRunning migrations on 'other' database...")
+call_command('migrate', database='other', verbosity=1, interactive=False, run_syncdb=True)
\ No newline at end of file
