diff --git a/django/utils/numberformat.py b/django/utils/numberformat.py
index 88b35fc435..de63b708f5 100644
--- a/django/utils/numberformat.py
+++ b/django/utils/numberformat.py
@@ -27,9 +27,31 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
     # sign
     sign = ''
     if isinstance(number, Decimal):
-        # Format values with more than 200 digits (an arbitrary cutoff) using
-        # scientific notation to avoid high memory usage in {:f}'.format().
-        _, digits, exponent = number.as_tuple()
+        sign, digits, exponent = number.as_tuple()
+        
+        # If decimal_pos is specified, handle special cases
+        if decimal_pos is not None:
+            # If the number is smaller than what can be represented with decimal_pos,
+            # return 0 with the requested decimal places
+            if abs(number) < Decimal('0.5') * Decimal('10') ** (-decimal_pos):
+                return ('0' if sign == 0 else '-0') + decimal_sep + '0' * decimal_pos
+            
+            # For very large numbers, use scientific notation
+            if abs(exponent) + len(digits) > 200:
+                number = '{:e}'.format(number)
+                coefficient, exponent = number.split('e')
+                # Format the coefficient.
+                coefficient = format(
+                    coefficient, decimal_sep, decimal_pos, grouping,
+                    thousand_sep, force_grouping, use_l10n,
+                )
+                return '{}e{}'.format(coefficient, exponent)
+                
+            # For regular numbers, format with requested decimal places
+            str_number = '{:.{}f}'.format(number, decimal_pos)
+            return str_number.replace('.', decimal_sep)
+            
+        # No decimal_pos specified - use scientific notation for very large numbers
         if abs(exponent) + len(digits) > 200:
             number = '{:e}'.format(number)
             coefficient, exponent = number.split('e')
@@ -39,8 +61,8 @@ def format(number, decimal_sep, decimal_pos=None, grouping=0, thousand_sep='',
                 thousand_sep, force_grouping, use_l10n,
             )
             return '{}e{}'.format(coefficient, exponent)
-        else:
-            str_number = '{:f}'.format(number)
+            
+        str_number = '{:f}'.format(number)
     else:
         str_number = str(number)
     if str_number[0] == '-':
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..0e06e278dc
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,30 @@
+from decimal import Decimal
+from django.conf import settings
+from django.utils.numberformat import format as nformat
+
+# Configure Django settings
+settings.configure(USE_L10N=False, USE_THOUSAND_SEPARATOR=False)
+
+# Test cases
+test_cases = [
+    # Original test cases
+    Decimal('1e-199'),  # Should be '0.00'
+    Decimal('1e-200'),  # Should be '0.00'
+    Decimal('1e-201'),  # Should be '0.00'
+    Decimal('0.000000000000001'),  # Regular small decimal
+    Decimal('-1e-200'),  # Test negative small number
+    
+    # Edge cases
+    Decimal('0.001'),  # Should be '0.00'
+    Decimal('0.005'),  # Should be '0.01' (rounding)
+    Decimal('0.01'),   # Should be '0.01'
+    Decimal('1.005'),  # Should be '1.01' (rounding)
+    Decimal('1.234'),  # Should be '1.23'
+    Decimal('1e-2'),   # Should be '0.01'
+    Decimal('1e-3'),   # Should be '0.00'
+    Decimal('1e200'),  # Should still use scientific notation
+]
+
+for num in test_cases:
+    result = nformat(num, '.', decimal_pos=2)
+    print(f"nformat({num}, '.', decimal_pos=2) = {result}")
\ No newline at end of file
