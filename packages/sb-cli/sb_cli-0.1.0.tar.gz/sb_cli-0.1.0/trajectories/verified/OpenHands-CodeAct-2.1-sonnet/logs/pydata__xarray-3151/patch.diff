diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..25fd4873
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,29 @@
+import xarray as xr
+import numpy as np
+
+# Non-monotonic y coordinates
+yCoord = ['a', 'c', 'b']  # raises ValueError on combine
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(3, 3))
+    ),
+    coords=dict(
+        x=[1, 2, 3],
+        y=yCoord
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.random.rand(4, 3))
+    ),
+    coords = dict(
+        x=[4, 5, 6, 7],
+        y=yCoord
+    )
+)
+
+print("Attempting to combine datasets...")
+ds3 = xr.combine_by_coords((ds1, ds2))
+print("Success! Combined dataset shape:", ds3.data.shape)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..1e92653b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,82 @@
+import xarray as xr
+import numpy as np
+
+def test_case(name, case):
+    print(f"\nTesting {name}...")
+    try:
+        result = xr.combine_by_coords(case)
+        if 'data' in result:
+            print("Success! Combined shape:", result.data.shape)
+        else:
+            print("Success! Dataset variables:", list(result.data_vars.keys()))
+        return True
+    except Exception as e:
+        print("Failed with error:", str(e))
+        return False
+
+# Test case 1: Multiple dimensions, some monotonic and some not
+yCoord = ['a', 'c', 'b']  # non-monotonic
+zCoord = [1, 2, 3]  # monotonic
+
+ds1 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(2, 3, 3))
+    ),
+    coords=dict(
+        x=[1, 2],
+        y=yCoord,
+        z=zCoord
+    )
+)
+
+ds2 = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y', 'z'], np.random.rand(2, 3, 3))
+    ),
+    coords=dict(
+        x=[3, 4],
+        y=yCoord,  # Same non-monotonic y coords
+        z=zCoord   # Same monotonic z coords
+    )
+)
+
+test_case("Multiple dimensions with mixed monotonicity", [ds1, ds2])
+
+# Test case 2: Empty dataset
+ds_empty = xr.Dataset(
+    data_vars=dict(
+        data=(['x', 'y'], np.array([]).reshape(0, 0))
+    ),
+    coords=dict(
+        x=[],
+        y=[]
+    )
+)
+
+test_case("Empty dataset", [ds_empty])
+
+# Test case 3: Single dataset
+test_case("Single dataset", [ds1])
+
+# Test case 4: Datasets with different variables but same coords
+ds3 = xr.Dataset(
+    data_vars=dict(
+        temp=(['x', 'y'], np.random.rand(2, 3))
+    ),
+    coords=dict(
+        x=[1, 2],
+        y=yCoord
+    )
+)
+
+ds4 = xr.Dataset(
+    data_vars=dict(
+        humidity=(['x', 'y'], np.random.rand(2, 3))
+    ),
+    coords=dict(
+        x=[3, 4],
+        y=yCoord
+    )
+)
+
+test_case("Different variables, same coords", [ds3, ds4])
\ No newline at end of file
diff --git a/xarray/core/combine.py b/xarray/core/combine.py
index 37ae903b..3a41c38e 100644
--- a/xarray/core/combine.py
+++ b/xarray/core/combine.py
@@ -501,7 +501,8 @@ def combine_by_coords(datasets, compat='no_conflicts', data_vars='all',
                                    fill_value=fill_value)
 
         # Check the overall coordinates are monotonically increasing
-        for dim in concatenated.dims:
+        # Only check dimensions that were actually concatenated
+        for dim in concat_dims:
             if dim in concatenated:
                 indexes = concatenated.indexes.get(dim)
                 if not (indexes.is_monotonic_increasing
