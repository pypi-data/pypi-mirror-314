diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index e2bbf061e..b74120ce5 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -610,11 +610,17 @@ class PyLinter(
                         skip_subtrees.append(root)
                         yield root
                     else:
-                        yield from (
-                            os.path.join(root, file)
-                            for file in files
-                            if file.endswith(".py")
-                        )
+                        for file in files:
+                            if not file.endswith(".py"):
+                                continue
+                            filepath = os.path.join(root, file)
+                            if not _is_ignored_file(
+                                filepath,
+                                self.config.ignore,
+                                self.config.ignore_patterns,
+                                self.config.ignore_paths,
+                            ):
+                                yield filepath
             else:
                 yield something
 
diff --git a/pyproject.toml b/pyproject.toml
new file mode 100644
index 000000000..113d62978
--- /dev/null
+++ b/pyproject.toml
@@ -0,0 +1,4 @@
+[tool.pylint.MASTER]
+ignore-paths = [
+    "^src/gen/.*$",
+]
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 000000000..c11311a4f
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,87 @@
+import os
+import subprocess
+
+# Create test directory structure
+os.makedirs("src/gen", exist_ok=True)
+
+# Create a test file in src/gen with a function that has too many local variables
+with open("src/gen/test.py", "w") as f:
+    f.write("""# Test file
+def bad_function():  # pylint should complain about this
+    x = 1
+    y = 2
+    z = 3
+    a = 4
+    b = 5
+    c = 6
+    d = 7
+    e = 8
+    f = 9
+    g = 10
+    h = 11
+    i = 12
+    j = 13
+    k = 14
+    l = 15
+    m = 16  # Too many local variables!
+    n = 17  # Even more variables!
+    o = 18  # This is getting ridiculous!
+    p = 19  # Stop it!
+    q = 20  # Please stop!
+    return x + y + z + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q
+""")
+
+# Create a test file in src
+with open("src/main.py", "w") as f:
+    f.write("""def good_function():
+    return 42
+""")
+
+# Create pyproject.toml
+with open("pyproject.toml", "w") as f:
+    f.write("""[tool.pylint.MASTER]
+ignore-paths = [
+    "^src/gen/.*$",
+]
+""")
+
+# Print pylint version
+print("Pylint version:")
+result = subprocess.run(["pylint", "--version"], capture_output=True, text=True)
+print(result.stdout)
+
+# Print pyproject.toml content
+print("\npyproject.toml content:")
+with open("pyproject.toml", "r") as f:
+    print(f.read())
+
+# Print directory structure
+print("\nDirectory structure:")
+for root, dirs, files in os.walk("src"):
+    for file in files:
+        print(os.path.join(root, file))
+
+# Print file contents
+print("\nFile contents:")
+print("\nsrc/gen/test.py:")
+with open("src/gen/test.py", "r") as f:
+    print(f.read())
+print("\nsrc/main.py:")
+with open("src/main.py", "r") as f:
+    print(f.read())
+
+# Run pylint with --recursive=y and -v to see what files are being checked
+print("\nRunning pylint with --recursive=y and -v...")
+result = subprocess.run(["pylint", "--recursive=y", "-v", "--rcfile=pyproject.toml", "src/"], capture_output=True, text=True)
+print("\nOutput:")
+print(result.stdout)
+print("\nErrors:")
+print(result.stderr)
+
+# Run pylint without --recursive to compare
+print("\nRunning pylint without --recursive for comparison...")
+result = subprocess.run(["pylint", "-v", "--rcfile=pyproject.toml", "src/"], capture_output=True, text=True)
+print("\nOutput:")
+print(result.stdout)
+print("\nErrors:")
+print(result.stderr)
\ No newline at end of file
diff --git a/src/gen/test.py b/src/gen/test.py
new file mode 100644
index 000000000..6ee66bbe0
--- /dev/null
+++ b/src/gen/test.py
@@ -0,0 +1,23 @@
+# Test file
+def bad_function():  # pylint should complain about this
+    x = 1
+    y = 2
+    z = 3
+    a = 4
+    b = 5
+    c = 6
+    d = 7
+    e = 8
+    f = 9
+    g = 10
+    h = 11
+    i = 12
+    j = 13
+    k = 14
+    l = 15
+    m = 16  # Too many local variables!
+    n = 17  # Even more variables!
+    o = 18  # This is getting ridiculous!
+    p = 19  # Stop it!
+    q = 20  # Please stop!
+    return x + y + z + a + b + c + d + e + f + g + h + i + j + k + l + m + n + o + p + q
diff --git a/src/main.py b/src/main.py
new file mode 100644
index 000000000..4794af525
--- /dev/null
+++ b/src/main.py
@@ -0,0 +1,2 @@
+def good_function():
+    return 42
