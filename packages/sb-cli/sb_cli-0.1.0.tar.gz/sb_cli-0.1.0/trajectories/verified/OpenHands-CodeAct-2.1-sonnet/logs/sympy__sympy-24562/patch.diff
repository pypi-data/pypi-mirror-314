diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..25fbdc9664
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,43 @@
+from sympy import Rational
+
+# Original test cases
+print("Original test cases:")
+r1 = Rational('0.5', '100')
+print(f"Rational('0.5', '100') = {r1}")
+
+r2 = Rational(0.5, 100)
+print(f"Rational(0.5, 100) = {r2}")
+
+# Edge cases
+print("\nEdge cases:")
+
+# Test case 3: Scientific notation in strings
+r3 = Rational('5e-1', '1e2')
+print(f"Rational('5e-1', '1e2') = {r3}")
+
+# Test case 4: Mixed string and float/int
+r4 = Rational('0.5', 100)
+print(f"Rational('0.5', 100) = {r4}")
+
+r5 = Rational(0.5, '100')
+print(f"Rational(0.5, '100') = {r5}")
+
+# Test case 5: Negative numbers
+r6 = Rational('-0.5', '100')
+print(f"Rational('-0.5', '100') = {r6}")
+
+# Test case 6: Zero numerator
+r7 = Rational('0.0', '100')
+print(f"Rational('0.0', '100') = {r7}")
+
+# Test case 7: Repeating decimals
+r8 = Rational('0.333333', '100')
+print(f"Rational('0.333333', '100') = {r8}")
+
+# Test case 8: Large numbers
+r9 = Rational('1e10', '1e-10')
+print(f"Rational('1e10', '1e-10') = {r9}")
+
+# Test case 9: Very small numbers
+r10 = Rational('1e-10', '1e10')
+print(f"Rational('1e-10', '1e10') = {r10}")
\ No newline at end of file
diff --git a/sympy/core/numbers.py b/sympy/core/numbers.py
index 52f7ea45ad..544fe5f0ef 100644
--- a/sympy/core/numbers.py
+++ b/sympy/core/numbers.py
@@ -1587,6 +1587,20 @@ class Rational(Number):
 
     @cacheit
     def __new__(cls, p, q=None, gcd=None):
+        # Handle case where either input is a string
+        if q is not None and (isinstance(p, str) or isinstance(q, str)):
+            try:
+                # Convert float to string to avoid precision issues
+                if isinstance(p, (float, Float)):
+                    p = str(float(p))
+                if isinstance(q, (float, Float)):
+                    q = str(float(q))
+                fp = fractions.Fraction(p)
+                fq = fractions.Fraction(q)
+                return Rational(fp.numerator * fq.denominator, fp.denominator * fq.numerator, 1)
+            except ValueError:
+                pass  # error will raise below
+
         if q is None:
             if isinstance(p, Rational):
                 return p
@@ -1612,6 +1626,14 @@ def __new__(cls, p, q=None, gcd=None):
                         fp = fractions.Fraction(p)
                         fq = fractions.Fraction(q)
                         p = fp/fq
+                    elif isinstance(q, str):
+                        # Both p and q are strings but not in p/q format
+                        try:
+                            fp = fractions.Fraction(p)
+                            fq = fractions.Fraction(q)
+                            return Rational(fp.numerator * fq.denominator, fp.denominator * fq.numerator, 1)
+                        except ValueError:
+                            pass  # error will raise below
                     try:
                         p = fractions.Fraction(p)
                     except ValueError:
