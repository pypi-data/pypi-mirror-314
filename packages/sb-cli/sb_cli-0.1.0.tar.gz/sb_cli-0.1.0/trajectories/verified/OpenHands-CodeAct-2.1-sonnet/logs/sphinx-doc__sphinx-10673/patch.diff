diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..c14be7c21
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,54 @@
+import os
+import tempfile
+from pathlib import Path
+from sphinx.application import Sphinx
+
+# Create a temporary directory for the test
+with tempfile.TemporaryDirectory() as tmpdir:
+    # Create source directory
+    srcdir = Path(tmpdir) / 'source'
+    srcdir.mkdir()
+    
+    # Create conf.py
+    with open(srcdir / 'conf.py', 'w') as f:
+        f.write('''
+project = 'Test Project'
+copyright = '2023'
+author = 'Test'
+extensions = []
+''')
+    
+    # Create index.rst with problematic toctree
+    with open(srcdir / 'index.rst', 'w') as f:
+        f.write('''
+Test Project
+============
+
+.. toctree::
+   :maxdepth: 1
+   :caption: Indices and tables
+
+   genindex
+   modindex
+   search
+''')
+
+    # Create build directory
+    builddir = Path(tmpdir) / '_build'
+    builddir.mkdir()
+    
+    # Run Sphinx build
+    app = Sphinx(
+        srcdir=str(srcdir),
+        confdir=str(srcdir),
+        outdir=str(builddir),
+        doctreedir=str(builddir / 'doctrees'),
+        buildername='html',
+        warningiserror=True  # Make warnings fail the build
+    )
+    
+    try:
+        app.build()
+        print("Build succeeded unexpectedly!")
+    except Exception as e:
+        print("Build failed as expected with error:", str(e))
\ No newline at end of file
diff --git a/sphinx/directives/other.py b/sphinx/directives/other.py
index 35e16e623..968a062bd 100644
--- a/sphinx/directives/other.py
+++ b/sphinx/directives/other.py
@@ -36,6 +36,8 @@ class TocTree(SphinxDirective):
     Directive to notify Sphinx about the hierarchical structure of the docs,
     and to include a table-of-contents like tree in the current document.
     """
+    # Special pages that are always available but not in found_docs
+    SPECIAL_PAGES = {'genindex', 'modindex', 'search'}
     has_content = True
     required_arguments = 0
     optional_arguments = 0
@@ -118,7 +120,7 @@ class TocTree(SphinxDirective):
                 docname = docname_join(self.env.docname, docname)
                 if url_re.match(ref) or ref == 'self':
                     toctree['entries'].append((title, ref))
-                elif docname not in self.env.found_docs:
+                elif docname not in self.env.found_docs and docname not in self.SPECIAL_PAGES:
                     if excluded(self.env.doc2path(docname, False)):
                         message = __('toctree contains reference to excluded document %r')
                         subtype = 'excluded'
@@ -130,14 +132,19 @@ class TocTree(SphinxDirective):
                                    location=toctree)
                     self.env.note_reread()
                 else:
-                    if docname in all_docnames:
-                        all_docnames.remove(docname)
-                    else:
-                        logger.warning(__('duplicated entry found in toctree: %s'), docname,
+                    # For special pages, we add them to the toctree but don't include them in includefiles
+                    # since they are generated by Sphinx and don't need to be processed
+                    # Don't check for duplicates in special pages since they can appear in multiple toctrees
+                    if docname not in self.SPECIAL_PAGES:
+                        if docname in all_docnames:
+                            all_docnames.remove(docname)
+                        else:
+                            logger.warning(__('duplicated entry found in toctree: %s'), docname,
                                        location=toctree)
 
                     toctree['entries'].append((title, docname))
-                    toctree['includefiles'].append(docname)
+                    if docname not in self.SPECIAL_PAGES:
+                        toctree['includefiles'].append(docname)
 
         # entries contains all entries (self references, external links etc.)
         if 'reversed' in self.options:
diff --git a/sphinx/environment/adapters/toctree.py b/sphinx/environment/adapters/toctree.py
index 9678e3c7c..c4bceedbf 100644
--- a/sphinx/environment/adapters/toctree.py
+++ b/sphinx/environment/adapters/toctree.py
@@ -20,6 +20,9 @@ logger = logging.getLogger(__name__)
 
 
 class TocTree:
+    # Special pages that are always available but not in found_docs
+    SPECIAL_PAGES = {'genindex', 'modindex', 'search'}
+
     def __init__(self, env: "BuildEnvironment") -> None:
         self.env = env
 
@@ -146,18 +149,29 @@ class TocTree:
                                            ref, ' <- '.join(parents),
                                            location=ref, type='toc', subtype='circular')
                             continue
-                        refdoc = ref
-                        toc = self.env.tocs[ref].deepcopy()
-                        maxdepth = self.env.metadata[ref].get('tocdepth', 0)
-                        if ref not in toctree_ancestors or (prune and maxdepth > 0):
-                            self._toctree_prune(toc, 2, maxdepth, collapse)
-                        process_only_nodes(toc, builder.tags)
-                        if title and toc.children and len(toc.children) == 1:
-                            child = toc.children[0]
-                            for refnode in child.findall(nodes.reference):
-                                if refnode['refuri'] == ref and \
-                                   not refnode['anchorname']:
-                                    refnode.children = [nodes.Text(title)]
+                        if ref in self.SPECIAL_PAGES:
+                            # Handle special pages like genindex, modindex, search
+                            if title is None:
+                                title = ref
+                            reference = nodes.reference('', '', internal=True,
+                                                    refuri=ref, anchorname='',
+                                                    *[nodes.Text(title)])
+                            para = addnodes.compact_paragraph('', '', reference)
+                            item = nodes.list_item('', para)
+                            toc = nodes.bullet_list('', item)
+                        else:
+                            refdoc = ref
+                            toc = self.env.tocs[ref].deepcopy()
+                            maxdepth = self.env.metadata[ref].get('tocdepth', 0)
+                            if ref not in toctree_ancestors or (prune and maxdepth > 0):
+                                self._toctree_prune(toc, 2, maxdepth, collapse)
+                            process_only_nodes(toc, builder.tags)
+                            if title and toc.children and len(toc.children) == 1:
+                                child = toc.children[0]
+                                for refnode in child.findall(nodes.reference):
+                                    if refnode['refuri'] == ref and \
+                                       not refnode['anchorname']:
+                                        refnode.children = [nodes.Text(title)]
                     if not toc.children:
                         # empty toc means: no titles will show up in the toctree
                         logger.warning(__('toctree contains reference to document %r that '
