diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py
index b4878cfd45..1304f20a60 100644
--- a/django/contrib/auth/validators.py
+++ b/django/contrib/auth/validators.py
@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _
 
 @deconstructible
 class ASCIIUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only English letters, '
         'numbers, and @/./+/-/_ characters.'
@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):
 
 @deconstructible
 class UnicodeUsernameValidator(validators.RegexValidator):
-    regex = r'^[\w.@+-]+$'
+    regex = r'\A[\w.@+-]+\Z'
     message = _(
         'Enter a valid username. This value may contain only letters, '
         'numbers, and @/./+/-/_ characters.'
diff --git a/reproduce_username_newline.py b/reproduce_username_newline.py
new file mode 100644
index 0000000000..64fefcbb21
--- /dev/null
+++ b/reproduce_username_newline.py
@@ -0,0 +1,34 @@
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+def test_username_with_newline():
+    ascii_validator = ASCIIUsernameValidator()
+    unicode_validator = UnicodeUsernameValidator()
+    
+    # Test valid username
+    try:
+        ascii_validator('testuser')
+        print("✓ ASCII validator accepts valid username")
+    except:
+        print("✗ ASCII validator rejected valid username")
+        
+    try:
+        unicode_validator('testuser')
+        print("✓ Unicode validator accepts valid username")
+    except:
+        print("✗ Unicode validator rejected valid username")
+    
+    # Test username with trailing newline
+    try:
+        ascii_validator('testuser\n')
+        print("✗ ASCII validator incorrectly accepts username with trailing newline")
+    except:
+        print("✓ ASCII validator correctly rejects username with trailing newline")
+        
+    try:
+        unicode_validator('testuser\n')
+        print("✗ Unicode validator incorrectly accepts username with trailing newline")
+    except:
+        print("✓ Unicode validator correctly rejects username with trailing newline")
+
+if __name__ == '__main__':
+    test_username_with_newline()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..99a78ba2d8
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,41 @@
+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator
+
+def test_edge_cases():
+    ascii_validator = ASCIIUsernameValidator()
+    unicode_validator = UnicodeUsernameValidator()
+    
+    test_cases = [
+        ('normal', 'testuser', True),  # Normal valid username
+        ('empty', '', False),  # Empty string
+        ('newline_only', '\n', False),  # Just a newline
+        ('leading_newline', '\ntestuser', False),  # Leading newline
+        ('trailing_newline', 'testuser\n', False),  # Trailing newline
+        ('multiple_newlines', 'test\nuser\n', False),  # Multiple newlines
+        ('carriage_return', 'testuser\r', False),  # Carriage return
+        ('crlf', 'testuser\r\n', False),  # CRLF
+        ('special_chars', 'test.user@domain+name-here', True),  # All allowed special chars
+        ('unicode', 'αβγδε', True),  # Unicode characters (only for UnicodeValidator)
+    ]
+    
+    for name, value, should_pass in test_cases:
+        print(f"\nTesting: {name} = '{value}'")
+        
+        # Test ASCII validator
+        try:
+            ascii_validator(value)
+            result = True
+        except:
+            result = False
+        expected = should_pass and (value.isascii() if hasattr(str, 'isascii') else True)
+        print(f"ASCII validator: {'✓' if result == expected else '✗'} ({'accepted' if result else 'rejected'}, {'should accept' if expected else 'should reject'})")
+        
+        # Test Unicode validator
+        try:
+            unicode_validator(value)
+            result = True
+        except:
+            result = False
+        print(f"Unicode validator: {'✓' if result == should_pass else '✗'} ({'accepted' if result else 'rejected'}, {'should accept' if should_pass else 'should reject'})")
+
+if __name__ == '__main__':
+    test_edge_cases()
\ No newline at end of file
