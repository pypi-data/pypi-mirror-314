diff --git a/django/db/backends/mysql/operations.py b/django/db/backends/mysql/operations.py
index 50f85e0621..8f58e0d663 100644
--- a/django/db/backends/mysql/operations.py
+++ b/django/db/backends/mysql/operations.py
@@ -70,7 +70,15 @@ class DatabaseOperations(BaseDatabaseOperations):
 
     def _convert_field_to_tz(self, field_name, tzname):
         if settings.USE_TZ:
-            field_name = "CONVERT_TZ(%s, 'UTC', '%s')" % (field_name, tzname)
+            # Get the database timezone - use the database's TIME_ZONE setting if available,
+            # otherwise use the global TIME_ZONE
+            db_timezone = self.connection.settings_dict.get('TIME_ZONE', settings.TIME_ZONE)
+            if db_timezone == tzname:
+                # If source and target timezones are the same, no need for conversion
+                return field_name
+            else:
+                # Convert from database timezone to target timezone
+                field_name = "CONVERT_TZ(%s, '%s', '%s')" % (field_name, db_timezone, tzname)
         return field_name
 
     def datetime_cast_date_sql(self, field_name, tzname):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..b883ba7869
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,61 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+from django.utils import timezone
+import datetime
+
+# Configure settings
+settings.configure(
+    DEBUG=True,
+    USE_TZ=True,
+    TIME_ZONE='Europe/Paris',
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+            'TIME_ZONE': 'Europe/Paris',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ]
+)
+
+django.setup()
+
+# Create test model
+from django.db import models
+
+class TestModel(models.Model):
+    datetime_field = models.DateTimeField()
+
+    class Meta:
+        app_label = 'test_app'
+
+# Create database and table
+from django.db import connection
+cursor = connection.cursor()
+cursor.execute("""
+    CREATE TABLE IF NOT EXISTS test_app_testmodel (
+        id integer PRIMARY KEY AUTOINCREMENT,
+        datetime_field datetime NOT NULL
+    )
+""")
+
+# Insert test data
+dt = timezone.make_aware(datetime.datetime(2017, 7, 6, 20, 50), timezone.get_default_timezone())
+TestModel.objects.create(datetime_field=dt)
+
+# Test queries
+print("Testing exact datetime match:")
+print(TestModel.objects.filter(datetime_field=dt).exists())
+
+print("\nTesting date lookup:")
+print(TestModel.objects.filter(datetime_field__date=dt.date()).exists())
+
+# Show the actual SQL query
+print("\nSQL query for date lookup:")
+print(str(TestModel.objects.filter(datetime_field__date=dt.date()).query))
\ No newline at end of file
diff --git a/test_timezone_fix.py b/test_timezone_fix.py
new file mode 100644
index 0000000000..4252c7cbad
--- /dev/null
+++ b/test_timezone_fix.py
@@ -0,0 +1,88 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+from django.utils import timezone
+import datetime
+import pytz
+
+# Configure settings
+settings.configure(
+    DEBUG=True,
+    USE_TZ=True,
+    TIME_ZONE='UTC',
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+            'TIME_ZONE': 'Europe/Paris',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ]
+)
+
+django.setup()
+
+# Create test model
+from django.db import models
+
+class TestModel(models.Model):
+    datetime_field = models.DateTimeField()
+
+    class Meta:
+        app_label = 'test_app'
+
+# Create database and table
+from django.db import connection
+cursor = connection.cursor()
+cursor.execute("""
+    CREATE TABLE IF NOT EXISTS test_app_testmodel (
+        id integer PRIMARY KEY AUTOINCREMENT,
+        datetime_field datetime NOT NULL
+    )
+""")
+
+# Test cases
+def run_test(dt, msg=""):
+    print(f"\n=== {msg} ===")
+    print(f"Input datetime: {dt}")
+    
+    # Create test data
+    TestModel.objects.all().delete()
+    obj = TestModel.objects.create(datetime_field=dt)
+    
+    # Test exact datetime match
+    print("\nExact datetime match:")
+    exists = TestModel.objects.filter(datetime_field=dt).exists()
+    print(f"Exists: {exists}")
+    print(f"SQL: {str(TestModel.objects.filter(datetime_field=dt).query)}")
+    
+    # Test date lookup
+    print("\nDate lookup:")
+    exists = TestModel.objects.filter(datetime_field__date=dt.date()).exists()
+    print(f"Exists: {exists}")
+    print(f"SQL: {str(TestModel.objects.filter(datetime_field__date=dt.date()).query)}")
+
+# Test 1: Same timezone for app and database
+dt1 = timezone.make_aware(datetime.datetime(2017, 7, 6, 20, 50), pytz.timezone('Europe/Paris'))
+run_test(dt1, "Test 1: Paris timezone")
+
+# Test 2: Different timezone
+dt2 = timezone.make_aware(datetime.datetime(2017, 7, 6, 20, 50), pytz.timezone('America/New_York'))
+run_test(dt2, "Test 2: New York timezone")
+
+# Test 3: UTC timezone
+dt3 = timezone.make_aware(datetime.datetime(2017, 7, 6, 20, 50), pytz.UTC)
+run_test(dt3, "Test 3: UTC timezone")
+
+# Test 4: Midnight boundary case
+dt4 = timezone.make_aware(datetime.datetime(2017, 7, 6, 0, 0), pytz.timezone('Europe/Paris'))
+run_test(dt4, "Test 4: Midnight boundary case")
+
+# Test 5: DST transition (3:30 AM during spring forward)
+dt5 = timezone.make_aware(datetime.datetime(2017, 3, 26, 3, 30), pytz.timezone('Europe/Paris'))
+run_test(dt5, "Test 5: DST transition")
\ No newline at end of file
