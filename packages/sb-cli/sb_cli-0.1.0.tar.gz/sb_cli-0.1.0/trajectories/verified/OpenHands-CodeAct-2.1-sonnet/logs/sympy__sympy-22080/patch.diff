diff --git a/sympy/core/mod.py b/sympy/core/mod.py
index ebe7862aef..bedcfad039 100644
--- a/sympy/core/mod.py
+++ b/sympy/core/mod.py
@@ -42,6 +42,22 @@ def eval(cls, p, q):
         from sympy.core.exprtools import gcd_terms
         from sympy.polys.polyerrors import PolynomialError
         from sympy.polys.polytools import gcd
+        
+        # Special case: if p is a Mul and we're not in a module context,
+        # we need to handle the multiplication outside the Mod
+        if isinstance(p, Mul) and not hasattr(cls, '_in_module'):
+            # Extract the coefficient
+            coeff = S.One
+            other = []
+            for arg in p.args:
+                if arg.is_Number:
+                    coeff *= arg
+                else:
+                    other.append(arg)
+            if coeff != S.One:
+                # Return the coefficient times the Mod of the rest
+                rest = Mul(*other) if other else S.One
+                return coeff * cls(rest, q)
 
         def doit(p, q):
             """Try to return p % q if both are numbers or +/-p is known
diff --git a/sympy/printing/pycode.py b/sympy/printing/pycode.py
index b669a2c783..38b5708c46 100644
--- a/sympy/printing/pycode.py
+++ b/sympy/printing/pycode.py
@@ -233,8 +233,68 @@ def _print_ComplexInfinity(self, expr):
         return self._print_NaN(expr)
 
     def _print_Mod(self, expr):
+        from sympy.core.mul import Mul
         PREC = precedence(expr)
-        return ('{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args)))
+        if len(expr.args) == 2:
+            a, b = expr.args
+            # For any expression that has multiplication or division, we need to add parentheses
+            # to ensure correct operator precedence
+            if a.could_extract_minus_sign():
+                return '(-{}) % {}'.format(
+                    self._print(-a),
+                    self.parenthesize(b, PREC))
+            elif isinstance(a, Mul):
+                # Handle multiplication inside Mod
+                # Extract coefficient and other terms
+                coeff = 1
+                other = []
+                for arg in a.args:
+                    if arg.is_Number:
+                        coeff *= arg
+                    else:
+                        other.append(arg)
+                if coeff != 1:
+                    # Move the coefficient inside the Mod
+                    return '({}) % {}'.format(
+                        self._print(Mul(*([coeff] + other))),
+                        self.parenthesize(b, PREC))
+                else:
+                    # No coefficient but still need parentheses
+                    return '({}) % {}'.format(
+                        self._print(a),
+                        self.parenthesize(b, PREC))
+        return '{} % {}'.format(*map(lambda x: self.parenthesize(x, PREC), expr.args))
+
+    def _print_Mul(self, expr):
+        from sympy.core.mod import Mod
+        PREC = precedence(expr)
+        # Special handling for negative numbers
+        if expr.could_extract_minus_sign():
+            return '(-{})'.format(self._print(-expr))
+        # Special handling for Mod expressions
+        if any(isinstance(arg, Mod) for arg in expr.args):
+            # Extract coefficient and other terms
+            coeff = 1
+            other = []
+            mod_expr = None
+            for arg in expr.args:
+                if arg.is_Number:
+                    coeff *= arg
+                elif isinstance(arg, Mod):
+                    mod_expr = arg
+                else:
+                    other.append(arg)
+            
+            if mod_expr is not None:
+                # Move the coefficient inside the Mod
+                new_mod = Mod(coeff * mod_expr.args[0], mod_expr.args[1])
+                if other:
+                    # Handle any remaining terms
+                    return '{}*({})'.format(
+                        '*'.join(map(lambda x: self.parenthesize(x, PREC), other)),
+                        self._print(new_mod))
+                return self._print(new_mod)
+        return '*'.join(map(lambda x: self.parenthesize(x, PREC), expr.args))
 
     def _print_Piecewise(self, expr):
         result = []
diff --git a/sympy/utilities/lambdify.py b/sympy/utilities/lambdify.py
index 0ed6ce2eb1..45ca7e8c80 100644
--- a/sympy/utilities/lambdify.py
+++ b/sympy/utilities/lambdify.py
@@ -176,6 +176,82 @@ def _import(module, reload=False):
 @doctest_depends_on(modules=('numpy', 'scipy', 'tensorflow',), python_version=(3,))
 def lambdify(args: Iterable, expr, modules=None, printer=None, use_imps=True,
              dummify=False, cse=False):
+    # When modules=[], we need to handle Mod expressions differently
+    # to maintain operator precedence
+    from sympy.core.mod import Mod
+    from sympy.core.mul import Mul
+    from sympy.core.add import Add
+    from sympy.core.numbers import Number
+
+    def transform_mod(expr):
+        if isinstance(expr, Mod):
+            # Transform the arguments recursively
+            args = [transform_mod(arg) for arg in expr.args]
+            # Create new Mod with transformed arguments
+            return Mod(*args)
+        elif isinstance(expr, Mul):
+            # For multiplication, we need to extract any coefficients
+            # that multiply a Mod expression
+            coeff = 1
+            other = []
+            has_mod = False
+            for arg in expr.args:
+                if arg.is_Number:
+                    coeff *= arg
+                elif isinstance(arg, Mod):
+                    has_mod = True
+                    other.append(transform_mod(arg))
+                else:
+                    other.append(transform_mod(arg))
+            if has_mod and modules == []:
+                # Move the coefficient inside the Mod
+                if len(other) == 1 and isinstance(other[0], Mod):
+                    # Case: c*Mod(a, b) -> Mod(c*a, b)
+                    mod = other[0]
+                    return Mod(coeff * mod.args[0], mod.args[1])
+            return Mul(*([coeff] + other))
+        elif isinstance(expr, Add):
+            return Add(*[transform_mod(arg) for arg in expr.args])
+        return expr
+
+    # Transform the expression if needed
+    if modules == []:
+        # First transform any Mod expressions
+        expr = transform_mod(expr)
+        # Then handle any remaining negative numbers
+        if isinstance(expr, Mod):
+            a, b = expr.args
+            if a.could_extract_minus_sign():
+                expr = Mod(-a, b)
+                expr = -expr
+        elif isinstance(expr, Mul):
+            # Handle negative numbers in Mul expressions
+            if expr.could_extract_minus_sign():
+                expr = -(-expr)
+        # Finally, handle any Mod expressions inside Mul
+        if isinstance(expr, Mul):
+            coeff = 1
+            other = []
+            mod_expr = None
+            for arg in expr.args:
+                if arg.is_Number:
+                    coeff *= arg
+                elif isinstance(arg, Mod):
+                    mod_expr = arg
+                else:
+                    other.append(arg)
+            if mod_expr is not None:
+                # Move the coefficient inside the Mod
+                new_mod = Mod(coeff * mod_expr.args[0], mod_expr.args[1])
+                if other:
+                    # Handle any remaining terms
+                    expr = Mul(*([new_mod] + other))
+                else:
+                    expr = new_mod
+        # Handle any remaining negative numbers
+        if isinstance(expr, Mul):
+            if expr.could_extract_minus_sign():
+                expr = -(-expr)
     """Convert a SymPy expression into a function that allows for fast
     numeric evaluation.
