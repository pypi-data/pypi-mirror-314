diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index 04e430a42e..36c0adaf89 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -129,7 +129,9 @@ class SQLCompiler:
             # Skip References to the select clause, as all expressions in the
             # select clause are already part of the group by.
             if not is_ref:
-                expressions.extend(expr.get_group_by_cols())
+                # Skip Random() expressions in GROUP BY
+                if not isinstance(expr, OrderBy) or not isinstance(expr.expression, Random):
+                    expressions.extend(expr.get_group_by_cols())
         having_group_by = self.having.get_group_by_cols() if self.having else ()
         for expr in having_group_by:
             expressions.append(expr)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..b8b935b406
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,65 @@
+from django.db import models
+from django.db.models import Count
+from django.conf import settings
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+# Define models
+class Thing(models.Model):
+    class Meta:
+        app_label = 'auth'
+        db_table = 'thing'
+
+class Related(models.Model):
+    thing = models.ForeignKey(Thing, on_delete=models.CASCADE)
+    class Meta:
+        app_label = 'auth'
+        db_table = 'related'
+
+# Create tables manually
+from django.db import connection
+with connection.cursor() as cursor:
+    cursor.execute('''
+        CREATE TABLE thing (
+            id INTEGER PRIMARY KEY AUTOINCREMENT
+        )
+    ''')
+    cursor.execute('''
+        CREATE TABLE related (
+            id INTEGER PRIMARY KEY AUTOINCREMENT,
+            thing_id INTEGER REFERENCES thing(id)
+        )
+    ''')
+
+# Create test data
+t = Thing.objects.create()
+rs = [Related.objects.create(thing=t) for _ in range(2)]
+
+# Test queries
+print("\nTest 1: Basic aggregation with order_by('rc')")
+print(Thing.objects.annotate(rc=Count('related')).order_by('rc').values('id', 'rc'))
+
+print("\nTest 2: Aggregation with order_by('related')")
+print(Thing.objects.annotate(rc=Count('related')).order_by('related').values('id', 'rc'))
+
+print("\nTest 3: Aggregation with order_by('?') - BROKEN")
+print(Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc'))
+
+print("\nTest 3 SQL:")
+print(Thing.objects.annotate(rc=Count('related')).order_by('?').values('id', 'rc').query)
\ No newline at end of file
