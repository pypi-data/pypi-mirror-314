diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 8c1ac5d738..fed51588a1 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -547,11 +547,28 @@ class Card(_Verify):
     @classmethod
     def fromstring(cls, image):
         """
-        Construct a `Card` object from a (raw) string. It will pad the string
+        Construct a `Card` object from a (raw) string or bytes. It will pad the string
         if it is not the length of a card image (80 columns).  If the card
         image is longer than 80 columns, assume it contains ``CONTINUE``
         card(s).
+
+        Parameters
+        ----------
+        image : str or bytes
+            String or bytes containing the card image.
+
+        Returns
+        -------
+        card : Card
+            A new `Card` instance.
         """
+        # Convert bytes to str if necessary
+        if isinstance(image, bytes):
+            try:
+                image = image.decode('ascii')
+            except UnicodeDecodeError:
+                raise ValueError(
+                    'FITS card must be ASCII-encodable bytes. Invalid bytes found.')
 
         card = cls()
         card._image = _pad(image)
diff --git a/astropy/io/fits/header.py b/astropy/io/fits/header.py
index ad07e6d52d..db91c733f0 100644
--- a/astropy/io/fits/header.py
+++ b/astropy/io/fits/header.py
@@ -329,13 +329,13 @@ class Header:
     @classmethod
     def fromstring(cls, data, sep=''):
         """
-        Creates an HDU header from a byte string containing the entire header
+        Creates an HDU header from a string or bytes containing the entire header
         data.
 
         Parameters
         ----------
-        data : str
-           String containing the entire header.
+        data : str or bytes
+           String or bytes containing the entire header.
 
         sep : str, optional
             The string separating cards from each other, such as a newline.  By
@@ -347,6 +347,13 @@ class Header:
         header
             A new `Header` instance.
         """
+        # Convert bytes to str if necessary
+        if isinstance(data, bytes):
+            try:
+                data = data.decode('ascii')
+            except UnicodeDecodeError:
+                raise ValueError(
+                    'FITS header must be ASCII-encodable bytes. Invalid bytes found.')
 
         cards = []
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..348091d215
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,33 @@
+from astropy.io.fits import Header
+
+def test_header(data, desc):
+    try:
+        header = Header.fromstring(data)
+        print(f"Success with {desc}:", header)
+    except Exception as e:
+        print(f"Error with {desc}:", str(e))
+
+# Test with a bytes string
+header_bytes = b'SIMPLE  =                    T / file does conform to FITS standard             '
+test_header(header_bytes, "bytes")
+
+# Test with a unicode string
+header_str = 'SIMPLE  =                    T / file does conform to FITS standard             '
+test_header(header_str, "str")
+
+# Test with non-ASCII bytes
+header_nonascii = b'SIMPLE  =                    T / file does conform to FITS standard \xff'
+test_header(header_nonascii, "non-ASCII bytes")
+
+# Test with empty string
+test_header("", "empty string")
+
+# Test with empty bytes
+test_header(b"", "empty bytes")
+
+# Test with None
+test_header(None, "None")
+
+# Test with multiple cards in bytes
+multi_cards = b'SIMPLE  =                    T / file does conform to FITS standard             \nHISTORY This is a history card'
+test_header(multi_cards, "multiple cards in bytes")
\ No newline at end of file
