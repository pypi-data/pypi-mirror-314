diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..d28dc90e3
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,83 @@
+def example_function(x1, x2):
+    """Example function with multiple parameters of same type.
+
+    Parameters
+    ----------
+    x1, x2 : array_like, optional
+        Input arrays, description of `x1`, `x2`.
+    """
+    pass
+
+def example_function2(x1, x2, x3):
+    """Example function with multiple parameters of same type.
+
+    Parameters
+    ----------
+    x1, x2, x3 : array_like
+        Input arrays, description of `x1`, `x2`, `x3`.
+    """
+    pass
+
+def example_function3(x1, x2):
+    """Example function with multiple parameters of same type.
+
+    Parameters
+    ----------
+    x1 : array_like
+        First input array.
+    x2 : array_like
+        Second input array.
+    """
+    pass
+
+def example_function4(x1, x2, x3):
+    """Example function with multiple parameters of same type.
+
+    Parameters
+    ----------
+    x1, x2 : array_like
+        First two input arrays.
+    x3 : array_like, optional
+        Third input array.
+    """
+    pass
+
+if __name__ == '__main__':
+    import sphinx.ext.napoleon.docstring as docstring
+    
+    # Create a Napoleon docstring parser with required config
+    config = type('Config', (), {
+        'napoleon_use_param': False,
+        'napoleon_custom_sections': None,
+        'napoleon_use_rtype': True,
+        'napoleon_preprocess_types': False,
+        'napoleon_type_aliases': None,
+        'napoleon_attr_annotations': True
+    })()
+
+    print("Test case 1: Two parameters with optional type")
+    print("-" * 50)
+    parser = docstring.NumpyDocstring(example_function.__doc__, config, None, None, None, None, None)
+    for line in parser.lines():
+        print(line)
+    print()
+
+    print("Test case 2: Three parameters")
+    print("-" * 50)
+    parser = docstring.NumpyDocstring(example_function2.__doc__, config, None, None, None, None, None)
+    for line in parser.lines():
+        print(line)
+    print()
+
+    print("Test case 3: Two parameters with separate descriptions")
+    print("-" * 50)
+    parser = docstring.NumpyDocstring(example_function3.__doc__, config, None, None, None, None, None)
+    for line in parser.lines():
+        print(line)
+    print()
+
+    print("Test case 4: Mixed parameter groups")
+    print("-" * 50)
+    parser = docstring.NumpyDocstring(example_function4.__doc__, config, None, None, None, None, None)
+    for line in parser.lines():
+        print(line)
\ No newline at end of file
diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py
index b3daa06f1..375d1b1b0 100644
--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -386,42 +386,59 @@ class GoogleDocstring:
         else:
             return [prefix]
 
-    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],
+    def _format_docutils_params(self, fields: List[Tuple[Union[str, List[str]], str, List[str]]],
                                 field_role: str = 'param', type_role: str = 'type'
                                 ) -> List[str]:
         lines = []
         for _name, _type, _desc in fields:
             _desc = self._strip_empty(_desc)
-            if any(_desc):
-                _desc = self._fix_field_desc(_desc)
-                field = ':%s %s: ' % (field_role, _name)
-                lines.extend(self._format_block(field, _desc))
+            
+            # Handle list of parameter names
+            if isinstance(_name, list):
+                for param_name in _name:
+                    if any(_desc):
+                        _desc = self._fix_field_desc(_desc)
+                        field = ':%s %s: ' % (field_role, param_name)
+                        lines.extend(self._format_block(field, _desc))
+                    else:
+                        lines.append(':%s %s:' % (field_role, param_name))
+
+                    if _type:
+                        lines.append(':%s %s: %s' % (type_role, param_name, _type))
             else:
-                lines.append(':%s %s:' % (field_role, _name))
+                if any(_desc):
+                    _desc = self._fix_field_desc(_desc)
+                    field = ':%s %s: ' % (field_role, _name)
+                    lines.extend(self._format_block(field, _desc))
+                else:
+                    lines.append(':%s %s:' % (field_role, _name))
 
-            if _type:
-                lines.append(':%s %s: %s' % (type_role, _name, _type))
+                if _type:
+                    lines.append(':%s %s: %s' % (type_role, _name, _type))
         return lines + ['']
 
-    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:
+    def _format_field(self, _name: Union[str, List[str]], _type: str, _desc: List[str]) -> List[str]:
         _desc = self._strip_empty(_desc)
         has_desc = any(_desc)
-        separator = ' -- ' if has_desc else ''
-        if _name:
+        separator = ' - ' if has_desc else ''
+        
+        # Handle list of parameter names
+        if isinstance(_name, list):
+            names_str = ', '.join(n for n in _name)  # No bold formatting
             if _type:
-                if '`' in _type:
-                    field = '**%s** (%s)%s' % (_name, _type, separator)
-                else:
-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)
-            else:
-                field = '**%s**%s' % (_name, separator)
-        elif _type:
-            if '`' in _type:
-                field = '%s%s' % (_type, separator)
+                field = '- %s (%s)%s' % (names_str, _type, separator)
             else:
-                field = '*%s*%s' % (_type, separator)
+                field = '- %s%s' % (names_str, separator)
         else:
-            field = ''
+            if _name:
+                if _type:
+                    field = '- %s (%s)%s' % (_name, _type, separator)
+                else:
+                    field = '- %s%s' % (_name, separator)
+            elif _type:
+                field = '- (%s)%s' % (_type, separator)
+            else:
+                field = '-'
 
         if has_desc:
             _desc = self._fix_field_desc(_desc)
@@ -1083,7 +1100,8 @@ class NumpyDocstring(GoogleDocstring):
         func = super()._escape_args_and_kwargs
 
         if ", " in name:
-            return ", ".join(func(param) for param in name.split(", "))
+            # For multiple parameters, return them as a list
+            return [func(param) for param in name.split(", ")]
         else:
             return func(name)
