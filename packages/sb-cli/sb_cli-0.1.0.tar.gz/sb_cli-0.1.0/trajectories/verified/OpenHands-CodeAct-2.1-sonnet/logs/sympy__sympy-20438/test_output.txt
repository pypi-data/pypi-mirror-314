+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/sets/handlers/issubset.py
	modified:   sympy/sets/sets.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 33b47e4bd60e2302e42616141e76285038b724d6
Merge: 6d27585c5b 7d414cdead
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Wed Dec 23 11:47:17 2020 +0000

    Merge pull request #20646 from Mohitbalwani26/refactor(test_ode)
    
    refactor lie_group examples

+ git diff 33b47e4bd60e2302e42616141e76285038b724d6
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
diff --git a/sympy/sets/handlers/issubset.py b/sympy/sets/handlers/issubset.py
index fdca06025a..6975ac7857 100644
--- a/sympy/sets/handlers/issubset.py
+++ b/sympy/sets/handlers/issubset.py
@@ -1,9 +1,11 @@
 from sympy import S, Symbol
 from sympy.core.logic import fuzzy_and, fuzzy_bool, fuzzy_not, fuzzy_or
 from sympy.core.relational import Eq
-from sympy.sets.sets import FiniteSet, Interval, Set, Union
+from sympy.core.containers import Tuple
+from sympy.sets.sets import FiniteSet, Interval, Set, Union, ProductSet
 from sympy.sets.fancysets import Complexes, Reals, Range, Rationals
 from sympy.multipledispatch import dispatch
+import itertools
 
 
 _inf_sets = [S.Naturals, S.Naturals0, S.Integers, S.Rationals, S.Reals, S.Complexes]
@@ -133,3 +135,47 @@ def is_subset_sets(a, b): # noqa:F811
 @dispatch(Rationals, Range)  # type: ignore # noqa:F811
 def is_subset_sets(a, b): # noqa:F811
     return False
+
+@dispatch(ProductSet, FiniteSet)  # type: ignore # noqa:F811
+def is_subset_sets(a_product, b_finite): # noqa:F811
+    # A ProductSet can only be a subset of a FiniteSet if all its elements are in the FiniteSet
+    # First check if all elements in b_finite are tuples of the right length
+    if not all(isinstance(x, tuple) and len(x) == len(a_product.sets) for x in b_finite):
+        return False
+    
+    # For each component set in the product set, get its elements
+    component_elements = []
+    for s in a_product.sets:
+        if not s.is_finite_set:
+            return None  # Can't determine if infinite set is subset
+        component_elements.append(list(s))
+    
+    # Check if each combination from the product set is in the finite set
+    for elements in itertools.product(*component_elements):
+        if elements not in b_finite:
+            return False
+    return True
+
+@dispatch(FiniteSet, ProductSet)  # type: ignore # noqa:F811
+def is_subset_sets(a_finite, b_product): # noqa:F811
+    # A FiniteSet can only be a subset of a ProductSet if all its elements are tuples
+    # of the right length and are contained in the ProductSet
+    if not all(isinstance(x, tuple) and len(x) == len(b_product.sets) for x in a_finite):
+        return False
+    
+    # For each element in a_finite, check if it's in the product set
+    for elem in a_finite:
+        # Convert tuple to Tuple since that's what ProductSet._contains expects
+        elem = Tuple(*elem)
+        if not b_product._contains(elem):
+            return False
+    return True
+
+@dispatch(ProductSet, ProductSet)  # type: ignore # noqa:F811
+def is_subset_sets(a_product, b_product): # noqa:F811
+    # Two ProductSets can only be subsets if they have the same number of sets
+    if len(a_product.sets) != len(b_product.sets):
+        return False
+    
+    # Each component set of a must be a subset of the corresponding component set of b
+    return fuzzy_and(s1.is_subset(s2) for s1, s2 in zip(a_product.sets, b_product.sets))
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 3c4aa86e36..a8cfc5751c 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -26,6 +26,7 @@
 from sympy.utilities.iterables import iproduct, sift, roundrobin
 from sympy.utilities.misc import func_name, filldedent
 from mpmath import mpi, mpf
+import itertools
 
 
 tfn = defaultdict(lambda: None, {
@@ -392,8 +393,10 @@ def is_subset(self, other):
         # XXX: We shouldn't do this. A query like this should be handled
         # without evaluating new Set objects. It should be the other way round
         # so that the intersect method uses is_subset for evaluation.
-        if self.intersect(other) == self:
+        intersection = self.intersect(other)
+        if intersection == self:
             return True
+        return None
 
     def _eval_is_subset(self, other):
         '''Returns a fuzzy bool for whether self is a subset of other.'''
@@ -775,6 +778,152 @@ def _flatten(sets):
                     yield s
         return ProductSet(*_flatten(self.sets))
 
+    def _eval_is_subset(self, other):
+        """Return True if self is a subset of other, False if it is not, or None if undecidable."""
+        if isinstance(other, FiniteSet):
+            # If other is a FiniteSet, we can check if all elements in self are in other
+            # First check if all elements in other are tuples of the right length
+            if not all(isinstance(x, tuple) and len(x) == len(self.sets) for x in other):
+                return False
+            
+            # For each component set in self, get its elements
+            component_elements = []
+            for s in self.sets:
+                if not s.is_finite_set:
+                    return None  # Can't determine if infinite set is subset
+                component_elements.append(list(s))
+            
+            # Convert other's elements to Tuple for proper comparison
+            other_tuples = {Tuple(*x) for x in other}
+            
+            # Convert self's elements to a set of Tuples
+            self_tuples = {Tuple(*elements) for elements in itertools.product(*component_elements)}
+            
+            # Check if each element in self_tuples is in other_tuples
+            for elem in self_tuples:
+                found = False
+                for t in other_tuples:
+                    if all(fuzzy_bool(Eq(e1, e2, evaluate=True)) for e1, e2 in zip(elem, t)):
+                        found = True
+                        break
+                if not found:
+                    return False
+            return True
+        elif isinstance(other, ProductSet):
+            # Two ProductSets can only be subsets if they have the same number of sets
+            if len(self.sets) != len(other.sets):
+                return False
+            
+            # Each component set of self must be a subset of the corresponding component set of other
+            return fuzzy_and(s1.is_subset(s2) for s1, s2 in zip(self.sets, other.sets))
+        elif isinstance(other, Set):
+            # For any other type of Set, we can try to convert self to a FiniteSet
+            # and then check if it's a subset of other
+            if not all(s.is_finite_set for s in self.sets):
+                return None  # Can't determine if infinite set is subset
+            
+            # Convert self to a FiniteSet
+            self_elements = []
+            for elements in itertools.product(*[list(s) for s in self.sets]):
+                self_elements.append(Tuple(*elements))
+            self_finite = FiniteSet(*self_elements)
+            
+            # Now check if each element in self_finite is in other
+            for elem in self_elements:
+                if not fuzzy_bool(other._contains(elem)):
+                    return False
+            return True
+        return None
+
+    def _eval_is_superset(self, other):
+        """Return True if self is a superset of other, False if it is not, or None if undecidable."""
+        if isinstance(other, FiniteSet):
+            # If other is a FiniteSet, we can check if all elements in other are in self
+            # First check if all elements in other are tuples of the right length
+            if not all(isinstance(x, tuple) and len(x) == len(self.sets) for x in other):
+                return False
+            
+            # Convert other's elements to Tuple for proper comparison
+            other_tuples = {Tuple(*x) for x in other}
+            
+            # Check if each element in other_tuples is in self
+            for elem in other_tuples:
+                if not self._contains(elem):
+                    return False
+            return True
+        return None
+
+    def _eval_powerset(self):
+        """Return the power set of self."""
+        if not all(s.is_finite_set for s in self.sets):
+            return None  # Can't determine if infinite set
+        
+        # Convert self to a FiniteSet
+        self_elements = []
+        for elements in itertools.product(*[list(s) for s in self.sets]):
+            self_elements.append(Tuple(*elements))
+        self_finite = FiniteSet(*self_elements)
+        
+        # Return the power set of self_finite
+        return self_finite._eval_powerset()
+
+    def _contains(self, element):
+        """
+        'in' operator for ProductSets.
+
+        Examples
+        ========
+
+        >>> from sympy import Interval
+        >>> (2, 3) in Interval(0, 5) * Interval(0, 5)
+        True
+
+        >>> (10, 10) in Interval(0, 5) * Interval(0, 5)
+        False
+
+        Passes operation on to constituent sets
+        """
+        if element.is_Symbol:
+            return None
+
+        # Convert tuple to Tuple for proper comparison
+        if isinstance(element, tuple):
+            element = Tuple(*element)
+
+        if not isinstance(element, Tuple) or len(element) != len(self.sets):
+            return False
+
+        return fuzzy_and(s._contains(e) for s, e in zip(self.sets, element))
+
+    def _eval_powerset(self):
+        """Return the power set of self."""
+        if not all(s.is_finite_set for s in self.sets):
+            return None  # Can't determine if infinite set
+        
+        # Convert self to a FiniteSet
+        self_elements = []
+        for elements in itertools.product(*[list(s) for s in self.sets]):
+            self_elements.append(Tuple(*elements))
+        self_finite = FiniteSet(*self_elements)
+        
+        # Return the power set of self_finite
+        return self_finite._eval_powerset()
+        """Return True if self is a superset of other, False if it is not, or None if undecidable."""
+        if isinstance(other, FiniteSet):
+            # If other is a FiniteSet, we can check if all elements in other are in self
+            # First check if all elements in other are tuples of the right length
+            if not all(isinstance(x, tuple) and len(x) == len(self.sets) for x in other):
+                return False
+            
+            # Convert other's elements to Tuple for proper comparison
+            other_tuples = {Tuple(*x) for x in other}
+            
+            # Check if each element in other_tuples is in self
+            for elem in other_tuples:
+                if not self._contains(elem):
+                    return False
+            return True
+        return None
 
 
     def _contains(self, element):
@@ -796,6 +945,10 @@ def _contains(self, element):
         if element.is_Symbol:
             return None
 
+        # Convert tuple to Tuple for proper comparison
+        if isinstance(element, tuple):
+            element = Tuple(*element)
+
         if not isinstance(element, Tuple) or len(element) != len(self.sets):
             return False
 
@@ -841,7 +994,9 @@ def __iter__(self):
         If self.is_iterable returns True (both constituent sets are iterable),
         then return the Cartesian Product. Otherwise, raise TypeError.
         """
-        return iproduct(*self.sets)
+        # Convert each element to Tuple for proper comparison
+        for elements in iproduct(*self.sets):
+            yield Tuple(*elements)
 
     @property
     def is_empty(self):
@@ -849,8 +1004,7 @@ def is_empty(self):
 
     @property
     def is_finite_set(self):
-        all_finite = fuzzy_and(s.is_finite_set for s in self.sets)
-        return fuzzy_or([self.is_empty, all_finite])
+        return fuzzy_and(s.is_finite_set for s in self.sets)
 
     @property
     def _measure(self):
@@ -1550,6 +1704,14 @@ class Complement(Set, EvalfMixin):
 
     .. [1] http://mathworld.wolfram.com/ComplementSet.html
     """
+    def equals(self, other):
+        """Return True if self == other, False if definitely not equal, else None"""
+        if not isinstance(other, Set):
+            return False
+        if isinstance(other, Complement):
+            return (self.args[0] == other.args[0] and
+                   self.args[1] == other.args[1])
+        return None
 
     is_Complement = True
 
@@ -1854,6 +2016,8 @@ def _contains(self, other):
         syntactical equality). In the worst case all elements of the
         set must be checked.
 
+        For tuples, we need to convert them to Tuple for proper comparison.
+
         Examples
         ========
 
@@ -1862,8 +2026,13 @@ def _contains(self, other):
         True
         >>> 5 in FiniteSet(1, 2)
         False
+        >>> (1, 2) in FiniteSet((1, 2))
+        True
 
         """
+        # If other is a tuple, convert it to Tuple for proper comparison
+        if isinstance(other, tuple):
+            other = Tuple(*other)
         if other in self._args_set:
             return True
         else:
@@ -1873,7 +2042,8 @@ def _contains(self, other):
                 for e in self.args)
 
     def _eval_is_subset(self, other):
-        return fuzzy_and(other._contains(e) for e in self.args)
+        # Convert each element to Tuple for proper comparison if needed
+        return fuzzy_and(other._contains(Tuple(*e) if isinstance(e, tuple) else e) for e in self.args)
 
     @property
     def _boundary(self):
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.8.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.8.dev0
    Uninstalling sympy-1.8.dev0:
      Successfully uninstalled sympy-1.8.dev0
  DEPRECATION: Legacy editable install of sympy==1.8.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 33b47e4bd60e2302e42616141e76285038b724d6 sympy/sets/tests/test_sets.py
Updated 0 paths from 4d2f564d97
+ git apply -v -
Checking patch sympy/sets/tests/test_sets.py...
Applied patch sympy/sets/tests/test_sets.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/sets/tests/test_sets.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        37067285
hash randomization: on (PYTHONHASHSEED=427068630)

sympy/sets/tests/test_sets.py[100] 
test_imageset ok
test_is_empty ok
test_is_finiteset ok
test_deprecated_is_EmptySet ok
test_interval_arguments ok
test_interval_symbolic_end_points ok
test_interval_is_empty ok
test_union ok
test_union_iter ok
test_union_is_empty ok
test_difference ok
test_Complement ok
test_set_operations_nonsets ok
test_complement ok
test_intersect1 ok
test_intersection ok
test_issue_9623 ok
test_is_disjoint ok
test_ProductSet__len__ ok
test_ProductSet ok
test_ProductSet_of_single_arg_is_not_arg ok
test_ProductSet_is_empty ok
test_interval_subs ok
test_interval_to_mpi ok
test_set_evalf ok
test_measure ok
test_is_subset ok
test_is_proper_subset ok
test_is_superset ok
test_is_proper_superset ok
test_contains ok
test_interval_symbolic ok
test_union_contains ok
test_is_number ok
test_Interval_is_left_unbounded ok
test_Interval_is_right_unbounded ok
test_Interval_as_relational ok
test_Finite_as_relational ok
test_Union_as_relational ok
test_Intersection_as_relational ok
test_Complement_as_relational ok
test_Complement_as_relational_fail f
test_SymmetricDifference_as_relational ok
test_EmptySet ok
test_finite_basic ok
test_product_basic ok
test_real ok
test_supinf ok
test_universalset ok
test_Union_of_ProductSets_shares ok
test_Interval_free_symbols ok
test_image_interval ok
test_image_piecewise ok
test_image_Intersection f
test_image_FiniteSet ok
test_image_Union ok
test_image_EmptySet ok
test_issue_5724_7680 ok
test_boundary ok
test_boundary_Union ok
test_union_boundary_of_joining_sets f
test_boundary_ProductSet ok
test_boundary_ProductSet_line ok
test_is_open ok
test_is_closed ok
test_closure ok
test_interior ok
test_issue_7841 ok
test_Eq F
test_SymmetricDifference ok
test_issue_9536 ok
test_issue_9637 ok
test_issue_9808 ok
test_issue_9956 ok
test_issue_Symbol_inter ok
test_issue_11827 ok
test_issue_10113 ok
test_issue_10248 ok
test_issue_9447 ok
test_issue_10337 ok
test_issue_10326 ok
test_issue_2799 ok
test_issue_9706 ok
test_issue_8257 ok
test_issue_10931 ok
test_issue_11174 ok
test_issue_18505 ok
test_finite_set_intersection ok
test_union_intersection_constructor ok
test_Union_contains ok
test_issue_16878b f
test_DisjointUnion ok
test_DisjointUnion_is_empty ok
test_DisjointUnion_is_iterable ok
test_DisjointUnion_contains ok
test_DisjointUnion_iter ok
test_DisjointUnion_len ok
test_issue_20089 ok
test_issue_19378 F
test_issue_20379 ok                                                       [FAIL]


________________________________ slowest tests _________________________________
sympy/sets/tests/test_sets.py::test_image_interval - Took 26.550 seconds
________________________________________________________________________________
____________________ sympy/sets/tests/test_sets.py:test_Eq _____________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 1254, in test_Eq
    assert Eq(ProductSet({1}, {2}), Interval(1, 2)) is S.false
AssertionError
________________________________________________________________________________
________________ sympy/sets/tests/test_sets.py:test_issue_19378 ________________
Traceback (most recent call last):
  File "/testbed/sympy/sets/tests/test_sets.py", line 1604, in test_issue_19378
    assert b.is_subset(c) is True
AssertionError

== tests finished: 94 passed, 2 failed, 4 expected to fail, in 35.73 seconds ===
DO *NOT* COMMIT!
+ git checkout 33b47e4bd60e2302e42616141e76285038b724d6 sympy/sets/tests/test_sets.py
Updated 1 path from 4d2f564d97
