diff --git a/django/core/mail/utils.py b/django/core/mail/utils.py
index d18dfe4667..fa6186bacc 100644
--- a/django/core/mail/utils.py
+++ b/django/core/mail/utils.py
@@ -13,7 +13,13 @@ class CachedDnsName:
 
     def get_fqdn(self):
         if not hasattr(self, '_fqdn'):
-            self._fqdn = socket.getfqdn()
+            fqdn = socket.getfqdn()
+            try:
+                fqdn.encode('ascii')
+            except UnicodeEncodeError:
+                # Convert to IDNA if hostname contains non-ASCII chars
+                fqdn = fqdn.encode('idna').decode('ascii')
+            self._fqdn = fqdn
         return self._fqdn
 
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..c4a2e1cce0
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,25 @@
+from unittest.mock import patch
+from django.core.mail import EmailMessage
+from django.conf import settings
+
+def configure_settings():
+    class TestSettings:
+        EMAIL_USE_LOCALTIME = False
+        DEFAULT_CHARSET = 'utf-8'
+        DEFAULT_FROM_EMAIL = 'webmaster@localhost'
+    settings.configure(TestSettings())
+
+def test_unicode_dns():
+    # Mock socket.getfqdn() to return a non-ASCII value
+    with patch("socket.getfqdn", return_value="漢字"):
+        email = EmailMessage('subject', '', 'from@example.com', ['to@example.com'])
+        email.encoding = 'iso-8859-1'
+        message = email.message()
+        print("Message-ID:", message['Message-ID'])
+        # Verify the domain is converted to IDNA format
+        assert 'xn--p8s937b' in message['Message-ID'], "Domain not converted to IDNA format"
+        print("Test passed - domain correctly converted to IDNA format")
+
+if __name__ == '__main__':
+    configure_settings()
+    test_unicode_dns()
\ No newline at end of file
