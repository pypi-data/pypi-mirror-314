diff --git a/src/_pytest/compat.py b/src/_pytest/compat.py
index d238061b4..fe5046fb2 100644
--- a/src/_pytest/compat.py
+++ b/src/_pytest/compat.py
@@ -67,9 +67,15 @@ def num_mock_patch_args(function):
     mock_modules = [sys.modules.get("mock"), sys.modules.get("unittest.mock")]
     if any(mock_modules):
         sentinels = [m.DEFAULT for m in mock_modules if m is not None]
-        return len(
-            [p for p in patchings if not p.attribute_name and p.new in sentinels]
-        )
+        return len([
+            p for p in patchings 
+            if not p.attribute_name and (
+                # Skip numpy arrays since they can't be in sentinels
+                (not hasattr(p.new, '__array__') and p.new in sentinels) or
+                # Handle case where p.new is DEFAULT
+                any(p.new is m.DEFAULT for m in mock_modules if m is not None)
+            )
+        ])
     return len(patchings)
 
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..7c2394fd4
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,26 @@
+import numpy as np
+from unittest.mock import patch, DEFAULT
+
+# Test 1: Regular mock value
+@patch('os.getcwd', new=DEFAULT)
+def test_regular_mock(mock_getcwd):
+    pass
+
+# Test 2: Empty numpy array
+@patch('os.getcwd', new=np.array([]))
+def test_empty_array():
+    pass
+
+# Test 3: Scalar numpy value
+@patch('os.getcwd', new=np.float64(3.14))
+def test_scalar_numpy():
+    pass
+
+# Test 4: Multi-dimensional array
+@patch('os.getcwd', new=np.array([[1, 2], [3, 4]]))
+def test_multidim_array():
+    pass
+
+if __name__ == '__main__':
+    import pytest
+    pytest.main(['test_edge_cases.py'])
\ No newline at end of file
diff --git a/test_reproduce.py b/test_reproduce.py
new file mode 100644
index 000000000..6be174191
--- /dev/null
+++ b/test_reproduce.py
@@ -0,0 +1,10 @@
+import numpy as np
+from unittest.mock import patch
+
+@patch('os.getcwd', new=np.array([-5.5, 3.0]))
+def test_something():
+    pass
+
+if __name__ == '__main__':
+    import pytest
+    pytest.main(['test_reproduce.py'])
\ No newline at end of file
