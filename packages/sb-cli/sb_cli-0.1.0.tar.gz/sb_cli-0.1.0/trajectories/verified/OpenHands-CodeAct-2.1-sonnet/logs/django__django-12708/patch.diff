diff --git a/django/db/backends/base/schema.py b/django/db/backends/base/schema.py
index 61f88401ab..b1799817e5 100644
--- a/django/db/backends/base/schema.py
+++ b/django/db/backends/base/schema.py
@@ -403,13 +403,24 @@ class BaseDatabaseSchemaEditor:
         meta_constraint_names = {constraint.name for constraint in model._meta.constraints}
         meta_index_names = {constraint.name for constraint in model._meta.indexes}
         columns = [model._meta.get_field(field).column for field in fields]
-        constraint_names = self._constraint_names(
+        
+        # Get all constraints for these columns
+        all_constraints = self._constraint_names(
             model, columns, exclude=meta_constraint_names | meta_index_names,
-            **constraint_kwargs
         )
+        
+        # Filter constraints based on type (unique vs index)
+        constraint_type = 'unique' if constraint_kwargs.get('unique', False) else 'index'
+        constraint_names = [
+            name for name in all_constraints
+            if (constraint_type == 'unique' and name.endswith('_uniq')) or
+               (constraint_type == 'index' and name.endswith('_idx'))
+        ]
+        
         if len(constraint_names) != 1:
-            raise ValueError("Found wrong number (%s) of constraints for %s(%s)" % (
+            raise ValueError("Found wrong number (%s) of %s constraints for %s(%s)" % (
                 len(constraint_names),
+                constraint_type,
                 model._meta.db_table,
                 ", ".join(columns),
             ))
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..21665b90e4
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,76 @@
+from django.conf import settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth', 'testapp'],
+)
+
+import django
+django.setup()
+
+from django.db import models
+from django.db import migrations
+from django.db.migrations.state import ProjectState
+from django.db.migrations.executor import MigrationExecutor
+from django.db import connection
+
+# Create test models
+class TestModel(models.Model):
+    field1 = models.CharField(max_length=100)
+    field2 = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+        unique_together = [('field1', 'field2')]
+        index_together = [('field1', 'field2')]
+
+# Create migrations
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('field1', models.CharField(max_length=100)),
+                ('field2', models.CharField(max_length=100)),
+            ],
+            options={
+                'unique_together': {('field1', 'field2')},
+                'index_together': {('field1', 'field2')},
+            },
+        ),
+    ]
+
+class Migration2(migrations.Migration):
+    dependencies = [('testapp', '0001_initial')]
+
+    operations = [
+        migrations.AlterIndexTogether(
+            name='TestModel',
+            index_together=set(),  # Remove index_together
+        ),
+    ]
+
+# Run the migrations
+executor = MigrationExecutor(connection)
+
+# Apply first migration
+migration = Migration('0001_initial', 'testapp')
+project_state = ProjectState()
+migration.operations[0].state_forwards('testapp', project_state)
+with connection.schema_editor() as schema_editor:
+    migration.operations[0].database_forwards('testapp', schema_editor, ProjectState(), project_state)
+
+# Apply second migration
+migration2 = Migration2('0002_remove_index', 'testapp')
+new_state = project_state.clone()
+migration2.operations[0].state_forwards('testapp', new_state)
+with connection.schema_editor() as schema_editor:
+    migration2.operations[0].database_forwards('testapp', schema_editor, project_state, new_state)
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..a9ace3a2ae
--- /dev/null
+++ b/testapp/__init__.py
@@ -0,0 +1 @@
+# Empty __init__.py
\ No newline at end of file
diff --git a/testapp/apps.py b/testapp/apps.py
new file mode 100644
index 0000000000..7100945a3b
--- /dev/null
+++ b/testapp/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'testapp'
\ No newline at end of file
