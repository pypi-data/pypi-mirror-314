diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 1b3285ddce..8efd598ebf 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -64,7 +64,7 @@ class Card(_Verify):
 
     # Used in cards using the CONTINUE convention which expect a string
     # followed by an optional comment
-    _strg = r"\'(?P<strg>([ -~]+?|\'\'|) *?)\'(?=$|/| )"
+    _strg = r"\'(?P<strg>((?:[ -~]+?(?:\'\'[ -~]*)*)|\'\'|) *)\'(?=$|/| )"
     _comm_field = r"(?P<comm_field>(?P<sepr>/ *)(?P<comm>(.|\n)*))"
     _strg_comment_RE = re.compile(f"({_strg})? *{_comm_field}?")
 
@@ -859,7 +859,17 @@ class Card(_Verify):
                     return kw, vc
 
                 value = m.group("strg") or ""
-                value = value.rstrip().replace("''", "'")
+                value = value.rstrip()
+                # In FITS format, '' represents a single quote in a string value
+                # We need to preserve all '' occurrences as they are valid escapes
+                # Only remove trailing spaces after the last non-space character
+                if value:
+                    # Find the last non-space character
+                    last_nonspace = len(value) - 1
+                    while last_nonspace >= 0 and value[last_nonspace] == " ":
+                        last_nonspace -= 1
+                    if last_nonspace >= 0:
+                        value = value[:last_nonspace + 1] + value[last_nonspace + 1:].rstrip()
                 if value and value[-1] == "&":
                     value = value[:-1]
                 values.append(value)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..b64c6fd9e3
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,50 @@
+from astropy.io import fits
+
+def test_double_single_quotes():
+    print("Test 1: Basic double single-quotes at different lengths")
+    for n in range(60, 70):
+        card1 = fits.Card('CONFIG', "x" * n + "''")
+        card2 = fits.Card.fromstring(str(card1))
+        print(f"{n} {card1.value == card2.value}")
+        if card1.value != card2.value:
+            print(f"card1: {repr(card1.value)}")
+            print(f"card2: {repr(card2.value)}")
+            print()
+
+    print("\nTest 2: Double single-quotes with trailing content")
+    for n in range(50, 70):
+        card1 = fits.Card('CONFIG', "x" * n + "''" + "x"*10)
+        card2 = fits.Card.fromstring(str(card1))
+        print(f"{n} {len(card1.value)} {card1.value == card2.value}")
+        if card1.value != card2.value:
+            print(f"card1: {repr(card1.value)}")
+            print(f"card2: {repr(card2.value)}")
+            print()
+
+    print("\nTest 3: Edge cases")
+    test_cases = [
+        "''",  # Just double quotes
+        "''''",  # Two sets of double quotes
+        "x''",  # Double quotes at end with prefix
+        "''x",  # Double quotes at start with suffix
+        "x''x",  # Double quotes in middle
+        "x''''x",  # Two sets of double quotes in middle
+        "x''x''x",  # Multiple double quotes
+        "x'' ''x",  # Double quotes with space between
+        " ''",  # Double quotes with leading space
+        "'' ",  # Double quotes with trailing space
+        "x'' ",  # Double quotes then space at end
+        " ''x",  # Space then double quotes at start
+    ]
+    
+    for test in test_cases:
+        card1 = fits.Card('CONFIG', test)
+        card2 = fits.Card.fromstring(str(card1))
+        print(f"Testing {repr(test)}: {card1.value == card2.value}")
+        if card1.value != card2.value:
+            print(f"card1: {repr(card1.value)}")
+            print(f"card2: {repr(card2.value)}")
+            print()
+
+if __name__ == '__main__':
+    test_double_single_quotes()
\ No newline at end of file
