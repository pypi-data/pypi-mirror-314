diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..65556ed373
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fdca700c9d..73a1a92388 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -129,13 +129,12 @@ class JSONField(CheckFieldDefaultMixin, Field):
 def compile_json_path(key_transforms, include_root=True):
     path = ["$"] if include_root else []
     for key_transform in key_transforms:
-        try:
-            num = int(key_transform)
-        except ValueError:  # non-integer
-            path.append(".")
-            path.append(json.dumps(key_transform))
+        if isinstance(key_transform, int):  # Only treat actual integers as array indices
+            path.append("[%s]" % key_transform)
         else:
-            path.append("[%s]" % num)
+            # For SQLite, we need to use JSON_QUOTE to properly escape the key
+            path.append(".")
+            path.append(str(key_transform))
     return "".join(path)
 
 
@@ -227,9 +226,25 @@ class HasKeyLookup(PostgresOperatorLookup):
         return super().as_postgresql(compiler, connection)
 
     def as_sqlite(self, compiler, connection):
-        return self.as_sql(
-            compiler, connection, template="JSON_TYPE(%s, %%s) IS NOT NULL"
-        )
+        # For SQLite, we use JSON_EACH to get all keys and check if our key is in there
+        lhs, lhs_params = self.process_lhs(compiler, connection)
+        rhs = self.rhs
+        if not isinstance(rhs, (list, tuple)):
+            rhs = [rhs]
+        # Build a condition for each key
+        conditions = []
+        params = []
+        for key in rhs:
+            # Use EXISTS with JSON_EACH to check if the key exists
+            conditions.append(
+                "EXISTS (SELECT 1 FROM JSON_EACH(%s) WHERE key = %%s)" % lhs
+            )
+            params.extend(lhs_params + [str(key)])
+        if self.logical_operator:
+            sql = "(%s)" % self.logical_operator.join(conditions)
+        else:
+            sql = conditions[0]
+        return sql, tuple(params)
 
 
 class HasKey(HasKeyLookup):
