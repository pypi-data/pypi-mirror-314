diff --git a/django/template/library.py b/django/template/library.py
index 20bc86dac8..87e0bce8ec 100644
--- a/django/template/library.py
+++ b/django/template/library.py
@@ -251,10 +251,10 @@ def parse_bits(parser, bits, params, varargs, varkw, defaults,
     args = []
     kwargs = {}
     unhandled_params = list(params)
-    unhandled_kwargs = [
-        kwarg for kwarg in kwonly
-        if not kwonly_defaults or kwarg not in kwonly_defaults
-    ]
+    # Include all keyword-only args, regardless of defaults
+    unhandled_kwargs = list(kwonly)
+    # Add keyword-only args to params list so they're recognized as valid kwargs
+    params = list(params) + list(kwonly)
     for bit in bits:
         # First we try to extract a potential kwarg from the bit
         kwarg = token_kwargs([bit], parser)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bd7ea78cd2
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,47 @@
+from django.conf import settings
+from django.template import Library, Template, Context
+
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DEBUG=True,
+    SECRET_KEY='dummy',
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [],
+            'libraries': {
+                'reproduce_error': 'reproduce_error',
+            }
+        },
+    }]
+)
+
+register = Library()
+
+@register.simple_tag
+def hello(*, greeting='hello'):
+    return f'{greeting} world'
+
+@register.simple_tag
+def hi(*, greeting):
+    return f'{greeting} world'
+
+# Test case 1: Using keyword-only argument with default value
+template1 = Template('{% load reproduce_error %}{% hello greeting="hi" %}')
+context1 = Context({})
+
+# Test case 2: Using same keyword argument twice
+template2 = Template('{% load reproduce_error %}{% hi greeting="hi" greeting="hello" %}')
+context2 = Context({})
+
+try:
+    print("Test case 1 output:", template1.render(context1))
+except Exception as e:
+    print("Test case 1 error:", str(e))
+
+try:
+    print("\nTest case 2 output:", template2.render(context2))
+except Exception as e:
+    print("Test case 2 error:", str(e))
\ No newline at end of file
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100644
index 0000000000..efe96f1b5e
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,8 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/test_project/settings.py b/test_project/settings.py
new file mode 100644
index 0000000000..9ce8bc93a1
--- /dev/null
+++ b/test_project/settings.py
@@ -0,0 +1,14 @@
+SECRET_KEY = 'dummy'
+DEBUG = True
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'test_app',
+]
+TEMPLATES = [{
+    'BACKEND': 'django.template.backends.django.DjangoTemplates',
+    'DIRS': [],
+    'APP_DIRS': True,
+    'OPTIONS': {
+        'context_processors': [],
+    },
+}]
\ No newline at end of file
diff --git a/test_project/test.py b/test_project/test.py
new file mode 100644
index 0000000000..21af96188b
--- /dev/null
+++ b/test_project/test.py
@@ -0,0 +1,13 @@
+import os
+os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+
+import django
+django.setup()
+
+from django.template import Template, Context
+
+# Test case 1: Using keyword-only argument with default value
+template1 = Template('{% load test_tags %}{% hello greeting="hi" %}')
+context1 = Context({})
+
+print("Test case 1 output:", template1.render(context1))
\ No newline at end of file
diff --git a/test_project/test_app/__init__.py b/test_project/test_app/__init__.py
new file mode 100644
index 0000000000..22ae0c5f40
--- /dev/null
+++ b/test_project/test_app/__init__.py
@@ -0,0 +1 @@
+# Empty file
\ No newline at end of file
diff --git a/test_project/test_app/apps.py b/test_project/test_app/apps.py
new file mode 100644
index 0000000000..ae6f331d8b
--- /dev/null
+++ b/test_project/test_app/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
\ No newline at end of file
diff --git a/test_project/test_app/templatetags/__init__.py b/test_project/test_app/templatetags/__init__.py
new file mode 100644
index 0000000000..22ae0c5f40
--- /dev/null
+++ b/test_project/test_app/templatetags/__init__.py
@@ -0,0 +1 @@
+# Empty file
\ No newline at end of file
diff --git a/test_project/test_app/templatetags/test_tags.py b/test_project/test_app/templatetags/test_tags.py
new file mode 100644
index 0000000000..8b6e5a490a
--- /dev/null
+++ b/test_project/test_app/templatetags/test_tags.py
@@ -0,0 +1,11 @@
+from django.template import Library
+
+register = Library()
+
+@register.simple_tag
+def hello(*, greeting='hello'):
+    return f'{greeting} world'
+
+@register.simple_tag
+def hi(*, greeting):
+    return f'{greeting} world'
\ No newline at end of file
