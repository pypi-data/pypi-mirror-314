diff --git a/reproduce_broken_symlink.py b/reproduce_broken_symlink.py
new file mode 100644
index 000000000..408c0581e
--- /dev/null
+++ b/reproduce_broken_symlink.py
@@ -0,0 +1,17 @@
+import os
+import shutil
+import pytest
+
+# Create test directory structure
+os.makedirs("test_dir", exist_ok=True)
+
+# Create symlink to non-existent directory
+if os.path.exists("test_dir/broken_symlink"):
+    os.unlink("test_dir/broken_symlink")
+os.symlink("../nonexistent_dir", "test_dir/broken_symlink", target_is_directory=True)
+
+# Run pytest on test_dir
+pytest.main(["test_dir", "-v"])
+
+# Cleanup
+shutil.rmtree("test_dir")
\ No newline at end of file
diff --git a/reproduce_multi_symlink.py b/reproduce_multi_symlink.py
new file mode 100644
index 000000000..bc029c1d3
--- /dev/null
+++ b/reproduce_multi_symlink.py
@@ -0,0 +1,33 @@
+import os
+import shutil
+import pytest
+
+# Create test directory structure
+os.makedirs("test_dir", exist_ok=True)
+os.makedirs("intermediate_dir", exist_ok=True)
+os.makedirs("real_dir", exist_ok=True)
+
+# Create a test file in real_dir
+with open("real_dir/test_file.py", "w") as f:
+    f.write("""
+def test_something():
+    assert True
+""")
+
+# Create symlink from intermediate_dir/symlink1 to real_dir
+if os.path.exists("intermediate_dir/symlink1"):
+    os.unlink("intermediate_dir/symlink1")
+os.symlink("../real_dir", "intermediate_dir/symlink1", target_is_directory=True)
+
+# Create symlink from test_dir/symlink2 to intermediate_dir/symlink1
+if os.path.exists("test_dir/symlink2"):
+    os.unlink("test_dir/symlink2")
+os.symlink("../intermediate_dir/symlink1", "test_dir/symlink2", target_is_directory=True)
+
+# Run pytest on test_dir
+pytest.main(["test_dir", "-v"])
+
+# Cleanup
+shutil.rmtree("test_dir")
+shutil.rmtree("intermediate_dir")
+shutil.rmtree("real_dir")
\ No newline at end of file
diff --git a/reproduce_symlink.py b/reproduce_symlink.py
new file mode 100644
index 000000000..9bf340048
--- /dev/null
+++ b/reproduce_symlink.py
@@ -0,0 +1,26 @@
+import os
+import shutil
+import pytest
+
+# Create test directory structure
+os.makedirs("test_dir", exist_ok=True)
+os.makedirs("real_dir", exist_ok=True)
+
+# Create a test file in real_dir
+with open("real_dir/test_file.py", "w") as f:
+    f.write("""
+def test_something():
+    assert True
+""")
+
+# Create symlink from test_dir/symlink_dir to real_dir
+if os.path.exists("test_dir/symlink_dir"):
+    os.unlink("test_dir/symlink_dir")
+os.symlink("../real_dir", "test_dir/symlink_dir", target_is_directory=True)
+
+# Run pytest on test_dir
+pytest.main(["test_dir", "-v"])
+
+# Cleanup
+shutil.rmtree("test_dir")
+shutil.rmtree("real_dir")
\ No newline at end of file
diff --git a/src/_pytest/pathlib.py b/src/_pytest/pathlib.py
index f0bdb1481..64c7fec6f 100644
--- a/src/_pytest/pathlib.py
+++ b/src/_pytest/pathlib.py
@@ -558,7 +558,7 @@ def visit(
     entries = sorted(os.scandir(path), key=lambda entry: entry.name)
     yield from entries
     for entry in entries:
-        if entry.is_dir(follow_symlinks=False) and recurse(entry):
+        if entry.is_dir(follow_symlinks=True) and recurse(entry):
             yield from visit(entry.path, recurse)
