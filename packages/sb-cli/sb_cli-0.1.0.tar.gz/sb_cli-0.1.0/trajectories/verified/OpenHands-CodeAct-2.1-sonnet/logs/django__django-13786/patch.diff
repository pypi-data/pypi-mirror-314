diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index dddf7c679c..13641dd8a6 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -137,11 +137,19 @@ class CreateModel(ModelOperation):
                 ),
             ]
         elif isinstance(operation, AlterModelOptions) and self.name_lower == operation.name_lower:
+            # Start with current options
+            new_options = self.options.copy()
+            # Remove any ALTER_OPTION_KEYS that are not in operation.options
+            for key in operation.ALTER_OPTION_KEYS:
+                if key not in operation.options and key in new_options:
+                    del new_options[key]
+            # Update with new options
+            new_options.update(operation.options)
             return [
                 CreateModel(
                     self.name,
                     fields=self.fields,
-                    options={**self.options, **operation.options},
+                    options=new_options,
                     bases=self.bases,
                     managers=self.managers,
                 ),
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..575af63bf2
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,33 @@
+from django.db.migrations.operations.models import CreateModel, AlterModelOptions
+from django.db.migrations.state import ProjectState
+
+# Create initial model with ordering option
+create_model = CreateModel(
+    name="TestModel",
+    fields=[],
+    options={"ordering": ["id"]}
+)
+
+# Create operation to remove ordering option
+alter_options = AlterModelOptions(
+    name="TestModel",
+    options={}  # Empty options should remove all ALTER_OPTION_KEYS
+)
+
+# Create project state
+state = ProjectState()
+
+# Apply CreateModel
+create_model.state_forwards("myapp", state)
+print("After CreateModel:")
+print(state.models[("myapp", "testmodel")].options)
+
+# Apply AlterModelOptions
+alter_options.state_forwards("myapp", state)
+print("\nAfter AlterModelOptions:")
+print(state.models[("myapp", "testmodel")].options)
+
+# Now try to reduce the operations
+reduced = create_model.reduce(alter_options, "myapp")
+print("\nAfter reduce:")
+print(reduced[0].options if reduced else "No reduction")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..4c18ba0ecf
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,64 @@
+from django.db.migrations.operations.models import CreateModel, AlterModelOptions
+from django.db.migrations.state import ProjectState
+
+def test_case(name, initial_options, alter_options):
+    print(f"\n=== Test Case: {name} ===")
+    
+    # Create initial model with options
+    create_model = CreateModel(
+        name="TestModel",
+        fields=[],
+        options=initial_options
+    )
+
+    # Create operation to alter options
+    alter_model_options = AlterModelOptions(
+        name="TestModel",
+        options=alter_options
+    )
+
+    # Create project state
+    state = ProjectState()
+
+    # Apply CreateModel
+    create_model.state_forwards("myapp", state)
+    print("After CreateModel:")
+    print(state.models[("myapp", "testmodel")].options)
+
+    # Apply AlterModelOptions
+    alter_model_options.state_forwards("myapp", state)
+    print("\nAfter AlterModelOptions:")
+    print(state.models[("myapp", "testmodel")].options)
+
+    # Now try to reduce the operations
+    reduced = create_model.reduce(alter_model_options, "myapp")
+    print("\nAfter reduce:")
+    print(reduced[0].options if reduced else "No reduction")
+
+# Test Case 1: Multiple ALTER_OPTION_KEYS
+test_case(
+    "Multiple ALTER_OPTION_KEYS",
+    {"ordering": ["id"], "verbose_name": "Test", "permissions": [("can_test", "Can test")]},
+    {"ordering": ["-id"]}  # Should remove verbose_name and permissions
+)
+
+# Test Case 2: Non-ALTER_OPTION_KEYS should be preserved
+test_case(
+    "Non-ALTER_OPTION_KEYS preserved",
+    {"db_table": "custom_table", "ordering": ["id"]},
+    {"ordering": ["-id"]}  # Should preserve db_table
+)
+
+# Test Case 3: Empty options
+test_case(
+    "Empty options",
+    {"ordering": ["id"], "verbose_name": "Test"},
+    {}  # Should remove all ALTER_OPTION_KEYS
+)
+
+# Test Case 4: No common options
+test_case(
+    "No common options",
+    {"ordering": ["id"]},
+    {"verbose_name": "Test"}  # Should remove ordering and add verbose_name
+)
\ No newline at end of file
