diff --git a/sphinx/domains/python.py b/sphinx/domains/python.py
index 5035ce2ab..431d48dbc 100644
--- a/sphinx/domains/python.py
+++ b/sphinx/domains/python.py
@@ -181,6 +181,26 @@ def _parse_annotation(annotation: str, env: BuildEnvironment = None) -> List[Nod
         return [type_to_xref(annotation, env)]
 
 
+def _format_default_value(value: str) -> str:
+    """Format default value for parameters, with special handling for Enum values."""
+    # Handle None value
+    if value == 'None':
+        return value
+        
+    # Check if this looks like an Enum value (e.g. "<MyEnum.ValueA: 10>")
+    if value.startswith('<') and value.endswith('>'):
+        if ': ' in value:
+            # Extract just the Enum member name (e.g. "MyEnum.ValueA")
+            parts = value.split(': ')[0]
+            if parts.startswith('<'):
+                parts = parts[1:]
+            return parts
+        # Handle Flag combinations (e.g. "<MyFlag.A|B: 3>")
+        elif '|' in value:
+            parts = value[1:-1].split('|')[0].split('.')
+            return '.'.join(parts[:-1]) + '.' + value[1:-1].split('|')[0].split('.')[-1]
+    return value
+
 def _parse_arglist(arglist: str, env: BuildEnvironment = None) -> addnodes.desc_parameterlist:
     """Parse a list of arguments using AST parser"""
     params = addnodes.desc_parameterlist(arglist)
@@ -218,7 +238,8 @@ def _parse_arglist(arglist: str, env: BuildEnvironment = None) -> addnodes.desc_
                 node += nodes.Text(' ')
             else:
                 node += addnodes.desc_sig_operator('', '=')
-            node += nodes.inline('', param.default, classes=['default_value'],
+            formatted_default = _format_default_value(str(param.default))
+            node += nodes.inline('', formatted_default, classes=['default_value'],
                                  support_smartquotes=False)
 
         params += node
diff --git a/test_enum.py b/test_enum.py
new file mode 100644
index 000000000..7c0d4339c
--- /dev/null
+++ b/test_enum.py
@@ -0,0 +1,13 @@
+from enum import Enum
+
+class MyEnum(Enum):
+    ValueA = 10
+    ValueB = 20
+
+def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:
+    """Test function with enum parameter."""
+    pass
+
+if __name__ == '__main__':
+    import inspect
+    print(inspect.signature(ugly_enum_func))
\ No newline at end of file
diff --git a/test_enum_doc.py b/test_enum_doc.py
new file mode 100644
index 000000000..2ff1f3c82
--- /dev/null
+++ b/test_enum_doc.py
@@ -0,0 +1,72 @@
+from enum import Enum
+import os
+import tempfile
+import shutil
+from pathlib import Path
+
+# Create test module
+test_module = """
+from enum import Enum
+
+class MyEnum(Enum):
+    ValueA = 10
+    ValueB = 20
+
+def ugly_enum_func(e: MyEnum = MyEnum.ValueA) -> None:
+    \"\"\"Test function with enum parameter.\"\"\"
+    pass
+"""
+
+# Create Sphinx conf.py
+conf_py = """
+project = 'Test'
+extensions = ['sphinx.ext.autodoc']
+"""
+
+# Create index.rst
+index_rst = """
+Test
+====
+
+.. autofunction:: test_module.ugly_enum_func
+"""
+
+def main():
+    # Create temporary directory
+    temp_dir = tempfile.mkdtemp()
+    try:
+        # Create source directory
+        src_dir = Path(temp_dir) / 'source'
+        src_dir.mkdir()
+        
+        # Create test module
+        with open(src_dir / 'test_module.py', 'w') as f:
+            f.write(test_module)
+        
+        # Create conf.py
+        with open(src_dir / 'conf.py', 'w') as f:
+            f.write(conf_py)
+            
+        # Create index.rst
+        with open(src_dir / 'index.rst', 'w') as f:
+            f.write(index_rst)
+            
+        # Build docs
+        os.system(f'sphinx-build -b html {src_dir} {temp_dir}/build/html')
+        
+        # Read generated HTML
+        with open(f'{temp_dir}/build/html/index.html', 'r') as f:
+            content = f.read()
+            
+        # Check if the signature is rendered correctly
+        if '<MyEnum.ValueA: 10>' in content:
+            print("FAIL: Enum value still rendered with value")
+        else:
+            print("PASS: Enum value rendered correctly")
+            
+    finally:
+        # Cleanup
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/test_enum_doc_edge_cases.py b/test_enum_doc_edge_cases.py
new file mode 100644
index 000000000..065fab45a
--- /dev/null
+++ b/test_enum_doc_edge_cases.py
@@ -0,0 +1,100 @@
+from enum import Enum, IntEnum, Flag
+import os
+import tempfile
+import shutil
+from pathlib import Path
+
+# Create test module with edge cases
+test_module = """
+from enum import Enum, IntEnum, Flag
+
+class MyEnum(Enum):
+    ValueA = 10
+    ValueB = 20
+
+class MyIntEnum(IntEnum):
+    One = 1
+    Two = 2
+
+class MyFlag(Flag):
+    A = 1
+    B = 2
+    C = 4
+
+def test_enums(
+    e1: MyEnum = MyEnum.ValueA,
+    e2: MyIntEnum = MyIntEnum.One,
+    e3: MyFlag = MyFlag.A | MyFlag.B,
+    e4: MyEnum = None,  # Test None default
+    e5: MyEnum = MyEnum.ValueA,  # Duplicate to test caching
+) -> None:
+    \"\"\"Test function with various enum parameters.\"\"\"
+    pass
+"""
+
+# Create Sphinx conf.py
+conf_py = """
+project = 'Test'
+extensions = ['sphinx.ext.autodoc']
+"""
+
+# Create index.rst
+index_rst = """
+Test
+====
+
+.. autofunction:: test_module.test_enums
+"""
+
+def main():
+    # Create temporary directory
+    temp_dir = tempfile.mkdtemp()
+    try:
+        # Create source directory
+        src_dir = Path(temp_dir) / 'source'
+        src_dir.mkdir()
+        
+        # Create test module
+        with open(src_dir / 'test_module.py', 'w') as f:
+            f.write(test_module)
+        
+        # Create conf.py
+        with open(src_dir / 'conf.py', 'w') as f:
+            f.write(conf_py)
+            
+        # Create index.rst
+        with open(src_dir / 'index.rst', 'w') as f:
+            f.write(index_rst)
+            
+        # Build docs with PYTHONPATH set
+        os.environ['PYTHONPATH'] = str(src_dir)
+        os.system(f'sphinx-build -b html {src_dir} {temp_dir}/build/html')
+        
+        # Read generated HTML
+        with open(f'{temp_dir}/build/html/index.html', 'r') as f:
+            content = f.read()
+            
+        # Print relevant content for debugging
+        print("HTML content:")
+        print(content)
+        
+        # Check various cases
+        checks = [
+            ('<MyEnum.ValueA: 10>' not in content, "Basic Enum value"),
+            ('<MyIntEnum.One: 1>' not in content, "IntEnum value"),
+            ('<MyFlag.A|B: 3>' not in content, "Flag value"),
+            ('None' in content, "None default value"),
+        ]
+        
+        for passed, case in checks:
+            if passed:
+                print(f"PASS: {case}")
+            else:
+                print(f"FAIL: {case}")
+            
+    finally:
+        # Cleanup
+        shutil.rmtree(temp_dir)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
