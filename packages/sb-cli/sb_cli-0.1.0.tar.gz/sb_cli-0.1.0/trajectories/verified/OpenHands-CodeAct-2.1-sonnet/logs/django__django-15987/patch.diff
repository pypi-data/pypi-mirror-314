diff --git a/django/core/management/commands/loaddata.py b/django/core/management/commands/loaddata.py
index ac97f13161..aed955e259 100644
--- a/django/core/management/commands/loaddata.py
+++ b/django/core/management/commands/loaddata.py
@@ -362,12 +362,16 @@ class Command(BaseCommand):
         """
         dirs = []
         fixture_dirs = settings.FIXTURE_DIRS
-        if len(fixture_dirs) != len(set(fixture_dirs)):
+        # Convert all paths to resolved strings for duplicate detection
+        resolved_fixture_dirs = [os.path.realpath(str(d)) for d in fixture_dirs]
+        if len(resolved_fixture_dirs) != len(set(resolved_fixture_dirs)):
             raise ImproperlyConfigured("settings.FIXTURE_DIRS contains duplicates.")
         for app_config in apps.get_app_configs():
             app_label = app_config.label
             app_dir = os.path.join(app_config.path, "fixtures")
-            if app_dir in fixture_dirs:
+            # Also convert app_dir to resolved path for comparison
+            resolved_app_dir = os.path.realpath(app_dir)
+            if resolved_app_dir in resolved_fixture_dirs:
                 raise ImproperlyConfigured(
                     "'%s' is a default fixture directory for the '%s' app "
                     "and cannot be listed in settings.FIXTURE_DIRS."
@@ -380,7 +384,7 @@ class Command(BaseCommand):
                 dirs.append(app_dir)
         dirs.extend(fixture_dirs)
         dirs.append("")
-        return [os.path.realpath(d) for d in dirs]
+        return [os.path.realpath(str(d)) for d in dirs]
 
     def parse_name(self, fixture_name):
         """
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4f2c15f59a
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,64 @@
+from pathlib import Path
+from django.conf import settings
+from django.core.management import call_command
+from django.test import TestCase, override_settings
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+# Create test case
+class FixtureDirsTest(TestCase):
+    def test_duplicate_path_instances(self):
+        """Test that duplicate Path instances in FIXTURE_DIRS are detected."""
+        # Test case 1: Exact same paths
+        with self.assertRaises(Exception) as cm:
+            with override_settings(FIXTURE_DIRS=[
+                Path('/tmp/fixtures'),
+                Path('/tmp/fixtures'),
+            ]):
+                call_command('loaddata', 'nonexistent_fixture')
+        print("Test 1 passed: Detected duplicate identical paths")
+
+        # Test case 2: Same paths with different representations
+        with self.assertRaises(Exception) as cm:
+            with override_settings(FIXTURE_DIRS=[
+                Path('/tmp/fixtures'),
+                Path('/tmp/fixtures/subdir/../'),
+            ]):
+                call_command('loaddata', 'nonexistent_fixture')
+        print("Test 2 passed: Detected duplicate paths with different representations")
+
+        # Test case 3: Different paths should work
+        try:
+            with override_settings(FIXTURE_DIRS=[
+                Path('/tmp/fixtures'),
+                Path('/tmp/other_fixtures'),
+            ]):
+                call_command('loaddata', 'nonexistent_fixture')
+        except Exception as e:
+            if "contains duplicates" in str(e):
+                print("ERROR: Different paths were incorrectly detected as duplicates!")
+                return
+            print("Test 3 passed: Different paths work as expected")
+        print("All tests passed!")
+
+if __name__ == '__main__':
+    import django
+    django.setup()
+    
+    # Run the test
+    test = FixtureDirsTest('test_duplicate_path_instances')
+    test.setUp()
+    test.test_duplicate_path_instances()
+    test.tearDown()
\ No newline at end of file
