diff --git a/django/core/handlers/base.py b/django/core/handlers/base.py
index 8e8c3da06a..989356c5d6 100644
--- a/django/core/handlers/base.py
+++ b/django/core/handlers/base.py
@@ -50,11 +50,7 @@ class BaseHandler:
             else:
                 middleware_is_async = middleware_can_async
             try:
-                # Adapt handler, if needed.
-                handler = self.adapt_method_mode(
-                    middleware_is_async, handler, handler_is_async,
-                    debug=settings.DEBUG, name='middleware %s' % middleware_path,
-                )
+                # Create middleware instance first to check if it will be used
                 mw_instance = middleware(handler)
             except MiddlewareNotUsed as exc:
                 if settings.DEBUG:
@@ -64,6 +60,12 @@ class BaseHandler:
                         logger.debug('MiddlewareNotUsed: %r', middleware_path)
                 continue
 
+            # Only adapt the handler if the middleware will be used
+            handler = self.adapt_method_mode(
+                middleware_is_async, handler, handler_is_async,
+                debug=settings.DEBUG, name='middleware %s' % middleware_path,
+            )
+
             if mw_instance is None:
                 raise ImproperlyConfigured(
                     'Middleware factory %s returned None.' % middleware_path
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..03885ad147
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,75 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.exceptions import MiddlewareNotUsed
+from django.core.handlers.asgi import ASGIHandler
+from django.http import HttpResponse
+
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='dummy',
+        MIDDLEWARE=[
+            'reproduce_bug.DummyMiddleware',  # Our test middleware
+            'django.contrib.sessions.middleware.SessionMiddleware',
+        ],
+        ROOT_URLCONF='django.urls',
+        INSTALLED_APPS=[],
+    )
+    django.setup()
+
+# Add current directory to Python path
+sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
+
+# Define a dummy middleware that raises MiddlewareNotUsed
+class DummyMiddleware:
+    def __init__(self, get_response):
+        self.get_response = get_response
+        self.async_capable = False
+        # Print the type of get_response before raising MiddlewareNotUsed
+        print(f"DummyMiddleware get_response type: {type(get_response)}")
+        print(f"DummyMiddleware get_response is coroutine: {asyncio.iscoroutinefunction(get_response)}")
+        raise MiddlewareNotUsed()
+
+    def __call__(self, request):
+        return self.get_response(request)
+
+import asyncio
+
+# Create an ASGI application
+application = ASGIHandler()
+
+async def test_request():
+    scope = {
+        'type': 'http',
+        'method': 'GET',
+        'path': '/test/',
+        'path_info': '/test/',
+        'headers': [],
+        'query_string': b'',
+        'server': ('testserver', 80),
+    }
+    
+    async def receive():
+        return {'type': 'http.request'}
+    
+    async def send(message):
+        if message['type'] == 'http.response.start':
+            print(f"Response status: {message.get('status', 'unknown')}")
+        elif message['type'] == 'http.response.body':
+            print(f"Response body: {message.get('body', b'').decode()}")
+    
+    try:
+        await application(scope, receive, send)
+        print("Request completed successfully")
+    except Exception as e:
+        print(f"Error during request: {type(e).__name__}: {str(e)}")
+
+# Run the test
+loop = asyncio.new_event_loop()
+asyncio.set_event_loop(loop)
+try:
+    loop.run_until_complete(test_request())
+finally:
+    loop.close()
\ No newline at end of file
