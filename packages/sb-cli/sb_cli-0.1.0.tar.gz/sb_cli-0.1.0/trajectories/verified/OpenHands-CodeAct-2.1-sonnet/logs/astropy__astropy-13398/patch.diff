diff --git a/astropy/coordinates/builtin_frames/__init__.py b/astropy/coordinates/builtin_frames/__init__.py
index 6fd688c285..1315098747 100644
--- a/astropy/coordinates/builtin_frames/__init__.py
+++ b/astropy/coordinates/builtin_frames/__init__.py
@@ -50,6 +50,7 @@ from . import cirs_observed_transforms
 from . import icrs_observed_transforms
 from . import intermediate_rotation_transforms
 from . import ecliptic_transforms
+from . import itrs_observed_transforms
 
 # Import this after importing other frames, since this requires various
 # transformtions to set up the LSR frames
diff --git a/astropy/coordinates/builtin_frames/itrs_observed_transforms.py b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
new file mode 100644
index 0000000000..be9c1dbb9f
--- /dev/null
+++ b/astropy/coordinates/builtin_frames/itrs_observed_transforms.py
@@ -0,0 +1,114 @@
+"""
+Contains the transformation functions for getting to "observed" systems from ITRS.
+"""
+import numpy as np
+
+from astropy import units as u
+from astropy.coordinates.baseframe import frame_transform_graph
+from astropy.coordinates.transformations import FunctionTransformWithFiniteDifference
+from astropy.coordinates.representation import (SphericalRepresentation,
+                                              CartesianRepresentation,
+                                              UnitSphericalRepresentation)
+from astropy.coordinates.matrix_utilities import rotation_matrix, matrix_transpose
+
+from .itrs import ITRS
+from .altaz import AltAz
+from .hadec import HADec
+from .utils import PIOVER2
+
+
+def itrs_to_observed_mat(observed_frame):
+    """Form the transformation matrix from ITRS to AltAz or HADec.
+
+    Parameters
+    ----------
+    observed_frame : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        The frame to transform to.
+
+    Returns
+    -------
+    matrix : ndarray
+        A 3x3 transformation matrix that transforms from ITRS to the target frame.
+    """
+    lon, lat, height = observed_frame.location.to_geodetic('WGS84')
+    elong = lon.to_value(u.radian)
+
+    if isinstance(observed_frame, AltAz):
+        # form ITRS to AltAz matrix
+        elat = lat.to_value(u.radian)
+        # AltAz frame is left handed
+        minus_x = np.eye(3)
+        minus_x[0][0] = -1.0
+        mat = (minus_x
+               @ rotation_matrix(PIOVER2 - elat, 'y', unit=u.radian)
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+
+    else:
+        # form ITRS to HADec matrix
+        # HADec frame is left handed
+        minus_y = np.eye(3)
+        minus_y[1][1] = -1.0
+        mat = (minus_y
+               @ rotation_matrix(elong, 'z', unit=u.radian))
+    return mat
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, AltAz)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, ITRS, HADec)
+def itrs_to_observed(itrs_coo, observed_frame):
+    """Transform from ITRS to AltAz or HADec.
+
+    This transformation stays entirely within the ITRS frame and merely converts
+    between ITRS, AltAz, and HADec coordinates. The ITRS position is treated as
+    time invariant.
+
+    Parameters
+    ----------
+    itrs_coo : `~astropy.coordinates.ITRS`
+        ITRS coordinates to transform
+    observed_frame : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        Frame to transform to
+
+    Returns
+    -------
+    coord : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        The transformed coordinates in the target frame
+    """
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = (itrs_coo.cartesian
+                            - observed_frame.location.get_itrs().cartesian)
+    rep = topocentric_itrs_repr.transform(itrs_to_observed_mat(observed_frame))
+    return observed_frame.realize_frame(rep)
+
+
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, AltAz, ITRS)
+@frame_transform_graph.transform(FunctionTransformWithFiniteDifference, HADec, ITRS)
+def observed_to_itrs(observed_coo, itrs_frame):
+    """Transform from AltAz or HADec to ITRS.
+
+    This transformation stays entirely within the ITRS frame and merely converts
+    between ITRS, AltAz, and HADec coordinates. The ITRS position is treated as
+    time invariant.
+
+    Parameters
+    ----------
+    observed_coo : `~astropy.coordinates.AltAz` or `~astropy.coordinates.HADec`
+        Coordinates to transform
+    itrs_frame : `~astropy.coordinates.ITRS`
+        Frame to transform to
+
+    Returns
+    -------
+    coord : `~astropy.coordinates.ITRS`
+        The transformed coordinates in ITRS
+    """
+    # form the Topocentric ITRS position
+    topocentric_itrs_repr = observed_coo.cartesian.transform(matrix_transpose(
+                            itrs_to_observed_mat(observed_coo)))
+    # form the Geocentric ITRS position
+    rep = topocentric_itrs_repr + observed_coo.location.get_itrs().cartesian
+    return itrs_frame.realize_frame(rep)
+
+
+# Note: We don't need to add loopback transformations here since they are already
+# handled by the ICRS transforms
\ No newline at end of file
