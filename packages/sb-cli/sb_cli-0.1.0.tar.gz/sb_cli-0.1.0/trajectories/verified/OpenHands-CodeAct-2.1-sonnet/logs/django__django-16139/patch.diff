diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index b3cfc6723c..f6c4b7fc2f 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -163,7 +163,7 @@ class UserChangeForm(forms.ModelForm):
         super().__init__(*args, **kwargs)
         password = self.fields.get("password")
         if password:
-            password.help_text = password.help_text.format("../password/")
+            password.help_text = password.help_text.format(f"../../{self.instance.pk}/password/")
         user_permissions = self.fields.get("user_permissions")
         if user_permissions:
             user_permissions.queryset = user_permissions.queryset.select_related(
diff --git a/test_password_link.py b/test_password_link.py
new file mode 100644
index 0000000000..d24a0efe6c
--- /dev/null
+++ b/test_password_link.py
@@ -0,0 +1,87 @@
+import os
+import uuid
+import django
+from django.conf import settings
+
+# Configure Django settings before importing models
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.admin',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+    ],
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    }],
+    SECRET_KEY='test-key',
+)
+
+django.setup()
+
+from django.contrib.auth import get_user_model
+from django.contrib.auth.forms import UserChangeForm
+from django.contrib.auth.admin import UserAdmin
+from django.contrib.admin import AdminSite
+from django.test import TestCase, RequestFactory
+
+
+
+# Create test case
+class TestUserChangeFormPasswordLink(TestCase):
+    def setUp(self):
+        User = get_user_model()
+        self.user = User.objects.create_user(
+            username='testuser',
+            password='testpass',
+            email='test@example.com'
+        )
+
+    def test_password_link_with_pk(self):
+        form = UserChangeForm(instance=self.user)
+        password_field = form.fields['password']
+        help_text = password_field.help_text
+        expected_link = f"../../{self.user.pk}/password/"
+        self.assertIn(expected_link, help_text)
+
+    def test_password_link_with_custom_to_field(self):
+        # Even when accessed via a custom to_field, the link should still use the PK
+        request = RequestFactory().get('/')
+        admin_site = AdminSite()
+        admin = UserAdmin(get_user_model(), admin_site)
+        admin.to_field = 'username'  # Simulate accessing via custom to_field
+        form = admin.get_form(request, self.user)(instance=self.user)
+        password_field = form.fields['password']
+        help_text = password_field.help_text
+        expected_link = f"../../{self.user.pk}/password/"
+        self.assertIn(expected_link, help_text)
+
+if __name__ == '__main__':
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
+    if failures:
+        print("Test failed!")
+        exit(1)
+    print("Test passed!")
+    exit(0)
\ No newline at end of file
