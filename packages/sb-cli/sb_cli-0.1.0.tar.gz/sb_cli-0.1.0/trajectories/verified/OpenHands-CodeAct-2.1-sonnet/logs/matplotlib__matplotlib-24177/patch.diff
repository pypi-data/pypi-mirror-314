diff --git a/histogram_edge_cases.png b/histogram_edge_cases.png
new file mode 100644
index 0000000000..81a0501365
Binary files /dev/null and b/histogram_edge_cases.png differ
diff --git a/histogram_test.png b/histogram_test.png
new file mode 100644
index 0000000000..990494a448
Binary files /dev/null and b/histogram_test.png differ
diff --git a/lib/matplotlib/axes/_axes.py b/lib/matplotlib/axes/_axes.py
index 2412f815cd..2e8af953e5 100644
--- a/lib/matplotlib/axes/_axes.py
+++ b/lib/matplotlib/axes/_axes.py
@@ -6738,7 +6738,9 @@ such objects
 
         density = bool(density)
         if density and not stacked:
-            hist_kwargs['density'] = density
+            # For step plots, we'll handle density normalization after getting the counts
+            if not histtype.startswith('step'):
+                hist_kwargs['density'] = density
 
         # List to store all the top coordinates of the histograms
         tops = []  # Will have shape (n_datasets, n_bins).
@@ -6747,6 +6749,10 @@ such objects
             # this will automatically overwrite bins,
             # so that each histogram uses the same bins
             m, bins = np.histogram(x[i], bins, weights=w[i], **hist_kwargs)
+            # For step plots with density=True, normalize after getting counts
+            if density and not stacked and histtype.startswith('step'):
+                db = np.diff(bins)
+                m = m / (m.sum() * db)
             tops.append(m)
         tops = np.array(tops, float)  # causes problems later if it's an int
         bins = np.array(bins, float)  # causes problems if float16
diff --git a/reproduce_hist_bug.py b/reproduce_hist_bug.py
new file mode 100644
index 0000000000..ec4808d399
--- /dev/null
+++ b/reproduce_hist_bug.py
@@ -0,0 +1,21 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Generate test data
+np.random.seed(42)  # For reproducibility
+scale = 1.2
+test_random = np.random.randn(100000) * scale
+
+# Create figure with two subplots
+fig, ax = plt.subplots(1, 2, figsize=(20, 10))
+
+# Plot histograms with different histtypes
+hist_bar = ax[0].hist(test_random, bins=100, density=True, histtype="bar")
+hist_step = ax[1].hist(test_random, bins=100, density=True, histtype="step")
+
+# Add titles for clarity
+ax[0].set_title('histtype="bar"')
+ax[1].set_title('histtype="step"')
+
+plt.savefig('histogram_test.png')
+plt.close()
\ No newline at end of file
diff --git a/test_hist_edge_cases.py b/test_hist_edge_cases.py
new file mode 100644
index 0000000000..19eba341c2
--- /dev/null
+++ b/test_hist_edge_cases.py
@@ -0,0 +1,51 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test cases
+test_cases = [
+    {
+        'name': 'Single value',
+        'data': np.array([1.0] * 1000),
+        'scale': 1.0
+    },
+    {
+        'name': 'Two distinct values',
+        'data': np.concatenate([np.array([1.0] * 500), np.array([2.0] * 500)]),
+        'scale': 1.0
+    },
+    {
+        'name': 'Very small values',
+        'data': np.random.normal(0, 1e-6, 1000),
+        'scale': 1.0
+    },
+    {
+        'name': 'Very large values',
+        'data': np.random.normal(0, 1e6, 1000),
+        'scale': 1.0
+    },
+    {
+        'name': 'Mixed positive/negative',
+        'data': np.concatenate([np.random.normal(-5, 1, 500), np.random.normal(5, 1, 500)]),
+        'scale': 1.0
+    }
+]
+
+# Create figure
+fig, axes = plt.subplots(len(test_cases), 2, figsize=(15, 5*len(test_cases)))
+fig.suptitle('Edge Cases: Bar vs Step Histograms (density=True)')
+
+# Run tests
+for i, test_case in enumerate(test_cases):
+    data = test_case['data'] * test_case['scale']
+    
+    # Plot bar histogram
+    axes[i,0].hist(data, bins=50, density=True, histtype='bar')
+    axes[i,0].set_title(f"{test_case['name']} - Bar")
+    
+    # Plot step histogram
+    axes[i,1].hist(data, bins=50, density=True, histtype='step')
+    axes[i,1].set_title(f"{test_case['name']} - Step")
+
+plt.tight_layout()
+plt.savefig('histogram_edge_cases.png')
+plt.close()
\ No newline at end of file
