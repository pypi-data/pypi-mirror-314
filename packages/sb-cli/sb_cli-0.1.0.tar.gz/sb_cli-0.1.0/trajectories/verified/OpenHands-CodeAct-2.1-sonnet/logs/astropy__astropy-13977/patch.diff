diff --git a/astropy/units/core.py b/astropy/units/core.py
index 8c3204b8b0..68281cea66 100644
--- a/astropy/units/core.py
+++ b/astropy/units/core.py
@@ -1013,7 +1013,10 @@ class UnitBase:
 
         def make_converter(scale1, func, scale2):
             def convert(v):
-                return func(_condition_arg(v) / scale1) * scale2
+                conditioned = _condition_arg(v)
+                if conditioned is NotImplemented:
+                    return NotImplemented
+                return func(conditioned / scale1) * scale2
 
             return convert
 
@@ -1070,7 +1073,12 @@ class UnitBase:
             if scale == 1.0:
                 return unit_scale_converter
             else:
-                return lambda val: scale * _condition_arg(val)
+                def converter(val):
+                    conditioned = _condition_arg(val)
+                    if conditioned is NotImplemented:
+                        return NotImplemented
+                    return scale * conditioned
+                return converter
 
         # if that doesn't work, maybe we can do it with equivalencies?
         try:
@@ -1091,7 +1099,14 @@ class UnitBase:
                         else:
                             return lambda v: b(converter(v))
 
-            raise exc
+            # If we can't convert between units, return a converter that returns NotImplemented
+            # to allow the operation to fall back to the other operand's implementation
+            def converter(val):
+                conditioned = _condition_arg(val)
+                if conditioned is NotImplemented:
+                    return NotImplemented
+                return NotImplemented
+            return converter
 
     def _to(self, other):
         """
@@ -2614,7 +2629,9 @@ def _condition_arg(value):
 
     Returns
     -------
-    Scalar value or numpy array
+    Scalar value or numpy array or NotImplemented
+        Returns NotImplemented if the value cannot be converted to an array
+        but might support operations through __array_ufunc__
 
     Raises
     ------
@@ -2624,13 +2641,27 @@ def _condition_arg(value):
     if isinstance(value, (np.ndarray, float, int, complex, np.void)):
         return value
 
-    avalue = np.array(value)
-    if avalue.dtype.kind not in ["i", "f", "c"]:
+    try:
+        avalue = np.array(value)
+        if avalue.dtype.kind not in ["i", "f", "c"]:
+            # If the value has __array_ufunc__, return NotImplemented to allow
+            # the operation to fall back to the other operand's implementation
+            if hasattr(value, '__array_ufunc__'):
+                return NotImplemented
+            raise ValueError(
+                "Value not scalar compatible or convertible to "
+                "an int, float, or complex array"
+            )
+        return avalue
+    except (TypeError, ValueError):
+        # If the value has __array_ufunc__, return NotImplemented to allow
+        # the operation to fall back to the other operand's implementation
+        if hasattr(value, '__array_ufunc__'):
+            return NotImplemented
         raise ValueError(
             "Value not scalar compatible or convertible to "
             "an int, float, or complex array"
         )
-    return avalue
 
 
 def unit_scale_converter(val):
diff --git a/astropy/units/quantity.py b/astropy/units/quantity.py
index b98abfafb0..c1114c377b 100644
--- a/astropy/units/quantity.py
+++ b/astropy/units/quantity.py
@@ -667,7 +667,13 @@ class Quantity(np.ndarray):
         arrays = []
         for input_, converter in zip(inputs, converters):
             input_ = getattr(input_, "value", input_)
-            arrays.append(converter(input_) if converter else input_)
+            if converter:
+                converted = converter(input_)
+                if converted is NotImplemented:
+                    return NotImplemented
+                arrays.append(converted)
+            else:
+                arrays.append(input_)
 
         # Call our superclass's __array_ufunc__
         result = super().__array_ufunc__(function, method, *arrays, **kwargs)
diff --git a/astropy/units/quantity_helper/converters.py b/astropy/units/quantity_helper/converters.py
index 47b40c2072..c20e2028e7 100644
--- a/astropy/units/quantity_helper/converters.py
+++ b/astropy/units/quantity_helper/converters.py
@@ -181,7 +181,7 @@ def converters_and_unit(function, method, *args):
         # Determine possible conversion functions, and the result unit.
         converters, result_unit = ufunc_helper(function, *units)
 
-        if any(converter is False for converter in converters):
+        if any(converter is False or converter is NotImplemented for converter in converters):
             # for multi-argument ufuncs with a quantity and a non-quantity,
             # the quantity normally needs to be dimensionless, *except*
             # if the non-quantity can have arbitrary unit, i.e., when it
@@ -192,8 +192,12 @@ def converters_and_unit(function, method, *args):
                 # Don't fold this loop in the test above: this rare case
                 # should not make the common case slower.
                 for i, converter in enumerate(converters):
-                    if converter is not False:
+                    if converter is not False and converter is not NotImplemented:
                         continue
+                    if converter is NotImplemented:
+                        # If any converter is NotImplemented, return NotImplemented
+                        # to allow the operation to fall back to the other operand's implementation
+                        return [NotImplemented, NotImplemented], None
                     if can_have_arbitrary_unit(args[i]):
                         converters[i] = None
                     else:
diff --git a/astropy/units/quantity_helper/helpers.py b/astropy/units/quantity_helper/helpers.py
index 9582edd1e6..6fac7e9cf5 100644
--- a/astropy/units/quantity_helper/helpers.py
+++ b/astropy/units/quantity_helper/helpers.py
@@ -69,10 +69,9 @@ def get_converters_and_unit(f, unit1, unit2):
         try:
             converters[changeable] = get_converter(unit2, unit1)
         except UnitsError:
-            raise UnitConversionError(
-                f"Can only apply '{f.__name__}' function to quantities "
-                "with compatible dimensions"
-            )
+            # If we can't convert between units, return NotImplemented to allow
+            # the operation to fall back to the other operand's implementation
+            return [NotImplemented, NotImplemented], None
 
         return converters, unit1
