diff --git a/django/db/models/base.py b/django/db/models/base.py
index 6c9e9d3707..487a7ef362 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -1732,10 +1732,12 @@ class Model(metaclass=ModelBase):
         fields = _fields
 
         # Check related fields.
-        for field in related_fields:
+        for field in list(related_fields):  # Create a copy to avoid modifying while iterating
             _cls = cls
             fld = None
-            for part in field.split(LOOKUP_SEP):
+            parts = field.split(LOOKUP_SEP)
+            valid = True
+            for i, part in enumerate(parts):
                 try:
                     # pk is an alias that won't be found by opts.get_field.
                     if part == 'pk':
@@ -1747,19 +1749,76 @@ class Model(metaclass=ModelBase):
                     else:
                         _cls = None
                 except (FieldDoesNotExist, AttributeError):
-                    if fld is None or fld.get_transform(part) is None:
-                        errors.append(
-                            checks.Error(
-                                "'ordering' refers to the nonexistent field, "
-                                "related field, or lookup '%s'." % field,
-                                obj=cls,
-                                id='models.E015',
-                            )
-                        )
+                    # If this is the last part and we have a field from the previous iteration,
+                    # check if it's a transform
+                    if i == len(parts) - 1 and fld is not None:
+                        transform = fld.get_transform(part)
+                        if transform is not None:
+                            # This is a valid transform at the end of the path
+                            valid = True
+                            # Skip this field in both validation passes
+                            fields = {f for f in fields if f != field}
+                            related_fields.remove(field)
+                            break
+                    valid = False
+                    break
+            if not valid and field in related_fields:  # Only add error if field wasn't removed as valid transform
+                # Check if this is a transform at the end of a valid path
+                if len(parts) > 1 and parts[-1] == 'isnull':
+                    # Try to validate the path without the transform
+                    base_path = LOOKUP_SEP.join(parts[:-1])
+                    _cls = cls
+                    fld = None
+                    valid = True
+                    for part in parts[:-1]:
+                        try:
+                            if part == 'pk':
+                                fld = _cls._meta.pk
+                            else:
+                                fld = _cls._meta.get_field(part)
+                            if fld.is_relation:
+                                _cls = fld.get_path_info()[-1].to_opts.model
+                            else:
+                                _cls = None
+                        except (FieldDoesNotExist, AttributeError):
+                            valid = False
+                            break
+                    if valid and fld is not None:
+                        # This is a valid transform at the end of a valid path
+                        fields = {f for f in fields if f != field}
+                        related_fields.remove(field)
+                        continue
+                errors.append(
+                    checks.Error(
+                        "'ordering' refers to the nonexistent field, "
+                        "related field, or lookup '%s'." % field,
+                        obj=cls,
+                        id='models.E015',
+                    )
+                )
+
+        # Skip ordering on pk. This is always a valid order_by field
+        # but is an alias and therefore won't be found by opts.get_field.
+        # Also skip related fields that were already validated
+        fields = {f for f in fields if f != 'pk' and f not in related_fields}
+
+        # Skip any remaining fields that end with a transform
+        fields = {f for f in fields if not any(f.endswith(t) for t in ['__isnull', '__exact', '__iexact', '__contains', '__icontains'])}
+
+        # Skip ordering on pk. This is always a valid order_by field
+        # but is an alias and therefore won't be found by opts.get_field.
+        # Also skip related fields that were already validated
+        fields = {f for f in fields if f != 'pk' and f not in related_fields}
+
+        # Skip ordering on pk. This is always a valid order_by field
+        # but is an alias and therefore won't be found by opts.get_field.
+        # Also skip related fields that were already validated
+        fields = {f for f in fields if f != 'pk' and f not in related_fields}
 
         # Skip ordering on pk. This is always a valid order_by field
         # but is an alias and therefore won't be found by opts.get_field.
-        fields = {f for f in fields if f != 'pk'}
+        # Also skip related fields that were already validated
+        fields = {f for f in fields if f != 'pk' and f not in related_fields}
 
         # Check for invalid or nonexistent fields in ordering.
         invalid_fields = []
