diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..cb9205e42b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,35 @@
+from sympy.combinatorics import DihedralGroup, PermutationGroup, Permutation
+
+def test_sylow(n, p):
+    G = DihedralGroup(n)
+    print(f"\nTesting DihedralGroup({n}) with p={p}...")
+    try:
+        S = G.sylow_subgroup(p=p)
+        print("Success! S =", S)
+        print("Order of S:", S.order())
+        print("Order of G:", G.order())
+        # Verify that the order of the Sylow p-subgroup is correct
+        # For a group of order n, a Sylow p-subgroup has order p^k where p^k is the highest power of p dividing n
+        n = G.order()
+        p_power = 1
+        while n % (p * p_power) == 0:
+            p_power *= p
+        print(f"Highest power of {p} dividing |G|: {p_power}")
+        assert S.order() == p_power, f"Order of Sylow {p}-subgroup should be {p_power}"
+        print("Order verification passed!")
+    except Exception as e:
+        print("Error:", str(e))
+        print("Type:", type(e))
+
+# Original test cases
+test_sylow(18, 2)
+test_sylow(2*25, 2)
+
+# Additional test cases
+test_sylow(12, 2)  # Small order
+test_sylow(12, 3)  # Different prime
+test_sylow(60, 2)  # Larger order
+test_sylow(60, 3)  # Another prime
+test_sylow(60, 5)  # Another prime
+test_sylow(100, 2)  # Power of 2 * 25
+test_sylow(100, 5)  # Power of 5 * 4
\ No newline at end of file
diff --git a/sympy/combinatorics/perm_groups.py b/sympy/combinatorics/perm_groups.py
index de94ddabb4..4e66118401 100644
--- a/sympy/combinatorics/perm_groups.py
+++ b/sympy/combinatorics/perm_groups.py
@@ -2194,18 +2194,23 @@ def _number_blocks(blocks):
                 # check if the system is minimal with
                 # respect to the already discovere ones
                 minimal = True
-                to_remove = []
+                to_remove_idx = []
+                to_remove_reps = []
                 for i, r in enumerate(rep_blocks):
                     if len(r) > len(rep) and rep.issubset(r):
                         # i-th block system is not minimal
-                        del num_blocks[i], blocks[i]
-                        to_remove.append(rep_blocks[i])
+                        to_remove_idx.append(i)
+                        to_remove_reps.append(r)
                     elif len(r) < len(rep) and r.issubset(rep):
                         # the system being checked is not minimal
                         minimal = False
                         break
+                # remove non-minimal blocks in reverse order to avoid index issues
+                for i in sorted(to_remove_idx, reverse=True):
+                    del num_blocks[i]
+                    del blocks[i]
                 # remove non-minimal representative blocks
-                rep_blocks = [r for r in rep_blocks if r not in to_remove]
+                rep_blocks = [r for r in rep_blocks if r not in to_remove_reps]
 
                 if minimal and num_block not in num_blocks:
                     blocks.append(block)
