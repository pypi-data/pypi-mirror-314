diff --git a/django/db/models/query.py b/django/db/models/query.py
index d9c9b0db04..3ad7b93fd1 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -15,7 +15,7 @@ from django.db import (
     DJANGO_VERSION_PICKLE_KEY, IntegrityError, NotSupportedError, connections,
     router, transaction,
 )
-from django.db.models import AutoField, DateField, DateTimeField, sql
+from django.db.models import AutoField, DateField, DateTimeField, sql, UniqueConstraint
 from django.db.models.constants import LOOKUP_SEP
 from django.db.models.deletion import Collector
 from django.db.models.expressions import Case, Expression, F, Value, When
@@ -689,8 +689,14 @@ class QuerySet:
         """
         assert not self.query.is_sliced, \
             "Cannot use 'limit' or 'offset' with in_bulk"
-        if field_name != 'pk' and not self.model._meta.get_field(field_name).unique:
-            raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
+        if field_name != 'pk':
+            field = self.model._meta.get_field(field_name)
+            if not field.unique and not any(
+                isinstance(constraint, UniqueConstraint) and
+                len(constraint.fields) == 1 and constraint.fields[0] == field_name
+                for constraint in self.model._meta.constraints
+            ):
+                raise ValueError("in_bulk()'s field_name must be a unique field but %r isn't." % field_name)
         if id_list is not None:
             if not id_list:
                 return {}
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..cb76fb187a
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,124 @@
+from django.conf import settings
+from django.db import models
+from django.test import TestCase
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.db.models.base', # Add this to allow our test model
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+# Define the models
+class Article(models.Model):
+    slug = models.CharField(max_length=255)
+    title = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'testapp'
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="article_slug_unq")
+        ]
+
+class Article2(models.Model):
+    slug = models.CharField(max_length=255)
+    title = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'testapp'
+        constraints = [
+            models.UniqueConstraint(fields=["slug", "title"], name="article_slug_title_unq")
+        ]
+
+class Article3(models.Model):
+    slug = models.CharField(max_length=255)
+    title = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'testapp'
+        constraints = [
+            models.UniqueConstraint(fields=["slug"], name="article_slug_unq"),
+            models.UniqueConstraint(fields=["title"], name="article_title_unq")
+        ]
+
+class Article4(models.Model):
+    slug = models.CharField(max_length=255)
+    title = models.CharField(max_length=255)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Article)
+    schema_editor.create_model(Article2)
+    schema_editor.create_model(Article3)
+    schema_editor.create_model(Article4)
+
+# Create some test data
+Article.objects.create(slug="test1", title="Test 1")
+Article.objects.create(slug="test2", title="Test 2")
+
+Article2.objects.create(slug="test1", title="Test 1")
+Article2.objects.create(slug="test2", title="Test 2")
+
+Article3.objects.create(slug="test1", title="Test 1")
+Article3.objects.create(slug="test2", title="Test 2")
+
+Article4.objects.create(slug="test1", title="Test 1")
+Article4.objects.create(slug="test2", title="Test 2")
+
+print("Test 1: Single field UniqueConstraint")
+try:
+    articles = Article.objects.in_bulk(field_name="slug")
+    print("Success! Articles:", articles)
+except ValueError as e:
+    print("Error:", str(e))
+
+print("\nTest 2: Multiple fields in UniqueConstraint")
+try:
+    articles = Article2.objects.in_bulk(field_name="slug")
+    print("Success! Articles:", articles)
+except ValueError as e:
+    print("Error:", str(e))
+
+print("\nTest 3: Multiple UniqueConstraints")
+try:
+    articles = Article3.objects.in_bulk(field_name="title")
+    print("Success! Articles:", articles)
+except ValueError as e:
+    print("Error:", str(e))
+
+print("\nTest 4: No UniqueConstraint")
+try:
+    articles = Article4.objects.in_bulk(field_name="slug")
+    print("Success! Articles:", articles)
+except ValueError as e:
+    print("Error:", str(e))
+
+print("\nTest 5: Empty field name")
+try:
+    articles = Article.objects.in_bulk(field_name="")
+    print("Success! Articles:", articles)
+except ValueError as e:
+    print("Error:", str(e))
+
+print("\nTest 6: Non-existent field name")
+try:
+    articles = Article.objects.in_bulk(field_name="nonexistent")
+    print("Success! Articles:", articles)
+except Exception as e:
+    print("Error:", str(e))
\ No newline at end of file
