diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..8cf17f8d13
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index fafc1beee8..21b768c145 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -378,6 +378,82 @@ class KeyTransformIsNull(lookups.IsNull):
         return super().as_sql(compiler, connection)
 
 
+class KeyTransformIn(lookups.In):
+    def get_prep_lookup(self):
+        if hasattr(self.rhs, 'resolve_expression'):
+            return self.rhs
+        prepared_values = []
+        for rhs_value in self.rhs:
+            if hasattr(rhs_value, 'resolve_expression'):
+                pass
+            elif self.prepare_rhs and hasattr(self.lhs.output_field, 'get_prep_value'):
+                rhs_value = self.lhs.output_field.get_prep_value(rhs_value)
+            prepared_values.append(rhs_value)
+        return prepared_values
+
+    def _is_numeric(self, value):
+        try:
+            float(value)
+            return True
+        except (TypeError, ValueError):
+            return False
+
+    def _prepare_rhs_value(self, value, connection):
+        if value is None:
+            return 'null'
+        elif isinstance(value, (int, float)):
+            return str(value)
+        else:
+            return json.dumps(value)
+
+    def as_sql(self, compiler, connection):
+        # Get the SQL for the key transform
+        if isinstance(self.lhs, KeyTransform):
+            lhs, lhs_params, _ = self.lhs.preprocess_lhs(compiler, connection)
+            json_path = compile_json_path([self.lhs.key_name])
+
+            # Check if all values are numeric
+            rhs_values = [v for v in self.rhs if v is not None]
+            all_numeric = all(self._is_numeric(v) for v in rhs_values)
+
+            if connection.vendor == 'mysql':
+                if all_numeric:
+                    lhs_sql = 'CAST(JSON_EXTRACT(%s, %%s) AS SIGNED)' % lhs
+                else:
+                    lhs_sql = 'JSON_EXTRACT(%s, %%s)' % lhs
+                lhs_params = tuple(lhs_params) + (json_path,)
+            elif connection.vendor == 'oracle':
+                if all_numeric:
+                    lhs_sql = "TO_NUMBER(COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s')))" % ((lhs, json_path) * 2)
+                else:
+                    lhs_sql = "COALESCE(JSON_QUERY(%s, '%s'), JSON_VALUE(%s, '%s'))" % ((lhs, json_path) * 2)
+                lhs_params = tuple(lhs_params) * 2
+            elif connection.vendor == 'sqlite':
+                if all_numeric:
+                    lhs_sql = 'CAST(JSON_EXTRACT(%s, %%s) AS INTEGER)' % lhs
+                else:
+                    lhs_sql = 'JSON_EXTRACT(%s, %%s)' % lhs
+                lhs_params = tuple(lhs_params) + (json_path,)
+            else:
+                return super().as_sql(compiler, connection)
+        else:
+            return super().as_sql(compiler, connection)
+
+        # Process RHS
+        if self.rhs_is_direct_value():
+            rhs_values = [self._prepare_rhs_value(v, connection) for v in self.rhs]
+            if all_numeric:
+                # For numeric values, use placeholders
+                placeholder = '(' + ', '.join(['%s'] * len(rhs_values)) + ')'
+                return '%s IN %s' % (lhs_sql, placeholder), lhs_params + tuple(float(v) if isinstance(v, (int, float)) else float(v) if isinstance(v, str) and not v.startswith('"') else v for v in rhs_values if v != 'null')
+            else:
+                # For non-numeric values, use JSON_EXTRACT with simple values
+                placeholder = '(' + ', '.join(['%s'] * len(rhs_values)) + ')'
+                return '%s IN %s' % (lhs_sql, placeholder), lhs_params + tuple(json.dumps(v) for v in rhs_values)
+        else:
+            rhs, rhs_params = self.process_rhs(compiler, connection)
+            return '%s IN %s' % (lhs_sql, rhs), lhs_params + rhs_params
+
 class KeyTransformExact(JSONExact):
     def process_lhs(self, compiler, connection):
         lhs, lhs_params = super().process_lhs(compiler, connection)
@@ -480,6 +556,7 @@ class KeyTransformGte(KeyTransformNumericLookupMixin, lookups.GreaterThanOrEqual
 
 
 KeyTransform.register_lookup(KeyTransformExact)
+KeyTransform.register_lookup(KeyTransformIn)
 KeyTransform.register_lookup(KeyTransformIExact)
 KeyTransform.register_lookup(KeyTransformIsNull)
 KeyTransform.register_lookup(KeyTransformIContains)
