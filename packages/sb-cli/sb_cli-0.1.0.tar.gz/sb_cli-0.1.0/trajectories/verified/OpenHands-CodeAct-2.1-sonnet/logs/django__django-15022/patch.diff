diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 66f3396a6b..7117b83558 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1031,14 +1031,24 @@ class ModelAdmin(BaseModelAdmin):
         if search_fields and search_term:
             orm_lookups = [construct_search(str(search_field))
                            for search_field in search_fields]
+            # Build a single Q object that combines all search terms
+            search_terms = []
             for bit in smart_split(search_term):
                 if bit.startswith(('"', "'")) and bit[0] == bit[-1]:
                     bit = unescape_string_literal(bit)
+                search_terms.append(bit)
+
+            # Create a Q object for each combination of search term and lookup
+            q_objects = models.Q()
+            for bit in search_terms:
                 or_queries = models.Q(
                     *((orm_lookup, bit) for orm_lookup in orm_lookups),
                     _connector=models.Q.OR,
                 )
-                queryset = queryset.filter(or_queries)
+                q_objects &= or_queries
+
+            # Apply all filters at once
+            queryset = queryset.filter(q_objects)
             may_have_duplicates |= any(
                 lookup_spawns_duplicates(self.opts, search_spec)
                 for search_spec in orm_lookups
diff --git a/server.log b/server.log
new file mode 100644
index 0000000000..1f2174740f
--- /dev/null
+++ b/server.log
@@ -0,0 +1,47 @@
+Traceback (most recent call last):
+  File "/workspace/django__django__4.1/django/db/backends/utils.py", line 85, in _execute
+    return self.cursor.execute(sql, params)
+  File "/workspace/django__django__4.1/django/db/backends/sqlite3/base.py", line 420, in execute
+    return Database.Cursor.execute(self, query, params)
+sqlite3.OperationalError: database is locked
+
+The above exception was the direct cause of the following exception:
+
+Traceback (most recent call last):
+  File "/workspace/reproduce.py", line 92, in <module>
+    from django.contrib.admin.options import ModelAdmin
+  File "/workspace/reproduce.py", line 71, in create_test_data
+    ClientOffice.objects.create(
+  File "/workspace/django__django__4.1/django/db/models/manager.py", line 85, in manager_method
+    return getattr(self.get_queryset(), name)(*args, **kwargs)
+  File "/workspace/django__django__4.1/django/db/models/query.py", line 459, in create
+    obj.save(force_insert=True, using=self.db)
+  File "/workspace/django__django__4.1/django/db/models/base.py", line 762, in save
+    self.save_base(using=using, force_insert=force_insert,
+  File "/workspace/django__django__4.1/django/db/models/base.py", line 799, in save_base
+    updated = self._save_table(
+  File "/workspace/django__django__4.1/django/db/models/base.py", line 904, in _save_table
+    results = self._do_insert(cls._base_manager, using, fields, returning_fields, raw)
+  File "/workspace/django__django__4.1/django/db/models/base.py", line 942, in _do_insert
+    return manager._insert(
+  File "/workspace/django__django__4.1/django/db/models/manager.py", line 85, in manager_method
+    return getattr(self.get_queryset(), name)(*args, **kwargs)
+  File "/workspace/django__django__4.1/django/db/models/query.py", line 1306, in _insert
+    return query.get_compiler(using=using).execute_sql(returning_fields)
+  File "/workspace/django__django__4.1/django/db/models/sql/compiler.py", line 1450, in execute_sql
+    cursor.execute(sql, params)
+  File "/workspace/django__django__4.1/django/db/backends/utils.py", line 99, in execute
+    return super().execute(sql, params)
+  File "/workspace/django__django__4.1/django/db/backends/utils.py", line 67, in execute
+    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
+  File "/workspace/django__django__4.1/django/db/backends/utils.py", line 76, in _execute_with_wrappers
+    return executor(sql, params, many, context)
+  File "/workspace/django__django__4.1/django/db/backends/utils.py", line 85, in _execute
+    return self.cursor.execute(sql, params)
+  File "/workspace/django__django__4.1/django/db/utils.py", line 90, in __exit__
+    raise dj_exc_value.with_traceback(traceback) from exc_value
+  File "/workspace/django__django__4.1/django/db/backends/utils.py", line 85, in _execute
+    return self.cursor.execute(sql, params)
+  File "/workspace/django__django__4.1/django/db/backends/sqlite3/base.py", line 420, in execute
+    return Database.Cursor.execute(self, query, params)
+django.db.utils.OperationalError: database is locked
diff --git a/test.db b/test.db
new file mode 100644
index 0000000000..885552a7be
Binary files /dev/null and b/test.db differ
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/admin.py b/testapp/admin.py
new file mode 100644
index 0000000000..cfa4bb2966
--- /dev/null
+++ b/testapp/admin.py
@@ -0,0 +1,7 @@
+from django.contrib import admin
+from .models import Client, ClientOffice
+
+class ClientAdmin(admin.ModelAdmin):
+    search_fields = ('name', 'name2', 'contact_person', 'clientoffice__name', 'clientoffice__name2')
+
+admin.site.register(Client, ClientAdmin)
\ No newline at end of file
diff --git a/testapp/migrations/0001_initial.py b/testapp/migrations/0001_initial.py
new file mode 100644
index 0000000000..8c83bb043e
--- /dev/null
+++ b/testapp/migrations/0001_initial.py
@@ -0,0 +1,33 @@
+# Generated by Django 4.1.dev20211214191944 on 2024-10-29 01:00
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Client',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=256, verbose_name='name')),
+                ('name2', models.CharField(blank=True, max_length=256, null=True, verbose_name='unofficial or obsolete name')),
+                ('contact_person', models.CharField(blank=True, max_length=256, null=True, verbose_name='contact person')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='ClientOffice',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=256, verbose_name='name')),
+                ('name2', models.CharField(blank=True, max_length=256, null=True, verbose_name='unofficial or obsolete name')),
+                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='testapp.client', verbose_name='client')),
+            ],
+        ),
+    ]
diff --git a/testapp/migrations/__init__.py b/testapp/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..824b4731f9
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,18 @@
+from django.db import models
+from django.utils.translation import gettext_lazy as _
+
+class Client(models.Model):
+    name = models.CharField(_('name'), max_length=256)
+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)
+    contact_person = models.CharField(_('contact person'), max_length=256, blank=True, null=True)
+
+    def __str__(self):
+        return self.name
+
+class ClientOffice(models.Model):
+    name = models.CharField(_('name'), max_length=256)
+    name2 = models.CharField(_('unofficial or obsolete name'), max_length=256, blank=True, null=True)
+    client = models.ForeignKey(Client, verbose_name=_('client'), on_delete=models.CASCADE)
+
+    def __str__(self):
+        return self.name
\ No newline at end of file
diff --git a/tests/__init__.py b/tests/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
