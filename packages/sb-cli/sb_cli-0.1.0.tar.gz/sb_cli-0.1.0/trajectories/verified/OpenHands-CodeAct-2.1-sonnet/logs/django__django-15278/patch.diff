diff --git a/django/db/backends/sqlite3/schema.py b/django/db/backends/sqlite3/schema.py
index 6752a8e3c0..6c12e12195 100644
--- a/django/db/backends/sqlite3/schema.py
+++ b/django/db/backends/sqlite3/schema.py
@@ -326,8 +326,12 @@ class DatabaseSchemaEditor(BaseDatabaseSchemaEditor):
         """Create a field on a model."""
         # Fields with default values cannot by handled by ALTER TABLE ADD
         # COLUMN statement because DROP DEFAULT is not supported in
-        # ALTER TABLE.
-        if not field.null or self.effective_default(field) is not None:
+        # ALTER TABLE. Also, fields with UNIQUE constraint cannot be
+        # added with ALTER TABLE on SQLite.
+        if (not field.null or
+            self.effective_default(field) is not None or
+            field.unique or
+            field.one_to_one):
             self._remake_table(model, create_field=field)
         else:
             super().add_field(model, field)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..1e7d1d172f
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,70 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+from django.db import models, migrations, connection
+from django.db.migrations.executor import MigrationExecutor
+
+# Configure test settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+
+    )
+    django.setup()
+
+# Create test models
+class RefreshToken(models.Model):
+    class Meta:
+        app_label = 'testapp'
+
+class AccessToken(models.Model):
+    class Meta:
+        app_label = 'testapp'
+    source_refresh_token = models.OneToOneField(
+        RefreshToken,
+        on_delete=models.SET_NULL,
+        null=True,
+        blank=True,
+        related_name='refreshed_access_token'
+    )
+
+# Create and run migration
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='RefreshToken',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.CreateModel(
+            name='AccessToken',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+        ),
+        migrations.AddField(
+            model_name='AccessToken',
+            name='source_refresh_token',
+            field=models.OneToOneField(
+                blank=True,
+                null=True,
+                on_delete=django.db.models.deletion.SET_NULL,
+                to='__main__.RefreshToken',
+                related_name='refreshed_access_token'
+            ),
+        ),
+    ]
+
+# Run migration
+executor = MigrationExecutor(connection)
diff --git a/reproduce2.py b/reproduce2.py
new file mode 100644
index 0000000000..7f9663f491
--- /dev/null
+++ b/reproduce2.py
@@ -0,0 +1,40 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+from django.db import models, connection
+
+# Configure test settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+    )
+    django.setup()
+
+# Create tables directly using SQL
+with connection.cursor() as cursor:
+    # Create tables
+    cursor.execute('''
+        CREATE TABLE oauth2_provider_refreshtoken (
+            id INTEGER PRIMARY KEY AUTOINCREMENT
+        )
+    ''')
+    cursor.execute('''
+        CREATE TABLE oauth2_provider_accesstoken (
+            id INTEGER PRIMARY KEY AUTOINCREMENT
+        )
+    ''')
+    
+    # Try to add the OneToOneField column
+    cursor.execute('''
+        ALTER TABLE oauth2_provider_accesstoken 
+        ADD COLUMN source_refresh_token_id bigint NULL UNIQUE 
+        REFERENCES oauth2_provider_refreshtoken (id) 
+        DEFERRABLE INITIALLY DEFERRED
+    ''')
\ No newline at end of file
diff --git a/reproduce3.py b/reproduce3.py
new file mode 100644
index 0000000000..f345ab5ddd
--- /dev/null
+++ b/reproduce3.py
@@ -0,0 +1,73 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+from django.db import models, migrations, connection
+from django.db.migrations.executor import MigrationExecutor
+from django.db.migrations.state import ProjectState
+
+# Configure test settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+    )
+    django.setup()
+
+# Create initial migration
+class Migration1(migrations.Migration):
+    initial = True
+    operations = [
+        migrations.CreateModel(
+            name='RefreshToken',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+            options={'db_table': 'oauth2_provider_refreshtoken'},
+        ),
+        migrations.CreateModel(
+            name='AccessToken',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+            ],
+            options={'db_table': 'oauth2_provider_accesstoken'},
+        ),
+    ]
+
+# Create second migration that adds the OneToOneField
+class Migration2(migrations.Migration):
+    dependencies = [('testapp', '0001_initial')]
+    operations = [
+        migrations.AddField(
+            model_name='AccessToken',
+            name='source_refresh_token',
+            field=models.OneToOneField(
+                blank=True,
+                null=True,
+                on_delete=django.db.models.deletion.SET_NULL,
+                to='testapp.RefreshToken',
+                related_name='refreshed_access_token'
+            ),
+        ),
+    ]
+
+# Run migrations
+executor = MigrationExecutor(connection)
+executor.loader.project_state = ProjectState()
+executor.loader.applied_migrations = set()
+
+# Add migrations to loader
+Migration1.app_label = 'testapp'
+Migration2.app_label = 'testapp'
+executor.loader.graph.add_node(('testapp', '0001_initial'), Migration1)
+executor.loader.graph.add_node(('testapp', '0002_add_onetoone'), Migration2)
+executor.loader.graph.add_dependency(('testapp', '0002_add_onetoone'), ('testapp', '0001_initial'), ('testapp', '0001_initial'))
+
+# Run migrations
+executor.migrate([('testapp', '0002_add_onetoone')])
+print("Migrations completed successfully!")
\ No newline at end of file
diff --git a/reproduce4.py b/reproduce4.py
new file mode 100644
index 0000000000..3d3a145ce9
--- /dev/null
+++ b/reproduce4.py
@@ -0,0 +1,51 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+from django.db import models, connection
+from django.db.backends.sqlite3.schema import DatabaseSchemaEditor
+
+# Configure test settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+    )
+    django.setup()
+
+# Create test models
+class RefreshToken(models.Model):
+    class Meta:
+        app_label = 'testapp'
+        db_table = 'oauth2_provider_refreshtoken'
+
+class AccessToken(models.Model):
+    source_refresh_token = models.OneToOneField(
+        RefreshToken,
+        on_delete=models.SET_NULL,
+        null=True,
+        blank=True,
+        related_name='refreshed_access_token'
+    )
+    class Meta:
+        app_label = 'testapp'
+        db_table = 'oauth2_provider_accesstoken'
+
+# Create tables and add field
+with connection.schema_editor() as schema_editor:
+    # Create tables
+    schema_editor.create_model(RefreshToken)
+    schema_editor.create_model(AccessToken)
+
+print("Tables created successfully!")
+
+# Verify schema
+with connection.cursor() as cursor:
+    cursor.execute("SELECT sql FROM sqlite_master WHERE type='table' AND name='oauth2_provider_accesstoken'")
+    print("\nAccessToken table schema:")
+    print(cursor.fetchone()[0])
\ No newline at end of file
