diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..3c6142a0
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,13 @@
+import numpy as np
+import xarray as xr
+
+# Create test data as shown in the PR description
+da = xr.DataArray(np.arange(24), dims=["time"])
+da = da.assign_coords(day=365 * da)
+ds = da.to_dataset(name="T")
+
+print("Original dataset:")
+print(ds)
+print("\nAfter coarsen.construct:")
+result = ds.coarsen(time=12).construct(time=("year", "month"))
+print(result)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..b61380ab
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,37 @@
+import numpy as np
+import xarray as xr
+
+# Test case 1: Multiple coordinates
+print("Test case 1: Multiple coordinates")
+da = xr.DataArray(np.arange(24), dims=["time"])
+da = da.assign_coords(day=365 * da)
+da = da.assign_coords(hour=24 * da)  # Add another coordinate
+ds = da.to_dataset(name="T")
+print("\nOriginal dataset:")
+print(ds)
+print("\nAfter coarsen.construct:")
+result = ds.coarsen(time=12).construct(time=("year", "month"))
+print(result)
+
+# Test case 2: Coordinate with multiple dimensions
+print("\nTest case 2: Coordinate with multiple dimensions")
+da = xr.DataArray(np.arange(24).reshape(4, 6), dims=["x", "y"])
+da = da.assign_coords(pos=(("x", "y"), np.arange(24).reshape(4, 6)))
+ds = da.to_dataset(name="T")
+print("\nOriginal dataset:")
+print(ds)
+print("\nAfter coarsen.construct:")
+result = ds.coarsen(x=2, y=2).construct(x=("x1", "x2"), y=("y1", "y2"))
+print(result)
+
+# Test case 3: Mixed coordinates (some coarsened, some not)
+print("\nTest case 3: Mixed coordinates (some coarsened, some not)")
+da = xr.DataArray(np.arange(24), dims=["time"])
+da = da.assign_coords(day=365 * da)
+da = da.assign_coords(fixed="constant")  # Add a scalar coordinate
+ds = da.to_dataset(name="T")
+print("\nOriginal dataset:")
+print(ds)
+print("\nAfter coarsen.construct:")
+result = ds.coarsen(time=12).construct(time=("year", "month"))
+print(result)
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index c194ec08..e6ef2ffd 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -961,7 +961,9 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
 
         reshaped.attrs = obj.attrs if keep_attrs else {}
 
-        for key, var in obj.variables.items():
+        # First handle coordinates to ensure they stay as coordinates
+        for key in obj.coords:
+            var = obj.variables[key]
             reshaped_dims = tuple(
                 itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)])
             )
@@ -973,8 +975,22 @@ class Coarsen(CoarsenArithmetic, Generic[T_Xarray]):
             else:
                 reshaped[key] = var
 
-        should_be_coords = set(window_dim) & set(self.obj.coords)
-        result = reshaped.set_coords(should_be_coords)
+        # Then handle non-coordinate variables
+        for key in set(obj.variables) - set(obj.coords):
+            var = obj.variables[key]
+            reshaped_dims = tuple(
+                itertools.chain(*[window_dim.get(dim, [dim]) for dim in list(var.dims)])
+            )
+            if reshaped_dims != var.dims:
+                windows = {w: self.windows[w] for w in window_dim if w in var.dims}
+                reshaped_var, _ = var.coarsen_reshape(windows, self.boundary, self.side)
+                attrs = var.attrs if keep_attrs else {}
+                reshaped[key] = (reshaped_dims, reshaped_var, attrs)
+            else:
+                reshaped[key] = var
+
+        # Set all original coordinates as coordinates in the new dataset
+        result = reshaped.set_coords(obj.coords)
         if isinstance(self.obj, DataArray):
             return self.obj._from_temp_dataset(result)
         else:
