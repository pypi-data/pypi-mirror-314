diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..483e4e57
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,32 @@
+import xarray as xr
+import numpy as np
+
+def test_case(data, name):
+    print(f"\n=== Test case: {name} ===")
+    print("Array:")
+    print(data)
+    
+    for min_count in [1, 2, 5, 6]:
+        try:
+            result = data.sum(["dim_0", "dim_1"], min_count=min_count)
+            print(f"\nResult with min_count={min_count}:")
+            print(result)
+        except Exception as e:
+            print(f"\nError with min_count={min_count}:")
+            print(str(e))
+
+# Test case 1: Original array with some NaNs
+da1 = xr.DataArray([[1., 2, np.nan], [4, np.nan, 6]])
+test_case(da1, "Some NaNs")
+
+# Test case 2: All NaNs
+da2 = xr.DataArray([[np.nan, np.nan], [np.nan, np.nan]])
+test_case(da2, "All NaNs")
+
+# Test case 3: No NaNs
+da3 = xr.DataArray([[1., 2], [3, 4]])
+test_case(da3, "No NaNs")
+
+# Test case 4: Single valid value
+da4 = xr.DataArray([[np.nan, np.nan], [np.nan, 1.0]])
+test_case(da4, "Single valid value")
\ No newline at end of file
diff --git a/xarray/core/nanops.py b/xarray/core/nanops.py
index 41c8d258..b637045d 100644
--- a/xarray/core/nanops.py
+++ b/xarray/core/nanops.py
@@ -25,22 +25,36 @@ def _replace_nan(a, val):
 def _maybe_null_out(result, axis, mask, min_count=1):
     """
     xarray version of pandas.core.nanops._maybe_null_out
+    
+    Parameters
+    ----------
+    result : array-like
+        The result of the reduction operation
+    axis : int, tuple of int, or None
+        Axis or axes along which the reduction was performed
+    mask : array-like
+        Boolean mask where True indicates NaN values
+    min_count : int, optional
+        Minimum number of valid (non-NaN) values required for a non-NaN result
     """
-    if hasattr(axis, "__len__"):  # if tuple or list
-        raise ValueError(
-            "min_count is not available for reduction with more than one dimensions."
-        )
-
     if axis is not None and getattr(result, "ndim", False):
-        null_mask = (mask.shape[axis] - mask.sum(axis) - min_count) < 0
+        # Case 1: Result has dimensions (reduction along specific axes)
+        if hasattr(axis, "__len__"):  # Multiple axes
+            valid_elements = (~mask).sum(axis=axis)  # Count non-NaN elements
+        else:  # Single axis
+            valid_elements = (~mask).sum(axis=axis)  # Count non-NaN elements
+        
+        # Set result to NaN where valid elements are less than min_count
+        null_mask = valid_elements < min_count
         if null_mask.any():
             dtype, fill_value = dtypes.maybe_promote(result.dtype)
             result = result.astype(dtype)
             result[null_mask] = fill_value
 
-    elif getattr(result, "dtype", None) not in dtypes.NAT_TYPES:
-        null_mask = mask.size - mask.sum()
-        if null_mask < min_count:
+    else:
+        # Case 2: Result is a scalar (reduction along all axes)
+        valid_elements = (~mask).sum()  # Count total non-NaN elements
+        if valid_elements < min_count:
             result = np.nan
 
     return result
@@ -109,12 +123,28 @@ def nanargmax(a, axis=None):
 
 
 def nansum(a, axis=None, dtype=None, out=None, min_count=None):
+    """
+    Return the sum of array elements over a given axis treating Not a Numbers (NaNs) as zero.
+    
+    Parameters
+    ----------
+    a : array_like
+        Array containing numbers whose sum is desired.
+    axis : int, tuple of int, or None, optional
+        Axis or axes along which the sum is computed.
+    dtype : dtype, optional
+        The type of the returned array and of the accumulator in which the elements are summed.
+    out : ndarray, optional
+        Alternative output array.
+    min_count : int, optional
+        Minimum number of valid (non-NaN) values required for a non-NaN result.
+        If fewer than min_count valid values are present, NaN is returned.
+    """
     a, mask = _replace_nan(a, 0)
     result = _dask_or_eager_func("sum")(a, axis=axis, dtype=dtype)
     if min_count is not None:
         return _maybe_null_out(result, axis, mask, min_count)
-    else:
-        return result
+    return result
 
 
 def _nanmean_ddof_object(ddof, value, axis=None, dtype=None, **kwargs):
