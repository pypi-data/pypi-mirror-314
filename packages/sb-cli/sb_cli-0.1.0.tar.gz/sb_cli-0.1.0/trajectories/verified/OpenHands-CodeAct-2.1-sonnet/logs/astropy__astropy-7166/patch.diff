diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py
index de3fb01d18..e1f23bdeb3 100644
--- a/astropy/utils/misc.py
+++ b/astropy/utils/misc.py
@@ -528,13 +528,21 @@ class InheritDocstrings(type):
                 not key.startswith('_'))
 
         for key, val in dct.items():
-            if (inspect.isfunction(val) and
+            # Handle both functions and properties
+            if ((inspect.isfunction(val) or isinstance(val, property)) and
                 is_public_member(key) and
-                val.__doc__ is None):
+                (val.__doc__ is None or 
+                 (isinstance(val, property) and val.fget.__doc__ is None))):
                 for base in cls.__mro__[1:]:
                     super_method = getattr(base, key, None)
                     if super_method is not None:
-                        val.__doc__ = super_method.__doc__
+                        if isinstance(val, property):
+                            # For properties, we need to set the docstring on both
+                            # the property object and its getter function
+                            val.__doc__ = super_method.__doc__
+                            val.fget.__doc__ = super_method.__doc__
+                        else:
+                            val.__doc__ = super_method.__doc__
                         break
 
         super().__init__(name, bases, dct)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..7b7a77f7ab
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,16 @@
+from astropy.utils.misc import InheritDocstrings
+
+class A(metaclass=InheritDocstrings):
+    @property
+    def value(self):
+        """This is the value docstring"""
+        return 42
+
+class B(A):
+    @property 
+    def value(self):
+        # This property should inherit the docstring from A.value but doesn't
+        return 43
+
+print("A.value docstring:", A.value.__doc__)
+print("B.value docstring:", B.value.__doc__)
\ No newline at end of file
diff --git a/reproduce_debug.py b/reproduce_debug.py
new file mode 100644
index 0000000000..446f30083d
--- /dev/null
+++ b/reproduce_debug.py
@@ -0,0 +1,17 @@
+from astropy.utils.misc import InheritDocstrings
+
+class A(metaclass=InheritDocstrings):
+    @property
+    def value(self):
+        """This is the value docstring"""
+        return 42
+
+class B(A):
+    @property 
+    def value(self):
+        # This property should inherit the docstring from A.value but doesn't
+        return 43
+
+print("A.value docstring:", A.value.__doc__)
+print("B.value docstring:", B.value.__doc__)
+print("B.value.fget.__doc__:", B.value.fget.__doc__)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..f78118cb10
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,72 @@
+from astropy.utils.misc import InheritDocstrings
+
+# Test case 1: Multiple inheritance
+class A1(metaclass=InheritDocstrings):
+    @property
+    def value(self):
+        """A1 value docstring"""
+        return 1
+
+class A2(metaclass=InheritDocstrings):
+    @property
+    def value(self):
+        """A2 value docstring"""
+        return 2
+
+class B(A1, A2):
+    @property
+    def value(self):
+        return 3
+
+# Test case 2: Property with explicit docstring shouldn't be overridden
+class C(A1):
+    @property
+    def value(self):
+        """C value docstring"""
+        return 4
+
+# Test case 3: Regular methods still work
+class D(metaclass=InheritDocstrings):
+    def method(self):
+        """D method docstring"""
+        pass
+
+class E(D):
+    def method(self):
+        pass
+
+# Test case 4: Property with setter
+class F(metaclass=InheritDocstrings):
+    @property
+    def value(self):
+        """F value docstring"""
+        return self._value
+
+    @value.setter
+    def value(self, val):
+        self._value = val
+
+class G(F):
+    @property
+    def value(self):
+        return self._value
+
+    @value.setter
+    def value(self, val):
+        self._value = val
+
+print("Test case 1 - Multiple inheritance:")
+print("A1.value docstring:", A1.value.__doc__)
+print("A2.value docstring:", A2.value.__doc__)
+print("B.value docstring:", B.value.__doc__)  # Should inherit from A1
+
+print("\nTest case 2 - Explicit docstring:")
+print("C.value docstring:", C.value.__doc__)  # Should keep its own docstring
+
+print("\nTest case 3 - Regular methods:")
+print("D.method docstring:", D.method.__doc__)
+print("E.method docstring:", E.method.__doc__)
+
+print("\nTest case 4 - Property with setter:")
+print("F.value docstring:", F.value.__doc__)
+print("G.value docstring:", G.value.__doc__)
\ No newline at end of file
