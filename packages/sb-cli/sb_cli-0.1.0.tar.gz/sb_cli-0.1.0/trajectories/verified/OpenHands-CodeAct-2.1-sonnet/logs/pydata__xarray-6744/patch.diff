diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..ecc8e4b2
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,15 @@
+import xarray as xr
+import numpy as np
+
+my_data = xr.DataArray(np.arange(1,10), dims="x")
+
+# Option 1: take a center-justified rolling average
+result1 = my_data.rolling(x=3, center=True).mean().values
+print("Result 1 (direct rolling mean):")
+print(result1)
+
+# Option 2: try to manually iterate, but the result is not centered
+my_data_rolling = my_data.rolling(x=3, center=True)
+result2 = [window.mean().values.item() for label, window in my_data_rolling]
+print("\nResult 2 (manual iteration):")
+print(result2)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..e799e480
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,34 @@
+import xarray as xr
+import numpy as np
+
+def test_case(data, window_size, center, min_periods=None):
+    print(f"\nTest case: window_size={window_size}, center={center}, min_periods={min_periods}")
+    print("Data:", data.values)
+    
+    # Direct rolling
+    result1 = data.rolling(x=window_size, center=center, min_periods=min_periods).mean().values
+    print("Direct rolling:", result1)
+    
+    # Manual iteration
+    data_rolling = data.rolling(x=window_size, center=center, min_periods=min_periods)
+    result2 = [window.mean().values.item() for label, window in data_rolling]
+    print("Manual iteration:", result2)
+    
+    # Check if results match
+    print("Results match:", np.allclose(result1, result2, equal_nan=True))
+
+# Test case 1: Even window size
+data = xr.DataArray(np.arange(1, 7), dims="x")
+test_case(data, window_size=4, center=True)
+
+# Test case 2: Small array, large window
+data = xr.DataArray(np.arange(1, 4), dims="x")
+test_case(data, window_size=5, center=True)
+
+# Test case 3: Custom min_periods
+data = xr.DataArray(np.arange(1, 6), dims="x")
+test_case(data, window_size=3, center=True, min_periods=1)
+
+# Test case 4: Single element array with valid window size
+data = xr.DataArray([1], dims="x")
+test_case(data, window_size=1, center=True)
\ No newline at end of file
diff --git a/xarray/core/rolling.py b/xarray/core/rolling.py
index aef290f6..4e518c1d 100644
--- a/xarray/core/rolling.py
+++ b/xarray/core/rolling.py
@@ -270,15 +270,30 @@ class DataArrayRolling(Rolling["DataArray"]):
     def __iter__(self) -> Iterator[tuple[RollingKey, DataArray]]:
         if self.ndim > 1:
             raise ValueError("__iter__ is only supported for 1d-rolling")
-        stops = np.arange(1, len(self.window_labels) + 1)
-        starts = stops - int(self.window[0])
-        starts[: int(self.window[0])] = 0
+        
+        window_size = int(self.window[0])
+        n = len(self.window_labels)
+        
+        if self.center[0]:
+            # For centered windows, adjust start/stop to center the window
+            radius = window_size // 2
+            starts = np.arange(n) - radius
+            stops = starts + window_size
+            # Handle edge cases
+            starts = np.maximum(starts, 0)
+            stops = np.minimum(stops, n)
+        else:
+            # Original behavior for non-centered windows
+            stops = np.arange(1, n + 1)
+            starts = stops - window_size
+            starts[: window_size] = 0
+            
         for (label, start, stop) in zip(self.window_labels, starts, stops):
             window = self.obj.isel({self.dim[0]: slice(start, stop)})
-
+            
             counts = window.count(dim=self.dim[0])
             window = window.where(counts >= self.min_periods)
-
+            
             yield (label, window)
 
     def construct(
