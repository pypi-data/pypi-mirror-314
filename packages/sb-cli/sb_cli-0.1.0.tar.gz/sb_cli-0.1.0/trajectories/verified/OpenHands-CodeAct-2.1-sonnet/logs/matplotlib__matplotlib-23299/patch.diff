diff --git a/lib/matplotlib/__init__.py b/lib/matplotlib/__init__.py
index c268a56724..f03cd45b62 100644
--- a/lib/matplotlib/__init__.py
+++ b/lib/matplotlib/__init__.py
@@ -674,7 +674,12 @@ class RcParams(MutableMapping, dict):
             val = dict.__getitem__(self, key)
             if val is rcsetup._auto_backend_sentinel:
                 from matplotlib import pyplot as plt
+                # Store existing figures before switching backend
+                from matplotlib._pylab_helpers import Gcf
+                old_figs = Gcf.figs.copy()
                 plt.switch_backend(rcsetup._auto_backend_sentinel)
+                # Restore figures after backend switch
+                Gcf.figs.update(old_figs)
 
         return dict.__getitem__(self, key)
 
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..4a74c6747d
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,14 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+# fig1 = plt.figure()  # <- UNCOMMENT THIS LINE AND IT WILL WORK
+# plt.ion()            # <- ALTERNATIVELY, UNCOMMENT THIS LINE AND IT WILL ALSO WORK
+with rc_context():
+    fig2 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+print("Before:", before)
+print("After:", after)
+assert before == after, '\n' + before + '\n' + after
\ No newline at end of file
diff --git a/test_interactive.py b/test_interactive.py
new file mode 100644
index 0000000000..20c9606579
--- /dev/null
+++ b/test_interactive.py
@@ -0,0 +1,19 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+plt.ion()  # Enable interactive mode
+with rc_context():
+    fig1 = plt.figure()
+    before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+    get_backend()
+    after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+print("Before:", before)
+print("After:", after)
+assert before == after, '\n' + before + '\n' + after
+
+# Test that we can still close figures
+plt.close(fig1)
+remaining = f'{plt._pylab_helpers.Gcf.figs!r}'
+print("After closing fig1:", remaining)
+assert len(plt._pylab_helpers.Gcf.figs) == 0, "Should have no figures remaining"
\ No newline at end of file
diff --git a/test_multiple_figs.py b/test_multiple_figs.py
new file mode 100644
index 0000000000..b9eca1e369
--- /dev/null
+++ b/test_multiple_figs.py
@@ -0,0 +1,20 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+with rc_context():
+    fig1 = plt.figure()
+    fig2 = plt.figure()
+    fig3 = plt.figure()
+before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+get_backend()
+after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+print("Before:", before)
+print("After:", after)
+assert before == after, '\n' + before + '\n' + after
+
+# Test that we can still close figures
+plt.close(fig2)
+remaining = f'{plt._pylab_helpers.Gcf.figs!r}'
+print("After closing fig2:", remaining)
+assert len(plt._pylab_helpers.Gcf.figs) == 2, "Should have 2 figures remaining"
\ No newline at end of file
diff --git a/test_nested_contexts.py b/test_nested_contexts.py
new file mode 100644
index 0000000000..a924a53421
--- /dev/null
+++ b/test_nested_contexts.py
@@ -0,0 +1,20 @@
+import matplotlib.pyplot as plt
+from matplotlib import get_backend, rc_context
+
+with rc_context():
+    fig1 = plt.figure()
+    with rc_context():
+        fig2 = plt.figure()
+        before = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+        get_backend()
+        after = f'{id(plt._pylab_helpers.Gcf)} {plt._pylab_helpers.Gcf.figs!r}'
+
+print("Before:", before)
+print("After:", after)
+assert before == after, '\n' + before + '\n' + after
+
+# Test that we can still close figures
+plt.close(fig2)
+remaining = f'{plt._pylab_helpers.Gcf.figs!r}'
+print("After closing fig2:", remaining)
+assert len(plt._pylab_helpers.Gcf.figs) == 1, "Should have 1 figure remaining"
\ No newline at end of file
