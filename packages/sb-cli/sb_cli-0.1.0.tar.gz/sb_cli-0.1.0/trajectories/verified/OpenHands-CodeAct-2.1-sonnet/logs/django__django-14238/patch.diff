diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 0f53d9c30b..0567dd8ec2 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -2524,7 +2524,11 @@ class AutoFieldMeta(type):
         return isinstance(instance, self._subclasses) or super().__instancecheck__(instance)
 
     def __subclasscheck__(self, subclass):
-        return subclass in self._subclasses or super().__subclasscheck__(subclass)
+        return (
+            subclass in self._subclasses or
+            any(issubclass(subclass, cls) for cls in self._subclasses) or
+            super().__subclasscheck__(subclass)
+        )
 
 
 class AutoField(AutoFieldMixin, IntegerField, metaclass=AutoFieldMeta):
diff --git a/example/core/__init__.py b/example/core/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/example/core/models.py b/example/core/models.py
new file mode 100644
index 0000000000..ab53872f82
--- /dev/null
+++ b/example/core/models.py
@@ -0,0 +1,19 @@
+from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+class MyNestedBigAutoField(MyBigAutoField):
+    pass
+
+class MyModel1(models.Model):
+    id = MyBigAutoField(primary_key=True)
+
+class MyModel2(models.Model):
+    id = MySmallAutoField(primary_key=True)
+
+class MyModel3(models.Model):
+    id = MyNestedBigAutoField(primary_key=True)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..565b5c5e67
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,37 @@
+from django.conf import settings
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'example.core',
+    ],
+    DEFAULT_AUTO_FIELD='example.core.models.MyBigAutoField'
+)
+
+# Create example app structure
+import os
+os.makedirs('example/core', exist_ok=True)
+with open('example/core/__init__.py', 'w') as f:
+    f.write('')
+
+# Create models.py with the example code
+with open('example/core/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MyModel(models.Model):
+    pass
+''')
+
+# Try to setup Django
+import django
+django.setup()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6bf2acaebb
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,59 @@
+from django.conf import settings
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'example.core',
+    ]
+)
+
+# Create example app structure
+import os
+os.makedirs('example/core', exist_ok=True)
+with open('example/core/__init__.py', 'w') as f:
+    f.write('')
+
+# Test different field inheritance scenarios
+with open('example/core/models.py', 'w') as f:
+    f.write('''from django.db import models
+
+class MyBigAutoField(models.BigAutoField):
+    pass
+
+class MySmallAutoField(models.SmallAutoField):
+    pass
+
+class MyNestedBigAutoField(MyBigAutoField):
+    pass
+
+class MyModel1(models.Model):
+    id = MyBigAutoField(primary_key=True)
+
+class MyModel2(models.Model):
+    id = MySmallAutoField(primary_key=True)
+
+class MyModel3(models.Model):
+    id = MyNestedBigAutoField(primary_key=True)
+''')
+
+# Try to setup Django
+import django
+django.setup()
+
+# Test issubclass relationships
+from example.core.models import (
+    MyBigAutoField, MySmallAutoField, MyNestedBigAutoField
+)
+from django.db.models import AutoField
+
+print("Testing issubclass relationships:")
+print(f"issubclass(MyBigAutoField, AutoField) = {issubclass(MyBigAutoField, AutoField)}")
+print(f"issubclass(MySmallAutoField, AutoField) = {issubclass(MySmallAutoField, AutoField)}")
+print(f"issubclass(MyNestedBigAutoField, AutoField) = {issubclass(MyNestedBigAutoField, AutoField)}")
\ No newline at end of file
