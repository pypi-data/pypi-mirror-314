diff --git a/sphinx/config.py b/sphinx/config.py
index 353268e38..7ce51ffd1 100644
--- a/sphinx/config.py
+++ b/sphinx/config.py
@@ -361,13 +361,23 @@ def convert_source_suffix(app: "Sphinx", config: Config) -> None:
 
 def init_numfig_format(app: "Sphinx", config: Config) -> None:
     """Initialize :confval:`numfig_format`."""
-    numfig_format = {'section': _('Section %s'),
-                     'figure': _('Fig. %s'),
-                     'table': _('Table %s'),
-                     'code-block': _('Listing %s')}
+    # Get the translator for the current language
+    from sphinx.locale import get_translator
+    translator = get_translator('sphinx')
+
+    # Initialize with default values
+    numfig_format = {'section': 'Section %s',
+                     'figure': 'Fig. %s',
+                     'table': 'Table %s',
+                     'code-block': 'Listing %s'}
 
     # override default labels by configuration
     numfig_format.update(config.numfig_format)
+
+    # Apply translations to all values
+    for key in numfig_format:
+        numfig_format[key] = translator.gettext(numfig_format[key])
+
     config.numfig_format = numfig_format  # type: ignore
 
 
diff --git a/sphinx/locale/__init__.py b/sphinx/locale/__init__.py
index 385ca3566..3aa1d9b35 100644
--- a/sphinx/locale/__init__.py
+++ b/sphinx/locale/__init__.py
@@ -127,17 +127,35 @@ def init(locale_dirs: List[str], language: str,
     else:
         languages = [language]
 
-    # loading
-    for dir_ in locale_dirs:
+    # First try custom locale directories (non-None entries)
+    custom_dirs = [dir_ for dir_ in locale_dirs if dir_ is not None]
+    for dir_ in custom_dirs:
         try:
             trans = gettext.translation(catalog, localedir=dir_, languages=languages)
             if translator is None:
                 translator = trans
             else:
+                # Add custom translations as primary, not fallback
+                new_translator = trans
+                new_translator.add_fallback(translator)
+                translator = new_translator
+        except Exception:
+            # Language couldn't be found in the specified path
+            pass
+
+    # Then try system locale directory (None entry)
+    if None in locale_dirs:
+        try:
+            trans = gettext.translation(catalog, languages=languages)
+            if translator is None:
+                translator = trans
+            else:
+                # Add system translations as fallback
                 translator.add_fallback(trans)
         except Exception:
             # Language couldn't be found in the specified path
             pass
+
     # guarantee translators[(namespace, catalog)] exists
     if translator is None:
         translator = NullTranslations()
diff --git a/sphinx/util/i18n.py b/sphinx/util/i18n.py
index 41407f4e1..02a06f057 100644
--- a/sphinx/util/i18n.py
+++ b/sphinx/util/i18n.py
@@ -90,9 +90,17 @@ class CatalogRepository:
         if not self.language:
             return
 
+        # First check custom locale directories
         for locale_dir in self._locale_dirs:
-            locale_dir = path.join(self.basedir, locale_dir)
-            if path.exists(path.join(locale_dir, self.language, 'LC_MESSAGES')):
+            if locale_dir:  # Skip None which represents system locale dir
+                locale_dir = path.join(self.basedir, locale_dir)
+                messages_dir = path.join(locale_dir, self.language, 'LC_MESSAGES')
+                if path.exists(messages_dir):
+                    yield locale_dir
+
+        # Then check system locale directories
+        for locale_dir in self._locale_dirs:
+            if not locale_dir:  # Only process None which represents system locale dir
                 yield locale_dir
 
     @property
diff --git a/test_locale_override.py b/test_locale_override.py
new file mode 100644
index 000000000..e7d8cd2e3
--- /dev/null
+++ b/test_locale_override.py
@@ -0,0 +1,170 @@
+import os
+import shutil
+import subprocess
+import tempfile
+import warnings
+from contextlib import contextmanager
+from pathlib import Path
+import logging
+
+from sphinx.application import Sphinx
+from sphinx.deprecation import RemovedInSphinx40Warning
+from sphinx.util import logging as sphinx_logging
+from babel.messages.mofile import write_mo
+from babel.messages.pofile import read_po
+
+# Patch the WarningIsErrorFilter to ignore meta node warnings
+from sphinx.util.logging import WarningIsErrorFilter
+
+original_filter = WarningIsErrorFilter.filter
+
+def patched_filter(self, record):
+    if 'node class' in str(record.msg) and 'is already registered' in str(record.msg):
+        return True
+    return original_filter(self, record)
+
+WarningIsErrorFilter.filter = patched_filter
+
+def test_locale_override():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Create source directory
+        srcdir = Path(tmpdir) / 'src'
+        srcdir.mkdir()
+
+        # Create conf.py
+        with open(srcdir / 'conf.py', 'w') as f:
+            f.write('''
+project = 'Test'
+language = 'da'
+locale_dirs = ['locale']
+numfig = True
+''')
+
+        # Create dummy image file
+        with open(srcdir / 'img.png', 'wb') as f:
+            f.write(b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x06\x00\x00\x00\x1f\x15\xc4\x89\x00\x00\x00\nIDATx\x9cc\x00\x00\x00\x02\x00\x01\xe5\x27\xde\xfc\x00\x00\x00\x00IEND\xaeB`\x82')
+
+        # Create index.rst
+        with open(srcdir / 'index.rst', 'w') as f:
+            f.write('''
+Test Document
+=============
+
+.. figure:: img.png
+   :alt: Test image
+
+   Test caption
+
+.. code-block:: python
+   :caption: Test code
+
+   print("Hello world")
+''')
+
+        # Create locale directory with custom Danish translations
+        locale_dir = srcdir / 'locale' / 'da' / 'LC_MESSAGES'
+        locale_dir.mkdir(parents=True, exist_ok=True)
+        with open(locale_dir / 'sphinx.po', 'w') as f:
+            f.write('''
+msgid ""
+msgstr ""
+"Project-Id-Version: Sphinx\\n"
+"Report-Msgid-Bugs-To: \\n"
+"POT-Creation-Date: 2019-07-24 17:11+0200\\n"
+"PO-Revision-Date: 2019-07-24 17:11+0200\\n"
+"Last-Translator: Test <test@test.com>\\n"
+"Language-Team: Danish\\n"
+"MIME-Version: 1.0\\n"
+"Content-Type: text/plain; charset=UTF-8\\n"
+"Content-Transfer-Encoding: 8bit\\n"
+"Plural-Forms: nplurals=2; plural=(n != 1);\\n"
+
+msgid "Fig. %s"
+msgstr "Foobar %s"
+
+msgid "Listing %s"
+msgstr "Whatever %s"
+''')
+
+        # Compile .po file to .mo file
+        with open(locale_dir / 'sphinx.po', 'r', encoding='utf-8') as po_file:
+            catalog = read_po(po_file, 'da')
+        with open(locale_dir / 'sphinx.mo', 'wb') as mo_file:
+            write_mo(mo_file, catalog)
+
+        # Create build directory
+        builddir = Path(tmpdir) / 'build'
+        builddir.mkdir()
+
+        # Create doctrees directory
+        doctreesdir = builddir / 'doctrees'
+        doctreesdir.mkdir()
+
+        # Print debug info
+        print("Locale directory:", locale_dir)
+        print("Files in locale directory:", os.listdir(locale_dir))
+        print("Content of sphinx.po:", open(locale_dir / 'sphinx.po', 'r').read())
+        print("Content of sphinx.mo:", open(locale_dir / 'sphinx.mo', 'rb').read())
+
+        # Add debug info to conf.py
+        with open(srcdir / 'conf.py', 'a') as f:
+            f.write('''
+import os
+print("Current working directory:", os.getcwd())
+print("locale_dirs setting:", locale_dirs)
+print("language setting:", language)
+
+# Add debug info to translation loading
+from sphinx.locale import init, translators, get_translator
+def debug_init(*args, **kwargs):
+    print("init() called with args:", args)
+    print("init() called with kwargs:", kwargs)
+    result = init(*args, **kwargs)
+    print("Translators after init:", translators)
+    return result
+
+import sphinx.locale
+sphinx.locale.init = debug_init
+
+# Add debug info to numfig_format initialization
+from sphinx.config import init_numfig_format
+def debug_init_numfig_format(*args, **kwargs):
+    print("init_numfig_format() called with args:", args)
+    print("init_numfig_format() called with kwargs:", kwargs)
+    translator = get_translator('sphinx')
+    print("Translator for 'Fig. %s':", translator.gettext('Fig. %s'))
+    result = init_numfig_format(*args, **kwargs)
+    print("Result of init_numfig_format:", result)
+    return result
+
+import sphinx.config
+sphinx.config.init_numfig_format = debug_init_numfig_format
+''')
+
+        # Run Sphinx build
+        app = Sphinx(
+            srcdir=str(srcdir),
+            confdir=str(srcdir),
+            outdir=str(builddir / 'html'),
+            doctreedir=str(doctreesdir),
+            buildername='html',
+            confoverrides={},
+            status=None,
+            warning=None,
+            freshenv=True,
+            warningiserror=True,
+            tags=None,
+        )
+        app.build()
+
+        # Check output
+        with open(builddir / 'html' / 'index.html', 'r') as f:
+            content = f.read()
+            print("HTML content:", content)
+            assert 'Foobar 1' in content, "Custom figure translation not found"
+            assert 'Whatever 1' in content, "Custom listing translation not found"
+
+if __name__ == '__main__':
+    test_locale_override()
+    print("Test passed successfully!")
\ No newline at end of file
