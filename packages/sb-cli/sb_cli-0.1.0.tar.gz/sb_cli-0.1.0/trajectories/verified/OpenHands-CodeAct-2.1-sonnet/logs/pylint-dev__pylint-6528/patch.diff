diff --git a/.a/foo.py b/.a/foo.py
new file mode 100644
index 000000000..b199df542
--- /dev/null
+++ b/.a/foo.py
@@ -0,0 +1 @@
+import re
diff --git a/b/baz.py b/b/baz.py
new file mode 100644
index 000000000..b199df542
--- /dev/null
+++ b/b/baz.py
@@ -0,0 +1 @@
+import re
diff --git a/bar.py b/bar.py
new file mode 100644
index 000000000..b199df542
--- /dev/null
+++ b/bar.py
@@ -0,0 +1 @@
+import re
diff --git a/pylint/lint/pylinter.py b/pylint/lint/pylinter.py
index 53345a6b1..928414585 100644
--- a/pylint/lint/pylinter.py
+++ b/pylint/lint/pylinter.py
@@ -564,11 +564,11 @@ class PyLinter(
             if not msg.may_be_emitted():
                 self._msgs_state[msg.msgid] = False
 
-    @staticmethod
-    def _discover_files(files_or_modules: Sequence[str]) -> Iterator[str]:
+    def _discover_files(self, files_or_modules: Sequence[str]) -> Iterator[str]:
         """Discover python modules and packages in sub-directory.
 
         Returns iterator of paths to discovered modules and packages.
+        Respects ignore patterns from configuration.
         """
         for something in files_or_modules:
             if os.path.isdir(something) and not os.path.isfile(
@@ -576,18 +576,33 @@ class PyLinter(
             ):
                 skip_subtrees: list[str] = []
                 for root, _, files in os.walk(something):
+                    # Check if this directory should be ignored
+                    basename = os.path.basename(root)
+                    if (basename in self.config.ignore or
+                        any(pattern.match(basename) for pattern in self.config.ignore_patterns) or
+                        any(pattern.match(root) for pattern in self.config.ignore_paths)):
+                        skip_subtrees.append(root)
+                        continue
+
                     if any(root.startswith(s) for s in skip_subtrees):
                         # Skip subtree of already discovered package.
                         continue
+
                     if "__init__.py" in files:
                         skip_subtrees.append(root)
                         yield root
                     else:
-                        yield from (
-                            os.path.join(root, file)
-                            for file in files
-                            if file.endswith(".py")
-                        )
+                        for file in files:
+                            if not file.endswith(".py"):
+                                continue
+                            filepath = os.path.join(root, file)
+                            basename = os.path.basename(filepath)
+                            # Check if this file should be ignored
+                            if (basename in self.config.ignore or
+                                any(pattern.match(basename) for pattern in self.config.ignore_patterns) or
+                                any(pattern.match(filepath) for pattern in self.config.ignore_paths)):
+                                continue
+                            yield filepath
             else:
                 yield something
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..85c12cd7e
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,31 @@
+import os
+import shutil
+import subprocess
+
+# Create test directory structure
+os.makedirs(".a", exist_ok=True)
+
+# Create test files
+with open("bar.py", "w") as f:
+    f.write("import re\n")
+
+with open(os.path.join(".a", "foo.py"), "w") as f:
+    f.write("import re\n")
+
+# Test cases
+test_commands = [
+    "pylint --recursive=y .",
+    "pylint --recursive=y --ignore=.a .",
+    "pylint --recursive=y --ignore-paths=.a .",
+    "pylint --recursive=y --ignore-patterns=^\.a .",
+]
+
+print("Running test cases...")
+for cmd in test_commands:
+    print(f"\nExecuting: {cmd}")
+    result = subprocess.run(cmd.split(), capture_output=True, text=True)
+    print(result.stdout)
+
+# Cleanup
+shutil.rmtree(".a")
+os.remove("bar.py")
\ No newline at end of file
diff --git a/test_fix.py b/test_fix.py
new file mode 100644
index 000000000..b477abf47
--- /dev/null
+++ b/test_fix.py
@@ -0,0 +1,36 @@
+import os
+import shutil
+import subprocess
+
+# Create test directory structure
+os.makedirs(".a", exist_ok=True)
+os.makedirs("b", exist_ok=True)
+
+# Create test files
+with open("bar.py", "w") as f:
+    f.write("import re\n")
+
+with open(os.path.join(".a", "foo.py"), "w") as f:
+    f.write("import re\n")
+
+with open(os.path.join("b", "baz.py"), "w") as f:
+    f.write("import re\n")
+
+# Test cases
+test_commands = [
+    "pylint --recursive=y .",  # Should ignore .a by default
+    "pylint --recursive=y --ignore=.a .",  # Should ignore .a explicitly
+    "pylint --recursive=y --ignore-paths=.a .",  # Should ignore .a by path
+    "pylint --recursive=y --ignore-patterns=^\.a .",  # Should ignore .a by pattern
+]
+
+print("Running test cases...")
+for cmd in test_commands:
+    print(f"\nExecuting: {cmd}")
+    result = subprocess.run(cmd.split(), capture_output=True, text=True)
+    print(result.stdout)
+
+# Cleanup
+shutil.rmtree(".a")
+shutil.rmtree("b")
+os.remove("bar.py")
\ No newline at end of file
