diff --git a/sympy/printing/printer.py b/sympy/printing/printer.py
index 93578d0950..5e8068926f 100644
--- a/sympy/printing/printer.py
+++ b/sympy/printing/printer.py
@@ -271,7 +271,15 @@ def _print(self, expr, *args, **kwargs):
             for cls in classes:
                 printmethod = '_print_' + cls.__name__
                 if hasattr(self, printmethod):
-                    return getattr(self, printmethod)(expr, *args, **kwargs)
+                    # Create a new printer with the same settings for subexpressions
+                    printer = type(self)(self._settings)
+                    printer._print_level = self._print_level
+                    result = getattr(printer, printmethod)(expr, *args, **kwargs)
+                    # Special handling for rational numbers
+                    if hasattr(expr, 'p') and hasattr(expr, 'q'):  # Rational
+                        if not expr.is_Integer and self._settings.get("sympy_integers", False):
+                            return "S(%d)/%d" % (expr.p, expr.q)
+                    return result
             # Unknown object, fall back to the emptyPrinter.
             return self.emptyPrinter(expr)
         finally:
diff --git a/sympy/printing/python.py b/sympy/printing/python.py
index dc6d8ffe59..af64b62f20 100644
--- a/sympy/printing/python.py
+++ b/sympy/printing/python.py
@@ -41,6 +41,13 @@ def _print_Symbol(self, expr):
             self.symbols.append(symbol)
         return StrPrinter._print_Symbol(self, expr)
 
+    def _print_Eq(self, expr):
+        # Ensure both sides' symbols are registered
+        for arg in expr.args:
+            for sym in arg.free_symbols:
+                self._print_Symbol(sym)
+        return StrPrinter._print_Basic(self, expr)
+
     def _print_module(self, expr):
         raise ValueError('Modules in the expression are unacceptable')
 
@@ -50,6 +57,12 @@ def python(expr, **settings):
     (can be passed to the exec() function without any modifications)"""
 
     printer = PythonPrinter(settings)
+    
+    # First collect all symbols from the expression
+    if hasattr(expr, 'free_symbols'):
+        for sym in expr.free_symbols:
+            printer._print_Symbol(sym)
+    
     exprp = printer.doprint(expr)
 
     result = ''
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index cc1d19fcce..299aaba087 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -89,9 +89,192 @@ def _print_AppliedPredicate(self, expr):
         return '%s(%s)' % (expr.func, expr.arg)
 
     def _print_Basic(self, expr):
-        l = [self._print(o) for o in expr.args]
+        # Create a new printer with the same settings for subexpressions
+        printer = type(self)(self._settings)
+        l = []
+        for o in expr.args:
+            # Special handling for rational numbers
+            if hasattr(o, 'p') and hasattr(o, 'q'):  # Rational
+                if not o.is_Integer and self._settings.get("sympy_integers", False):
+                    l.append("S(%d)/%d" % (o.p, o.q))
+                    continue
+            l.append(printer._print(o))
         return expr.__class__.__name__ + "(%s)" % ", ".join(l)
 
+    def _print_Eq(self, expr):
+        # Special handling for Eq to respect sympy_integers
+        printer = type(self)(self._settings)
+        l = []
+        for o in expr.args:
+            # Special handling for rational numbers
+            if hasattr(o, 'p') and hasattr(o, 'q'):  # Rational
+                if not o.is_Integer and self._settings.get("sympy_integers", False):
+                    l.append("S(%d)/%d" % (o.p, o.q))
+                    continue
+            l.append(printer._print(o))
+        return "Eq(%s)" % ", ".join(l)
+
+    def _print_Limit(self, expr):
+        # Special handling for Limit to respect sympy_integers
+        printer = type(self)(self._settings)
+        e, z, z0, dir = expr.args
+        # Special handling for rational numbers
+        if hasattr(z0, 'p') and hasattr(z0, 'q'):  # Rational
+            if not z0.is_Integer and self._settings.get("sympy_integers", False):
+                z0_str = "S(%d)/%d" % (z0.p, z0.q)
+            else:
+                z0_str = printer._print(z0)
+        else:
+            z0_str = printer._print(z0)
+        if str(dir) == "+":
+            return "Limit(%s, %s, %s)" % (printer._print(e), printer._print(z), z0_str)
+        else:
+            return "Limit(%s, %s, %s, dir='%s')" % (printer._print(e), printer._print(z), z0_str, dir)
+
+    def _print_Rational(self, expr):
+        if not expr.is_Integer:
+            if self._settings.get("sympy_integers", False):
+                return "S(%d)/%d" % (expr.p, expr.q)
+            return str(expr.p) + "/" + str(expr.q)
+        return str(expr.p)
+
+    def _print_Number(self, expr):
+        if hasattr(expr, 'p') and hasattr(expr, 'q'):  # Rational
+            if not expr.is_Integer and self._settings.get("sympy_integers", False):
+                return "S(%d)/%d" % (expr.p, expr.q)
+        return str(expr)
+
+    def _print_Add(self, expr, order=None):
+        # Create a new printer with the same settings for subexpressions
+        printer = type(self)(self._settings)
+        if printer.order == 'none':
+            terms = list(expr.args)
+        else:
+            terms = printer._as_ordered_terms(expr, order=order)
+
+        PREC = precedence(expr)
+        l = []
+        for term in terms:
+            # Special handling for rational numbers
+            if hasattr(term, 'p') and hasattr(term, 'q'):  # Rational
+                if not term.is_Integer and self._settings.get("sympy_integers", False):
+                    t = "S(%d)/%d" % (term.p, term.q)
+                else:
+                    t = printer._print(term)
+            else:
+                t = printer._print(term)
+            if t.startswith('-'):
+                sign = "-"
+                t = t[1:]
+            else:
+                sign = "+"
+            if precedence(term) < PREC:
+                l.extend([sign, "(%s)" % t])
+            else:
+                l.extend([sign, t])
+        sign = l.pop(0)
+        if sign == '+':
+            sign = ""
+        return sign + ' '.join(l)
+                l.extend([sign, t])
+        sign = l.pop(0)
+        if sign == '+':
+            sign = ""
+        return sign + ' '.join(l)
+
+    def _print_Rational(self, expr):
+        if not expr.is_Integer:
+            if self._settings.get("sympy_integers", False):
+                return "S(%d)/%d" % (expr.p, expr.q)
+            return str(expr.p) + "/" + str(expr.q)
+        return str(expr.p)
+
+    def _print_Number(self, expr):
+        if hasattr(expr, 'p') and hasattr(expr, 'q'):  # Rational
+            if not expr.is_Integer and self._settings.get("sympy_integers", False):
+                return "S(%d)/%d" % (expr.p, expr.q)
+        return str(expr)
+
+    def _print_Mul(self, expr):
+        # Create a new printer with the same settings for subexpressions
+        printer = type(self)(self._settings)
+        prec = precedence(expr)
+
+        c, e = expr.as_coeff_Mul()
+        if c < 0:
+            expr = _keep_coeff(-c, e)
+            sign = "-"
+        else:
+            sign = ""
+
+        a = []  # items in the numerator
+        b = []  # items that are in the denominator (if any)
+
+        if self.order not in ('old', 'none'):
+            args = expr.as_ordered_factors()
+        else:
+            # use make_args in case expr was something like -x -> x
+            args = Mul.make_args(expr)
+
+        # Gather args for numerator/denominator
+        for item in args:
+            if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:
+                if item.exp != -1:
+                    b.append(Pow(item.base, -item.exp, evaluate=False))
+                else:
+                    b.append(Pow(item.base, -item.exp))
+            elif item.is_Rational and item is not S.Infinity:
+                if item.p != 1:
+                    a.append(Rational(item.p))
+                if item.q != 1:
+                    b.append(Rational(item.q))
+            else:
+                a.append(item)
+
+        a = a or [S.One]
+
+        a_str = [printer.parenthesize(x, prec, strict=False) for x in a]
+        b_str = [printer.parenthesize(x, prec, strict=False) for x in b]
+
+        if len(b) == 0:
+            return sign + '*'.join(a_str)
+        elif len(b) == 1:
+            return sign + '*'.join(a_str) + "/" + b_str[0]
+        else:
+            return sign + '*'.join(a_str) + "/(%s)" % '*'.join(b_str)
+
+    def _print_Add(self, expr, order=None):
+        # Create a new printer with the same settings for subexpressions
+        printer = type(self)(self._settings)
+        if printer.order == 'none':
+            terms = list(expr.args)
+        else:
+            terms = printer._as_ordered_terms(expr, order=order)
+
+        PREC = precedence(expr)
+        l = []
+        for term in terms:
+            t = printer._print(term)
+            if t.startswith('-'):
+                sign = "-"
+                t = t[1:]
+            else:
+                sign = "+"
+            if precedence(term) < PREC:
+                l.extend([sign, "(%s)" % t])
+            else:
+                l.extend([sign, t])
+        sign = l.pop(0)
+        if sign == '+':
+            sign = ""
+        return sign + ' '.join(l)
+
+    def _print_Number(self, expr):
+        if hasattr(expr, 'p') and hasattr(expr, 'q'):  # Rational
+            if not expr.is_Integer and self._settings.get("sympy_integers", False):
+                return "S(%d)/%d" % (expr.p, expr.q)
+        return str(expr)
+
     def _print_BlockMatrix(self, B):
         if B.blocks.shape == (1, 1):
             self._print(B.blocks[0, 0])
