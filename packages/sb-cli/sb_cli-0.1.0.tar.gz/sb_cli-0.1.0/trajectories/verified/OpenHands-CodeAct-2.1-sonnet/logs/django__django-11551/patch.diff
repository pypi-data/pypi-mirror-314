diff --git a/django/contrib/admin/checks.py b/django/contrib/admin/checks.py
index f82c20c2f1..9fd77b5d41 100644
--- a/django/contrib/admin/checks.py
+++ b/django/contrib/admin/checks.py
@@ -720,33 +720,33 @@ class ModelAdminChecks(BaseModelAdminChecks):
             return []
         elif hasattr(obj, item):
             return []
-        elif hasattr(obj.model, item):
+        else:
             try:
                 field = obj.model._meta.get_field(item)
             except FieldDoesNotExist:
-                return []
-            else:
-                if isinstance(field, models.ManyToManyField):
+                try:
+                    field = getattr(obj.model, item)
+                except AttributeError:
                     return [
                         checks.Error(
-                            "The value of '%s' must not be a ManyToManyField." % label,
+                            "The value of '%s' refers to '%s', which is not a callable, "
+                            "an attribute of '%s', or an attribute or method on '%s.%s'." % (
+                                label, item, obj.__class__.__name__,
+                                obj.model._meta.app_label, obj.model._meta.object_name,
+                            ),
                             obj=obj.__class__,
-                            id='admin.E109',
+                            id='admin.E108',
                         )
                     ]
-                return []
-        else:
-            return [
-                checks.Error(
-                    "The value of '%s' refers to '%s', which is not a callable, "
-                    "an attribute of '%s', or an attribute or method on '%s.%s'." % (
-                        label, item, obj.__class__.__name__,
-                        obj.model._meta.app_label, obj.model._meta.object_name,
-                    ),
-                    obj=obj.__class__,
-                    id='admin.E108',
-                )
-            ]
+            if isinstance(field, models.ManyToManyField):
+                return [
+                    checks.Error(
+                        "The value of '%s' must not be a ManyToManyField." % label,
+                        obj=obj.__class__,
+                        id='admin.E109',
+                    )
+                ]
+            return []
 
     def _check_list_display_links(self, obj):
         """ Check that list_display_links is a unique subset of list_display.
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..d2eb7dd501
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,59 @@
+from django.conf import settings
+settings.configure(
+    INSTALLED_APPS=['django.contrib.admin', 'django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+
+import django
+django.setup()
+
+from django.contrib.admin.checks import ModelAdminChecks
+from django.contrib import admin
+from django.db import models
+
+class PositionField(models.Field):
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+
+    def deconstruct(self):
+        name, path, args, kwargs = super().deconstruct()
+        return name, path, args, kwargs
+
+    def db_type(self, connection):
+        return 'integer'
+
+    def __get__(self, instance, owner):
+        if instance is None:
+            raise AttributeError("Can only access PositionField via instance")
+        return 0
+
+class OtherThing(models.Model):
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'myapp'
+
+class Thing(models.Model):
+    number = models.IntegerField(default=0)
+    order = PositionField()
+    others = models.ManyToManyField(OtherThing)
+
+    @property
+    def double_number(self):
+        return self.number * 2
+
+    class Meta:
+        app_label = 'myapp'
+
+@admin.register(Thing)
+class ThingAdmin(admin.ModelAdmin):
+    def get_number(self, obj):
+        return obj.number
+    get_number.short_description = 'Number'
+
+    list_display = [get_number, 'order', 'others', 'nonexistent', 'double_number']
+
+# Run the check
+checker = ModelAdminChecks()
+errors = checker._check_list_display(ThingAdmin(Thing, admin.site))
+print("Errors:", errors)
\ No newline at end of file
