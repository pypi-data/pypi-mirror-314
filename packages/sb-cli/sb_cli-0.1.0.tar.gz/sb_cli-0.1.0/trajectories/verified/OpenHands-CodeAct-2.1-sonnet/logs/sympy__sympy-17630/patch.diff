diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..4352738a95
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,16 @@
+from sympy import *
+
+# Create the test case
+a = MatrixSymbol("a", 2, 2)
+z = ZeroMatrix(2, 2)
+b = BlockMatrix([[a, z], [z, z]])
+
+# Test single multiplication
+print("Single multiplication:")
+print(block_collapse(b * b))
+print(b._blockmul(b))
+
+# Test double multiplication
+print("\nDouble multiplication:")
+print(block_collapse(b * b * b))
+print(b._blockmul(b)._blockmul(b))
\ No newline at end of file
diff --git a/sympy/matrices/expressions/blockmatrix.py b/sympy/matrices/expressions/blockmatrix.py
index 95302a05ca..b7d1ffa2eb 100644
--- a/sympy/matrices/expressions/blockmatrix.py
+++ b/sympy/matrices/expressions/blockmatrix.py
@@ -164,7 +164,31 @@ def structurally_equal(self, other):
     def _blockmul(self, other):
         if (isinstance(other, BlockMatrix) and
                 self.colblocksizes == other.rowblocksizes):
-            return BlockMatrix(self.blocks*other.blocks)
+            # Perform block multiplication manually to preserve ZeroMatrix type
+            from sympy.matrices.immutable import ImmutableDenseMatrix
+            blocks = []
+            for i in range(self.blockshape[0]):
+                row = []
+                for j in range(other.blockshape[1]):
+                    sum_block = None
+                    for k in range(self.blockshape[1]):
+                        # Get blocks to multiply
+                        left = self.blocks[i, k]
+                        right = other.blocks[k, j]
+                        # Handle Zero scalar case
+                        if getattr(left, 'is_zero', False) and not hasattr(left, 'rows'):
+                            left = ZeroMatrix(self.rowblocksizes[i], self.colblocksizes[k])
+                        if getattr(right, 'is_zero', False) and not hasattr(right, 'rows'):
+                            right = ZeroMatrix(other.rowblocksizes[k], other.colblocksizes[j])
+                        # Multiply blocks
+                        prod = left * right
+                        if sum_block is None:
+                            sum_block = prod
+                        else:
+                            sum_block = sum_block + prod
+                    row.append(sum_block)
+                blocks.append(row)
+            return BlockMatrix(ImmutableDenseMatrix(blocks))
 
         return self * other
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..a19706ecd3
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,31 @@
+from sympy import *
+
+# Test case 1: Different sized blocks
+print("Test case 1: Different sized blocks")
+a = MatrixSymbol("a", 3, 3)
+z1 = ZeroMatrix(3, 2)
+z2 = ZeroMatrix(2, 3)
+z3 = ZeroMatrix(2, 2)
+b = BlockMatrix([[a, z1], [z2, z3]])
+print(block_collapse(b * b))
+print(b._blockmul(b))
+
+# Test case 2: Multiple zero blocks in different positions
+print("\nTest case 2: Multiple zero blocks")
+a = MatrixSymbol("a", 2, 2)
+b = MatrixSymbol("b", 2, 2)
+z = ZeroMatrix(2, 2)
+m = BlockMatrix([[a, z, b], [z, b, z], [z, z, a]])
+print(block_collapse(m * m))
+print(m._blockmul(m))
+
+# Test case 3: Triple multiplication with mixed blocks
+print("\nTest case 3: Triple multiplication with mixed blocks")
+a = MatrixSymbol("a", 2, 2)
+b = MatrixSymbol("b", 2, 2)
+z = ZeroMatrix(2, 2)
+m1 = BlockMatrix([[a, z], [z, b]])
+m2 = BlockMatrix([[b, z], [z, a]])
+m3 = BlockMatrix([[z, a], [b, z]])
+print(block_collapse(m1 * m2 * m3))
+print(m1._blockmul(m2)._blockmul(m3))
\ No newline at end of file
