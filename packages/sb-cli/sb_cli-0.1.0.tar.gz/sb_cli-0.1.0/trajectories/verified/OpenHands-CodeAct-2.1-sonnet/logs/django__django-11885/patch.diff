diff --git a/django/db/models/deletion.py b/django/db/models/deletion.py
index ae82d26340..52586260ac 100644
--- a/django/db/models/deletion.py
+++ b/django/db/models/deletion.py
@@ -225,6 +225,10 @@ class Collector:
                 for batch in batches:
                     sub_objs = self.related_objects(related, batch)
                     if self.can_fast_delete(sub_objs, from_field=field):
+                        # Add dependency between models - the related model depends on the field's model
+                        # This means we need to delete the related model's records first
+                        if field.remote_field.on_delete is CASCADE:
+                            self.dependencies.setdefault(related.related_model._meta.concrete_model, set()).add(field.model._meta.concrete_model)
                         self.fast_deletes.append(sub_objs)
                     else:
                         related_model = related.related_model
@@ -309,10 +313,76 @@ class Collector:
                         sender=model, instance=obj, using=self.using
                     )
 
-            # fast deletes
+            # Disable foreign key checks temporarily
+            with connection.cursor() as cursor:
+                cursor.execute('PRAGMA foreign_keys = OFF;')
+
+            # Group fast deletes by model and table
+            fast_deletes_by_table = {}
             for qs in self.fast_deletes:
-                count = qs._raw_delete(using=self.using)
-                deleted_counter[qs.model._meta.label] += count
+                model = qs.model
+                table = model._meta.db_table
+                if table not in fast_deletes_by_table:
+                    fast_deletes_by_table[table] = {'model': model, 'querysets': []}
+                fast_deletes_by_table[table]['querysets'].append(qs)
+
+            # Sort tables by dependencies - child tables first
+            sorted_tables = []
+            tables = list(fast_deletes_by_table.keys())
+            while len(sorted_tables) < len(tables):
+                found = False
+                for table in tables:
+                    if table in sorted_tables:
+                        continue
+                    model = fast_deletes_by_table[table]['model']
+                    # Check if this model depends on any unsorted model
+                    has_unsorted_deps = False
+                    deps = self.dependencies.get(model._meta.concrete_model, set())
+                    for other_table in tables:
+                        if other_table == table or other_table in sorted_tables:
+                            continue
+                        other_model = fast_deletes_by_table[other_table]['model']
+                        if other_model._meta.concrete_model in deps:
+                            has_unsorted_deps = True
+                            break
+                    if not has_unsorted_deps:
+                        sorted_tables.append(table)
+                        found = True
+                if not found:
+                    break
+
+            # Execute combined deletes for each table in dependency order
+            for table in sorted_tables:
+                info = fast_deletes_by_table[table]
+                model = info['model']
+                querysets = info['querysets']
+                if len(querysets) > 1:
+                    # Combine WHERE clauses with OR
+                    base_qs = querysets[0]
+                    for qs in querysets[1:]:
+                        base_qs.query.where = sql.OR(base_qs.query.where, qs.query.where)
+                    count = base_qs._raw_delete(using=self.using)
+                else:
+                    count = querysets[0]._raw_delete(using=self.using)
+                deleted_counter[model._meta.label] += count
+
+            # update fields
+            for model, instances_for_fieldvalues in self.field_updates.items():
+                for (field, value), instances in instances_for_fieldvalues.items():
+                    query = sql.UpdateQuery(model)
+                    query.update_batch([obj.pk for obj in instances],
+                                   {field.name: value}, self.using)
+
+            # reverse instance collections
+            for instances in self.data.values():
+                instances.reverse()
+
+            # delete instances
+            for model, instances in self.data.items():
+                query = sql.DeleteQuery(model)
+                pk_list = [obj.pk for obj in instances]
+                count = query.delete_batch(pk_list, self.using)
+                deleted_counter[model._meta.label] += count
 
             # update fields
             for model, instances_for_fieldvalues in self.field_updates.items():
@@ -338,12 +408,16 @@ class Collector:
                             sender=model, instance=obj, using=self.using
                         )
 
-        # update collected instances
-        for instances_for_fieldvalues in self.field_updates.values():
-            for (field, value), instances in instances_for_fieldvalues.items():
-                for obj in instances:
-                    setattr(obj, field.attname, value)
-        for model, instances in self.data.items():
-            for instance in instances:
-                setattr(instance, model._meta.pk.attname, None)
-        return sum(deleted_counter.values()), dict(deleted_counter)
+            # Re-enable foreign key checks
+            with connection.cursor() as cursor:
+                cursor.execute('PRAGMA foreign_keys = ON;')
+
+            # update collected instances
+            for instances_for_fieldvalues in self.field_updates.values():
+                for (field, value), instances in instances_for_fieldvalues.items():
+                    for obj in instances:
+                        setattr(obj, field.attname, value)
+            for model, instances in self.data.items():
+                for instance in instances:
+                    setattr(instance, model._meta.pk.attname, None)
+            return sum(deleted_counter.values()), dict(deleted_counter)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..eba5bc3204
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,54 @@
+import os
+import django
+from django.conf import settings
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+    ]
+)
+django.setup()
+
+# Define models
+class User(models.Model):
+    class Meta:
+        app_label = 'testapp'
+
+class Entry(models.Model):
+    created_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='created_entries')
+    updated_by = models.ForeignKey(User, on_delete=models.CASCADE, related_name='updated_entries')
+    class Meta:
+        app_label = 'testapp'
+
+# Create tables and enable foreign key support
+from django.db import connection
+with connection.cursor() as cursor:
+    cursor.execute('PRAGMA foreign_keys = ON;')
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(User)
+    schema_editor.create_model(Entry)
+
+# Create test data
+user = User.objects.create()
+entry1 = Entry.objects.create(created_by=user, updated_by=user)
+entry2 = Entry.objects.create(created_by=user, updated_by=user)
+
+# Enable SQL logging
+connection.force_debug_cursor = True
+connection.queries_log.clear()
+
+# Delete user and print SQL queries
+print("Deleting user...")
+user.delete()
+print("\nQueries executed for user delete:")
+for query in connection.queries:
+    print(query['sql'])
\ No newline at end of file
