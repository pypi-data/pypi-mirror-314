diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 137e6faa0f..effc5e9296 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -1631,7 +1631,7 @@ class ModelAdmin(BaseModelAdmin):
 
     def _get_edited_object_pks(self, request, prefix):
         """Return POST data values of list_editable primary keys."""
-        pk_pattern = re.compile(r'{}-\d+-{}$'.format(prefix, self.model._meta.pk.name))
+        pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), re.escape(self.model._meta.pk.name)))
         return [value for key, value in request.POST.items() if pk_pattern.match(key)]
 
     def _get_list_editable_queryset(self, request, prefix):
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..52a9b35ed0
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,42 @@
+import re
+
+def test_pattern(prefix, pk_name="id"):
+    # Original problematic code
+    pk_pattern = re.compile(r'{}-\d+-{}$'.format(prefix, pk_name))
+    
+    # Test string that should match
+    test_str = f"{prefix}-123-{pk_name}"
+    print(f"\nTesting with prefix='{prefix}' and pk_name='{pk_name}'")
+    print(f"Pattern: {pk_pattern.pattern}")
+    print(f"Test string: {test_str}")
+    print(f"Matches? {bool(pk_pattern.match(test_str))}")
+
+# Test with normal prefix (should work)
+test_pattern("form")
+
+# Test with prefix containing regex special chars (will fail)
+test_pattern("form[1]")
+test_pattern("form.test")
+test_pattern("form+extra")
+test_pattern("form*")
+
+# Now test the fixed version using re.escape()
+print("\n=== Fixed version ===")
+
+def test_pattern_fixed(prefix, pk_name="id"):
+    # Fixed version using re.escape()
+    pk_pattern = re.compile(r'{}-\d+-{}$'.format(re.escape(prefix), re.escape(pk_name)))
+    
+    # Test string that should match
+    test_str = f"{prefix}-123-{pk_name}"
+    print(f"\nTesting with prefix='{prefix}' and pk_name='{pk_name}'")
+    print(f"Pattern: {pk_pattern.pattern}")
+    print(f"Test string: {test_str}")
+    print(f"Matches? {bool(pk_pattern.match(test_str))}")
+
+# Test the fixed version with the same inputs
+test_pattern_fixed("form")
+test_pattern_fixed("form[1]")
+test_pattern_fixed("form.test")
+test_pattern_fixed("form+extra")
+test_pattern_fixed("form*")
\ No newline at end of file
