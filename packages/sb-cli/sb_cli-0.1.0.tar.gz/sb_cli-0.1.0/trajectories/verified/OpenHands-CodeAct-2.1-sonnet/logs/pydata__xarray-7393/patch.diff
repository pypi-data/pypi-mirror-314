diff --git a/reproduce_stack_dtype.py b/reproduce_stack_dtype.py
new file mode 100644
index 00000000..05f9d1f3
--- /dev/null
+++ b/reproduce_stack_dtype.py
@@ -0,0 +1,9 @@
+import xarray as xr
+import numpy as np
+
+da = xr.DataArray(np.array([0], dtype=np.int32), dims=['a'])
+ds = da.to_dataset(name='a')
+result = ds['a'].values.dtype == ds.stack(b=('a',))['a'].values.dtype
+print(f"Original dtype: {ds['a'].values.dtype}")
+print(f"Stacked dtype: {ds.stack(b=('a',))['a'].values.dtype}")
+print(f"Are dtypes equal? {result}")
\ No newline at end of file
diff --git a/xarray/core/indexes.py b/xarray/core/indexes.py
index f3f03c94..12cd3c52 100644
--- a/xarray/core/indexes.py
+++ b/xarray/core/indexes.py
@@ -168,18 +168,35 @@ def safe_cast_to_index(array: Any) -> pd.Index:
     from xarray.core.variable import Variable
 
     if isinstance(array, pd.Index):
-        index = array
+        # For integer types, ensure the dtype is preserved
+        if hasattr(array, 'dtype') and array.dtype.kind in 'iu':
+            index = pd.Index(array.values, dtype=array.dtype)
+        else:
+            index = array
     elif isinstance(array, (DataArray, Variable)):
         # returns the original multi-index for pandas.MultiIndex level coordinates
         index = array._to_index()
+        # For integer types, ensure the dtype is preserved
+        if hasattr(array, 'dtype') and array.dtype.kind in 'iu':
+            index = pd.Index(index.values, dtype=array.dtype)
     elif isinstance(array, Index):
         index = array.to_pandas_index()
+        # For integer types, ensure the dtype is preserved
+        if hasattr(array, 'dtype') and array.dtype.kind in 'iu':
+            index = pd.Index(index.values, dtype=array.dtype)
     elif isinstance(array, PandasIndexingAdapter):
         index = array.array
+        # For integer types, ensure the dtype is preserved
+        if hasattr(array, 'dtype') and array.dtype.kind in 'iu':
+            index = pd.Index(index.values, dtype=array.dtype)
     else:
         kwargs = {}
-        if hasattr(array, "dtype") and array.dtype.kind == "O":
-            kwargs["dtype"] = object
+        if hasattr(array, "dtype"):
+            if array.dtype.kind == "O":
+                kwargs["dtype"] = object
+            elif array.dtype.kind in "iu":
+                # Preserve integer dtypes
+                kwargs["dtype"] = array.dtype
         index = pd.Index(np.asarray(array), **kwargs)
 
     return _maybe_cast_to_cftimeindex(index)
@@ -291,7 +308,11 @@ class PandasIndex(Index):
         # make a shallow copy: cheap and because the index name may be updated
         # here or in other constructors (cannot use pd.Index.rename as this
         # constructor is also called from PandasMultiIndex)
-        index = safe_cast_to_index(array).copy()
+        if hasattr(array, 'dtype') and array.dtype.kind in 'iu':
+            # Preserve integer dtypes
+            index = pd.Index(array, dtype=array.dtype)
+        else:
+            index = safe_cast_to_index(array).copy()
 
         if index.name is None:
             index.name = dim
@@ -300,7 +321,11 @@ class PandasIndex(Index):
         self.dim = dim
 
         if coord_dtype is None:
-            coord_dtype = get_valid_numpy_dtype(index)
+            if hasattr(array, 'dtype') and array.dtype.kind in 'iu':
+                # Preserve integer dtypes
+                coord_dtype = array.dtype
+            else:
+                coord_dtype = get_valid_numpy_dtype(index)
         self.coord_dtype = coord_dtype
 
     def _replace(self, index, dim=None, coord_dtype=None):
@@ -344,7 +369,13 @@ class PandasIndex(Index):
             if level is not None:
                 data = var._data.array.get_level_values(level)
 
-        obj = cls(data, dim, coord_dtype=var.dtype)
+        # Preserve original dtype for integer types
+        if hasattr(data, 'dtype') and data.dtype.kind in 'iu':
+            data = pd.Index(data, dtype=data.dtype)
+            obj = cls(data, dim, coord_dtype=data.dtype)
+        else:
+            obj = cls(data, dim, coord_dtype=var.dtype)
+
         assert not isinstance(obj.index, pd.MultiIndex)
         obj.index.name = name
 
@@ -401,11 +432,21 @@ class PandasIndex(Index):
             var = variables[name]
             attrs = var.attrs
             encoding = var.encoding
+            # Use the original variable's dtype for integer types
+            if var.dtype.kind in 'iu':
+                dtype = var.dtype
+            else:
+                dtype = self.coord_dtype
         else:
             attrs = None
             encoding = None
+            dtype = self.coord_dtype
+
+        # Preserve original dtype for integer types
+        if hasattr(self.index, 'dtype') and self.index.dtype.kind in 'iu':
+            dtype = self.index.dtype
 
-        data = PandasIndexingAdapter(self.index, dtype=self.coord_dtype)
+        data = PandasIndexingAdapter(self.index, dtype=dtype)
         var = IndexVariable(self.dim, data, attrs=attrs, encoding=encoding)
         return {name: var}
 
@@ -706,9 +747,20 @@ class PandasMultiIndex(PandasIndex):
                     f"from variable {name!r} that wraps a multi-index"
                 )
 
-        split_labels, levels = zip(*[lev.factorize() for lev in level_indexes])
+        # Factorize each level and preserve dtypes
+        split_labels_levels = []
+        for lev, var in zip(level_indexes, variables.values()):
+            labels, levs = lev.factorize()
+            if var.dtype.kind in 'iu':
+                labels = labels.astype(var.dtype)
+                levs = pd.Index(levs, dtype=var.dtype)
+            split_labels_levels.append((labels, levs))
+        split_labels, levels = zip(*split_labels_levels)
+
+        # Create meshgrid and preserve dtypes
         labels_mesh = np.meshgrid(*split_labels, indexing="ij")
-        labels = [x.ravel() for x in labels_mesh]
+        labels = [x.ravel().astype(var.dtype) if var.dtype.kind in 'iu' else x.ravel() 
+                 for x, var in zip(labels_mesh, variables.values())]
 
         index = pd.MultiIndex(levels, labels, sortorder=0, names=variables.keys())
         level_coords_dtype = {k: var.dtype for k, var in variables.items()}
diff --git a/xarray/core/indexing.py b/xarray/core/indexing.py
index ba937183..bf91388a 100644
--- a/xarray/core/indexing.py
+++ b/xarray/core/indexing.py
@@ -1425,7 +1425,11 @@ class PandasIndexingAdapter(ExplicitlyIndexedNDArrayMixin):
         self.array = safe_cast_to_index(array)
 
         if dtype is None:
-            self._dtype = get_valid_numpy_dtype(array)
+            # For integer types, preserve the original dtype
+            if hasattr(array, 'dtype') and array.dtype.kind in 'iu':
+                self._dtype = array.dtype
+            else:
+                self._dtype = get_valid_numpy_dtype(array)
         else:
             self._dtype = np.dtype(dtype)
 
@@ -1441,6 +1445,9 @@ class PandasIndexingAdapter(ExplicitlyIndexedNDArrayMixin):
             with suppress(AttributeError):
                 # this might not be public API
                 array = array.astype("object")
+        # Preserve original dtype for integer types if no explicit dtype is requested
+        if dtype is None and hasattr(array, 'dtype') and array.dtype.kind in 'iu':
+            return np.asarray(array.values, dtype=array.dtype)
         return np.asarray(array.values, dtype=dtype)
 
     @property
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 118e7c48..01878ae8 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -178,6 +178,9 @@ def _maybe_wrap_data(data):
     all pass through unmodified.
     """
     if isinstance(data, pd.Index):
+        # Preserve original dtype for integer types
+        if hasattr(data, 'dtype') and data.dtype.kind in 'iu':
+            data = pd.Index(data.values, dtype=data.dtype)
         return PandasIndexingAdapter(data)
     return data
 
@@ -289,7 +292,11 @@ def as_compatible_data(data, fastpath=False):
         return data
 
     # validate whether the data is valid data types.
-    data = np.asarray(data)
+    if hasattr(data, 'dtype') and data.dtype.kind in 'iu':
+        # Preserve integer dtypes
+        data = np.asarray(data, dtype=data.dtype)
+    else:
+        data = np.asarray(data)
 
     if isinstance(data, np.ndarray) and data.dtype.kind in "OMm":
         data = _possibly_convert_objects(data)
@@ -1694,6 +1701,9 @@ class Variable(AbstractArray, NdimSizeLenMixin, VariableArithmetic):
 
         new_shape = reordered.shape[: len(other_dims)] + (-1,)
         new_data = duck_array_ops.reshape(reordered.data, new_shape)
+        # Always preserve original dtype
+        if hasattr(reordered.data, 'dtype'):
+            new_data = new_data.astype(reordered.dtype)
         new_dims = reordered.dims[: len(other_dims)] + (new_dim,)
 
         return Variable(new_dims, new_data, self._attrs, self._encoding, fastpath=True)
