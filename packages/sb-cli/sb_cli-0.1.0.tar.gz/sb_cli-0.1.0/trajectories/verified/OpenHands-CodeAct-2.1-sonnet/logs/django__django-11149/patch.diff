diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index 83719f4346..82e637d230 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -257,17 +257,18 @@ class InlineAdminFormSet:
                 original, readonly_fields_for_editing, model_admin=self.opts,
                 view_on_site_url=view_on_site_url,
             )
-        for form in self.formset.extra_forms:
-            yield InlineAdminForm(
-                self.formset, form, self.fieldsets, self.prepopulated_fields,
-                None, self.readonly_fields, model_admin=self.opts,
-            )
-        if self.has_add_permission:
-            yield InlineAdminForm(
-                self.formset, self.formset.empty_form,
-                self.fieldsets, self.prepopulated_fields, None,
-                self.readonly_fields, model_admin=self.opts,
-            )
+        if self.has_change_permission:
+            for form in self.formset.extra_forms:
+                yield InlineAdminForm(
+                    self.formset, form, self.fieldsets, self.prepopulated_fields,
+                    None, self.readonly_fields, model_admin=self.opts,
+                )
+            if self.has_add_permission:
+                yield InlineAdminForm(
+                    self.formset, self.formset.empty_form,
+                    self.fieldsets, self.prepopulated_fields, None,
+                    self.readonly_fields, model_admin=self.opts,
+                )
 
     def fields(self):
         fk = getattr(self.formset, "fk", None)
@@ -300,16 +301,19 @@ class InlineAdminFormSet:
 
     def inline_formset_data(self):
         verbose_name = self.opts.verbose_name
-        return json.dumps({
+        data = {
             'name': '#%s' % self.formset.prefix,
             'options': {
                 'prefix': self.formset.prefix,
-                'addText': gettext('Add another %(verbose_name)s') % {
-                    'verbose_name': capfirst(verbose_name),
-                },
-                'deleteText': gettext('Remove'),
             }
-        })
+        }
+        if self.has_add_permission and self.has_change_permission:
+            data['options']['addText'] = gettext('Add another %(verbose_name)s') % {
+                'verbose_name': capfirst(verbose_name),
+            }
+        if self.has_delete_permission and self.has_change_permission:
+            data['options']['deleteText'] = gettext('Remove')
+        return json.dumps(data)
 
     @property
     def forms(self):
diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 880a2cc17b..187c9d29ea 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -173,6 +173,10 @@ class BaseModelAdmin(metaclass=forms.MediaDefiningClass):
                     formfield.widget, db_field.remote_field, self.admin_site, **wrapper_kwargs
                 )
 
+            # Make field readonly if user only has view permission
+            if request and not self.has_change_permission(request):
+                formfield.disabled = True
+
             return formfield
 
         # If we've got overrides for the formfield defined, use 'em. **kwargs
@@ -1469,13 +1473,15 @@ class ModelAdmin(BaseModelAdmin):
             has_change_permission = inline.has_change_permission(request, obj)
             has_delete_permission = inline.has_delete_permission(request, obj)
             has_view_permission = inline.has_view_permission(request, obj)
+            has_view_only = not has_add_permission and not has_change_permission and has_view_permission
             prepopulated = dict(inline.get_prepopulated_fields(request, obj))
             inline_admin_formset = helpers.InlineAdminFormSet(
                 inline, formset, fieldsets, prepopulated, readonly, model_admin=self,
                 has_add_permission=has_add_permission, has_change_permission=has_change_permission,
                 has_delete_permission=has_delete_permission, has_view_permission=has_view_permission,
             )
-            inline_admin_formsets.append(inline_admin_formset)
+            if not has_view_only:
+                inline_admin_formsets.append(inline_admin_formset)
         return inline_admin_formsets
 
     def get_changeform_initial_data(self, request):
@@ -2030,16 +2036,35 @@ class InlineModelAdmin(BaseModelAdmin):
         # default.
         exclude = exclude or None
         can_delete = self.can_delete and self.has_delete_permission(request, obj)
+        has_view_only = not self.has_add_permission(request, obj) and not self.has_change_permission(request, obj)
+        class ReadOnlyInlineFormSet(self.formset):
+            def __init__(self, *args, **kwargs):
+                super().__init__(*args, **kwargs)
+                for form in self.forms:
+                    form.fields = {k: v for k, v in form.fields.items()}
+                    for field in form.fields.values():
+                        field.disabled = True
+                self.max_num = 0
+                self.can_delete = False
+                self.extra = 0
+                self.total_form_count = lambda: 0
+                self.initial_forms = 0
+                self.forms = []
+                self.empty_form = None
+                self.get_queryset = lambda: self.model.objects.none()
+                self.save_as_new = False
+                self.save_new = lambda *args, **kwargs: None
+
         defaults = {
             'form': self.form,
-            'formset': self.formset,
+            'formset': ReadOnlyInlineFormSet if has_view_only else self.formset,
             'fk_name': self.fk_name,
             'fields': fields,
             'exclude': exclude,
             'formfield_callback': partial(self.formfield_for_dbfield, request=request),
-            'extra': self.get_extra(request, obj, **kwargs),
+            'extra': 0 if has_view_only else self.get_extra(request, obj, **kwargs),
             'min_num': self.get_min_num(request, obj, **kwargs),
-            'max_num': self.get_max_num(request, obj, **kwargs),
+            'max_num': 0 if has_view_only else self.get_max_num(request, obj, **kwargs),
             'can_delete': can_delete,
             **kwargs,
         }
@@ -2093,6 +2118,8 @@ class InlineModelAdmin(BaseModelAdmin):
                     return False
                 if not can_add and self.instance._state.adding:
                     return False
+                if not can_delete and self.cleaned_data.get(DELETION_FIELD_NAME, False):
+                    return False
                 return super().has_changed()
 
         defaults['form'] = DeleteProtectedModelForm
