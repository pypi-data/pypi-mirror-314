diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..f52d5be7cf
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,15 @@
+from sympy import Symbol, Matrix
+from sympy.printing import pretty
+
+# Create symbols with subscripts
+t0 = Symbol('t_0')
+t1 = Symbol('t_1')
+t2 = Symbol('t_2')
+w0 = Symbol('omega_0')  # Greek letter omega with subscript
+
+# Create the matrix
+matrix = Matrix([[-t0*w0, -t1*w0, -t2*w0]])
+
+# Print using unicode
+print("Using unicode:")
+print(pretty(matrix, use_unicode=True))
\ No newline at end of file
diff --git a/sympy/printing/pretty/pretty_symbology.py b/sympy/printing/pretty/pretty_symbology.py
index 3f7c4a2dc7..3fac1a1d5e 100644
--- a/sympy/printing/pretty/pretty_symbology.py
+++ b/sympy/printing/pretty/pretty_symbology.py
@@ -518,15 +518,18 @@ def pretty_symbol(symb_name, bold_name=False):
     name, sups, subs = split_super_sub(symb_name)
 
     def translate(s, bold_name) :
+        # First check if it's a Greek letter
         if bold_name:
             gG = greek_bold_unicode.get(s)
         else:
             gG = greek_unicode.get(s)
         if gG is not None:
             return gG
+        # Then check for modifiers
         for key in sorted(modifier_dict.keys(), key=lambda k:len(k), reverse=True) :
             if s.lower().endswith(key) and len(s)>len(key):
                 return modifier_dict[key](translate(s[:-len(key)], bold_name))
+        # Finally check for bold or return as is
         if bold_name:
             return ''.join([bold_unicode[c] for c in s])
         return s
@@ -555,8 +558,22 @@ def pretty_list(l, mapping):
 
     # glue the results into one string
     if pretty_subs is None:  # nice formatting of sups/subs did not work
-        if subs:
-            name += '_'+'_'.join([translate(s, bold_name) for s in subs])
+        # If name is a Greek letter, we want to use unicode subscripts even if pretty_subs failed
+        if subs and name in greek_unicode.values():
+            # Try to convert each subscript digit to unicode subscript
+            formatted_subs = []
+            for s in subs:
+                if s.isdigit():
+                    # Use DSUB directly for digits
+                    formatted_sub = DSUB(s)
+                    if formatted_sub is not None:
+                        formatted_subs.append(formatted_sub)
+                        continue
+                formatted_subs.append(s)
+            name += ''.join(formatted_subs)
+        else:
+            if subs:
+                name += '_'+'_'.join([translate(s, bold_name) for s in subs])
         if sups:
             name += '__'+'__'.join([translate(s, bold_name) for s in sups])
         return name
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..664ac12b38
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,28 @@
+from sympy import Symbol, Matrix
+from sympy.printing import pretty
+
+# Test case 1: Multiple digit subscripts
+w12 = Symbol('omega_12')
+print("Test case 1 - Multiple digit subscripts:")
+print(pretty(w12, use_unicode=True))
+
+# Test case 2: Mixed letter and digit subscripts
+w_a1 = Symbol('omega_a1')
+print("\nTest case 2 - Mixed letter and digit subscripts:")
+print(pretty(w_a1, use_unicode=True))
+
+# Test case 3: Letter subscripts
+w_a = Symbol('omega_a')
+print("\nTest case 3 - Letter subscripts:")
+print(pretty(w_a, use_unicode=True))
+
+# Test case 4: Multiple Greek letters with subscripts
+alpha0 = Symbol('alpha_0')
+beta1 = Symbol('beta_1')
+print("\nTest case 4 - Multiple Greek letters with subscripts:")
+print(pretty(Matrix([[alpha0, beta1]]), use_unicode=True))
+
+# Test case 5: Uppercase Greek letters with subscripts
+Omega0 = Symbol('Omega_0')
+print("\nTest case 5 - Uppercase Greek letters with subscripts:")
+print(pretty(Omega0, use_unicode=True))
\ No newline at end of file
