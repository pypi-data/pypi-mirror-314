diff --git a/django/core/serializers/python.py b/django/core/serializers/python.py
index 36048601af..5cd61f3a12 100644
--- a/django/core/serializers/python.py
+++ b/django/core/serializers/python.py
@@ -79,7 +79,14 @@ class Serializer(base.Serializer):
                     return self._value_from_field(value, value._meta.pk)
 
                 def queryset_iterator(obj, field):
-                    return getattr(obj, field.name).only("pk").iterator()
+                    # Get the queryset and try to optimize it with only('pk')
+                    # If that fails due to select_related, fall back to the original queryset
+                    qs = getattr(obj, field.name)
+                    try:
+                        qs = qs.only("pk")
+                    except:
+                        pass
+                    return qs.iterator()
 
             m2m_iter = getattr(obj, "_prefetched_objects_cache", {}).get(
                 field.name,
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..ae0c1b5eca
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,95 @@
+from django.db import models, connection
+from django.core import serializers
+from django.conf import settings
+import os
+import sys
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+
+    import django
+    django.setup()
+
+# Define the models
+class TestTagManager(models.Manager):
+    def get_queryset(self):
+        qs = super().get_queryset()
+        qs = qs.select_related("master")  # follow master when retrieving object by default
+        return qs
+
+class TestTagMaster(models.Model):
+    name = models.CharField(max_length=120)
+    class Meta:
+        app_label = 'reproduce_error'
+        managed = True
+
+class TestTag(models.Model):
+    objects = TestTagManager()
+    name = models.CharField(max_length=120)
+    master = models.ForeignKey(TestTagMaster, on_delete=models.SET_NULL, null=True)
+    class Meta:
+        app_label = 'reproduce_error'
+        managed = True
+
+class Test(models.Model):
+    name = models.CharField(max_length=120)
+    tags = models.ManyToManyField(TestTag, blank=True)
+    class Meta:
+        app_label = 'reproduce_error'
+        managed = True
+
+# Create the tables
+with connection.cursor() as cursor:
+    cursor.execute("""
+        CREATE TABLE reproduce_error_testtagmaster (
+            id INTEGER PRIMARY KEY AUTOINCREMENT,
+            name VARCHAR(120) NOT NULL
+        )
+    """)
+    cursor.execute("""
+        CREATE TABLE reproduce_error_testtag (
+            id INTEGER PRIMARY KEY AUTOINCREMENT,
+            name VARCHAR(120) NOT NULL,
+            master_id INTEGER REFERENCES reproduce_error_testtagmaster(id) ON DELETE SET NULL
+        )
+    """)
+    cursor.execute("""
+        CREATE TABLE reproduce_error_test (
+            id INTEGER PRIMARY KEY AUTOINCREMENT,
+            name VARCHAR(120) NOT NULL
+        )
+    """)
+    cursor.execute("""
+        CREATE TABLE reproduce_error_test_tags (
+            id INTEGER PRIMARY KEY AUTOINCREMENT,
+            test_id INTEGER NOT NULL REFERENCES reproduce_error_test(id),
+            testtag_id INTEGER NOT NULL REFERENCES reproduce_error_testtag(id),
+            UNIQUE(test_id, testtag_id)
+        )
+    """)
+
+# Test the serialization
+tag_master = TestTagMaster.objects.create(name="master")
+tag = TestTag.objects.create(name="tag", master=tag_master)
+test = Test.objects.create(name="test")
+test.tags.add(tag)
+test.save()
+
+print("Attempting to serialize...")
+try:
+    result = serializers.serialize("json", Test.objects.filter(id=test.id))
+    print("Success! Serialized output:", result)
+except Exception as e:
+    print("Error during serialization:", str(e))
+    sys.exit(1)
\ No newline at end of file
diff --git a/test.db b/test.db
new file mode 100644
index 0000000000..e69de29bb2
