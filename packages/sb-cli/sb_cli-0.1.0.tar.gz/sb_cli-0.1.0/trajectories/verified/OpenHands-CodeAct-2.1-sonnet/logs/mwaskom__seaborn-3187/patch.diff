diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..e6abde63
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,15 @@
+import seaborn as sns
+import seaborn.objects as so
+
+penguins = sns.load_dataset("penguins")
+penguins["body_mass_mg"] = penguins["body_mass_g"] * 1000
+
+# Create plot using objects interface
+p = (
+    so.Plot(
+        penguins, x="bill_length_mm", y="bill_depth_mm",
+        color="species", pointsize="body_mass_mg",
+    )
+    .add(so.Dot())
+)
+p.show()
\ No newline at end of file
diff --git a/seaborn/_core/scales.py b/seaborn/_core/scales.py
index 55874bf2..4d68ed71 100644
--- a/seaborn/_core/scales.py
+++ b/seaborn/_core/scales.py
@@ -378,7 +378,20 @@ class ContinuousBase(Scale):
             axis.set_view_interval(vmin, vmax)
             locs = axis.major.locator()
             locs = locs[(vmin <= locs) & (locs <= vmax)]
-            labels = axis.major.formatter.format_ticks(locs)
+            formatter = axis.major.formatter
+            labels = formatter.format_ticks(locs)
+            
+            # Handle ScalarFormatter with offset
+            if isinstance(formatter, ScalarFormatter) and formatter.offset != 0:
+                # Apply the offset to the legend labels
+                offset_str = formatter.get_offset()
+                if offset_str:
+                    # Convert labels to float and apply offset
+                    try:
+                        labels = [f"{float(label) + formatter.offset:g}" for label in labels]
+                    except (ValueError, TypeError):
+                        pass  # Keep original labels if conversion fails
+            
             new._legend = list(locs), list(labels)
 
         return new
diff --git a/test_different_scale.py b/test_different_scale.py
new file mode 100644
index 00000000..bfac246e
--- /dev/null
+++ b/test_different_scale.py
@@ -0,0 +1,16 @@
+import seaborn as sns
+import seaborn.objects as so
+
+penguins = sns.load_dataset("penguins")
+penguins["body_mass_mg"] = penguins["body_mass_g"] * 1000
+
+# Test with log scale
+p = (
+    so.Plot(
+        penguins, x="bill_length_mm", y="bill_depth_mm",
+        color="species", pointsize="body_mass_mg",
+    )
+    .scale(pointsize=("log", (3, 200)))
+    .add(so.Dot())
+)
+p.show()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..79270a5d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,35 @@
+import seaborn as sns
+import seaborn.objects as so
+import numpy as np
+
+# Create synthetic data with different scales
+n = 100
+data = {
+    "x": np.linspace(0, 10, n),
+    "y": np.random.normal(0, 1, n),
+    "size1": np.random.uniform(1e6, 1e7, n),  # Large values
+    "size2": np.random.uniform(0.001, 0.01, n),  # Small values
+    "size3": np.random.uniform(-1e6, 1e6, n),  # Mixed positive/negative large values
+    "group": np.repeat(["A", "B"], n//2)
+}
+
+# Test case 1: Large positive values
+p1 = (
+    so.Plot(data, x="x", y="y", pointsize="size1", color="group")
+    .add(so.Dot())
+)
+p1.show()
+
+# Test case 2: Small values
+p2 = (
+    so.Plot(data, x="x", y="y", pointsize="size2", color="group")
+    .add(so.Dot())
+)
+p2.show()
+
+# Test case 3: Mixed positive/negative large values
+p3 = (
+    so.Plot(data, x="x", y="y", pointsize="size3", color="group")
+    .add(so.Dot())
+)
+p3.show()
\ No newline at end of file
