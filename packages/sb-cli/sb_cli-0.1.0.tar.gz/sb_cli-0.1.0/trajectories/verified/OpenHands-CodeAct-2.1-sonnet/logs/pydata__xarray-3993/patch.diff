diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 00000000..1ccd4630
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,44 @@
+import numpy as np
+import xarray as xr
+import warnings
+
+# Create sample data
+data = np.random.rand(5, 4)
+coords = {'x': np.arange(5), 'y': np.arange(4)}
+da = xr.DataArray(data, coords=coords, dims=['x', 'y'])
+ds = xr.Dataset({'var': da})
+
+print("Testing DataArray.integrate() with 'coord' parameter:")
+with warnings.catch_warnings(record=True) as w:
+    warnings.simplefilter("always")
+    
+    # Test old way (should show deprecation warning)
+    print("\n1. Using deprecated 'dim' parameter:")
+    result_old = da.integrate(dim='x')
+    print(f"Result type: {type(result_old)}")
+    print(f"Result shape: {result_old.shape}")
+    if len(w) > 0:
+        print(f"Warning message: {str(w[-1].message)}")
+    
+    # Test new way
+    print("\n2. Using new 'coord' parameter:")
+    result_new = da.integrate(coord='x')
+    print(f"Result type: {type(result_new)}")
+    print(f"Result shape: {result_new.shape}")
+    
+    # Test that results are equal
+    print("\n3. Verifying results are equal:")
+    print(f"Old and new results are equal: {np.allclose(result_old, result_new)}")
+    
+    # Test error when both parameters are used
+    print("\n4. Testing error when both parameters are used:")
+    try:
+        da.integrate(dim='x', coord='x')
+    except TypeError as e:
+        print(f"Got expected error: {str(e)}")
+    
+    # Test with Dataset for comparison
+    print("\n5. Testing Dataset.integrate():")
+    result_ds = ds.integrate(coord='x')
+    print(f"Dataset result type: {type(result_ds)}")
+    print(f"Dataset result shape: {result_ds['var'].shape}")
\ No newline at end of file
diff --git a/xarray/core/dataarray.py b/xarray/core/dataarray.py
index 2fef3edb..ac478657 100644
--- a/xarray/core/dataarray.py
+++ b/xarray/core/dataarray.py
@@ -3481,21 +3481,26 @@ class DataArray(AbstractArray, DataWithCoords):
         return self._from_temp_dataset(ds)
 
     def integrate(
-        self, dim: Union[Hashable, Sequence[Hashable]], datetime_unit: str = None
+        self,
+        coord: Union[Hashable, Sequence[Hashable], None] = None,
+        datetime_unit: str = None,
+        dim: Union[Hashable, Sequence[Hashable], None] = None,
     ) -> "DataArray":
         """ integrate the array with the trapezoidal rule.
 
         .. note::
-            This feature is limited to simple cartesian geometry, i.e. dim
+            This feature is limited to simple cartesian geometry, i.e. coord
             must be one dimensional.
 
         Parameters
         ----------
-        dim : hashable, or sequence of hashable
+        coord : hashable, or sequence of hashable, optional
             Coordinate(s) used for the integration.
         datetime_unit : {"Y", "M", "W", "D", "h", "m", "s", "ms", "us", "ns", \
                          "ps", "fs", "as"}, optional
             Can be used to specify the unit if datetime coordinate is used.
+        dim : hashable, or sequence of hashable, optional
+            Deprecated: use coord instead.
 
         Returns
         -------
@@ -3528,7 +3533,18 @@ class DataArray(AbstractArray, DataWithCoords):
         array([5.4, 6.6, 7.8])
         Dimensions without coordinates: y
         """
-        ds = self._to_temp_dataset().integrate(dim, datetime_unit)
+        if dim is not None:
+            if coord is not None:
+                raise TypeError("Cannot specify both 'dim' and 'coord' arguments. Use 'coord' instead.")
+            warnings.warn(
+                "The `dim` argument to integrate has been deprecated and will be "
+                "removed in a future version. Use `coord` instead.",
+                FutureWarning,
+                stacklevel=2,
+            )
+            coord = dim
+
+        ds = self._to_temp_dataset().integrate(coord, datetime_unit)
         return self._from_temp_dataset(ds)
 
     def unify_chunks(self) -> "DataArray":
