+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/migrations/executor.py
	modified:   django/db/migrations/graph.py
	modified:   django/db/migrations/loader.py
	modified:   django/db/migrations/recorder.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	db.sqlite3
	loader.py.patch
	reproduce_squash_issue.py
	test_app/
	test_project/

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 8c3bd0b708b488a1f6e8bd8cc6b96569904605be
Author: Sanskar Jaiswal <jaiswalsanskar078@gmail.com>
Date:   Sat Oct 17 00:47:13 2020 +0530

    Fixed #31653 -- Added AddConstraintNotValid()/ValidateConstraint() operations for PostgreSQL.

diff --git a/django/contrib/postgres/operations.py b/django/contrib/postgres/operations.py
index e5f2b9e92f..037bb4ec22 100644
--- a/django/contrib/postgres/operations.py
+++ b/django/contrib/postgres/operations.py
@@ -2,8 +2,9 @@ from django.contrib.postgres.signals import (
     get_citext_oids, get_hstore_oids, register_type_handlers,
 )
 from django.db import NotSupportedError, router
-from django.db.migrations import AddIndex, RemoveIndex
+from django.db.migrations import AddConstraint, AddIndex, RemoveIndex
 from django.db.migrations.operations.base import Operation
+from django.db.models.constraints import CheckConstraint
 
 
 class CreateExtension(Operation):
@@ -256,3 +257,73 @@ class RemoveCollation(CollationOperation):
     @property
     def migration_name_fragment(self):
         return 'remove_collation_%s' % self.name.lower()
+
+
+class AddConstraintNotValid(AddConstraint):
+    """
+    Add a table constraint without enforcing validation, using PostgreSQL's
+    NOT VALID syntax.
+    """
+
+    def __init__(self, model_name, constraint):
+        if not isinstance(constraint, CheckConstraint):
+            raise TypeError(
+                'AddConstraintNotValid.constraint must be a check constraint.'
+            )
+        super().__init__(model_name, constraint)
+
+    def describe(self):
+        return 'Create not valid constraint %s on model %s' % (
+            self.constraint.name,
+            self.model_name,
+        )
+
+    def database_forwards(self, app_label, schema_editor, from_state, to_state):
+        model = from_state.apps.get_model(app_label, self.model_name)
+        if self.allow_migrate_model(schema_editor.connection.alias, model):
+            constraint_sql = self.constraint.create_sql(model, schema_editor)
+            if constraint_sql:
+                # Constraint.create_sql returns interpolated SQL which makes
+                # params=None a necessity to avoid escaping attempts on
+                # execution.
+                schema_editor.execute(str(constraint_sql) + ' NOT VALID', params=None)
+
+    @property
+    def migration_name_fragment(self):
+        return super().migration_name_fragment + '_not_valid'
+
+
+class ValidateConstraint(Operation):
+    """Validate a table NOT VALID constraint."""
+
+    def __init__(self, model_name, name):
+        self.model_name = model_name
+        self.name = name
+
+    def describe(self):
+        return 'Validate constraint %s on model %s' % (self.name, self.model_name)
+
+    def database_forwards(self, app_label, schema_editor, from_state, to_state):
+        model = from_state.apps.get_model(app_label, self.model_name)
+        if self.allow_migrate_model(schema_editor.connection.alias, model):
+            schema_editor.execute('ALTER TABLE %s VALIDATE CONSTRAINT %s' % (
+                schema_editor.quote_name(model._meta.db_table),
+                schema_editor.quote_name(self.name),
+            ))
+
+    def database_backwards(self, app_label, schema_editor, from_state, to_state):
+        # PostgreSQL does not provide a way to make a constraint invalid.
+        pass
+
+    def state_forwards(self, app_label, state):
+        pass
+
+    @property
+    def migration_name_fragment(self):
+        return '%s_validate_%s' % (self.model_name.lower(), self.name.lower())
+
+    def deconstruct(self):
+        return self.__class__.__name__, [], {
+            'model_name': self.model_name,
+            'name': self.name,
+        }
diff --git a/docs/ref/contrib/postgres/operations.txt b/docs/ref/contrib/postgres/operations.txt
index dc9faebcdb..4a0ef7a6b8 100644
--- a/docs/ref/contrib/postgres/operations.txt
+++ b/docs/ref/contrib/postgres/operations.txt
@@ -188,3 +188,39 @@ database.
 
     The ``CONCURRENTLY`` option is not supported inside a transaction (see
     :ref:`non-atomic migration <non-atomic-migrations>`).
+
+Adding constraints without enforcing validation
+===============================================
+
+.. versionadded:: 4.0
+
+PostgreSQL supports the ``NOT VALID`` option with the ``ADD CONSTRAINT``
+statement to add check constraints without enforcing validation on existing
+rows. This option is useful if you want to skip the potentially lengthy scan of
+the table to verify that all existing rows satisfy the constraint.
+
+To validate check constraints created with the ``NOT VALID`` option at a later
+point of time, use the
+:class:`~django.contrib.postgres.operations.ValidateConstraint` operation.
+
+See `the PostgreSQL documentation <https://www.postgresql.org/docs/current/
+sql-altertable.html#SQL-ALTERTABLE-NOTES>`__ for more details.
+
+.. class:: AddConstraintNotValid(model_name, constraint)
+
+    Like :class:`~django.db.migrations.operations.AddConstraint`, but avoids
+    validating the constraint on existing rows.
+
+.. class:: ValidateConstraint(model_name, name)
+
+    Scans through the table and validates the given check constraint on
+    existing rows.
+
+.. note::
+
+    ``AddConstraintNotValid`` and ``ValidateConstraint`` operations should be
+    performed in two separate migrations. Performing both operations in the
+    same atomic migration has the same effect as
+    :class:`~django.db.migrations.operations.AddConstraint`, whereas performing
+    them in a single non-atomic migration, may leave your database in an
+    inconsistent state if the ``ValidateConstraint`` operation fails.
diff --git a/docs/releases/4.0.txt b/docs/releases/4.0.txt
index 60c449bc88..2bdb76ef3d 100644
--- a/docs/releases/4.0.txt
+++ b/docs/releases/4.0.txt
@@ -122,6 +122,15 @@ Minor features
 * The PostgreSQL backend now supports connecting by a service name. See
   :ref:`postgresql-connection-settings` for more details.
 
+* The new :class:`~django.contrib.postgres.operations.AddConstraintNotValid`
+  operation allows creating check constraints on PostgreSQL without verifying
+  that all existing rows satisfy the new constraint.
+
+* The new :class:`~django.contrib.postgres.operations.ValidateConstraint`
+  operation allows validating check constraints which were created using
+  :class:`~django.contrib.postgres.operations.AddConstraintNotValid` on
+  PostgreSQL.
+
 :mod:`django.contrib.redirects`
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
diff --git a/tests/postgres_tests/test_operations.py b/tests/postgres_tests/test_operations.py
index 9faf938c55..1464f3177e 100644
--- a/tests/postgres_tests/test_operations.py
+++ b/tests/postgres_tests/test_operations.py
@@ -3,9 +3,11 @@ from unittest import mock
 
 from migrations.test_base import OperationTestBase
 
-from django.db import NotSupportedError, connection
+from django.db import (
+    IntegrityError, NotSupportedError, connection, transaction,
+)
 from django.db.migrations.state import ProjectState
-from django.db.models import Index
+from django.db.models import CheckConstraint, Index, Q, UniqueConstraint
 from django.db.utils import ProgrammingError
 from django.test import modify_settings, override_settings, skipUnlessDBFeature
 from django.test.utils import CaptureQueriesContext
@@ -15,8 +17,9 @@ from . import PostgreSQLTestCase
 try:
     from django.contrib.postgres.indexes import BrinIndex, BTreeIndex
     from django.contrib.postgres.operations import (
-        AddIndexConcurrently, BloomExtension, CreateCollation, CreateExtension,
-        RemoveCollation, RemoveIndexConcurrently,
+        AddConstraintNotValid, AddIndexConcurrently, BloomExtension,
+        CreateCollation, CreateExtension, RemoveCollation,
+        RemoveIndexConcurrently, ValidateConstraint,
     )
 except ImportError:
     pass
@@ -392,3 +395,102 @@ class RemoveCollationTests(PostgreSQLTestCase):
         self.assertEqual(name, 'RemoveCollation')
         self.assertEqual(args, [])
         self.assertEqual(kwargs, {'name': 'C_test', 'locale': 'C'})
+
+
+@unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific tests.')
+@modify_settings(INSTALLED_APPS={'append': 'migrations'})
+class AddConstraintNotValidTests(OperationTestBase):
+    app_label = 'test_add_constraint_not_valid'
+
+    def test_non_check_constraint_not_supported(self):
+        constraint = UniqueConstraint(fields=['pink'], name='pony_pink_uniq')
+        msg = 'AddConstraintNotValid.constraint must be a check constraint.'
+        with self.assertRaisesMessage(TypeError, msg):
+            AddConstraintNotValid(model_name='pony', constraint=constraint)
+
+    def test_add(self):
+        table_name = f'{self.app_label}_pony'
+        constraint_name = 'pony_pink_gte_check'
+        constraint = CheckConstraint(check=Q(pink__gte=4), name=constraint_name)
+        operation = AddConstraintNotValid('Pony', constraint=constraint)
+        project_state, new_state = self.make_test_state(self.app_label, operation)
+        self.assertEqual(
+            operation.describe(),
+            f'Create not valid constraint {constraint_name} on model Pony',
+        )
+        self.assertEqual(
+            operation.migration_name_fragment,
+            f'pony_{constraint_name}_not_valid',
+        )
+        self.assertEqual(
+            len(new_state.models[self.app_label, 'pony'].options['constraints']),
+            1,
+        )
+        self.assertConstraintNotExists(table_name, constraint_name)
+        Pony = new_state.apps.get_model(self.app_label, 'Pony')
+        self.assertEqual(len(Pony._meta.constraints), 1)
+        Pony.objects.create(pink=2, weight=1.0)
+        # Add constraint.
+        with connection.schema_editor(atomic=True) as editor:
+            operation.database_forwards(self.app_label, editor, project_state, new_state)
+        msg = f'check constraint "{constraint_name}"'
+        with self.assertRaisesMessage(IntegrityError, msg), transaction.atomic():
+            Pony.objects.create(pink=3, weight=1.0)
+        self.assertConstraintExists(table_name, constraint_name)
+        # Reversal.
+        with connection.schema_editor(atomic=True) as editor:
+            operation.database_backwards(self.app_label, editor, project_state, new_state)
+        self.assertConstraintNotExists(table_name, constraint_name)
+        Pony.objects.create(pink=3, weight=1.0)
+        # Deconstruction.
+        name, args, kwargs = operation.deconstruct()
+        self.assertEqual(name, 'AddConstraintNotValid')
+        self.assertEqual(args, [])
+        self.assertEqual(kwargs, {'model_name': 'Pony', 'constraint': constraint})
+
+
+@unittest.skipUnless(connection.vendor == 'postgresql', 'PostgreSQL specific tests.')
+@modify_settings(INSTALLED_APPS={'append': 'migrations'})
+class ValidateConstraintTests(OperationTestBase):
+    app_label = 'test_validate_constraint'
+
+    def test_validate(self):
+        constraint_name = 'pony_pink_gte_check'
+        constraint = CheckConstraint(check=Q(pink__gte=4), name=constraint_name)
+        operation = AddConstraintNotValid('Pony', constraint=constraint)
+        project_state, new_state = self.make_test_state(self.app_label, operation)
+        Pony = new_state.apps.get_model(self.app_label, 'Pony')
+        obj = Pony.objects.create(pink=2, weight=1.0)
+        # Add constraint.
+        with connection.schema_editor(atomic=True) as editor:
+            operation.database_forwards(self.app_label, editor, project_state, new_state)
+        project_state = new_state
+        new_state = new_state.clone()
+        operation = ValidateConstraint('Pony', name=constraint_name)
+        operation.state_forwards(self.app_label, new_state)
+        self.assertEqual(
+            operation.describe(),
+            f'Validate constraint {constraint_name} on model Pony',
+        )
+        self.assertEqual(
+            operation.migration_name_fragment,
+            f'pony_validate_{constraint_name}',
+        )
+        # Validate constraint.
+        with connection.schema_editor(atomic=True) as editor:
+            msg = f'check constraint "{constraint_name}"'
+            with self.assertRaisesMessage(IntegrityError, msg):
+                operation.database_forwards(self.app_label, editor, project_state, new_state)
+        obj.pink = 5
+        obj.save()
+        with connection.schema_editor(atomic=True) as editor:
+            operation.database_forwards(self.app_label, editor, project_state, new_state)
+        # Reversal is a noop.
+        with connection.schema_editor() as editor:
+            with self.assertNumQueries(0):
+                operation.database_backwards(self.app_label, editor, new_state, project_state)
+        # Deconstruction.
+        name, args, kwargs = operation.deconstruct()
+        self.assertEqual(name, 'ValidateConstraint')
+        self.assertEqual(args, [])
+        self.assertEqual(kwargs, {'model_name': 'Pony', 'name': constraint_name})
+ git diff 8c3bd0b708b488a1f6e8bd8cc6b96569904605be
diff --git a/django/db/migrations/executor.py b/django/db/migrations/executor.py
index 57042a8690..a2d592ddc9 100644
--- a/django/db/migrations/executor.py
+++ b/django/db/migrations/executor.py
@@ -33,10 +33,26 @@ class MigrationExecutor:
             if target[1] is None:
                 for root in self.loader.graph.root_nodes():
                     if root[0] == target[0]:
+                        # First, find any squashed migrations that need to be unapplied
+                        for key, squashed in self.loader.replacements.items():
+                            if key in applied and key[0] == target[0]:
+                                plan.append((self.loader.graph.nodes[key], True))
+                                applied.pop(key)
+                                # Also mark all replaced migrations as needing to be unapplied
+                                for replaced in squashed.replaces:
+                                    if replaced in applied:
+                                        plan.append((self.loader.graph.nodes[replaced], True))
+                                        applied.pop(replaced)
+                        # Then unapply the regular migrations
                         for migration in self.loader.graph.backwards_plan(root):
                             if migration in applied:
                                 plan.append((self.loader.graph.nodes[migration], True))
                                 applied.pop(migration)
+                                # Also mark any squashed migrations that contain this migration as needing to be unapplied
+                                for key, squashed in self.loader.replacements.items():
+                                    if migration in squashed.replaces and key in applied:
+                                        plan.append((self.loader.graph.nodes[key], True))
+                                        applied.pop(key)
             # If the migration is already applied, do backwards mode,
             # otherwise do forwards mode.
             elif target in applied:
@@ -50,10 +66,26 @@ class MigrationExecutor:
                     if n[0] == target[0]
                 )
                 for node in next_in_app:
+                    # First, find any squashed migrations that need to be unapplied
+                    for key, squashed in self.loader.replacements.items():
+                        if key in applied and key[0] == target[0]:
+                            plan.append((self.loader.graph.nodes[key], True))
+                            applied.pop(key)
+                            # Also mark all replaced migrations as needing to be unapplied
+                            for replaced in squashed.replaces:
+                                if replaced in applied:
+                                    plan.append((self.loader.graph.nodes[replaced], True))
+                                    applied.pop(replaced)
+                    # Then unapply the regular migrations
                     for migration in self.loader.graph.backwards_plan(node):
                         if migration in applied:
                             plan.append((self.loader.graph.nodes[migration], True))
                             applied.pop(migration)
+                            # Also mark any squashed migrations that contain this migration as needing to be unapplied
+                            for key, squashed in self.loader.replacements.items():
+                                if migration in squashed.replaces and key in applied:
+                                    plan.append((self.loader.graph.nodes[key], True))
+                                    applied.pop(key)
             else:
                 for migration in self.loader.graph.forwards_plan(target):
                     if migration not in applied:
@@ -118,10 +150,19 @@ class MigrationExecutor:
         else:
             # No need to check for `elif all_backwards` here, as that condition
             # would always evaluate to true.
+            # First, find any squashed migrations that contain the migrations we're unapplying
+            for migration, _ in plan:
+                for key, squashed in self.loader.replacements.items():
+                    if (migration.app_label, migration.name) in squashed.replaces:
+                        # If this migration is part of a squashed migration, mark the squashed migration as unapplied
+                        self.recorder.record_unapplied(*key)
+                        # Also mark all other replaced migrations as unapplied
+                        for replaced_app_label, replaced_name in squashed.replaces:
+                            if (replaced_app_label, replaced_name) != (migration.app_label, migration.name):
+                                self.recorder.record_unapplied(replaced_app_label, replaced_name)
+            # Then unapply the migrations
             state = self._migrate_all_backwards(plan, full_plan, fake=fake)
 
-        self.check_replacements()
-
         return state
 
     def _migrate_all_forwards(self, state, plan, full_plan, fake, fake_initial):
@@ -195,6 +236,8 @@ class MigrationExecutor:
         for migration, _ in plan:
             self.unapply_migration(states[migration], migration, fake=fake)
             applied_migrations.remove(migration)
+            # Check replacements after each unapply to ensure squashed migrations are marked correctly
+            self.check_replacements()
 
         # Generate the post migration state by starting from the state before
         # the last migration is unapplied and mutating it to include all the
@@ -254,8 +297,25 @@ class MigrationExecutor:
         if migration.replaces:
             for app_label, name in migration.replaces:
                 self.recorder.record_unapplied(app_label, name)
+            # Also mark the squashed migration as unapplied
+            self.recorder.record_unapplied(migration.app_label, migration.name)
         else:
             self.recorder.record_unapplied(migration.app_label, migration.name)
+            # Check if this migration is part of any squashed migrations
+            for key, squashed in self.loader.replacements.items():
+                if (migration.app_label, migration.name) in squashed.replaces:
+                    # If this migration is part of a squashed migration, mark the squashed migration as unapplied
+                    self.recorder.record_unapplied(*key)
+                    # Also mark all other replaced migrations as unapplied
+                    for replaced_app_label, replaced_name in squashed.replaces:
+                        if (replaced_app_label, replaced_name) != (migration.app_label, migration.name):
+                            self.recorder.record_unapplied(replaced_app_label, replaced_name)
+        # Check if any squashed migrations need to be marked as unapplied
+        for key, squashed in self.loader.replacements.items():
+            if key in self.loader.applied_migrations:
+                # If any of the replaced migrations are unapplied, mark the squashed migration as unapplied
+                if any(m not in self.loader.applied_migrations for m in squashed.replaces):
+                    self.recorder.record_unapplied(*key)
         # Report progress
         if self.progress_callback:
             self.progress_callback("unapply_success", migration, fake)
@@ -263,7 +323,8 @@ class MigrationExecutor:
 
     def check_replacements(self):
         """
-        Mark replacement migrations applied if their replaced set all are.
+        Mark replacement migrations applied if their replaced set all are,
+        and mark them unapplied if any of their replaced migrations are unapplied.
 
         Do this unconditionally on every migrate, rather than just when
         migrations are applied or unapplied, to correctly handle the case
@@ -274,9 +335,31 @@ class MigrationExecutor:
         """
         applied = self.recorder.applied_migrations()
         for key, migration in self.loader.replacements.items():
-            all_applied = all(m in applied for m in migration.replaces)
-            if all_applied and key not in applied:
-                self.recorder.record_applied(*key)
+            # Check if any of the replaced migrations are unapplied
+            any_unapplied = any(m not in applied for m in migration.replaces)
+            if any_unapplied:
+                # If any replaced migration is unapplied, mark the squashed migration as unapplied
+                if key in applied:
+                    self.recorder.record_unapplied(*key)
+                # Also mark all replaced migrations as unapplied
+                for replaced in migration.replaces:
+                    if replaced in applied:
+                        self.recorder.record_unapplied(*replaced)
+            else:
+                # If all replaced migrations are applied, mark the squashed migration as applied
+                if key not in applied:
+                    self.recorder.record_applied(*key)
+            # Also check if any replaced migrations are unapplied
+            for replaced in migration.replaces:
+                if replaced not in applied:
+                    # If a replaced migration is unapplied, mark the squashed migration as unapplied
+                    if key in applied:
+                        self.recorder.record_unapplied(*key)
+                        # Also mark all other replaced migrations as unapplied
+                        for other_replaced in migration.replaces:
+                            if other_replaced != replaced and other_replaced in applied:
+                                self.recorder.record_unapplied(*other_replaced)
+                        break
 
     def detect_soft_applied(self, project_state, migration):
         """
diff --git a/django/db/migrations/graph.py b/django/db/migrations/graph.py
index f70e359018..71c4919897 100644
--- a/django/db/migrations/graph.py
+++ b/django/db/migrations/graph.py
@@ -156,39 +156,33 @@ class MigrationGraph:
 
     def remove_replacement_node(self, replacement, replaced):
         """
-        The inverse operation to `remove_replaced_nodes`. Almost. Remove the
-        replacement node `replacement` and remap its child nodes to `replaced`
-        - the list of nodes it would have replaced. Don't remap its parent
-        nodes as they are expected to be correct already.
+        The inverse operation to `remove_replaced_nodes`. Almost. Instead of removing
+        the replacement node, keep both it and its replaced nodes in the graph,
+        but ensure they are properly linked so that when unapplying migrations,
+        both sets are handled correctly.
         """
-        self.nodes.pop(replacement, None)
         try:
-            replacement_node = self.node_map.pop(replacement)
+            replacement_node = self.node_map[replacement]
         except KeyError as err:
             raise NodeNotFoundError(
-                "Unable to remove replacement node %r. It was either never added"
+                "Unable to find replacement node %r. It was either never added"
                 " to the migration graph, or has been removed already." % (replacement,),
                 replacement
             ) from err
-        replaced_nodes = set()
-        replaced_nodes_parents = set()
+
+        # Get all replaced nodes that exist
+        replaced_nodes = []
         for key in replaced:
             replaced_node = self.node_map.get(key)
             if replaced_node:
-                replaced_nodes.add(replaced_node)
-                replaced_nodes_parents |= replaced_node.parents
-        # We're only interested in the latest replaced node, so filter out
-        # replaced nodes that are parents of other replaced nodes.
-        replaced_nodes -= replaced_nodes_parents
-        for child in replacement_node.children:
-            child.parents.remove(replacement_node)
-            for replaced_node in replaced_nodes:
-                replaced_node.add_child(child)
-                child.add_parent(replaced_node)
-        for parent in replacement_node.parents:
-            parent.children.remove(replacement_node)
-            # NOTE: There is no need to remap parent dependencies as we can
-            # assume the replaced nodes already have the correct ancestry.
+                replaced_nodes.append(replaced_node)
+
+        # Add dependencies between replacement and replaced nodes
+        for replaced_node in replaced_nodes:
+            # Make the replacement node depend on all replaced nodes
+            # This ensures that when unapplying, the replacement is unapplied first
+            replacement_node.add_parent(replaced_node)
+            replaced_node.add_child(replacement_node)
 
     def validate_consistency(self):
         """Ensure there are no dummy nodes remaining in the graph."""
diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index eb370164f3..5eced481be 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -245,15 +245,15 @@ class MigrationLoader:
                     self.applied_migrations[key] = migration
                 else:
                     self.applied_migrations.pop(key, None)
-                # A replacing migration can be used if either all or none of
-                # its replacement targets have been applied.
-                if all(applied_statuses) or (not any(applied_statuses)):
-                    self.graph.remove_replaced_nodes(key, migration.replaces)
+                # Keep both the squashed migration and its replaced migrations
+                # in the graph to handle unapply correctly
+                if all(applied_statuses):
+                    self.applied_migrations[key] = migration
                 else:
-                    # This replacing migration cannot be used because it is
-                    # partially applied. Remove it from the graph and remap
-                    # dependencies to it (#25945).
-                    self.graph.remove_replacement_node(key, migration.replaces)
+                    self.applied_migrations.pop(key, None)
+                # Add dependencies between the squashed migration and its replaced migrations
+                for replaced in migration.replaces:
+                    self.graph.add_dependency(migration, key, replaced, skip_validation=True)
         # Ensure the graph is consistent.
         try:
             self.graph.validate_consistency()
diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..922f71a8b2 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -84,12 +84,33 @@ class MigrationRecorder:
     def record_applied(self, app, name):
         """Record that a migration was applied."""
         self.ensure_schema()
+        # Create the migration record
         self.migration_qs.create(app=app, name=name)
+        # Also mark any squashed migrations that contain this migration as applied
+        for migration in self.migration_qs.all():
+            if hasattr(migration, 'replaces') and (app, name) in migration.replaces:
+                self.migration_qs.get_or_create(app=migration.app, name=migration.name)
 
     def record_unapplied(self, app, name):
         """Record that a migration was unapplied."""
         self.ensure_schema()
+        # Delete the migration record
         self.migration_qs.filter(app=app, name=name).delete()
+        # Also delete any squashed migrations that contain this migration
+        for migration in self.migration_qs.all():
+            if hasattr(migration, 'replaces') and (app, name) in migration.replaces:
+                self.migration_qs.filter(app=migration.app, name=migration.name).delete()
+                # Also delete all other replaced migrations
+                for replaced_app, replaced_name in migration.replaces:
+                    self.migration_qs.filter(app=replaced_app, name=replaced_name).delete()
+                # Also delete any squashed migrations that contain any of the replaced migrations
+                for replaced_app, replaced_name in migration.replaces:
+                    for other_migration in self.migration_qs.all():
+                        if hasattr(other_migration, 'replaces') and (replaced_app, replaced_name) in other_migration.replaces:
+                            self.migration_qs.filter(app=other_migration.app, name=other_migration.name).delete()
+                            # Also delete all other replaced migrations in the squashed migration
+                            for other_replaced_app, other_replaced_name in other_migration.replaces:
+                                self.migration_qs.filter(app=other_replaced_app, name=other_replaced_name).delete()
 
     def flush(self):
         """Delete all migration records. Useful for testing migrations."""
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.3.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210608054651) (3.8.1)
Requirement already satisfied: pytz in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210608054651) (2024.2)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from Django==4.0.dev20210608054651) (0.5.1)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.8/site-packages (from asgiref>=3.3.2->Django==4.0.dev20210608054651) (4.12.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=Django-4.0.dev20210608054651-0.editable-py3-none-any.whl size=26213 sha256=8c86320d51e1509c5c25e3fdfc2b8dc61092194c3b2404214b52087fc57d20c4
  Stored in directory: /tmp/pip-ephem-wheel-cache-g03wkcla/wheels/b2/50/f1/218f2e9962a80d01a4b1297698978f9fb3b60056aa24343f24
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.0.dev20210608054651
    Uninstalling Django-4.0.dev20210608054651:
      Successfully uninstalled Django-4.0.dev20210608054651
Successfully installed Django-4.0.dev20210608054651
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 8c3bd0b708b488a1f6e8bd8cc6b96569904605be tests/migrations/test_executor.py
Updated 0 paths from 4e6717eecc
+ git apply -v -
Checking patch tests/migrations/test_executor.py...
Applied patch tests/migrations/test_executor.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 migrations.test_executor
Testing against Django installed in '/testbed/django'
Importing application migrations
Found 22 test(s).
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, migrations, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table migrations_modelwithcustombase
    Creating table migrations_unmigratedmodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, migrations, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table migrations_modelwithcustombase
    Creating table migrations_unmigratedmodel
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique...Creating test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
 OK
System check identified no issues (0 silenced).
test_alter_id_type_with_fk (migrations.test_executor.ExecutorTests) ... ok
test_apply_all_replaced_marks_replacement_as_applied (migrations.test_executor.ExecutorTests)
Applying all replaced migrations marks replacement as applied (#24628). ... FAIL
test_atomic_operation_in_non_atomic_migration (migrations.test_executor.ExecutorTests)
An atomic operation is properly rolled back inside a non-atomic ... ok
test_custom_user (migrations.test_executor.ExecutorTests)
Regression test for #22325 - references to a custom user model defined in the ... ok
test_detect_soft_applied_add_field_manytomanyfield (migrations.test_executor.ExecutorTests)
executor.detect_soft_applied() detects ManyToManyField tables from an ... ok
test_empty_plan (migrations.test_executor.ExecutorTests)
Re-planning a full migration of a fully-migrated set doesn't ... ok
test_migrate_marks_replacement_applied_even_if_it_did_nothing (migrations.test_executor.ExecutorTests)
A new squash migration will be marked as applied even if all its ... FAIL
test_migrate_marks_replacement_unapplied (migrations.test_executor.ExecutorTests) ... ERROR
test_migrations_applied_and_recorded_atomically (migrations.test_executor.ExecutorTests)
Migrations are applied and recorded atomically. ... ok
test_migrations_not_applied_on_deferred_sql_failure (migrations.test_executor.ExecutorTests)
Migrations are not recorded if deferred SQL application fails. ... ok
test_mixed_plan_not_supported (migrations.test_executor.ExecutorTests)
Although the MigrationExecutor interfaces allows for mixed migration ... ERROR
test_non_atomic_migration (migrations.test_executor.ExecutorTests)
Applying a non-atomic migration works as expected. ... FAIL
test_process_callback (migrations.test_executor.ExecutorTests)
#24129 - Tests callback process ... FAIL
test_run (migrations.test_executor.ExecutorTests)
Tests running a simple set of migrations. ... FAIL
test_run_with_squashed (migrations.test_executor.ExecutorTests)
Tests running a squashed migration from zero (should ignore what it replaces) ... FAIL
test_soft_apply (migrations.test_executor.ExecutorTests)
Tests detection of initial migrations already having been applied. ... FAIL
test_unrelated_applied_migrations_mutate_state (migrations.test_executor.ExecutorTests)
#26647 - Unrelated applied migrations should be part of the final ... ok
test_unrelated_model_lookups_backwards (migrations.test_executor.ExecutorTests)
#24123 - All models of apps being unapplied which are ... ok
test_unrelated_model_lookups_forwards (migrations.test_executor.ExecutorTests)
#24123 - All models of apps already applied which are ... ok
test_backwards_nothing_to_do (migrations.test_executor.ExecutorUnitTests)
If the current state satisfies the given target, do nothing. ... ERROR
test_minimize_rollbacks (migrations.test_executor.ExecutorUnitTests)
Minimize unnecessary rollbacks in connected apps. ... ERROR
test_minimize_rollbacks_branchy (migrations.test_executor.ExecutorUnitTests)
Minimize rollbacks when target has multiple in-app children. ... ERROR

======================================================================
ERROR: test_migrate_marks_replacement_unapplied (migrations.test_executor.ExecutorTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/db/backends/utils.py", line 82, in _execute
    return self.cursor.execute(sql)
  File "/testbed/django/db/backends/sqlite3/base.py", line 414, in execute
    return Database.Cursor.execute(self, query)
sqlite3.OperationalError: table "migrations_author" already exists

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/migrations/test_executor.py", line 659, in test_migrate_marks_replacement_unapplied
    executor.migrate([('migrations', '0001_squashed_0002')])
  File "/testbed/django/db/migrations/executor.py", line 149, in migrate
    state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)
  File "/testbed/django/db/migrations/executor.py", line 188, in _migrate_all_forwards
    state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)
  File "/testbed/django/db/migrations/executor.py", line 270, in apply_migration
    state = migration.apply(state, schema_editor)
  File "/testbed/django/db/migrations/migration.py", line 125, in apply
    operation.database_forwards(self.app_label, schema_editor, old_state, project_state)
  File "/testbed/django/db/migrations/operations/models.py", line 93, in database_forwards
    schema_editor.create_model(model)
  File "/testbed/django/db/backends/base/schema.py", line 338, in create_model
    self.execute(sql, params or None)
  File "/testbed/django/db/backends/base/schema.py", line 145, in execute
    cursor.execute(sql, params)
  File "/testbed/django/db/backends/utils.py", line 66, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
  File "/testbed/django/db/backends/utils.py", line 75, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/testbed/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
  File "/testbed/django/db/utils.py", line 90, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/testbed/django/db/backends/utils.py", line 82, in _execute
    return self.cursor.execute(sql)
  File "/testbed/django/db/backends/sqlite3/base.py", line 414, in execute
    return Database.Cursor.execute(self, query)
django.db.utils.OperationalError: table "migrations_author" already exists

======================================================================
ERROR: test_mixed_plan_not_supported (migrations.test_executor.ExecutorTests)
Although the MigrationExecutor interfaces allows for mixed migration
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/db/backends/utils.py", line 82, in _execute
    return self.cursor.execute(sql)
  File "/testbed/django/db/backends/sqlite3/base.py", line 414, in execute
    return Database.Cursor.execute(self, query)
sqlite3.OperationalError: table "migrations_author" already exists

The above exception was the direct cause of the following exception:

Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/migrations/test_executor.py", line 216, in test_mixed_plan_not_supported
    executor.migrate(None, plan)
  File "/testbed/django/db/migrations/executor.py", line 149, in migrate
    state = self._migrate_all_forwards(state, plan, full_plan, fake=fake, fake_initial=fake_initial)
  File "/testbed/django/db/migrations/executor.py", line 188, in _migrate_all_forwards
    state = self.apply_migration(state, migration, fake=fake, fake_initial=fake_initial)
  File "/testbed/django/db/migrations/executor.py", line 270, in apply_migration
    state = migration.apply(state, schema_editor)
  File "/testbed/django/db/migrations/migration.py", line 125, in apply
    operation.database_forwards(self.app_label, schema_editor, old_state, project_state)
  File "/testbed/django/db/migrations/operations/models.py", line 93, in database_forwards
    schema_editor.create_model(model)
  File "/testbed/django/db/backends/base/schema.py", line 338, in create_model
    self.execute(sql, params or None)
  File "/testbed/django/db/backends/base/schema.py", line 145, in execute
    cursor.execute(sql, params)
  File "/testbed/django/db/backends/utils.py", line 66, in execute
    return self._execute_with_wrappers(sql, params, many=False, executor=self._execute)
  File "/testbed/django/db/backends/utils.py", line 75, in _execute_with_wrappers
    return executor(sql, params, many, context)
  File "/testbed/django/db/backends/utils.py", line 84, in _execute
    return self.cursor.execute(sql, params)
  File "/testbed/django/db/utils.py", line 90, in __exit__
    raise dj_exc_value.with_traceback(traceback) from exc_value
  File "/testbed/django/db/backends/utils.py", line 82, in _execute
    return self.cursor.execute(sql)
  File "/testbed/django/db/backends/sqlite3/base.py", line 414, in execute
    return Database.Cursor.execute(self, query)
django.db.utils.OperationalError: table "migrations_author" already exists

======================================================================
ERROR: test_backwards_nothing_to_do (migrations.test_executor.ExecutorUnitTests)
If the current state satisfies the given target, do nothing.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_executor.py", line 869, in test_backwards_nothing_to_do
    plan = executor.migration_plan({a1})
  File "/testbed/django/db/migrations/executor.py", line 70, in migration_plan
    for key, squashed in self.loader.replacements.items():
AttributeError: 'FakeLoader' object has no attribute 'replacements'

======================================================================
ERROR: test_minimize_rollbacks (migrations.test_executor.ExecutorUnitTests)
Minimize unnecessary rollbacks in connected apps.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_executor.py", line 779, in test_minimize_rollbacks
    plan = executor.migration_plan({a1})
  File "/testbed/django/db/migrations/executor.py", line 70, in migration_plan
    for key, squashed in self.loader.replacements.items():
AttributeError: 'FakeLoader' object has no attribute 'replacements'

======================================================================
ERROR: test_minimize_rollbacks_branchy (migrations.test_executor.ExecutorUnitTests)
Minimize rollbacks when target has multiple in-app children.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/migrations/test_executor.py", line 829, in test_minimize_rollbacks_branchy
    plan = executor.migration_plan({a1})
  File "/testbed/django/db/migrations/executor.py", line 70, in migration_plan
    for key, squashed in self.loader.replacements.items():
AttributeError: 'FakeLoader' object has no attribute 'replacements'

======================================================================
FAIL: test_apply_all_replaced_marks_replacement_as_applied (migrations.test_executor.ExecutorTests)
Applying all replaced migrations marks replacement as applied (#24628).
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/migrations/test_executor.py", line 630, in test_apply_all_replaced_marks_replacement_as_applied
    self.assertIn(
AssertionError: ('migrations', '0001_squashed_0002') not found in {('admin', '0001_initial'): <Migration: Migration 0001_initial for admin>, ('admin', '0002_logentry_remove_auto_add'): <Migration: Migration 0002_logentry_remove_auto_add for admin>, ('admin', '0003_logentry_add_action_flag_choices'): <Migration: Migration 0003_logentry_add_action_flag_choices for admin>, ('sites', '0001_initial'): <Migration: Migration 0001_initial for sites>, ('sites', '0002_alter_domain_unique'): <Migration: Migration 0002_alter_domain_unique for sites>, ('migrations', '0001_initial'): <Migration: Migration 0001_initial for migrations>, ('migrations', '0002_second'): <Migration: Migration 0002_second for migrations>}

======================================================================
FAIL: test_migrate_marks_replacement_applied_even_if_it_did_nothing (migrations.test_executor.ExecutorTests)
A new squash migration will be marked as applied even if all its
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/migrations/test_executor.py", line 651, in test_migrate_marks_replacement_applied_even_if_it_did_nothing
    self.assertIn(
AssertionError: ('migrations', '0001_squashed_0002') not found in {('admin', '0001_initial'): <Migration: Migration 0001_initial for admin>, ('admin', '0002_logentry_remove_auto_add'): <Migration: Migration 0002_logentry_remove_auto_add for admin>, ('admin', '0003_logentry_add_action_flag_choices'): <Migration: Migration 0003_logentry_add_action_flag_choices for admin>, ('sites', '0001_initial'): <Migration: Migration 0001_initial for sites>, ('sites', '0002_alter_domain_unique'): <Migration: Migration 0002_alter_domain_unique for sites>, ('migrations', '0001_initial'): <Migration: Migration 0001_initial for migrations>, ('migrations', '0002_second'): <Migration: Migration 0002_second for migrations>}

======================================================================
FAIL: test_non_atomic_migration (migrations.test_executor.ExecutorTests)
Applying a non-atomic migration works as expected.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/migrations/test_executor.py", line 119, in test_non_atomic_migration
    self.assertTableNotExists("migrations_book")
  File "/testbed/tests/migrations/test_base.py", line 41, in assertTableNotExists
    self.assertNotIn(table, connections[using].introspection.table_names(cursor))
AssertionError: 'migrations_book' unexpectedly found in ['auth_group', 'auth_group_permissions', 'auth_permission', 'auth_user', 'auth_user_groups', 'auth_user_user_permissions', 'django_admin_log', 'django_content_type', 'django_migrations', 'django_session', 'django_site', 'migrations_author', 'migrations_book', 'migrations_editor', 'migrations_modelwithcustombase', 'migrations_publisher', 'migrations_unmigratedmodel']

======================================================================
FAIL: test_process_callback (migrations.test_executor.ExecutorTests)
#24129 - Tests callback process
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/migrations/test_executor.py", line 543, in test_process_callback
    self.assertTableNotExists("migrations_author")
  File "/testbed/tests/migrations/test_base.py", line 41, in assertTableNotExists
    self.assertNotIn(table, connections[using].introspection.table_names(cursor))
AssertionError: 'migrations_author' unexpectedly found in ['auth_group', 'auth_group_permissions', 'auth_permission', 'auth_user', 'auth_user_groups', 'auth_user_user_permissions', 'django_admin_log', 'django_content_type', 'django_migrations', 'django_session', 'django_site', 'migrations_author', 'migrations_book', 'migrations_editor', 'migrations_modelwithcustombase', 'migrations_publisher', 'migrations_unmigratedmodel']

======================================================================
FAIL: test_run (migrations.test_executor.ExecutorTests)
Tests running a simple set of migrations.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/migrations/test_executor.py", line 44, in test_run
    self.assertTableNotExists("migrations_author")
  File "/testbed/tests/migrations/test_base.py", line 41, in assertTableNotExists
    self.assertNotIn(table, connections[using].introspection.table_names(cursor))
AssertionError: 'migrations_author' unexpectedly found in ['auth_group', 'auth_group_permissions', 'auth_permission', 'auth_user', 'auth_user_groups', 'auth_user_user_permissions', 'django_admin_log', 'django_content_type', 'django_migrations', 'django_session', 'django_site', 'migrations_author', 'migrations_book', 'migrations_editor', 'migrations_modelwithcustombase', 'migrations_publisher', 'migrations_unmigratedmodel']

======================================================================
FAIL: test_run_with_squashed (migrations.test_executor.ExecutorTests)
Tests running a squashed migration from zero (should ignore what it replaces)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/migrations/test_executor.py", line 78, in test_run_with_squashed
    self.assertEqual(
AssertionError: Lists differ: [(<Mi[19 chars]0001_initial>, False), (<Migration migrations.[68 chars]lse)] != [(<Mi[19 chars]0001_squashed_0002>, False)]

First differing element 0:
(<Migration migrations.0001_initial>, False)
(<Migration migrations.0001_squashed_0002>, False)

First list contains 2 additional elements.
First extra element 1:
(<Migration migrations.0002_second>, False)

- [(<Migration migrations.0001_initial>, False),
-  (<Migration migrations.0002_second>, False),
-  (<Migration migrations.0001_squashed_0002>, False)]
? ^

+ [(<Migration migrations.0001_squashed_0002>, False)]
? ^


======================================================================
FAIL: test_soft_apply (migrations.test_executor.ExecutorTests)
Tests detection of initial migrations already having been applied.
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/django/test/utils.py", line 430, in inner
    return func(*args, **kwargs)
  File "/testbed/tests/migrations/test_executor.py", line 265, in test_soft_apply
    self.assertTableNotExists("migrations_author")
  File "/testbed/tests/migrations/test_base.py", line 41, in assertTableNotExists
    self.assertNotIn(table, connections[using].introspection.table_names(cursor))
AssertionError: 'migrations_author' unexpectedly found in ['auth_group', 'auth_group_permissions', 'auth_permission', 'auth_user', 'auth_user_groups', 'auth_user_user_permissions', 'django_admin_log', 'django_content_type', 'django_migrations', 'django_session', 'django_site', 'migrations_author', 'migrations_book', 'migrations_editor', 'migrations_modelwithcustombase', 'migrations_publisher', 'migrations_unmigratedmodel']

----------------------------------------------------------------------
Ran 22 tests in 0.722s

FAILED (failures=7, errors=5)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
+ git checkout 8c3bd0b708b488a1f6e8bd8cc6b96569904605be tests/migrations/test_executor.py
Updated 1 path from 4e6717eecc
