diff --git a/django/db/models/query.py b/django/db/models/query.py
index 07d6ffd4ca..81a7cf8fa2 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -919,6 +919,10 @@ class QuerySet:
     def none(self):
         """Return an empty QuerySet."""
         clone = self._chain()
+        if clone.query.combinator:
+            # For combined queries (union, intersection, etc.), we need to handle none() differently
+            # to ensure it returns an empty queryset
+            return self.__class__(self.model).none()
         clone.query.set_empty()
         return clone
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..10e28f25f8
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,112 @@
+import os
+import django
+from django.db import models
+from django import forms
+from django.contrib import admin
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.conf import settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        'django.contrib.admin',
+        'test_app',
+    ],
+    MIDDLEWARE=[],
+    SECRET_KEY='dummy',
+)
+django.setup()
+
+# Define models
+class Publication(models.Model):
+    name = models.CharField(max_length=100)
+
+    def __str__(self):
+        return f"Publication(id={self.id}, name={self.name})"
+    
+    class Meta:
+        app_label = 'test_app'
+
+class Article(models.Model):
+    title = models.CharField(max_length=100)
+    publications = models.ManyToManyField(to=Publication, blank=True)
+
+    def __str__(self):
+        return f"Article(id={self.id}, title={self.title})"
+    
+    class Meta:
+        app_label = 'test_app'
+
+# Create test data
+def setup_test_data():
+    # Create publications
+    for i in range(1, 8):
+        Publication.objects.create(name=f"Publication {i}")
+
+    # Create an article
+    article = Article.objects.create(title="Test Article")
+    return article
+
+def test_or_operator():
+    print("\nTesting OR operator (|):")
+    article = setup_test_data()
+    
+    # Create form with OR operator
+    class ArticleForm(forms.ModelForm):
+        publications = forms.ModelMultipleChoiceField(
+            Publication.objects.filter(id__lt=2) | Publication.objects.filter(id__gt=5),
+            required=False,
+        )
+        class Meta:
+            model = Article
+            fields = ["publications"]
+    
+    # Test empty form submission
+    form = ArticleForm({'publications': []}, instance=article)
+    if form.is_valid():
+        form.save()
+        print("Publications after OR operator empty submission:", article.publications.all())
+    else:
+        print("Form errors:", form.errors)
+
+def test_union():
+    print("\nTesting union():")
+    article = setup_test_data()
+    
+    # Create form with union()
+    class ArticleForm(forms.ModelForm):
+        publications = forms.ModelMultipleChoiceField(
+            Publication.objects.filter(id__lt=2).union(
+                Publication.objects.filter(id__gt=5)
+            ),
+            required=False,
+        )
+        class Meta:
+            model = Article
+            fields = ["publications"]
+    
+    # Test empty form submission
+    form = ArticleForm({'publications': []}, instance=article)
+    if form.is_valid():
+        form.save()
+        print("Publications after union() empty submission:", article.publications.all())
+    else:
+        print("Form errors:", form.errors)
+
+if __name__ == '__main__':
+    # Create tables
+    from django.core import management
+    management.call_command('migrate')
+    
+    test_or_operator()
+    test_union()
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..14f1509d34
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,24 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='Publication',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+            ],
+        ),
+        migrations.CreateModel(
+            name='Article',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=100)),
+                ('publications', models.ManyToManyField(blank=True, to='test_app.Publication')),
+            ],
+        ),
+    ]
\ No newline at end of file
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
