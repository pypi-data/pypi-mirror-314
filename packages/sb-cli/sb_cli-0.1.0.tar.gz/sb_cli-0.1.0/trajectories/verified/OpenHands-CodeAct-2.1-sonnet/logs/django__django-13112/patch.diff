diff --git a/django/apps/config.py b/django/apps/config.py
index 2728503d62..82ed20f88f 100644
--- a/django/apps/config.py
+++ b/django/apps/config.py
@@ -28,7 +28,10 @@ class AppConfig:
         # Last component of the Python path to the application e.g. 'admin'.
         # This value must be unique across a Django project.
         if not hasattr(self, 'label'):
+            # Keep the original case for display purposes
             self.label = app_name.rpartition(".")[2]
+            # Store lowercase version for case-insensitive lookups
+            self._label_lower = self.label.lower()
 
         # Human-readable name for the application e.g. "Admin".
         if not hasattr(self, 'verbose_name'):
diff --git a/django/apps/registry.py b/django/apps/registry.py
index 408964a146..d676dad918 100644
--- a/django/apps/registry.py
+++ b/django/apps/registry.py
@@ -89,12 +89,14 @@ class Apps:
                     app_config = entry
                 else:
                     app_config = AppConfig.create(entry)
-                if app_config.label in self.app_configs:
+                # Convert app_config.label to lowercase for case-insensitive lookup
+                label = app_config.label.lower()
+                if label in self.app_configs:
                     raise ImproperlyConfigured(
                         "Application labels aren't unique, "
                         "duplicates: %s" % app_config.label)
 
-                self.app_configs[app_config.label] = app_config
+                self.app_configs[label] = app_config
                 app_config.apps = self
 
             # Check for duplicate app names.
@@ -149,11 +151,17 @@ class Apps:
         Import applications and returns an app config for the given label.
 
         Raise LookupError if no application exists with this label.
+        The lookup is case-insensitive.
         """
         self.check_apps_ready()
         try:
+            # Try exact match first
             return self.app_configs[app_label]
         except KeyError:
+            # Try case-insensitive match
+            for label, app_config in self.app_configs.items():
+                if label.lower() == app_label.lower():
+                    return app_config
             message = "No installed app with label '%s'." % app_label
             for app_config in self.get_app_configs():
                 if app_config.name == app_label:
@@ -188,7 +196,7 @@ class Apps:
 
         As a shortcut, app_label may be in the form <app_label>.<model_name>.
 
-        model_name is case-insensitive.
+        Both app_label and model_name are case-insensitive.
 
         Raise LookupError if no application exists with this label, or no
         model exists with this name in the application. Raise ValueError if
@@ -202,6 +210,8 @@ class Apps:
         if model_name is None:
             app_label, model_name = app_label.split('.')
 
+        # Convert app_label to lowercase for case-insensitive lookup
+        app_label = app_label.lower()
         app_config = self.get_app_config(app_label)
 
         if not require_ready and app_config.models is None:
@@ -214,6 +224,8 @@ class Apps:
         # perform imports because of the risk of import loops. It mustn't
         # call get_app_config().
         model_name = model._meta.model_name
+        # Convert app_label to lowercase for case-insensitive lookup
+        app_label = app_label.lower()
         app_models = self.all_models[app_label]
         if model_name in app_models:
             if (model.__name__ == app_models[model_name].__name__ and
@@ -395,6 +407,9 @@ class Apps:
         else:
             next_model, *more_models = model_keys
 
+            # Convert app_label to lowercase for case-insensitive lookup
+            next_model = (next_model[0].lower(), next_model[1])
+
             # This will be executed after the class corresponding to next_model
             # has been imported and registered. The `func` attribute provides
             # duck-type compatibility with partials.
@@ -419,7 +434,8 @@ class Apps:
         Take a newly-prepared model and pass it to each function waiting for
         it. This is called at the very end of Apps.register_model().
         """
-        key = model._meta.app_label, model._meta.model_name
+        # Convert app_label to lowercase for case-insensitive lookup
+        key = model._meta.app_label.lower(), model._meta.model_name
         for function in self._pending_operations.pop(key, []):
             function(model)
 
diff --git a/django/core/checks/model_checks.py b/django/core/checks/model_checks.py
index 15d9b7fd86..f5bf16f3e1 100644
--- a/django/core/checks/model_checks.py
+++ b/django/core/checks/model_checks.py
@@ -128,10 +128,19 @@ def _check_lazy_references(apps, ignore=None):
 
     def app_model_error(model_key):
         try:
+            # Try case-sensitive lookup first
             apps.get_app_config(model_key[0])
             model_error = "app '%s' doesn't provide model '%s'" % model_key
         except LookupError:
-            model_error = "app '%s' isn't installed" % model_key[0]
+            # If not found, try case-insensitive lookup
+            app_found = False
+            for app_config in apps.get_app_configs():
+                if app_config.label.lower() == model_key[0].lower():
+                    app_found = True
+                    model_error = "app '%s' doesn't provide model '%s'" % model_key
+                    break
+            if not app_found:
+                model_error = "app '%s' isn't installed" % model_key[0]
         return model_error
 
     # Here are several functions which return CheckMessage instances for the
diff --git a/django/db/models/fields/related.py b/django/db/models/fields/related.py
index c2aea9c730..8b594f2d9e 100644
--- a/django/db/models/fields/related.py
+++ b/django/db/models/fields/related.py
@@ -54,7 +54,16 @@ def resolve_relation(scope_model, relation):
     # Look for an "app.Model" relation
     if isinstance(relation, str):
         if "." not in relation:
+            # Use the original app_label case from the model's meta
             relation = "%s.%s" % (scope_model._meta.app_label, relation)
+        else:
+            # For explicit app_label.model references, use the app_label case from the model's meta
+            app_label, model_name = relation.split(".")
+            # Find the app config with case-insensitive match
+            for app_config in apps.get_app_configs():
+                if app_config.label.lower() == app_label.lower():
+                    relation = "%s.%s" % (app_config.label, model_name)
+                    break
 
     return relation
 
diff --git a/django/db/models/utils.py b/django/db/models/utils.py
index 989667dc8c..cc98eeb28c 100644
--- a/django/db/models/utils.py
+++ b/django/db/models/utils.py
@@ -9,9 +9,11 @@ def make_model_tuple(model):
             model_tuple = model
         elif isinstance(model, str):
             app_label, model_name = model.split(".")
-            model_tuple = app_label, model_name.lower()
+            # Convert app_label to lowercase for case-insensitive lookup
+            model_tuple = app_label.lower(), model_name.lower()
         else:
-            model_tuple = model._meta.app_label, model._meta.model_name
+            # Convert app_label to lowercase for case-insensitive lookup
+            model_tuple = model._meta.app_label.lower(), model._meta.model_name
         assert len(model_tuple) == 2
         return model_tuple
     except (ValueError, AssertionError):
