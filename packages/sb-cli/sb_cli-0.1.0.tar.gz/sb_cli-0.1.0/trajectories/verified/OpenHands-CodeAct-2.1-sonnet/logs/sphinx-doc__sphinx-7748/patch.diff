diff --git a/sphinx/ext/autodoc/__init__.py b/sphinx/ext/autodoc/__init__.py
index f8e4be999..a3029a49e 100644
--- a/sphinx/ext/autodoc/__init__.py
+++ b/sphinx/ext/autodoc/__init__.py
@@ -438,7 +438,7 @@ class Documenter:
         else:
             return ''
 
-    def add_directive_header(self, sig: str) -> None:
+    def add_directive_header(self, sig: Union[str, List[str]]) -> None:
         """Add the directive header and options to the generated content."""
         domain = getattr(self, 'domain', 'py')
         directive = getattr(self, 'directivetype', self.objtype)
@@ -447,11 +447,23 @@ class Documenter:
 
         # one signature per line, indented by column
         prefix = '.. %s:%s:: ' % (domain, directive)
-        for i, sig_line in enumerate(sig.split("\n")):
-            self.add_line('%s%s%s' % (prefix, name, sig_line),
-                          sourcename)
-            if i == 0:
-                prefix = " " * len(prefix)
+        
+        if isinstance(sig, list):
+            # Multiple signatures
+            for i, sig_item in enumerate(sig):
+                for j, sig_line in enumerate(sig_item.split("\n")):
+                    if i == 0 and j == 0:
+                        # First line of first signature
+                        self.add_line('%s%s%s' % (prefix, name, sig_line), sourcename)
+                    else:
+                        # Additional lines
+                        self.add_line('%s%s%s' % (' ' * len(prefix), name, sig_line), sourcename)
+        else:
+            # Single signature
+            for i, sig_line in enumerate(sig.split("\n")):
+                self.add_line('%s%s%s' % (prefix if i == 0 else ' ' * len(prefix),
+                                         name, sig_line),
+                             sourcename)
 
         if self.options.noindex:
             self.add_line('   :noindex:', sourcename)
@@ -1037,39 +1049,47 @@ class DocstringSignatureMixin:
     feature of reading the signature from the docstring.
     """
 
-    def _find_signature(self, encoding: str = None) -> Tuple[str, str]:
+    def _find_signature(self, encoding: str = None) -> Union[Tuple[str, str], List[Tuple[str, str]]]:
         if encoding is not None:
             warnings.warn("The 'encoding' argument to autodoc.%s._find_signature() is "
                           "deprecated." % self.__class__.__name__,
                           RemovedInSphinx40Warning, stacklevel=2)
         docstrings = self.get_doc()
         self._new_docstrings = docstrings[:]
-        result = None
+        results = []
         for i, doclines in enumerate(docstrings):
             # no lines in docstring, no match
             if not doclines:
                 continue
-            # match first line of docstring against signature RE
-            match = py_ext_sig_re.match(doclines[0])
-            if not match:
-                continue
-            exmod, path, base, args, retann = match.groups()
-            # the base name must match ours
-            valid_names = [self.objpath[-1]]  # type: ignore
-            if isinstance(self, ClassDocumenter):
-                valid_names.append('__init__')
-                if hasattr(self.object, '__mro__'):
-                    valid_names.extend(cls.__name__ for cls in self.object.__mro__)
-            if base not in valid_names:
-                continue
-            # re-prepare docstring to ignore more leading indentation
-            tab_width = self.directive.state.document.settings.tab_width  # type: ignore
-            self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[1:]),
-                                                        tabsize=tab_width)
-            result = args, retann
-            # don't look any further
-            break
-        return result
+            
+            # Process all lines until we find one that doesn't match a signature
+            j = 0
+            while j < len(doclines):
+                match = py_ext_sig_re.match(doclines[j])
+                if not match:
+                    break
+                    
+                exmod, path, base, args, retann = match.groups()
+                # the base name must match ours
+                valid_names = [self.objpath[-1]]  # type: ignore
+                if isinstance(self, ClassDocumenter):
+                    valid_names.append('__init__')
+                    if hasattr(self.object, '__mro__'):
+                        valid_names.extend(cls.__name__ for cls in self.object.__mro__)
+                if base not in valid_names:
+                    break
+                    
+                results.append((args, retann))
+                j += 1
+                
+            if results:  # If we found any signatures
+                # re-prepare docstring to ignore the signature lines
+                tab_width = self.directive.state.document.settings.tab_width  # type: ignore
+                self._new_docstrings[i] = prepare_docstring('\n'.join(doclines[j:]),
+                                                          tabsize=tab_width)
+                break  # Don't look in other docstring parts
+                
+        return results[0] if len(results) == 1 else results
 
     def get_doc(self, encoding: str = None, ignore: int = None) -> List[List[str]]:
         if encoding is not None:
@@ -1081,13 +1101,22 @@ class DocstringSignatureMixin:
             return lines
         return super().get_doc(None, ignore)  # type: ignore
 
-    def format_signature(self, **kwargs: Any) -> str:
+    def format_signature(self, **kwargs: Any) -> Union[str, List[str]]:
         if self.args is None and self.env.config.autodoc_docstring_signature:  # type: ignore
             # only act if a signature is not explicitly given already, and if
             # the feature is enabled
             result = self._find_signature()
             if result is not None:
-                self.args, self.retann = result
+                if isinstance(result, list):
+                    # Multiple signatures found
+                    signatures = []
+                    for args, retann in result:
+                        self.args, self.retann = args, retann
+                        signatures.append(super().format_signature(**kwargs))  # type: ignore
+                    return signatures
+                else:
+                    # Single signature found
+                    self.args, self.retann = result
         return super().format_signature(**kwargs)  # type: ignore
 
 
@@ -1158,7 +1187,14 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ
 
     def format_signature(self, **kwargs: Any) -> str:
         sig = super().format_signature(**kwargs)
-        sigs = [sig]
+        sigs = []
+        
+        if isinstance(sig, list):
+            # Multiple signatures from docstring
+            sigs.extend(sig)
+        else:
+            # Single signature
+            sigs.append(sig)
 
         if inspect.is_singledispatch_function(self.object):
             # append signature of singledispatch'ed functions
@@ -1170,7 +1206,11 @@ class FunctionDocumenter(DocstringSignatureMixin, ModuleLevelDocumenter):  # typ
 
                     documenter = FunctionDocumenter(self.directive, '')
                     documenter.object = func
-                    sigs.append(documenter.format_signature())
+                    sig = documenter.format_signature()
+                    if isinstance(sig, list):
+                        sigs.extend(sig)
+                    else:
+                        sigs.append(sig)
 
         return "\n".join(sigs)
 
@@ -1634,7 +1674,14 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:
 
     def format_signature(self, **kwargs: Any) -> str:
         sig = super().format_signature(**kwargs)
-        sigs = [sig]
+        sigs = []
+        
+        if isinstance(sig, list):
+            # Multiple signatures from docstring
+            sigs.extend(sig)
+        else:
+            # Single signature
+            sigs.append(sig)
 
         meth = self.parent.__dict__.get(self.objpath[-1])
         if inspect.is_singledispatch_method(meth):
@@ -1649,7 +1696,11 @@ class MethodDocumenter(DocstringSignatureMixin, ClassLevelDocumenter):  # type:
                     documenter.parent = self.parent
                     documenter.object = func
                     documenter.objpath = [None]
-                    sigs.append(documenter.format_signature())
+                    sig = documenter.format_signature()
+                    if isinstance(sig, list):
+                        sigs.extend(sig)
+                    else:
+                        sigs.append(sig)
 
         return "\n".join(sigs)
