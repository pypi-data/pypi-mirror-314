diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index dd5317087..0ded29fe7 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -109,6 +109,37 @@ class CheckExternalLinksBuilder(Builder):
             thread.start()
             self.workers.append(thread)
 
+    def check_local_link(self, uri: str) -> Tuple[str, str]:
+        """Check if a local link exists in the project.
+        Returns a tuple of (status, info) where status is either 'working' or 'broken'
+        and info is an error message in case of broken links."""
+        # Get all document names in the environment
+        all_docs = self.env.all_docs
+        
+        # Remove any anchor from the URI
+        if '#' in uri:
+            uri = uri.split('#')[0]
+        
+        # If URI is empty after removing anchor, it's a self-reference
+        if not uri:
+            return 'working', ''
+        
+        # Check if the document exists
+        # First try exact match
+        if uri in all_docs:
+            return 'working', ''
+        
+        # Then try with .rst extension
+        if uri + '.rst' in all_docs:
+            return 'working', ''
+        
+        # Then try as a relative path
+        for docname in all_docs:
+            if docname.endswith('/' + uri) or docname.endswith('/' + uri + '.rst'):
+                return 'working', ''
+        
+        return 'broken', 'Document not found'
+
     def check_thread(self) -> None:
         kwargs = {
             'allow_redirects': True,
@@ -212,8 +243,6 @@ class CheckExternalLinksBuilder(Builder):
             # check for various conditions without bothering the network
             if len(uri) == 0 or uri.startswith(('#', 'mailto:', 'ftp:')):
                 return 'unchecked', '', 0
-            elif not uri.startswith(('http:', 'https:')):
-                return 'local', '', 0
             elif uri in self.good:
                 return 'working', 'old', 0
             elif uri in self.broken:
@@ -223,6 +252,15 @@ class CheckExternalLinksBuilder(Builder):
             for rex in self.to_ignore:
                 if rex.match(uri):
                     return 'ignored', '', 0
+            
+            # Check local links
+            if not uri.startswith(('http:', 'https:')):
+                status, info = self.check_local_link(uri)
+                if status == 'working':
+                    self.good.add(uri)
+                else:
+                    self.broken[uri] = info
+                return status, info, 0
 
             # need to actually check the URI
             for _ in range(self.app.config.linkcheck_retries):
diff --git a/test_linkcheck.py b/test_linkcheck.py
new file mode 100644
index 000000000..966a5a495
--- /dev/null
+++ b/test_linkcheck.py
@@ -0,0 +1,63 @@
+import os
+import shutil
+import tempfile
+from pathlib import Path
+
+from sphinx.application import Sphinx
+
+def main():
+    # Create a temporary directory for the test
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Create source directory
+        srcdir = Path(tmpdir) / 'src'
+        srcdir.mkdir()
+        
+        # Create conf.py
+        with open(srcdir / 'conf.py', 'w') as f:
+            f.write('''
+project = 'Test'
+copyright = '2023'
+author = 'Test'
+extensions = []
+''')
+        
+        # Create valid.rst
+        with open(srcdir / 'valid.rst', 'w') as f:
+            f.write('''
+Valid Document
+=============
+
+This is a valid document.
+''')
+
+        # Create index.rst with broken and working links
+        with open(srcdir / 'index.rst', 'w') as f:
+            f.write('''
+Test Document
+============
+
+broken external-link_
+broken local-link_
+working local-link_
+
+.. _external-link: https://lkfqhlkghflkhs
+.. _local-link: doesntexist
+.. _working local-link: valid
+''')
+        
+        # Create build directory
+        builddir = Path(tmpdir) / '_build'
+        builddir.mkdir()
+        
+        # Run Sphinx
+        app = Sphinx(
+            srcdir=str(srcdir),
+            confdir=str(srcdir),
+            outdir=str(builddir),
+            doctreedir=str(builddir / 'doctrees'),
+            buildername='linkcheck'
+        )
+        app.build()
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
