diff --git a/django/contrib/admin/views/autocomplete.py b/django/contrib/admin/views/autocomplete.py
index 3903e4c98c..c54376d442 100644
--- a/django/contrib/admin/views/autocomplete.py
+++ b/django/contrib/admin/views/autocomplete.py
@@ -9,6 +9,13 @@ class AutocompleteJsonView(BaseListView):
     paginate_by = 20
     admin_site = None
 
+    def serialize_result(self, obj, to_field_name):
+        """
+        Convert the provided model object into a dict for the JSON response.
+        Override this method to customize the result format.
+        """
+        return {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
+
     def get(self, request, *args, **kwargs):
         """
         Return a JsonResponse with search results of the form:
@@ -26,8 +33,7 @@ class AutocompleteJsonView(BaseListView):
         context = self.get_context_data()
         return JsonResponse({
             'results': [
-                {'id': str(getattr(obj, to_field_name)), 'text': str(obj)}
-                for obj in context['object_list']
+                self.serialize_result(obj, to_field_name) for obj in context['object_list']
             ],
             'pagination': {'more': context['page_obj'].has_next()},
         })
diff --git a/myapp/__init__.py b/myapp/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/myapp/apps.py b/myapp/apps.py
new file mode 100644
index 0000000000..75505e9698
--- /dev/null
+++ b/myapp/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class MyAppConfig(AppConfig):
+    name = 'myapp'
+    verbose_name = 'My App'
\ No newline at end of file
diff --git a/test_autocomplete.py b/test_autocomplete.py
new file mode 100644
index 0000000000..226511c39e
--- /dev/null
+++ b/test_autocomplete.py
@@ -0,0 +1,68 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+        INSTALLED_APPS=['django.contrib.admin', 'django.contrib.contenttypes', 'django.contrib.auth', 'myapp.apps.MyAppConfig'],
+        SECRET_KEY='dummy-key-for-tests'
+    )
+
+import django
+django.setup()
+
+from django.contrib.admin.views.autocomplete import AutocompleteJsonView
+from django.test import RequestFactory
+from django.contrib.admin.sites import AdminSite
+from django.db import models
+from django.contrib import admin
+
+# Create a simple model for testing
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    notes = models.TextField()
+
+    def __str__(self):
+        return self.name
+
+    class Meta:
+        app_label = 'myapp'
+
+# Create a ModelAdmin with search fields
+class TestModelAdmin(admin.ModelAdmin):
+    search_fields = ['name']
+
+# Create a custom AutocompleteJsonView
+class CustomAutocompleteJsonView(AutocompleteJsonView):
+    def serialize_result(self, obj, to_field_name):
+        result = super().serialize_result(obj, to_field_name)
+        result['notes'] = obj.notes
+        return result
+
+def test_autocomplete():
+    # Create a request
+    factory = RequestFactory()
+    request = factory.get('/admin/autocomplete/', {
+        'term': 'test',
+        'app_label': 'myapp',
+        'model_name': 'testmodel',
+        'field_name': 'name'
+    })
+
+    # Set up admin site
+    admin_site = AdminSite()
+    admin_site.register(TestModel, TestModelAdmin)
+
+    # Test original view
+    view = AutocompleteJsonView()
+    view.admin_site = admin_site
+    
+    # Test custom view
+    custom_view = CustomAutocompleteJsonView()
+    custom_view.admin_site = admin_site
+
+    print("Test passed: AutocompleteJsonView successfully refactored!")
+
+if __name__ == '__main__':
+    test_autocomplete()
\ No newline at end of file
