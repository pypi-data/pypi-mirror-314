diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 000000000..523c2c668
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,20 @@
+import numpy as np
+from sklearn.linear_model import LassoLarsIC
+
+# Test Case 1: copy_X not provided in fit() - should use constructor's value
+print("Test Case 1: Using constructor's copy_X value")
+X1 = np.array([[1, 1], [2, 2], [3, 3]])
+y1 = np.array([1, 2, 3])
+
+model1 = LassoLarsIC(copy_X=False)
+model1.fit(X1, y1)  # No copy_X provided, should use False from constructor
+print("Original X1 (should be modified):", X1)
+
+# Test Case 2: copy_X explicitly provided in fit() - should override constructor
+print("\nTest Case 2: Overriding constructor's copy_X value")
+X2 = np.array([[1, 1], [2, 2], [3, 3]])
+y2 = np.array([1, 2, 3])
+
+model2 = LassoLarsIC(copy_X=False)
+model2.fit(X2, y2, copy_X=True)  # Explicitly set copy_X=True
+print("Original X2 (should NOT be modified):", X2)
\ No newline at end of file
diff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py
index 03b34a0dc..92dc282fb 100644
--- a/sklearn/linear_model/least_angle.py
+++ b/sklearn/linear_model/least_angle.py
@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):
         self.eps = eps
         self.fit_path = True
 
-    def fit(self, X, y, copy_X=True):
+    def fit(self, X, y, copy_X=None):
         """Fit the model using X, y as training data.
 
         Parameters
@@ -1490,14 +1490,18 @@ class LassoLarsIC(LassoLars):
         y : array-like, shape (n_samples,)
             target values. Will be cast to X's dtype if necessary
 
-        copy_X : boolean, optional, default True
+        copy_X : boolean, optional, default None
             If ``True``, X will be copied; else, it may be overwritten.
+            If None, defaults to the value passed in the constructor.
 
         Returns
         -------
         self : object
             returns an instance of self.
         """
+        # Use constructor's copy_X if not explicitly overridden
+        if copy_X is None:
+            copy_X = self.copy_X
         X, y = check_X_y(X, y, y_numeric=True)
 
         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(
