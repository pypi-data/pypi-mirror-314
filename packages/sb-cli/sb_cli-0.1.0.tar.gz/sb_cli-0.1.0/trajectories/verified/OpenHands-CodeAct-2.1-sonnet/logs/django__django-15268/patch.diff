diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index c120f5d32d..2876ce3230 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -498,6 +498,19 @@ class AlterTogetherOptionOperation(ModelOptionOperation):
             {self.option_name: self.option_value},
         )
 
+    def reduce(self, operation, app_label):
+        if (isinstance(operation, self.__class__) and
+                self.name_lower == operation.name_lower and
+                self.option_name == operation.option_name):
+            # If we have two operations of the same type on the same model,
+            # we can skip the first one since the second one will overwrite it
+            return [operation]
+        # For other cases, indicate if we can optimize through this operation
+        return (
+            super().reduce(operation, app_label) or
+            not operation.references_model(self.name, app_label)
+        )
+
     def database_forwards(self, app_label, schema_editor, from_state, to_state):
         new_model = to_state.apps.get_model(app_label, self.name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
@@ -539,6 +552,18 @@ class AlterUniqueTogether(AlterTogetherOptionOperation):
     def __init__(self, name, unique_together):
         super().__init__(name, unique_together)
 
+    def reduce(self, operation, app_label):
+        if (isinstance(operation, AlterUniqueTogether) and
+                self.name_lower == operation.name_lower):
+            # Skip the first operation since the second one will overwrite it
+            return [operation]
+        # For other cases, indicate if we can optimize through this operation
+        return (
+            super(ModelOperation, self).reduce(operation, app_label) or
+            not operation.references_model(self.name, app_label) or
+            isinstance(operation, AlterIndexTogether)  # Allow optimization through AlterIndexTogether
+        )
+
 
 class AlterIndexTogether(AlterTogetherOptionOperation):
     """
@@ -550,6 +575,18 @@ class AlterIndexTogether(AlterTogetherOptionOperation):
     def __init__(self, name, index_together):
         super().__init__(name, index_together)
 
+    def reduce(self, operation, app_label):
+        if (isinstance(operation, AlterIndexTogether) and
+                self.name_lower == operation.name_lower):
+            # Skip the first operation since the second one will overwrite it
+            return [operation]
+        # For other cases, indicate if we can optimize through this operation
+        return (
+            super(ModelOperation, self).reduce(operation, app_label) or
+            not operation.references_model(self.name, app_label) or
+            isinstance(operation, AlterUniqueTogether)  # Allow optimization through AlterUniqueTogether
+        )
+
 
 class AlterOrderWithRespectTo(ModelOptionOperation):
     """Represent a change with the order_with_respect_to option."""
