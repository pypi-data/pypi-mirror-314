diff --git a/astropy/units/decorators.py b/astropy/units/decorators.py
index 8bece5a850..9b48e4f0c1 100644
--- a/astropy/units/decorators.py
+++ b/astropy/units/decorators.py
@@ -221,7 +221,11 @@ class QuantityInput:
             with add_enabled_equivalencies(self.equivalencies):
                 return_ = wrapped_function(*func_args, **func_kwargs)
             if wrapped_signature.return_annotation is not inspect.Signature.empty:
-                return return_.to(wrapped_signature.return_annotation)
+                # Handle the case where return annotation is None
+                if wrapped_signature.return_annotation is None:
+                    return return_
+                else:
+                    return return_.to(wrapped_signature.return_annotation)
             else:
                 return return_
 
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..cc943f0261
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,12 @@
+import astropy.units as u
+
+
+class PoC(object):
+
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:
+        pass
+
+
+if __name__ == '__main__':
+    poc = PoC(1.*u.V)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..0782bd1313
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,36 @@
+import astropy.units as u
+
+
+class TestCase1:
+    @u.quantity_input
+    def __init__(self, voltage: u.V):  # No return annotation
+        pass
+
+
+class TestCase2:
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> u.V:  # Unit return annotation
+        return voltage
+
+
+class TestCase3:
+    @u.quantity_input
+    def __init__(self, voltage: u.V) -> None:  # None return but returns value
+        self.voltage = voltage
+        return voltage  # This is actually invalid in Python but good to test
+
+
+# Test case 1: No return annotation
+print("Testing case 1...")
+t1 = TestCase1(1. * u.V)
+
+# Test case 2: Unit return annotation
+print("Testing case 2...")
+t2 = TestCase2(1. * u.V)
+
+# Test case 3: None return annotation but returns value
+print("Testing case 3...")
+try:
+    t3 = TestCase3(1. * u.V)
+except TypeError as e:
+    print("Expected error for case 3:", str(e))
\ No newline at end of file
