diff --git a/django/contrib/admin/helpers.py b/django/contrib/admin/helpers.py
index dd154f72ee..ba8c3463a0 100644
--- a/django/contrib/admin/helpers.py
+++ b/django/contrib/admin/helpers.py
@@ -209,7 +209,11 @@ class AdminReadonlyField:
             remote_field.model._meta.model_name,
         )
         try:
-            url = reverse(url_name, args=[quote(remote_obj.pk)])
+            url = reverse(
+                url_name,
+                args=[quote(remote_obj.pk)],
+                current_app=self.model_admin.admin_site.name
+            )
             return format_html('<a href="{}">{}</a>', url, remote_obj)
         except NoReverseMatch:
             return str(remote_obj)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..6be27e0382
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,102 @@
+from django.conf import settings
+from django.contrib import admin
+from django.contrib.admin.sites import AdminSite
+from django.core.management import call_command
+from django.db import models
+from django.urls import path, reverse
+from django.http import HttpResponse
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.admin',
+    ],
+    MIDDLEWARE=[
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    ROOT_URLCONF=__name__,
+    SECRET_KEY='dummy-key-for-test',
+)
+
+import django
+django.setup()
+
+# Create test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'admin'
+    
+    def __str__(self):
+        return self.name
+
+class Book(models.Model):
+    class Meta:
+        app_label = 'admin'
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    
+    def __str__(self):
+        return self.title
+
+# Create custom admin site
+class CustomAdminSite(AdminSite):
+    site_url = None
+    site_header = 'Custom Admin'
+    site_title = 'Custom Admin Portal'
+    index_title = 'Welcome to Custom Admin'
+
+custom_admin_site = CustomAdminSite(name='custom-admin')
+
+# Create admin classes
+class BookAdmin(admin.ModelAdmin):
+    readonly_fields = ['author']
+
+# Register models with custom admin site
+custom_admin_site.register(Author)
+custom_admin_site.register(Book, BookAdmin)
+
+# URL patterns
+urlpatterns = [
+    path('custom-admin/', custom_admin_site.urls),
+]
+
+def main():
+    # Create tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+    
+    # Create test data
+    author = Author.objects.create(name='John Doe')
+    book = Book.objects.create(title='Test Book', author=author)
+    
+    # Print the URL that would be generated for the author link
+    try:
+        url = reverse(
+            'custom-admin:admin_author_change',
+            args=[author.pk],
+            current_app=custom_admin_site.name
+        )
+        print(f"Generated URL: {url}")
+        print(f"URL starts with /custom-admin/: {url.startswith('/custom-admin/')}")
+    except Exception as e:
+        print(f"Error: {e}")
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
