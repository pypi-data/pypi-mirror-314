diff --git a/django/core/management/commands/makemigrations.py b/django/core/management/commands/makemigrations.py
index 0b39536f5b..177fd9ebc7 100644
--- a/django/core/management/commands/makemigrations.py
+++ b/django/core/management/commands/makemigrations.py
@@ -99,15 +99,22 @@ class Command(BaseCommand):
         consistency_check_labels = set(config.label for config in apps.get_app_configs())
         # Non-default databases are only checked if database routers used.
         aliases_to_check = connections if settings.DATABASE_ROUTERS else [DEFAULT_DB_ALIAS]
+        checked_dbs = set()
         for alias in sorted(aliases_to_check):
             connection = connections[alias]
-            if (connection.settings_dict['ENGINE'] != 'django.db.backends.dummy' and any(
-                    # At least one model must be migrated to the database.
-                    router.allow_migrate(connection.alias, app_label, model_name=model._meta.object_name)
-                    for app_label in consistency_check_labels
-                    for model in apps.get_models(app_label)
-            )):
-                loader.check_consistent_history(connection)
+            if connection.settings_dict['ENGINE'] == 'django.db.backends.dummy':
+                continue
+            if alias in checked_dbs:
+                continue
+            
+            # Check if any app has any model that can migrate to this database
+            for app_label in consistency_check_labels:
+                app_config = apps.get_app_config(app_label)
+                migratable_models = router.get_migratable_models(app_config, connection.alias)
+                if migratable_models:
+                    loader.check_consistent_history(connection)
+                    checked_dbs.add(alias)
+                    break
 
         # Before anything else, see if there's conflicting apps and drop out
         # hard if there are any and they don't want to merge
diff --git a/django/db/migrations/operations/base.py b/django/db/migrations/operations/base.py
index 95829f716a..6dd27c15b0 100644
--- a/django/db/migrations/operations/base.py
+++ b/django/db/migrations/operations/base.py
@@ -106,13 +106,13 @@ class Operation(object):
         """
         Returns if we're allowed to migrate the model.
 
-        This is a thin wrapper around router.allow_migrate_model() that
+        This is a thin wrapper around router.allow_migrate() that
         preemptively rejects any proxy, swapped out, or unmanaged model.
         """
         if not model._meta.can_migrate(connection_alias):
             return False
 
-        return router.allow_migrate_model(connection_alias, model)
+        return router.allow_migrate(connection_alias, model._meta.app_label, model_name=model._meta.model_name, model=model)
 
     def reduce(self, operation, in_between, app_label=None):
         """
diff --git a/django/db/utils.py b/django/db/utils.py
index 92354b7bad..333e81a94b 100644
--- a/django/db/utils.py
+++ b/django/db/utils.py
@@ -316,4 +316,8 @@ class ConnectionRouter(object):
         Return app models allowed to be synchronized on provided db.
         """
         models = app_config.get_models(include_auto_created=include_auto_created)
-        return [model for model in models if self.allow_migrate_model(db, model)]
+        # Only check models that belong to this app
+        return [
+            model for model in models
+            if model._meta.app_label == app_config.label and self.allow_migrate_model(db, model)
+        ]
