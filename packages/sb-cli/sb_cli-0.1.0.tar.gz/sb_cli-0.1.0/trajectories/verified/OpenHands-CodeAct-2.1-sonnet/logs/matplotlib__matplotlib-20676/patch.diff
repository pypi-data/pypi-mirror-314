diff --git a/lib/matplotlib/widgets.py b/lib/matplotlib/widgets.py
index a199e45d40..ba7c81e8b5 100644
--- a/lib/matplotlib/widgets.py
+++ b/lib/matplotlib/widgets.py
@@ -2156,12 +2156,24 @@ class SpanSelector(_SelectorWidget):
             self.artists.append(self._rect)
 
     def _setup_edge_handle(self, props):
+        # Store original axis limits before creating handles
+        if self.direction == 'horizontal':
+            orig_limits = self.ax.get_xlim()
+        else:
+            orig_limits = self.ax.get_ylim()
+
         self._edge_handles = ToolLineHandles(self.ax, self.extents,
                                              direction=self.direction,
                                              line_props=props,
                                              useblit=self.useblit)
         self.artists.extend([line for line in self._edge_handles.artists])
 
+        # Restore original axis limits after creating handles
+        if self.direction == 'horizontal':
+            self.ax.set_xlim(orig_limits)
+        else:
+            self.ax.set_ylim(orig_limits)
+
     def _press(self, event):
         """Button press event handler."""
         if self._interactive and self._rect.get_visible():
@@ -2366,11 +2378,23 @@ class ToolLineHandles:
             line_props = {}
         line_props.update({'visible': False, 'animated': useblit})
 
+        # Store original axis limits
+        if self.direction == 'horizontal':
+            orig_limits = ax.get_xlim()
+        else:
+            orig_limits = ax.get_ylim()
+
         line_fun = ax.axvline if self.direction == 'horizontal' else ax.axhline
         self._line_props = line_props
 
         self.artists = [line_fun(p, **line_props) for p in positions]
 
+        # Restore original axis limits
+        if self.direction == 'horizontal':
+            ax.set_xlim(orig_limits)
+        else:
+            ax.set_ylim(orig_limits)
+
     @property
     def positions(self):
         """Positions of the handle in data coordinates."""
diff --git a/reproduce_span.py b/reproduce_span.py
new file mode 100644
index 0000000000..5ac27a1c1c
--- /dev/null
+++ b/reproduce_span.py
@@ -0,0 +1,7 @@
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+fig, ax = plt.subplots()
+ax.plot([10, 20], [10, 20])
+ss = SpanSelector(ax, print, "horizontal", interactive=True)
+plt.show()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..c0d2251dbd
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,30 @@
+import numpy as np
+from matplotlib import pyplot as plt
+from matplotlib.widgets import SpanSelector
+
+# Test case 1: Negative values only
+fig1, ax1 = plt.subplots()
+ax1.plot([-20, -10], [-20, -10])
+ss1 = SpanSelector(ax1, print, "horizontal", interactive=True)
+ax1.set_title("Negative values only")
+
+# Test case 2: Very large values
+fig2, ax2 = plt.subplots()
+ax2.plot([1e6, 2e6], [1e6, 2e6])
+ss2 = SpanSelector(ax2, print, "horizontal", interactive=True)
+ax2.set_title("Large values")
+
+# Test case 3: Vertical selector
+fig3, ax3 = plt.subplots()
+ax3.plot([10, 20], [10, 20])
+ss3 = SpanSelector(ax3, print, "vertical", interactive=True)
+ax3.set_title("Vertical selector")
+
+# Test case 4: Custom limits
+fig4, ax4 = plt.subplots()
+ax4.plot([10, 20], [10, 20])
+ax4.set_xlim(5, 25)  # Set custom limits before creating selector
+ss4 = SpanSelector(ax4, print, "horizontal", interactive=True)
+ax4.set_title("Custom limits")
+
+plt.show()
\ No newline at end of file
