diff --git a/django/utils/formats.py b/django/utils/formats.py
index 3f38322d84..6f6d6cd39d 100644
--- a/django/utils/formats.py
+++ b/django/utils/formats.py
@@ -124,19 +124,21 @@ def get_format(format_type, lang=None, use_l10n=None):
     # there or if l10n is disabled, fall back to the project settings.
     val = None
     if use_l10n:
+        # Convert format_type to string to handle lazy strings
+        format_type_str = str(format_type)
         for module in get_format_modules(lang):
-            val = getattr(module, format_type, None)
+            val = getattr(module, format_type_str, None)
             if val is not None:
                 break
     if val is None:
-        if format_type not in FORMAT_SETTINGS:
+        if format_type_str not in FORMAT_SETTINGS:
             return format_type
-        val = getattr(settings, format_type)
-    elif format_type in ISO_INPUT_FORMATS:
+        val = getattr(settings, format_type_str)
+    elif format_type_str in ISO_INPUT_FORMATS:
         # If a list of input formats from one of the format_modules was
         # retrieved, make sure the ISO_INPUT_FORMATS are in this list.
         val = list(val)
-        for iso_input in ISO_INPUT_FORMATS.get(format_type, ()):
+        for iso_input in ISO_INPUT_FORMATS.get(format_type_str, ()):
             if iso_input not in val:
                 val.append(iso_input)
     _format_cache[cache_key] = val
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..c171b2716e
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,35 @@
+from django.conf import settings
+from django.utils.translation import gettext_lazy as _
+from django.utils import formats
+import django
+
+# Configure minimal Django settings
+settings.configure(
+    USE_L10N=True,
+    USE_I18N=True,
+    LANGUAGE_CODE='en',
+    LANGUAGES=[('en', 'English')],
+    INSTALLED_APPS=[],
+    MIDDLEWARE=[],
+)
+
+# Initialize Django
+django.setup()
+
+# Test cases
+test_cases = [
+    ('DATE_FORMAT', "Regular string"),
+    (_('DATE_FORMAT'), "Lazy string"),
+    (_('DATETIME_FORMAT'), "Another lazy string"),
+    (_('INVALID_FORMAT'), "Invalid format name"),
+    ('', "Empty string"),
+    (_(''), "Empty lazy string"),
+]
+
+for format_type, desc in test_cases:
+    print(f"\nTesting {desc}:")
+    try:
+        result = formats.get_format(format_type)
+        print(f"Result: {result}")
+    except Exception as e:
+        print(f"Error: {e}")
\ No newline at end of file
