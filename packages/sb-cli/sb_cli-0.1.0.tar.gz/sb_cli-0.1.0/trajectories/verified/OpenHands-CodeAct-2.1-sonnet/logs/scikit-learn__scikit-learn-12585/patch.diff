diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..62259ca03
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,5 @@
+from sklearn.preprocessing import StandardScaler
+from sklearn.base import clone
+
+# Try to clone an estimator with a class parameter
+clone(StandardScaler(with_mean=StandardScaler))
\ No newline at end of file
diff --git a/sklearn/base.py b/sklearn/base.py
index 56ffb18bf..34998270c 100644
--- a/sklearn/base.py
+++ b/sklearn/base.py
@@ -48,7 +48,7 @@ def clone(estimator, safe=True):
     # XXX: not handling dictionaries
     if estimator_type in (list, tuple, set, frozenset):
         return estimator_type([clone(e, safe=safe) for e in estimator])
-    elif not hasattr(estimator, 'get_params'):
+    elif not hasattr(estimator, 'get_params') or isinstance(estimator, type):
         if not safe:
             return copy.deepcopy(estimator)
         else:
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..5d1fce6f3
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,21 @@
+from sklearn.preprocessing import StandardScaler
+from sklearn.pipeline import Pipeline
+from sklearn.base import clone
+
+# Test nested class parameters
+pipe = Pipeline([
+    ('scale1', StandardScaler(with_mean=StandardScaler)),
+    ('scale2', StandardScaler())
+])
+clone(pipe)
+
+# Test class parameter that is itself a base class
+from sklearn.base import BaseEstimator
+scaler = StandardScaler(with_mean=BaseEstimator)
+clone(scaler)
+
+# Test multiple class parameters
+scaler = StandardScaler(with_mean=StandardScaler, with_std=BaseEstimator)
+clone(scaler)
+
+print("All edge cases passed!")
\ No newline at end of file
