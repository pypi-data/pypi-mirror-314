diff --git a/django/db/models/base.py b/django/db/models/base.py
index 8ea6c05ef9..501482bed8 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -8,8 +8,8 @@ from django.apps import apps
 from django.conf import settings
 from django.core import checks
 from django.core.exceptions import (
-    NON_FIELD_ERRORS, FieldDoesNotExist, FieldError, MultipleObjectsReturned,
-    ObjectDoesNotExist, ValidationError,
+    NON_FIELD_ERRORS, FieldDoesNotExist, FieldError, ImproperlyConfigured,
+    MultipleObjectsReturned, ObjectDoesNotExist, ValidationError,
 )
 from django.db import (
     DEFAULT_DB_ALIAS, DJANGO_VERSION_PICKLE_KEY, DatabaseError, connection,
@@ -201,10 +201,24 @@ class ModelBase(type):
             if base != new_class and not base._meta.abstract:
                 continue
             # Locate OneToOneField instances.
+            # First pass: collect fields with parent_link=True
+            parent_link_count = 0
             for field in base._meta.local_fields:
-                if isinstance(field, OneToOneField):
+                if isinstance(field, OneToOneField) and field.remote_field.parent_link:
+                    parent_link_count += 1
+                    if parent_link_count > 1:
+                        raise ImproperlyConfigured(
+                            "Multiple OneToOneFields with parent_link=True found in %s. "
+                            "Only one parent link is allowed." % base.__name__
+                        )
                     related = resolve_relation(new_class, field.remote_field.model)
                     parent_links[make_model_tuple(related)] = field
+            # Second pass: collect remaining fields only if no parent_link was found
+            for field in base._meta.local_fields:
+                if isinstance(field, OneToOneField) and not field.remote_field.parent_link:
+                    related = resolve_relation(new_class, field.remote_field.model)
+                    if make_model_tuple(related) not in parent_links:
+                        parent_links[make_model_tuple(related)] = field
 
         # Track fields inherited from base models.
         inherited_attributes = set()
