diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..a0f1b178b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,26 @@
+import os
+import shutil
+import tempfile
+from pathlib import Path
+
+from sphinx.cmd.quickstart import main as quickstart
+from sphinx.cmd.build import main as build
+
+def main():
+    # Create a temporary directory for our test project
+    with tempfile.TemporaryDirectory() as tmpdir:
+        # Change to temp directory
+        os.chdir(tmpdir)
+        
+        # Run sphinx-quickstart
+        quickstart(argv=['--project=proj', '--sep', '--author=me', '--release=1.0', '--language=en', '-q'])
+        
+        # Add the test link to index.rst
+        with open('source/index.rst', 'a') as f:
+            f.write('\n`foo <https://google.com/test.txt#test>`_')
+        
+        # Run linkcheck
+        build(argv=['-M', 'linkcheck', 'source', 'build'])
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/sphinx/builders/linkcheck.py b/sphinx/builders/linkcheck.py
index 9b54afc7c..483152414 100644
--- a/sphinx/builders/linkcheck.py
+++ b/sphinx/builders/linkcheck.py
@@ -162,27 +162,33 @@ class CheckExternalLinksBuilder(Builder):
             kwargs['headers'] = get_request_headers()
 
             try:
-                if anchor and self.app.config.linkcheck_anchors:
-                    # Read the whole document and see if #anchor exists
+                # First try HEAD request to check if the page exists
+                try:
+                    response = requests.head(req_url, config=self.app.config,
+                                            auth=auth_info, **kwargs)
+                    response.raise_for_status()
+                except HTTPError:
+                    # retry with GET request if that fails, some servers
+                    # don't like HEAD requests.
                     response = requests.get(req_url, stream=True, config=self.app.config,
                                             auth=auth_info, **kwargs)
-                    found = check_anchor(response, unquote(anchor))
+                    response.raise_for_status()
 
+                # If we have an anchor and linkcheck_anchors is enabled, check the anchor
+                if anchor and self.app.config.linkcheck_anchors:
+                    # Read the whole document and see if #anchor exists
+                    if not response.headers.get('content-type', '').startswith('text/html'):
+                        # Skip anchor check for non-HTML content
+                        return 'working', '', 0
+                        
+                    # For HEAD requests or when we need to recheck, get the full content
+                    if response.request.method == 'HEAD':
+                        response = requests.get(req_url, stream=True, config=self.app.config,
+                                              auth=auth_info, **kwargs)
+                    
+                    found = check_anchor(response, unquote(anchor))
                     if not found:
                         raise Exception(__("Anchor '%s' not found") % anchor)
-                else:
-                    try:
-                        # try a HEAD request first, which should be easier on
-                        # the server and the network
-                        response = requests.head(req_url, config=self.app.config,
-                                                 auth=auth_info, **kwargs)
-                        response.raise_for_status()
-                    except HTTPError:
-                        # retry with GET request if that fails, some servers
-                        # don't like HEAD requests.
-                        response = requests.get(req_url, stream=True, config=self.app.config,
-                                                auth=auth_info, **kwargs)
-                        response.raise_for_status()
             except HTTPError as err:
                 if err.response.status_code == 401:
                     # We'll take "Unauthorized" as working.
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..6010cba5e
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,23 @@
+import os
+import tempfile
+from sphinx.cmd.quickstart import main as quickstart
+from sphinx.cmd.build import main as build
+
+def test_cases():
+    with tempfile.TemporaryDirectory() as tmpdir:
+        os.chdir(tmpdir)
+        quickstart(argv=['--project=proj', '--sep', '--author=me', '--release=1.0', '--language=en', '-q'])
+        
+        # Test case 1: Valid URL but invalid anchor
+        with open('source/index.rst', 'w') as f:
+            f.write('Test Cases\n')
+            f.write('==========\n\n')
+            f.write('`Valid URL, invalid anchor <https://www.google.com#nonexistent>`_\n\n')
+            f.write('`Non-HTML with anchor <https://raw.githubusercontent.com/sphinx-doc/sphinx/master/LICENSE#test>`_\n\n')
+            f.write('`Valid URL and anchor <https://www.python.org/about/#about-python>`_\n')
+        
+        print("\nRunning linkcheck...")
+        build(argv=['-M', 'linkcheck', 'source', 'build'])
+
+if __name__ == '__main__':
+    test_cases()
\ No newline at end of file
