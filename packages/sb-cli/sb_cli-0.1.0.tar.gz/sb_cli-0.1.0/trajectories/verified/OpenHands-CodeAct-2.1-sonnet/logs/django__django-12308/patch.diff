diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..e758403bd9
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/contrib/admin/utils.py b/django/contrib/admin/utils.py
index e4ddc8f017..be529890ba 100644
--- a/django/contrib/admin/utils.py
+++ b/django/contrib/admin/utils.py
@@ -398,6 +398,11 @@ def display_for_field(value, field, empty_value_display):
         return formats.number_format(value)
     elif isinstance(field, models.FileField) and value:
         return format_html('<a href="{}">{}</a>', value.url, value)
+    elif isinstance(field, models.JSONField):
+        # Use the form field's prepare_value method to properly format JSON
+        from django.forms.fields import JSONField as JSONFormField
+        form_field = JSONFormField()
+        return form_field.prepare_value(value)
     else:
         return display_for_value(value, empty_value_display)
 
diff --git a/manage.py b/manage.py
new file mode 100755
index 0000000000..4bbd297ade
--- /dev/null
+++ b/manage.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..43d99cb0c8
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,114 @@
+import os
+import django
+from django.conf import settings
+
+# Configure Django settings
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+settings.configure(
+    DEBUG=True,
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+        'reproduce',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE=[
+        'django.middleware.security.SecurityMiddleware',
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+    ],
+    ROOT_URLCONF='reproduce',
+    TEMPLATES=[{
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    }],
+    STATIC_URL='/static/',
+)
+
+django.setup()
+
+from django.contrib import admin
+from django.db import models
+from django.urls import path
+
+# Create a model with JSONField
+class TestModel(models.Model):
+    data = models.JSONField()
+
+    class Meta:
+        app_label = 'reproduce'
+
+    def __str__(self):
+        return f"TestModel {self.id}"
+
+# Create admin with readonly field
+class TestModelAdmin(admin.ModelAdmin):
+    readonly_fields = ['data']
+
+admin.site.register(TestModel, TestModelAdmin)
+
+# URLs configuration
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
+
+if __name__ == '__main__':
+    # Create tables
+    from django.core.management import call_command
+    call_command('migrate')
+    
+    # Create migrations for our app
+    from django.db.migrations.autodetector import MigrationAutodetector
+    from django.db.migrations.state import ProjectState
+    from django.db.migrations.loader import MigrationLoader
+    from django.db.migrations.questioner import NonInteractiveMigrationQuestioner
+    from django.apps import apps
+    
+    # Get the current state
+    loader = MigrationLoader(None)
+    autodetector = MigrationAutodetector(
+        loader.project_state(),
+        ProjectState.from_apps(apps),
+        NonInteractiveMigrationQuestioner(specified_apps={"reproduce"})
+    )
+    
+    # Create migrations
+    changes = autodetector.changes(graph=loader.graph)
+    if changes:
+        for app_label, app_migrations in changes.items():
+            for migration in app_migrations:
+                migration.write_file()
+    
+    # Apply migrations
+    call_command('migrate', 'reproduce')
+    
+    # Create a test object
+    test_obj = TestModel.objects.create(data={"foo": "bar"})
+    
+    # Create superuser
+    from django.contrib.auth.models import User
+    User.objects.create_superuser('admin', 'admin@example.com', 'admin')
+    
+    # Run development server
+    from django.core.management import execute_from_command_line
+    execute_from_command_line(['manage.py', 'runserver', '8000'])
\ No newline at end of file
diff --git a/reproduce/__init__.py b/reproduce/__init__.py
new file mode 100644
index 0000000000..22ae0c5f40
--- /dev/null
+++ b/reproduce/__init__.py
@@ -0,0 +1 @@
+# Empty file
\ No newline at end of file
diff --git a/reproduce/admin.py b/reproduce/admin.py
new file mode 100644
index 0000000000..5354237637
--- /dev/null
+++ b/reproduce/admin.py
@@ -0,0 +1,7 @@
+from django.contrib import admin
+from .models import TestModel
+
+class TestModelAdmin(admin.ModelAdmin):
+    readonly_fields = ['data']
+
+admin.site.register(TestModel, TestModelAdmin)
\ No newline at end of file
diff --git a/reproduce/apps.py b/reproduce/apps.py
new file mode 100644
index 0000000000..e98f4f49d2
--- /dev/null
+++ b/reproduce/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class ReproduceConfig(AppConfig):
+    name = 'reproduce'
\ No newline at end of file
diff --git a/reproduce/migrations/0001_initial.py b/reproduce/migrations/0001_initial.py
new file mode 100644
index 0000000000..319319391c
--- /dev/null
+++ b/reproduce/migrations/0001_initial.py
@@ -0,0 +1,21 @@
+# Generated by Django 3.1 on 2024-10-28 22:06
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('data', models.JSONField()),
+            ],
+        ),
+    ]
diff --git a/reproduce/migrations/__init__.py b/reproduce/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce/models.py b/reproduce/models.py
new file mode 100644
index 0000000000..ff3b999c4c
--- /dev/null
+++ b/reproduce/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class TestModel(models.Model):
+    data = models.JSONField()
+
+    def __str__(self):
+        return f"TestModel {self.id}"
\ No newline at end of file
diff --git a/server.log b/server.log
new file mode 100644
index 0000000000..cd8052fc2b
--- /dev/null
+++ b/server.log
@@ -0,0 +1 @@
+Watching for file changes with StatReloader
diff --git a/settings.py b/settings.py
new file mode 100644
index 0000000000..ae28846ff9
--- /dev/null
+++ b/settings.py
@@ -0,0 +1,84 @@
+import os
+
+# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
+BASE_DIR = os.path.dirname(os.path.abspath(__file__))
+
+# SECURITY WARNING: keep the secret key used in production secret!
+SECRET_KEY = 'dummy-key-for-dev'
+
+# SECURITY WARNING: don't run with debug turned on in production!
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+# Application definition
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'reproduce.apps.ReproduceConfig',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+# Password validation
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+# Internationalization
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_L10N = True
+USE_TZ = True
+
+# Static files (CSS, JavaScript, Images)
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/urls.py b/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
