diff --git a/django/db/models/fields/json.py b/django/db/models/fields/json.py
index a249f4cdbf..66c039c6e4 100644
--- a/django/db/models/fields/json.py
+++ b/django/db/models/fields/json.py
@@ -81,7 +81,7 @@ class JSONField(CheckFieldDefaultMixin, Field):
     def get_prep_value(self, value):
         if value is None:
             return value
-        return json.dumps(value, cls=self.encoder)
+        return json.dumps(value, cls=self.encoder, ensure_ascii=False)
 
     def get_transform(self, name):
         transform = super().get_transform(name)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..20097eef01
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,73 @@
+import os
+import django
+from django.conf import settings
+
+# Configure minimal Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        SECRET_KEY='dummy',
+    )
+
+# Initialize Django
+django.setup()
+
+from django.db import models, connection
+from django.contrib.admin import ModelAdmin, site
+
+# Create a model with JSONField
+class TestModel(models.Model):
+    data = models.JSONField()
+    
+    class Meta:
+        app_label = 'django.contrib.admin'  # Use admin app since it's already in INSTALLED_APPS
+
+# Create admin class
+class TestAdmin(ModelAdmin):
+    pass
+
+# Register admin
+site.register(TestModel, TestAdmin)
+
+if __name__ == '__main__':
+    # Create database tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TestModel)
+    
+    # Test various edge cases
+    test_cases = [
+        {'name': 'ä¸­å›½'},  # Chinese characters
+        {'name': ''},  # Empty string
+        {'name': None},  # None value
+        {'name': 'ðŸŒŸ'},  # Emoji
+        {'name': 'Hello ä¸–ç•Œ'},  # Mixed ASCII and Unicode
+        {'nested': {'name': 'ä¸­å›½'}},  # Nested JSON with Unicode
+        [{'name': 'ä¸­å›½'}, {'name': 'æ—¥æœ¬'}],  # Array of objects with Unicode
+    ]
+    
+    for data in test_cases:
+        test_obj = TestModel(data=data)
+        test_obj.save()
+        
+        # Get the form field from admin
+        admin_obj = site._registry[TestModel]
+        form = admin_obj.get_form(None)()
+        
+        # Print the form field widget value
+        print(f"\nTest case: {data}")
+        print("Form field widget value:")
+        print(form.fields['data'].widget.format_value(test_obj.data))
\ No newline at end of file
