diff --git a/bug_reproduction.png b/bug_reproduction.png
new file mode 100644
index 0000000000..6b78d40a45
Binary files /dev/null and b/bug_reproduction.png differ
diff --git a/edge_cases.png b/edge_cases.png
new file mode 100644
index 0000000000..3a6a5aa732
Binary files /dev/null and b/edge_cases.png differ
diff --git a/lib/matplotlib/patches.py b/lib/matplotlib/patches.py
index e062249589..0c893aac3a 100644
--- a/lib/matplotlib/patches.py
+++ b/lib/matplotlib/patches.py
@@ -586,10 +586,7 @@ class Patch(artist.Artist):
         # docstring inherited
         if not self.get_visible():
             return
-        # Patch has traditionally ignored the dashoffset.
-        with cbook._setattr_cm(
-                 self, _dash_pattern=(0, self._dash_pattern[1])), \
-             self._bind_draw_path_function(renderer) as draw_path:
+        with self._bind_draw_path_function(renderer) as draw_path:
             path = self.get_path()
             transform = self.get_transform()
             tpath = transform.transform_path_non_affine(path)
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..ddd9f6e312
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,11 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+
+plt.figure(figsize=(10,10))
+ax = plt.gca()
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'r', linewidth=4, ls=(0,(10,10))))
+ax.add_patch(mpl.patches.Rectangle((0.5,0.5),1,1, alpha=0.5, edgecolor = 'b', linewidth=4, ls=(10,(10,10))))
+plt.ylim([0,2])
+plt.xlim([0,2])
+plt.savefig('bug_reproduction.png')
+plt.close()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..fff19f299b
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,38 @@
+import matplotlib.pyplot as plt
+import matplotlib as mpl
+
+# Create a figure with multiple subplots
+fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 12))
+
+# Test 1: Different line widths
+ax1.add_patch(mpl.patches.Rectangle((0.5,0.5), 1, 1, alpha=0.5, edgecolor='r', linewidth=2, ls=(0,(5,5))))
+ax1.add_patch(mpl.patches.Rectangle((0.5,0.5), 1, 1, alpha=0.5, edgecolor='b', linewidth=4, ls=(5,(5,5))))
+ax1.set_title('Different line widths')
+ax1.set_xlim(0, 2)
+ax1.set_ylim(0, 2)
+
+# Test 2: Different dash patterns
+ax2.add_patch(mpl.patches.Rectangle((0.5,0.5), 1, 1, alpha=0.5, edgecolor='r', linewidth=4, ls=(0,(2,2))))
+ax2.add_patch(mpl.patches.Rectangle((0.5,0.5), 1, 1, alpha=0.5, edgecolor='b', linewidth=4, ls=(2,(2,2))))
+ax2.set_title('Short dash patterns')
+ax2.set_xlim(0, 2)
+ax2.set_ylim(0, 2)
+
+# Test 3: Different offsets
+ax3.add_patch(mpl.patches.Rectangle((0.5,0.5), 1, 1, alpha=0.5, edgecolor='r', linewidth=4, ls=(0,(10,10))))
+ax3.add_patch(mpl.patches.Rectangle((0.5,0.5), 1, 1, alpha=0.5, edgecolor='b', linewidth=4, ls=(5,(10,10))))
+ax3.add_patch(mpl.patches.Rectangle((0.5,0.5), 1, 1, alpha=0.5, edgecolor='g', linewidth=4, ls=(10,(10,10))))
+ax3.set_title('Multiple offsets')
+ax3.set_xlim(0, 2)
+ax3.set_ylim(0, 2)
+
+# Test 4: Complex dash patterns
+ax4.add_patch(mpl.patches.Rectangle((0.5,0.5), 1, 1, alpha=0.5, edgecolor='r', linewidth=4, ls=(0,(10,5,2,5))))
+ax4.add_patch(mpl.patches.Rectangle((0.5,0.5), 1, 1, alpha=0.5, edgecolor='b', linewidth=4, ls=(5,(10,5,2,5))))
+ax4.set_title('Complex dash patterns')
+ax4.set_xlim(0, 2)
+ax4.set_ylim(0, 2)
+
+plt.tight_layout()
+plt.savefig('edge_cases.png')
+plt.close()
\ No newline at end of file
