diff --git a/django/forms/models.py b/django/forms/models.py
index 5edbbd376f..0ccdcd89c1 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -46,10 +46,11 @@ def construct_instance(form, instance, fields=None, exclude=None):
             continue
         if exclude and f.name in exclude:
             continue
-        # Leave defaults for fields that aren't in POST data, except for
-        # checkbox inputs because they don't appear in POST data if not checked.
+        # Leave defaults for fields that aren't in POST data and cleaned_data,
+        # except for checkbox inputs because they don't appear in POST data if not checked.
         if (f.has_default() and
-                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name))):
+                form[f.name].field.widget.value_omitted_from_data(form.data, form.files, form.add_prefix(f.name)) and
+                f.name not in cleaned_data):
             continue
         # Defer saving file-type fields until after the other fields, so a
         # callable upload_to can use the values from other fields.
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..299d8187de
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,64 @@
+from django.conf import settings
+from django.db import models
+from django.forms import ModelForm
+import os
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+)
+
+import django
+django.setup()
+
+# Create a test model with a field that has a default value
+class TestModel(models.Model):
+    name = models.CharField(max_length=100, default='default_name')
+    
+    class Meta:
+        app_label = 'auth'  # Using an existing app from INSTALLED_APPS
+
+# Create a form for the model
+class TestForm(ModelForm):
+    class Meta:
+        model = TestModel
+        fields = ['name']
+
+    def __init__(self, *args, **kwargs):
+        super().__init__(*args, **kwargs)
+        self.fields['name'].required = False
+
+    def clean(self):
+        cleaned_data = super().clean()
+        # Try to modify the name in cleaned_data
+        cleaned_data['name'] = 'modified_in_cleaned_data'
+        return cleaned_data
+
+# Create database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(TestModel)
+
+# Test the form
+if __name__ == '__main__':
+    # Create a form without providing the 'name' field in the data
+    form = TestForm(data={})
+    
+    if form.is_valid():
+        instance = form.save()
+        print(f"Instance name: {instance.name}")
+        if instance.name == 'default_name':
+            print("BUG: The name was not modified through cleaned_data!")
+        elif instance.name == 'modified_in_cleaned_data':
+            print("SUCCESS: The name was successfully modified through cleaned_data!")
+    else:
+        print("Form validation failed:", form.errors)
\ No newline at end of file
