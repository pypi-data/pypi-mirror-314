diff --git a/django/db/migrations/loader.py b/django/db/migrations/loader.py
index 95a5062ec9..bab2757c47 100644
--- a/django/db/migrations/loader.py
+++ b/django/db/migrations/loader.py
@@ -90,7 +90,8 @@ class MigrationLoader:
             else:
                 # Empty directories are namespaces.
                 # getattr() needed on PY36 and older (replace w/attribute access).
-                if getattr(module, '__file__', None) is None:
+                # Regular packages have list for __path__, namespace packages use custom iterable type
+                if getattr(module, '__file__', None) is None and not (hasattr(module, '__path__') and isinstance(module.__path__, list)):
                     self.unmigrated_apps.add(app_config.label)
                     continue
                 # Module is not a package (e.g. migrations.py).
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a84c7f1688
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,67 @@
+import sys
+import types
+import os
+
+# Add Django to Python path
+sys.path.insert(0, '/testbed')
+
+# Create a mock module that simulates a non-namespace package without __file__
+mock_module = types.ModuleType('mock_migrations')
+mock_module.__path__ = ['/some/path']  # Regular packages have list for __path__
+
+# Create a mock module that simulates a namespace package
+namespace_module = types.ModuleType('namespace_migrations')
+namespace_module.__path__ = type('_NamespacePath', (), {'_path': ['/some/path']})()  # Namespace packages have custom type
+
+# Create a mock app config
+class MockAppConfig:
+    def __init__(self, label):
+        self.label = label
+        self.name = 'mock_app'
+
+# Import Django's MigrationLoader
+from django.db.migrations.loader import MigrationLoader
+
+# Create a loader instance
+loader = MigrationLoader(None, load=False)
+
+def test_module(module, label="test"):
+    # Mock the import_module to return our test module
+    import builtins
+    original_import = builtins.__import__
+    
+    def mock_import(name, *args, **kwargs):
+        if name == 'mock_app.migrations':
+            return module
+        return original_import(name, *args, **kwargs)
+    
+    builtins.__import__ = mock_import
+    
+    # Test the module
+    try:
+        app_config = MockAppConfig(label)
+        loader.disk_migrations = {}
+        loader.unmigrated_apps = set()
+        loader.migrated_apps = set()
+        
+        # Call the relevant part of load_disk()
+        module_name = 'mock_app.migrations'
+        try:
+            if getattr(module, '__file__', None) is None and not (hasattr(module, '__path__') and isinstance(module.__path__, list)):
+                loader.unmigrated_apps.add(app_config.label)
+                return "Rejected (treated as namespace package)"
+            if not hasattr(module, '__path__'):
+                loader.unmigrated_apps.add(app_config.label)
+                return "Rejected (not a package)"
+            return "Accepted"
+        except Exception as e:
+            return f"Error: {str(e)}"
+    finally:
+        # Restore original import
+        builtins.__import__ = original_import
+
+print("Testing regular package without __file__:")
+print(test_module(mock_module))
+
+print("\nTesting namespace package:")
+print(test_module(namespace_module))
\ No newline at end of file
