diff --git a/django/contrib/auth/forms.py b/django/contrib/auth/forms.py
index d73d1c8495..73fbbe668c 100644
--- a/django/contrib/auth/forms.py
+++ b/django/contrib/auth/forms.py
@@ -141,6 +141,7 @@ class UserCreationForm(forms.ModelForm):
         user.set_password(self.cleaned_data["password1"])
         if commit:
             user.save()
+            self.save_m2m()  # Save ManyToMany fields
         return user
 
 
diff --git a/migrations/0001_initial.py b/migrations/0001_initial.py
new file mode 100644
index 0000000000..ee94d63ae0
--- /dev/null
+++ b/migrations/0001_initial.py
@@ -0,0 +1,23 @@
+
+from django.db import migrations, models
+import django.db.models.deletion
+
+class Migration(migrations.Migration):
+    initial = True
+    dependencies = [
+        ('auth', '0012_alter_user_first_name_max_length'),
+    ]
+    operations = [
+        migrations.CreateModel(
+            name='CustomUser',
+            fields=[
+                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='auth.user')),
+            ],
+            bases=('auth.user',),
+        ),
+        migrations.AddField(
+            model_name='customuser',
+            name='favorite_groups',
+            field=models.ManyToManyField(related_name='favorited_by', to='auth.group'),
+        ),
+    ]
diff --git a/migrations/__init__.py b/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce_m2m_issue.py b/reproduce_m2m_issue.py
new file mode 100644
index 0000000000..67410ea220
--- /dev/null
+++ b/reproduce_m2m_issue.py
@@ -0,0 +1,79 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+# Create test_settings.py module
+with open('test_settings.py', 'w') as f:
+    f.write("""
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+]
+SECRET_KEY = 'dummy-key-for-tests'
+""")
+
+import django
+django.setup()
+
+from django.contrib.auth.forms import UserCreationForm
+from django.contrib.auth.models import Group, User
+from django.db import models
+from django.core.management import call_command
+
+# Run migrations for auth and contenttypes
+call_command('migrate')
+
+# Create tables for CustomUser
+from django.db import connection
+with connection.cursor() as cursor:
+    cursor.execute("""
+        CREATE TABLE auth_customuser (
+            user_ptr_id integer NOT NULL PRIMARY KEY REFERENCES auth_user(id)
+        )
+    """)
+    cursor.execute("""
+        CREATE TABLE auth_customuser_favorite_groups (
+            id integer NOT NULL PRIMARY KEY AUTOINCREMENT,
+            customuser_id integer NOT NULL REFERENCES auth_customuser(user_ptr_id),
+            group_id integer NOT NULL REFERENCES auth_group(id),
+            UNIQUE(customuser_id, group_id)
+        )
+    """)
+
+# Create a custom user model with M2M field
+class CustomUser(User):
+    favorite_groups = models.ManyToManyField(Group, related_name='favorited_by')
+
+    class Meta:
+        app_label = 'auth'
+
+# Create a custom form
+class CustomUserCreationForm(UserCreationForm):
+    class Meta(UserCreationForm.Meta):
+        model = CustomUser
+        fields = ('username', 'favorite_groups')
+
+# Run test
+if __name__ == '__main__':
+    # Create test group
+    group = Group.objects.create(name='test_group')
+    
+    # Create form with data
+    form_data = {
+        'username': 'testuser',
+        'password1': 'testpass123',
+        'password2': 'testpass123',
+        'favorite_groups': [group.id]
+    }
+    
+    form = CustomUserCreationForm(data=form_data)
+    if form.is_valid():
+        user = form.save()
+        print(f"User created: {user.username}")
+        print(f"Favorite groups: {list(user.favorite_groups.all())}")
+        print("Issue confirmed: Favorite groups are empty even though they were selected in the form")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..5aa52a8f5c
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,12 @@
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+INSTALLED_APPS = [
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+]
+SECRET_KEY = 'dummy-key-for-tests'
