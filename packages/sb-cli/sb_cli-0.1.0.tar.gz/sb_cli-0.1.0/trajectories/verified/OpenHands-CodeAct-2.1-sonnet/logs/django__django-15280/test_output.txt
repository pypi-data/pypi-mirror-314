+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch main
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   django/db/models/base.py
	modified:   django/db/models/fields/related_descriptors.py
	modified:   django/db/models/query.py
	modified:   django/db/models/query_utils.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	reproduce_bug.py
	test_settings.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit 973fa566521037ac140dcece73fceae50ee522f1
Author: David <smithdc@gmail.com>
Date:   Tue Jan 4 12:46:20 2022 +0000

    Removed unused comment directive in CBV topic docs.

diff --git a/docs/topics/class-based-views/generic-display.txt b/docs/topics/class-based-views/generic-display.txt
index cb35296149..cc8d9e21b0 100644
--- a/docs/topics/class-based-views/generic-display.txt
+++ b/docs/topics/class-based-views/generic-display.txt
@@ -68,8 +68,6 @@ of built-in generic views to help generate list and detail views of objects.
 Let's start by looking at some examples of showing a list of objects or an
 individual object.
 
-.. comment: link here to the other topic pages (form handling, date based, mixins)
-
 We'll be using these models::
 
     # models.py
+ git diff 973fa566521037ac140dcece73fceae50ee522f1
diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0d50dad0c9..a18946fa6e 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -437,6 +437,9 @@ class Model(metaclass=ModelBase):
         # Set up the storage for instance state
         self._state = ModelState()
 
+        # Track deferred fields
+        self._deferred_fields = set()
+
         # There is a rather weird disparity here; if kwargs, it's set, then args
         # overrides it. It should be one or the other; don't duplicate the work
         # The reason for the kwargs check is that standard iterator passes in by
@@ -539,6 +542,24 @@ class Model(metaclass=ModelBase):
         new = cls(*values)
         new._state.adding = False
         new._state.db = db
+        # Set up deferred fields
+        deferred_fields = {
+            f.attname for f in cls._meta.concrete_fields
+            if f.attname not in field_names
+        }
+        if deferred_fields:
+            new._deferred_fields = deferred_fields
+            # Set up deferred attributes
+            for field_name in deferred_fields:
+                field = cls._meta.get_field(field_name)
+                if not hasattr(cls, field_name):
+                    from django.db.models.query_utils import DeferredAttribute
+                    setattr(cls, field_name, DeferredAttribute(field))
+                if field_name in new.__dict__:
+                    del new.__dict__[field_name]
+            # Copy deferred fields to class for future instances
+            if not hasattr(cls, '_deferred_fields'):
+                cls._deferred_fields = deferred_fields.copy()
         return new
 
     def __repr__(self):
@@ -622,6 +643,41 @@ class Model(metaclass=ModelBase):
         """
         Return a set containing names of deferred fields for this instance.
         """
+        if hasattr(self, '_deferred_fields'):
+            # Check if any of the deferred fields are available in related objects
+            for field_name in list(self._deferred_fields):
+                # Check if this field is available in any related objects
+                for field in self._meta.get_fields():
+                    if hasattr(field, 'is_relation') and field.is_relation:
+                        if hasattr(self, field.name):
+                            rel_obj = getattr(self, field.name)
+                            if rel_obj is not None:
+                                # Check if the field is available in the related object
+                                if hasattr(rel_obj, field_name) and field_name in rel_obj.__dict__:
+                                    # Field is available in related object, copy it
+                                    self.__dict__[field_name] = rel_obj.__dict__[field_name]
+                                    self._deferred_fields.remove(field_name)
+                                # Check if the field is available in the related object's prefetched objects
+                                elif hasattr(rel_obj, '_prefetched_objects_cache'):
+                                    for prefetched_obj in rel_obj._prefetched_objects_cache.values():
+                                        if hasattr(prefetched_obj, field_name) and field_name in prefetched_obj.__dict__:
+                                            # Field is available in prefetched object, copy it
+                                            self.__dict__[field_name] = prefetched_obj.__dict__[field_name]
+                                            self._deferred_fields.remove(field_name)
+                                            break
+                                # Check if the field is available in any prefetched related objects
+                                elif hasattr(rel_obj, '_prefetched_objects_cache'):
+                                    for prefetched_obj in rel_obj._prefetched_objects_cache.values():
+                                        if hasattr(prefetched_obj, field_name):
+                                            # Check if the field is available in the prefetched object's prefetched objects
+                                            if hasattr(prefetched_obj, '_prefetched_objects_cache'):
+                                                for nested_obj in prefetched_obj._prefetched_objects_cache.values():
+                                                    if hasattr(nested_obj, field_name) and field_name in nested_obj.__dict__:
+                                                        # Field is available in nested prefetched object, copy it
+                                                        self.__dict__[field_name] = nested_obj.__dict__[field_name]
+                                                        self._deferred_fields.remove(field_name)
+                                                        break
+            return self._deferred_fields
         return {
             f.attname for f in self._meta.concrete_fields
             if f.attname not in self.__dict__
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index d5aa968400..41457ea29a 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -146,6 +146,19 @@ class ForwardManyToOneDescriptor:
             for rel_obj in queryset:
                 instance = instances_dict[rel_obj_attr(rel_obj)]
                 remote_field.set_cached_value(rel_obj, instance)
+                # Copy deferred fields from the original instance to the related object
+                if hasattr(instance, '_deferred_fields'):
+                    rel_obj._deferred_fields = instance._deferred_fields.copy()
+                    # Also set up deferred attributes for the copied fields
+                    for field_name in rel_obj._deferred_fields:
+                        field = rel_obj._meta.get_field(field_name)
+                        if not hasattr(rel_obj.__class__, field_name):
+                            setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                        if field_name in rel_obj.__dict__:
+                            del rel_obj.__dict__[field_name]
+                    # Ensure the deferred fields are properly set on the queryset
+                    if not hasattr(queryset, '_deferred_fields'):
+                        queryset._deferred_fields = instance._deferred_fields.copy()
         return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False
 
     def get_object(self, instance):
@@ -378,8 +391,136 @@ class ReverseOneToOneDescriptor:
         for rel_obj in queryset:
             instance = instances_dict[rel_obj_attr(rel_obj)]
             self.related.field.set_cached_value(rel_obj, instance)
+
+            # Copy all field values from the instance to the related object
+            for field in instance._meta.concrete_fields:
+                if field.attname in instance.__dict__:
+                    # Copy the field value to the related object
+                    setattr(rel_obj, field.attname, instance.__dict__[field.attname])
+
+            # Copy deferred fields state
+            if hasattr(instance, '_deferred_fields'):
+                rel_obj._deferred_fields = instance._deferred_fields.copy()
+                # Set up deferred attributes
+                for field_name in rel_obj._deferred_fields:
+                    field = instance._meta.get_field(field_name)
+                    if not hasattr(rel_obj.__class__, field_name):
+                        from django.db.models.query_utils import DeferredAttribute
+                        setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                    # Remove any cached value for deferred fields
+                    if field_name in rel_obj.__dict__:
+                        del rel_obj.__dict__[field_name]
+
+            # Copy prefetched objects cache
+            if hasattr(instance, '_prefetched_objects_cache'):
+                if not hasattr(rel_obj, '_prefetched_objects_cache'):
+                    rel_obj._prefetched_objects_cache = {}
+                rel_obj._prefetched_objects_cache.update(instance._prefetched_objects_cache)
+
+            # Copy state from instance to related object
+            rel_obj._state.db = instance._state.db
+            rel_obj._state.adding = instance._state.adding
+
+            # Copy any deferred fields from the original queryset
+            if hasattr(queryset, '_deferred_fields'):
+                rel_obj._deferred_fields = queryset._deferred_fields.copy()
+                # Set up deferred attributes
+                for field_name in rel_obj._deferred_fields:
+                    field = queryset.model._meta.get_field(field_name)
+                    if not hasattr(rel_obj.__class__, field_name):
+                        from django.db.models.query_utils import DeferredAttribute
+                        setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                    # Remove any cached value for deferred fields
+                    if field_name in rel_obj.__dict__:
+                        del rel_obj.__dict__[field_name]
+
+            # Copy any deferred fields from the prefetched queryset
+            if hasattr(queryset, '_prefetch_related_lookups'):
+                for lookup in queryset._prefetch_related_lookups:
+                    if hasattr(lookup, 'queryset') and lookup.queryset is not None:
+                        if hasattr(lookup.queryset, '_deferred_fields'):
+                            rel_obj._deferred_fields = lookup.queryset._deferred_fields.copy()
+                            # Set up deferred attributes
+                            for field_name in rel_obj._deferred_fields:
+                                field = lookup.queryset.model._meta.get_field(field_name)
+                                if not hasattr(rel_obj.__class__, field_name):
+                                    from django.db.models.query_utils import DeferredAttribute
+                                    setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                                # Remove any cached value for deferred fields
+                                if field_name in rel_obj.__dict__:
+                                    del rel_obj.__dict__[field_name]
+
+            # Copy any deferred fields from the prefetched queryset's model
+            if hasattr(queryset, '_prefetch_related_lookups'):
+                for lookup in queryset._prefetch_related_lookups:
+                    if hasattr(lookup, 'queryset') and lookup.queryset is not None:
+                        if hasattr(lookup.queryset.model, '_deferred_fields'):
+                            rel_obj._deferred_fields = lookup.queryset._deferred_fields.copy()
+                            # Set up deferred attributes
+                            for field_name in rel_obj._deferred_fields:
+                                field = lookup.queryset.model._meta.get_field(field_name)
+                                if not hasattr(rel_obj.__class__, field_name):
+                                    from django.db.models.query_utils import DeferredAttribute
+                                    setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                                # Remove any cached value for deferred fields
+                                if field_name in rel_obj.__dict__:
+                                    del rel_obj.__dict__[field_name]
+
+            # Copy any deferred fields from the prefetched queryset's model's parent
+            if hasattr(queryset, '_prefetch_related_lookups'):
+                for lookup in queryset._prefetch_related_lookups:
+                    if hasattr(lookup, 'queryset') and lookup.queryset is not None:
+                        if hasattr(lookup.queryset.model, '_meta'):
+                            for parent in lookup.queryset.model._meta.get_parent_list():
+                                if hasattr(parent, '_deferred_fields'):
+                                    rel_obj._deferred_fields = parent._deferred_fields.copy()
+                                    # Set up deferred attributes
+                                    for field_name in rel_obj._deferred_fields:
+                                        field = parent._meta.get_field(field_name)
+                                        if not hasattr(rel_obj.__class__, field_name):
+                                            from django.db.models.query_utils import DeferredAttribute
+                                            setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                                        # Remove any cached value for deferred fields
+                                        if field_name in rel_obj.__dict__:
+                                            del rel_obj.__dict__[field_name]
+
+            # Copy any deferred fields from the prefetched queryset's model's parent's fields
+            if hasattr(queryset, '_prefetch_related_lookups'):
+                for lookup in queryset._prefetch_related_lookups:
+                    if hasattr(lookup, 'queryset') and lookup.queryset is not None:
+                        if hasattr(lookup.queryset.model, '_meta'):
+                            for parent in lookup.queryset.model._meta.get_parent_list():
+                                if hasattr(parent, '_meta'):
+                                    for field in parent._meta.fields:
+                                        if hasattr(field, 'attname') and field.attname not in rel_obj.__dict__:
+                                            # Set up deferred attribute
+                                            if not hasattr(rel_obj.__class__, field.attname):
+                                                from django.db.models.query_utils import DeferredAttribute
+                                                setattr(rel_obj.__class__, field.attname, DeferredAttribute(field))
+                                            # Add to deferred fields
+                                            if not hasattr(rel_obj, '_deferred_fields'):
+                                                rel_obj._deferred_fields = set()
+                                            rel_obj._deferred_fields.add(field.attname)
+
+            # Copy any deferred fields from the prefetched queryset's model's fields
+            if hasattr(queryset, '_prefetch_related_lookups'):
+                for lookup in queryset._prefetch_related_lookups:
+                    if hasattr(lookup, 'queryset') and lookup.queryset is not None:
+                        if hasattr(lookup.queryset.model, '_meta'):
+                            for field in lookup.queryset.model._meta.fields:
+                                if hasattr(field, 'attname') and field.attname not in rel_obj.__dict__:
+                                    # Set up deferred attribute
+                                    if not hasattr(rel_obj.__class__, field.attname):
+                                        from django.db.models.query_utils import DeferredAttribute
+                                        setattr(rel_obj.__class__, field.attname, DeferredAttribute(field))
+                                    # Add to deferred fields
+                                    if not hasattr(rel_obj, '_deferred_fields'):
+                                        rel_obj._deferred_fields = set()
+                                    rel_obj._deferred_fields.add(field.attname)
+
         return queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False
 
+
     def __get__(self, instance, cls=None):
         """
         Get the related instance through the reverse relation.
diff --git a/django/db/models/query.py b/django/db/models/query.py
index fb6639793a..291c2f7a76 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -72,6 +72,16 @@ class ModelIterable(BaseIterable):
             if annotation_col_map:
                 for attr_name, col_pos in annotation_col_map.items():
                     setattr(obj, attr_name, row[col_pos])
+            # Preserve deferred fields from the original queryset
+            if hasattr(queryset, '_deferred_fields'):
+                obj._deferred_fields = queryset._deferred_fields.copy()
+                # Set up deferred attributes for the copied fields
+                for field_name in obj._deferred_fields:
+                    field = obj._meta.get_field(field_name)
+                    if not hasattr(obj.__class__, field_name):
+                        setattr(obj.__class__, field_name, DeferredAttribute(field))
+                    if field_name in obj.__dict__:
+                        del obj.__dict__[field_name]
 
             # Add the known related objects to the model.
             for field, rel_objs, rel_getter in known_related_objects:
@@ -1693,6 +1703,47 @@ def prefetch_related_objects(model_instances, *related_lookups):
     auto_lookups = set()  # we add to this as we go through.
     followed_descriptors = set()  # recursion protection
 
+    # Store deferred fields from original instances
+    deferred_fields_map = {}
+    for instance in model_instances:
+        if hasattr(instance, '_deferred_fields'):
+            deferred_fields_map[instance.__class__] = instance._deferred_fields.copy()
+
+    # Store deferred fields from prefetch lookups
+    prefetch_deferred_fields = {}
+    for lookup in related_lookups:
+        if isinstance(lookup, Prefetch) and lookup.queryset is not None:
+            if hasattr(lookup.queryset, '_deferred_fields'):
+                prefetch_deferred_fields[lookup.queryset.model] = lookup.queryset._deferred_fields.copy()
+
+    # Apply deferred fields to instances
+    for instance in model_instances:
+        if instance.__class__ in deferred_fields_map:
+            instance._deferred_fields = deferred_fields_map[instance.__class__].copy()
+            # Set up deferred attributes
+            for field_name in instance._deferred_fields:
+                field = instance._meta.get_field(field_name)
+                if not hasattr(instance.__class__, field_name):
+                    from django.db.models.query_utils import DeferredAttribute
+                    setattr(instance.__class__, field_name, DeferredAttribute(field))
+                # Remove any cached value for deferred fields
+                if field_name in instance.__dict__:
+                    del instance.__dict__[field_name]
+
+    # Apply prefetch deferred fields to instances
+    for instance in model_instances:
+        if instance.__class__ in prefetch_deferred_fields:
+            instance._deferred_fields = prefetch_deferred_fields[instance.__class__].copy()
+            # Set up deferred attributes
+            for field_name in instance._deferred_fields:
+                field = instance._meta.get_field(field_name)
+                if not hasattr(instance.__class__, field_name):
+                    from django.db.models.query_utils import DeferredAttribute
+                    setattr(instance.__class__, field_name, DeferredAttribute(field))
+                # Remove any cached value for deferred fields
+                if field_name in instance.__dict__:
+                    del instance.__dict__[field_name]
+
     all_lookups = normalize_prefetch_lookups(reversed(related_lookups))
     while all_lookups:
         lookup = all_lookups.pop()
@@ -1886,6 +1937,20 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
     #  cache or field name to assign to,
     #  boolean that is True when the previous argument is a cache name vs a field name).
 
+    # Copy deferred fields from original instances to prefetcher
+    for instance in instances:
+        if hasattr(instance, '_deferred_fields'):
+            prefetcher._deferred_fields = instance._deferred_fields.copy()
+            # Also copy deferred fields to the prefetcher's class
+            if not hasattr(prefetcher.__class__, '_deferred_fields'):
+                prefetcher.__class__._deferred_fields = instance._deferred_fields.copy()
+            # Set up deferred attributes
+            for field_name in instance._deferred_fields:
+                field = instance._meta.get_field(field_name)
+                if not hasattr(prefetcher.__class__, field_name):
+                    from django.db.models.query_utils import DeferredAttribute
+                    setattr(prefetcher.__class__, field_name, DeferredAttribute(field))
+
     # The 'values to be matched' must be hashable as they will be used
     # in a dictionary.
 
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 188b640850..ef02a93fdf 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -113,6 +113,45 @@ class DeferredAttribute:
             # might be able to reuse the already loaded value. Refs #18343.
             val = self._check_parent_chain(instance)
             if val is None:
+                # Check if this field was prefetched
+                if hasattr(instance, '_prefetched_objects_cache'):
+                    # Look for the field in prefetched objects
+                    for rel_obj in instance._prefetched_objects_cache.values():
+                        if hasattr(rel_obj, field_name) and field_name in rel_obj.__dict__:
+                            data[field_name] = rel_obj.__dict__[field_name]
+                            return data[field_name]
+                # Check if this field is deferred and has a cached value
+                if hasattr(instance, '_deferred_fields') and field_name in instance._deferred_fields:
+                    # Look for the field in the class's deferred fields
+                    if hasattr(instance.__class__, '_deferred_fields') and field_name in instance.__class__._deferred_fields:
+                        # The field is deferred and should be in the cache
+                        return data.get(field_name)
+                # Check if this field is available in any related objects
+                for field in instance._meta.get_fields():
+                    if hasattr(field, 'is_relation') and field.is_relation:
+                        if hasattr(instance, field.name):
+                            rel_obj = getattr(instance, field.name)
+                            if rel_obj is not None:
+                                # Check if the field is available in the related object
+                                if hasattr(rel_obj, field_name) and field_name in rel_obj.__dict__:
+                                    data[field_name] = rel_obj.__dict__[field_name]
+                                    return data[field_name]
+                                # Check if the field is available in the related object's prefetched objects
+                                if hasattr(rel_obj, '_prefetched_objects_cache'):
+                                    for prefetched_obj in rel_obj._prefetched_objects_cache.values():
+                                        if hasattr(prefetched_obj, field_name) and field_name in prefetched_obj.__dict__:
+                                            data[field_name] = prefetched_obj.__dict__[field_name]
+                                            return data[field_name]
+                                # Check if the field is available in any prefetched related objects
+                                if hasattr(rel_obj, '_prefetched_objects_cache'):
+                                    for prefetched_obj in rel_obj._prefetched_objects_cache.values():
+                                        if hasattr(prefetched_obj, field_name):
+                                            # Check if the field is available in the prefetched object's prefetched objects
+                                            if hasattr(prefetched_obj, '_prefetched_objects_cache'):
+                                                for nested_obj in prefetched_obj._prefetched_objects_cache.values():
+                                                    if hasattr(nested_obj, field_name) and field_name in nested_obj.__dict__:
+                                                        data[field_name] = nested_obj.__dict__[field_name]
+                                                        return data[field_name]
                 instance.refresh_from_db(fields=[field_name])
             else:
                 data[field_name] = val
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Installing build dependencies: started
  Installing build dependencies: finished with status 'done'
  Checking if build backend supports build_editable: started
  Checking if build backend supports build_editable: finished with status 'done'
  Getting requirements to build editable: started
  Getting requirements to build editable: finished with status 'done'
  Preparing editable metadata (pyproject.toml): started
  Preparing editable metadata (pyproject.toml): finished with status 'done'
Requirement already satisfied: asgiref>=3.4.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220105071113) (3.8.1)
Requirement already satisfied: sqlparse>=0.2.2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Django==4.1.dev20220105071113) (0.5.1)
Requirement already satisfied: typing-extensions>=4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from asgiref>=3.4.1->Django==4.1.dev20220105071113) (4.12.2)
Building wheels for collected packages: Django
  Building editable for Django (pyproject.toml): started
  Building editable for Django (pyproject.toml): finished with status 'done'
  Created wheel for Django: filename=Django-4.1.dev20220105071113-0.editable-py3-none-any.whl size=26872 sha256=7e458c140b4fb80dd5afdf95b0c6daf0b9061363fba37d43abbca787170134fc
  Stored in directory: /tmp/pip-ephem-wheel-cache-buw9rytk/wheels/7d/66/67/70d1ee2124ccf21d601c352e25cdca10f611f7c8b3f9ffb9e4
Successfully built Django
Installing collected packages: Django
  Attempting uninstall: Django
    Found existing installation: Django 4.1.dev20220105071113
    Uninstalling Django-4.1.dev20220105071113:
      Successfully uninstalled Django-4.1.dev20220105071113
Successfully installed Django-4.1.dev20220105071113
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout 973fa566521037ac140dcece73fceae50ee522f1 tests/prefetch_related/tests.py
Updated 0 paths from 90963a8d9d
+ git apply -v -
Checking patch tests/prefetch_related/tests.py...
Applied patch tests/prefetch_related/tests.py cleanly.
+ ./tests/runtests.py --verbosity 2 --settings=test_sqlite --parallel 1 prefetch_related.tests
Creating test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Testing against Django installed in '/testbed/django'
Importing application prefetch_related
Found 86 test(s).
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, prefetch_related, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table prefetch_related_author
    Creating table prefetch_related_authorwithage
    Creating table prefetch_related_favoriteauthors
    Creating table prefetch_related_authoraddress
    Creating table prefetch_related_book
    Creating table prefetch_related_bookwithyear
    Creating table prefetch_related_bio
    Creating table prefetch_related_reader
    Creating table prefetch_related_bookreview
    Creating table prefetch_related_qualification
    Creating table prefetch_related_teacher
    Creating table prefetch_related_department
    Creating table prefetch_related_taggeditem
    Creating table prefetch_related_article
    Creating table prefetch_related_bookmark
    Creating table prefetch_related_comment
    Creating table prefetch_related_house
    Creating table prefetch_related_room
    Creating table prefetch_related_person
    Creating table prefetch_related_employee
    Creating table prefetch_related_lessonentry
    Creating table prefetch_related_wordentry
    Creating table prefetch_related_author2
    Creating table prefetch_related_pet
    Creating table prefetch_related_flea
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
Creating test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
Operations to perform:
  Synchronize unmigrated apps: auth, contenttypes, messages, prefetch_related, sessions, staticfiles
  Apply all migrations: admin, sites
Synchronizing apps without migrations:
  Creating tables...
    Creating table django_content_type
    Creating table auth_permission
    Creating table auth_group
    Creating table auth_user
    Creating table django_session
    Creating table prefetch_related_author
    Creating table prefetch_related_authorwithage
    Creating table prefetch_related_favoriteauthors
    Creating table prefetch_related_authoraddress
    Creating table prefetch_related_book
    Creating table prefetch_related_bookwithyear
    Creating table prefetch_related_bio
    Creating table prefetch_related_reader
    Creating table prefetch_related_bookreview
    Creating table prefetch_related_qualification
    Creating table prefetch_related_teacher
    Creating table prefetch_related_department
    Creating table prefetch_related_taggeditem
    Creating table prefetch_related_article
    Creating table prefetch_related_bookmark
    Creating table prefetch_related_comment
    Creating table prefetch_related_house
    Creating table prefetch_related_room
    Creating table prefetch_related_person
    Creating table prefetch_related_employee
    Creating table prefetch_related_lessonentry
    Creating table prefetch_related_wordentry
    Creating table prefetch_related_author2
    Creating table prefetch_related_pet
    Creating table prefetch_related_flea
    Running deferred SQL...
Running migrations:
  Applying admin.0001_initial... OK
  Applying admin.0002_logentry_remove_auto_add... OK
  Applying admin.0003_logentry_add_action_flag_choices... OK
  Applying sites.0001_initial... OK
  Applying sites.0002_alter_domain_unique... OK
System check identified no issues (0 silenced).
test_ambiguous (prefetch_related.tests.CustomPrefetchTests) ... ok
test_custom_qs (prefetch_related.tests.CustomPrefetchTests) ... FAIL
test_filter_deferred (prefetch_related.tests.CustomPrefetchTests)
Related filtering of prefetched querysets is deferred until necessary. ... ok
test_generic_rel (prefetch_related.tests.CustomPrefetchTests) ... ok
test_m2m (prefetch_related.tests.CustomPrefetchTests) ... ok
test_m2m_through_fk (prefetch_related.tests.CustomPrefetchTests) ... ok
test_m2m_through_gfk (prefetch_related.tests.CustomPrefetchTests) ... ok
test_nested_prefetch_related_are_not_overwritten (prefetch_related.tests.CustomPrefetchTests) ... ok
test_nested_prefetch_related_with_duplicate_prefetcher (prefetch_related.tests.CustomPrefetchTests)
Nested prefetches whose name clashes with descriptor names ... ok
test_o2m_through_m2m (prefetch_related.tests.CustomPrefetchTests) ... ok
test_raw_queryset (prefetch_related.tests.CustomPrefetchTests) ... ok
test_reverse_m2m (prefetch_related.tests.CustomPrefetchTests) ... ok
test_to_attr_cached_property (prefetch_related.tests.CustomPrefetchTests) ... ok
test_to_attr_doesnt_cache_through_attr_as_list (prefetch_related.tests.CustomPrefetchTests) ... ok
test_traverse_multiple_items_property (prefetch_related.tests.CustomPrefetchTests) ... ok
test_traverse_qs (prefetch_related.tests.CustomPrefetchTests) ... ok
test_traverse_single_item_property (prefetch_related.tests.CustomPrefetchTests) ... ok
test_values_queryset (prefetch_related.tests.CustomPrefetchTests) ... ok
test_m2m_then_m2m (prefetch_related.tests.DefaultManagerTests) ... ok
test_add_clears_prefetched_objects (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests) ... ok
test_detect_is_fetched (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests)
Nested prefetch_related() shouldn't trigger duplicate queries for the same ... ok
test_detect_is_fetched_with_to_attr (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests) ... ok
test_prefetch_reverse_foreign_key (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests) ... ok
test_remove_clears_prefetched_objects (prefetch_related.tests.DirectPrefetchedObjectCacheReuseTests) ... ok
test_foreignkey (prefetch_related.tests.ForeignKeyToFieldTest) ... ok
test_m2m (prefetch_related.tests.ForeignKeyToFieldTest) ... ok
test_m2m_manager_reused (prefetch_related.tests.ForeignKeyToFieldTest) ... ok
test_charfield_GFK (prefetch_related.tests.GenericRelationTests) ... ok
test_custom_queryset (prefetch_related.tests.GenericRelationTests) ... ok
test_deleted_GFK (prefetch_related.tests.GenericRelationTests) ... ok
test_generic_relation (prefetch_related.tests.GenericRelationTests) ... ok
test_nullable_GFK (prefetch_related.tests.GenericRelationTests) ... ok
test_prefetch_GFK (prefetch_related.tests.GenericRelationTests) ... ok
test_prefetch_GFK_fk_pk (prefetch_related.tests.GenericRelationTests) ... ok
test_prefetch_GFK_nonint_pk (prefetch_related.tests.GenericRelationTests) ... ok
test_prefetch_GFK_uuid_pk (prefetch_related.tests.GenericRelationTests) ... ok
test_traverse_GFK (prefetch_related.tests.GenericRelationTests)
A 'content_object' can be traversed with prefetch_related() and ... ok
test_order (prefetch_related.tests.LookupOrderingTest) ... ok
test_using_is_honored_custom_qs (prefetch_related.tests.MultiDbTests) ... ok
test_using_is_honored_fkey (prefetch_related.tests.MultiDbTests) ... ok
test_using_is_honored_inheritance (prefetch_related.tests.MultiDbTests) ... ok
test_using_is_honored_m2m (prefetch_related.tests.MultiDbTests) ... ok
test_child_link_prefetch (prefetch_related.tests.MultiTableInheritanceTest) ... ok
test_foreignkey (prefetch_related.tests.MultiTableInheritanceTest) ... ok
test_foreignkey_to_inherited (prefetch_related.tests.MultiTableInheritanceTest) ... ok
test_m2m_to_inheriting_model (prefetch_related.tests.MultiTableInheritanceTest) ... ok
test_parent_link_prefetch (prefetch_related.tests.MultiTableInheritanceTest) ... ok
test_nested_prefetch_is_not_overwritten_by_related_object (prefetch_related.tests.NestedPrefetchTests)
The prefetched relationship is used rather than populating the reverse ... ok
test_in_bulk (prefetch_related.tests.NullableTest)
In-bulk does correctly prefetch objects by not using .iterator() ... ok
test_prefetch_nullable (prefetch_related.tests.NullableTest) ... ok
test_traverse_nullable (prefetch_related.tests.NullableTest) ... ok
test_attribute_error (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_bool (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_clear (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_count (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_exists (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_filter_deferred (prefetch_related.tests.PrefetchRelatedTests)
Related filtering of prefetched querysets is deferred on m2m and ... ok
test_foreign_key_then_m2m (prefetch_related.tests.PrefetchRelatedTests)
A m2m relation can be followed after a relation like ForeignKey that ... ok
test_foreignkey_forward (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_foreignkey_reverse (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_forward_m2m_to_attr_conflict (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_get (prefetch_related.tests.PrefetchRelatedTests)
Objects retrieved with .get() get the prefetch behavior. ... ok
test_in_and_prefetch_related (prefetch_related.tests.PrefetchRelatedTests)
Regression test for #20242 - QuerySet "in" didn't work the first time ... ok
test_invalid_final_lookup (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_len (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_m2m_forward (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_m2m_reverse (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_m2m_then_m2m (prefetch_related.tests.PrefetchRelatedTests)
A m2m can be followed through another m2m. ... ok
test_m2m_then_m2m_object_ids (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_m2m_then_reverse_fk_object_ids (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_m2m_then_reverse_one_to_one_object_ids (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_named_values_list (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_onetoone_reverse_no_match (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_onetoone_reverse_with_to_field_pk (prefetch_related.tests.PrefetchRelatedTests)
A model (Bio) with a OneToOneField primary key (author) that references ... ok
test_overriding_prefetch (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_prefetch_eq (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_reverse_m2m_to_attr_conflict (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_reverse_one_to_one_then_m2m (prefetch_related.tests.PrefetchRelatedTests)
A m2m relation can be followed after going through the select_related ... ok
test_survives_clone (prefetch_related.tests.PrefetchRelatedTests) ... ok
test_basic (prefetch_related.tests.RawQuerySetTests) ... ok
test_clear (prefetch_related.tests.RawQuerySetTests) ... ok
test_prefetch_before_raw (prefetch_related.tests.RawQuerySetTests) ... ok
test_retrieves_results_from_prefetched_objects_cache (prefetch_related.tests.ReadPrefetchedObjectsCacheTests)
When intermediary results are prefetched without a destination ... ok
test_bug (prefetch_related.tests.Ticket19607Tests) ... ok
test_bug (prefetch_related.tests.Ticket21410Tests) ... ok
test_bug (prefetch_related.tests.Ticket21760Tests) ... ok

======================================================================
FAIL: test_custom_qs (prefetch_related.tests.CustomPrefetchTests)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/testbed/tests/prefetch_related/tests.py", line 764, in test_custom_qs
    getattr(rooms.first().house, 'address')
  File "/testbed/django/test/testcases.py", line 84, in __exit__
    self.test_case.assertEqual(
AssertionError: 2 != 3 : 2 queries executed, 3 expected
Captured queries were:
1. SELECT "prefetch_related_room"."id", "prefetch_related_room"."name", "prefetch_related_room"."house_id" FROM "prefetch_related_room" ORDER BY "prefetch_related_room"."id" ASC LIMIT 1
2. SELECT "prefetch_related_house"."id", "prefetch_related_house"."name" FROM "prefetch_related_house" WHERE "prefetch_related_house"."id" IN (1) ORDER BY "prefetch_related_house"."id" ASC

----------------------------------------------------------------------
Ran 86 tests in 0.291s

FAILED (failures=1)
Destroying test database for alias 'default' ('file:memorydb_default?mode=memory&cache=shared')...
Destroying test database for alias 'other' ('file:memorydb_other?mode=memory&cache=shared')...
+ git checkout 973fa566521037ac140dcece73fceae50ee522f1 tests/prefetch_related/tests.py
Updated 1 path from 90963a8d9d
