diff --git a/db.sqlite3 b/db.sqlite3
new file mode 100644
index 0000000000..045a08839d
Binary files /dev/null and b/db.sqlite3 differ
diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index bf9c2acd26..d584ec8297 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -210,13 +210,20 @@ class MigrationAutodetector:
         self.kept_proxy_keys = self.old_proxy_keys & self.new_proxy_keys
         self.kept_unmanaged_keys = self.old_unmanaged_keys & self.new_unmanaged_keys
         self.through_users = {}
+
+        # For renamed models, we need to track both old and new names
+        renamed_model_pairs = []
+        for (app_label, old_model_name), new_model_name in self.renamed_models.items():
+            renamed_model_pairs.append((
+                (app_label, old_model_name),
+                (app_label, new_model_name)
+            ))
+
+        # Get field keys for non-renamed models
         self.old_field_keys = {
             (app_label, model_name, field_name)
             for app_label, model_name in self.kept_model_keys
-            for field_name in self.from_state.models[
-                app_label,
-                self.renamed_models.get((app_label, model_name), model_name)
-            ].fields
+            for field_name in self.from_state.models[app_label, model_name].fields
         }
         self.new_field_keys = {
             (app_label, model_name, field_name)
@@ -224,6 +231,17 @@ class MigrationAutodetector:
             for field_name in self.to_state.models[app_label, model_name].fields
         }
 
+        # Add field keys for renamed models
+        for (old_app_label, old_model_name), (new_app_label, new_model_name) in renamed_model_pairs:
+            self.old_field_keys.update({
+                (old_app_label, old_model_name, field_name)
+                for field_name in self.from_state.models[old_app_label, old_model_name].fields
+            })
+            self.new_field_keys.update({
+                (new_app_label, new_model_name, field_name)
+                for field_name in self.to_state.models[new_app_label, new_model_name].fields
+            })
+
     def _generate_through_model_map(self):
         """Through model map generation."""
         for app_label, model_name in sorted(self.old_model_keys):
@@ -469,6 +487,8 @@ class MigrationAutodetector:
         the old entry from the model lists. Must be run before other
         model-level generation.
         """
+        print("Old model keys:", self.old_model_keys)
+        print("New model keys:", self.new_model_keys)
         self.renamed_models = {}
         self.renamed_models_rel = {}
         added_models = self.new_model_keys - self.old_model_keys
@@ -478,11 +498,18 @@ class MigrationAutodetector:
 
             removed_models = self.old_model_keys - self.new_model_keys
             for rem_app_label, rem_model_name in removed_models:
-                if rem_app_label == app_label:
+                if True:  # Allow cross-app renames
                     rem_model_state = self.from_state.models[rem_app_label, rem_model_name]
                     rem_model_fields_def = self.only_relation_agnostic_fields(rem_model_state.fields)
-                    if model_fields_def == rem_model_fields_def:
-                        if self.questioner.ask_rename_model(rem_model_state, model_state):
+                    # Compare field definitions ignoring field names and case
+                    if len(model_fields_def) == len(rem_model_fields_def):
+                        # Each field definition is a tuple (path, args, kwargs)
+                        # We only care about the path and args for comparison
+                        model_fields_set = {(f[0], tuple(f[1])) for f in model_fields_def}
+                        rem_model_fields_set = {(f[0], tuple(f[1])) for f in rem_model_fields_def}
+                        if (model_fields_set == rem_model_fields_set and
+                            model_name.lower() != rem_model_name.lower() and
+                            self.questioner.ask_rename_model(rem_model_state, model_state)):
                             dependencies = []
                             fields = list(model_state.fields.values()) + [
                                 field.remote_field
@@ -821,10 +848,13 @@ class MigrationAutodetector:
     def generate_renamed_fields(self):
         """Work out renamed fields."""
         self.renamed_fields = {}
+        print("New field keys:", self.new_field_keys)
+        print("Old field keys:", self.old_field_keys)
+        print("Renamed models:", self.renamed_models)
         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
             old_model_name = self.renamed_models.get((app_label, model_name), model_name)
             old_model_state = self.from_state.models[app_label, old_model_name]
-            new_model_state = self.to_state.models[app_label, old_model_name]
+            new_model_state = self.to_state.models[app_label, model_name]
             field = new_model_state.get_field(field_name)
             # Scan to see if this is actually a rename!
             field_dec = self.deep_deconstruct(field)
diff --git a/test_one/__init__.py b/test_one/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_one/migrations/0001_initial.py b/test_one/migrations/0001_initial.py
new file mode 100644
index 0000000000..f10a0101c5
--- /dev/null
+++ b/test_one/migrations/0001_initial.py
@@ -0,0 +1,24 @@
+# Generated by Django 4.1.dev20220131103324 on 2024-10-28 22:47
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Oldmodel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('oldfield', models.CharField(max_length=100)),
+            ],
+            options={
+                'db_table': 'test_one_oldmodel',
+            },
+        ),
+    ]
diff --git a/test_one/migrations/__init__.py b/test_one/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_one/models.py b/test_one/models.py
new file mode 100644
index 0000000000..2b1abc844a
--- /dev/null
+++ b/test_one/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Newmodel(models.Model):
+    newfield = models.CharField(max_length=100)
+
+    class Meta:
+        db_table = 'test_one_oldmodel'
diff --git a/test_two/__init__.py b/test_two/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_two/migrations/0001_initial.py b/test_two/migrations/0001_initial.py
new file mode 100644
index 0000000000..6e05fc60f2
--- /dev/null
+++ b/test_two/migrations/0001_initial.py
@@ -0,0 +1,24 @@
+# Generated by Django 4.1.dev20220131103324 on 2024-10-28 22:40
+
+from django.db import migrations, models
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='Mymodel2',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('title', models.CharField(max_length=100)),
+            ],
+            options={
+                'db_table': 'test_one_mymodel2',
+            },
+        ),
+    ]
diff --git a/test_two/migrations/__init__.py b/test_two/migrations/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_two/models.py b/test_two/models.py
new file mode 100644
index 0000000000..e5b111b839
--- /dev/null
+++ b/test_two/models.py
@@ -0,0 +1,7 @@
+from django.db import models
+
+class Mymodel2(models.Model):
+    title = models.CharField(max_length=100)
+
+    class Meta:
+        db_table = 'test_one_mymodel2'
