+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   sympy/polys/domains/algebraicfield.py
	modified:   sympy/polys/factortools.py
	modified:   sympy/polys/polytools.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
+ git diff b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9
commit b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9
Merge: 65779e1a53 08fd91d4b6
Author: Oscar Benjamin <oscar.j.benjamin@gmail.com>
Date:   Tue Mar 31 20:18:53 2020 +0100

    Merge pull request #18881 from Mohitbalwani26/refactoring_tests
    
    refactor(test_ode): nth_order_linear_euler_eq_homogeneous

diff --git a/sympy/polys/domains/algebraicfield.py b/sympy/polys/domains/algebraicfield.py
index 028a29e7a8..1c1cf4d38e 100644
--- a/sympy/polys/domains/algebraicfield.py
+++ b/sympy/polys/domains/algebraicfield.py
@@ -129,4 +129,44 @@ def denom(self, a):
 
     def from_AlgebraicField(K1, a, K0):
         """Convert AlgebraicField element 'a' to another AlgebraicField """
-        return K1.from_sympy(K0.to_sympy(a))
+        try:
+            return K1.from_sympy(K0.to_sympy(a))
+        except (CoercionFailed, NotAlgebraic):
+            # Try to handle complex numbers specially
+            if K1.ext == I and K0.ext == I:
+                # Both fields are complex, just convert directly
+                return a
+            elif K1.ext == I:
+                # Converting to complex field
+                expr = K0.to_sympy(a)
+                re, im = expr.as_real_imag()
+                if im.is_zero:
+                    # Real coefficient, convert normally
+                    return K1.from_sympy(re)
+                else:
+                    # Complex coefficient, convert real and imaginary parts separately
+                    return K1.from_sympy(re + I*im)
+            elif K0.ext == I:
+                # Converting from complex field
+                expr = K0.to_sympy(a)
+                re, im = expr.as_real_imag()
+                if im.is_zero:
+                    # Real coefficient, convert normally
+                    return K1.from_sympy(re)
+                else:
+                    # Complex coefficient, convert real and imaginary parts separately
+                    return K1.from_sympy(re + I*im)
+            else:
+                # Neither field is complex, try normal conversion
+                try:
+                    return K1.from_sympy(K0.to_sympy(a))
+                except (CoercionFailed, NotAlgebraic):
+                    # Try to handle complex numbers specially
+                    expr = K0.to_sympy(a)
+                    re, im = expr.as_real_imag()
+                    if im.is_zero:
+                        # Real coefficient, convert normally
+                        return K1.from_sympy(re)
+                    else:
+                        # Complex coefficient, convert real and imaginary parts separately
+                        return K1.from_sympy(re + I*im)
diff --git a/sympy/polys/factortools.py b/sympy/polys/factortools.py
index c6a5f9f063..cbc6a55d07 100644
--- a/sympy/polys/factortools.py
+++ b/sympy/polys/factortools.py
@@ -69,7 +69,7 @@
 from sympy.polys.polyconfig import query
 
 from sympy.polys.polyerrors import (
-    ExtraneousFactors, DomainError, CoercionFailed, EvaluationFailed)
+    ExtraneousFactors, DomainError, CoercionFailed, EvaluationFailed, NotAlgebraic)
 
 from sympy.ntheory import nextprime, isprime, factorint
 from sympy.utilities import subsets
@@ -1124,14 +1124,55 @@ def dup_ext_factor(f, K):
         return lc, [(f, n//dup_degree(f))]
 
     H = s*K.unit
+    new_factors = []
 
-    for i, (factor, _) in enumerate(factors):
+    # First convert all factors to the extension field
+    for factor, k in factors:
         h = dup_convert(factor, K.dom, K)
         h, _, g = dup_inner_gcd(h, g, K)
         h = dup_shift(h, H, K)
-        factors[i] = h
-
-    factors = dup_trial_division(F, factors, K)
+        if not dmp_zero_p(h, 0):  # Only add non-zero factors
+            new_factors.append((h, k))
+
+    # If we lost factors, try to recover them from the original polynomial
+    if not new_factors or len(new_factors) < len(factors):
+        # Try to factor the original polynomial directly
+        F = f
+        factors = []
+        while F:
+            for h, k in new_factors:
+                q, r = dup_div(F, h, K)
+                if not r:  # h divides F
+                    factors.append((h, k))
+                    F = q
+                    break
+            else:
+                # No factor divides F, so F must be irreducible
+                if F != [K.one]:
+                    factors.append((F, 1))
+                break
+        new_factors = factors
+
+    # Ensure we have all factors by checking if their product equals the original polynomial
+    product = [lc]
+    for h, k in new_factors:
+        for _ in range(k):
+            product = dup_mul(product, h, K)
+
+    # If we're missing factors, try to recover them by factoring over the base field
+    if product != F:
+        # Convert the polynomial to the base field
+        f_base = dup_convert(f, K, K.dom)
+        base_factors = dup_factor_list_include(f_base, K.dom)
+        
+        # Convert each factor back to the extension field
+        new_factors = []
+        for factor, k in base_factors:
+            h = dup_convert(factor, K.dom, K)
+            if not dmp_zero_p(h, 0):  # Only add non-zero factors
+                new_factors.append((h, k))
+
+    factors = dup_trial_division(F, [f for f, _ in new_factors], K)
     return lc, factors
 
 
@@ -1146,23 +1187,151 @@ def dmp_ext_factor(f, u, K):
     if all(d <= 0 for d in dmp_degree_list(f, u)):
         return lc, []
 
+    # Try factoring in the base field first
+    try:
+        f_base = dmp_convert(f, u, K, K.dom)
+        base_factors = dmp_factor_list_include(f_base, u, K.dom)
+        if len(base_factors) > 1:
+            # Convert each factor back to the extension field
+            factors = []
+            for factor, k in base_factors:
+                h = dmp_convert(factor, u, K.dom, K)
+                if not dmp_zero_p(h, u):  # Only add non-zero factors
+                    factors.append((h, k))
+            # Verify that we have all factors
+            product = dmp_mul_ground(dmp_one(u, K), lc, u, K)
+            for h, k in factors:
+                for _ in range(k):
+                    product = dmp_mul(product, h, u, K)
+            if product == f:
+                return lc, factors
+    except (CoercionFailed, NotAlgebraic):
+        pass
+
+    # If that didn't work, try factoring in the extension field
     f, F = dmp_sqf_part(f, u, K), f
     s, g, r = dmp_sqf_norm(f, u, K)
 
     factors = dmp_factor_list_include(r, u, K.dom)
 
     if len(factors) == 1:
-        factors = [f]
+        # Try factoring in the extension field directly
+        try:
+            # Convert to the base field and back to normalize
+            f_base = dmp_convert(f, u, K, K.dom)
+            f_ext = dmp_convert(f_base, u, K.dom, K)
+            if f_ext == f:
+                # If the polynomial is unchanged, it's irreducible
+                return lc, [(f, 1)]
+        except (CoercionFailed, NotAlgebraic):
+            pass
+
+        # Try factoring in the extension field
+        H = dmp_raise([K.one, s*K.unit], u, 0, K)
+        new_factors = []
+
+        # Convert all factors to the extension field
+        for factor, k in factors:
+            h = dmp_convert(factor, u, K.dom, K)
+            h, _, g = dmp_inner_gcd(h, g, u, K)
+            h = dmp_compose(h, H, u, K)
+            if not dmp_zero_p(h, u):  # Only add non-zero factors
+                new_factors.append((h, k))
+
+        if new_factors:
+            factors = new_factors
+        else:
+            # Try factoring in the extension field directly
+            try:
+                # Convert to the base field and back to normalize
+                f_base = dmp_convert(f, u, K, K.dom)
+                base_factors = dmp_factor_list_include(f_base, u, K.dom)
+                if len(base_factors) > 1:
+                    # Convert each factor back to the extension field
+                    factors = []
+                    for factor, k in base_factors:
+                        h = dmp_convert(factor, u, K.dom, K)
+                        if not dmp_zero_p(h, u):  # Only add non-zero factors
+                            factors.append((h, k))
+                    # Verify that we have all factors
+                    product = dmp_mul_ground(dmp_one(u, K), lc, u, K)
+                    for h, k in factors:
+                        for _ in range(k):
+                            product = dmp_mul(product, h, u, K)
+                    if product == f:
+                        return lc, factors
+            except (CoercionFailed, NotAlgebraic):
+                pass
+            return lc, [(f, 1)]
     else:
         H = dmp_raise([K.one, s*K.unit], u, 0, K)
+        new_factors = []
 
-        for i, (factor, _) in enumerate(factors):
+        # Convert all factors to the extension field
+        for factor, k in factors:
             h = dmp_convert(factor, u, K.dom, K)
             h, _, g = dmp_inner_gcd(h, g, u, K)
             h = dmp_compose(h, H, u, K)
-            factors[i] = h
+            if not dmp_zero_p(h, u):  # Only add non-zero factors
+                new_factors.append((h, k))
+
+        if new_factors:
+            factors = new_factors
+        else:
+            # Try factoring in the extension field directly
+            try:
+                # Convert to the base field and back to normalize
+                f_base = dmp_convert(f, u, K, K.dom)
+                base_factors = dmp_factor_list_include(f_base, u, K.dom)
+                if len(base_factors) > 1:
+                    # Convert each factor back to the extension field
+                    factors = []
+                    for factor, k in base_factors:
+                        h = dmp_convert(factor, u, K.dom, K)
+                        if not dmp_zero_p(h, u):  # Only add non-zero factors
+                            factors.append((h, k))
+                    # Verify that we have all factors
+                    product = dmp_mul_ground(dmp_one(u, K), lc, u, K)
+                    for h, k in factors:
+                        for _ in range(k):
+                            product = dmp_mul(product, h, u, K)
+                    if product == f:
+                        return lc, factors
+            except (CoercionFailed, NotAlgebraic):
+                pass
+            return lc, [(f, 1)]
+
+    # Ensure we have all factors by checking if their product equals the original polynomial
+    product = dmp_mul_ground(dmp_one(u, K), lc, u, K)
+    for h, k in factors:
+        for _ in range(k):
+            product = dmp_mul(product, h, u, K)
+
+    # If we're missing factors, try factoring in the extension field directly
+    if product != f:
+        try:
+            # Convert to the base field and back to normalize
+            f_base = dmp_convert(f, u, K, K.dom)
+            base_factors = dmp_factor_list_include(f_base, u, K.dom)
+            if len(base_factors) > 1:
+                # Convert each factor back to the extension field
+                factors = []
+                for factor, k in base_factors:
+                    h = dmp_convert(factor, u, K.dom, K)
+                    if not dmp_zero_p(h, u):  # Only add non-zero factors
+                        factors.append((h, k))
+                # Verify that we have all factors
+                product = dmp_mul_ground(dmp_one(u, K), lc, u, K)
+                for h, k in factors:
+                    for _ in range(k):
+                        product = dmp_mul(product, h, u, K)
+                if product == f:
+                    return lc, factors
+        except (CoercionFailed, NotAlgebraic):
+            pass
+        return lc, [(f, 1)]
 
-    return lc, dmp_trial_division(F, factors, u, K)
+    return lc, dmp_trial_division(f, [f for f, _ in factors], u, K)
 
 
 def dup_gf_factor(f, K):
diff --git a/sympy/polys/polytools.py b/sympy/polys/polytools.py
index 68b69d1a24..67fe444d49 100644
--- a/sympy/polys/polytools.py
+++ b/sympy/polys/polytools.py
@@ -5918,35 +5918,64 @@ def _symbolic_factor_list(expr, opt, method):
             base, exp = arg, S.One
 
         try:
-            poly, _ = _poly_from_expr(base, opt)
+            # If we have an extension field and the base has complex coefficients,
+            # try to factor it directly
+            if opt.extension and I in opt.extension and hasattr(base, 'as_real_imag'):
+                re, im = base.as_real_imag()
+                if im.is_zero:
+                    # Real coefficient, try normal factorization
+                    poly, _ = _poly_from_expr(base, opt)
+                else:
+                    # Complex coefficient, try to factor each part separately
+                    re_poly, _ = _poly_from_expr(re, opt)
+                    im_poly, _ = _poly_from_expr(im, opt)
+                    re_func = getattr(re_poly, method + '_list')
+                    im_func = getattr(im_poly, method + '_list')
+                    re_coeff, re_factors = re_func()
+                    im_coeff, im_factors = im_func()
+                    coeff *= re_coeff + I*im_coeff
+                    factors.extend(re_factors)
+                    factors.extend(im_factors)
+                    continue
+            else:
+                poly, _ = _poly_from_expr(base, opt)
         except PolificationFailed as exc:
             factors.append((exc.expr, exp))
-        else:
-            func = getattr(poly, method + '_list')
-
-            _coeff, _factors = func()
-            if _coeff is not S.One:
-                if exp.is_Integer:
-                    coeff *= _coeff**exp
-                elif _coeff.is_positive:
-                    factors.append((_coeff, exp))
-                else:
-                    _factors.append((_coeff, S.One))
+            continue
 
-            if exp is S.One:
-                factors.extend(_factors)
-            elif exp.is_integer:
-                factors.extend([(f, k*exp) for f, k in _factors])
+        func = getattr(poly, method + '_list')
+
+        _coeff, _factors = func()
+        if _coeff is not S.One:
+            if exp.is_Integer:
+                coeff *= _coeff**exp
+            elif _coeff.is_positive:
+                factors.append((_coeff, exp))
             else:
-                other = []
+                _factors.append((_coeff, S.One))
 
-                for f, k in _factors:
-                    if f.as_expr().is_positive:
-                        factors.append((f, k*exp))
-                    else:
-                        other.append((f, k))
+        if exp is S.One:
+            factors.extend(_factors)
+        elif exp.is_integer:
+            factors.extend([(f, k*exp) for f, k in _factors])
+        else:
+            other = []
 
+            for f, k in _factors:
+                if f.as_expr().is_positive:
+                    factors.append((f, k*exp))
+                else:
+                    other.append((f, k))
+
+            if other:
+                # If we have factors that can't be combined with the exponent,
+                # keep them separate
+                for f, k in other:
+                    factors.append((f, k))
+                factors.append((_factors_product([]), exp))
+            else:
                 factors.append((_factors_product(other), exp))
+
     if method == 'sqf':
         factors = [(reduce(mul, (f for f, _ in factors if _ == k)), k)
                    for k in set(i for _, i in factors)]
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e .
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: mpmath>=0.19 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from sympy==1.6.dev0) (1.3.0)
Installing collected packages: sympy
  Attempting uninstall: sympy
    Found existing installation: sympy 1.6.dev0
    Uninstalling sympy-1.6.dev0:
      Successfully uninstalled sympy-1.6.dev0
  DEPRECATION: Legacy editable install of sympy==1.6.dev0 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for sympy
Successfully installed sympy
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9 sympy/polys/tests/test_polytools.py
Updated 0 paths from 100bd20d5a
+ git apply -v -
Checking patch sympy/polys/tests/test_polytools.py...
Applied patch sympy/polys/tests/test_polytools.py cleanly.
+ PYTHONWARNINGS=ignore::UserWarning,ignore::SyntaxWarning
+ bin/test -C --verbose sympy/polys/tests/test_polytools.py
============================= test process starts ==============================
executable:         /opt/miniconda3/envs/testbed/bin/python  (3.9.20-final-0) [CPython]
architecture:       64-bit
cache:              no
ground types:       python 
numpy:              None
random seed:        41571860
hash randomization: on (PYTHONHASHSEED=3092207612)

sympy/polys/tests/test_polytools.py[150] 
test_Poly_mixed_operations ok
test_Poly_from_dict ok
test_Poly_from_list ok
test_Poly_from_poly ok
test_Poly_from_expr ok
test_Poly__new__ ok
test_Poly__args ok
test_Poly__gens ok
test_Poly_zero ok
test_Poly_one ok
test_Poly__unify ok
test_Poly_free_symbols ok
test_PurePoly_free_symbols ok
test_Poly__eq__ ok
test_PurePoly__eq__ ok
test_PurePoly_Poly ok
test_Poly_get_domain ok
test_Poly_set_domain ok
test_Poly_get_modulus ok
test_Poly_set_modulus ok
test_Poly_add_ground ok
test_Poly_sub_ground ok
test_Poly_mul_ground ok
test_Poly_quo_ground ok
test_Poly_exquo_ground ok
test_Poly_abs ok
test_Poly_neg ok
test_Poly_add ok
test_Poly_sub ok
test_Poly_mul ok
test_issue_13079 ok
test_Poly_sqr ok
test_Poly_pow ok
test_Poly_divmod ok
test_Poly_eq_ne ok
test_Poly_nonzero ok
test_Poly_properties ok
test_Poly_is_irreducible ok
test_Poly_subs ok
test_Poly_replace ok
test_Poly_reorder ok
test_Poly_ltrim ok
test_Poly_has_only_gens ok
test_Poly_to_ring ok
test_Poly_to_field ok
test_Poly_to_exact ok
test_Poly_retract ok
test_Poly_slice ok
test_Poly_coeffs ok
test_Poly_monoms ok
test_Poly_terms ok
test_Poly_all_coeffs ok
test_Poly_all_monoms ok
test_Poly_all_terms ok
test_Poly_termwise ok
test_Poly_length ok
test_Poly_as_dict ok
test_Poly_as_expr ok
test_Poly_lift ok
test_Poly_deflate ok
test_Poly_inject ok
test_Poly_eject ok
test_Poly_exclude ok
test_Poly__gen_to_level ok
test_Poly_degree ok
test_Poly_degree_list ok
test_Poly_total_degree ok
test_Poly_homogenize ok
test_Poly_homogeneous_order ok
test_Poly_LC ok
test_Poly_TC ok
test_Poly_EC ok
test_Poly_coeff ok
test_Poly_nth ok
test_Poly_LM ok
test_Poly_LM_custom_order ok
test_Poly_EM ok
test_Poly_LT ok
test_Poly_ET ok
test_Poly_max_norm ok
test_Poly_l1_norm ok
test_Poly_clear_denoms ok
test_Poly_rat_clear_denoms ok
test_Poly_integrate ok
test_Poly_diff ok
test_issue_9585 ok
test_Poly_eval ok
test_Poly___call__ ok
test_parallel_poly_from_expr ok
test_pdiv ok
test_div ok
test_issue_7864 ok
test_gcdex ok
test_revert ok
test_subresultants ok
test_resultant ok
test_discriminant ok
test_dispersion ok
test_gcd_list ok
test_lcm_list ok
test_gcd ok
test_gcd_numbers_vs_polys ok
test_terms_gcd ok
test_trunc ok
test_monic ok
test_content ok
test_primitive ok
test_compose ok
test_shift ok
test_transform ok
test_sturm ok
test_gff ok
test_norm ok
test_sqf_norm ok
test_sqf ok
test_factor F
test_factor_large F
test_factor_noeval ok
test_intervals ok
test_refine_root ok
test_count_roots ok
test_Poly_root ok
test_real_roots ok
test_all_roots ok
test_nroots ok
test_ground_roots ok
test_nth_power_roots_poly ok
test_torational_factor_list ok
test_cancel ok
test_reduced ok
test_groebner ok
test_fglm ok
test_is_zero_dimensional ok
test_GroebnerBasis ok
test_poly ok
test_keep_coeff ok
test_poly_matching_consistency ok
test_issue_5786 F
test_noncommutative ok
test_to_rational_coeffs ok
test_factor_terms ok
test_as_list ok
test_issue_11198 ok
test_Poly_precision ok
test_issue_12400 ok
test_issue_14364 ok
test_issue_15669 ok
test_issue_17988 ok
test_issue_18205 ok
test_issue_8695 ok                                                        [FAIL]


________________________________________________________________________________
_______________ sympy/polys/tests/test_polytools.py:test_factor ________________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2357, in test_factor
    assert factor_list((2*x)**y, x) == (1, [(2, y), (x, y)])
AssertionError
________________________________________________________________________________
____________ sympy/polys/tests/test_polytools.py:test_factor_large _____________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 2524, in test_factor_large
    assert factor(g, gaussian=True) == \
AssertionError
________________________________________________________________________________
_____________ sympy/polys/tests/test_polytools.py:test_issue_5786 ______________
Traceback (most recent call last):
  File "/testbed/sympy/polys/tests/test_polytools.py", line 3253, in test_issue_5786
    assert expand(factor(expand(
AssertionError

============ tests finished: 147 passed, 3 failed, in 11.63 seconds ============
DO *NOT* COMMIT!
+ git checkout b9179e80d2daa1bb6cba1ffe35ca9e6612e115c9 sympy/polys/tests/test_polytools.py
Updated 1 path from 100bd20d5a
