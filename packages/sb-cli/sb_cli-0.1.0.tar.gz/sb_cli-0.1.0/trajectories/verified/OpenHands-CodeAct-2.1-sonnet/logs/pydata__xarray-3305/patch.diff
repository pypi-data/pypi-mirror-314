diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 00000000..ba9b4994
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,11 @@
+import xarray as xr
+
+# Create test data array with attributes
+da = xr.DataArray([0, 0], dims="x", attrs={'units': 'K'})
+
+# Try to compute quantile with keep_attrs=True
+out = da.quantile(.9, dim='x', keep_attrs=True)
+
+# Print the attributes
+print("Original attrs:", da.attrs)
+print("Quantile attrs:", out.attrs)
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..45056c9d
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,36 @@
+import xarray as xr
+import numpy as np
+
+# Test 1: Multiple quantiles
+print("Test 1: Multiple quantiles")
+da = xr.DataArray([0, 1, 2, 3], dims="x", attrs={'units': 'K'})
+out = da.quantile([0.25, 0.75], dim='x', keep_attrs=True)
+print("Original attrs:", da.attrs)
+print("Quantile attrs:", out.attrs)
+print("Shape:", out.shape)
+print()
+
+# Test 2: No attributes
+print("Test 2: No attributes")
+da = xr.DataArray([0, 1, 2, 3], dims="x")
+out = da.quantile(0.5, dim='x', keep_attrs=True)
+print("Original attrs:", da.attrs)
+print("Quantile attrs:", out.attrs)
+print()
+
+# Test 3: Multiple dimensions
+print("Test 3: Multiple dimensions")
+da = xr.DataArray(np.random.rand(2, 3), dims=["x", "y"], attrs={'units': 'K'})
+out = da.quantile(0.5, dim=['x', 'y'], keep_attrs=True)
+print("Original attrs:", da.attrs)
+print("Quantile attrs:", out.attrs)
+print("Shape:", out.shape)
+print()
+
+# Test 4: keep_attrs=False
+print("Test 4: keep_attrs=False")
+da = xr.DataArray([0, 1, 2, 3], dims="x", attrs={'units': 'K'})
+out = da.quantile(0.5, dim='x', keep_attrs=False)
+print("Original attrs:", da.attrs)
+print("Quantile attrs:", out.attrs)
+print()
\ No newline at end of file
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index d6f0da42..f2362c5d 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -4768,7 +4768,8 @@ class Dataset(Mapping, ImplementsDatasetReduce, DataWithCoords):
                             # the former is often more efficient
                             reduce_dims = None
                         variables[name] = var.quantile(
-                            q, dim=reduce_dims, interpolation=interpolation
+                            q, dim=reduce_dims, interpolation=interpolation,
+                            keep_attrs=keep_attrs
                         )
 
             else:
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 2e9906ce..bf893b70 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -1592,7 +1592,7 @@ class Variable(
         """
         return self.broadcast_equals(other, equiv=duck_array_ops.array_notnull_equiv)
 
-    def quantile(self, q, dim=None, interpolation="linear"):
+    def quantile(self, q, dim=None, interpolation="linear", keep_attrs=None):
         """Compute the qth quantile of the data along the specified dimension.
 
         Returns the qth quantiles(s) of the array elements.
@@ -1615,6 +1615,10 @@ class Variable(
                 * higher: ``j``.
                 * nearest: ``i`` or ``j``, whichever is nearest.
                 * midpoint: ``(i + j) / 2``.
+        keep_attrs : bool, optional
+            If True, the variable's attributes (`attrs`) will be copied from
+            the original object to the new one. If False (default), the new
+            object will be returned without attributes.
 
         Returns
         -------
@@ -1658,7 +1662,11 @@ class Variable(
         qs = np.nanpercentile(
             self.data, q * 100.0, axis=axis, interpolation=interpolation
         )
-        return Variable(new_dims, qs)
+        if keep_attrs:
+            attrs = self.attrs
+        else:
+            attrs = None
+        return Variable(new_dims, qs, attrs=attrs)
 
     def rank(self, dim, pct=False):
         """Ranks the data.
