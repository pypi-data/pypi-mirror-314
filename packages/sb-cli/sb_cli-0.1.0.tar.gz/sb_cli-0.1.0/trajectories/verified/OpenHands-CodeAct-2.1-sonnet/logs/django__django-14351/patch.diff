diff --git a/django/db/models/lookups.py b/django/db/models/lookups.py
index 5089737034..2567aaf93e 100644
--- a/django/db/models/lookups.py
+++ b/django/db/models/lookups.py
@@ -291,8 +291,7 @@ class Exact(FieldGetDbPrepValueMixin, BuiltinLookup):
     lookup_name = 'exact'
 
     def process_rhs(self, compiler, connection):
-        from django.db.models.sql.query import Query
-        if isinstance(self.rhs, Query):
+        if hasattr(self.rhs, 'has_limit_one'):
             if self.rhs.has_limit_one():
                 if not self.rhs.has_select_fields:
                     self.rhs.clear_select_clause()
@@ -401,7 +400,9 @@ class In(FieldGetDbPrepValueIterableMixin, BuiltinLookup):
             placeholder = '(' + ', '.join(sqls) + ')'
             return (placeholder, sqls_params)
         else:
-            if not getattr(self.rhs, 'has_select_fields', True):
+            # Always clear select fields and add only 'pk' for __in lookups
+            # to avoid the "subquery must return only one column" error
+            if hasattr(self.rhs, 'clear_select_clause') and hasattr(self.rhs, 'add_fields'):
                 self.rhs.clear_select_clause()
                 self.rhs.add_fields(['pk'])
             return super().process_rhs(compiler, connection)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..998f8ac679
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,126 @@
+def define_models():
+    from django.db import models
+    
+    class PropertyGroup(models.Model):
+        name = models.CharField(max_length=100)
+        tenant_objs = models.JSONField(default=dict)
+        create_by = models.CharField(max_length=100)
+        update_by = models.CharField(max_length=100)
+        created = models.DateTimeField(auto_now_add=True)
+        updated = models.DateTimeField(auto_now=True)
+        
+        class Meta:
+            app_label = 'contenttypes'
+
+    class ManagementAgent(models.Model):
+        name = models.CharField(max_length=100)
+        property_groups = models.ManyToManyField(PropertyGroup, through='contenttypes.ManagementAgentPropertyGroup')
+        
+        class Meta:
+            app_label = 'contenttypes'
+
+    class ManagementAgentPropertyGroup(models.Model):
+        management_agent = models.ForeignKey('contenttypes.ManagementAgent', on_delete=models.CASCADE)
+        property_group = models.ForeignKey('contenttypes.PropertyGroup', on_delete=models.CASCADE)
+        
+        class Meta:
+            app_label = 'contenttypes'
+
+    class ManagerTicketRatingCumulativeMovingAverage(models.Model):
+        agent = models.ForeignKey('contenttypes.ManagementAgent', on_delete=models.CASCADE)
+        date = models.DateField()
+        average = models.FloatField()
+        data_points = models.IntegerField()
+        tenant_objs = models.JSONField(default=dict)
+        create_by = models.CharField(max_length=100)
+        update_by = models.CharField(max_length=100)
+        created = models.DateTimeField(auto_now_add=True)
+        updated = models.DateTimeField(auto_now=True)
+        
+        class Meta:
+            app_label = 'contenttypes'
+        
+    return PropertyGroup, ManagementAgent, ManagementAgentPropertyGroup, ManagerTicketRatingCumulativeMovingAverage
+
+# Set up test data
+def setup_test_data(PropertyGroup, ManagementAgent, ManagementAgentPropertyGroup, ManagerTicketRatingCumulativeMovingAverage):
+    # Create property groups
+    pg1 = PropertyGroup.objects.create(name='Group 1')
+    pg2 = PropertyGroup.objects.create(name='Group 2')
+    
+    # Create management agent
+    agent = ManagementAgent.objects.create(name='Agent 1')
+    
+    # Link agent to property groups
+    ManagementAgentPropertyGroup.objects.create(management_agent=agent, property_group=pg1)
+    
+    # Create rating
+    ManagerTicketRatingCumulativeMovingAverage.objects.create(
+        agent=agent,
+        date='2023-10-28',
+        average=4.5,
+        data_points=10
+    )
+    
+    return agent, [pg1, pg2]
+
+# Test the queries
+def test_queries(PropertyGroup, ManagementAgent, ManagementAgentPropertyGroup, ManagerTicketRatingCumulativeMovingAverage):
+    from django.db.models import Q, Count
+    
+    # Set up data
+    agent, property_groups = setup_test_data(PropertyGroup, ManagementAgent, ManagementAgentPropertyGroup, ManagerTicketRatingCumulativeMovingAverage)
+    
+    # Base queryset
+    queryset = ManagerTicketRatingCumulativeMovingAverage.objects.all()
+    queryset = queryset.annotate(Count("agent__property_groups"))
+    
+    # Working query in 3.2
+    working_query = queryset.filter(
+        Q(agent__property_groups__id__in=PropertyGroup.objects.values_list("id", flat=True))
+        | Q(agent__property_groups__count=0)
+    ).distinct()
+    
+    # Not working query in 3.2
+    not_working_query = queryset.filter(
+        Q(agent__property_groups__in=PropertyGroup.objects.all())
+        | Q(agent__property_groups__count=0)
+    ).distinct()
+    
+    print("Working query SQL:", working_query.query)
+    print("\nNot working query SQL:", not_working_query.query)
+    
+    # This will raise the error
+    list(not_working_query)
+
+if __name__ == '__main__':
+    import django
+    from django.conf import settings
+    from django.db import connection
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+            'django.contrib.auth',
+        ],
+        SECRET_KEY='dummy'
+    )
+    django.setup()
+    
+    # Define models
+    PropertyGroup, ManagementAgent, ManagementAgentPropertyGroup, ManagerTicketRatingCumulativeMovingAverage = define_models()
+    
+    # Create tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(PropertyGroup)
+        schema_editor.create_model(ManagementAgent)
+        schema_editor.create_model(ManagementAgentPropertyGroup)
+        schema_editor.create_model(ManagerTicketRatingCumulativeMovingAverage)
+    
+    # Run tests
+    test_queries(PropertyGroup, ManagementAgent, ManagementAgentPropertyGroup, ManagerTicketRatingCumulativeMovingAverage)
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..bc2ad119f8
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
diff --git a/testapp.py b/testapp.py
new file mode 100644
index 0000000000..d8c56d5c39
--- /dev/null
+++ b/testapp.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'testapp'
+    verbose_name = 'Test App'
\ No newline at end of file
