diff --git a/django/shortcuts.py b/django/shortcuts.py
index eda6f8813c..24ee547c4b 100644
--- a/django/shortcuts.py
+++ b/django/shortcuts.py
@@ -72,8 +72,15 @@ def get_object_or_404(klass, *args, **kwargs):
             "First argument to get_object_or_404() must be a Model, Manager, "
             "or QuerySet, not '%s'." % klass__name
         )
+    # Convert any lazy objects in kwargs to strings
+    resolved_kwargs = {}
+    for key, value in kwargs.items():
+        if isinstance(value, Promise):
+            resolved_kwargs[key] = str(value)
+        else:
+            resolved_kwargs[key] = value
     try:
-        return queryset.get(*args, **kwargs)
+        return queryset.get(*args, **resolved_kwargs)
     except queryset.model.DoesNotExist:
         raise Http404('No %s matches the given query.' % queryset.model._meta.object_name)
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..a66dc8300d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,56 @@
+import os
+import django
+from django.conf import settings
+from django.views.generic import TemplateView
+from django.shortcuts import get_object_or_404
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+django.setup()
+
+# Create a test model
+class Account(models.Model):
+    slug = models.SlugField(unique=True)
+    
+    class Meta:
+        app_label = 'test_app'
+
+# Create test view
+class OfferView(TemplateView):
+    template_name = "offers/offer.html"
+    def get_context_data(self, **kwargs):
+        offer_slug = kwargs.get("offer_slug", "")
+        # This will fail in Django 3.1+ because offer_slug is a SimpleLazyObject
+        offer = get_object_or_404(Account, slug=offer_slug)
+        return {"offer": offer, "offer_slug": offer_slug}
+
+# Create test database
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(Account)
+
+# Create test data
+Account.objects.create(slug="test-offer")
+
+# Test the view
+view = OfferView()
+try:
+    # Simulate URL kwargs being passed to get_context_data
+    context = view.get_context_data(offer_slug="test-offer")
+    print("Success! Context:", context)
+except Exception as e:
+    print("Error:", str(e))
\ No newline at end of file
