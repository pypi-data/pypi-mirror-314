diff --git a/django/utils/decorators.py b/django/utils/decorators.py
index 5c9a5d01c7..e38c45d5ff 100644
--- a/django/utils/decorators.py
+++ b/django/utils/decorators.py
@@ -37,7 +37,11 @@ def _multi_decorate(decorators, method):
         # 'self' argument, but it's a closure over self so it can call
         # 'func'. Also, wrap method.__get__() in a function because new
         # attributes can't be set on bound method objects, only on functions.
-        bound_method = partial(method.__get__(self, type(self)))
+        def _wrapped_method(*args, **kwargs):
+            return method.__get__(self, type(self))(*args, **kwargs)
+        # Preserve the original method attributes on the wrapper
+        update_wrapper(_wrapped_method, method)
+        bound_method = _wrapped_method
         for dec in decorators:
             bound_method = dec(bound_method)
         return bound_method(*args, **kwargs)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..7b6dcab665
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,23 @@
+import logging
+from django.utils.decorators import method_decorator
+
+logger = logging.getLogger(__name__)
+
+def logger_decorator(func):
+    def inner(*args, **kwargs):
+        try:
+            result = func(*args, **kwargs)
+        except Exception as e:
+            result = str(e)
+        finally:
+            print(f"{func.__name__} called with args: {args} and kwargs: {kwargs} resulting: {result}")
+        return result
+    return inner
+
+class Test:
+    @method_decorator(logger_decorator)
+    def hello_world(self):
+        return "hello"
+
+if __name__ == "__main__":
+    Test().hello_world()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..7c471fcf43
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,30 @@
+from django.utils.decorators import method_decorator
+
+def decorator1(func):
+    def inner(*args, **kwargs):
+        print(f"decorator1: calling {func.__name__}")
+        return func(*args, **kwargs)
+    return inner
+
+def decorator2(func):
+    def inner(*args, **kwargs):
+        print(f"decorator2: calling {func.__name__}")
+        return func(*args, **kwargs)
+    return inner
+
+class Test:
+    @method_decorator([decorator1, decorator2])
+    def multiple_decorators(self):
+        return "hello from multiple decorators"
+
+    @method_decorator(decorator1)
+    @method_decorator(decorator2)
+    def chained_decorators(self):
+        return "hello from chained decorators"
+
+if __name__ == "__main__":
+    print("\nTesting multiple decorators in a list:")
+    Test().multiple_decorators()
+    
+    print("\nTesting chained decorators:")
+    Test().chained_decorators()
\ No newline at end of file
