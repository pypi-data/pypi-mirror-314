diff --git a/django/contrib/sessions/backends/base.py b/django/contrib/sessions/backends/base.py
index b5453160a5..47d089fdd3 100644
--- a/django/contrib/sessions/backends/base.py
+++ b/django/contrib/sessions/backends/base.py
@@ -108,6 +108,13 @@ class SessionBase:
 
     def encode(self, session_dict):
         "Return the given session dictionary serialized and encoded as a string."
+        # Use legacy encoding format when DEFAULT_HASHING_ALGORITHM is sha1
+        if getattr(settings, 'DEFAULT_HASHING_ALGORITHM', None) == 'sha1':
+            serialized = self.serializer().dumps(session_dict)
+            hash = self._hash(serialized)
+            return base64.b64encode(
+                ('%s:%s' % (hash, serialized.decode('ascii'))).encode('ascii')
+            ).decode('ascii')
         return signing.dumps(
             session_dict, salt=self.key_salt, serializer=self.serializer,
             compress=True,
diff --git a/reproduce_session_issue.py b/reproduce_session_issue.py
new file mode 100644
index 0000000000..84962e8ea8
--- /dev/null
+++ b/reproduce_session_issue.py
@@ -0,0 +1,67 @@
+import os
+import sys
+import subprocess
+
+def test_session(hashing_algo):
+    # Create a new Python script with the test code
+    test_script = f"""
+from django.conf import settings
+from django.contrib.sessions.backends.db import SessionStore
+from django.core.management import execute_from_command_line
+
+print(f"\\nTesting with DEFAULT_HASHING_ALGORITHM = {hashing_algo}")
+
+# Configure minimal Django settings
+settings.configure(
+    DATABASES={{
+        'default': {{
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }}
+    }},
+    INSTALLED_APPS=[
+        'django.contrib.sessions',
+        'django.contrib.contenttypes',
+    ],
+    SECRET_KEY='dummy',
+    DEFAULT_HASHING_ALGORITHM='{hashing_algo}',
+)
+
+# Initialize Django
+execute_from_command_line(['manage.py', 'migrate'])
+
+# Create a session with data
+session = SessionStore()
+session['test_key'] = 'test_value'
+session.save()
+
+# Get the raw session data
+from django.contrib.sessions.models import Session
+raw_data = Session.objects.get(session_key=session.session_key).session_data
+print("Raw session data:", raw_data)
+
+# Try to decode it with both sha1 and sha256 settings
+for decode_algo in ['sha1', 'sha256']:
+    settings.DEFAULT_HASHING_ALGORITHM = decode_algo
+    try:
+        decoded = session.decode(raw_data)
+        print(f"Decoded successfully with {{decode_algo}}:", decoded)
+    except Exception as e:
+        print(f"Failed to decode with {{decode_algo}}:", str(e))
+"""
+    
+    # Write the test script to a temporary file
+    script_path = f'test_session_{hashing_algo}.py'
+    with open(script_path, 'w') as f:
+        f.write(test_script)
+    
+    try:
+        # Run the test script in a new process
+        subprocess.run([sys.executable, script_path], check=True)
+    finally:
+        # Clean up the temporary file
+        os.unlink(script_path)
+
+# Test with both algorithms
+test_session('sha1')
+test_session('sha256')
\ No newline at end of file
