diff --git a/django/db/models/fields/__init__.py b/django/db/models/fields/__init__.py
index 28374272f4..69fb3e3843 100644
--- a/django/db/models/fields/__init__.py
+++ b/django/db/models/fields/__init__.py
@@ -516,17 +516,30 @@ class Field(RegisterLookupMixin):
     def __eq__(self, other):
         # Needed for @total_ordering
         if isinstance(other, Field):
-            return self.creation_counter == other.creation_counter
+            # Compare creation_counter and model to ensure fields from different models are not equal
+            return (
+                self.creation_counter == other.creation_counter and
+                getattr(self, 'model', None) == getattr(other, 'model', None)
+            )
         return NotImplemented
 
     def __lt__(self, other):
         # This is needed because bisect does not take a comparison function.
         if isinstance(other, Field):
-            return self.creation_counter < other.creation_counter
+            # Compare creation_counter first, then model name if counters are equal
+            if self.creation_counter != other.creation_counter:
+                return self.creation_counter < other.creation_counter
+            self_model = getattr(self, 'model', None)
+            other_model = getattr(other, 'model', None)
+            if self_model and other_model:
+                return self_model.__name__ < other_model.__name__
+            # If one or both models are None, maintain a consistent ordering
+            return str(self_model) < str(other_model)
         return NotImplemented
 
     def __hash__(self):
-        return hash(self.creation_counter)
+        # Include model in hash to match __eq__ behavior
+        return hash((self.creation_counter, getattr(self, 'model', None)))
 
     def __deepcopy__(self, memodict):
         # We don't have to deepcopy very much here, since most things are not
