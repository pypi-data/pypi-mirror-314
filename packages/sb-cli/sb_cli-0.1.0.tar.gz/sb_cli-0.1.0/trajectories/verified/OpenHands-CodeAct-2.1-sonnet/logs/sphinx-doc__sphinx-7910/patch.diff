diff --git a/sphinx/ext/napoleon/__init__.py b/sphinx/ext/napoleon/__init__.py
index 10b1ff3a3..4eb9a007c 100644
--- a/sphinx/ext/napoleon/__init__.py
+++ b/sphinx/ext/napoleon/__init__.py
@@ -438,7 +438,17 @@ def _skip_member(app: Sphinx, what: str, name: str, obj: Any,
                         mod_path = cls_path.split('.')
                         cls = functools.reduce(getattr, mod_path, mod)
                     else:
-                        cls = obj.__globals__[cls_path]
+                        try:
+                            # First try to get class from globals (original approach)
+                            cls = obj.__globals__[cls_path]
+                        except Exception:
+                            try:
+                                # If that fails, try to get it from the module
+                                import importlib
+                                mod = importlib.import_module(obj.__module__)
+                                cls = getattr(mod, cls_path)
+                            except Exception:
+                                cls = None
                 except Exception:
                     cls_is_owner = False
                 else:
diff --git a/test_decorated_init.py b/test_decorated_init.py
new file mode 100644
index 000000000..70af63b3e
--- /dev/null
+++ b/test_decorated_init.py
@@ -0,0 +1,50 @@
+from functools import wraps
+import sys
+
+# Create a module-like object to simulate a more complex scenario
+class ModuleType:
+    pass
+
+mod = ModuleType()
+sys.modules['mymodule'] = mod
+
+def my_decorator(f):
+    @wraps(f)
+    def wrapper(*args, **kwargs):
+        return f(*args, **kwargs)
+    return wrapper
+
+class MyClass:
+    @my_decorator
+    def __init__(self):
+        """This is my init docstring."""
+        pass
+
+# Simulate class being defined in a different module
+MyClass.__module__ = 'mymodule'
+mod.MyClass = MyClass
+
+# Print relevant debug info
+obj = MyClass.__init__
+print(f"qualname={obj.__qualname__}")
+print(f"name={obj.__name__}")
+print(f"obj.__doc__ = {obj.__doc__}")
+print(f"'MyClass' in obj.__globals__: {'MyClass' in obj.__globals__}")
+
+# Try to get the class using the current approach
+qualname = obj.__qualname__
+cls_path, _, _ = qualname.rpartition('.')
+try:
+    cls = obj.__globals__[cls_path]
+    print(f"Found class using __globals__: {cls}")
+except Exception as e:
+    print(f"Failed to get class using __globals__: {e}")
+
+# Try to get the class using the module approach
+try:
+    import importlib
+    mod = importlib.import_module(obj.__module__)
+    cls = getattr(mod, cls_path)
+    print(f"Found class using module: {cls}")
+except Exception as e:
+    print(f"Failed to get class using module: {e}")
\ No newline at end of file
diff --git a/test_doc_generation.py b/test_doc_generation.py
new file mode 100644
index 000000000..486db4a79
--- /dev/null
+++ b/test_doc_generation.py
@@ -0,0 +1,79 @@
+import os
+import sys
+import tempfile
+import shutil
+from sphinx.application import Sphinx
+
+# Create a temporary directory for our test documentation
+temp_dir = tempfile.mkdtemp()
+source_dir = os.path.join(temp_dir, 'source')
+build_dir = os.path.join(temp_dir, 'build')
+os.makedirs(source_dir)
+os.makedirs(build_dir)
+
+# Create conf.py
+with open(os.path.join(source_dir, 'conf.py'), 'w') as f:
+    f.write('''
+import os
+import sys
+sys.path.insert(0, os.path.abspath('.'))
+extensions = ['sphinx.ext.autodoc', 'sphinx.ext.napoleon']
+napoleon_include_init_with_doc = True
+''')
+
+# Create our test module
+with open(os.path.join(source_dir, 'mymodule.py'), 'w') as f:
+    f.write('''
+from functools import wraps
+
+def my_decorator(f):
+    @wraps(f)
+    def wrapper(*args, **kwargs):
+        return f(*args, **kwargs)
+    return wrapper
+
+class MyClass:
+    @my_decorator
+    def __init__(self):
+        """This is my init docstring that should appear in the docs."""
+        pass
+''')
+
+# Create index.rst
+with open(os.path.join(source_dir, 'index.rst'), 'w') as f:
+    f.write('''
+Welcome to Test Documentation
+===========================
+
+.. autoclass:: mymodule.MyClass
+   :members:
+   :special-members: __init__
+''')
+
+# Add source dir to Python path
+sys.path.insert(0, source_dir)
+
+try:
+    # Create Sphinx application
+    app = Sphinx(
+        source_dir,
+        source_dir,
+        build_dir,
+        build_dir,
+        'html'
+    )
+    
+    # Build documentation
+    app.build()
+
+    # Check if __init__ docstring appears in the output
+    with open(os.path.join(build_dir, 'index.html'), 'r') as f:
+        content = f.read()
+        if "This is my init docstring that should appear in the docs" in content:
+            print("SUCCESS: __init__ docstring found in documentation!")
+        else:
+            print("FAILURE: __init__ docstring not found in documentation!")
+
+finally:
+    # Clean up
+    shutil.rmtree(temp_dir)
\ No newline at end of file
