diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index d69c24419b..b64501f22c 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1666,6 +1666,19 @@ class Query(BaseExpression):
             filter_expr = (filter_lhs, OuterRef(filter_rhs.name))
         # Generate the inner query.
         query = Query(self.model)
+        # Copy filtered relations from the original query
+        query._filtered_relations = self._filtered_relations.copy()
+        # Add the filtered relation's condition to the subquery's WHERE clause
+        for filtered_alias, filtered_relation in self._filtered_relations.items():
+            if filter_lhs.startswith(filtered_alias + '__'):
+                # Get the original relation name and condition
+                relation_name = filtered_relation.relation_name
+                condition = filtered_relation.condition
+                # Add the filtered relation's condition to the subquery
+                query.add_q(condition)
+                # Update the filter expression to use the original relation name
+                filter_lhs = filter_lhs.replace(filtered_alias + '__', relation_name + '__', 1)
+                filter_expr = (filter_lhs, filter_rhs)
         query.add_filter(filter_expr)
         query.clear_ordering(True)
         # Try to have as simple as possible subquery -> trim leading joins from
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..61fa8e4dd5
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,82 @@
+import django
+from django.conf import settings
+
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+        '__main__',
+    ]
+)
+django.setup()
+
+from django.db import models, connection
+from django.core.management import call_command
+from django.db.models import Q, FilteredRelation
+from django.test import TestCase
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+class TestFilteredRelation(TestCase):
+    @classmethod
+    def setUpTestData(cls):
+        cls.author1 = Author.objects.create(name='Author 1')
+        cls.author2 = Author.objects.create(name='Author 2')
+        
+        Book.objects.create(title='poem by alice', author=cls.author1)
+        Book.objects.create(title='story by bob', author=cls.author2)
+
+    def test_exclude_filtered_relation(self):
+        # Basic exclude test
+        qs = Author.objects.annotate(
+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+        ).exclude(book_alice__isnull=False)
+        
+        # Print the SQL query
+        print("\nSQL:", qs.query)
+        
+        # Should return only author2 since author1 has the 'poem by alice' book
+        self.assertEqual(list(qs), [self.author2])
+        
+    def test_exclude_filtered_relation_multiple_conditions(self):
+        # Test with multiple conditions in the FilteredRelation
+        qs = Author.objects.annotate(
+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice') & Q(book__id__gt=0)),
+        ).exclude(book_alice__isnull=False)
+        self.assertEqual(list(qs), [self.author2])
+        
+    def test_exclude_filtered_relation_or_conditions(self):
+        # Test with OR conditions in the FilteredRelation
+        qs = Author.objects.annotate(
+            book_poems=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice') | Q(book__title__iexact='poem by bob')),
+        ).exclude(book_poems__isnull=False)
+        self.assertEqual(list(qs), [self.author2])
+        
+    def test_exclude_filtered_relation_chained(self):
+        # Test chaining multiple excludes
+        qs = Author.objects.annotate(
+            book_alice=FilteredRelation('book', condition=Q(book__title__iexact='poem by alice')),
+        ).exclude(book_alice__isnull=False).exclude(name='Author 2')
+        self.assertEqual(list(qs), [])
+
+if __name__ == '__main__':
+    # Create tables
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Author)
+        schema_editor.create_model(Book)
+    
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
\ No newline at end of file
