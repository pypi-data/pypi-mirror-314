diff --git a/django/forms/models.py b/django/forms/models.py
index 7effb202e3..a88cf68745 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -566,6 +566,9 @@ def modelform_factory(model, form=ModelForm, fields=None, exclude=None,
 class BaseModelFormSet(BaseFormSet):
     """
     A ``FormSet`` for editing a queryset and/or adding new objects to it.
+    
+    If can_create=False, new object creation will be disabled and only existing
+    objects can be edited.
     """
     model = None
 
@@ -681,6 +684,23 @@ class BaseModelFormSet(BaseFormSet):
     save.alters_data = True
 
     def clean(self):
+        """
+        Hook for doing any extra formset-wide cleaning after Form.clean() has been
+        called on every form. Any ValidationError raised by this method will
+        not be associated with a particular form; it will be accessible via
+        formset.non_form_errors()
+        """
+        # If can_create is False, don't allow new forms to be valid
+        if not getattr(self, 'can_create', True):
+            for i, form in enumerate(self.forms):
+                if i >= self.initial_form_count() and form.has_changed():
+                    form._errors[NON_FIELD_ERRORS] = self.error_class(
+                        ['New object creation is disabled.'],
+                        renderer=self.renderer,
+                    )
+                    form.cleaned_data = {}
+                    self._errors[i] = form._errors
+        
         self.validate_unique()
 
     def validate_unique(self):
@@ -813,6 +833,9 @@ class BaseModelFormSet(BaseFormSet):
 
     def save_new_objects(self, commit=True):
         self.new_objects = []
+        # If can_create is False, don't save any new objects
+        if not getattr(self, 'can_create', True):
+            return self.new_objects
         for form in self.extra_forms:
             if not form.has_changed():
                 continue
@@ -875,7 +898,8 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                          widgets=None, validate_max=False, localized_fields=None,
                          labels=None, help_texts=None, error_messages=None,
                          min_num=None, validate_min=False, field_classes=None,
-                         absolute_max=None, can_delete_extra=True, renderer=None):
+                         absolute_max=None, can_delete_extra=True, renderer=None,
+                         can_create=True):
     """Return a FormSet class for the given Django model class."""
     meta = getattr(form, 'Meta', None)
     if (getattr(meta, 'fields', fields) is None and
@@ -896,6 +920,7 @@ def modelformset_factory(model, form=ModelForm, formfield_callback=None,
                               absolute_max=absolute_max, can_delete_extra=can_delete_extra,
                               renderer=renderer)
     FormSet.model = model
+    FormSet.can_create = can_create
     return FormSet
