diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py
index ab475f7d0d..066130633e 100644
--- a/astropy/coordinates/sky_coordinate.py
+++ b/astropy/coordinates/sky_coordinate.py
@@ -871,6 +871,12 @@ class SkyCoord(ShapedLikeNDArray):
         Overrides getattr to return coordinates that this can be transformed
         to, based on the alias attr in the primary transform graph.
         """
+        # First check if the attribute exists in the class hierarchy
+        # This will properly handle properties and other descriptors
+        if hasattr(type(self), attr):
+            # Let the standard attribute lookup handle it by propagating the original AttributeError
+            return object.__getattribute__(self, attr)
+
         if "_sky_coord_frame" in self.__dict__:
             if self._is_name(attr):
                 return self  # Should this be a deepcopy of self?
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..6165ab05eb
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,11 @@
+import astropy.coordinates as coord
+
+
+class custom_coord(coord.SkyCoord):
+    @property
+    def prop(self):
+        return self.random_attr
+
+
+c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
+c.prop
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..0caca25769
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,50 @@
+import astropy.coordinates as coord
+
+
+class custom_coord(coord.SkyCoord):
+    @property
+    def prop(self):
+        return self.random_attr  # Should show error about random_attr
+
+    @property
+    def valid_prop(self):
+        return "valid"  # Should work fine
+
+    def method(self):
+        return "method"  # Should work fine
+
+
+c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')
+
+# Test 1: Property that tries to access non-existent attribute
+try:
+    c.prop
+except AttributeError as e:
+    print("Test 1 passed:", str(e))
+
+# Test 2: Valid property
+try:
+    result = c.valid_prop
+    print("Test 2 passed:", result)
+except Exception as e:
+    print("Test 2 failed:", str(e))
+
+# Test 3: Valid method
+try:
+    result = c.method()
+    print("Test 3 passed:", result)
+except Exception as e:
+    print("Test 3 failed:", str(e))
+
+# Test 4: Non-existent attribute
+try:
+    c.nonexistent
+except AttributeError as e:
+    print("Test 4 passed:", str(e))
+
+# Test 5: Frame transformation (should work)
+try:
+    galactic = c.galactic
+    print("Test 5 passed: transformed to galactic")
+except Exception as e:
+    print("Test 5 failed:", str(e))
\ No newline at end of file
