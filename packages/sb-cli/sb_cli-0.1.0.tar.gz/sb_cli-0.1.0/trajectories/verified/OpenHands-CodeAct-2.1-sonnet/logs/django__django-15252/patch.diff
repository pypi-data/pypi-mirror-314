diff --git a/default.db b/default.db
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/django/db/migrations/recorder.py b/django/db/migrations/recorder.py
index 1a37c6b7d0..c23af25e4a 100644
--- a/django/db/migrations/recorder.py
+++ b/django/db/migrations/recorder.py
@@ -1,5 +1,5 @@
 from django.apps.registry import Apps
-from django.db import DatabaseError, models
+from django.db import DatabaseError, models, router
 from django.utils.functional import classproperty
 from django.utils.timezone import now
 
@@ -62,6 +62,9 @@ class MigrationRecorder:
         # in the codebase.
         if self.has_table():
             return
+        # Check if migrations are allowed on this database
+        if not router.allow_migrate(self.connection.alias, 'migrations', model_name='migration'):
+            return
         # Make the table
         try:
             with self.connection.schema_editor() as editor:
@@ -84,13 +87,19 @@ class MigrationRecorder:
     def record_applied(self, app, name):
         """Record that a migration was applied."""
         self.ensure_schema()
-        self.migration_qs.create(app=app, name=name)
+        # Only try to create record if migrations are allowed
+        if router.allow_migrate(self.connection.alias, 'migrations', model_name='migration'):
+            self.migration_qs.create(app=app, name=name)
 
     def record_unapplied(self, app, name):
         """Record that a migration was unapplied."""
         self.ensure_schema()
-        self.migration_qs.filter(app=app, name=name).delete()
+        # Only try to delete record if migrations are allowed
+        if router.allow_migrate(self.connection.alias, 'migrations', model_name='migration'):
+            self.migration_qs.filter(app=app, name=name).delete()
 
     def flush(self):
         """Delete all migration records. Useful for testing migrations."""
-        self.migration_qs.all().delete()
+        # Only try to delete records if migrations are allowed
+        if router.allow_migrate(self.connection.alias, 'migrations', model_name='migration'):
+            self.migration_qs.all().delete()
diff --git a/other.db b/other.db
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..36614671f0
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,74 @@
+# Define routers for testing
+class CustomRouter:
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        if db == 'default':
+            return True
+        return False
+
+class NoneRouter:
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        return None  # Should fall through to next router
+
+class BlockAllRouter:
+    def allow_migrate(self, db, app_label, model_name=None, **hints):
+        return False  # Should block all migrations
+
+import django
+from django.conf import settings
+from django.db import migrations, models
+from django.db.migrations.recorder import MigrationRecorder
+from django.db import connections
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'default.db',
+        },
+        'other': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'other.db',
+        },
+    },
+    DATABASE_ROUTERS=[BlockAllRouter()],  # Should block all migrations
+    INSTALLED_APPS=['django.db.migrations'],
+)
+
+django.setup()
+
+# Test with 'other' database (should not create table or records)
+other_recorder = MigrationRecorder(connections['other'])
+print("Testing 'other' database...")
+print("Calling ensure_schema()...")
+other_recorder.ensure_schema()
+print(f"Table exists in 'other': {other_recorder.has_table()}")
+
+print("\nTesting record_applied on 'other'...")
+other_recorder.record_applied('app1', 'migration1')
+print(f"Applied migrations in 'other': {other_recorder.applied_migrations()}")
+
+print("\nTesting record_unapplied on 'other'...")
+other_recorder.record_unapplied('app1', 'migration1')
+print(f"Applied migrations in 'other': {other_recorder.applied_migrations()}")
+
+# Test with 'default' database (should work normally)
+default_recorder = MigrationRecorder(connections['default'])
+print("\nTesting 'default' database...")
+print("Calling ensure_schema()...")
+default_recorder.ensure_schema()
+print(f"Table exists in 'default': {default_recorder.has_table()}")
+
+print("\nTesting record_applied on 'default'...")
+default_recorder.record_applied('app1', 'migration1')
+print(f"Applied migrations in 'default': {list(default_recorder.applied_migrations().keys())}")
+
+print("\nTesting record_unapplied on 'default'...")
+default_recorder.record_unapplied('app1', 'migration1')
+print(f"Applied migrations in 'default': {list(default_recorder.applied_migrations().keys())}")
+
+print("\nTesting flush on both databases...")
+other_recorder.flush()
+default_recorder.flush()
+print(f"Applied migrations in 'other': {other_recorder.applied_migrations()}")
+print(f"Applied migrations in 'default': {default_recorder.applied_migrations()}")
\ No newline at end of file
