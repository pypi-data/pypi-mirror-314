diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..b11f310289
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,73 @@
+import asyncio
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+os.environ.setdefault('DJANGO_ALLOW_ASYNC_UNSAFE', 'true')
+
+import django
+from django.conf import settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+)
+django.setup()
+
+from django.db import models, connection
+from django.db.models.fields.related_descriptors import create_reverse_many_to_one_manager
+from asgiref.sync import sync_to_async
+
+class Parent(models.Model):
+    class Meta:
+        app_label = 'contenttypes'
+    name = models.CharField(max_length=100)
+
+class Child(models.Model):
+    class Meta:
+        app_label = 'contenttypes'
+    name = models.CharField(max_length=100)
+    parent = models.ForeignKey(Parent, related_name='children', on_delete=models.CASCADE)
+
+def create_tables():
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(Parent)
+        schema_editor.create_model(Child)
+
+def sync_create_parent():
+    return Parent.objects.create(name="Parent 1")
+
+async def main():
+    # Create parent
+    parent = await sync_to_async(sync_create_parent)()
+    print("Parent created:", parent.name)
+
+    # Try to use acreate() on related manager - this should fail
+    try:
+        child = await parent.children.acreate(name="Child 1")
+        print("Child created:", child.name)
+    except AttributeError as e:
+        print("Error using acreate() on related manager:", str(e))
+
+    # Try to use aget_or_create() on related manager - this should fail
+    try:
+        child, created = await parent.children.aget_or_create(name="Child 1")
+        print("Child get_or_created:", child.name, created)
+    except AttributeError as e:
+        print("Error using aget_or_create() on related manager:", str(e))
+
+    # Try to use aupdate_or_create() on related manager - this should fail
+    try:
+        child, created = await parent.children.aupdate_or_create(name="Child 1")
+        print("Child update_or_created:", child.name, created)
+    except AttributeError as e:
+        print("Error using aupdate_or_create() on related manager:", str(e))
+
+if __name__ == "__main__":
+    # Create tables synchronously first
+    create_tables()
+    # Run async tests
+    asyncio.run(main())
\ No newline at end of file
