diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index ae0f886107..a8cd366b49 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -87,7 +87,11 @@ class Q(tree.Node):
         args, kwargs = (), {}
         if len(self.children) == 1 and not isinstance(self.children[0], Q):
             child = self.children[0]
-            kwargs = {child[0]: child[1]}
+            # Only treat as kwargs if the child is a tuple with length 2 (key-value pair)
+            if isinstance(child, tuple) and len(child) == 2:
+                kwargs = {child[0]: child[1]}
+            else:
+                args = (child,)
         else:
             args = tuple(self.children)
             if self.connector != self.default:
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..93a66bf5e9
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,37 @@
+from django.conf import settings
+from django.db.models import Q, Exists
+from django.contrib.auth import get_user_model
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+    ],
+    AUTH_USER_MODEL='auth.User',
+)
+
+import django
+django.setup()
+
+# Test case 1: Single key-value pair
+print("Test case 1: Single key-value pair")
+q1 = Q(x=1)
+print(q1.deconstruct())
+
+# Test case 2: Multiple key-value pairs
+print("\nTest case 2: Multiple key-value pairs")
+q2 = Q(x=1, y=2)
+print(q2.deconstruct())
+
+# Test case 3: Single non-subscriptable child (Exists)
+print("\nTest case 3: Single non-subscriptable child (Exists)")
+exists_cond = Exists(get_user_model().objects.filter(username='jim'))
+q3 = Q(exists_cond)
+print(q3.deconstruct())
\ No newline at end of file
