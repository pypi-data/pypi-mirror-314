diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 000000000..eb7e4610c
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,32 @@
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+
+# Test cases
+test_cases = [
+    # Case 1: Very spread out data
+    np.array([0, 1000, 2000, 3000, 4000, 5000]).reshape(-1, 1),
+    
+    # Case 2: Very close data points
+    np.array([0, 0.001, 0.002, 0.003, 0.004, 0.005]).reshape(-1, 1),
+    
+    # Case 3: Negative numbers
+    np.array([-10, -5, 0, 5, 10]).reshape(-1, 1),
+    
+    # Case 4: Repeated values
+    np.array([1, 1, 1, 2, 2, 3, 3, 3]).reshape(-1, 1),
+    
+    # Case 5: Single unique value
+    np.array([1, 1, 1, 1]).reshape(-1, 1),
+]
+
+for i, X in enumerate(test_cases, 1):
+    print(f"\nTest case {i}:")
+    print("Input:", X.ravel())
+    
+    est = KBinsDiscretizer(n_bins=3, strategy='kmeans', encode='ordinal')
+    try:
+        Xt = est.fit_transform(X)
+        print("Transformed:", Xt.ravel())
+        print("Bin edges:", est.bin_edges_[0])
+    except Exception as e:
+        print("Error:", str(e))
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..d25ca24f3
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,10 @@
+import numpy as np
+from sklearn.preprocessing import KBinsDiscretizer
+
+X = np.array([0, 0.5, 2, 3, 9, 10]).reshape(-1, 1)
+
+# with 5 bins
+est = KBinsDiscretizer(n_bins=5, strategy='kmeans', encode='ordinal')
+Xt = est.fit_transform(X)
+print("Transformed data:", Xt)
+print("Bin edges:", est.bin_edges_[0])
\ No newline at end of file
diff --git a/sklearn/preprocessing/_discretization.py b/sklearn/preprocessing/_discretization.py
index dd969c12b..ca950771b 100644
--- a/sklearn/preprocessing/_discretization.py
+++ b/sklearn/preprocessing/_discretization.py
@@ -171,7 +171,7 @@ class KBinsDiscretizer(BaseEstimator, TransformerMixin):
 
                 # 1D k-means procedure
                 km = KMeans(n_clusters=n_bins[jj], init=init, n_init=1)
-                centers = km.fit(column[:, None]).cluster_centers_[:, 0]
+                centers = np.sort(km.fit(column[:, None]).cluster_centers_[:, 0])
                 bin_edges[jj] = (centers[1:] + centers[:-1]) * 0.5
                 bin_edges[jj] = np.r_[col_min, bin_edges[jj], col_max]
