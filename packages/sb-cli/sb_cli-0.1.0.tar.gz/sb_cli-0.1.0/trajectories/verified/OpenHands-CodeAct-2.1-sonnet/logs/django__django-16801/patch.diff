diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index 7f8eb128e1..fd27ffb0c3 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -441,7 +441,8 @@ class ImageField(FileField):
         # after their corresponding image field don't stay cleared by
         # Model.__init__, see bug #11196.
         # Only run post-initialization dimension update on non-abstract models
-        if not cls._meta.abstract:
+        # and only when width_field or height_field is set
+        if not cls._meta.abstract and (self.width_field or self.height_field):
             signals.post_init.connect(self.update_dimension_fields, sender=cls)
 
     def update_dimension_fields(self, instance, force=False, *args, **kwargs):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..b033aafddc
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,63 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+from django.conf import settings
+from django.db import models
+import time
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=['django.contrib.contenttypes'],
+        DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+    )
+
+import django
+django.setup()
+
+# Create a model with ImageField
+class TestModel(models.Model):
+    image = models.ImageField(upload_to='images/')
+
+    class Meta:
+        app_label = 'test_app'
+
+# Create a model with ImageField that has width/height fields
+class TestModelWithDimensions(models.Model):
+    class Meta:
+        app_label = 'test_app'
+    image = models.ImageField(upload_to='images/', width_field='width', height_field='height')
+    width = models.IntegerField(null=True)
+    height = models.IntegerField(null=True)
+
+# Measure time to create instances
+def measure_init_time(model_class, num_instances=10000):
+    start_time = time.time()
+    for _ in range(num_instances):
+        model_class()
+    end_time = time.time()
+    return end_time - start_time
+
+# Run the test
+if __name__ == '__main__':
+    import django
+    django.setup()
+
+    # Create tables
+    from django.db import connection
+    with connection.schema_editor() as schema_editor:
+        schema_editor.create_model(TestModel)
+        schema_editor.create_model(TestModelWithDimensions)
+
+    # Measure initialization time for both models
+    time_without_dimensions = measure_init_time(TestModel)
+    time_with_dimensions = measure_init_time(TestModelWithDimensions)
+
+    print(f"Time to initialize 10000 instances without dimensions: {time_without_dimensions:.3f}s")
+    print(f"Time to initialize 10000 instances with dimensions: {time_with_dimensions:.3f}s")
+    print(f"Overhead of unnecessary signal handler: {(time_without_dimensions - time_with_dimensions):.3f}s")
\ No newline at end of file
