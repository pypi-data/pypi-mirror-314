diff --git a/django/contrib/auth/tokens.py b/django/contrib/auth/tokens.py
index 93e2d71af2..fe09a4ca6f 100644
--- a/django/contrib/auth/tokens.py
+++ b/django/contrib/auth/tokens.py
@@ -85,6 +85,8 @@ class PasswordResetTokenGenerator:
            same password is chosen, due to password salting).
         2. The last_login field will usually be updated very shortly after
            a password reset.
+        3. The email field is included to invalidate tokens when the user's
+           email address changes.
         Failing those things, settings.PASSWORD_RESET_TIMEOUT eventually
         invalidates the token.
 
@@ -94,7 +96,10 @@ class PasswordResetTokenGenerator:
         # Truncate microseconds so that tokens are consistent even if the
         # database doesn't support microseconds.
         login_timestamp = '' if user.last_login is None else user.last_login.replace(microsecond=0, tzinfo=None)
-        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp)
+        # Include email in hash to invalidate token when email changes
+        # Handle None, missing email field, and normalize email to lowercase without spaces
+        email = (getattr(user, 'email', '') or '').lower().strip()
+        return str(user.pk) + user.password + str(login_timestamp) + str(timestamp) + email
 
     def _num_seconds(self, dt):
         return int((dt - datetime(2001, 1, 1)).total_seconds())
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..a043411f82
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,44 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='dummy-key-for-test',
+        INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        PASSWORD_RESET_TIMEOUT=3600,  # 1 hour
+        DEFAULT_HASHING_ALGORITHM='sha256',
+    )
+
+import django
+django.setup()
+
+# Run migrations
+from django.core.management import call_command
+call_command('migrate', verbosity=0)
+
+from django.contrib.auth import get_user_model
+from django.contrib.auth.tokens import default_token_generator
+
+# Create test user
+User = get_user_model()
+user = User.objects.create_user(username='testuser', email='foo@example.com', password='testpass')
+
+# Generate password reset token
+token = default_token_generator.make_token(user)
+print(f"Initial token: {token}")
+print(f"Initial token valid? {default_token_generator.check_token(user, token)}")
+
+# Change email
+user.email = 'bar@example.com'
+user.save()
+
+# Check if token is still valid (it shouldn't be, but currently is)
+print(f"\nAfter email change:")
+print(f"Token still valid? {default_token_generator.check_token(user, token)}")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..7c68692174
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,94 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='dummy-key-for-test',
+        INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        PASSWORD_RESET_TIMEOUT=3600,  # 1 hour
+        DEFAULT_HASHING_ALGORITHM='sha256',
+    )
+
+import django
+django.setup()
+
+# Run migrations
+from django.core.management import call_command
+call_command('migrate', verbosity=0)
+
+from django.contrib.auth import get_user_model
+from django.contrib.auth.tokens import default_token_generator
+
+User = get_user_model()
+
+def test_case(name, initial_email, changed_email, should_invalidate=True):
+    print(f"\nTest: {name}")
+    print(f"Initial email: '{initial_email}'")
+    print(f"Changed email: '{changed_email}'")
+    
+    # Create user with initial email
+    user = User.objects.create_user(
+        username=f'user_{name}',
+        email=initial_email,
+        password='testpass'
+    )
+    
+    # Generate token
+    token = default_token_generator.make_token(user)
+    print(f"Initial token valid? {default_token_generator.check_token(user, token)}")
+    
+    # Change email
+    user.email = changed_email
+    user.save()
+    
+    # Check token
+    is_valid = default_token_generator.check_token(user, token)
+    print(f"Token valid after change? {is_valid}")
+    
+    if should_invalidate:
+        assert not is_valid, "Token should be invalid!"
+    else:
+        assert is_valid, "Token should still be valid!"
+    
+    print("Test passed!")
+
+# Test case sensitivity
+test_case(
+    "Case sensitivity",
+    "Test@Example.com",
+    "test@example.com",
+    should_invalidate=False  # Should NOT invalidate as they're equivalent
+)
+
+# Test whitespace
+test_case(
+    "Whitespace",
+    "  test@example.com  ",
+    "test@example.com",
+    should_invalidate=False  # Should NOT invalidate as they're equivalent
+)
+
+# Test None vs empty string
+test_case(
+    "None vs empty",
+    None,
+    "",
+    should_invalidate=False  # Should NOT invalidate as they're equivalent
+)
+
+# Test actual email change
+test_case(
+    "Different emails",
+    "old@example.com",
+    "new@example.com",
+    should_invalidate=True  # Should invalidate as they're different
+)
+
+print("\nAll tests passed successfully!")
\ No newline at end of file
diff --git a/test_no_email.py b/test_no_email.py
new file mode 100644
index 0000000000..5447240a90
--- /dev/null
+++ b/test_no_email.py
@@ -0,0 +1,70 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+
+from django.conf import settings
+if not settings.configured:
+    settings.configure(
+        SECRET_KEY='dummy-key-for-test',
+        INSTALLED_APPS=['django.contrib.auth', 'django.contrib.contenttypes'],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        PASSWORD_RESET_TIMEOUT=3600,  # 1 hour
+        DEFAULT_HASHING_ALGORITHM='sha256',
+    )
+
+import django
+django.setup()
+
+# Run migrations
+from django.core.management import call_command
+call_command('migrate', verbosity=0)
+
+from django.contrib.auth import get_user_model
+from django.contrib.auth.tokens import default_token_generator
+from django.contrib.auth.base_user import AbstractBaseUser
+from django.contrib.auth.models import BaseUserManager
+from django.contrib.auth.hashers import make_password
+from django.db import models
+
+# Create a custom user model without email field
+class CustomUserManager(BaseUserManager):
+    def create_user(self, username, password=None):
+        if not username:
+            raise ValueError('Username is required')
+        user = self.model(username=username)
+        user.set_password(password)
+        user.save(using=self._db)
+        return user
+
+class CustomUser(AbstractBaseUser):
+    username = models.CharField(max_length=30, unique=True)
+    USERNAME_FIELD = 'username'
+    objects = CustomUserManager()
+
+    class Meta:
+        app_label = 'auth'  # Use the auth app label
+
+# Create the model in the database
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(CustomUser)
+
+# Test token generation and validation
+user = CustomUser.objects.create_user(username='testuser', password='testpass')
+
+# Generate password reset token
+token = default_token_generator.make_token(user)
+print(f"Initial token: {token}")
+print(f"Initial token valid? {default_token_generator.check_token(user, token)}")
+
+# Change password
+user.password = make_password('newpass')
+user.save()
+
+# Check if token is invalidated (it should be)
+print(f"\nAfter password change:")
+print(f"Token still valid? {default_token_generator.check_token(user, token)}")
\ No newline at end of file
