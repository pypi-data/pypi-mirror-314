diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index d17232e4ec..5ce576815a 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -966,23 +966,50 @@ class RenameIndex(IndexOperation):
         schema_editor.rename_index(model, old_index, new_index)
 
     def database_backwards(self, app_label, schema_editor, from_state, to_state):
-        if self.old_fields:
-            # Backward operation with unnamed index is a no-op.
+        model = from_state.apps.get_model(app_label, self.model_name)
+        if not self.allow_migrate_model(schema_editor.connection.alias, model):
             return
 
-        self.new_name_lower, self.old_name_lower = (
-            self.old_name_lower,
-            self.new_name_lower,
-        )
-        self.new_name, self.old_name = self.old_name, self.new_name
+        if self.old_fields:
+            # Get the auto-generated name for the index
+            columns = [
+                model._meta.get_field(field).column for field in self.old_fields
+            ]
+            matching_index_name = schema_editor._constraint_names(
+                model, column_names=columns, index=True
+            )
+            if len(matching_index_name) != 1:
+                raise ValueError(
+                    "Found wrong number (%s) of indexes for %s(%s)."
+                    % (
+                        len(matching_index_name),
+                        model._meta.db_table,
+                        ", ".join(columns),
+                    )
+                )
+            old_index = models.Index(
+                fields=self.old_fields,
+                name=self.new_name,
+            )
+            new_index = models.Index(
+                fields=self.old_fields,
+                name=matching_index_name[0],
+            )
+            schema_editor.rename_index(model, old_index, new_index)
+        else:
+            self.new_name_lower, self.old_name_lower = (
+                self.old_name_lower,
+                self.new_name_lower,
+            )
+            self.new_name, self.old_name = self.old_name, self.new_name
 
-        self.database_forwards(app_label, schema_editor, from_state, to_state)
+            self.database_forwards(app_label, schema_editor, from_state, to_state)
 
-        self.new_name_lower, self.old_name_lower = (
-            self.old_name_lower,
-            self.new_name_lower,
-        )
-        self.new_name, self.old_name = self.old_name, self.new_name
+            self.new_name_lower, self.old_name_lower = (
+                self.old_name_lower,
+                self.new_name_lower,
+            )
+            self.new_name, self.old_name = self.old_name, self.new_name
 
     def describe(self):
         if self.old_name:
diff --git a/reproduce_rename_index.py b/reproduce_rename_index.py
new file mode 100644
index 0000000000..1b344d2e44
--- /dev/null
+++ b/reproduce_rename_index.py
@@ -0,0 +1,51 @@
+import os
+import sys
+import django
+from django.db import connection, migrations, models
+from django.db.migrations.state import ProjectState
+
+# Set up Django
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+django.setup()
+
+# Create a test model state
+project_state = ProjectState()
+operation = migrations.CreateModel(
+    "Pony",
+    [
+        ("id", models.AutoField(primary_key=True)),
+        ("weight", models.IntegerField()),
+        ("pink", models.IntegerField()),
+    ],
+    options={
+        'index_together': {('weight', 'pink')},
+    }
+)
+new_state = project_state.clone()
+operation.state_forwards("test_app", new_state)
+
+# Create the table and index
+with connection.schema_editor() as editor:
+    operation.database_forwards("test_app", editor, project_state, new_state)
+
+# Rename the index
+operation = migrations.RenameIndex(
+    "Pony", new_name="new_pony_test_idx", old_fields=("weight", "pink")
+)
+project_state = new_state
+new_state = project_state.clone()
+operation.state_forwards("test_app", new_state)
+
+print("Forward operation:")
+with connection.schema_editor() as editor:
+    operation.database_forwards("test_app", editor, project_state, new_state)
+
+print("Backward operation:")
+with connection.schema_editor() as editor:
+    operation.database_backwards("test_app", editor, new_state, project_state)
+
+print("Forward operation again:")
+with connection.schema_editor() as editor:
+    operation.database_forwards("test_app", editor, project_state, new_state)
+
+print("Success!")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..bc2ad119f8
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,13 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'django.contrib.contenttypes',
+    'django.contrib.auth',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
