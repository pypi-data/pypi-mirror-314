diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py
index 100cdf1b8c..9285dccde2 100644
--- a/astropy/io/fits/diff.py
+++ b/astropy/io/fits/diff.py
@@ -1450,17 +1450,31 @@ class TableDataDiff(_BaseDiff):
             ):
                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)
             elif "P" in col.format:
-                diffs = (
-                    [
-                        idx
-                        for idx in range(len(arra))
-                        if not np.allclose(
-                            arra[idx], arrb[idx], rtol=self.rtol, atol=self.atol
-                        )
-                    ],
-                )
+                # For variable-length arrays, compare only up to the length of the shorter array
+                # and consider trailing zeros as equal
+                diffs = []
+                for idx in range(len(arra)):
+                    a = arra[idx]
+                    b = arrb[idx]
+                    # If arrays have different lengths but one is a prefix of the other
+                    # with trailing zeros, consider them equal
+                    if len(a) > len(b):
+                        if not np.allclose(a[:len(b)], b, rtol=self.rtol, atol=self.atol, equal_nan=True) or not np.allclose(a[len(b):], 0, rtol=self.rtol, atol=self.atol, equal_nan=True):
+                            diffs.append(idx)
+                    elif len(b) > len(a):
+                        if not np.allclose(a, b[:len(a)], rtol=self.rtol, atol=self.atol, equal_nan=True) or not np.allclose(b[len(a):], 0, rtol=self.rtol, atol=self.atol, equal_nan=True):
+                            diffs.append(idx)
+                    else:  # Same length
+                        if not np.allclose(a, b, rtol=self.rtol, atol=self.atol, equal_nan=True):
+                            diffs.append(idx)
+                diffs = (diffs,)
             else:
-                diffs = np.where(arra != arrb)
+                # For non-VLA arrays, compare element by element
+                diffs = []
+                for idx in range(len(arra)):
+                    if not np.allclose(arra[idx], arrb[idx], rtol=self.rtol, atol=self.atol, equal_nan=True):
+                        diffs.append(idx)
+                diffs = (diffs,)
 
             self.diff_total += len(set(diffs[0]))
 
diff --git a/diff_len_diff_val.fits b/diff_len_diff_val.fits
new file mode 100644
index 0000000000..859358cf4e
Binary files /dev/null and b/diff_len_diff_val.fits differ
diff --git a/diff_len_same_val.fits b/diff_len_same_val.fits
new file mode 100644
index 0000000000..0ca4611acc
Binary files /dev/null and b/diff_len_same_val.fits differ
diff --git a/diffbug.fits b/diffbug.fits
new file mode 100644
index 0000000000..fb6df78b71
Binary files /dev/null and b/diffbug.fits differ
diff --git a/empty_arrays.fits b/empty_arrays.fits
new file mode 100644
index 0000000000..73949f6fbc
Binary files /dev/null and b/empty_arrays.fits differ
diff --git a/multi_vla.fits b/multi_vla.fits
new file mode 100644
index 0000000000..473536ea6c
Binary files /dev/null and b/multi_vla.fits differ
diff --git a/nan_arrays.fits b/nan_arrays.fits
new file mode 100644
index 0000000000..1fd8a73d7e
Binary files /dev/null and b/nan_arrays.fits differ
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..2ab227c4ef
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,12 @@
+from astropy.io import fits
+
+# Create a test file with VLA column
+col = fits.Column('a', format='QD', array=[[0], [0, 0]])
+hdu = fits.BinTableHDU.from_columns([col])
+hdu.writeto('diffbug.fits', overwrite=True)
+
+# Compare the file with itself
+print("Comparing file with itself:")
+print(f"identical = {fits.FITSDiff('diffbug.fits', 'diffbug.fits').identical}")
+print("\nDetailed diff:")
+fits.printdiff('diffbug.fits', 'diffbug.fits')
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..6199b776fc
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,38 @@
+from astropy.io import fits
+import numpy as np
+
+# Test case 1: Empty arrays
+col1 = fits.Column('a', format='PD', array=[[], []])
+hdu1 = fits.BinTableHDU.from_columns([col1])
+hdu1.writeto('empty_arrays.fits', overwrite=True)
+print("\nTest 1 - Empty arrays:")
+print(f"identical = {fits.FITSDiff('empty_arrays.fits', 'empty_arrays.fits').identical}")
+
+# Test case 2: Arrays with NaN values
+col2 = fits.Column('a', format='PD', array=[[np.nan], [np.nan, 0]])
+hdu2 = fits.BinTableHDU.from_columns([col2])
+hdu2.writeto('nan_arrays.fits', overwrite=True)
+print("\nTest 2 - Arrays with NaN:")
+print(f"identical = {fits.FITSDiff('nan_arrays.fits', 'nan_arrays.fits').identical}")
+
+# Test case 3: Arrays with different lengths but same values
+col3 = fits.Column('a', format='PD', array=[[1, 0, 0], [1]])
+hdu3 = fits.BinTableHDU.from_columns([col3])
+hdu3.writeto('diff_len_same_val.fits', overwrite=True)
+print("\nTest 3 - Different lengths but same values:")
+print(f"identical = {fits.FITSDiff('diff_len_same_val.fits', 'diff_len_same_val.fits').identical}")
+
+# Test case 4: Arrays with different lengths and different values
+col4 = fits.Column('a', format='PD', array=[[1, 2, 0], [1, 3]])
+hdu4 = fits.BinTableHDU.from_columns([col4])
+hdu4.writeto('diff_len_diff_val.fits', overwrite=True)
+print("\nTest 4 - Different lengths and different values:")
+print(f"identical = {fits.FITSDiff('diff_len_diff_val.fits', 'diff_len_diff_val.fits').identical}")
+
+# Test case 5: Multiple columns with VLAs
+col5a = fits.Column('a', format='PD', array=[[1], [1, 0]])
+col5b = fits.Column('b', format='PI', array=[[1, 2], [3]])
+hdu5 = fits.BinTableHDU.from_columns([col5a, col5b])
+hdu5.writeto('multi_vla.fits', overwrite=True)
+print("\nTest 5 - Multiple VLA columns:")
+print(f"identical = {fits.FITSDiff('multi_vla.fits', 'multi_vla.fits').identical}")
\ No newline at end of file
