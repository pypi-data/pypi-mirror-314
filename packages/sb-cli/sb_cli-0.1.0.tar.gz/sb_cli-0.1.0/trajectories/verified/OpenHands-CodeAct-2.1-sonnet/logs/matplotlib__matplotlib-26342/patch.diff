diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index 3f84250b64..174bc0caaa 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -943,6 +943,30 @@ class ContourSet(ContourLabeler, mcoll.Collection):
     alpha = property(lambda self: self.get_alpha())
     linestyles = property(lambda self: self._orig_linestyles)
 
+    def set_paths(self, paths):
+        """
+        Set the paths of all collections in the ContourSet.
+
+        Parameters
+        ----------
+        paths : list of Path
+            The paths to set. The length of *paths* must match the total number
+            of paths in all collections of this ContourSet.
+        """
+        # Get total number of paths in all collections
+        total_paths = sum(len(c.get_paths()) for c in self.collections)
+        if len(paths) != total_paths:
+            raise ValueError(
+                f"Number of paths ({len(paths)}) does not match total number of "
+                f"paths in ContourSet ({total_paths})")
+
+        # Set paths for each collection
+        start = 0
+        for collection in self.collections:
+            n_paths = len(collection.get_paths())
+            collection.set_paths(paths[start:start + n_paths])
+            start += n_paths
+
     @_api.deprecated("3.8")
     @property
     def collections(self):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..d8dffd3536
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,28 @@
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.transforms import Affine2D
+
+# Create some sample data
+x = np.linspace(-3, 3, 100)
+y = np.linspace(-3, 3, 100)
+X, Y = np.meshgrid(x, y)
+Z = np.sin(X) * np.cos(Y)
+
+# Create a contour plot
+fig, ax = plt.subplots()
+cs = ax.contour(X, Y, Z)
+
+# Get all paths from all collections
+all_paths = []
+for collection in cs.collections:
+    all_paths.extend(collection.get_paths())
+
+# Create a transform - scale by 2x
+transform = Affine2D().scale(2)
+
+# Transform paths and set them using the new method
+transformed_paths = [path.transformed(transform) for path in all_paths]
+cs.set_paths(transformed_paths)
+print("Successfully set transformed paths using new set_paths method")
+
+plt.show()
\ No newline at end of file
