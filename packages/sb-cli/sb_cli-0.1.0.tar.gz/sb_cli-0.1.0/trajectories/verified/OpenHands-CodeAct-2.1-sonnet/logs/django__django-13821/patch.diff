diff --git a/django/db/backends/sqlite3/base.py b/django/db/backends/sqlite3/base.py
index ab4ea70492..dcff5534e0 100644
--- a/django/db/backends/sqlite3/base.py
+++ b/django/db/backends/sqlite3/base.py
@@ -64,8 +64,8 @@ def list_aggregate(function):
 
 
 def check_sqlite_version():
-    if Database.sqlite_version_info < (3, 8, 3):
-        raise ImproperlyConfigured('SQLite 3.8.3 or later is required (found %s).' % Database.sqlite_version)
+    if Database.sqlite_version_info < (3, 9, 0):
+        raise ImproperlyConfigured('SQLite 3.9.0 or later is required (found %s).' % Database.sqlite_version)
 
 
 check_sqlite_version()
diff --git a/test_old_sqlite_version.py b/test_old_sqlite_version.py
new file mode 100644
index 0000000000..f9867eb300
--- /dev/null
+++ b/test_old_sqlite_version.py
@@ -0,0 +1,12 @@
+from sqlite3 import dbapi2 as Database
+from unittest.mock import patch
+
+print("Testing with SQLite 3.8.7...")
+
+# Mock SQLite version to test error handling
+with patch.object(Database, 'sqlite_version', '3.8.7'):
+    with patch.object(Database, 'sqlite_version_info', (3, 8, 7)):
+        try:
+            from django.db.backends.sqlite3.base import DatabaseWrapper
+        except Exception as e:
+            print(f"Got expected error: {e}")
\ No newline at end of file
diff --git a/test_sqlite_version.py b/test_sqlite_version.py
new file mode 100644
index 0000000000..bf31fcce11
--- /dev/null
+++ b/test_sqlite_version.py
@@ -0,0 +1,7 @@
+from sqlite3 import dbapi2 as Database
+
+print(f"SQLite version: {Database.sqlite_version}")
+print(f"SQLite version info: {Database.sqlite_version_info}")
+
+# Import Django's SQLite backend to trigger version check
+from django.db.backends.sqlite3.base import DatabaseWrapper
\ No newline at end of file
