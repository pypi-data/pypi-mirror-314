diff --git a/django/utils/dateformat.py b/django/utils/dateformat.py
index afd36d79e0..3ee3a551c8 100644
--- a/django/utils/dateformat.py
+++ b/django/utils/dateformat.py
@@ -325,8 +325,8 @@ class DateFormat(TimeFormat):
         return self.data.isocalendar()[1]
 
     def y(self):
-        "Year, 2 digits; e.g. '99'"
-        return str(self.data.year)[2:]
+        "Year, 2 digits with leading zeros; e.g. '99', '23' for years 1999, 123"
+        return '%02d' % (self.data.year % 100)
 
     def Y(self):
         "Year, 4 digits; e.g. '1999'"
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..b0a1825b56
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,28 @@
+import datetime
+from django.conf import settings
+from django.utils import dateformat
+
+# Configure Django settings
+settings.configure()
+
+# Test case from PR description
+dt = datetime.datetime(123, 4, 5, 6, 7)
+result = dateformat.format(dt, "y")
+print(f"Django dateformat for year 123: {result}")
+
+# Test with Python's strftime for comparison
+result_strftime = dt.strftime("%y")
+print(f"Python strftime for year 123: {result_strftime}")
+
+# Test other edge cases
+dt2 = datetime.datetime(999, 4, 5, 6, 7)
+result2 = dateformat.format(dt2, "y")
+print(f"Django dateformat for year 999: {result2}")
+
+dt3 = datetime.datetime(1, 4, 5, 6, 7)
+result3 = dateformat.format(dt3, "y")
+print(f"Django dateformat for year 1: {result3}")
+
+dt4 = datetime.datetime(99, 4, 5, 6, 7)
+result4 = dateformat.format(dt4, "y")
+print(f"Django dateformat for year 99: {result4}")
\ No newline at end of file
