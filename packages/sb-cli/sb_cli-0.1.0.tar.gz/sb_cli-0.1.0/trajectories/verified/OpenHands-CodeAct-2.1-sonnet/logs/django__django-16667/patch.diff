diff --git a/django/forms/widgets.py b/django/forms/widgets.py
index 842b73e95c..943106e416 100644
--- a/django/forms/widgets.py
+++ b/django/forms/widgets.py
@@ -1156,8 +1156,15 @@ class SelectDateWidget(Widget):
             input_format = get_format("DATE_INPUT_FORMATS")[0]
             input_format = formats.sanitize_strftime_format(input_format)
             try:
-                date_value = datetime.date(int(y), int(m), int(d))
-            except ValueError:
+                # First try to convert the values to integers to catch any overflow errors
+                year = int(y)
+                month = int(m)
+                day = int(d)
+                # Validate year is within reasonable range (1-9999)
+                if not 1 <= year <= 9999:
+                    return "%s-%s-%s" % (y or 0, m or 0, d or 0)
+                date_value = datetime.date(year, month, day)
+            except (ValueError, OverflowError):
                 # Return pseudo-ISO dates with zeros for any unselected values,
                 # e.g. '2017-0-23'.
                 return "%s-%s-%s" % (y or 0, m or 0, d or 0)
diff --git a/repro.py b/repro.py
new file mode 100644
index 0000000000..a2b97c40c6
--- /dev/null
+++ b/repro.py
@@ -0,0 +1,37 @@
+from django import forms
+from django.forms import SelectDateWidget
+from django.http import HttpResponse
+
+class ReproForm(forms.Form):
+    my_date = forms.DateField(widget=SelectDateWidget())
+
+def repro_view(request):
+    form = ReproForm(request.GET)  # for ease of reproducibility
+    if form.is_valid():
+        return HttpResponse("ok")
+    else:
+        return HttpResponse("not ok")
+
+# Create a simple Django app
+from django.urls import path
+from django.conf import settings
+from django.core.management import execute_from_command_line
+import os, sys
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='secret',
+    ROOT_URLCONF=__name__,
+    MIDDLEWARE=[
+        'django.middleware.common.CommonMiddleware',
+    ],
+)
+
+# URL patterns
+urlpatterns = [
+    path('repro/', repro_view, name='repro'),
+]
+
+if __name__ == '__main__':
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/server.log b/server.log
new file mode 100644
index 0000000000..91421ef1ce
--- /dev/null
+++ b/server.log
@@ -0,0 +1,48 @@
+Watching for file changes with StatReloader
+Internal Server Error: /repro/
+Traceback (most recent call last):
+  File "/testbed/django/core/handlers/exception.py", line 55, in inner
+    response = get_response(request)
+               ^^^^^^^^^^^^^^^^^^^^^
+  File "/testbed/django/core/handlers/base.py", line 197, in _get_response
+    response = wrapped_callback(request, *callback_args, **callback_kwargs)
+               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+  File "/testbed/repro.py", line 10, in repro_view
+    if form.is_valid():
+       ^^^^^^^^^^^^^^^
+  File "/testbed/django/forms/forms.py", line 197, in is_valid
+    return self.is_bound and not self.errors
+                                 ^^^^^^^^^^^
+  File "/testbed/django/forms/forms.py", line 192, in errors
+    self.full_clean()
+  File "/testbed/django/forms/forms.py", line 327, in full_clean
+    self._clean_fields()
+  File "/testbed/django/forms/forms.py", line 334, in _clean_fields
+    value = bf.initial if field.disabled else bf.data
+                                              ^^^^^^^
+  File "/testbed/django/forms/boundfield.py", line 135, in data
+    return self.form._widget_data_value(self.field.widget, self.html_name)
+           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+  File "/testbed/django/forms/forms.py", line 216, in _widget_data_value
+    return widget.value_from_datadict(self.data, self.files, html_name)
+           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+  File "/testbed/django/forms/widgets.py", line 1159, in value_from_datadict
+    date_value = datetime.date(int(y), int(m), int(d))
+                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+OverflowError: signed integer is greater than maximum
+[28/Oct/2024 22:39:59] "GET /repro/?my_date_day=1&my_date_month=1&my_date_year=1234567821345678 HTTP/1.1" 500 326480
+/testbed/django/forms/widgets.py changed, reloading.
+Performing system checks...
+
+System check identified no issues (0 silenced).
+October 28, 2024 - 22:39:32
+Django version 5.0.dev20230321195153, using settings None
+Starting development server at http://127.0.0.1:8000/
+Quit the server with CONTROL-C.
+
+Watching for file changes with StatReloader
+[28/Oct/2024 22:41:16] "GET /repro/?my_date_day=1&my_date_month=1&my_date_year=1234567821345678 HTTP/1.1" 200 6
+[28/Oct/2024 22:41:45] "GET /repro/?my_date_day=1&my_date_month=1&my_date_year=0 HTTP/1.1" 200 6
+[28/Oct/2024 22:41:54] "GET /repro/?my_date_day=1&my_date_month=1&my_date_year=9999 HTTP/1.1" 200 2
+[28/Oct/2024 22:42:02] "GET /repro/?my_date_day=1&my_date_month=1&my_date_year=10000 HTTP/1.1" 200 6
+[28/Oct/2024 22:42:12] "GET /repro/?my_date_day=1&my_date_month=1&my_date_year=abc HTTP/1.1" 200 6
