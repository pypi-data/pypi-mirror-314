diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..4afa865c47
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,30 @@
+from sympy import S, Lambda, imageset, I, Reals, Symbol
+
+n = Symbol('n')
+
+# Test case 1: Simple imageset with no real points
+S1 = imageset(Lambda(n, n*I), S.Integers)
+print("Test 1: Simple imageset with no real points")
+print("S1 =", S1)
+print("S1.intersect(Reals) =", S1.intersect(Reals))
+print()
+
+# Test case 2: Imageset with all real points
+S2 = imageset(Lambda(n, 2*n), S.Integers)
+print("Test 2: Imageset with all real points")
+print("S2 =", S2)
+print("S2.intersect(Reals) =", S2.intersect(Reals))
+print()
+
+# Test case 3: Imageset with complex denominator
+S3 = imageset(Lambda(n, 1/(n + I)), S.Integers)
+print("Test 3: Imageset with complex denominator")
+print("S3 =", S3)
+print("S3.intersect(Reals) =", S3.intersect(Reals))
+print()
+
+# Test case 4: Original test case
+S4 = imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers)
+print("Test 4: Original test case")
+print("S4 =", S4)
+print("S4.intersect(Reals) =", S4.intersect(Reals))
\ No newline at end of file
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..d9321ad233
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,13 @@
+from sympy import S, Lambda, imageset, I, Reals, Symbol
+
+n = Symbol('n')
+# Create the set S1 = {n + i*(n-1)*(n+1) | n âˆˆ Z}
+S1 = imageset(Lambda(n, n + (n - 1)*(n + 1)*I), S.Integers)
+
+print("S1 =", S1)
+print("2 in S1:", 2 in S1)
+print("2 in S1.intersect(Reals):", 2 in S1.intersect(Reals))
+
+# The correct result should be:
+print("\nS1 intersect Reals should be {-1, 1}")
+print("S1.intersect(Reals) =", S1.intersect(Reals))
\ No newline at end of file
diff --git a/sympy/sets/handlers/intersection.py b/sympy/sets/handlers/intersection.py
index c54dc8f72a..557662d6fd 100644
--- a/sympy/sets/handlers/intersection.py
+++ b/sympy/sets/handlers/intersection.py
@@ -304,11 +304,14 @@ def intersection_sets(self, other): # noqa:F811
             return None
         else:
             # univarite imaginary part in same variable
-            x, xis = zip(*[solve_linear(i, 0) for i in Mul.make_args(im) if n in i.free_symbols])
-            if x and all(i == n for i in x):
-                base_set -= FiniteSet(xis)
-            else:
-                base_set -= ConditionSet(n, Eq(im, 0), S.Integers)
+            from sympy.solvers.solvers import solve
+            # Find values where imaginary part is zero
+            solutions = solve(im, n)
+            if solutions:
+                # Keep only the solutions that make imaginary part zero
+                real_points = FiniteSet(*[s for s in solutions if s.is_real])
+                # The intersection should be these points
+                base_set = real_points
         # exclude values that make denominators 0
         for i in denoms(f):
             if i.has(n):
