diff --git a/sympy/matrices/matrices.py b/sympy/matrices/matrices.py
index 97cde62e26..6abdf043c1 100644
--- a/sympy/matrices/matrices.py
+++ b/sympy/matrices/matrices.py
@@ -166,13 +166,21 @@ def _eval_det_bareiss(self):
         """Compute matrix determinant using Bareiss' fraction-free
         algorithm which is an extension of the well known Gaussian
         elimination method. This approach is best suited for dense
-        symbolic matrices and will result in a determinant with
+        integer matrices and will result in a determinant with
         minimal number of fractions. It means that less term
         rewriting is needed on resulting formulae.
 
+        For matrices with symbolic entries, the Berkowitz algorithm
+        is used instead as it is more reliable in those cases.
+
         TODO: Implement algorithm for sparse matrices (SFF),
         http://www.eecis.udel.edu/~saunders/papers/sffge/it5.ps.
         """
+        # Check for symbolic entries
+        for i in range(self.rows):
+            for j in range(self.cols):
+                if self[i,j].free_symbols:
+                    return self._eval_det_berkowitz()
 
         # XXX included as a workaround for issue #12362.  Should use `_find_reasonable_pivot` instead
         def _find_pivot(l):
@@ -380,16 +388,16 @@ def cofactor_matrix(self, method="berkowitz"):
         return self._new(self.rows, self.cols,
                          lambda i, j: self.cofactor(i, j, method))
 
-    def det(self, method="bareiss"):
+    def det(self, method="berkowitz"):
         """Computes the determinant of a matrix.  If the matrix
         is at most 3x3, a hard-coded formula is used.
         Otherwise, the determinant using the method `method`.
 
 
         Possible values for "method":
-          bareis
-          berkowitz
-          lu
+          bareis - Bareiss algorithm, efficient for dense integer matrices but may fail for symbolic entries
+          berkowitz - Berkowitz algorithm, more suitable for symbolic matrices
+          lu - LU decomposition
         """
 
         # sanitize `method`
