diff --git a/django/db/backends/ddl_references.py b/django/db/backends/ddl_references.py
index 44e49806f8..b40d7bb4dc 100644
--- a/django/db/backends/ddl_references.py
+++ b/django/db/backends/ddl_references.py
@@ -112,12 +112,15 @@ class IndexColumns(Columns):
         def col_str(column, idx):
             # Index.__init__() guarantees that self.opclasses is the same
             # length as self.columns.
-            col = '{} {}'.format(self.quote_name(column), self.opclasses[idx])
+            parts = [self.quote_name(column)]
+            if self.opclasses[idx]:
+                parts.append(self.opclasses[idx])
             try:
-                col = '{} {}'.format(col, self.col_suffixes[idx])
+                if self.col_suffixes[idx]:
+                    parts.append(self.col_suffixes[idx])
             except IndexError:
                 pass
-            return col
+            return ' '.join(parts)
 
         return ', '.join(col_str(column, idx) for idx, column in enumerate(self.columns))
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..aaa2c310e9
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,37 @@
+from django.db.models import Index
+from django.db.backends.ddl_references import Statement, Table, IndexColumns
+
+def quote_name(name):
+    return '"%s"' % name
+
+# Test case 1: Descending order
+table = Table('schema_author', quote_name)
+columns = IndexColumns(table, ['name'], quote_name, ['DESC'], [''])
+statement = Statement('CREATE INDEX "%(name)s" ON %(table)s (%(columns)s)', 
+    table=table,
+    name='idx',
+    columns=columns)
+print("Test case 1 - Descending order:")
+print(statement)
+print()
+
+# Test case 2: With opclasses
+table = Table('schema_author', quote_name)
+columns = IndexColumns(table, ['name'], quote_name, opclasses=['text_pattern_ops'])
+statement = Statement('CREATE INDEX "%(name)s" ON %(table)s (%(columns)s)', 
+    table=table,
+    name='idx',
+    columns=columns)
+print("Test case 2 - With opclasses:")
+print(statement)
+print()
+
+# Test case 3: With both DESC and opclasses
+table = Table('schema_author', quote_name)
+columns = IndexColumns(table, ['name'], quote_name, ['DESC'], ['text_pattern_ops'])
+statement = Statement('CREATE INDEX "%(name)s" ON %(table)s (%(columns)s)', 
+    table=table,
+    name='idx',
+    columns=columns)
+print("Test case 3 - With both DESC and opclasses:")
+print(statement)
\ No newline at end of file
