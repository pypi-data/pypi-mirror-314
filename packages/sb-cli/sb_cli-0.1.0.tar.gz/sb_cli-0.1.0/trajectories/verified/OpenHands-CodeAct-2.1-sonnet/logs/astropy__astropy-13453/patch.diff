diff --git a/astropy/io/ascii/html.py b/astropy/io/ascii/html.py
index 266cf229cc..dd70b6ec39 100644
--- a/astropy/io/ascii/html.py
+++ b/astropy/io/ascii/html.py
@@ -349,11 +349,13 @@ class HTML(core.BaseReader):
         cols = list(table.columns.values())
 
         self.data.header.cols = cols
+        self.data.cols = cols
 
         if isinstance(self.data.fill_values, tuple):
             self.data.fill_values = [self.data.fill_values]
 
         self.data._set_fill_values(cols)
+        self.data._set_col_formats()
 
         lines = []
 
@@ -430,14 +432,25 @@ class HTML(core.BaseReader):
                                     # Split up multicolumns into separate columns
                                     new_col = Column([el[i] for el in col])
 
-                                    new_col_iter_str_vals = self.fill_values(
-                                        col, new_col.info.iter_str_vals())
+                                    # Use the format from formats dict if available for multicolumns too
+                                    if hasattr(self.data, 'formats') and col.info.name in self.data.formats:
+                                        format_func = self.data.formats[col.info.name]
+                                        formatted_vals = (format_func(x) for x in new_col)
+                                        new_col_iter_str_vals = self.fill_values(col, formatted_vals)
+                                    else:
+                                        new_col_iter_str_vals = self.fill_values(col, new_col.info.iter_str_vals())
                                     col_str_iters.append(new_col_iter_str_vals)
                                     new_cols_escaped.append(col_escaped)
                                     new_cols.append(new_col)
                             else:
 
-                                col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())
+                                # Use the format from formats dict if available
+                                if hasattr(self.data, 'formats') and col.info.name in self.data.formats:
+                                    format_func = self.data.formats[col.info.name]
+                                    formatted_vals = (format_func(x) for x in col)
+                                    col_iter_str_vals = self.fill_values(col, formatted_vals)
+                                else:
+                                    col_iter_str_vals = self.fill_values(col, col.info.iter_str_vals())
                                 col_str_iters.append(col_iter_str_vals)
 
                                 new_cols_escaped.append(col_escaped)
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..1e2d038ef7
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,30 @@
+from astropy.table import Table
+import numpy as np
+from io import StringIO
+
+# generate table with some edge cases
+t = Table([
+    (1.23875234858e-24, 3.2348748432e-15, np.nan, np.inf),  # Add NaN and inf
+    (2, 4, 6, 8)
+], names=('a', 'b'))
+tc = t.copy()  # copy table
+
+# print HTML table with "a" column formatted to show 2 decimal places
+with StringIO() as sp:
+    # Debug info
+    print("Before write:")
+    print("Column a format:", tc['a'].info.format)
+    
+    tc.write(sp, format="html", formats={"a": lambda x: f"{x:.2e}" if not np.isnan(x) else "NaN"})
+    
+    print("\nAfter write:")
+    print("Column a format:", tc['a'].info.format)
+    
+    print("\nHTML output:")
+    print(sp.getvalue())
+
+# print CSV table with same formatting
+with StringIO() as sp:
+    tc.write(sp, format="csv", formats={"a": lambda x: f"{x:.2e}" if not np.isnan(x) else "NaN"})
+    print("\nCSV output:")
+    print(sp.getvalue())
\ No newline at end of file
