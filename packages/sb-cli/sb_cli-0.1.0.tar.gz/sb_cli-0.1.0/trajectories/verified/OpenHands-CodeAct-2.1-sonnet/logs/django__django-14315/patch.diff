diff --git a/django/db/backends/base/client.py b/django/db/backends/base/client.py
index 339f1e863c..f329c0c618 100644
--- a/django/db/backends/base/client.py
+++ b/django/db/backends/base/client.py
@@ -21,6 +21,5 @@ class BaseDatabaseClient:
 
     def runshell(self, parameters):
         args, env = self.settings_to_cmd_args_env(self.connection.settings_dict, parameters)
-        if env:
-            env = {**os.environ, **env}
+        env = {**os.environ, **env}  # Always use os.environ as base
         subprocess.run(args, env=env, check=True)
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..bd9d36929d
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,38 @@
+import os
+from django.db.backends.postgresql.client import DatabaseClient
+
+# Test case 1: Empty settings dict
+settings_dict = {}
+parameters = []
+args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)
+print("Test 1 - Empty settings:")
+print(f"args: {args}")
+print(f"env: {env}")
+print("env is empty dict:", env == {})
+
+# Test case 2: Settings with password
+settings_dict = {'PASSWORD': 'secret'}
+args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)
+print("\nTest 2 - Settings with password:")
+print(f"args: {args}")
+print(f"env: {env}")
+print("env has PGPASSWORD:", 'PGPASSWORD' in env)
+
+# Test case 3: Simulate runshell behavior with empty env
+os.environ['PGPASSWORD'] = 'from_environ'
+os.environ['PGUSER'] = 'test_user'
+
+settings_dict = {}  # This will generate empty env
+args, env = DatabaseClient.settings_to_cmd_args_env(settings_dict, parameters)
+print("\nTest 3 - Simulating runshell with empty env:")
+print("Original os.environ values:")
+print(f"PGPASSWORD={os.environ.get('PGPASSWORD')}")
+print(f"PGUSER={os.environ.get('PGUSER')}")
+
+# After fix: Always use os.environ as base
+final_env = {**os.environ, **env}
+
+print("\nFinal environment that would be passed to subprocess:")
+print(f"PGPASSWORD={final_env.get('PGPASSWORD')}")
+print(f"PGUSER={final_env.get('PGUSER')}")
+print("Environment variables were lost:", not bool(final_env))
\ No newline at end of file
