diff --git a/bug_reproduction.png b/bug_reproduction.png
new file mode 100644
index 0000000000..73993f5289
Binary files /dev/null and b/bug_reproduction.png differ
diff --git a/lib/matplotlib/colorbar.py b/lib/matplotlib/colorbar.py
index c59b0ac815..82ae8a0a98 100644
--- a/lib/matplotlib/colorbar.py
+++ b/lib/matplotlib/colorbar.py
@@ -651,8 +651,27 @@ class Colorbar:
             if not self.drawedges:
                 if len(self._y) >= self.n_rasterize:
                     self.solids.set_rasterized(True)
-        self.dividers.set_segments(
-            np.dstack([X, Y])[1:-1] if self.drawedges else [])
+        if self.drawedges:
+            # When extend is used, we want to draw edges at the extremities too
+            if self.extend in ('both', 'min', 'max'):
+                segments = np.dstack([X, Y])
+                # For 'min' we include the first segment
+                if self.extend in ('both', 'min'):
+                    start_idx = 0
+                else:
+                    start_idx = 1
+                # For 'max' we include the last segment
+                if self.extend in ('both', 'max'):
+                    end_idx = None
+                else:
+                    end_idx = -1
+                segments = segments[start_idx:end_idx]
+            else:
+                # Original behavior for extend='neither'
+                segments = np.dstack([X, Y])[1:-1]
+            self.dividers.set_segments(segments)
+        else:
+            self.dividers.set_segments([])
 
     def _add_solids_patches(self, X, Y, C, mappable):
         hatches = mappable.hatches * len(C)  # Have enough hatches.
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..3414b181cb
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,17 @@
+import matplotlib as mpl
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.colors import from_levels_and_colors
+
+my_cmap = mpl.cm.viridis
+bounds = np.arange(10)
+nb_colors = len(bounds) + 1
+colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))
+my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend='both')
+
+plt.figure(figsize=(5, 1))
+ax = plt.subplot(111)
+cbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=my_norm, orientation='horizontal', drawedges=True)
+plt.subplots_adjust(left=0.05, bottom=0.4, right=0.95, top=0.9)
+plt.savefig('bug_reproduction.png')
+plt.close()
\ No newline at end of file
diff --git a/test_colorbar_both_False.png b/test_colorbar_both_False.png
new file mode 100644
index 0000000000..ba512f0bd6
Binary files /dev/null and b/test_colorbar_both_False.png differ
diff --git a/test_colorbar_both_True.png b/test_colorbar_both_True.png
new file mode 100644
index 0000000000..73993f5289
Binary files /dev/null and b/test_colorbar_both_True.png differ
diff --git a/test_colorbar_max_False.png b/test_colorbar_max_False.png
new file mode 100644
index 0000000000..0f061d7992
Binary files /dev/null and b/test_colorbar_max_False.png differ
diff --git a/test_colorbar_max_True.png b/test_colorbar_max_True.png
new file mode 100644
index 0000000000..f9bc27f422
Binary files /dev/null and b/test_colorbar_max_True.png differ
diff --git a/test_colorbar_min_False.png b/test_colorbar_min_False.png
new file mode 100644
index 0000000000..df4049788e
Binary files /dev/null and b/test_colorbar_min_False.png differ
diff --git a/test_colorbar_min_True.png b/test_colorbar_min_True.png
new file mode 100644
index 0000000000..f297a81e0b
Binary files /dev/null and b/test_colorbar_min_True.png differ
diff --git a/test_colorbar_neither_False.png b/test_colorbar_neither_False.png
new file mode 100644
index 0000000000..80940a72e1
Binary files /dev/null and b/test_colorbar_neither_False.png differ
diff --git a/test_colorbar_neither_True.png b/test_colorbar_neither_True.png
new file mode 100644
index 0000000000..25a1c45df7
Binary files /dev/null and b/test_colorbar_neither_True.png differ
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..11ca5427a8
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,36 @@
+import matplotlib as mpl
+import numpy as np
+import matplotlib.pyplot as plt
+from matplotlib.colors import from_levels_and_colors
+
+def test_colorbar(extend, drawedges, filename):
+    my_cmap = mpl.cm.viridis
+    bounds = np.arange(10)
+    # For extend='neither', we need len(bounds)-1 colors
+    # For extend='both', we need len(bounds)+1 colors
+    # For extend='min' or 'max', we need len(bounds) colors
+    if extend == 'neither':
+        nb_colors = len(bounds) - 1
+    elif extend == 'both':
+        nb_colors = len(bounds) + 1
+    else:  # 'min' or 'max'
+        nb_colors = len(bounds)
+    colors = my_cmap(np.linspace(100, 255, nb_colors).astype(int))
+    my_cmap, my_norm = from_levels_and_colors(bounds, colors, extend=extend)
+
+    plt.figure(figsize=(5, 1))
+    ax = plt.subplot(111)
+    cbar = mpl.colorbar.ColorbarBase(ax, cmap=my_cmap, norm=my_norm, 
+                                    orientation='horizontal', drawedges=drawedges)
+    plt.subplots_adjust(left=0.05, bottom=0.4, right=0.95, top=0.9)
+    plt.savefig(filename)
+    plt.close()
+
+# Test all combinations of extend and drawedges
+extends = ['neither', 'both', 'min', 'max']
+drawedges_values = [True, False]
+
+for extend in extends:
+    for drawedges in drawedges_values:
+        filename = f'test_colorbar_{extend}_{drawedges}.png'
+        test_colorbar(extend, drawedges, filename)
\ No newline at end of file
