diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index 81f8f79c71..f25139e7ba 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1210,17 +1210,24 @@ class Exists(Subquery):
         return clone
 
     def as_sql(self, compiler, connection, template=None, **extra_context):
-        query = self.query.exists(using=connection.alias)
-        sql, params = super().as_sql(
-            compiler,
-            connection,
-            template=template,
-            query=query,
-            **extra_context,
-        )
-        if self.negated:
-            sql = 'NOT {}'.format(sql)
-        return sql, params
+        try:
+            query = self.query.exists(using=connection.alias)
+            sql, params = super().as_sql(
+                compiler,
+                connection,
+                template=template,
+                query=query,
+                **extra_context,
+            )
+            if self.negated:
+                sql = 'NOT {}'.format(sql)
+            return sql, params
+        except EmptyResultSet:
+            # If we have an empty queryset and this is negated,
+            # we want to return True (since NOT(empty) = True)
+            if self.negated:
+                return '', []
+            raise
 
     def select_format(self, compiler, sql, params):
         # Wrap EXISTS() with a CASE WHEN expression if a database backend
diff --git a/django/db/models/sql/where.py b/django/db/models/sql/where.py
index 50ff13be75..e9b94907b2 100644
--- a/django/db/models/sql/where.py
+++ b/django/db/models/sql/where.py
@@ -80,7 +80,15 @@ class WhereNode(tree.Node):
             try:
                 sql, params = compiler.compile(child)
             except EmptyResultSet:
-                empty_needed -= 1
+                # If the child is negated and raises EmptyResultSet, it means
+                # it matches everything (NOT empty = everything)
+                if getattr(child, 'negated', False):
+                    # For negated empty subqueries, we want to return True
+                    # (i.e., an empty string) since NOT(empty) = True
+                    result.append('')
+                    full_needed -= 1
+                else:
+                    empty_needed -= 1
             else:
                 if sql:
                     result.append(sql)
diff --git a/reproduce_exists.py b/reproduce_exists.py
new file mode 100644
index 0000000000..109bbaf424
--- /dev/null
+++ b/reproduce_exists.py
@@ -0,0 +1,34 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[],
+    )
+    django.setup()
+
+from django.db import models
+from django.db.models.sql import Query
+from django.db.models.sql.where import WhereNode
+
+# Create a test model
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'myapp'
+        db_table = 'myapp_mymodel'
+
+# Create test case
+qs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')
+print("QuerySet:", qs)
+print("Query:", qs.query)
\ No newline at end of file
diff --git a/test_exists.py b/test_exists.py
new file mode 100644
index 0000000000..c830e76cdc
--- /dev/null
+++ b/test_exists.py
@@ -0,0 +1,77 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+from django.conf import settings
+
+if not settings.configured:
+    settings.configure(
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[],
+    )
+    django.setup()
+
+from django.db import models, connection
+
+# Create a test model
+class MyModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'myapp'
+        db_table = 'myapp_mymodel'
+
+# Create the table
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(MyModel)
+
+# Test cases
+print("Test 1: Original issue - negated Exists with empty queryset")
+qs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')
+print("QuerySet:", qs)
+try:
+    print("Query:", qs.query)
+except Exception as e:
+    print("Query raised:", type(e).__name__, str(e))
+print()
+
+print("Test 2: Non-negated Exists with empty queryset")
+qs = MyModel.objects.filter(models.Exists(MyModel.objects.none()), name='test')
+print("QuerySet:", qs)
+try:
+    print("Query:", qs.query)
+except Exception as e:
+    print("Query raised:", type(e).__name__, str(e))
+print()
+
+print("Test 3: Negated Exists with non-empty queryset")
+qs = MyModel.objects.filter(~models.Exists(MyModel.objects.all()), name='test')
+print("QuerySet:", qs)
+try:
+    print("Query:", qs.query)
+except Exception as e:
+    print("Query raised:", type(e).__name__, str(e))
+print()
+
+print("Test 4: Non-negated Exists with non-empty queryset")
+qs = MyModel.objects.filter(models.Exists(MyModel.objects.all()), name='test')
+print("QuerySet:", qs)
+try:
+    print("Query:", qs.query)
+except Exception as e:
+    print("Query raised:", type(e).__name__, str(e))
+print()
+
+print("Test 5: Multiple conditions with negated Exists")
+qs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test', id__gt=0)
+print("QuerySet:", qs)
+try:
+    print("Query:", qs.query)
+except Exception as e:
+    print("Query raised:", type(e).__name__, str(e))
+print()
\ No newline at end of file
