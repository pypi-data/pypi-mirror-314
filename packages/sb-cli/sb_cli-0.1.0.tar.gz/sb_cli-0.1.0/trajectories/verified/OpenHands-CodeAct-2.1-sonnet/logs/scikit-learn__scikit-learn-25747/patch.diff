diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..eed8e41e9
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,27 @@
+import pandas as pd
+from sklearn.base import BaseEstimator, TransformerMixin
+from sklearn import set_config
+from sklearn.pipeline import make_union
+
+index = pd.date_range(start="2020-01-01", end="2020-01-05", inclusive="left", freq="H")
+data = pd.DataFrame(index=index, data=[10] * len(index), columns=["value"])
+data["date"] = index.date
+
+
+class MyTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X: pd.DataFrame, y=None, **kwargs):
+        return self
+
+    def transform(self, X: pd.DataFrame, y=None) -> pd.DataFrame:
+        return X["value"].groupby(X["date"]).sum()
+
+
+# This works.
+print("Testing with default output:")
+set_config(transform_output="default")
+print(make_union(MyTransformer()).fit_transform(data))
+
+print("\nTesting with pandas output:")
+# This does not work.
+set_config(transform_output="pandas")
+print(make_union(MyTransformer()).fit_transform(data))
\ No newline at end of file
diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..bf3d7af6e 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -55,7 +55,9 @@ def _wrap_in_pandas_container(
     if isinstance(data_to_wrap, pd.DataFrame):
         if columns is not None:
             data_to_wrap.columns = columns
-        if index is not None:
+        if index is not None and len(data_to_wrap) == len(index):
+            # Only set index if lengths match to handle cases where the transformer
+            # changes the number of rows (e.g., groupby operations)
             data_to_wrap.index = index
         return data_to_wrap
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..21327a5eb
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,48 @@
+import pandas as pd
+from sklearn.base import BaseEstimator, TransformerMixin
+from sklearn import set_config
+from sklearn.pipeline import make_union
+
+# Test case 1: Empty DataFrame
+print("Test case 1: Empty DataFrame")
+index = pd.date_range(start="2020-01-01", end="2020-01-05", inclusive="left", freq="h")
+data = pd.DataFrame(index=index, data=[10] * len(index), columns=["value"])
+data["date"] = index.date
+
+class EmptyTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X, y=None, **kwargs):
+        return self
+
+    def transform(self, X):
+        # Return empty DataFrame by filtering everything out
+        return X[X["value"] < 0].groupby(X["date"]).sum()
+
+set_config(transform_output="pandas")
+print(make_union(EmptyTransformer()).fit_transform(data))
+
+# Test case 2: Multiple columns with groupby
+print("\nTest case 2: Multiple columns with groupby")
+data["value2"] = data["value"] * 2
+
+class MultiColumnTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X, y=None, **kwargs):
+        return self
+
+    def transform(self, X):
+        return X.groupby(X["date"]).sum()
+
+set_config(transform_output="pandas")
+print(make_union(MultiColumnTransformer()).fit_transform(data))
+
+# Test case 3: No groupby, just column selection
+print("\nTest case 3: No groupby, just column selection")
+
+class ColumnSelectTransformer(BaseEstimator, TransformerMixin):
+    def fit(self, X, y=None, **kwargs):
+        return self
+
+    def transform(self, X):
+        return X[["value"]]
+
+set_config(transform_output="pandas")
+print(make_union(ColumnSelectTransformer()).fit_transform(data))
\ No newline at end of file
