diff --git a/django/forms/models.py b/django/forms/models.py
index 192d9fad94..d8f2bea82c 100644
--- a/django/forms/models.py
+++ b/django/forms/models.py
@@ -257,13 +257,31 @@ class ModelFormOptions:
 
 class ModelFormMetaclass(DeclarativeFieldsMetaclass):
     def __new__(mcs, name, bases, attrs):
-        base_formfield_callback = None
+        # First check for formfield_callback in Meta of current class
+        meta = attrs.get('Meta', None)
+        meta_callback = getattr(meta, 'formfield_callback', None) if meta else None
+        
+        # Then check for formfield_callback in base classes' Meta
+        base_meta_callback = None
         for b in bases:
             if hasattr(b, "Meta") and hasattr(b.Meta, "formfield_callback"):
-                base_formfield_callback = b.Meta.formfield_callback
+                base_meta_callback = b.Meta.formfield_callback
                 break
-
-        formfield_callback = attrs.pop("formfield_callback", base_formfield_callback)
+        
+        # Then check for class-level formfield_callback in current class and bases
+        class_callback = attrs.get('formfield_callback', None)
+        base_class_callback = None
+        for b in bases:
+            if hasattr(b, "formfield_callback"):
+                base_class_callback = b.formfield_callback
+                break
+        
+        # Priority: Meta > class-level > base Meta > base class-level
+        formfield_callback = meta_callback or class_callback or base_meta_callback or base_class_callback
+        
+        # Set the resolved callback
+        if formfield_callback is not None:
+            attrs['formfield_callback'] = formfield_callback
 
         new_class = super().__new__(mcs, name, bases, attrs)
 
@@ -636,7 +654,11 @@ def modelform_factory(
     class_name = model.__name__ + "Form"
 
     # Class attributes for the new form class.
-    form_class_attrs = {"Meta": Meta, "formfield_callback": formfield_callback}
+    form_class_attrs = {"Meta": Meta}
+    
+    # Only set formfield_callback if explicitly provided to avoid overriding the base form's callback
+    if formfield_callback is not None:
+        form_class_attrs["formfield_callback"] = formfield_callback
 
     if getattr(Meta, "fields", None) is None and getattr(Meta, "exclude", None) is None:
         raise ImproperlyConfigured(
diff --git a/edge_cases.py b/edge_cases.py
new file mode 100644
index 0000000000..809ce81843
--- /dev/null
+++ b/edge_cases.py
@@ -0,0 +1,80 @@
+from django.conf import settings
+from django import forms
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+)
+
+import django
+django.setup()
+
+# Define the model
+class MyModel(models.Model):
+    active = models.BooleanField()
+    name = models.CharField(max_length=64, blank=True, null=True)
+
+    class Meta:
+        app_label = 'myapp'
+
+# Define different callbacks
+def all_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    formfield.required = True
+    return formfield
+
+def all_optional(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    formfield.required = False
+    return formfield
+
+# Test Case 1: Base form with callback in Meta, factory form with explicit different callback
+class Form1(forms.ModelForm):
+    class Meta:
+        model = MyModel
+        formfield_callback = all_required
+        fields = ['active', 'name']
+
+FactoryForm1 = forms.modelform_factory(MyModel, form=Form1, formfield_callback=all_optional)
+
+# Test Case 2: Base form with callback in class, factory form with no callback
+class Form2(forms.ModelForm):
+    formfield_callback = all_required
+    class Meta:
+        model = MyModel
+        fields = ['active', 'name']
+
+FactoryForm2 = forms.modelform_factory(MyModel, form=Form2)
+
+# Test Case 3: Base form with both class and Meta callbacks, factory form with no callback
+class Form3(forms.ModelForm):
+    formfield_callback = all_optional  # This should be overridden by Meta
+    class Meta:
+        model = MyModel
+        formfield_callback = all_required
+        fields = ['active', 'name']
+
+FactoryForm3 = forms.modelform_factory(MyModel, form=Form3)
+
+# Test the forms
+print("Test Case 1: Base form with Meta callback, factory form with different callback")
+form1 = Form1()
+factory_form1 = FactoryForm1()
+print("Base form fields required:", form1.fields['active'].required, form1.fields['name'].required)
+print("Factory form fields required:", factory_form1.fields['active'].required, factory_form1.fields['name'].required)
+print()
+
+print("Test Case 2: Base form with class callback, factory form with no callback")
+form2 = Form2()
+factory_form2 = FactoryForm2()
+print("Base form fields required:", form2.fields['active'].required, form2.fields['name'].required)
+print("Factory form fields required:", factory_form2.fields['active'].required, factory_form2.fields['name'].required)
+print()
+
+print("Test Case 3: Base form with both callbacks, factory form with no callback")
+form3 = Form3()
+factory_form3 = FactoryForm3()
+print("Base form fields required:", form3.fields['active'].required, form3.fields['name'].required)
+print("Factory form fields required:", factory_form3.fields['active'].required, factory_form3.fields['name'].required)
\ No newline at end of file
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..73f3c39cbe
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,49 @@
+from django.conf import settings
+from django import forms
+from django.db import models
+
+# Configure Django settings
+settings.configure(
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth'],
+)
+
+import django
+django.setup()
+
+# Define the model
+class MyModel(models.Model):
+    active = models.BooleanField()
+    name = models.CharField(max_length=64, blank=True, null=True)
+
+    class Meta:
+        app_label = 'myapp'
+
+# Define the callback
+def all_required(field, **kwargs):
+    formfield = field.formfield(**kwargs)
+    formfield.required = True
+    return formfield
+
+# Define the form
+class MyForm(forms.ModelForm):
+    formfield_callback = all_required
+    class Meta:
+        model = MyModel
+        formfield_callback = all_required
+        fields = ['active', 'name']
+
+# Create the factory form
+FactoryForm = forms.modelform_factory(MyModel, form=MyForm)
+
+# Test the forms
+base_form = MyForm()
+factory_form = FactoryForm()
+
+print("Base form field requirements:")
+print(f"active: {base_form.fields['active'].required}")
+print(f"name: {base_form.fields['name'].required}")
+
+print("\nFactory form field requirements:")
+print(f"active: {factory_form.fields['active'].required}")
+print(f"name: {factory_form.fields['name'].required}")
\ No newline at end of file
