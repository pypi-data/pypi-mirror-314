diff --git a/django/core/validators.py b/django/core/validators.py
index a385819510..c2ae1a1b01 100644
--- a/django/core/validators.py
+++ b/django/core/validators.py
@@ -101,6 +101,9 @@ class URLValidator(RegexValidator):
     def __call__(self, value):
         if not isinstance(value, str):
             raise ValidationError(self.message, code=self.code, params={'value': value})
+        # Check for forbidden characters early
+        if '\r' in value or '\n' in value or '\t' in value:
+            raise ValidationError(self.message, code=self.code, params={'value': value})
         # Check if the scheme is valid.
         scheme = value.split('://')[0].lower()
         if scheme not in self.schemes:
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..bc04777998
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,32 @@
+from django.core.validators import URLValidator
+from django.core.exceptions import ValidationError
+
+def test_url_validator():
+    validator = URLValidator()
+    
+    # Test cases from PR description and additional edge cases
+    test_cases = [
+        'http://www.djangoproject.com/\n',
+        'http://[::ffff:192.9.5.5]\n',
+        'http://example.com/\r',
+        'http://example.com/\t',
+        'http://example.com/\r\n',
+        'http://example.com/path\nwith/newline',
+        'http://example.com/path\twith/tab',
+        '\nhttp://example.com/',
+        '\thttp://example.com/',
+        'http://\nexample.com/',
+        'http://example\n.com/',
+        'http://example.com\n:8000/',
+        'http://user\n:pass@example.com'
+    ]
+    
+    for url in test_cases:
+        try:
+            validator(url)
+            print(f"FAIL: ValidationError not raised for {url!r}")
+        except ValidationError:
+            print(f"PASS: ValidationError correctly raised for {url!r}")
+
+if __name__ == '__main__':
+    test_url_validator()
\ No newline at end of file
