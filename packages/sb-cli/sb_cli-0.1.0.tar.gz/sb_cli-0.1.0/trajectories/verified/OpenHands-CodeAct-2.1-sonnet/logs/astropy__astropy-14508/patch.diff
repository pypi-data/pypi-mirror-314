diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py
index 118bfced89..ec2861870c 100644
--- a/astropy/io/fits/card.py
+++ b/astropy/io/fits/card.py
@@ -1299,10 +1299,18 @@ def _format_value(value):
 
 def _format_float(value):
     """Format a floating number to make sure it gets the decimal point."""
-    value_str = f"{value:.16G}"
+    # First try using Python's default string representation
+    value_str = str(value)
     if "." not in value_str and "E" not in value_str:
         value_str += ".0"
-    elif "E" in value_str:
+    
+    # If the string is too long for FITS (>20 chars), fall back to scientific notation
+    if len(value_str) > 20:
+        value_str = f"{value:.16G}"
+        if "." not in value_str and "E" not in value_str:
+            value_str += ".0"
+    
+    if "E" in value_str:
         # On some Windows builds of Python (and possibly other platforms?) the
         # exponent is zero-padded out to, it seems, three digits.  Normalize
         # the format to pad only to two digits.
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..f06934e80e
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,9 @@
+from astropy.io import fits
+
+# Create a card with the same values as in the example
+c = fits.Card('HIERARCH ESO IFM CL RADIUS', 0.009125, '[m] radius arround actuator to avoid')
+
+print("Card representation:")
+print(repr(c))
+print("\nCard string:")
+print(str(c))
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..a8ebb2c3a8
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,31 @@
+from astropy.io import fits
+
+# Test cases:
+test_values = [
+    # Regular integers
+    42,
+    # Very large integers
+    1234567890123456789,
+    # Regular floats
+    3.14159,
+    # Very small floats
+    1.23456e-10,
+    # Very large floats
+    1.23456e20,
+    # Floats that need many decimal places for exact representation
+    1.0/3.0,
+    # Zero
+    0.0,
+    # Negative numbers
+    -42.5,
+    # Numbers that might be affected by floating point precision
+    0.1 + 0.2,  # famously equals 0.30000000000000004 in floating point
+]
+
+print("Testing edge cases:")
+print("-" * 80)
+
+for value in test_values:
+    c = fits.Card('TEST', value, 'Test comment')
+    print(f"\nValue: {value}")
+    print(f"Card: {str(c)}")
\ No newline at end of file
