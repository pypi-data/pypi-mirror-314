diff --git a/reproduce_gm_issue.py b/reproduce_gm_issue.py
new file mode 100644
index 000000000..477c32f5e
--- /dev/null
+++ b/reproduce_gm_issue.py
@@ -0,0 +1,21 @@
+from sklearn.mixture import GaussianMixture
+import numpy as np
+from sklearn.utils.testing import assert_array_equal
+
+# Set random seed for reproducibility
+np.random.seed(42)
+
+# Generate random data
+X = np.random.randn(1000, 5)
+
+print('no n_init')
+gm = GaussianMixture(n_components=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
+
+print('n_init=5')
+gm = GaussianMixture(n_components=5, n_init=5)
+c1 = gm.fit_predict(X)
+c2 = gm.predict(X)
+assert_array_equal(c1, c2)
\ No newline at end of file
diff --git a/sklearn/mixture/base.py b/sklearn/mixture/base.py
index bd34333c0..236822f91 100644
--- a/sklearn/mixture/base.py
+++ b/sklearn/mixture/base.py
@@ -257,11 +257,6 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
                 best_params = self._get_parameters()
                 best_n_iter = n_iter
 
-        # Always do a final e-step to guarantee that the labels returned by
-        # fit_predict(X) are always consistent with fit(X).predict(X)
-        # for any value of max_iter and tol (and any random_state).
-        _, log_resp = self._e_step(X)
-
         if not self.converged_:
             warnings.warn('Initialization %d did not converge. '
                           'Try different init parameters, '
@@ -273,6 +268,9 @@ class BaseMixture(DensityMixin, BaseEstimator, metaclass=ABCMeta):
         self.n_iter_ = best_n_iter
         self.lower_bound_ = max_lower_bound
 
+        # Do a final e-step with the best parameters to ensure consistency
+        # between fit_predict(X) and fit(X).predict(X)
+        _, log_resp = self._e_step(X)
         return log_resp.argmax(axis=1)
 
     def _e_step(self, X):
