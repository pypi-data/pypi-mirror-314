diff --git a/astropy/utils/introspection.py b/astropy/utils/introspection.py
index 3e784f9fc3..eb95a086a1 100644
--- a/astropy/utils/introspection.py
+++ b/astropy/utils/introspection.py
@@ -6,7 +6,7 @@
 import inspect
 import types
 import importlib
-from distutils.version import LooseVersion
+from pkg_resources import parse_version
 
 
 __all__ = ['resolve_name', 'minversion', 'find_current_module',
@@ -140,9 +140,9 @@ def minversion(module, version, inclusive=True, version_path='__version__'):
         have_version = resolve_name(module.__name__, version_path)
 
     if inclusive:
-        return LooseVersion(have_version) >= LooseVersion(version)
+        return parse_version(have_version) >= parse_version(version)
     else:
-        return LooseVersion(have_version) > LooseVersion(version)
+        return parse_version(have_version) > parse_version(version)
 
 
 def find_current_module(depth=1, finddiff=False):
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..7b98f577f9
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,22 @@
+from astropy.utils import minversion
+
+print("Testing minversion with '1.14dev':")
+try:
+    result = minversion('numpy', '1.14dev')
+    print(f"Result: {result}")
+except TypeError as e:
+    print(f"TypeError: {e}")
+
+print("\nTesting minversion with '1.14':")
+try:
+    result = minversion('numpy', '1.14')
+    print(f"Result: {result}")
+except TypeError as e:
+    print(f"TypeError: {e}")
+
+print("\nTesting minversion with '1.14.3':")
+try:
+    result = minversion('numpy', '1.14.3')
+    print(f"Result: {result}")
+except TypeError as e:
+    print(f"TypeError: {e}")
\ No newline at end of file
diff --git a/reproduce_error_2.py b/reproduce_error_2.py
new file mode 100644
index 0000000000..2ce53305f4
--- /dev/null
+++ b/reproduce_error_2.py
@@ -0,0 +1,22 @@
+from distutils.version import LooseVersion
+from pkg_resources import parse_version
+
+def test_version_comparison(v1, v2):
+    print(f"\nTesting {v1} vs {v2}:")
+    print("Using LooseVersion:")
+    try:
+        result = LooseVersion(v1) >= LooseVersion(v2)
+        print(f"Result: {result}")
+    except TypeError as e:
+        print(f"TypeError: {e}")
+    
+    print("Using parse_version:")
+    try:
+        result = parse_version(v1) >= parse_version(v2)
+        print(f"Result: {result}")
+    except TypeError as e:
+        print(f"TypeError: {e}")
+
+test_version_comparison('1.14.3', '1.14dev')
+test_version_comparison('1.14', '1.14dev')
+test_version_comparison('1.14dev', '1.14')
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..85c5638734
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,20 @@
+from astropy.utils import minversion
+
+def test_version(module_version, required_version, inclusive=True):
+    print(f"\nTesting {module_version} {'â‰¥' if inclusive else '>'} {required_version}:")
+    try:
+        result = minversion('numpy', required_version, inclusive=inclusive)
+        print(f"Result: {result}")
+    except Exception as e:
+        print(f"Error: {type(e).__name__}: {e}")
+
+# Test various version formats
+test_version('1.14.3', '1.14dev')  # Mix of numbers and dev
+test_version('1.14dev', '1.14')    # Dev vs release
+test_version('1.14.3', '1.14.3')   # Exact match
+test_version('1.14.3', '1.14.3', inclusive=False)  # Strict comparison
+test_version('1.14alpha1', '1.14beta1')  # Alpha vs beta
+test_version('1.14.3.dev0', '1.14.3')  # Dev suffix
+test_version('1.14rc1', '1.14')  # Release candidate
+test_version('1.14.post1', '1.14')  # Post-release
+test_version('1.14+local.1', '1.14')  # Local version
\ No newline at end of file
