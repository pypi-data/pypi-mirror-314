diff --git a/edge_cases.svg b/edge_cases.svg
new file mode 100644
index 0000000000..50d7a34a5c
Binary files /dev/null and b/edge_cases.svg differ
diff --git a/example.svg b/example.svg
new file mode 100644
index 0000000000..52777539d9
Binary files /dev/null and b/example.svg differ
diff --git a/lib/matplotlib/offsetbox.py b/lib/matplotlib/offsetbox.py
index efa34dd078..9fbe772b7c 100644
--- a/lib/matplotlib/offsetbox.py
+++ b/lib/matplotlib/offsetbox.py
@@ -1453,6 +1453,15 @@ or callable, default: value of *xycoords*
         if not self.get_visible() or not self._check_xy(renderer):
             return
         self.update_positions(renderer)
+        
+        # Propagate gid to children
+        gid = self.get_gid()
+        if gid is not None:
+            # Set gid on the offsetbox and its image
+            self.offsetbox.set_gid(gid)
+            if isinstance(self.offsetbox, OffsetImage):
+                self.offsetbox.image.set_gid(gid)
+            
         if self.arrow_patch is not None:
             if self.arrow_patch.figure is None and self.figure is not None:
                 self.arrow_patch.figure = self.figure
diff --git a/reproduce_gid_issue.py b/reproduce_gid_issue.py
new file mode 100644
index 0000000000..d148a881c0
--- /dev/null
+++ b/reproduce_gid_issue.py
@@ -0,0 +1,36 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import OffsetImage, AnnotationBbox
+import numpy as np
+
+# Create a simple test image instead of loading from file
+arr_img = np.zeros((10, 10))  # 10x10 black square
+arr_img[2:8, 2:8] = 1  # Make center white
+
+fig, ax = plt.subplots()
+
+xy = [0.3, 0.55]
+
+imagebox = OffsetImage(arr_img, zoom=2)
+imagebox.image.axes = ax
+
+ab = AnnotationBbox(imagebox, xy,
+                   xybox=(120., -80.),
+                   xycoords='data',
+                   boxcoords="offset points",
+                   pad=0.5,
+                   arrowprops=dict(
+                       arrowstyle="->",
+                       connectionstyle="angle,angleA=0,angleB=90,rad=3")
+                   )
+ab.set_gid('My_label')
+ax.add_artist(ab)
+
+print(f"GID = {ab.get_gid()}")
+
+# Save as SVG and print its contents to verify if gid is present
+fig.savefig("example.svg", format="svg")
+
+with open("example.svg", "r") as f:
+    svg_content = f.read()
+    print("\nSVG content:")
+    print(svg_content)
\ No newline at end of file
diff --git a/test_gid_edge_cases.py b/test_gid_edge_cases.py
new file mode 100644
index 0000000000..9987d9e9a4
--- /dev/null
+++ b/test_gid_edge_cases.py
@@ -0,0 +1,42 @@
+import matplotlib.pyplot as plt
+from matplotlib.offsetbox import OffsetImage, AnnotationBbox, TextArea
+import numpy as np
+
+# Create a figure with multiple test cases
+fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(15, 5))
+
+# Test case 1: No gid set
+arr_img1 = np.zeros((10, 10))
+arr_img1[2:8, 2:8] = 1
+imagebox1 = OffsetImage(arr_img1, zoom=2)
+imagebox1.image.axes = ax1
+ab1 = AnnotationBbox(imagebox1, (0.5, 0.5))
+ax1.add_artist(ab1)
+ax1.set_title('No GID')
+
+# Test case 2: TextArea instead of OffsetImage
+text_box = TextArea("Test Text")
+ab2 = AnnotationBbox(text_box, (0.5, 0.5))
+ab2.set_gid('text_gid')
+ax2.add_artist(ab2)
+ax2.set_title('TextArea with GID')
+
+# Test case 3: Change GID after creation
+arr_img3 = np.zeros((10, 10))
+arr_img3[2:8, 2:8] = 1
+imagebox3 = OffsetImage(arr_img3, zoom=2)
+imagebox3.image.axes = ax3
+ab3 = AnnotationBbox(imagebox3, (0.5, 0.5))
+ax3.add_artist(ab3)
+ab3.set_gid('changed_gid')  # Set GID after creation
+ax3.set_title('Changed GID')
+
+plt.tight_layout()
+
+# Save as SVG and print its contents to verify gids
+fig.savefig("edge_cases.svg", format="svg")
+
+with open("edge_cases.svg", "r") as f:
+    svg_content = f.read()
+    print("\nSVG content:")
+    print(svg_content)
\ No newline at end of file
