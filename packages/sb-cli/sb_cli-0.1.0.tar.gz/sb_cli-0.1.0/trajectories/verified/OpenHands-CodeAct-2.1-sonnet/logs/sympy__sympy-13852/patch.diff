diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..295e386b3e
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,32 @@
+from sympy import polylog, expand_func, Rational, nsimplify, pi, log, diff, exp_polar, I, Symbol
+z = Symbol('z')
+
+# Test case 1: polylog(2, 1/2) expansion
+expr1 = polylog(2, Rational(1,2))
+print("Original expression:", expr1)
+expanded1 = expand_func(expr1)
+print("Expanded expression:", expanded1)
+print("Expected: -log(2)**2/2 + pi**2/12")
+print()
+
+# Test case 2: polylog(1, z) expansion
+expr2 = polylog(1, z)
+print("Original expression:", expr2)
+expanded2 = expand_func(expr2)
+print("Expanded expression:", expanded2)
+print("Expected: -log(1-z)")
+
+# Test derivative consistency
+deriv = diff(polylog(1, z) + log(1 - z), z)
+print("\nDerivative of polylog(1,z) + log(1-z):", expand_func(deriv))
+
+# Test derivative consistency with expand_func
+deriv2 = diff(polylog(1, z) - expand_func(polylog(1, z)), z)
+print("\nDerivative consistency test:", expand_func(deriv2))
+
+# Test edge cases
+print("\nEdge cases:")
+print("polylog(0, z):", expand_func(polylog(0, z)))  # Should be z/(1-z)
+print("polylog(-1, z):", expand_func(polylog(-1, z)))  # Should be z/(z-1)**2
+print("polylog(1, 1):", expand_func(polylog(1, 1)))  # Should be zeta(1) = oo
+print("polylog(2, 1):", expand_func(polylog(2, 1)))  # Should be zeta(2) = pi**2/6
\ No newline at end of file
diff --git a/sympy/functions/special/zeta_functions.py b/sympy/functions/special/zeta_functions.py
index b8e2b66195..1c96a4cc81 100644
--- a/sympy/functions/special/zeta_functions.py
+++ b/sympy/functions/special/zeta_functions.py
@@ -288,10 +288,12 @@ def _eval_rewrite_as_lerchphi(self, s, z):
         return z*lerchphi(z, s, 1)
 
     def _eval_expand_func(self, **hints):
-        from sympy import log, expand_mul, Dummy, exp_polar, I
+        from sympy import log, expand_mul, Dummy, exp_polar, I, pi, Rational
         s, z = self.args
         if s == 1:
-            return -log(1 + exp_polar(-I*pi)*z)
+            return -log(1 - z)
+        if s == 2 and z == Rational(1, 2):
+            return -log(2)**2/2 + pi**2/12
         if s.is_Integer and s <= 0:
             u = Dummy('u')
             start = u/(1 - u)
