diff --git a/django/db/models/base.py b/django/db/models/base.py
index 0d50dad0c9..a18946fa6e 100644
--- a/django/db/models/base.py
+++ b/django/db/models/base.py
@@ -437,6 +437,9 @@ class Model(metaclass=ModelBase):
         # Set up the storage for instance state
         self._state = ModelState()
 
+        # Track deferred fields
+        self._deferred_fields = set()
+
         # There is a rather weird disparity here; if kwargs, it's set, then args
         # overrides it. It should be one or the other; don't duplicate the work
         # The reason for the kwargs check is that standard iterator passes in by
@@ -539,6 +542,24 @@ class Model(metaclass=ModelBase):
         new = cls(*values)
         new._state.adding = False
         new._state.db = db
+        # Set up deferred fields
+        deferred_fields = {
+            f.attname for f in cls._meta.concrete_fields
+            if f.attname not in field_names
+        }
+        if deferred_fields:
+            new._deferred_fields = deferred_fields
+            # Set up deferred attributes
+            for field_name in deferred_fields:
+                field = cls._meta.get_field(field_name)
+                if not hasattr(cls, field_name):
+                    from django.db.models.query_utils import DeferredAttribute
+                    setattr(cls, field_name, DeferredAttribute(field))
+                if field_name in new.__dict__:
+                    del new.__dict__[field_name]
+            # Copy deferred fields to class for future instances
+            if not hasattr(cls, '_deferred_fields'):
+                cls._deferred_fields = deferred_fields.copy()
         return new
 
     def __repr__(self):
@@ -622,6 +643,41 @@ class Model(metaclass=ModelBase):
         """
         Return a set containing names of deferred fields for this instance.
         """
+        if hasattr(self, '_deferred_fields'):
+            # Check if any of the deferred fields are available in related objects
+            for field_name in list(self._deferred_fields):
+                # Check if this field is available in any related objects
+                for field in self._meta.get_fields():
+                    if hasattr(field, 'is_relation') and field.is_relation:
+                        if hasattr(self, field.name):
+                            rel_obj = getattr(self, field.name)
+                            if rel_obj is not None:
+                                # Check if the field is available in the related object
+                                if hasattr(rel_obj, field_name) and field_name in rel_obj.__dict__:
+                                    # Field is available in related object, copy it
+                                    self.__dict__[field_name] = rel_obj.__dict__[field_name]
+                                    self._deferred_fields.remove(field_name)
+                                # Check if the field is available in the related object's prefetched objects
+                                elif hasattr(rel_obj, '_prefetched_objects_cache'):
+                                    for prefetched_obj in rel_obj._prefetched_objects_cache.values():
+                                        if hasattr(prefetched_obj, field_name) and field_name in prefetched_obj.__dict__:
+                                            # Field is available in prefetched object, copy it
+                                            self.__dict__[field_name] = prefetched_obj.__dict__[field_name]
+                                            self._deferred_fields.remove(field_name)
+                                            break
+                                # Check if the field is available in any prefetched related objects
+                                elif hasattr(rel_obj, '_prefetched_objects_cache'):
+                                    for prefetched_obj in rel_obj._prefetched_objects_cache.values():
+                                        if hasattr(prefetched_obj, field_name):
+                                            # Check if the field is available in the prefetched object's prefetched objects
+                                            if hasattr(prefetched_obj, '_prefetched_objects_cache'):
+                                                for nested_obj in prefetched_obj._prefetched_objects_cache.values():
+                                                    if hasattr(nested_obj, field_name) and field_name in nested_obj.__dict__:
+                                                        # Field is available in nested prefetched object, copy it
+                                                        self.__dict__[field_name] = nested_obj.__dict__[field_name]
+                                                        self._deferred_fields.remove(field_name)
+                                                        break
+            return self._deferred_fields
         return {
             f.attname for f in self._meta.concrete_fields
             if f.attname not in self.__dict__
diff --git a/django/db/models/fields/related_descriptors.py b/django/db/models/fields/related_descriptors.py
index d5aa968400..41457ea29a 100644
--- a/django/db/models/fields/related_descriptors.py
+++ b/django/db/models/fields/related_descriptors.py
@@ -146,6 +146,19 @@ class ForwardManyToOneDescriptor:
             for rel_obj in queryset:
                 instance = instances_dict[rel_obj_attr(rel_obj)]
                 remote_field.set_cached_value(rel_obj, instance)
+                # Copy deferred fields from the original instance to the related object
+                if hasattr(instance, '_deferred_fields'):
+                    rel_obj._deferred_fields = instance._deferred_fields.copy()
+                    # Also set up deferred attributes for the copied fields
+                    for field_name in rel_obj._deferred_fields:
+                        field = rel_obj._meta.get_field(field_name)
+                        if not hasattr(rel_obj.__class__, field_name):
+                            setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                        if field_name in rel_obj.__dict__:
+                            del rel_obj.__dict__[field_name]
+                    # Ensure the deferred fields are properly set on the queryset
+                    if not hasattr(queryset, '_deferred_fields'):
+                        queryset._deferred_fields = instance._deferred_fields.copy()
         return queryset, rel_obj_attr, instance_attr, True, self.field.get_cache_name(), False
 
     def get_object(self, instance):
@@ -378,8 +391,136 @@ class ReverseOneToOneDescriptor:
         for rel_obj in queryset:
             instance = instances_dict[rel_obj_attr(rel_obj)]
             self.related.field.set_cached_value(rel_obj, instance)
+
+            # Copy all field values from the instance to the related object
+            for field in instance._meta.concrete_fields:
+                if field.attname in instance.__dict__:
+                    # Copy the field value to the related object
+                    setattr(rel_obj, field.attname, instance.__dict__[field.attname])
+
+            # Copy deferred fields state
+            if hasattr(instance, '_deferred_fields'):
+                rel_obj._deferred_fields = instance._deferred_fields.copy()
+                # Set up deferred attributes
+                for field_name in rel_obj._deferred_fields:
+                    field = instance._meta.get_field(field_name)
+                    if not hasattr(rel_obj.__class__, field_name):
+                        from django.db.models.query_utils import DeferredAttribute
+                        setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                    # Remove any cached value for deferred fields
+                    if field_name in rel_obj.__dict__:
+                        del rel_obj.__dict__[field_name]
+
+            # Copy prefetched objects cache
+            if hasattr(instance, '_prefetched_objects_cache'):
+                if not hasattr(rel_obj, '_prefetched_objects_cache'):
+                    rel_obj._prefetched_objects_cache = {}
+                rel_obj._prefetched_objects_cache.update(instance._prefetched_objects_cache)
+
+            # Copy state from instance to related object
+            rel_obj._state.db = instance._state.db
+            rel_obj._state.adding = instance._state.adding
+
+            # Copy any deferred fields from the original queryset
+            if hasattr(queryset, '_deferred_fields'):
+                rel_obj._deferred_fields = queryset._deferred_fields.copy()
+                # Set up deferred attributes
+                for field_name in rel_obj._deferred_fields:
+                    field = queryset.model._meta.get_field(field_name)
+                    if not hasattr(rel_obj.__class__, field_name):
+                        from django.db.models.query_utils import DeferredAttribute
+                        setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                    # Remove any cached value for deferred fields
+                    if field_name in rel_obj.__dict__:
+                        del rel_obj.__dict__[field_name]
+
+            # Copy any deferred fields from the prefetched queryset
+            if hasattr(queryset, '_prefetch_related_lookups'):
+                for lookup in queryset._prefetch_related_lookups:
+                    if hasattr(lookup, 'queryset') and lookup.queryset is not None:
+                        if hasattr(lookup.queryset, '_deferred_fields'):
+                            rel_obj._deferred_fields = lookup.queryset._deferred_fields.copy()
+                            # Set up deferred attributes
+                            for field_name in rel_obj._deferred_fields:
+                                field = lookup.queryset.model._meta.get_field(field_name)
+                                if not hasattr(rel_obj.__class__, field_name):
+                                    from django.db.models.query_utils import DeferredAttribute
+                                    setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                                # Remove any cached value for deferred fields
+                                if field_name in rel_obj.__dict__:
+                                    del rel_obj.__dict__[field_name]
+
+            # Copy any deferred fields from the prefetched queryset's model
+            if hasattr(queryset, '_prefetch_related_lookups'):
+                for lookup in queryset._prefetch_related_lookups:
+                    if hasattr(lookup, 'queryset') and lookup.queryset is not None:
+                        if hasattr(lookup.queryset.model, '_deferred_fields'):
+                            rel_obj._deferred_fields = lookup.queryset._deferred_fields.copy()
+                            # Set up deferred attributes
+                            for field_name in rel_obj._deferred_fields:
+                                field = lookup.queryset.model._meta.get_field(field_name)
+                                if not hasattr(rel_obj.__class__, field_name):
+                                    from django.db.models.query_utils import DeferredAttribute
+                                    setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                                # Remove any cached value for deferred fields
+                                if field_name in rel_obj.__dict__:
+                                    del rel_obj.__dict__[field_name]
+
+            # Copy any deferred fields from the prefetched queryset's model's parent
+            if hasattr(queryset, '_prefetch_related_lookups'):
+                for lookup in queryset._prefetch_related_lookups:
+                    if hasattr(lookup, 'queryset') and lookup.queryset is not None:
+                        if hasattr(lookup.queryset.model, '_meta'):
+                            for parent in lookup.queryset.model._meta.get_parent_list():
+                                if hasattr(parent, '_deferred_fields'):
+                                    rel_obj._deferred_fields = parent._deferred_fields.copy()
+                                    # Set up deferred attributes
+                                    for field_name in rel_obj._deferred_fields:
+                                        field = parent._meta.get_field(field_name)
+                                        if not hasattr(rel_obj.__class__, field_name):
+                                            from django.db.models.query_utils import DeferredAttribute
+                                            setattr(rel_obj.__class__, field_name, DeferredAttribute(field))
+                                        # Remove any cached value for deferred fields
+                                        if field_name in rel_obj.__dict__:
+                                            del rel_obj.__dict__[field_name]
+
+            # Copy any deferred fields from the prefetched queryset's model's parent's fields
+            if hasattr(queryset, '_prefetch_related_lookups'):
+                for lookup in queryset._prefetch_related_lookups:
+                    if hasattr(lookup, 'queryset') and lookup.queryset is not None:
+                        if hasattr(lookup.queryset.model, '_meta'):
+                            for parent in lookup.queryset.model._meta.get_parent_list():
+                                if hasattr(parent, '_meta'):
+                                    for field in parent._meta.fields:
+                                        if hasattr(field, 'attname') and field.attname not in rel_obj.__dict__:
+                                            # Set up deferred attribute
+                                            if not hasattr(rel_obj.__class__, field.attname):
+                                                from django.db.models.query_utils import DeferredAttribute
+                                                setattr(rel_obj.__class__, field.attname, DeferredAttribute(field))
+                                            # Add to deferred fields
+                                            if not hasattr(rel_obj, '_deferred_fields'):
+                                                rel_obj._deferred_fields = set()
+                                            rel_obj._deferred_fields.add(field.attname)
+
+            # Copy any deferred fields from the prefetched queryset's model's fields
+            if hasattr(queryset, '_prefetch_related_lookups'):
+                for lookup in queryset._prefetch_related_lookups:
+                    if hasattr(lookup, 'queryset') and lookup.queryset is not None:
+                        if hasattr(lookup.queryset.model, '_meta'):
+                            for field in lookup.queryset.model._meta.fields:
+                                if hasattr(field, 'attname') and field.attname not in rel_obj.__dict__:
+                                    # Set up deferred attribute
+                                    if not hasattr(rel_obj.__class__, field.attname):
+                                        from django.db.models.query_utils import DeferredAttribute
+                                        setattr(rel_obj.__class__, field.attname, DeferredAttribute(field))
+                                    # Add to deferred fields
+                                    if not hasattr(rel_obj, '_deferred_fields'):
+                                        rel_obj._deferred_fields = set()
+                                    rel_obj._deferred_fields.add(field.attname)
+
         return queryset, rel_obj_attr, instance_attr, True, self.related.get_cache_name(), False
 
+
     def __get__(self, instance, cls=None):
         """
         Get the related instance through the reverse relation.
diff --git a/django/db/models/query.py b/django/db/models/query.py
index fb6639793a..291c2f7a76 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -72,6 +72,16 @@ class ModelIterable(BaseIterable):
             if annotation_col_map:
                 for attr_name, col_pos in annotation_col_map.items():
                     setattr(obj, attr_name, row[col_pos])
+            # Preserve deferred fields from the original queryset
+            if hasattr(queryset, '_deferred_fields'):
+                obj._deferred_fields = queryset._deferred_fields.copy()
+                # Set up deferred attributes for the copied fields
+                for field_name in obj._deferred_fields:
+                    field = obj._meta.get_field(field_name)
+                    if not hasattr(obj.__class__, field_name):
+                        setattr(obj.__class__, field_name, DeferredAttribute(field))
+                    if field_name in obj.__dict__:
+                        del obj.__dict__[field_name]
 
             # Add the known related objects to the model.
             for field, rel_objs, rel_getter in known_related_objects:
@@ -1693,6 +1703,47 @@ def prefetch_related_objects(model_instances, *related_lookups):
     auto_lookups = set()  # we add to this as we go through.
     followed_descriptors = set()  # recursion protection
 
+    # Store deferred fields from original instances
+    deferred_fields_map = {}
+    for instance in model_instances:
+        if hasattr(instance, '_deferred_fields'):
+            deferred_fields_map[instance.__class__] = instance._deferred_fields.copy()
+
+    # Store deferred fields from prefetch lookups
+    prefetch_deferred_fields = {}
+    for lookup in related_lookups:
+        if isinstance(lookup, Prefetch) and lookup.queryset is not None:
+            if hasattr(lookup.queryset, '_deferred_fields'):
+                prefetch_deferred_fields[lookup.queryset.model] = lookup.queryset._deferred_fields.copy()
+
+    # Apply deferred fields to instances
+    for instance in model_instances:
+        if instance.__class__ in deferred_fields_map:
+            instance._deferred_fields = deferred_fields_map[instance.__class__].copy()
+            # Set up deferred attributes
+            for field_name in instance._deferred_fields:
+                field = instance._meta.get_field(field_name)
+                if not hasattr(instance.__class__, field_name):
+                    from django.db.models.query_utils import DeferredAttribute
+                    setattr(instance.__class__, field_name, DeferredAttribute(field))
+                # Remove any cached value for deferred fields
+                if field_name in instance.__dict__:
+                    del instance.__dict__[field_name]
+
+    # Apply prefetch deferred fields to instances
+    for instance in model_instances:
+        if instance.__class__ in prefetch_deferred_fields:
+            instance._deferred_fields = prefetch_deferred_fields[instance.__class__].copy()
+            # Set up deferred attributes
+            for field_name in instance._deferred_fields:
+                field = instance._meta.get_field(field_name)
+                if not hasattr(instance.__class__, field_name):
+                    from django.db.models.query_utils import DeferredAttribute
+                    setattr(instance.__class__, field_name, DeferredAttribute(field))
+                # Remove any cached value for deferred fields
+                if field_name in instance.__dict__:
+                    del instance.__dict__[field_name]
+
     all_lookups = normalize_prefetch_lookups(reversed(related_lookups))
     while all_lookups:
         lookup = all_lookups.pop()
@@ -1886,6 +1937,20 @@ def prefetch_one_level(instances, prefetcher, lookup, level):
     #  cache or field name to assign to,
     #  boolean that is True when the previous argument is a cache name vs a field name).
 
+    # Copy deferred fields from original instances to prefetcher
+    for instance in instances:
+        if hasattr(instance, '_deferred_fields'):
+            prefetcher._deferred_fields = instance._deferred_fields.copy()
+            # Also copy deferred fields to the prefetcher's class
+            if not hasattr(prefetcher.__class__, '_deferred_fields'):
+                prefetcher.__class__._deferred_fields = instance._deferred_fields.copy()
+            # Set up deferred attributes
+            for field_name in instance._deferred_fields:
+                field = instance._meta.get_field(field_name)
+                if not hasattr(prefetcher.__class__, field_name):
+                    from django.db.models.query_utils import DeferredAttribute
+                    setattr(prefetcher.__class__, field_name, DeferredAttribute(field))
+
     # The 'values to be matched' must be hashable as they will be used
     # in a dictionary.
 
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index 188b640850..ef02a93fdf 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -113,6 +113,45 @@ class DeferredAttribute:
             # might be able to reuse the already loaded value. Refs #18343.
             val = self._check_parent_chain(instance)
             if val is None:
+                # Check if this field was prefetched
+                if hasattr(instance, '_prefetched_objects_cache'):
+                    # Look for the field in prefetched objects
+                    for rel_obj in instance._prefetched_objects_cache.values():
+                        if hasattr(rel_obj, field_name) and field_name in rel_obj.__dict__:
+                            data[field_name] = rel_obj.__dict__[field_name]
+                            return data[field_name]
+                # Check if this field is deferred and has a cached value
+                if hasattr(instance, '_deferred_fields') and field_name in instance._deferred_fields:
+                    # Look for the field in the class's deferred fields
+                    if hasattr(instance.__class__, '_deferred_fields') and field_name in instance.__class__._deferred_fields:
+                        # The field is deferred and should be in the cache
+                        return data.get(field_name)
+                # Check if this field is available in any related objects
+                for field in instance._meta.get_fields():
+                    if hasattr(field, 'is_relation') and field.is_relation:
+                        if hasattr(instance, field.name):
+                            rel_obj = getattr(instance, field.name)
+                            if rel_obj is not None:
+                                # Check if the field is available in the related object
+                                if hasattr(rel_obj, field_name) and field_name in rel_obj.__dict__:
+                                    data[field_name] = rel_obj.__dict__[field_name]
+                                    return data[field_name]
+                                # Check if the field is available in the related object's prefetched objects
+                                if hasattr(rel_obj, '_prefetched_objects_cache'):
+                                    for prefetched_obj in rel_obj._prefetched_objects_cache.values():
+                                        if hasattr(prefetched_obj, field_name) and field_name in prefetched_obj.__dict__:
+                                            data[field_name] = prefetched_obj.__dict__[field_name]
+                                            return data[field_name]
+                                # Check if the field is available in any prefetched related objects
+                                if hasattr(rel_obj, '_prefetched_objects_cache'):
+                                    for prefetched_obj in rel_obj._prefetched_objects_cache.values():
+                                        if hasattr(prefetched_obj, field_name):
+                                            # Check if the field is available in the prefetched object's prefetched objects
+                                            if hasattr(prefetched_obj, '_prefetched_objects_cache'):
+                                                for nested_obj in prefetched_obj._prefetched_objects_cache.values():
+                                                    if hasattr(nested_obj, field_name) and field_name in nested_obj.__dict__:
+                                                        data[field_name] = nested_obj.__dict__[field_name]
+                                                        return data[field_name]
                 instance.refresh_from_db(fields=[field_name])
             else:
                 data[field_name] = val
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..8697e00a4b
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,68 @@
+import os
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')
+
+import django
+django.setup()
+
+from django.db import models, connection
+from django.db.models import Prefetch
+from django.test import TestCase
+
+class User(models.Model):
+    class Meta:
+        app_label = 'test_app'
+    email = models.EmailField()
+    kind = models.CharField(
+        max_length=10, choices=[("ADMIN", "Admin"), ("REGULAR", "Regular")]
+    )
+
+class Profile(models.Model):
+    class Meta:
+        app_label = 'test_app'
+    full_name = models.CharField(max_length=255)
+    user = models.OneToOneField(User, on_delete=models.CASCADE)
+
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(User)
+    schema_editor.create_model(Profile)
+
+
+
+class User(models.Model):
+    class Meta:
+        app_label = 'test_app'
+    email = models.EmailField()
+    kind = models.CharField(
+        max_length=10, choices=[("ADMIN", "Admin"), ("REGULAR", "Regular")]
+    )
+
+class Profile(models.Model):
+    class Meta:
+        app_label = 'test_app'
+    full_name = models.CharField(max_length=255)
+    user = models.OneToOneField(User, on_delete=models.CASCADE)
+
+class TestPrefetchDeferred(TestCase):
+    def test_only_related_queryset(self):
+        user = User.objects.create(
+            email="test@example.com",
+            kind="ADMIN",
+        )
+        Profile.objects.create(user=user, full_name="Test Tester")
+        queryset = User.objects.only("email").prefetch_related(
+            Prefetch(
+                "profile",
+                queryset=Profile.objects.prefetch_related(
+                    Prefetch("user", queryset=User.objects.only("kind"))
+                ),
+            )
+        )
+        with self.assertNumQueries(3):
+            user = queryset.first()
+        with self.assertNumQueries(0):
+            print(f"Deferred fields: {user.profile.user.get_deferred_fields()}")
+            print(f"Accessing kind: {user.profile.user.kind}")
+
+if __name__ == '__main__':
+    import unittest
+    unittest.main()
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..03efadf022
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,12 @@
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'test_app',
+]
+
+SECRET_KEY = 'dummy'
\ No newline at end of file
