diff --git a/sympy/sets/handlers/issubset.py b/sympy/sets/handlers/issubset.py
index fdca06025a..6975ac7857 100644
--- a/sympy/sets/handlers/issubset.py
+++ b/sympy/sets/handlers/issubset.py
@@ -1,9 +1,11 @@
 from sympy import S, Symbol
 from sympy.core.logic import fuzzy_and, fuzzy_bool, fuzzy_not, fuzzy_or
 from sympy.core.relational import Eq
-from sympy.sets.sets import FiniteSet, Interval, Set, Union
+from sympy.core.containers import Tuple
+from sympy.sets.sets import FiniteSet, Interval, Set, Union, ProductSet
 from sympy.sets.fancysets import Complexes, Reals, Range, Rationals
 from sympy.multipledispatch import dispatch
+import itertools
 
 
 _inf_sets = [S.Naturals, S.Naturals0, S.Integers, S.Rationals, S.Reals, S.Complexes]
@@ -133,3 +135,47 @@ def is_subset_sets(a, b): # noqa:F811
 @dispatch(Rationals, Range)  # type: ignore # noqa:F811
 def is_subset_sets(a, b): # noqa:F811
     return False
+
+@dispatch(ProductSet, FiniteSet)  # type: ignore # noqa:F811
+def is_subset_sets(a_product, b_finite): # noqa:F811
+    # A ProductSet can only be a subset of a FiniteSet if all its elements are in the FiniteSet
+    # First check if all elements in b_finite are tuples of the right length
+    if not all(isinstance(x, tuple) and len(x) == len(a_product.sets) for x in b_finite):
+        return False
+    
+    # For each component set in the product set, get its elements
+    component_elements = []
+    for s in a_product.sets:
+        if not s.is_finite_set:
+            return None  # Can't determine if infinite set is subset
+        component_elements.append(list(s))
+    
+    # Check if each combination from the product set is in the finite set
+    for elements in itertools.product(*component_elements):
+        if elements not in b_finite:
+            return False
+    return True
+
+@dispatch(FiniteSet, ProductSet)  # type: ignore # noqa:F811
+def is_subset_sets(a_finite, b_product): # noqa:F811
+    # A FiniteSet can only be a subset of a ProductSet if all its elements are tuples
+    # of the right length and are contained in the ProductSet
+    if not all(isinstance(x, tuple) and len(x) == len(b_product.sets) for x in a_finite):
+        return False
+    
+    # For each element in a_finite, check if it's in the product set
+    for elem in a_finite:
+        # Convert tuple to Tuple since that's what ProductSet._contains expects
+        elem = Tuple(*elem)
+        if not b_product._contains(elem):
+            return False
+    return True
+
+@dispatch(ProductSet, ProductSet)  # type: ignore # noqa:F811
+def is_subset_sets(a_product, b_product): # noqa:F811
+    # Two ProductSets can only be subsets if they have the same number of sets
+    if len(a_product.sets) != len(b_product.sets):
+        return False
+    
+    # Each component set of a must be a subset of the corresponding component set of b
+    return fuzzy_and(s1.is_subset(s2) for s1, s2 in zip(a_product.sets, b_product.sets))
diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 3c4aa86e36..a8cfc5751c 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -26,6 +26,7 @@
 from sympy.utilities.iterables import iproduct, sift, roundrobin
 from sympy.utilities.misc import func_name, filldedent
 from mpmath import mpi, mpf
+import itertools
 
 
 tfn = defaultdict(lambda: None, {
@@ -392,8 +393,10 @@ def is_subset(self, other):
         # XXX: We shouldn't do this. A query like this should be handled
         # without evaluating new Set objects. It should be the other way round
         # so that the intersect method uses is_subset for evaluation.
-        if self.intersect(other) == self:
+        intersection = self.intersect(other)
+        if intersection == self:
             return True
+        return None
 
     def _eval_is_subset(self, other):
         '''Returns a fuzzy bool for whether self is a subset of other.'''
@@ -775,6 +778,152 @@ def _flatten(sets):
                     yield s
         return ProductSet(*_flatten(self.sets))
 
+    def _eval_is_subset(self, other):
+        """Return True if self is a subset of other, False if it is not, or None if undecidable."""
+        if isinstance(other, FiniteSet):
+            # If other is a FiniteSet, we can check if all elements in self are in other
+            # First check if all elements in other are tuples of the right length
+            if not all(isinstance(x, tuple) and len(x) == len(self.sets) for x in other):
+                return False
+            
+            # For each component set in self, get its elements
+            component_elements = []
+            for s in self.sets:
+                if not s.is_finite_set:
+                    return None  # Can't determine if infinite set is subset
+                component_elements.append(list(s))
+            
+            # Convert other's elements to Tuple for proper comparison
+            other_tuples = {Tuple(*x) for x in other}
+            
+            # Convert self's elements to a set of Tuples
+            self_tuples = {Tuple(*elements) for elements in itertools.product(*component_elements)}
+            
+            # Check if each element in self_tuples is in other_tuples
+            for elem in self_tuples:
+                found = False
+                for t in other_tuples:
+                    if all(fuzzy_bool(Eq(e1, e2, evaluate=True)) for e1, e2 in zip(elem, t)):
+                        found = True
+                        break
+                if not found:
+                    return False
+            return True
+        elif isinstance(other, ProductSet):
+            # Two ProductSets can only be subsets if they have the same number of sets
+            if len(self.sets) != len(other.sets):
+                return False
+            
+            # Each component set of self must be a subset of the corresponding component set of other
+            return fuzzy_and(s1.is_subset(s2) for s1, s2 in zip(self.sets, other.sets))
+        elif isinstance(other, Set):
+            # For any other type of Set, we can try to convert self to a FiniteSet
+            # and then check if it's a subset of other
+            if not all(s.is_finite_set for s in self.sets):
+                return None  # Can't determine if infinite set is subset
+            
+            # Convert self to a FiniteSet
+            self_elements = []
+            for elements in itertools.product(*[list(s) for s in self.sets]):
+                self_elements.append(Tuple(*elements))
+            self_finite = FiniteSet(*self_elements)
+            
+            # Now check if each element in self_finite is in other
+            for elem in self_elements:
+                if not fuzzy_bool(other._contains(elem)):
+                    return False
+            return True
+        return None
+
+    def _eval_is_superset(self, other):
+        """Return True if self is a superset of other, False if it is not, or None if undecidable."""
+        if isinstance(other, FiniteSet):
+            # If other is a FiniteSet, we can check if all elements in other are in self
+            # First check if all elements in other are tuples of the right length
+            if not all(isinstance(x, tuple) and len(x) == len(self.sets) for x in other):
+                return False
+            
+            # Convert other's elements to Tuple for proper comparison
+            other_tuples = {Tuple(*x) for x in other}
+            
+            # Check if each element in other_tuples is in self
+            for elem in other_tuples:
+                if not self._contains(elem):
+                    return False
+            return True
+        return None
+
+    def _eval_powerset(self):
+        """Return the power set of self."""
+        if not all(s.is_finite_set for s in self.sets):
+            return None  # Can't determine if infinite set
+        
+        # Convert self to a FiniteSet
+        self_elements = []
+        for elements in itertools.product(*[list(s) for s in self.sets]):
+            self_elements.append(Tuple(*elements))
+        self_finite = FiniteSet(*self_elements)
+        
+        # Return the power set of self_finite
+        return self_finite._eval_powerset()
+
+    def _contains(self, element):
+        """
+        'in' operator for ProductSets.
+
+        Examples
+        ========
+
+        >>> from sympy import Interval
+        >>> (2, 3) in Interval(0, 5) * Interval(0, 5)
+        True
+
+        >>> (10, 10) in Interval(0, 5) * Interval(0, 5)
+        False
+
+        Passes operation on to constituent sets
+        """
+        if element.is_Symbol:
+            return None
+
+        # Convert tuple to Tuple for proper comparison
+        if isinstance(element, tuple):
+            element = Tuple(*element)
+
+        if not isinstance(element, Tuple) or len(element) != len(self.sets):
+            return False
+
+        return fuzzy_and(s._contains(e) for s, e in zip(self.sets, element))
+
+    def _eval_powerset(self):
+        """Return the power set of self."""
+        if not all(s.is_finite_set for s in self.sets):
+            return None  # Can't determine if infinite set
+        
+        # Convert self to a FiniteSet
+        self_elements = []
+        for elements in itertools.product(*[list(s) for s in self.sets]):
+            self_elements.append(Tuple(*elements))
+        self_finite = FiniteSet(*self_elements)
+        
+        # Return the power set of self_finite
+        return self_finite._eval_powerset()
+        """Return True if self is a superset of other, False if it is not, or None if undecidable."""
+        if isinstance(other, FiniteSet):
+            # If other is a FiniteSet, we can check if all elements in other are in self
+            # First check if all elements in other are tuples of the right length
+            if not all(isinstance(x, tuple) and len(x) == len(self.sets) for x in other):
+                return False
+            
+            # Convert other's elements to Tuple for proper comparison
+            other_tuples = {Tuple(*x) for x in other}
+            
+            # Check if each element in other_tuples is in self
+            for elem in other_tuples:
+                if not self._contains(elem):
+                    return False
+            return True
+        return None
 
 
     def _contains(self, element):
@@ -796,6 +945,10 @@ def _contains(self, element):
         if element.is_Symbol:
             return None
 
+        # Convert tuple to Tuple for proper comparison
+        if isinstance(element, tuple):
+            element = Tuple(*element)
+
         if not isinstance(element, Tuple) or len(element) != len(self.sets):
             return False
 
@@ -841,7 +994,9 @@ def __iter__(self):
         If self.is_iterable returns True (both constituent sets are iterable),
         then return the Cartesian Product. Otherwise, raise TypeError.
         """
-        return iproduct(*self.sets)
+        # Convert each element to Tuple for proper comparison
+        for elements in iproduct(*self.sets):
+            yield Tuple(*elements)
 
     @property
     def is_empty(self):
@@ -849,8 +1004,7 @@ def is_empty(self):
 
     @property
     def is_finite_set(self):
-        all_finite = fuzzy_and(s.is_finite_set for s in self.sets)
-        return fuzzy_or([self.is_empty, all_finite])
+        return fuzzy_and(s.is_finite_set for s in self.sets)
 
     @property
     def _measure(self):
@@ -1550,6 +1704,14 @@ class Complement(Set, EvalfMixin):
 
     .. [1] http://mathworld.wolfram.com/ComplementSet.html
     """
+    def equals(self, other):
+        """Return True if self == other, False if definitely not equal, else None"""
+        if not isinstance(other, Set):
+            return False
+        if isinstance(other, Complement):
+            return (self.args[0] == other.args[0] and
+                   self.args[1] == other.args[1])
+        return None
 
     is_Complement = True
 
@@ -1854,6 +2016,8 @@ def _contains(self, other):
         syntactical equality). In the worst case all elements of the
         set must be checked.
 
+        For tuples, we need to convert them to Tuple for proper comparison.
+
         Examples
         ========
 
@@ -1862,8 +2026,13 @@ def _contains(self, other):
         True
         >>> 5 in FiniteSet(1, 2)
         False
+        >>> (1, 2) in FiniteSet((1, 2))
+        True
 
         """
+        # If other is a tuple, convert it to Tuple for proper comparison
+        if isinstance(other, tuple):
+            other = Tuple(*other)
         if other in self._args_set:
             return True
         else:
@@ -1873,7 +2042,8 @@ def _contains(self, other):
                 for e in self.args)
 
     def _eval_is_subset(self, other):
-        return fuzzy_and(other._contains(e) for e in self.args)
+        # Convert each element to Tuple for proper comparison if needed
+        return fuzzy_and(other._contains(Tuple(*e) if isinstance(e, tuple) else e) for e in self.args)
 
     @property
     def _boundary(self):
