diff --git a/reproduce_proxy_auth.py b/reproduce_proxy_auth.py
new file mode 100644
index 00000000..d5584be5
--- /dev/null
+++ b/reproduce_proxy_auth.py
@@ -0,0 +1,13 @@
+import requests
+
+# Using a test proxy that requires authentication
+proxies = {
+    'http': 'http://user:pass@proxy.example.com:8080',
+    'https': 'http://user:pass@proxy.example.com:8080'
+}
+
+try:
+    r = requests.get('https://example.org/', proxies=proxies)
+    print(f"Status code: {r.status_code}")
+except Exception as e:
+    print(f"Error: {e}")
\ No newline at end of file
diff --git a/requests/adapters.py b/requests/adapters.py
index fe22ff45..e7c9a8d8 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -191,13 +191,35 @@ class HTTPAdapter(BaseAdapter):
             )
         else:
             proxy_headers = self.proxy_headers(proxy)
-            manager = self.proxy_manager[proxy] = proxy_from_url(
-                proxy,
-                proxy_headers=proxy_headers,
-                num_pools=self._pool_connections,
-                maxsize=self._pool_maxsize,
-                block=self._pool_block,
-                **proxy_kwargs)
+
+            # Handle Python 3.8.12 proxy URL parsing issues
+            parsed = urlparse(proxy)
+            if parsed.username or parsed.password:
+                # If auth is in the URL, remove it and handle it separately
+                # to avoid Python 3.8.12 parsing issues
+                proxy_no_auth = urlunparse((
+                    parsed.scheme,
+                    parsed.hostname + (f':{parsed.port}' if parsed.port else ''),
+                    parsed.path,
+                    parsed.params,
+                    parsed.query,
+                    parsed.fragment
+                ))
+                proxy_kwargs['proxy_headers'] = proxy_headers
+                manager = self.proxy_manager[proxy] = proxy_from_url(
+                    proxy_no_auth,
+                    num_pools=self._pool_connections,
+                    maxsize=self._pool_maxsize,
+                    block=self._pool_block,
+                    **proxy_kwargs)
+            else:
+                manager = self.proxy_manager[proxy] = proxy_from_url(
+                    proxy,
+                    proxy_headers=proxy_headers,
+                    num_pools=self._pool_connections,
+                    maxsize=self._pool_maxsize,
+                    block=self._pool_block,
+                    **proxy_kwargs)
 
         return manager
 
@@ -387,8 +409,17 @@ class HTTPAdapter(BaseAdapter):
         username, password = get_auth_from_url(proxy)
 
         if username:
-            headers['Proxy-Authorization'] = _basic_auth_str(username,
-                                                             password)
+            # Handle Python 3.8.12 changes in basic auth encoding
+            try:
+                # First try the standard way
+                headers['Proxy-Authorization'] = _basic_auth_str(username, password)
+            except UnicodeEncodeError:
+                # If that fails, try explicit encoding to latin1
+                if isinstance(username, str):
+                    username = username.encode('latin1')
+                if isinstance(password, str):
+                    password = password.encode('latin1')
+                headers['Proxy-Authorization'] = _basic_auth_str(username, password)
 
         return headers
 
diff --git a/test_proxy_auth.py b/test_proxy_auth.py
new file mode 100644
index 00000000..461ea47e
--- /dev/null
+++ b/test_proxy_auth.py
@@ -0,0 +1,25 @@
+import requests
+import sys
+
+def test_proxy_auth():
+    # Test proxy with authentication
+    proxies = {
+        'http': 'http://user:pass@proxy.example.com:8080',
+        'https': 'http://user:pass@proxy.example.com:8080'
+    }
+
+    try:
+        r = requests.get('https://example.org/', proxies=proxies)
+        print(f"Status code: {r.status_code}")
+        return True
+    except requests.exceptions.ProxyError as e:
+        print(f"Proxy error: {e}")
+        return False
+    except Exception as e:
+        print(f"Unexpected error: {e}")
+        return False
+
+if __name__ == "__main__":
+    print(f"Python version: {sys.version}")
+    success = test_proxy_auth()
+    sys.exit(0 if success else 1)
\ No newline at end of file
