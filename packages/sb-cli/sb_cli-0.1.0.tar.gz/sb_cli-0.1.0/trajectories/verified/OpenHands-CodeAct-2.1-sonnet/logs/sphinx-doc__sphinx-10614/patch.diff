diff --git a/sphinx/ext/graphviz.py b/sphinx/ext/graphviz.py
index 8b21d9e3b..c489d87a2 100644
--- a/sphinx/ext/graphviz.py
+++ b/sphinx/ext/graphviz.py
@@ -234,13 +234,16 @@ def fix_svg_relative_paths(self: SphinxTranslator, filepath: str) -> None:
             # not a relative link
             continue
 
-        old_path = path.join(self.builder.outdir, url)
-        new_path = path.relpath(
-            old_path,
-            start=path.join(self.builder.outdir, self.builder.imgpath),
-        )
-        modified_url = urlunsplit((scheme, hostname, new_path, query, fragment))
-
+        # For SVG files in nested directories, we need to adjust the relative paths
+        # to be relative to the documentation root
+        if hasattr(self.builder, 'current_docname'):
+            # Count the number of directory levels from current page to root
+            levels = len(self.builder.current_docname.split('/')) - 1
+            if levels > 0:
+                # Add the correct number of "../" to get to root
+                url = '../' * levels + url
+
+        modified_url = urlunsplit((scheme, hostname, url, query, fragment))
         element.set(href_name, modified_url)
         modified = True
 
diff --git a/sphinx/ext/inheritance_diagram.py b/sphinx/ext/inheritance_diagram.py
index 6e3985512..9432eb27f 100644
--- a/sphinx/ext/inheritance_diagram.py
+++ b/sphinx/ext/inheritance_diagram.py
@@ -413,12 +413,26 @@ def html_visit_inheritance_diagram(self: HTML5Translator, node: inheritance_diag
     for child in pending_xrefs:
         if child.get('refuri') is not None:
             if graphviz_output_format == 'SVG':
-                urls[child['reftitle']] = "../" + child.get('refuri')
+                # For SVG output, make URLs relative to the documentation root
+                refuri = child.get('refuri')
+                if refuri:
+                    # Count the number of directory levels from current page to root
+                    levels = len(self.builder.current_docname.split('/')) - 1
+                    if levels > 0:
+                        # Add the correct number of "../" to get to root
+                        refuri = '../' * levels + refuri
+                    urls[child['reftitle']] = refuri
             else:
                 urls[child['reftitle']] = child.get('refuri')
         elif child.get('refid') is not None:
             if graphviz_output_format == 'SVG':
-                urls[child['reftitle']] = '../' + current_filename + '#' + child.get('refid')
+                # For SVG output with anchor references, make URLs relative to the documentation root
+                levels = len(self.builder.current_docname.split('/')) - 1
+                if levels > 0:
+                    # Add the correct number of "../" to get to root
+                    urls[child['reftitle']] = '../' * levels + current_filename + '#' + child.get('refid')
+                else:
+                    urls[child['reftitle']] = current_filename + '#' + child.get('refid')
             else:
                 urls[child['reftitle']] = '#' + child.get('refid')
 
diff --git a/test_inheritance_bug.py b/test_inheritance_bug.py
new file mode 100644
index 000000000..80f797e98
--- /dev/null
+++ b/test_inheritance_bug.py
@@ -0,0 +1,68 @@
+import os
+import tempfile
+import shutil
+
+# Create test project structure
+project_root = tempfile.mkdtemp()
+docs_source = os.path.join(project_root, 'docs_source')
+docs_build = os.path.join(project_root, 'docs_build')
+my_package_dir = os.path.join(docs_source, 'my_package')
+
+os.makedirs(docs_source)
+os.makedirs(my_package_dir)
+
+# Create conf.py
+with open(os.path.join(docs_source, 'conf.py'), 'w') as f:
+    f.write('''
+extensions = [
+    'sphinx.ext.autodoc',
+    'sphinx.ext.graphviz',
+    'sphinx.ext.inheritance_diagram'
+]
+graphviz_output_format = 'svg'
+''')
+
+# Create root index.rst
+with open(os.path.join(docs_source, 'index.rst'), 'w') as f:
+    f.write('''
+Root Index
+==========
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+''')
+
+# Create nested index.rst
+with open(os.path.join(my_package_dir, 'index.rst'), 'w') as f:
+    f.write('''
+Package Index
+============
+
+.. inheritance-diagram:: my_package.MyClass1 my_package.MyClass2
+   :parts: 1
+''')
+
+# Create Python package with test classes
+os.makedirs(os.path.join(project_root, 'my_package'))
+with open(os.path.join(project_root, 'my_package', '__init__.py'), 'w') as f:
+    f.write('''
+class MyClass1:
+    pass
+
+class MyClass2:
+    pass
+''')
+
+# Add my_package to Python path
+import sys
+sys.path.insert(0, project_root)
+
+# Run sphinx-build
+from sphinx.cmd.build import build_main
+args = ['-b', 'html', docs_source, docs_build]
+build_main(args)
+
+print(f"Project built at {docs_build}")
+print("Check the following files:")
+print(f"1. {os.path.join(docs_build, 'index.html')} - root inheritance diagram")
+print(f"2. {os.path.join(docs_build, 'my_package', 'index.html')} - nested inheritance diagram")
\ No newline at end of file
