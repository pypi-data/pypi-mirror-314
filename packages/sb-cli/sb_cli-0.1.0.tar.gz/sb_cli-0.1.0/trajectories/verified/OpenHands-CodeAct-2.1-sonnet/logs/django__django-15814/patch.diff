diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 33cc636b22..5036335bec 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -748,7 +748,7 @@ class Query(BaseExpression):
                     cur_model = source.related_model
                 else:
                     cur_model = source.remote_field.model
-                opts = cur_model._meta
+                opts = cur_model._meta.concrete_model._meta
                 # Even if we're "just passing through" this model, we must add
                 # both the current model's pk and the related reference field
                 # (if it's not a reverse relation) to the things we select.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..901a26d50b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,59 @@
+from django.db import models
+from django.core.management import BaseCommand
+from django.conf import settings
+import os
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+# Define the models
+class CustomModel(models.Model):
+    name = models.CharField(max_length=16)
+    
+    class Meta:
+        app_label = 'testapp'
+
+class ProxyCustomModel(CustomModel):
+    class Meta:
+        proxy = True
+        app_label = 'testapp'
+
+class AnotherModel(models.Model):
+    class Meta:
+        app_label = 'testapp'
+        
+    custom = models.ForeignKey(
+        ProxyCustomModel,
+        on_delete=models.SET_NULL,
+        null=True,
+        blank=True,
+    )
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(CustomModel)
+    schema_editor.create_model(AnotherModel)
+
+# Create some test data
+custom = ProxyCustomModel.objects.create(name="test")
+another = AnotherModel.objects.create(custom=custom)
+
+# Try to reproduce the error
+objs = list(AnotherModel.objects.select_related("custom").only("custom__name").all())
+print("Success! No error occurred.")
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..877cffc7d4
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,101 @@
+from django.db import models
+from django.conf import settings
+import os
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[
+        'django.contrib.contenttypes',
+        'django.contrib.auth',
+    ],
+    DEFAULT_AUTO_FIELD='django.db.models.AutoField',
+)
+
+import django
+django.setup()
+
+# Base model
+class BaseModel(models.Model):
+    name = models.CharField(max_length=16)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# First level proxy
+class FirstProxyModel(BaseModel):
+    class Meta:
+        proxy = True
+        app_label = 'testapp'
+
+# Second level proxy (proxy of proxy)
+class SecondProxyModel(FirstProxyModel):
+    class Meta:
+        proxy = True
+        app_label = 'testapp'
+
+# Model with multiple inheritance
+class MixinModel(models.Model):
+    extra = models.CharField(max_length=16)
+    
+    class Meta:
+        abstract = True
+
+class MultiModel(MixinModel, BaseModel):
+    class Meta:
+        app_label = 'testapp'
+
+# Model referencing these models
+class ReferenceModel(models.Model):
+    base = models.ForeignKey(BaseModel, on_delete=models.CASCADE, related_name='+', null=True)
+    first_proxy = models.ForeignKey(FirstProxyModel, on_delete=models.CASCADE, related_name='+', null=True)
+    second_proxy = models.ForeignKey(SecondProxyModel, on_delete=models.CASCADE, related_name='+', null=True)
+    multi = models.ForeignKey(MultiModel, on_delete=models.CASCADE, related_name='+', null=True)
+    
+    class Meta:
+        app_label = 'testapp'
+
+# Create the tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(BaseModel)
+    schema_editor.create_model(MultiModel)
+    schema_editor.create_model(ReferenceModel)
+
+# Create test data
+base = BaseModel.objects.create(name="base")
+first = FirstProxyModel.objects.create(name="first")
+second = SecondProxyModel.objects.create(name="second")
+multi = MultiModel.objects.create(name="multi", extra="extra")
+
+ref = ReferenceModel.objects.create(
+    base=base,
+    first_proxy=first,
+    second_proxy=second,
+    multi=multi
+)
+
+# Test all combinations
+print("Testing base model...")
+obj = ReferenceModel.objects.select_related("base").only("base__name").get(id=ref.id)
+print(f"base name: {obj.base.name}")
+
+print("\nTesting first level proxy...")
+obj = ReferenceModel.objects.select_related("first_proxy").only("first_proxy__name").get(id=ref.id)
+print(f"first proxy name: {obj.first_proxy.name}")
+
+print("\nTesting second level proxy...")
+obj = ReferenceModel.objects.select_related("second_proxy").only("second_proxy__name").get(id=ref.id)
+print(f"second proxy name: {obj.second_proxy.name}")
+
+print("\nTesting multi-inheritance model...")
+obj = ReferenceModel.objects.select_related("multi").only("multi__name", "multi__extra").get(id=ref.id)
+print(f"multi name: {obj.multi.name}")
+print(f"multi extra: {obj.multi.extra}")
+
+print("\nAll tests passed successfully!")
\ No newline at end of file
