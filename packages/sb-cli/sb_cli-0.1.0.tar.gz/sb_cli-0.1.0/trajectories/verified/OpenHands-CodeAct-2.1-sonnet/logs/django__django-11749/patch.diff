diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py
index 5f2e64761e..82db2ece81 100644
--- a/django/core/management/__init__.py
+++ b/django/core/management/__init__.py
@@ -136,6 +136,25 @@ def call_command(command_name, *args, **options):
         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])
         for opt in parser_actions if opt.required and opt.dest in options
     ]
+
+    # Handle mutually exclusive groups
+    for group in parser._mutually_exclusive_groups:
+        group_options_used = []
+        for opt in group._group_actions:
+            if opt.dest in options:
+                group_options_used.append(opt)
+        
+        # For any group (required or not), ensure only one option is used
+        if len(group_options_used) > 1:
+            raise CommandError("argument {}: not allowed with argument {}".format(
+                min(group_options_used[1].option_strings),
+                min(group_options_used[0].option_strings)
+            ))
+        
+        # If we have an option from this group, add it to parse_args
+        if group_options_used:
+            opt = group_options_used[0]
+            parse_args.append('{}={}'.format(min(opt.option_strings), arg_options[opt.dest]))
     defaults = parser.parse_args(args=parse_args)
     defaults = dict(defaults._get_kwargs(), **arg_options)
     # Raise an error if any unknown options were passed.
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..51f304cd28
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,44 @@
+import os
+import sys
+import django
+from django.core.management import BaseCommand, CommandParser, call_command
+from django.conf import settings
+
+# Configure Django settings
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+settings.configure(SECRET_KEY='dummy')
+django.setup()
+
+# Create a test command that uses mutually exclusive group
+class Command(BaseCommand):
+    def add_arguments(self, parser):
+        shop = parser.add_mutually_exclusive_group(required=True)
+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')
+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')
+
+    def handle(self, *args, **options):
+        print(f"Received options: {options}")
+
+# Register our command
+from django.core.management import get_commands
+get_commands.cache_clear()  # Clear the LRU cache
+get_commands()['test_command'] = Command()
+
+# Test various cases
+test_cases = [
+    ('Normal CLI style', lambda: call_command('test_command', '--shop-id=1')),
+    ('Normal kwargs style', lambda: call_command('test_command', shop_id=1)),
+    ('String shop name CLI', lambda: call_command('test_command', '--shop=test')),
+    ('String shop name kwargs', lambda: call_command('test_command', shop_name='test')),
+    ('No args', lambda: call_command('test_command')),
+    ('Both args CLI', lambda: call_command('test_command', '--shop-id=1', '--shop=test')),
+    ('Both args kwargs', lambda: call_command('test_command', shop_id=1, shop_name='test')),
+]
+
+for case_name, test_func in test_cases:
+    print(f"\nTrying {case_name}:")
+    try:
+        test_func()
+        print("Success!")
+    except Exception as e:
+        print(f"Error: {e}")
\ No newline at end of file
