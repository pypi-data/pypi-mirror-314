diff --git a/sphinx/builders/html/transforms.py b/sphinx/builders/html/transforms.py
index c91da57e9..5799e780f 100644
--- a/sphinx/builders/html/transforms.py
+++ b/sphinx/builders/html/transforms.py
@@ -37,26 +37,41 @@ class KeyboardTransform(SphinxPostTransform):
     """
     default_priority = 400
     builders = ('html',)
-    pattern = re.compile(r'(-|\+|\^|\s+)')
+    # Pattern to match compound key separators when they appear between words/characters
+    pattern = re.compile(r'(?<=\w)(-|\+|\^)(?=\w)|(?<=\w)(-|\+|\^)(?=\W)|(?<=\W)(-|\+|\^)(?=\w)|\s+')
 
     def run(self, **kwargs: Any) -> None:
         matcher = NodeMatcher(nodes.literal, classes=["kbd"])
         for node in self.document.traverse(matcher):  # type: nodes.literal
-            parts = self.pattern.split(node[-1].astext())
+            text = node[-1].astext()
+            
+            # If text is a single character that could be a separator, treat it as a keystroke
+            if len(text) == 1 and text in '-+^':
+                continue
+                
+            parts = self.pattern.split(text)
+            # Remove empty strings and None values that may result from the split
+            parts = [p for p in parts if p]
+            
             if len(parts) == 1:
                 continue
 
             node.pop()
             while parts:
                 key = parts.pop(0)
-                node += nodes.literal('', key, classes=["kbd"])
-
-                try:
-                    # key separator (ex. -, +, ^)
-                    sep = parts.pop(0)
-                    node += nodes.Text(sep)
-                except IndexError:
-                    pass
+                # Skip empty keys
+                if not key:
+                    continue
+                # If key is a separator character and there are no more parts,
+                # it's actually a keystroke
+                if key in '-+^' and not parts:
+                    node += nodes.literal('', key, classes=["kbd"])
+                # If key is a separator character but there are more parts,
+                # it's a separator
+                elif key in '-+^':
+                    node += nodes.Text(key)
+                else:
+                    node += nodes.literal('', key, classes=["kbd"])
 
 
 def setup(app: Sphinx) -> Dict[str, Any]:
diff --git a/test_kbd.py b/test_kbd.py
new file mode 100644
index 000000000..e3c3092d1
--- /dev/null
+++ b/test_kbd.py
@@ -0,0 +1,65 @@
+from docutils import nodes
+from sphinx.builders.html.transforms import KeyboardTransform
+
+def test_transform_logic():
+    # Test case 1: Single keystroke with -
+    text1 = "-"
+    print("Test case 1 (single -): ")
+    print("Input:", text1)
+    if len(text1) == 1 and text1 in '-+^':
+        print("Output: Single kbd element with text '-'")
+    else:
+        parts1 = [p for p in KeyboardTransform.pattern.split(text1) if p]
+        print("Parts:", parts1)
+    
+    # Test case 2: Single keystroke with +
+    text2 = "+"
+    print("\nTest case 2 (single +): ")
+    print("Input:", text2)
+    if len(text2) == 1 and text2 in '-+^':
+        print("Output: Single kbd element with text '+'")
+    else:
+        parts2 = [p for p in KeyboardTransform.pattern.split(text2) if p]
+        print("Parts:", parts2)
+    
+    # Test case 3: Compound keystroke with +
+    text3 = "Shift-+"
+    print("\nTest case 3 (Shift-+): ")
+    print("Input:", text3)
+    parts3 = [p for p in KeyboardTransform.pattern.split(text3) if p]
+    print("Parts:", parts3)
+    print("Expected output:")
+    print("  <kbd>")
+    print("    <kbd>Shift</kbd>")
+    print("    -")
+    print("    <kbd>+</kbd>")
+    print("  </kbd>")
+    
+    # Test case 4: Complex compound keystroke
+    text4 = "Ctrl+Alt-Delete"
+    print("\nTest case 4 (Ctrl+Alt-Delete): ")
+    print("Input:", text4)
+    parts4 = [p for p in KeyboardTransform.pattern.split(text4) if p]
+    print("Parts:", parts4)
+    print("Expected output:")
+    print("  <kbd>")
+    print("    <kbd>Ctrl</kbd>")
+    print("    +")
+    print("    <kbd>Alt</kbd>")
+    print("    -")
+    print("    <kbd>Delete</kbd>")
+    print("  </kbd>")
+    
+    # Test case 5: Keystroke with separator character at end
+    text5 = "Shift-"
+    print("\nTest case 5 (Shift-): ")
+    print("Input:", text5)
+    parts5 = [p for p in KeyboardTransform.pattern.split(text5) if p]
+    print("Parts:", parts5)
+    print("Expected output:")
+    print("  <kbd>")
+    print("    <kbd>Shift-</kbd>")
+    print("  </kbd>")
+
+if __name__ == '__main__':
+    test_transform_logic()
\ No newline at end of file
