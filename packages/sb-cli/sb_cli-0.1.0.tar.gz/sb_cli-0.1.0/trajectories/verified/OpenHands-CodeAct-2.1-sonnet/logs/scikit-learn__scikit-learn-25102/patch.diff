diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 000000000..bb72cc3d2
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,21 @@
+import numpy as np
+from sklearn.datasets import load_iris
+from sklearn.feature_selection import SelectKBest
+from sklearn.feature_selection import chi2
+
+X, y = load_iris(return_X_y=True, as_frame=True)
+X = X.astype(
+   {
+       "petal width (cm)": np.float16,
+       "petal length (cm)": np.float16,
+   }
+)
+X["cat"] = y.astype("category")
+
+selector = SelectKBest(chi2, k=2)
+selector.set_output(transform="pandas")
+X_out = selector.fit_transform(X, y)
+print("Original dtypes:")
+print(X.dtypes)
+print("\nTransformed dtypes:")
+print(X_out.dtypes)
\ No newline at end of file
diff --git a/sklearn/utils/_set_output.py b/sklearn/utils/_set_output.py
index 335773c6a..2ac6be568 100644
--- a/sklearn/utils/_set_output.py
+++ b/sklearn/utils/_set_output.py
@@ -12,6 +12,7 @@ def _wrap_in_pandas_container(
     *,
     columns,
     index=None,
+    dtypes=None,
 ):
     """Create a Pandas DataFrame.
 
@@ -36,6 +37,10 @@ def _wrap_in_pandas_container(
     index : array-like, default=None
         Index for data.
 
+    dtypes : dict or None, default=None
+        Dictionary mapping column names to dtypes. If None, no dtype conversion
+        is performed.
+
     Returns
     -------
     dataframe : DataFrame
@@ -59,7 +64,13 @@ def _wrap_in_pandas_container(
             data_to_wrap.index = index
         return data_to_wrap
 
-    return pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    df = pd.DataFrame(data_to_wrap, index=index, columns=columns)
+    if dtypes is not None:
+        # Only convert dtypes for columns that exist in the output DataFrame
+        dtypes = {col: dtype for col, dtype in dtypes.items() if col in df.columns}
+        if dtypes:
+            df = df.astype(dtypes)
+    return df
 
 
 def _get_output_config(method, estimator=None):
@@ -127,10 +138,17 @@ def _wrap_data_with_container(method, data_to_wrap, original_input, estimator):
         return data_to_wrap
 
     # dense_config == "pandas"
+    dtypes = None
+    if hasattr(original_input, "dtypes"):
+        # Only preserve dtypes if explicitly configured to do so
+        if getattr(estimator, "_sklearn_output_config", {}).get("preserve_dtypes", True):
+            dtypes = original_input.dtypes.to_dict()
+
     return _wrap_in_pandas_container(
         data_to_wrap=data_to_wrap,
         index=getattr(original_input, "index", None),
         columns=estimator.get_feature_names_out,
+        dtypes=dtypes,
     )
 
 
@@ -208,7 +226,7 @@ class _SetOutputMixin:
             setattr(cls, method, wrapped_method)
 
     @available_if(_auto_wrap_is_configured)
-    def set_output(self, *, transform=None):
+    def set_output(self, *, transform=None, preserve_dtypes=True):
         """Set output container.
 
         See :ref:`sphx_glr_auto_examples_miscellaneous_plot_set_output.py`
@@ -223,6 +241,10 @@ class _SetOutputMixin:
             - `"pandas"`: DataFrame output
             - `None`: Transform configuration is unchanged
 
+        preserve_dtypes : bool, default=True
+            Whether to preserve the dtypes of the input DataFrame when transform="pandas".
+            Only used when transform="pandas".
+
         Returns
         -------
         self : estimator instance
@@ -235,6 +257,7 @@ class _SetOutputMixin:
             self._sklearn_output_config = {}
 
         self._sklearn_output_config["transform"] = transform
+        self._sklearn_output_config["preserve_dtypes"] = preserve_dtypes
         return self
 
 
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 000000000..ecd734bd7
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,51 @@
+import numpy as np
+from sklearn.datasets import load_iris
+from sklearn.feature_selection import SelectKBest
+from sklearn.feature_selection import chi2
+
+X, y = load_iris(return_X_y=True, as_frame=True)
+X = X.astype(
+   {
+       "petal width (cm)": np.float16,
+       "petal length (cm)": np.float16,
+   }
+)
+X["cat"] = y.astype("category")
+
+print("Test 1: preserve_dtypes=False")
+print("-" * 50)
+selector = SelectKBest(chi2, k=2)
+selector.set_output(transform="pandas", preserve_dtypes=False)
+X_out = selector.fit_transform(X, y)
+print("Original dtypes:")
+print(X.dtypes)
+print("\nTransformed dtypes:")
+print(X_out.dtypes)
+
+print("\nTest 2: Non-DataFrame input")
+print("-" * 50)
+X_array = X.to_numpy()
+selector = SelectKBest(chi2, k=2)
+selector.set_output(transform="pandas")
+X_out = selector.fit_transform(X_array, y)
+print("Input type:", type(X_array))
+print("\nTransformed dtypes:")
+print(X_out.dtypes)
+
+print("\nTest 3: Mixed dtypes with missing columns")
+print("-" * 50)
+X = X.astype(
+   {
+       "sepal length (cm)": np.int32,
+       "sepal width (cm)": "category",
+       "petal width (cm)": np.float16,
+       "petal length (cm)": np.float16,
+   }
+)
+selector = SelectKBest(chi2, k=2)
+selector.set_output(transform="pandas")
+X_out = selector.fit_transform(X, y)
+print("Original dtypes:")
+print(X.dtypes)
+print("\nTransformed dtypes:")
+print(X_out.dtypes)
\ No newline at end of file
