diff --git a/requests/adapters.py b/requests/adapters.py
index fe22ff45..ccb7d967 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -27,7 +27,7 @@ from urllib3.exceptions import ProtocolError
 from urllib3.exceptions import ReadTimeoutError
 from urllib3.exceptions import SSLError as _SSLError
 from urllib3.exceptions import ResponseError
-from urllib3.exceptions import LocationValueError
+from urllib3.exceptions import LocationValueError, LocationParseError
 
 from .models import Response
 from .compat import urlparse, basestring
@@ -301,19 +301,24 @@ class HTTPAdapter(BaseAdapter):
         """
         proxy = select_proxy(url, proxies)
 
-        if proxy:
-            proxy = prepend_scheme_if_needed(proxy, 'http')
-            proxy_url = parse_url(proxy)
-            if not proxy_url.host:
-                raise InvalidProxyURL("Please check proxy URL. It is malformed"
-                                      " and could be missing the host.")
-            proxy_manager = self.proxy_manager_for(proxy)
-            conn = proxy_manager.connection_from_url(url)
-        else:
-            # Only scheme should be lower case
-            parsed = urlparse(url)
-            url = parsed.geturl()
-            conn = self.poolmanager.connection_from_url(url)
+        try:
+            if proxy:
+                proxy = prepend_scheme_if_needed(proxy, 'http')
+                proxy_url = parse_url(proxy)
+                if not proxy_url.host:
+                    raise InvalidProxyURL("Please check proxy URL. It is malformed"
+                                          " and could be missing the host.")
+                proxy_manager = self.proxy_manager_for(proxy)
+                conn = proxy_manager.connection_from_url(url)
+            else:
+                # Only scheme should be lower case
+                parsed = urlparse(url)
+                url = parsed.geturl()
+                conn = self.poolmanager.connection_from_url(url)
+        except LocationParseError as e:
+            if 'label empty or too long' in str(e):
+                raise InvalidURL('URL has an invalid label.')
+            raise InvalidURL(e)
 
         return conn
 
@@ -341,14 +346,19 @@ class HTTPAdapter(BaseAdapter):
         :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.
         :rtype: str
         """
-        proxy = select_proxy(request.url, proxies)
-        scheme = urlparse(request.url).scheme
-
-        is_proxied_http_request = (proxy and scheme != 'https')
-        using_socks_proxy = False
-        if proxy:
-            proxy_scheme = urlparse(proxy).scheme.lower()
-            using_socks_proxy = proxy_scheme.startswith('socks')
+        try:
+            proxy = select_proxy(request.url, proxies)
+            scheme = urlparse(request.url).scheme
+
+            is_proxied_http_request = (proxy and scheme != 'https')
+            using_socks_proxy = False
+            if proxy:
+                proxy_scheme = urlparse(proxy).scheme.lower()
+                using_socks_proxy = proxy_scheme.startswith('socks')
+        except LocationParseError as e:
+            if 'label empty or too long' in str(e):
+                raise InvalidURL('URL has an invalid label.')
+            raise InvalidURL(e)
 
         url = request.path_url
         if is_proxied_http_request and not using_socks_proxy:
@@ -411,7 +421,9 @@ class HTTPAdapter(BaseAdapter):
 
         try:
             conn = self.get_connection(request.url, proxies)
-        except LocationValueError as e:
+        except (LocationValueError, LocationParseError) as e:
+            if isinstance(e, LocationParseError) and 'label empty or too long' in str(e):
+                raise InvalidURL('URL has an invalid label.', request=request)
             raise InvalidURL(e, request=request)
 
         self.cert_verify(conn, request.url, verify, cert)
@@ -497,7 +509,11 @@ class HTTPAdapter(BaseAdapter):
                     low_conn.close()
                     raise
 
-        except (ProtocolError, socket.error) as err:
+        except (ProtocolError, socket.error, LocationParseError) as err:
+            if isinstance(err, LocationParseError):
+                if 'label empty or too long' in str(err):
+                    raise InvalidURL('URL has an invalid label.')
+                raise InvalidURL(err)
             raise ConnectionError(err, request=request)
 
         except MaxRetryError as e:
diff --git a/requests/models.py b/requests/models.py
index e7d292d5..0eebcac4 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -354,7 +354,7 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         try:
             host = idna.encode(host, uts46=True).decode('utf-8')
         except idna.IDNAError:
-            raise UnicodeError
+            raise InvalidURL('URL has an invalid label.')
         return host
 
     def prepare_url(self, url, params):
@@ -383,6 +383,8 @@ class PreparedRequest(RequestEncodingMixin, RequestHooksMixin):
         try:
             scheme, auth, host, port, path, query, fragment = parse_url(url)
         except LocationParseError as e:
+            if 'label empty or too long' in str(e):
+                raise InvalidURL('URL has an invalid label.')
             raise InvalidURL(*e.args)
 
         if not scheme:
