diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..3534c59e1e
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,11 @@
+from sympy import *
+
+A = MatrixSymbol('A', 2, 2)
+B = MatrixSymbol('B', 2, 2)
+
+print("String representation:")
+print(A - A*B - B)
+print("\nPretty print:")
+pprint(A - A*B - B)
+print("\nLatex representation:")
+print(latex(A - A*B - B))
\ No newline at end of file
diff --git a/sympy/matrices/expressions/matadd.py b/sympy/matrices/expressions/matadd.py
index bef8e1e9ea..2478fdd4c5 100644
--- a/sympy/matrices/expressions/matadd.py
+++ b/sympy/matrices/expressions/matadd.py
@@ -3,7 +3,7 @@
 from sympy.core.compatibility import reduce
 from operator import add
 
-from sympy.core import Add, Basic, sympify
+from sympy.core import Add, Basic, sympify, S
 from sympy.functions import adjoint
 from sympy.matrices.matrices import MatrixBase
 from sympy.matrices.expressions.transpose import transpose
@@ -31,11 +31,39 @@ def __new__(cls, *args, **kwargs):
         args = list(map(sympify, args))
         check = kwargs.get('check', True)
 
-        obj = Basic.__new__(cls, *args)
+        # Combine terms with negative coefficients
+        from sympy.core.mul import Mul
+        from sympy.core.numbers import NegativeOne, Integer
+        from sympy.matrices.expressions.matmul import MatMul
+
+        new_args = []
+        for arg in args:
+            if isinstance(arg, (MatMul, Mul)):
+                coeff = S.One
+                matrices = []
+                for a in arg.args:
+                    if a.is_Number:
+                        coeff *= a
+                    else:
+                        matrices.append(a)
+                if coeff == -1:
+                    if len(matrices) == 1:
+                        new_args.append(Mul(Integer(-1), matrices[0], evaluate=False))
+                    else:
+                        new_args.append(Mul(Integer(-1), Mul(*matrices), evaluate=False))
+                else:
+                    new_args.append(arg)
+            else:
+                new_args.append(arg)
+
+        obj = Basic.__new__(cls, *new_args)
         if check:
-            validate(*args)
+            validate(*new_args)
         return obj
 
+    def _eval_could_extract_minus_sign(self):
+        return False
+
     @property
     def shape(self):
         return self.args[0].shape
@@ -56,23 +84,44 @@ def _eval_trace(self):
     def doit(self, **kwargs):
         deep = kwargs.get('deep', True)
         if deep:
-            args = [arg.doit(**kwargs) for arg in self.args]
+            args = []
+            for arg in self.args:
+                if hasattr(arg, 'doit'):
+                    args.append(arg.doit(**kwargs))
+                else:
+                    args.append(arg)
         else:
             args = self.args
         return canonicalize(MatAdd(*args))
 
 
 def validate(*args):
-    if not all(arg.is_Matrix for arg in args):
-        raise TypeError("Mix of Matrix and Scalar symbols")
+    matrices = [arg for arg in args if arg.is_Matrix]
+    if not matrices:
+        return
 
-    A = args[0]
-    for B in args[1:]:
+    A = matrices[0]
+    for B in matrices[1:]:
         if A.shape != B.shape:
             raise ShapeError("Matrices %s and %s are not aligned"%(A, B))
 
-factor_of = lambda arg: arg.as_coeff_mmul()[0]
-matrix_of = lambda arg: unpack(arg.as_coeff_mmul()[1])
+def factor_of(arg):
+    if hasattr(arg, 'as_coeff_mmul'):
+        return arg.as_coeff_mmul()[0]
+    elif hasattr(arg, 'as_coeff_mul'):
+        return arg.as_coeff_mul()[0]
+    return S.One
+
+def matrix_of(arg):
+    if hasattr(arg, 'as_coeff_mmul'):
+        return unpack(arg.as_coeff_mmul()[1])
+    elif hasattr(arg, 'as_coeff_mul'):
+        coeff, rest = arg.as_coeff_mul()
+        if len(rest) == 1:
+            return rest[0]
+        return Mul(*rest)
+    return arg
+
 def combine(cnt, mat):
     if cnt == 1:
         return mat
diff --git a/sympy/matrices/expressions/matexpr.py b/sympy/matrices/expressions/matexpr.py
index 07dd23549b..d70d8b688d 100644
--- a/sympy/matrices/expressions/matexpr.py
+++ b/sympy/matrices/expressions/matexpr.py
@@ -79,7 +79,12 @@ def __new__(cls, *args, **kwargs):
 
     # The following is adapted from the core Expr object
     def __neg__(self):
-        return MatMul(S.NegativeOne, self).doit()
+        from sympy.core.mul import Mul
+        from sympy.core.numbers import Integer
+        return Mul(Integer(-1), self, evaluate=False)
+
+    def _eval_could_extract_minus_sign(self):
+        return False
 
     def __abs__(self):
         raise NotImplementedError
@@ -653,6 +658,18 @@ def __new__(cls, name, n, m):
         obj = Basic.__new__(cls, name, n, m)
         return obj
 
+    def _eval_power(self, exp):
+        if exp == -1:
+            return self.inverse()
+        else:
+            return MatPow(self, exp)
+
+    def _eval_Mul(self, other):
+        from sympy.core.numbers import NegativeOne
+        if other == NegativeOne:
+            return -self
+        return None
+
     def _hashable_content(self):
         return(self.name, self.shape)
 
diff --git a/sympy/matrices/expressions/matmul.py b/sympy/matrices/expressions/matmul.py
index 083c5eba4c..7620241ce4 100644
--- a/sympy/matrices/expressions/matmul.py
+++ b/sympy/matrices/expressions/matmul.py
@@ -1,7 +1,7 @@
 from __future__ import print_function, division
 
 from sympy import Number
-from sympy.core import Mul, Basic, sympify, Add
+from sympy.core import Mul, Basic, sympify, Add, S
 from sympy.core.compatibility import range
 from sympy.functions import adjoint
 from sympy.matrices.expressions.transpose import transpose
@@ -30,16 +30,96 @@ class MatMul(MatrixExpr):
 
     def __new__(cls, *args, **kwargs):
         check = kwargs.get('check', True)
+        evaluate = kwargs.get('evaluate', True)
 
         args = list(map(sympify, args))
-        obj = Basic.__new__(cls, *args)
-        factor, matrices = obj.as_coeff_matrices()
+        
+        if not evaluate:
+            obj = Basic.__new__(cls, *args)
+            if check:
+                validate(*[arg for arg in args if arg.is_Matrix])
+            return obj
+        
+        # Handle negative coefficients
+        from sympy.core.numbers import NegativeOne, Integer
+        from sympy.core.mul import Mul
+        
+        # Extract all numeric coefficients
+        coeff = S.One
+        matrices = []
+        for arg in args:
+            if arg.is_Number:
+                coeff *= arg
+            else:
+                matrices.append(arg)
+        
+        # If coefficient is negative, make it positive and negate the result
+        if coeff.is_negative:
+            if len(matrices) == 1:
+                return Mul(Integer(-1), matrices[0], evaluate=False)
+            obj = Basic.__new__(cls, *matrices)
+            if check:
+                validate(*matrices)
+            return Mul(Integer(-1), obj, evaluate=False)
+        
+        # If coefficient is 1, don't include it
+        if coeff == S.One:
+            obj = Basic.__new__(cls, *matrices)
+        else:
+            # Convert coefficient to Integer if it's -1
+            if coeff == -1:
+                coeff = Integer(-1)
+            obj = Basic.__new__(cls, coeff, *matrices)
+            
         if check:
             validate(*matrices)
-        if not matrices:
-            return factor
         return obj
 
+    def _eval_could_extract_minus_sign(self):
+        coeff = S.One
+        for arg in self.args:
+            if arg.is_Number:
+                coeff *= arg
+        return coeff.is_negative
+
+    def _eval_could_extract_minus_sign(self):
+        coeff = S.One
+        for arg in self.args:
+            if arg.is_Number:
+                coeff *= arg
+        return coeff.is_negative
+
+    def _eval_is_negative(self):
+        coeff = S.One
+        for arg in self.args:
+            if arg.is_Number:
+                coeff *= arg
+        return coeff.is_negative
+
+    def _eval_could_extract_minus_sign(self):
+        coeff = S.One
+        for arg in self.args:
+            if arg.is_Number:
+                coeff *= arg
+        return coeff.is_negative
+
+    def _eval_is_negative(self):
+        coeff = S.One
+        for arg in self.args:
+            if arg.is_Number:
+                coeff *= arg
+        return coeff.is_negative
+
+    def as_coeff_matrices(self):
+        coeff = S.One
+        matrices = []
+        for arg in self.args:
+            if arg.is_Number:
+                coeff *= arg
+            else:
+                matrices.append(arg)
+        return coeff, matrices
+
     @property
     def shape(self):
         matrices = [arg for arg in self.args if arg.is_Matrix]
@@ -118,7 +198,12 @@ def _eval_inverse(self):
     def doit(self, **kwargs):
         deep = kwargs.get('deep', True)
         if deep:
-            args = [arg.doit(**kwargs) for arg in self.args]
+            args = []
+            for arg in self.args:
+                if hasattr(arg, 'doit'):
+                    args.append(arg.doit(**kwargs))
+                else:
+                    args.append(arg)
         else:
             args = self.args
         return canonicalize(MatMul(*args))
diff --git a/sympy/printing/latex.py b/sympy/printing/latex.py
index 8253b2f682..068ed355d6 100644
--- a/sympy/printing/latex.py
+++ b/sympy/printing/latex.py
@@ -308,17 +308,40 @@ def _print_Add(self, expr, order=None):
         tex = ""
         for i, term in enumerate(terms):
             if i == 0:
-                pass
-            elif _coeff_isneg(term):
-                tex += " - "
-                term = -term
+                if _coeff_isneg(term):
+                    if term.is_Mul:
+                        coeff, rest = term.as_coeff_mul()
+                        if rest:
+                            tex += "- "
+                            term = Mul(*rest)
+                        else:
+                            tex += self._print(coeff)
+                            continue
+                    else:
+                        tex += "- "
+                        term = -term
             else:
-                tex += " + "
+                if _coeff_isneg(term):
+                    if term.is_Mul:
+                        coeff, rest = term.as_coeff_mul()
+                        if rest:
+                            tex += " - "
+                            term = Mul(*rest)
+                        else:
+                            tex += " " + self._print(coeff)
+                            continue
+                    else:
+                        tex += " - "
+                        term = -term
+                else:
+                    tex += " + "
             term_tex = self._print(term)
             if self._needs_add_brackets(term):
                 term_tex = r"\left(%s\right)" % term_tex
             tex += term_tex
 
+        if not tex:
+            return "0"
         return tex
 
     def _print_Cycle(self, expr):
diff --git a/sympy/printing/pretty/pretty.py b/sympy/printing/pretty/pretty.py
index db24f4c612..c22338c354 100644
--- a/sympy/printing/pretty/pretty.py
+++ b/sympy/printing/pretty/pretty.py
@@ -1437,16 +1437,20 @@ def pretty_negative(pform, index):
             return prettyForm(binding=prettyForm.NEG, *p)
 
         for i, term in enumerate(terms):
-            if term.is_Mul and _coeff_isneg(term):
-                coeff, other = term.as_coeff_mul(rational=False)
-                pform = self._print(Mul(-coeff, *other, evaluate=False))
+            if _coeff_isneg(term):
+                if term.is_Mul:
+                    # For Mul terms, extract the -1 coefficient
+                    coeff, rest = term.as_coeff_mul()
+                    if rest:
+                        pform = self._print(Mul(*rest))
+                    else:
+                        pform = self._print(-coeff)
+                else:
+                    pform = self._print(-term)
                 pforms.append(pretty_negative(pform, i))
             elif term.is_Rational and term.q > 1:
                 pforms.append(None)
                 indices.append(i)
-            elif term.is_Number and term < 0:
-                pform = self._print(-term)
-                pforms.append(pretty_negative(pform, i))
             elif term.is_Relational:
                 pforms.append(prettyForm(*self._print(term).parens()))
             else:
diff --git a/sympy/printing/str.py b/sympy/printing/str.py
index 0baefe0f7f..bf7c67ff84 100644
--- a/sympy/printing/str.py
+++ b/sympy/printing/str.py
@@ -55,20 +55,31 @@ def _print_Add(self, expr, order=None):
         PREC = precedence(expr)
         l = []
         for term in terms:
-            t = self._print(term)
-            if t.startswith('-'):
-                sign = "-"
-                t = t[1:]
-            else:
-                sign = "+"
-            if precedence(term) < PREC:
-                l.extend([sign, "(%s)" % t])
+            if _coeff_isneg(term):
+                # Handle negative terms
+                if term.is_Mul:
+                    # For Mul terms, extract the -1 coefficient
+                    coeff, rest = term.as_coeff_mul()
+                    if rest:
+                        l.extend(["-", self._print(Mul(*rest))])
+                    else:
+                        l.extend(["-", self._print(-coeff)])
+                else:
+                    l.extend(["-", self._print(-term)])
             else:
-                l.extend([sign, t])
-        sign = l.pop(0)
-        if sign == '+':
-            sign = ""
-        return sign + ' '.join(l)
+                if l:  # not first term
+                    l.extend(["+", self._print(term)])
+                else:
+                    l.append(self._print(term))
+
+        if not l:
+            return "0"
+        return ' '.join(l)
+
+    def _print_Mul(self, expr):
+        if _coeff_isneg(expr):
+            return "-%s" % self._print(-expr)
+        return super()._print_Mul(expr)
 
     def _print_BooleanTrue(self, expr):
         return "True"
@@ -257,25 +268,36 @@ def _print_DeferredVector(self, expr):
         return expr.name
 
     def _print_Mul(self, expr):
-
         prec = precedence(expr)
 
-        c, e = expr.as_coeff_Mul()
-        if c < 0:
-            expr = _keep_coeff(-c, e)
-            sign = "-"
-        else:
-            sign = ""
-
-        a = []  # items in the numerator
-        b = []  # items that are in the denominator (if any)
+        if expr.could_extract_minus_sign():
+            if expr.is_Add:
+                return "-%s" % (self.parenthesize(-expr, prec))
+            else:
+                return "-%s" % (self._print(-expr))
 
         if self.order not in ('old', 'none'):
             args = expr.as_ordered_factors()
         else:
-            # use make_args in case expr was something like -x -> x
             args = Mul.make_args(expr)
 
+        args = tuple(args)  # needed to check for repeated factors
+
+        # Check for unevaluated Mul
+        for item in args:
+            if item.is_Number and item.is_negative and item is not S.NegativeOne:
+                return self._print(item) + "*" + self._print(expr/item)
+
+        # Extract -1 from arguments
+        neg1 = S.NegativeOne in args
+        if neg1:
+            args = tuple(arg for arg in args if arg is not S.NegativeOne)
+            if not args:
+                return "-1"
+
+        a = []  # items in the numerator
+        b = []  # items that are in the denominator (if any)
+
         # Gather args for numerator/denominator
         for item in args:
             if item.is_commutative and item.is_Pow and item.exp.is_Rational and item.exp.is_negative:
@@ -296,12 +318,16 @@ def _print_Mul(self, expr):
         a_str = [self.parenthesize(x, prec, strict=False) for x in a]
         b_str = [self.parenthesize(x, prec, strict=False) for x in b]
 
+        result = ""
+        if neg1:
+            result = "-"
+
         if len(b) == 0:
-            return sign + '*'.join(a_str)
+            return result + '*'.join(a_str)
         elif len(b) == 1:
-            return sign + '*'.join(a_str) + "/" + b_str[0]
+            return result + '*'.join(a_str) + "/" + b_str[0]
         else:
-            return sign + '*'.join(a_str) + "/(%s)" % '*'.join(b_str)
+            return result + '*'.join(a_str) + "/(%s)" % '*'.join(b_str)
 
     def _print_MatMul(self, expr):
         return '*'.join([self.parenthesize(arg, precedence(expr))
diff --git a/test_printing.py b/test_printing.py
new file mode 100644
index 0000000000..41e4722703
--- /dev/null
+++ b/test_printing.py
@@ -0,0 +1,35 @@
+from sympy import *
+
+def test_basic():
+    A = MatrixSymbol('A', 2, 2)
+    B = MatrixSymbol('B', 2, 2)
+    expr = A - A*B - B
+
+    print("String representation:")
+    print(expr)
+    print("\nPretty print:")
+    pprint(expr)
+    print("\nLatex representation:")
+    print(latex(expr))
+
+def test_edge_cases():
+    A = MatrixSymbol('A', 2, 2)
+    B = MatrixSymbol('B', 2, 2)
+    C = MatrixSymbol('C', 2, 2)
+    
+    print("\nEdge cases:")
+    print("1. Multiple negative terms:")
+    print(A - B - C)
+    
+    print("\n2. Starting with negative term:")
+    print(-A - B + C)
+    
+    print("\n3. Mixed positive/negative terms:")
+    print(A + B - C - A*B)
+    
+    print("\n4. Single negative term:")
+    print(-A)
+
+if __name__ == "__main__":
+    test_basic()
+    test_edge_cases()
\ No newline at end of file
