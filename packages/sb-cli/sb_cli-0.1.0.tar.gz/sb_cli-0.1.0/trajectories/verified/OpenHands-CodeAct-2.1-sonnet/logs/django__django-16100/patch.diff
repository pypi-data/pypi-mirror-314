diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5f07a4208a..128566c1f7 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -2011,25 +2011,26 @@ class ModelAdmin(BaseModelAdmin):
             )
             if formset.is_valid():
                 changecount = 0
-                for form in formset.forms:
-                    if form.has_changed():
-                        obj = self.save_form(request, form, change=True)
-                        self.save_model(request, obj, form, change=True)
-                        self.save_related(request, form, formsets=[], change=True)
-                        change_msg = self.construct_change_message(request, form, None)
-                        self.log_change(request, obj, change_msg)
-                        changecount += 1
-
-                if changecount:
-                    msg = ngettext(
-                        "%(count)s %(name)s was changed successfully.",
-                        "%(count)s %(name)s were changed successfully.",
-                        changecount,
-                    ) % {
-                        "count": changecount,
-                        "name": model_ngettext(self.opts, changecount),
-                    }
-                    self.message_user(request, msg, messages.SUCCESS)
+                with transaction.atomic():
+                    for form in formset.forms:
+                        if form.has_changed():
+                            obj = self.save_form(request, form, change=True)
+                            self.save_model(request, obj, form, change=True)
+                            self.save_related(request, form, formsets=[], change=True)
+                            change_msg = self.construct_change_message(request, form, None)
+                            self.log_change(request, obj, change_msg)
+                            changecount += 1
+
+                    if changecount:
+                        msg = ngettext(
+                            "%(count)s %(name)s was changed successfully.",
+                            "%(count)s %(name)s were changed successfully.",
+                            changecount,
+                        ) % {
+                            "count": changecount,
+                            "name": model_ngettext(self.opts, changecount),
+                        }
+                        self.message_user(request, msg, messages.SUCCESS)
 
                 return HttpResponseRedirect(request.get_full_path())
 
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..816811148a
--- /dev/null
+++ b/test_app/__init__.py
@@ -0,0 +1 @@
+# Test app
\ No newline at end of file
diff --git a/test_app/migrations/0001_initial.py b/test_app/migrations/0001_initial.py
new file mode 100644
index 0000000000..61c2b9685b
--- /dev/null
+++ b/test_app/migrations/0001_initial.py
@@ -0,0 +1,17 @@
+from django.db import migrations, models
+
+class Migration(migrations.Migration):
+    initial = True
+
+    dependencies = []
+
+    operations = [
+        migrations.CreateModel(
+            name='TestModel',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('name', models.CharField(max_length=100)),
+                ('value', models.IntegerField()),
+            ],
+        ),
+    ]
\ No newline at end of file
diff --git a/test_app/migrations/__init__.py b/test_app/migrations/__init__.py
new file mode 100644
index 0000000000..8feb5128c8
--- /dev/null
+++ b/test_app/migrations/__init__.py
@@ -0,0 +1 @@
+# Migrations
\ No newline at end of file
diff --git a/test_app/urls.py b/test_app/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/test_app/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
diff --git a/test_list_editable.py b/test_list_editable.py
new file mode 100644
index 0000000000..0dd1327001
--- /dev/null
+++ b/test_list_editable.py
@@ -0,0 +1,149 @@
+import os
+import sys
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+            'test_app',
+        ],
+        MIDDLEWARE=[
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+        ],
+        ROOT_URLCONF='test_app.urls',
+        TEMPLATES=[{
+            'BACKEND': 'django.template.backends.django.DjangoTemplates',
+            'APP_DIRS': True,
+            'OPTIONS': {
+                'context_processors': [
+                    'django.template.context_processors.debug',
+                    'django.template.context_processors.request',
+                    'django.contrib.auth.context_processors.auth',
+                    'django.contrib.messages.context_processors.messages',
+                ],
+            },
+        }],
+        SECRET_KEY='test',
+        STATIC_URL='/static/',
+    )
+    django.setup()
+
+from django.apps import apps
+from django.core.management import call_command
+from django.test import TestCase, Client, override_settings
+from django.urls import path
+from django.contrib import admin
+from django.contrib.auth.models import User
+from django.db import models, transaction
+from django.core.exceptions import ValidationError
+
+# Create a test app
+from django.apps import AppConfig
+class TestAppConfig(AppConfig):
+    name = 'test_app'
+    verbose_name = 'Test App'
+
+# Create test models
+class TestModel(models.Model):
+    name = models.CharField(max_length=100)
+    value = models.IntegerField()
+
+    def __str__(self):
+        return self.name
+
+    def clean(self):
+        # Add validation that will fail for certain values
+        if self.value < 0:
+            raise ValidationError('Value cannot be negative')
+
+    class Meta:
+        app_label = 'test_app'
+
+# Register model with admin
+class TestModelAdmin(admin.ModelAdmin):
+    list_display = ['name', 'value']
+    list_editable = ['value']
+
+admin.site.register(TestModel, TestModelAdmin)
+
+# URL patterns
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
+
+# Create test case
+class ListEditableTest(TestCase):
+    def setUp(self):
+        # Create superuser
+        User.objects.create_superuser('admin', 'admin@test.com', 'password')
+        
+        # Create test objects
+        TestModel.objects.create(name='Test 1', value=10)
+        TestModel.objects.create(name='Test 2', value=20)
+        TestModel.objects.create(name='Test 3', value=30)
+
+    def test_list_editable_transaction(self):
+        # Login
+        self.client.login(username='admin', password='password')
+
+        # Get the changelist page to get the CSRF token
+        response = self.client.get('/admin/test_app/testmodel/')
+        self.assertEqual(response.status_code, 200)
+
+        # Prepare POST data that will cause one update to fail
+        data = {
+            '_save': 'Save',
+            'form-TOTAL_FORMS': '3',
+            'form-INITIAL_FORMS': '3',
+            'form-MIN_NUM_FORMS': '0',
+            'form-MAX_NUM_FORMS': '1000',
+            'form-0-id': '1',
+            'form-0-value': '100',  # Valid value
+            'form-1-id': '2',
+            'form-1-value': '-1',   # Invalid value (negative)
+            'form-2-id': '3',
+            'form-2-value': '300',  # Valid value
+        }
+
+        # Post the data
+        response = self.client.post('/admin/test_app/testmodel/', data)
+        self.assertEqual(response.status_code, 200)  # Should stay on same page due to error
+
+        # Verify that no changes were made due to transaction rollback
+        self.assertEqual(TestModel.objects.get(name='Test 1').value, 10)
+        self.assertEqual(TestModel.objects.get(name='Test 2').value, 20)
+        self.assertEqual(TestModel.objects.get(name='Test 3').value, 30)
+
+if __name__ == '__main__':
+    # Create the test app
+    if not apps.is_installed('test_app'):
+        apps.register_config(TestAppConfig('test_app', sys.modules[__name__]))
+
+    # Run migrations
+    call_command('migrate')
+
+    # Run tests
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
+    if failures:
+        sys.exit(1)
\ No newline at end of file
