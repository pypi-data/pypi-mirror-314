diff --git a/django/template/autoreload.py b/django/template/autoreload.py
index 84c8554165..5765bdeb66 100644
--- a/django/template/autoreload.py
+++ b/django/template/autoreload.py
@@ -17,7 +17,11 @@ def get_template_directories():
         if not isinstance(backend, DjangoTemplates):
             continue
 
-        items.update(cwd / to_path(dir) for dir in backend.engine.dirs)
+        items.update(
+            cwd / to_path(dir)
+            for dir in backend.engine.dirs
+            if dir  # Filter out empty strings
+        )
 
         for loader in backend.engine.template_loaders:
             if not hasattr(loader, "get_dirs"):
@@ -25,7 +29,7 @@ def get_template_directories():
             items.update(
                 cwd / to_path(directory)
                 for directory in loader.get_dirs()
-                if not is_django_path(directory)
+                if directory and not is_django_path(directory)  # Filter out empty strings
             )
     return items
 
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..7fe48059bb
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,50 @@
+from pathlib import Path
+from django.template import engines
+from django.template.backends.django import DjangoTemplates
+from django.utils._os import to_path
+
+class MockEngine:
+    def __init__(self, dirs):
+        self.dirs = dirs
+        self.template_loaders = []
+
+class MockBackend:
+    def __init__(self, dirs):
+        self.engine = MockEngine(dirs)
+
+def test_template_dirs(dirs):
+    # Create a mock backend with the given dirs
+    backend = MockBackend(dirs)
+    
+    # Mock the engines.all() to return our test backend
+    def mock_all():
+        return [backend]
+    engines.all = mock_all
+    
+    # Import after mocking to use our mock
+    from django.template.autoreload import get_template_directories
+    
+    # Get template directories
+    template_dirs = get_template_directories()
+    
+    print(f"\nTesting with dirs: {dirs}")
+    print(f"Resulting template_dirs: {template_dirs}")
+    return template_dirs
+
+# Test cases
+print("=== Before fix (simulated) ===")
+print("Empty string would become root '/' and match all paths:")
+file_path = Path("/some/random/file.txt")
+empty_dir = Path("")
+print(f"File path parents: {list(file_path.parents)}")
+print(f"Empty dir in parents? {empty_dir in file_path.parents}")
+
+print("\n=== After fix ===")
+# Test with empty string in DIRS
+test_template_dirs([""])
+
+# Test with empty string in list of valid dirs
+test_template_dirs(["/templates", "", "/other/templates"])
+
+# Test with normal valid dirs
+test_template_dirs(["/templates", "/other/templates"])
\ No newline at end of file
