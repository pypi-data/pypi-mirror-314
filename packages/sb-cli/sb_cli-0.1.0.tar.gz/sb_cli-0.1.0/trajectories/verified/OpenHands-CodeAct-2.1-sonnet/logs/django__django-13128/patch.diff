diff --git a/django/db/backends/sqlite3/operations.py b/django/db/backends/sqlite3/operations.py
index 1f77b3109f..66f3f0642a 100644
--- a/django/db/backends/sqlite3/operations.py
+++ b/django/db/backends/sqlite3/operations.py
@@ -271,6 +271,8 @@ class DatabaseOperations(BaseDatabaseOperations):
             converters.append(self.convert_uuidfield_value)
         elif internal_type in ('NullBooleanField', 'BooleanField'):
             converters.append(self.convert_booleanfield_value)
+        elif internal_type == 'DurationField':
+            converters.append(self.convert_durationfield_value)
         return converters
 
     def convert_datetimefield_value(self, value, expression, connection):
@@ -317,6 +319,13 @@ class DatabaseOperations(BaseDatabaseOperations):
     def convert_booleanfield_value(self, value, expression, connection):
         return bool(value) if value in (1, 0) else value
 
+    def convert_durationfield_value(self, value, expression, connection):
+        if value is not None:
+            if isinstance(value, datetime.timedelta):
+                return value
+            return datetime.timedelta(microseconds=int(value))
+        return value
+
     def bulk_insert_sql(self, fields, placeholder_rows):
         return " UNION ALL ".join(
             "SELECT %s" % ", ".join(row)
@@ -335,10 +344,11 @@ class DatabaseOperations(BaseDatabaseOperations):
     def combine_duration_expression(self, connector, sub_expressions):
         if connector not in ['+', '-']:
             raise DatabaseError('Invalid connector for timedelta: %s.' % connector)
-        fn_params = ["'%s'" % connector] + sub_expressions
-        if len(fn_params) > 3:
+        if len(sub_expressions) > 2:
             raise ValueError('Too many params for timedelta operations.')
-        return "django_format_dtdelta(%s)" % ', '.join(fn_params)
+        if connector == '+':
+            return '(%s + %s)' % tuple(sub_expressions)
+        return '(%s - %s)' % tuple(sub_expressions)
 
     def integer_field_range(self, internal_type):
         # SQLite doesn't enforce any integer constraints
@@ -350,6 +360,10 @@ class DatabaseOperations(BaseDatabaseOperations):
         params = (*lhs_params, *rhs_params)
         if internal_type == 'TimeField':
             return 'django_time_diff(%s, %s)' % (lhs_sql, rhs_sql), params
+        elif internal_type == 'DateTimeField':
+            # Convert text timestamps to seconds since epoch and subtract
+            # Use julianday for higher precision
+            return 'CAST(ROUND((julianday(%s) - julianday(%s)) * 86400 * 1000000) AS INTEGER)' % (lhs_sql, rhs_sql), params
         return 'django_timestamp_diff(%s, %s)' % (lhs_sql, rhs_sql), params
 
     def insert_statement(self, ignore_conflicts=False):
diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index d913658291..9c5e188b3e 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -299,17 +299,42 @@ class BaseExpression:
         the output_field property.
         """
         sources_iter = (source for source in self.get_source_fields() if source is not None)
-        for output_field in sources_iter:
-            for source in sources_iter:
-                if not isinstance(output_field, source.__class__):
-                    raise FieldError(
-                        'Expression contains mixed types: %s, %s. You must '
-                        'set output_field.' % (
-                            output_field.__class__.__name__,
-                            source.__class__.__name__,
-                        )
+        sources = list(sources_iter)
+        if not sources:
+            return None
+        output_field = sources[0]
+        for source in sources[1:]:
+            if not isinstance(output_field, source.__class__):
+                # Special cases for temporal operations
+                if isinstance(self, CombinedExpression):
+                    # Case 1: Subtracting two datetime fields gives a duration
+                    if (self.connector == self.SUB and
+                        isinstance(output_field, fields.DateTimeField) and
+                        isinstance(source, fields.DateTimeField)):
+                        return fields.DurationField()
+                    # Case 2: Adding durations gives a duration
+                    if (self.connector == self.ADD and
+                        isinstance(output_field, fields.DurationField) and
+                        isinstance(source, fields.DurationField)):
+                        return fields.DurationField()
+                    # Case 3: Adding a duration to a datetime subtraction gives a duration
+                    if (self.connector == self.ADD and
+                        isinstance(output_field, fields.DateTimeField) and
+                        isinstance(source, fields.DateTimeField)):
+                        return fields.DurationField()
+                    # Case 4: Adding a timedelta Value to a datetime subtraction gives a duration
+                    if (self.connector == self.ADD and
+                        isinstance(output_field, fields.DateTimeField) and
+                        isinstance(source, fields.DurationField)):
+                        return fields.DurationField()
+                raise FieldError(
+                    'Expression contains mixed types: %s, %s. You must '
+                    'set output_field.' % (
+                        output_field.__class__.__name__,
+                        source.__class__.__name__,
                     )
-            return output_field
+                )
+        return output_field
 
     @staticmethod
     def _convert_value_noop(value, expression, connection):
