diff --git a/django/db/backends/base/operations.py b/django/db/backends/base/operations.py
index 2e283a3193..a8a4d794bc 100644
--- a/django/db/backends/base/operations.py
+++ b/django/db/backends/base/operations.py
@@ -579,8 +579,62 @@ class BaseDatabaseOperations:
         return []
 
     def convert_durationfield_value(self, value, expression, connection):
+        """
+        Convert a duration value from the database to a timedelta.
+        
+        This method handles both numeric values (microseconds) and string values in human-readable format
+        (e.g., "1 day, 1:00:00" or "-2 days, 23:00:00"). This is needed because SQLite and MySQL may
+        return duration values in different formats.
+        
+        Args:
+            value: The value from the database, can be an integer (microseconds) or a string
+            expression: The model field instance
+            connection: The database connection instance
+        
+        Returns:
+            datetime.timedelta: The converted duration value
+            None: If the value cannot be converted
+        """
         if value is not None:
-            return datetime.timedelta(0, 0, value)
+            if isinstance(value, str):
+                try:
+                    # First try direct conversion from microseconds
+                    value = int(decimal.Decimal(value) * decimal.Decimal(1000000))
+                except (TypeError, ValueError, decimal.InvalidOperation):
+                    # If that fails, try parsing human-readable format
+                    try:
+                        days = hours = minutes = seconds = microseconds = 0
+                        # Handle negative durations
+                        is_negative = value.startswith('-')
+                        if is_negative:
+                            value = value[1:]
+                        
+                        # Parse days if present
+                        if 'day' in value:
+                            days_str = value.split('day')[0].strip()
+                            days = int(days_str)
+                            value = value.split(',')[1].strip()
+                        
+                        # Parse time components
+                        time_parts = value.split(':')
+                        if len(time_parts) == 3:
+                            hours, minutes, seconds = map(int, time_parts)
+                        elif len(time_parts) == 2:
+                            hours, minutes = map(int, time_parts)
+                        
+                        # Calculate total microseconds
+                        total_microseconds = (
+                            days * 24 * 60 * 60 * 1000000 +
+                            hours * 60 * 60 * 1000000 +
+                            minutes * 60 * 1000000 +
+                            seconds * 1000000 +
+                            microseconds
+                        )
+                        
+                        value = -total_microseconds if is_negative else total_microseconds
+                    except (ValueError, AttributeError):
+                        return None
+            return datetime.timedelta(microseconds=value)
 
     def check_expression_support(self, expression):
         """
