diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py
index ffc3a7fda5..e52dd1ffc3 100644
--- a/django/db/models/expressions.py
+++ b/django/db/models/expressions.py
@@ -1181,6 +1181,50 @@ class Exists(Subquery):
             sql = 'CASE WHEN {} THEN 1 ELSE 0 END'.format(sql)
         return sql, params
 
+    def __and__(self, other):
+        """Support Exists() & Q()."""
+        from django.db.models import Q
+        if isinstance(other, Q):
+            # Create a new Q object with both operands
+            q = Q()
+            q.connector = q.AND
+            q.children = [self, other]
+            return q
+        return super().__and__(other)
+
+    def __rand__(self, other):
+        """Support Q() & Exists()."""
+        from django.db.models import Q
+        if isinstance(other, Q):
+            # Create a new Q object with both operands
+            q = Q()
+            q.connector = q.AND
+            q.children = [other, self]
+            return q
+        return NotImplemented
+
+    def __or__(self, other):
+        """Support Exists() | Q()."""
+        from django.db.models import Q
+        if isinstance(other, Q):
+            # Create a new Q object with both operands
+            q = Q()
+            q.connector = q.OR
+            q.children = [self, other]
+            return q
+        return super().__or__(other)
+
+    def __ror__(self, other):
+        """Support Q() | Exists()."""
+        from django.db.models import Q
+        if isinstance(other, Q):
+            # Create a new Q object with both operands
+            q = Q()
+            q.connector = q.OR
+            q.children = [other, self]
+            return q
+        return NotImplemented
+
 
 class OrderBy(BaseExpression):
     template = '%(expression)s %(ordering)s'
diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py
index c957ffa564..2d3ec30e7a 100644
--- a/django/db/models/query_utils.py
+++ b/django/db/models/query_utils.py
@@ -11,6 +11,7 @@ from collections import namedtuple
 
 from django.core.exceptions import FieldError
 from django.db.models.constants import LOOKUP_SEP
+from django.db.models import fields
 from django.utils import tree
 
 # PathInfo is used when converting lookups (fk__somecol). The contents
@@ -41,7 +42,14 @@ class Q(tree.Node):
 
     def _combine(self, other, conn):
         if not isinstance(other, Q):
-            raise TypeError(other)
+            # Handle Exists objects by creating a new Q object with them
+            if hasattr(other, 'output_field') and isinstance(other.output_field, fields.BooleanField):
+                q = Q()
+                q.connector = conn
+                q.children = [other]
+                other = q
+            else:
+                raise TypeError(other)
 
         # If the other Q() is empty, ignore it and just use `self`.
         if not other:
@@ -85,9 +93,12 @@ class Q(tree.Node):
         if path.startswith('django.db.models.query_utils'):
             path = path.replace('django.db.models.query_utils', 'django.db.models')
         args, kwargs = (), {}
-        if len(self.children) == 1 and not isinstance(self.children[0], Q):
+        if len(self.children) == 1:
             child = self.children[0]
-            kwargs = {child[0]: child[1]}
+            if isinstance(child, tuple):
+                kwargs = {child[0]: child[1]}
+            else:
+                args = (child,)
         else:
             args = tuple(self.children)
             if self.connector != self.default:
