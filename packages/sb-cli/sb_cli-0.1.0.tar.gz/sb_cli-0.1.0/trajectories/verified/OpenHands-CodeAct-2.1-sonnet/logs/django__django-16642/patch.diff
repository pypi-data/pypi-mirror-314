diff --git a/django/http/response.py b/django/http/response.py
index f62dec8ce9..0c584260d6 100644
--- a/django/http/response.py
+++ b/django/http/response.py
@@ -605,13 +605,23 @@ class FileResponse(StreamingHttpResponse):
         filename = os.path.basename(self.filename or filename)
         if self._no_explicit_content_type:
             if filename:
-                content_type, encoding = mimetypes.guess_type(filename)
+                # Normalize filename case for consistent mime type guessing
+                norm_filename = filename.lower()
+                
+                # Add .Z extension to mimetypes database if not already there
+                if not mimetypes.guess_type("test.Z")[1]:
+                    mimetypes.add_type("application/octet-stream", ".Z", strict=False)
+                    mimetypes.encodings_map[".Z"] = "compress"
+                
+                content_type, encoding = mimetypes.guess_type(norm_filename)
                 # Encoding isn't set to prevent browsers from automatically
                 # uncompressing files.
                 content_type = {
                     "bzip2": "application/x-bzip",
                     "gzip": "application/gzip",
                     "xz": "application/x-xz",
+                    "br": "application/x-br",  # Brotli compression
+                    "compress": "application/x-compress",  # Unix compress (.Z)
                 }.get(encoding, content_type)
                 self.headers["Content-Type"] = (
                     content_type or "application/octet-stream"
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..18f4f7f0b7
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,28 @@
+from django.http import FileResponse
+from django.conf import settings
+import io
+
+# Configure Django settings
+settings.configure()
+
+# Test various file extensions and edge cases
+test_files = [
+    "test.html.br",  # Brotli compressed HTML
+    "test.html.Z",   # Unix compress HTML
+    "test.txt.br",   # Brotli compressed text
+    "test.txt.Z",    # Unix compress text
+    "test.br",       # Just .br extension
+    "test.Z",        # Just .Z extension
+    "test.html.BR",  # Uppercase extension
+    "test.html.z",   # Lowercase .z
+    "test.html.br.gz",  # Multiple compression
+    "test",          # No extension
+]
+
+# Create a dummy file-like object
+file_obj = io.BytesIO(b"test content")
+
+for filename in test_files:
+    file_obj.name = filename
+    response = FileResponse(file_obj)
+    print(f"Content-Type for {file_obj.name}: {response.headers['Content-Type']}")
\ No newline at end of file
