diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 967a91fdc8..3e4bab083a 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -861,6 +861,15 @@ class AddIndex(IndexOperation):
     def migration_name_fragment(self):
         return "%s_%s" % (self.model_name_lower, self.index.name.lower())
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, RemoveIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.index.name.lower() == operation.name.lower()
+        ):
+            return []
+        return super().reduce(operation, app_label)
+
 
 class RemoveIndex(IndexOperation):
     """Remove an index from a model."""
@@ -886,6 +895,15 @@ class RemoveIndex(IndexOperation):
             index = to_model_state.get_index_by_name(self.name)
             schema_editor.add_index(model, index)
 
+    def reduce(self, operation, app_label):
+        if (
+            isinstance(operation, AddIndex)
+            and self.model_name_lower == operation.model_name_lower
+            and self.name.lower() == operation.index.name.lower()
+        ):
+            return []
+        return super().reduce(operation, app_label)
+
     def deconstruct(self):
         kwargs = {
             "model_name": self.model_name,
diff --git a/test_index_optimization.py b/test_index_optimization.py
new file mode 100644
index 0000000000..2efa231efa
--- /dev/null
+++ b/test_index_optimization.py
@@ -0,0 +1,59 @@
+from django.db import migrations, models
+from django.db.migrations.optimizer import MigrationOptimizer
+
+def run_test(test_name, operations):
+    print(f"\n=== {test_name} ===")
+    optimizer = MigrationOptimizer()
+    result = optimizer.optimize(operations, app_label='testapp')
+    
+    print(f"Original operations: {len(operations)}")
+    print(f"Optimized operations: {len(result)}")
+    print("Optimized operations:")
+    for op in result:
+        print(f"- {op.__class__.__name__}")
+    return result
+
+def test_index_optimization():
+    # Test case 1: Basic case - same index name and model
+    index1 = models.Index(fields=['name'], name='test_idx')
+    operations1 = [
+        migrations.AddIndex(model_name='testmodel', index=index1),
+        migrations.RemoveIndex(model_name='testmodel', name='test_idx'),
+    ]
+    run_test("Basic case - same index name and model", operations1)
+
+    # Test case 2: Different index names
+    index2 = models.Index(fields=['name'], name='test_idx2')
+    operations2 = [
+        migrations.AddIndex(model_name='testmodel', index=index2),
+        migrations.RemoveIndex(model_name='testmodel', name='test_idx3'),
+    ]
+    run_test("Different index names", operations2)
+
+    # Test case 3: Different model names
+    index3 = models.Index(fields=['name'], name='test_idx')
+    operations3 = [
+        migrations.AddIndex(model_name='testmodel1', index=index3),
+        migrations.RemoveIndex(model_name='testmodel2', name='test_idx'),
+    ]
+    run_test("Different model names", operations3)
+
+    # Test case 4: Different field lists
+    index4a = models.Index(fields=['name'], name='test_idx')
+    index4b = models.Index(fields=['email'], name='test_idx')
+    operations4 = [
+        migrations.AddIndex(model_name='testmodel', index=index4a),
+        migrations.RemoveIndex(model_name='testmodel', name='test_idx'),
+    ]
+    run_test("Different field lists", operations4)
+
+    # Test case 5: Reverse order
+    index5 = models.Index(fields=['name'], name='test_idx')
+    operations5 = [
+        migrations.RemoveIndex(model_name='testmodel', name='test_idx'),
+        migrations.AddIndex(model_name='testmodel', index=index5),
+    ]
+    run_test("Reverse order", operations5)
+
+if __name__ == '__main__':
+    test_index_optimization()
\ No newline at end of file
