diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py
index 494890cc23..12ae3fc77b 100644
--- a/django/contrib/staticfiles/storage.py
+++ b/django/contrib/staticfiles/storage.py
@@ -220,23 +220,30 @@ class HashedFilesMixin:
 
         # where to store the new paths
         hashed_files = {}
+        processed_files = {}  # Track latest hashed name for each file
 
         # build a list of adjustable files
         adjustable_paths = [
             path for path in paths
             if matches_patterns(path, self._patterns)
         ]
-        # Do a single pass first. Post-process all files once, then repeat for
-        # adjustable files.
+        
+        # Do a single pass first. Post-process all files once.
         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):
-            yield name, hashed_name, processed
+            if processed and hashed_name:
+                processed_files[name] = hashed_name
+                yield name, hashed_name, processed
 
+        # Only process adjustable files in subsequent passes
         paths = {path: paths[path] for path in adjustable_paths}
 
         for i in range(self.max_post_process_passes):
             substitutions = False
             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):
-                yield name, hashed_name, processed
+                # Only yield if the file was processed and its hash changed from last time
+                if processed and hashed_name and hashed_name != processed_files.get(name):
+                    processed_files[name] = hashed_name
+                    yield name, hashed_name, processed
                 substitutions = substitutions or subst
 
             if not substitutions:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..d523b95fc8
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,60 @@
+import os
+import tempfile
+import shutil
+from django.conf import settings
+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage
+from django.core.files.storage import FileSystemStorage
+
+# Configure Django settings
+settings.configure(
+    STATIC_URL='/static/',
+    STATIC_ROOT=tempfile.mkdtemp(),
+    DEBUG=False,
+)
+
+# Create a temporary directory for source files
+source_dir = tempfile.mkdtemp()
+
+# Create test CSS files
+css_content = """
+@import url("other.css");
+body {
+    background: url("bg.png");
+}
+"""
+
+other_css = """
+.other {
+    background: url("bg2.png");
+}
+"""
+
+# Write test files
+with open(os.path.join(source_dir, 'base.css'), 'w') as f:
+    f.write(css_content)
+with open(os.path.join(source_dir, 'other.css'), 'w') as f:
+    f.write(other_css)
+with open(os.path.join(source_dir, 'bg.png'), 'wb') as f:
+    f.write(b'fake png content')
+with open(os.path.join(source_dir, 'bg2.png'), 'wb') as f:
+    f.write(b'fake png content 2')
+
+# Create storage instances
+source_storage = FileSystemStorage(source_dir)
+storage = ManifestStaticFilesStorage()
+
+# Collect static files
+paths = {
+    'base.css': (source_storage, 'base.css'),
+    'other.css': (source_storage, 'other.css'),
+    'bg.png': (source_storage, 'bg.png'),
+    'bg2.png': (source_storage, 'bg2.png'),
+}
+
+print("Processing files...")
+for name, hashed_name, processed in storage.post_process(paths):
+    print(f"Post-processed '{name}' as '{hashed_name}'")
+
+# Cleanup
+shutil.rmtree(source_dir)
+shutil.rmtree(settings.STATIC_ROOT)
\ No newline at end of file
