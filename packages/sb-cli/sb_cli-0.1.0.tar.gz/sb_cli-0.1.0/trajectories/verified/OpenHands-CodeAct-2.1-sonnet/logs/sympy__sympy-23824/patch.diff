diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..e8b27a398c
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,19 @@
+from sympy.physics.hep.gamma_matrices import GammaMatrix as G, gamma_trace, LorentzIndex
+from sympy.physics.hep.gamma_matrices import kahane_simplify
+from sympy.tensor.tensor import tensor_indices
+
+def test_kahane_leading_gamma_matrix_bug():
+    mu, nu, rho, sigma = tensor_indices("mu, nu, rho, sigma", LorentzIndex)
+    
+    t = G(mu)*G(-mu)*G(rho)*G(sigma)
+    r = kahane_simplify(t)
+    print(r)
+    assert r.equals(4*G(rho)*G(sigma))
+    
+    t = G(rho)*G(sigma)*G(mu)*G(-mu)
+    r = kahane_simplify(t)
+    print(r)
+    assert r.equals(4*G(rho)*G(sigma))
+
+if __name__ == "__main__":
+    test_kahane_leading_gamma_matrix_bug()
\ No newline at end of file
diff --git a/sympy/physics/hep/gamma_matrices.py b/sympy/physics/hep/gamma_matrices.py
index 23284e4a92..b9c3fb8194 100644
--- a/sympy/physics/hep/gamma_matrices.py
+++ b/sympy/physics/hep/gamma_matrices.py
@@ -631,7 +631,9 @@ def kahane_simplify(expression):
 
         if pointer == previous_pointer:
             break
-        if pointer >=0 and free_pos[pointer] is not None:
+        if pointer >= 0 and free_pos[pointer] is not None:
+            # For free indices encountered in the main loop,
+            # preserve their original order
             for ri in resulting_indices:
                 ri.append(free_pos[pointer])
 
@@ -674,7 +676,9 @@ def kahane_simplify(expression):
                 pointer = next_ones[0]
 
             if pointer >= first_dum_pos and free_pos[pointer] is not None:
-                prepend_indices.insert(0, free_pos[pointer])
+                # For free indices in connected components,
+                # append them in the order they appear
+                prepend_indices.append(free_pos[pointer])
         # if `prepend_indices` is void, it means there are no free indices
         # in the loop (and it can be shown that there must be a virtual index),
         # loops of virtual indices only contribute by a factor of two:
@@ -683,19 +687,21 @@ def kahane_simplify(expression):
         # otherwise, add the free indices in `prepend_indices` to
         # the `resulting_indices`:
         else:
-            expr1 = prepend_indices
-            expr2 = list(reversed(prepend_indices))
-            resulting_indices = [expri + ri for ri in resulting_indices for expri in (expr1, expr2)]
+            # For gamma matrices that are not part of any contraction,
+            # we want to preserve their original order
+            resulting_indices = [prepend_indices + ri for ri in resulting_indices]
 
     # sign correction, as described in Kahane's paper:
     resulting_coeff *= -1 if (number_of_contractions - connected_components + 1) % 2 else 1
     # power of two factor, as described in Kahane's paper:
     resulting_coeff *= 2**(number_of_contractions)
 
-    # If `first_dum_pos` is not zero, it means that there are trailing free gamma
-    # matrices in front of `expression`, so multiply by them:
-    for i in range(0, first_dum_pos):
-        [ri.insert(0, free_pos[i]) for ri in resulting_indices]
+    # If `first_dum_pos` is not zero, it means that there are leading free gamma
+    # matrices in front of `expression`, so multiply by them in the original order.
+    # We iterate in reverse order because insert(0) reverses the order.
+    for i in range(first_dum_pos - 1, -1, -1):
+        if free_pos[i] is not None:
+            [ri.insert(0, free_pos[i]) for ri in resulting_indices]
 
     resulting_expr = S.Zero
     for i in resulting_indices:
