diff --git a/bug_reproduction.png b/bug_reproduction.png
new file mode 100644
index 0000000000..5064d906c7
Binary files /dev/null and b/bug_reproduction.png differ
diff --git a/lib/matplotlib/axis.py b/lib/matplotlib/axis.py
index 887cf97ef1..e15b2e49e9 100644
--- a/lib/matplotlib/axis.py
+++ b/lib/matplotlib/axis.py
@@ -806,10 +806,35 @@ class Axis(martist.Artist):
         # Clear the callback registry for this axis, or it may "leak"
         self.callbacks = cbook.CallbackRegistry()
 
+        # Store shared axis state before resetting
+        shared_axes = None
+        if hasattr(self.axes, '_shared_axes'):
+            if self.axes in self.axes._shared_axes['x'].get_siblings(self.axes):
+                shared_axes = 'x'
+            elif self.axes in self.axes._shared_axes['y'].get_siblings(self.axes):
+                shared_axes = 'y'
+
         self._reset_major_tick_kw()
         self._reset_minor_tick_kw()
         self.reset_ticks()
 
+        # Restore shared axis state
+        if shared_axes:
+            if shared_axes == 'x' and isinstance(self, XAxis):
+                # Hide all but the bottom-most axis
+                siblings = self.axes._shared_axes['x'].get_siblings(self.axes)
+                is_bottom = self.axes == min(siblings, key=lambda ax: ax.get_position().y0)
+                if not is_bottom:
+                    self.set_tick_params(labelbottom=False)
+                    self.set_tick_params(which='both', bottom=True, top=False)
+            elif shared_axes == 'y' and isinstance(self, YAxis):
+                # Hide all but the left-most axis
+                siblings = self.axes._shared_axes['y'].get_siblings(self.axes)
+                is_left = self.axes == min(siblings, key=lambda ax: ax.get_position().x0)
+                if not is_left:
+                    self.set_tick_params(labelleft=False)
+                    self.set_tick_params(which='both', left=True, right=False)
+
         self.converter = None
         self.units = None
         self.set_units(None)
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..e7135b63b5
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,14 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+fig, axes = plt.subplots(2, 2, sharex=True, sharey=True)
+
+x = np.arange(0.0, 2*np.pi, 0.01)
+y = np.sin(x)
+
+for ax in axes.flatten():
+    ax.clear()
+    ax.plot(x, y)
+
+plt.savefig('bug_reproduction.png')
+plt.close()
\ No newline at end of file
diff --git a/test_1x2.png b/test_1x2.png
new file mode 100644
index 0000000000..9d29d2bc3f
Binary files /dev/null and b/test_1x2.png differ
diff --git a/test_2x1.png b/test_2x1.png
new file mode 100644
index 0000000000..331e47d46b
Binary files /dev/null and b/test_2x1.png differ
diff --git a/test_3x3.png b/test_3x3.png
new file mode 100644
index 0000000000..33fa96e793
Binary files /dev/null and b/test_3x3.png differ
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..fedfebaed9
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,51 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test case 1: Different subplot configurations
+def test_different_configs():
+    # 2x1 subplots
+    fig, axes = plt.subplots(2, 1, sharex=True)
+    x = np.arange(0.0, 2*np.pi, 0.01)
+    y = np.sin(x)
+    for ax in axes:
+        ax.clear()
+        ax.plot(x, y)
+    plt.savefig('test_2x1.png')
+    plt.close()
+
+    # 1x2 subplots
+    fig, axes = plt.subplots(1, 2, sharey=True)
+    for ax in axes:
+        ax.clear()
+        ax.plot(x, y)
+    plt.savefig('test_1x2.png')
+    plt.close()
+
+    # 3x3 subplots
+    fig, axes = plt.subplots(3, 3, sharex=True, sharey=True)
+    for ax in axes.flat:
+        ax.clear()
+        ax.plot(x, y)
+    plt.savefig('test_3x3.png')
+    plt.close()
+
+# Test case 2: Mixed sharing
+def test_mixed_sharing():
+    fig = plt.figure()
+    ax1 = fig.add_subplot(221)
+    ax2 = fig.add_subplot(222, sharey=ax1)
+    ax3 = fig.add_subplot(223, sharex=ax1)
+    ax4 = fig.add_subplot(224, sharex=ax2, sharey=ax3)
+    
+    x = np.arange(0.0, 2*np.pi, 0.01)
+    y = np.sin(x)
+    
+    for ax in [ax1, ax2, ax3, ax4]:
+        ax.clear()
+        ax.plot(x, y)
+    plt.savefig('test_mixed_sharing.png')
+    plt.close()
+
+# Run all tests
+test_different_configs()
+test_mixed_sharing()
\ No newline at end of file
diff --git a/test_mixed_sharing.png b/test_mixed_sharing.png
new file mode 100644
index 0000000000..605f862a4b
Binary files /dev/null and b/test_mixed_sharing.png differ
