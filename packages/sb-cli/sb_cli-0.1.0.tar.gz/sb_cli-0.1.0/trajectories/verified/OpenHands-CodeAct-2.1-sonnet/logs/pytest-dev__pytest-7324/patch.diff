diff --git a/reproducer.py b/reproducer.py
new file mode 100644
index 000000000..4e585c923
--- /dev/null
+++ b/reproducer.py
@@ -0,0 +1,29 @@
+from _pytest._code import compile
+
+def test_compile(source, mode="eval"):
+    try:
+        result = compile(source, mode=mode)
+        print(f"Success compiling {source!r} in {mode} mode")
+        if mode == "eval":
+            print(f"Result: {eval(result)}")
+    except Exception as e:
+        print(f"Error compiling {source!r} in {mode} mode: {e}")
+
+# Test special keywords in eval mode
+test_compile("False")
+test_compile("True")
+test_compile("None")
+
+# Test normal expressions in eval mode
+test_compile("1 + 2")
+test_compile("'hello'")
+
+# Test special keywords in exec mode
+test_compile("False", mode="exec")
+test_compile("True", mode="exec")
+test_compile("None", mode="exec")
+
+# Test edge cases
+test_compile("  False  ")  # with whitespace
+test_compile("False # comment")  # with comment
+test_compile("False\n")  # with newline
\ No newline at end of file
diff --git a/src/_pytest/_code/source.py b/src/_pytest/_code/source.py
index 3f732792f..6c3b2efe1 100644
--- a/src/_pytest/_code/source.py
+++ b/src/_pytest/_code/source.py
@@ -272,6 +272,14 @@ def compile_(  # noqa: F811
         co = compile(source, filename, mode, flags, dont_inherit)
         assert isinstance(co, (CodeType, ast.AST))
         return co
+    
+    # Handle special Python keywords that can't be used as names
+    if isinstance(source, str) and mode == "eval":
+        source_str = source.strip()
+        if source_str in ("True", "False", "None"):
+            # For these special values, wrap them in parentheses to make them expressions
+            source = "(" + source_str + ")"
+    
     _genframe = sys._getframe(1)  # the caller
     s = Source(source)
     return s.compile(filename, mode, flags, _genframe=_genframe)
