diff --git a/books.json b/books.json
new file mode 100644
index 0000000000..566f0ef2cd
--- /dev/null
+++ b/books.json
@@ -0,0 +1,41 @@
+[
+{
+    "model": "testapp.author",
+    "fields": {
+        "name": "JR Tolkien"
+    }
+},
+{
+    "model": "testapp.author",
+    "fields": {
+        "name": "JK Rowling"
+    }
+},
+{
+    "model": "testapp.book",
+    "fields": {
+        "title": "The Ring",
+        "author": [
+            "JR Tolkien"
+        ]
+    }
+},
+{
+    "model": "testapp.book",
+    "fields": {
+        "title": "The Two Towers",
+        "author": [
+            "JR Tolkien"
+        ]
+    }
+},
+{
+    "model": "testapp.book",
+    "fields": {
+        "title": "Harry Potter",
+        "author": [
+            "JK Rowling"
+        ]
+    }
+}
+]
\ No newline at end of file
diff --git a/django/core/serializers/base.py b/django/core/serializers/base.py
index da85cb4b92..77678169ba 100644
--- a/django/core/serializers/base.py
+++ b/django/core/serializers/base.py
@@ -336,12 +336,18 @@ def build_instance(Model, data, db):
         and hasattr(default_manager, "get_by_natural_key")
         and hasattr(Model, "natural_key")
     ):
-        natural_key = Model(**data).natural_key()
+        # Create instance without accessing foreign keys
+        instance = Model()
+        for field_name, value in data.items():
+            field = Model._meta.get_field(field_name)
+            if not field.remote_field:  # Only set non-relation fields
+                setattr(instance, field_name, value)
         try:
+            natural_key = instance.natural_key()
             data[Model._meta.pk.attname] = Model._meta.pk.to_python(
                 default_manager.db_manager(db).get_by_natural_key(*natural_key).pk
             )
-        except Model.DoesNotExist:
+        except (Model.DoesNotExist, AttributeError):
             pass
     return Model(**data)
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..0035a047cb
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,98 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.management import call_command
+from django.db import connections
+
+# Add the current directory to Python path
+sys.path.append(os.path.dirname(os.path.abspath(__file__)))
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': 'default.db',
+        },
+        'other': {
+            'ENGINE': 'django.db.backends.sqlite3', 
+            'NAME': 'other.db',
+        }
+    },
+    INSTALLED_APPS=[
+        'testapp',
+    ]
+)
+
+django.setup()
+
+# Create the databases
+for db in connections.all():
+    db.creation.create_test_db(verbosity=1)
+
+# Create fixture data
+fixture_data = '''[
+{
+    "model": "testapp.author",
+    "fields": {
+        "name": "JR Tolkien"
+    }
+},
+{
+    "model": "testapp.author",
+    "fields": {
+        "name": "JK Rowling"
+    }
+},
+{
+    "model": "testapp.book",
+    "fields": {
+        "title": "The Ring",
+        "author": [
+            "JR Tolkien"
+        ]
+    }
+},
+{
+    "model": "testapp.book",
+    "fields": {
+        "title": "The Two Towers",
+        "author": [
+            "JR Tolkien"
+        ]
+    }
+},
+{
+    "model": "testapp.book",
+    "fields": {
+        "title": "Harry Potter",
+        "author": [
+            "JK Rowling"
+        ]
+    }
+}
+]'''
+
+with open('books.json', 'w') as f:
+    f.write(fixture_data)
+
+# Try to load data into other database
+print("Loading data into 'other' database...")
+try:
+    call_command('loaddata', 'books.json', database='other', verbosity=1)
+except Exception as e:
+    import traceback
+    print(f"Error: {e}")
+    print("Traceback:")
+    print(traceback.format_exc())
+
+# Verify the data was loaded correctly
+print("\nVerifying data in 'other' database...")
+from django.db import connections
+with connections['other'].cursor() as cursor:
+    cursor.execute("SELECT * FROM testapp_author")
+    print("Authors:", cursor.fetchall())
+    cursor.execute("SELECT * FROM testapp_book")
+    print("Books:", cursor.fetchall())
\ No newline at end of file
diff --git a/testapp/__init__.py b/testapp/__init__.py
new file mode 100644
index 0000000000..9bba8a553d
--- /dev/null
+++ b/testapp/__init__.py
@@ -0,0 +1 @@
+# testapp module
\ No newline at end of file
diff --git a/testapp/models.py b/testapp/models.py
new file mode 100644
index 0000000000..fd3c7ff9dc
--- /dev/null
+++ b/testapp/models.py
@@ -0,0 +1,37 @@
+from django.db import models
+
+class AuthorManager(models.Manager):
+    def get_by_natural_key(self, name):
+        return self.get(name=name)
+
+class Author(models.Model):
+    id = models.AutoField(primary_key=True)
+    name = models.CharField(max_length=255, unique=True)
+    objects = AuthorManager()
+
+    def natural_key(self):
+        return (self.name,)
+
+    def __str__(self):
+        return f"{self.id} {self.name}"
+
+class BookManager(models.Manager):
+    def get_by_natural_key(self, title, author):
+        return self.get(title=title, author__name=author)
+
+class Book(models.Model):
+    id = models.AutoField(primary_key=True)
+    title = models.CharField(max_length=255)
+    author = models.ForeignKey(Author, models.DO_NOTHING, related_name="books")
+    objects = BookManager()
+
+    def natural_key(self):
+        return (self.title,) + self.author.natural_key()
+
+    natural_key.dependencies = ["testapp.Author"]
+
+    class Meta:
+        unique_together = [["title", "author"]]
+
+    def __str__(self):
+        return f"{self.id}: '{self.title}' by {self.author}"
\ No newline at end of file
