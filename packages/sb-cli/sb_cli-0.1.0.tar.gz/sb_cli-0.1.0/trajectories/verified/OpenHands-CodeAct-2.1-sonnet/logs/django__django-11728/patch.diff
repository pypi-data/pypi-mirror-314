diff --git a/django/contrib/admindocs/utils.py b/django/contrib/admindocs/utils.py
index 1ce4594501..f79a80d76c 100644
--- a/django/contrib/admindocs/utils.py
+++ b/django/contrib/admindocs/utils.py
@@ -166,13 +166,8 @@ def replace_named_groups(pattern):
     for start, end, group_name in named_group_indices:
         # Handle nested parentheses, e.g. '^(?P<a>(x|y))/b'.
         unmatched_open_brackets, prev_char = 1, None
+        found_end = False
         for idx, val in enumerate(pattern[end:]):
-            # If brackets are balanced, the end of the string for the current
-            # named capture group pattern has been reached.
-            if unmatched_open_brackets == 0:
-                group_pattern_and_name.append((pattern[start:end + idx], group_name))
-                break
-
             # Check for unescaped `(` and `)`. They mark the start and end of a
             # nested group.
             if val == '(' and prev_char != '\\':
@@ -181,6 +176,26 @@ def replace_named_groups(pattern):
                 unmatched_open_brackets -= 1
             prev_char = val
 
+            # If brackets are balanced, the end of the string for the current
+            # named capture group pattern has been reached.
+            if unmatched_open_brackets == 0:
+                group_pattern_and_name.append((pattern[start:end + idx + 1], group_name))
+                found_end = True
+                break
+
+        # Handle case where pattern ends at the end of string without finding a closing bracket
+        if not found_end:
+            # Look for the last unescaped closing bracket
+            rest = pattern[end:]
+            last_close = None
+            prev_char = None
+            for idx, val in enumerate(rest):
+                if val == ')' and prev_char != '\\':
+                    last_close = idx
+                prev_char = val
+            if last_close is not None:
+                group_pattern_and_name.append((pattern[start:end + last_close + 1], group_name))
+
     # Replace the string for named capture groups with their group names.
     for group_pattern, group_name in group_pattern_and_name:
         pattern = pattern.replace(group_pattern, group_name)
diff --git a/reproduce_bug.py b/reproduce_bug.py
new file mode 100644
index 0000000000..65ef3dc170
--- /dev/null
+++ b/reproduce_bug.py
@@ -0,0 +1,17 @@
+from django.contrib.admindocs.utils import replace_named_groups
+
+def test_pattern(pattern, desc=""):
+    print(f"\nTest {desc}:" if desc else "")
+    print("Original pattern:", pattern)
+    print("After replace_named_groups:", replace_named_groups(pattern))
+
+# Original test cases
+test_pattern(r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)', "without trailing slash")
+test_pattern(r'entries/(?P<pk>[^/.]+)/relationships/(?P<related_field>\w+)/', "with trailing slash")
+
+# Edge cases
+test_pattern(r'(?P<single>\w+)', "single group")
+test_pattern(r'(?P<nested>(?P<inner>\w+))', "nested groups")
+test_pattern(r'(?P<escaped>\w+\)not-end)\w+', "escaped parenthesis")
+test_pattern(r'(?P<a>\w+)/(?P<b>\w+)/(?P<c>\w+)', "multiple groups")
+test_pattern(r'(?P<complex>[^/.]+/\w+)/(?P<next>\d+)', "complex pattern")
\ No newline at end of file
