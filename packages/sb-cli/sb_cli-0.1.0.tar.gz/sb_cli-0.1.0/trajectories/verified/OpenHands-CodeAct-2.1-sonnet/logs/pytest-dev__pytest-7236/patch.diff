diff --git a/src/_pytest/unittest.py b/src/_pytest/unittest.py
index 773f545af..09b561c94 100644
--- a/src/_pytest/unittest.py
+++ b/src/_pytest/unittest.py
@@ -115,6 +115,12 @@ class TestCaseFunction(Function):
     def setup(self):
         # a bound method to be called during teardown() if set (see 'runtest()')
         self._explicit_tearDown = None
+        
+        # Check if the class is skipped
+        if getattr(self.parent.obj, "__unittest_skip__", False):
+            pytest.skip(self.parent.obj.__unittest_skip_why__)
+            return
+            
         self._testcase = self.parent.obj(self.name)
         self._obj = getattr(self._testcase, self.name)
         if hasattr(self, "_request"):
@@ -210,6 +216,11 @@ class TestCaseFunction(Function):
 
         maybe_wrap_pytest_function_for_tracing(self)
 
+        # Check if the test method is skipped
+        if getattr(self.obj, "__unittest_skip__", False):
+            pytest.skip(self.obj.__unittest_skip_why__)
+            return
+
         # let the unittest framework handle async functions
         if is_async_function(self.obj):
             self._testcase(self)
diff --git a/test_repro.py b/test_repro.py
new file mode 100644
index 000000000..acd48e5c2
--- /dev/null
+++ b/test_repro.py
@@ -0,0 +1,29 @@
+import unittest
+
+@unittest.skip("skipped class")
+class SkippedTestCase(unittest.TestCase):
+    def setUp(self):
+        print("setUp called")
+        
+    def tearDown(self):
+        print("tearDown called")
+        
+    def test_one(self):
+        print("test_one called")
+        
+    def test_two(self):
+        print("test_two called")
+
+class NormalTestCase(unittest.TestCase):
+    def setUp(self):
+        print("setUp called")
+        
+    def tearDown(self):
+        print("tearDown called")
+        
+    @unittest.skip("hello")
+    def test_one(self):
+        print("test_one called")
+        
+    def test_two(self):
+        print("test_two called")
\ No newline at end of file
