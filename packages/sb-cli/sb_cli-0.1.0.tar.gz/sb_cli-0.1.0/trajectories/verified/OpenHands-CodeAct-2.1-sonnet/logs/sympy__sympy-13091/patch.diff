diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..27a64c53f8
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,36 @@
+import sympy
+
+# Test case 1: Basic class that always returns True
+class Foo:
+    def __eq__(self, other):
+        if isinstance(other, sympy.Basic):
+            return True
+        return NotImplemented
+
+# Test case 2: Class that returns NotImplemented
+class Bar:
+    def __eq__(self, other):
+        return NotImplemented
+
+# Test case 3: Class that returns False
+class Baz:
+    def __eq__(self, other):
+        return False
+
+# Create instances
+f = Foo()
+b = Bar()
+z = Baz()
+s = sympy.Symbol('x')
+
+print("=== Test case 1: Class that returns True ===")
+print("f == s:", f == s)  # Should be True (Foo.__eq__ is called)
+print("s == f:", s == f)  # Should be True (Basic.__eq__ delegates to Foo.__eq__)
+
+print("\n=== Test case 2: Class that returns NotImplemented ===")
+print("b == s:", b == s)  # Should be False (both return NotImplemented)
+print("s == b:", s == b)  # Should be False (both return NotImplemented)
+
+print("\n=== Test case 3: Class that returns False ===")
+print("z == s:", z == s)  # Should be False (Baz.__eq__ returns False)
+print("s == z:", s == z)  # Should be False (Basic.__eq__ delegates to Baz.__eq__)
\ No newline at end of file
diff --git a/sympy/core/basic.py b/sympy/core/basic.py
index db4e971848..a445145d86 100644
--- a/sympy/core/basic.py
+++ b/sympy/core/basic.py
@@ -313,7 +313,7 @@ def __eq__(self, other):
             try:
                 other = _sympify(other)
             except SympifyError:
-                return False    # sympy != other
+                return NotImplemented    # delegate comparison to the other object
 
             if type(self) != type(other):
                 return False
