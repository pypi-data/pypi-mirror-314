diff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py
index 5e7b23f9a0..bd461810e3 100644
--- a/django/contrib/admin/options.py
+++ b/django/contrib/admin/options.py
@@ -580,9 +580,15 @@ class ModelAdmin(BaseModelAdmin):
     def __str__(self):
         return "%s.%s" % (self.model._meta.app_label, self.__class__.__name__)
 
+    def get_inlines(self, request, obj=None):
+        """
+        Hook for specifying custom inlines based on the request or model instance.
+        """
+        return self.inlines
+
     def get_inline_instances(self, request, obj=None):
         inline_instances = []
-        for inline_class in self.inlines:
+        for inline_class in self.get_inlines(request, obj):
             inline = inline_class(self.model, self.admin_site)
             if request:
                 if not (inline.has_view_or_change_permission(request, obj) or
diff --git a/test_app/manage.py b/test_app/manage.py
new file mode 100644
index 0000000000..f945abde8d
--- /dev/null
+++ b/test_app/manage.py
@@ -0,0 +1,15 @@
+#!/usr/bin/env python
+import os
+import sys
+
+if __name__ == "__main__":
+    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "test_project.settings")
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/test_app/test_inlines/__init__.py b/test_app/test_inlines/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/test_inlines/admin.py b/test_app/test_inlines/admin.py
new file mode 100644
index 0000000000..2b4749a3fd
--- /dev/null
+++ b/test_app/test_inlines/admin.py
@@ -0,0 +1,14 @@
+from django.contrib import admin
+from .models import Book, Chapter
+
+class ChapterInline(admin.TabularInline):
+    model = Chapter
+
+class BookAdmin(admin.ModelAdmin):
+    def get_inlines(self, request, obj=None):
+        # Only show chapters for books with titles longer than 10 chars
+        if obj and len(obj.title) > 10:
+            return [ChapterInline]
+        return []
+
+admin.site.register(Book, BookAdmin)
\ No newline at end of file
diff --git a/test_app/test_inlines/apps.py b/test_app/test_inlines/apps.py
new file mode 100644
index 0000000000..7ae1b930f5
--- /dev/null
+++ b/test_app/test_inlines/apps.py
@@ -0,0 +1,4 @@
+from django.apps import AppConfig
+
+class TestInlinesConfig(AppConfig):
+    name = 'test_inlines'
\ No newline at end of file
diff --git a/test_app/test_inlines/models.py b/test_app/test_inlines/models.py
new file mode 100644
index 0000000000..de058d465b
--- /dev/null
+++ b/test_app/test_inlines/models.py
@@ -0,0 +1,12 @@
+from django.db import models
+
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+
+class Chapter(models.Model):
+    book = models.ForeignKey(Book, on_delete=models.CASCADE)
+    title = models.CharField(max_length=100)
\ No newline at end of file
diff --git a/test_app/test_inlines/tests.py b/test_app/test_inlines/tests.py
new file mode 100644
index 0000000000..40a41bd50b
--- /dev/null
+++ b/test_app/test_inlines/tests.py
@@ -0,0 +1,43 @@
+from django.test import TestCase, RequestFactory
+from django.contrib import admin
+from django.contrib.auth.models import User
+from .models import Author, Book
+from .admin import BookAdmin, ChapterInline
+
+class TestInlines(TestCase):
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.user = User.objects.create_superuser(
+            username='admin',
+            email='admin@example.com',
+            password='password'
+        )
+        self.author = Author.objects.create(name="Test Author")
+        self.short_book = Book.objects.create(title="Short", author=self.author)
+        self.long_book = Book.objects.create(title="Very Long Title", author=self.author)
+        self.admin = BookAdmin(Book, admin.site)
+
+    def test_get_inlines(self):
+        request = self.factory.get('/')
+        request.user = self.user
+        
+        # Test with short title book
+        inlines = self.admin.get_inlines(request, self.short_book)
+        self.assertEqual(inlines, [])
+        
+        # Test with long title book
+        inlines = self.admin.get_inlines(request, self.long_book)
+        self.assertEqual(inlines, [ChapterInline])
+
+    def test_get_inline_instances(self):
+        request = self.factory.get('/')
+        request.user = self.user
+        
+        # Test with short title book
+        instances = self.admin.get_inline_instances(request, self.short_book)
+        self.assertEqual(len(instances), 0)
+        
+        # Test with long title book
+        instances = self.admin.get_inline_instances(request, self.long_book)
+        self.assertEqual(len(instances), 1)
+        self.assertIsInstance(instances[0], ChapterInline)
\ No newline at end of file
diff --git a/test_app/test_project/__init__.py b/test_app/test_project/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/test_project/settings.py b/test_app/test_project/settings.py
new file mode 100644
index 0000000000..0cac97817f
--- /dev/null
+++ b/test_app/test_project/settings.py
@@ -0,0 +1,83 @@
+import os
+
+BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
+
+SECRET_KEY = 'test-key'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+    'test_inlines',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'test_project.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
+    }
+}
+
+AUTH_PASSWORD_VALIDATORS = [
+    {
+        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
+    },
+    {
+        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
+    },
+]
+
+LANGUAGE_CODE = 'en-us'
+
+TIME_ZONE = 'UTC'
+
+USE_I18N = True
+
+USE_L10N = True
+
+USE_TZ = True
+
+STATIC_URL = '/static/'
\ No newline at end of file
diff --git a/test_app/test_project/urls.py b/test_app/test_project/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/test_app/test_project/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
diff --git a/test_inlines.py b/test_inlines.py
new file mode 100644
index 0000000000..f3309d70e7
--- /dev/null
+++ b/test_inlines.py
@@ -0,0 +1,136 @@
+from django.contrib import admin
+from django.db import models
+from django.test import TestCase, RequestFactory, override_settings
+
+# Test models
+class Author(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_inlines'
+
+class Book(models.Model):
+    title = models.CharField(max_length=100)
+    author = models.ForeignKey(Author, on_delete=models.CASCADE)
+    
+    class Meta:
+        app_label = 'test_inlines'
+
+class Chapter(models.Model):
+    book = models.ForeignKey(Book, on_delete=models.CASCADE)
+    title = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'test_inlines'
+
+# Inlines
+class ChapterInline(admin.TabularInline):
+    model = Chapter
+
+# Custom ModelAdmin
+class BookAdmin(admin.ModelAdmin):
+    def get_inlines(self, request, obj=None):
+        # Only show chapters for books with titles longer than 10 chars
+        if obj and len(obj.title) > 10:
+            return [ChapterInline]
+        return []
+
+# Test case
+@override_settings(
+    INSTALLED_APPS=[
+        'django.contrib.admin',
+        'django.contrib.auth',
+        'django.contrib.contenttypes',
+        'django.contrib.sessions',
+        'django.contrib.messages',
+        'django.contrib.staticfiles',
+        'test_inlines',
+    ],
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    MIDDLEWARE=[
+        'django.middleware.security.SecurityMiddleware',
+        'django.contrib.sessions.middleware.SessionMiddleware',
+        'django.middleware.common.CommonMiddleware',
+        'django.middleware.csrf.CsrfViewMiddleware',
+        'django.contrib.auth.middleware.AuthenticationMiddleware',
+        'django.contrib.messages.middleware.MessageMiddleware',
+        'django.middleware.clickjacking.XFrameOptionsMiddleware',
+    ],
+    ROOT_URLCONF='django.contrib.admin.sites'
+)
+class TestInlines(TestCase):
+    def setUp(self):
+        self.factory = RequestFactory()
+        self.author = Author.objects.create(name="Test Author")
+        self.short_book = Book.objects.create(title="Short", author=self.author)
+        self.long_book = Book.objects.create(title="Very Long Title", author=self.author)
+        self.admin = BookAdmin(Book, admin.site)
+
+    def test_get_inlines(self):
+        request = self.factory.get('/')
+        
+        # Test with short title book
+        inlines = self.admin.get_inlines(request, self.short_book)
+        self.assertEqual(inlines, [])
+        
+        # Test with long title book
+        inlines = self.admin.get_inlines(request, self.long_book)
+        self.assertEqual(inlines, [ChapterInline])
+
+    def test_get_inline_instances(self):
+        request = self.factory.get('/')
+        
+        # Test with short title book
+        instances = self.admin.get_inline_instances(request, self.short_book)
+        self.assertEqual(len(instances), 0)
+        
+        # Test with long title book
+        instances = self.admin.get_inline_instances(request, self.long_book)
+        self.assertEqual(len(instances), 1)
+        self.assertIsInstance(instances[0], ChapterInline)
+
+if __name__ == '__main__':
+    import django
+    from django.conf import settings
+    settings.configure(
+        DEBUG=True,
+        SECRET_KEY='test-key',
+        INSTALLED_APPS=[
+            'django.contrib.admin',
+            'django.contrib.auth',
+            'django.contrib.contenttypes',
+            'django.contrib.sessions',
+            'django.contrib.messages',
+            'django.contrib.staticfiles',
+            'test_inlines',
+        ],
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        MIDDLEWARE=[
+            'django.middleware.security.SecurityMiddleware',
+            'django.contrib.sessions.middleware.SessionMiddleware',
+            'django.middleware.common.CommonMiddleware',
+            'django.middleware.csrf.CsrfViewMiddleware',
+            'django.contrib.auth.middleware.AuthenticationMiddleware',
+            'django.contrib.messages.middleware.MessageMiddleware',
+            'django.middleware.clickjacking.XFrameOptionsMiddleware',
+        ],
+        ROOT_URLCONF='django.contrib.admin.sites'
+    )
+    django.setup()
+    from django.test.runner import DiscoverRunner
+    test_runner = DiscoverRunner(verbosity=2)
+    failures = test_runner.run_tests(['__main__'])
+    if failures:
+        print("Tests failed!")
+    else:
+        print("Tests passed!")
\ No newline at end of file
diff --git a/test_settings.py b/test_settings.py
new file mode 100644
index 0000000000..2a1945fd72
--- /dev/null
+++ b/test_settings.py
@@ -0,0 +1,25 @@
+SECRET_KEY = 'test-key'
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+ROOT_URLCONF = 'django.contrib.admin.sites'
\ No newline at end of file
