diff --git a/sympy/sets/sets.py b/sympy/sets/sets.py
index 917717bb74..dd80837608 100644
--- a/sympy/sets/sets.py
+++ b/sympy/sets/sets.py
@@ -204,8 +204,20 @@ def _complement(self, other):
             return Union(p for p in product_sets if p != other)
 
         elif isinstance(other, Interval):
-            if isinstance(self, Interval) or isinstance(self, FiniteSet):
+            if isinstance(self, Interval):
                 return Intersection(other, self.complement(S.Reals))
+            elif isinstance(self, FiniteSet):
+                # For FiniteSet - Interval, we need to keep all elements that are not in the interval
+                # For symbolic elements, we can't determine if they're in the interval
+                # so we should keep them in the complement
+                result = []
+                for el in self:
+                    if el.is_number:
+                        if other.contains(el) != True:
+                            result.append(el)
+                    else:
+                        result.append(el)
+                return FiniteSet(*result)
 
         elif isinstance(other, Union):
             return Union(o - self for o in other.args)
@@ -1725,6 +1737,10 @@ def reduce(A, B):
         if isinstance(B, Union):
             return Intersection(s.complement(A) for s in B.args)
 
+        # For FiniteSet - Interval, we want to keep the complement notation
+        if isinstance(A, FiniteSet) and isinstance(B, Interval):
+            return Complement(A, B, evaluate=False)
+
         result = B._complement(A)
         if result != None:
             return result
