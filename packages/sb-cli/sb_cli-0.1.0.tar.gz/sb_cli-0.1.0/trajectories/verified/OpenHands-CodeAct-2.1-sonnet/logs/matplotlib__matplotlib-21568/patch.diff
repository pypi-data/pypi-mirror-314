diff --git a/lib/matplotlib/dates.py b/lib/matplotlib/dates.py
index 0766156d64..02c7958dfa 100644
--- a/lib/matplotlib/dates.py
+++ b/lib/matplotlib/dates.py
@@ -592,13 +592,15 @@ def drange(dstart, dend, delta):
 
 
 def _wrap_in_tex(text):
-    p = r'([a-zA-Z]+)'
-    ret_text = re.sub(p, r'}$\1$\\mathdefault{', text)
-
-    # Braces ensure dashes are not spaced like binary operators.
-    ret_text = '$\\mathdefault{'+ret_text.replace('-', '{-}')+'}$'
-    ret_text = ret_text.replace('$\\mathdefault{}$', '')
-    return ret_text
+    # Instead of wrapping each component in math mode, we'll wrap the whole thing
+    # in a single \textrm{} command to preserve spacing while still using TeX
+    # Escape any special TeX characters
+    text = text.replace('\\', r'\\').replace('{', r'\{').replace('}', r'\}')
+    text = text.replace('$', r'\$').replace('%', r'\%').replace('&', r'\&')
+    text = text.replace('#', r'\#').replace('_', r'\_').replace('^', r'\^')
+    text = text.replace('~', r'\~').replace('|', r'\|')
+    # Wrap in \textrm{} to use text mode formatting
+    return r'$\textrm{' + text + '}$'
 
 
 ## date tickers and formatters ###
diff --git a/output.png b/output.png
new file mode 100644
index 0000000000..5bfa5944ad
Binary files /dev/null and b/output.png differ
diff --git a/output_edge_cases.png b/output_edge_cases.png
new file mode 100644
index 0000000000..1473ff52be
Binary files /dev/null and b/output_edge_cases.png differ
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..4e3b1aed52
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,40 @@
+import matplotlib
+import matplotlib.pyplot as plt
+import numpy as np
+import pandas as pd
+from datetime import datetime, timezone, timedelta
+
+np.random.seed(1)
+matplotlib.rcParams["text.usetex"] = True
+
+# Test case 1: Basic datetime range
+dates1 = pd.date_range("2020-01-01 00:00:00", end="2020-01-01 00:10:00", periods=100)
+data1 = np.random.rand(100)
+
+# Test case 2: Dates with timezone
+tz = timezone(timedelta(hours=5))  # UTC+5
+dates2 = [datetime(2020, 1, 1, i, 0, tzinfo=tz) for i in range(24)]
+data2 = np.random.rand(24)
+
+# Test case 3: Dates with special characters in format
+dates3 = pd.date_range("2020-01-01", end="2020-12-31", freq="M")
+data3 = np.random.rand(len(dates3))
+
+fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(10, 12), constrained_layout=True)
+
+# Plot 1: Minutes and seconds
+ax1.plot(dates1.to_numpy(), data1)
+ax1.set_title("Minutes and Seconds")
+
+# Plot 2: Hours with timezone
+ax2.plot([d.astimezone(timezone.utc) for d in dates2], data2)
+ax2.set_title("Hours with Timezone (UTC+5)")
+
+# Plot 3: Months with custom format
+ax3.plot(dates3.to_numpy(), data3)
+ax3.set_title("Monthly Data")
+formatter = matplotlib.dates.DateFormatter("%Y-%m-%d (%a)", usetex=True)
+ax3.xaxis.set_major_formatter(formatter)
+plt.setp(ax3.get_xticklabels(), rotation=45, ha='right')
+
+plt.savefig("output_edge_cases.png")
\ No newline at end of file
