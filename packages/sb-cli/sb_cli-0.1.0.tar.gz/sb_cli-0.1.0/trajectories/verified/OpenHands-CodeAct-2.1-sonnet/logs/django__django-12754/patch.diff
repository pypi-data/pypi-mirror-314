diff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py
index 30616c0172..a9d4e56d80 100644
--- a/django/db/migrations/autodetector.py
+++ b/django/db/migrations/autodetector.py
@@ -181,8 +181,57 @@ class MigrationAutodetector:
         self.generate_removed_indexes()
         # Generate field operations
         self.generate_renamed_fields()
-        self.generate_removed_fields()
-        self.generate_added_fields()
+        
+        # Detect fields being moved to subclasses
+        moved_to_subclass = set()
+        for app_label, model_name, field_name in sorted(self.old_field_keys - self.new_field_keys):
+            old_model = self.old_apps.get_model(app_label, model_name)
+            old_field = old_model._meta.get_field(field_name)
+            
+            # Check if this field is being moved to a subclass
+            for new_app_label, new_model_name, new_field_name in sorted(self.new_field_keys - self.old_field_keys):
+                new_model = self.new_apps.get_model(new_app_label, new_model_name)
+                if (issubclass(new_model, old_model) and 
+                    new_field_name == field_name and
+                    self.deep_deconstruct(old_field) == self.deep_deconstruct(new_model._meta.get_field(new_field_name))):
+                    moved_to_subclass.add((app_label, model_name, field_name))
+                    break
+        
+        # Handle regular field removals
+        for app_label, model_name, field_name in sorted(self.old_field_keys - self.new_field_keys):
+            if (app_label, model_name, field_name) not in moved_to_subclass:
+                self._generate_removed_field(app_label, model_name, field_name)
+        
+        # Handle regular field additions
+        for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):
+            new_model = self.new_apps.get_model(app_label, model_name)
+            new_field = new_model._meta.get_field(field_name)
+            
+            # Skip fields that were moved from parent class
+            skip = False
+            for old_app_label, old_model_name, old_field_name in moved_to_subclass:
+                old_model = self.old_apps.get_model(old_app_label, old_model_name)
+                if (issubclass(new_model, old_model) and 
+                    old_field_name == field_name):
+                    skip = True
+                    break
+            if not skip:
+                self._generate_added_field(app_label, model_name, field_name)
+        
+        # Now handle fields being moved to subclasses
+        for app_label, model_name, field_name in sorted(moved_to_subclass):
+            # First remove the field from the parent class
+            self._generate_removed_field(app_label, model_name, field_name)
+            
+            # Then add it to the child class
+            for new_app_label, new_model_name, new_field_name in sorted(self.new_field_keys - self.old_field_keys):
+                new_model = self.new_apps.get_model(new_app_label, new_model_name)
+                old_model = self.old_apps.get_model(app_label, model_name)
+                if (issubclass(new_model, old_model) and 
+                    new_field_name == field_name):
+                    self._generate_added_field(new_app_label, new_model_name, new_field_name)
+                    break
+        
         self.generate_altered_fields()
         self.generate_altered_unique_together()
         self.generate_altered_index_together()
