diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 00000000..4371dc44
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,14 @@
+import xarray as xr
+import numpy as np
+
+good_indexed, bad_indexed = xr.DataArray([None]), xr.DataArray([None])
+
+class HasValues(object):
+    values = 5
+
+good_indexed.loc[{'dim_0': 0}] = set()
+bad_indexed.loc[{'dim_0': 0}] = HasValues()
+
+print("Good indexed values:", good_indexed.values)
+print("Bad indexed values:", bad_indexed.values)
+print("Bad indexed values type:", type(bad_indexed.values[0]))
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 00000000..441d0f07
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,29 @@
+import xarray as xr
+import numpy as np
+import pandas as pd
+
+# Test case 1: Regular object with values property
+class HasValues:
+    values = 5
+
+arr1 = xr.DataArray([None])
+arr1.loc[{'dim_0': 0}] = HasValues()
+print("Test 1 - Object with values:", arr1.values)
+print("Test 1 - Type:", type(arr1.values[0]))
+
+# Test case 2: Object with values and __array__
+class HasArrayInterface:
+    values = 7
+    def __array__(self):
+        return np.array(self.values)
+
+arr2 = xr.DataArray([None])
+arr2.loc[{'dim_0': 0}] = HasArrayInterface()
+print("\nTest 2 - Object with __array__:", arr2.values)
+print("Test 2 - Type:", type(arr2.values[0]))
+
+# Test case 3: Pandas Series
+arr3 = xr.DataArray([None])
+arr3.loc[{'dim_0': 0}] = pd.Series([3])[0]  # Get scalar value
+print("\nTest 3 - Pandas scalar:", arr3.values)
+print("Test 3 - Type:", type(arr3.values[0]))
\ No newline at end of file
diff --git a/xarray/core/variable.py b/xarray/core/variable.py
index 45553eb9..0d9f2857 100644
--- a/xarray/core/variable.py
+++ b/xarray/core/variable.py
@@ -217,8 +217,13 @@ def as_compatible_data(data, fastpath=False):
     if isinstance(data, timedelta):
         data = np.timedelta64(getattr(data, "value", data), "ns")
 
-    # we don't want nested self-described arrays
-    data = getattr(data, "values", data)
+    # we don't want nested self-described arrays, but we should only extract values
+    # from objects that are meant to be self-described arrays (pandas/xarray objects)
+    if isinstance(data, (pd.Series, pd.DataFrame)):
+        data = data.values
+    elif hasattr(data, "__array__"):
+        # For objects implementing __array__, we want to get their array representation
+        data = np.asarray(data)
 
     if isinstance(data, np.ma.MaskedArray):
         mask = np.ma.getmaskarray(data)
