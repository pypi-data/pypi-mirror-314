diff --git a/django/db/models/query.py b/django/db/models/query.py
index f8d848e926..f2f9797d88 100644
--- a/django/db/models/query.py
+++ b/django/db/models/query.py
@@ -670,7 +670,7 @@ class QuerySet:
                 when_statements = []
                 for obj in batch_objs:
                     attr = getattr(obj, field.attname)
-                    if not isinstance(attr, Expression):
+                    if not hasattr(attr, 'resolve_expression'):
                         attr = Value(attr, output_field=field)
                     when_statements.append(When(pk=obj.pk, then=attr))
                 case_statement = Case(*when_statements, output_field=field)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..da2c234d55
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,44 @@
+from django.conf import settings
+from django.db import models, connection
+from django.db.models import F
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:',
+        }
+    },
+    INSTALLED_APPS=[],
+)
+
+import django
+django.setup()
+
+# Create test model
+class SelfRef(models.Model):
+    name = models.CharField(max_length=100)
+    c8 = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+
+# Create tables
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(SelfRef)
+
+# Create test data
+obj = SelfRef.objects.create(name='test_name', c8='old_value')
+
+# Try to update using F expression
+obj.c8 = F('name')
+SelfRef.objects.bulk_update([obj], ['c8'])
+
+# Verify the result
+obj.refresh_from_db()
+print(f"c8 value after update: {obj.c8}")  # Should be 'test_name' but will be 'F(name)'
+
+# Show the SQL query
+print("\nLast SQL query:")
+print(connection.queries[-2]['sql'])
\ No newline at end of file
