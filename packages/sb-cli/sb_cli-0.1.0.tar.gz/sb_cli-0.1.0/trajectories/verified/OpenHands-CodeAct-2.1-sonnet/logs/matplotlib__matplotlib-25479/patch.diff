diff --git a/lib/matplotlib/cm.py b/lib/matplotlib/cm.py
index 38158db956..c0b8098112 100644
--- a/lib/matplotlib/cm.py
+++ b/lib/matplotlib/cm.py
@@ -145,7 +145,10 @@ class ColormapRegistry(Mapping):
             _api.warn_external(f"Overwriting the cmap {name!r} "
                                "that was already in the registry.")
 
-        self._cmaps[name] = cmap.copy()
+        # Create a copy of the colormap and update its name to match the registered name
+        registered_cmap = cmap.copy()
+        registered_cmap.name = name
+        self._cmaps[name] = registered_cmap
 
     def unregister(self, name):
         """
@@ -705,7 +708,8 @@ def _ensure_cmap(cmap):
     ----------
     cmap : None, str, Colormap
 
-        - if a `Colormap`, return it
+        - if a `Colormap`, return it if its name is registered, otherwise return
+          the registered colormap with the same name
         - if a string, look it up in mpl.colormaps
         - if None, look up the default color map in mpl.colormaps
 
@@ -715,6 +719,13 @@ def _ensure_cmap(cmap):
 
     """
     if isinstance(cmap, colors.Colormap):
+        # If the colormap is registered under its name, return it
+        if cmap.name in _colormaps and _colormaps[cmap.name] == cmap:
+            return cmap
+        # Otherwise, try to find a registered colormap with the same name
+        if cmap.name in _colormaps:
+            return _colormaps[cmap.name]
+        # If no registered colormap found with that name, return the original
         return cmap
     cmap_name = cmap if cmap is not None else mpl.rcParams["image.cmap"]
     # use check_in_list to ensure type stability of the exception raised by
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..d51fe29e8b
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,13 @@
+from matplotlib import cm
+from matplotlib.colors import LinearSegmentedColormap
+import matplotlib.pyplot as plt
+import matplotlib
+
+my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],
+                [2.3e-03, 1.3e-03, 1.8e-02],
+                [3.3e-03, 2.3e-03, 2.4e-02]]
+my_cmap = LinearSegmentedColormap.from_list('some_cmap_name', my_cmap_data)
+cm.register_cmap(name='my_cmap_name', cmap=my_cmap)
+
+plt.set_cmap('my_cmap_name')  # All OK setting the cmap
+plt.imshow([[1, 1], [2, 2]])
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..8a90a77bea
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,30 @@
+from matplotlib import cm
+from matplotlib.colors import LinearSegmentedColormap
+import matplotlib.pyplot as plt
+
+# Test case 1: Register with same name
+my_cmap_data = [[1.5e-03, 4.7e-04, 1.4e-02],
+                [2.3e-03, 1.3e-03, 1.8e-02],
+                [3.3e-03, 2.3e-03, 2.4e-02]]
+my_cmap = LinearSegmentedColormap.from_list('my_cmap_name', my_cmap_data)
+cm.register_cmap(name='my_cmap_name', cmap=my_cmap)
+plt.set_cmap('my_cmap_name')
+plt.imshow([[1, 1], [2, 2]])
+plt.title("Test case 1: Register with same name")
+plt.show()
+
+# Test case 2: Register with no name
+my_cmap2 = LinearSegmentedColormap.from_list('my_cmap2', my_cmap_data)
+cm.register_cmap(cmap=my_cmap2)  # Should use my_cmap2 as name
+plt.set_cmap('my_cmap2')
+plt.imshow([[1, 1], [2, 2]])
+plt.title("Test case 2: Register with no name")
+plt.show()
+
+# Test case 3: Register with force=True
+my_cmap3 = LinearSegmentedColormap.from_list('original_name', my_cmap_data)
+cm.register_cmap(name='new_name', cmap=my_cmap3, override_builtin=True)
+plt.set_cmap('new_name')
+plt.imshow([[1, 1], [2, 2]])
+plt.title("Test case 3: Register with force=True")
+plt.show()
\ No newline at end of file
