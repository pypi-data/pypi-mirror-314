diff --git a/django/contrib/contenttypes/fields.py b/django/contrib/contenttypes/fields.py
index ed98ecb48c..3c09dfe0b7 100644
--- a/django/contrib/contenttypes/fields.py
+++ b/django/contrib/contenttypes/fields.py
@@ -50,6 +50,22 @@ class GenericForeignKey(FieldCacheMixin):
         self.name = name
         self.model = cls
         cls._meta.add_field(self, private=True)
+
+        # Create a descriptor for the foreign key field that handles UUIDs
+        class UUIDForeignKeyDescriptor:
+            def __init__(self, field):
+                self.field = field
+
+            def __get__(self, instance, owner=None):
+                if instance is None:
+                    return self
+                return instance.__dict__.get(self.field)
+
+            def __set__(self, instance, value):
+                instance.__dict__[self.field] = value
+
+        # Replace the foreign key field with our descriptor
+        setattr(cls, self.fk_field, UUIDForeignKeyDescriptor(self.fk_field))
         setattr(cls, name, self)
 
     def get_filter_kwargs_for_object(self, obj):
@@ -184,6 +200,9 @@ class GenericForeignKey(FieldCacheMixin):
             if ct_id is not None:
                 fk_val = getattr(instance, self.fk_field)
                 if fk_val is not None:
+                    # Store the values in the instance's dict
+                    instance.__dict__[self.ct_field + '_id'] = ct_id
+                    instance.__dict__[self.fk_field] = fk_val
                     fk_dict[ct_id].add(fk_val)
                     instance_dict[ct_id] = instance
 
@@ -191,19 +210,58 @@ class GenericForeignKey(FieldCacheMixin):
         for ct_id, fkeys in fk_dict.items():
             instance = instance_dict[ct_id]
             ct = self.get_content_type(id=ct_id, using=instance._state.db)
-            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=fkeys))
+            model_class = ct.model_class()
+            if model_class is None:
+                continue
+            # Convert the fkeys to the correct type based on the model's pk field
+            pk_field = model_class._meta.pk
+            # For UUID fields, we need to handle both formats (with and without dashes)
+            if isinstance(pk_field, models.UUIDField):
+                # Try both formats - with and without dashes
+                converted_fkeys = set()
+                for fk in fkeys:
+                    try:
+                        # Try with dashes
+                        converted_fkeys.add(pk_field.to_python(fk))
+                    except ValueError:
+                        # Try without dashes
+                        converted_fkeys.add(pk_field.to_python(fk.replace('-', '')))
+            else:
+                converted_fkeys = {pk_field.to_python(fk) for fk in fkeys}
+            ret_val.extend(ct.get_all_objects_for_this_type(pk__in=converted_fkeys))
 
         # For doing the join in Python, we have to match both the FK val and the
         # content type, so we use a callable that returns a (fk, class) pair.
         def gfk_key(obj):
-            ct_id = getattr(obj, ct_attname)
+            ct_id = obj.__dict__.get(self.ct_field + '_id')
             if ct_id is None:
                 return None
             else:
-                model = self.get_content_type(id=ct_id,
-                                              using=obj._state.db).model_class()
-                return (model._meta.pk.get_prep_value(getattr(obj, self.fk_field)),
-                        model)
+                ct = self.get_content_type(id=ct_id, using=obj._state.db)
+                model = ct.model_class()
+                if model is None:
+                    return None
+                pk_field = model._meta.pk
+                fk_val = obj.__dict__.get(self.fk_field)
+                if isinstance(pk_field, models.UUIDField):
+                    try:
+                        # Try with dashes
+                        return (pk_field.to_python(fk_val), model)
+                    except ValueError:
+                        # Try without dashes
+                        return (pk_field.to_python(fk_val.replace('-', '')), model)
+                else:
+                    return (pk_field.to_python(fk_val) if fk_val is not None else None,
+                            model)
+
+        return (
+            ret_val,
+            lambda obj: (obj.pk, obj.__class__),
+            gfk_key,
+            True,
+            self.name,
+            True,
+        )
 
         return (
             ret_val,
@@ -222,24 +280,55 @@ class GenericForeignKey(FieldCacheMixin):
         # reload the same ContentType over and over (#5570). Instead, get the
         # content type ID here, and later when the actual instance is needed,
         # use ContentType.objects.get_for_id(), which has a global cache.
-        f = self.model._meta.get_field(self.ct_field)
-        ct_id = getattr(instance, f.get_attname(), None)
-        pk_val = getattr(instance, self.fk_field)
+        ct_id = instance.__dict__.get(self.ct_field + '_id')
+        if ct_id is None:
+            f = self.model._meta.get_field(self.ct_field)
+            ct_id = getattr(instance, f.get_attname(), None)
+        pk_val = instance.__dict__.get(self.fk_field)
+        if pk_val is None:
+            pk_val = getattr(instance, self.fk_field)
+        if isinstance(ct_id, ContentType):
+            ct_id = ct_id.id
 
         rel_obj = self.get_cached_value(instance, default=None)
         if rel_obj is not None:
             ct_match = ct_id == self.get_content_type(obj=rel_obj, using=instance._state.db).id
-            pk_match = rel_obj._meta.pk.to_python(pk_val) == rel_obj.pk
+            # Convert pk_val to the correct type based on the model's pk field
+            pk_field = rel_obj._meta.pk
+            if isinstance(pk_field, models.UUIDField):
+                try:
+                    # Try with dashes
+                    converted_pk = pk_field.to_python(pk_val)
+                except ValueError:
+                    # Try without dashes
+                    converted_pk = pk_field.to_python(pk_val.replace('-', ''))
+            else:
+                converted_pk = pk_field.to_python(pk_val) if pk_val is not None else None
+            pk_match = converted_pk == rel_obj.pk
             if ct_match and pk_match:
                 return rel_obj
             else:
                 rel_obj = None
         if ct_id is not None:
             ct = self.get_content_type(id=ct_id, using=instance._state.db)
-            try:
-                rel_obj = ct.get_object_for_this_type(pk=pk_val)
-            except ObjectDoesNotExist:
-                pass
+            model_class = ct.model_class()
+            if model_class is not None:
+                try:
+                    # Convert pk_val to the correct type based on the model's pk field
+                    pk_field = model_class._meta.pk
+                    if isinstance(pk_field, models.UUIDField):
+                        try:
+                            # Try with dashes
+                            converted_pk = pk_field.to_python(pk_val)
+                        except ValueError:
+                            # Try without dashes
+                            converted_pk = pk_field.to_python(pk_val.replace('-', ''))
+                    else:
+                        converted_pk = pk_field.to_python(pk_val) if pk_val is not None else None
+                    if converted_pk is not None:
+                        rel_obj = ct.get_object_for_this_type(pk=converted_pk)
+                except (ObjectDoesNotExist, ValueError):
+                    pass
         self.set_cached_value(instance, rel_obj)
         return rel_obj
 
@@ -250,6 +339,8 @@ class GenericForeignKey(FieldCacheMixin):
             ct = self.get_content_type(obj=value)
             fk = value.pk
 
+        instance.__dict__[self.ct_field + '_id'] = ct.id if ct else None
+        instance.__dict__[self.fk_field] = fk
         setattr(instance, self.ct_field, ct)
         setattr(instance, self.fk_field, fk)
         self.set_cached_value(instance, value)
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..d9699982ac
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,109 @@
+import os
+import uuid
+import django
+from django.conf import settings
+
+# Configure Django settings
+if not settings.configured:
+    settings.configure(
+        DEBUG=True,
+        DATABASES={
+            'default': {
+                'ENGINE': 'django.db.backends.sqlite3',
+                'NAME': ':memory:',
+            }
+        },
+        INSTALLED_APPS=[
+            'django.contrib.contenttypes',
+        ],
+    )
+    django.setup()
+
+from django.db import models
+from django.contrib.contenttypes.fields import GenericForeignKey
+from django.contrib.contenttypes.models import ContentType
+
+# Define the models
+class Foo(models.Model):
+    id = models.UUIDField(primary_key=True, default=uuid.uuid4, editable=False)
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+
+class Bar(models.Model):
+    foo_content_type = models.ForeignKey(
+        ContentType, related_name='actor',
+        on_delete=models.CASCADE, db_index=True
+    )
+    foo_object_id = models.CharField(max_length=255, db_index=True)
+    foo = GenericForeignKey('foo_content_type', 'foo_object_id')
+    name = models.CharField(max_length=100)
+
+    class Meta:
+        app_label = 'testapp'
+
+    def __init__(self, *args, **kwargs):
+        print("__init__ called with:", args, kwargs)
+        super().__init__(*args, **kwargs)
+        print("__init__ fields:", self.foo_content_type_id, self.foo_object_id)
+
+    @classmethod
+    def from_db(cls, db, field_names, values):
+        print("from_db called with:", field_names, values)
+        instance = super().from_db(db, field_names, values)
+        # Store the original field values on the instance
+        instance._loaded_values = dict(zip(field_names, values))
+        # Store the values in the instance's state
+        instance._state.fields_cache = {
+            'foo_content_type_id': values[field_names.index('foo_content_type_id')],
+            'foo_object_id': values[field_names.index('foo_object_id')],
+        }
+        print("instance fields:", instance.foo_content_type_id, instance.foo_object_id)
+        return instance
+
+# Create the database tables
+from django.db import connection
+with connection.schema_editor() as schema_editor:
+    schema_editor.create_model(ContentType)
+    schema_editor.create_model(Foo)
+    schema_editor.create_model(Bar)
+
+# Create ContentType entries for our models
+ContentType.objects.get_or_create(app_label='testapp', model='foo')
+ContentType.objects.get_or_create(app_label='testapp', model='bar')
+
+# Create test data
+foo = Foo.objects.create(name='Test Foo')
+bar = Bar.objects.create(
+    foo_content_type=ContentType.objects.get_for_model(Foo),
+    foo_object_id=str(foo.id).replace('-', ''),  # Remove dashes to match how UUIDs are stored
+    name='Test Bar'
+)
+
+# Try to prefetch related
+print("Created Foo:", foo.id, foo.name)
+print("Created Bar:", bar.foo_object_id, bar.name)
+
+# Print raw values from database
+with connection.cursor() as cursor:
+    cursor.execute("SELECT * FROM testapp_foo")
+    print("Foo table:", cursor.fetchall())
+    cursor.execute("SELECT * FROM testapp_bar")
+    print("Bar table:", cursor.fetchall())
+    cursor.execute("SELECT * FROM django_content_type")
+    print("ContentType table:", cursor.fetchall())
+
+# Print raw values from Bar object
+print("Bar object foo_content_type_id:", bar.foo_content_type_id)
+print("Bar object foo_object_id:", bar.foo_object_id)
+print("Bar object foo:", bar.foo)
+
+# Print the query Django is generating
+bars = Bar.objects.all().prefetch_related('foo')
+print("Query:", bars.query)
+for bar in bars:
+    print(f"Bar name: {bar.name}")
+    print(f"Foo name: {bar.foo.name if bar.foo else 'None'}")
+    print(f"Bar foo_object_id: {bar.foo_object_id}")
+    print(f"Bar foo_content_type_id: {bar.foo_content_type_id}")
\ No newline at end of file
