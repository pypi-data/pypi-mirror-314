diff --git a/django/forms/boundfield.py b/django/forms/boundfield.py
index 88adadb37d..687f5e7587 100644
--- a/django/forms/boundfield.py
+++ b/django/forms/boundfield.py
@@ -1,6 +1,7 @@
 import datetime
 import re
 
+from django.core.exceptions import ValidationError
 from django.forms.utils import flatatt, pretty_name
 from django.forms.widgets import Textarea, TextInput
 from django.utils.functional import cached_property
@@ -232,6 +233,67 @@ class BoundField:
     def widget_type(self):
         return re.sub(r'widget$|input$', '', self.field.widget.__class__.__name__.lower())
 
+    def _did_change(self):
+        """
+        Return True if the field value has changed from its initial value.
+        """
+        if not self.form.is_bound:
+            return False
+            
+        raw_data = self.data
+        if raw_data is None:
+            return False
+            
+        if not self.field.show_hidden_initial:
+            initial_value = self.initial
+        else:
+            initial_prefixed_name = self.form.add_initial_prefix(self.name)
+            hidden_widget = self.field.hidden_widget()
+            initial_value = self.form._widget_data_value(hidden_widget, initial_prefixed_name)
+            
+        # For datetime fields, we need to convert both values to Python objects
+        # to ensure consistent comparison
+        try:
+            data_value = self.field.to_python(raw_data)
+            if initial_value is not None:
+                initial_value = self.field.to_python(initial_value)
+            # For purposes of seeing whether something has changed, None is
+            # the same as an empty string
+            initial_value = initial_value if initial_value is not None else ''
+            data_value = data_value if data_value is not None else ''
+            print(f"Field {self.name}: data_value={data_value!r}, initial_value={initial_value!r}")
+            # For datetime fields, compare the string representation to avoid timezone issues
+            if isinstance(data_value, datetime.datetime) and isinstance(initial_value, datetime.datetime):
+                from django.utils import timezone
+                if timezone.is_aware(data_value) and timezone.is_aware(initial_value):
+                    data_value = data_value.astimezone(timezone.utc)
+                    initial_value = initial_value.astimezone(timezone.utc)
+                elif timezone.is_naive(data_value) and timezone.is_naive(initial_value):
+                    pass
+                else:
+                    # One is aware and one is naive - convert both to naive
+                    if timezone.is_aware(data_value):
+                        data_value = timezone.make_naive(data_value)
+                    if timezone.is_aware(initial_value):
+                        initial_value = timezone.make_naive(initial_value)
+                # Compare only the date and time components
+                return (data_value.year != initial_value.year or
+                        data_value.month != initial_value.month or
+                        data_value.day != initial_value.day or
+                        data_value.hour != initial_value.hour or
+                        data_value.minute != initial_value.minute or
+                        data_value.second != initial_value.second or
+                        data_value.microsecond != initial_value.microsecond or
+                        (data_value.tzinfo is not None and initial_value.tzinfo is None) or
+                        (data_value.tzinfo is None and initial_value.tzinfo is not None) or
+                        (data_value.tzinfo is not None and initial_value.tzinfo is not None and
+                         data_value.tzinfo.utcoffset(data_value) != initial_value.tzinfo.utcoffset(initial_value)) or
+                        (data_value.tzinfo is not None and initial_value.tzinfo is not None and
+                         data_value.tzinfo.dst(data_value) != initial_value.tzinfo.dst(initial_value)))
+            return initial_value != data_value
+        except ValidationError:
+            return True
+
 
 @html_safe
 class BoundWidget:
diff --git a/django/forms/fields.py b/django/forms/fields.py
index f1275aa387..3eb6ed9e1b 100644
--- a/django/forms/fields.py
+++ b/django/forms/fields.py
@@ -180,6 +180,8 @@ class Field:
             return False
         try:
             data = self.to_python(data)
+            if initial is not None:
+                initial = self.to_python(initial)
             if hasattr(self, '_coerce'):
                 return self._coerce(data) != self._coerce(initial)
         except ValidationError:
diff --git a/django/forms/forms.py b/django/forms/forms.py
index d14037bfe9..88a2e1674d 100644
--- a/django/forms/forms.py
+++ b/django/forms/forms.py
@@ -387,15 +387,15 @@ class BaseForm:
         self._post_clean()
 
     def _clean_fields(self):
-        for name, field in self.fields.items():
+        for name, bf in self._bound_items():
+            field = bf.field
             if field.disabled:
-                value = self.get_initial_for_field(field, name)
+                value = bf.initial
             else:
-                value = self._field_data_value(field, self.add_prefix(name))
+                value = bf.data
             try:
                 if isinstance(field, FileField):
-                    initial = self.get_initial_for_field(field, name)
-                    value = field.clean(value, initial)
+                    value = field.clean(value, bf.initial)
                 else:
                     value = field.clean(value)
                 self.cleaned_data[name] = value
@@ -436,27 +436,8 @@ class BaseForm:
 
     @cached_property
     def changed_data(self):
-        data = []
-        for name, field in self.fields.items():
-            data_value = self._field_data_value(field, self.add_prefix(name))
-            if not field.show_hidden_initial:
-                # Use the BoundField's initial as this is the value passed to
-                # the widget.
-                initial_value = self[name].initial
-            else:
-                initial_prefixed_name = self.add_initial_prefix(name)
-                hidden_widget = field.hidden_widget()
-                try:
-                    initial_value = field.to_python(
-                        self._widget_data_value(hidden_widget, initial_prefixed_name)
-                    )
-                except ValidationError:
-                    # Always assume data has changed if validation fails.
-                    data.append(name)
-                    continue
-            if field.has_changed(initial_value, data_value):
-                data.append(name)
-        return data
+        """Return a list of the names of the fields that have changed."""
+        return [name for name, bf in self._bound_items() if bf._did_change()]
 
     @property
     def media(self):
@@ -497,6 +478,10 @@ class BaseForm:
             value = value()
         return value
 
+    def _bound_items(self):
+        """Return a list of (name, BoundField) pairs for this form."""
+        return [(name, self[name]) for name in self.fields]
+
 
 class Form(BaseForm, metaclass=DeclarativeFieldsMetaclass):
     "A collection of Fields, plus their associated data."
