+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z '' ']'
+++ export CONDA_SHLVL=0
+++ CONDA_SHLVL=0
+++ '[' -n '' ']'
+++++ dirname /opt/miniconda3/bin/conda
++++ dirname /opt/miniconda3/bin
+++ PATH=/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export PATH
+++ '[' -z '' ']'
+++ PS1=
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1=
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''1'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=1
+++ CONDA_SHLVL=1
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''2'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_1='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=2
++ CONDA_SHLVL=2
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_1=/opt/miniconda3
++ CONDA_PREFIX_1=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ cd /testbed
+ git config --global --add safe.directory /testbed
+ cd /testbed
+ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   setup.py
	modified:   sphinx/ext/napoleon/docstring.py
	modified:   tox.ini

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	reproduce.py

no changes added to commit (use "git add" and/or "git commit -a")
+ git show
commit e188d56ed1248dead58f3f8018c0e9a3f99193f7
Author: Takeshi KOMIYA <i.tkomiya@gmail.com>
Date:   Fri Aug 7 23:39:39 2020 +0900

    Update CHANGES for PR #8049

diff --git a/CHANGES b/CHANGES
index 16e103ec7..235e34852 100644
--- a/CHANGES
+++ b/CHANGES
@@ -32,6 +32,8 @@ Features added
 * #7888: napoleon: Add aliases Warn and Raise.
 * #7690: napoleon: parse type strings and make them hyperlinks as possible.  The
   conversion rule can be updated via :confval:`napoleon_type_aliases`
+* #8049: napoleon: Create a hyperlink for each the type of parameter when
+  :confval:`napoleon_use_params` is False
 * C, added :rst:dir:`c:alias` directive for inserting copies
   of existing declarations.
 * #7745: html: inventory is broken if the docname contains a space
+ git diff e188d56ed1248dead58f3f8018c0e9a3f99193f7
diff --git a/setup.py b/setup.py
index a404f1fa5..2c6848797 100644
--- a/setup.py
+++ b/setup.py
@@ -15,22 +15,22 @@ if sys.version_info < (3, 5):
     sys.exit(1)
 
 install_requires = [
-    'sphinxcontrib-applehelp',
-    'sphinxcontrib-devhelp',
+    'sphinxcontrib-applehelp<=1.0.7',
+    'sphinxcontrib-devhelp<=1.0.5',
     'sphinxcontrib-jsmath',
-    'sphinxcontrib-htmlhelp',
-    'sphinxcontrib-serializinghtml',
-    'sphinxcontrib-qthelp',
-    'Jinja2>=2.3',
+    'sphinxcontrib-htmlhelp<=2.0.4',
+    'sphinxcontrib-serializinghtml<=1.1.9',
+    'sphinxcontrib-qthelp<=1.0.6',
+    'Jinja2<3.0',
     'Pygments>=2.0',
     'docutils>=0.12',
     'snowballstemmer>=1.1',
     'babel>=1.3',
-    'alabaster>=0.7,<0.8',
+    'alabaster>=0.7,<0.7.12',
     'imagesize',
     'requests>=2.5.0',
     'setuptools',
-    'packaging',
+    'packaging', 'markupsafe<=2.0.1',
 ]
 
 extras_require = {
diff --git a/sphinx/ext/napoleon/docstring.py b/sphinx/ext/napoleon/docstring.py
index b3daa06f1..375d1b1b0 100644
--- a/sphinx/ext/napoleon/docstring.py
+++ b/sphinx/ext/napoleon/docstring.py
@@ -386,42 +386,59 @@ class GoogleDocstring:
         else:
             return [prefix]
 
-    def _format_docutils_params(self, fields: List[Tuple[str, str, List[str]]],
+    def _format_docutils_params(self, fields: List[Tuple[Union[str, List[str]], str, List[str]]],
                                 field_role: str = 'param', type_role: str = 'type'
                                 ) -> List[str]:
         lines = []
         for _name, _type, _desc in fields:
             _desc = self._strip_empty(_desc)
-            if any(_desc):
-                _desc = self._fix_field_desc(_desc)
-                field = ':%s %s: ' % (field_role, _name)
-                lines.extend(self._format_block(field, _desc))
+            
+            # Handle list of parameter names
+            if isinstance(_name, list):
+                for param_name in _name:
+                    if any(_desc):
+                        _desc = self._fix_field_desc(_desc)
+                        field = ':%s %s: ' % (field_role, param_name)
+                        lines.extend(self._format_block(field, _desc))
+                    else:
+                        lines.append(':%s %s:' % (field_role, param_name))
+
+                    if _type:
+                        lines.append(':%s %s: %s' % (type_role, param_name, _type))
             else:
-                lines.append(':%s %s:' % (field_role, _name))
+                if any(_desc):
+                    _desc = self._fix_field_desc(_desc)
+                    field = ':%s %s: ' % (field_role, _name)
+                    lines.extend(self._format_block(field, _desc))
+                else:
+                    lines.append(':%s %s:' % (field_role, _name))
 
-            if _type:
-                lines.append(':%s %s: %s' % (type_role, _name, _type))
+                if _type:
+                    lines.append(':%s %s: %s' % (type_role, _name, _type))
         return lines + ['']
 
-    def _format_field(self, _name: str, _type: str, _desc: List[str]) -> List[str]:
+    def _format_field(self, _name: Union[str, List[str]], _type: str, _desc: List[str]) -> List[str]:
         _desc = self._strip_empty(_desc)
         has_desc = any(_desc)
-        separator = ' -- ' if has_desc else ''
-        if _name:
+        separator = ' - ' if has_desc else ''
+        
+        # Handle list of parameter names
+        if isinstance(_name, list):
+            names_str = ', '.join(n for n in _name)  # No bold formatting
             if _type:
-                if '`' in _type:
-                    field = '**%s** (%s)%s' % (_name, _type, separator)
-                else:
-                    field = '**%s** (*%s*)%s' % (_name, _type, separator)
-            else:
-                field = '**%s**%s' % (_name, separator)
-        elif _type:
-            if '`' in _type:
-                field = '%s%s' % (_type, separator)
+                field = '- %s (%s)%s' % (names_str, _type, separator)
             else:
-                field = '*%s*%s' % (_type, separator)
+                field = '- %s%s' % (names_str, separator)
         else:
-            field = ''
+            if _name:
+                if _type:
+                    field = '- %s (%s)%s' % (_name, _type, separator)
+                else:
+                    field = '- %s%s' % (_name, separator)
+            elif _type:
+                field = '- (%s)%s' % (_type, separator)
+            else:
+                field = '-'
 
         if has_desc:
             _desc = self._fix_field_desc(_desc)
@@ -1083,7 +1100,8 @@ class NumpyDocstring(GoogleDocstring):
         func = super()._escape_args_and_kwargs
 
         if ", " in name:
-            return ", ".join(func(param) for param in name.split(", "))
+            # For multiple parameters, return them as a list
+            return [func(param) for param in name.split(", ")]
         else:
             return func(name)
 
diff --git a/tox.ini b/tox.ini
index bddd822a6..34baee205 100644
--- a/tox.ini
+++ b/tox.ini
@@ -27,7 +27,7 @@ extras =
 setenv =
     PYTHONWARNINGS = all,ignore::ImportWarning:importlib._bootstrap_external,ignore::DeprecationWarning:site,ignore::DeprecationWarning:distutils
 commands=
-    pytest --durations 25 {posargs}
+    pytest -rA --durations 25 {posargs}
 
 [testenv:flake8]
 basepython = python3
+ source /opt/miniconda3/bin/activate
++ _CONDA_ROOT=/opt/miniconda3
++ . /opt/miniconda3/etc/profile.d/conda.sh
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ '[' -z x ']'
++ conda activate
++ local cmd=activate
++ case "$cmd" in
++ __conda_activate activate
++ '[' -n '' ']'
++ local ask_conda
+++ PS1='(testbed) '
+++ __conda_exe shell.posix activate
+++ /opt/miniconda3/bin/conda shell.posix activate
++ ask_conda='PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ eval 'PS1='\''(base) '\''
export PATH='\''/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3'\''
export CONDA_SHLVL='\''3'\''
export CONDA_DEFAULT_ENV='\''base'\''
export CONDA_PROMPT_MODIFIER='\''(base) '\''
export CONDA_PREFIX_2='\''/opt/miniconda3/envs/testbed'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+++ PS1='(base) '
+++ export PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ PATH=/opt/miniconda3/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
+++ export CONDA_PREFIX=/opt/miniconda3
+++ CONDA_PREFIX=/opt/miniconda3
+++ export CONDA_SHLVL=3
+++ CONDA_SHLVL=3
+++ export CONDA_DEFAULT_ENV=base
+++ CONDA_DEFAULT_ENV=base
+++ export 'CONDA_PROMPT_MODIFIER=(base) '
+++ CONDA_PROMPT_MODIFIER='(base) '
+++ export CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ CONDA_PREFIX_2=/opt/miniconda3/envs/testbed
+++ export CONDA_EXE=/opt/miniconda3/bin/conda
+++ CONDA_EXE=/opt/miniconda3/bin/conda
+++ export _CE_M=
+++ _CE_M=
+++ export _CE_CONDA=
+++ _CE_CONDA=
+++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ __conda_hashr
++ '[' -n '' ']'
++ '[' -n '' ']'
++ hash -r
+ conda activate testbed
+ local cmd=activate
+ case "$cmd" in
+ __conda_activate activate testbed
+ '[' -n '' ']'
+ local ask_conda
++ PS1='(base) '
++ __conda_exe shell.posix activate testbed
++ /opt/miniconda3/bin/conda shell.posix activate testbed
+ ask_conda='PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
+ eval 'PS1='\''(testbed) '\''
export PATH='\''/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'\''
export CONDA_PREFIX='\''/opt/miniconda3/envs/testbed'\''
export CONDA_SHLVL='\''4'\''
export CONDA_DEFAULT_ENV='\''testbed'\''
export CONDA_PROMPT_MODIFIER='\''(testbed) '\''
export CONDA_PREFIX_3='\''/opt/miniconda3'\''
export CONDA_EXE='\''/opt/miniconda3/bin/conda'\''
export _CE_M='\'''\''
export _CE_CONDA='\'''\''
export CONDA_PYTHON_EXE='\''/opt/miniconda3/bin/python'\'''
++ PS1='(testbed) '
++ export PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ PATH=/opt/miniconda3/envs/testbed/bin:/opt/miniconda3/condabin:/opt/miniconda3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
++ export CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ CONDA_PREFIX=/opt/miniconda3/envs/testbed
++ export CONDA_SHLVL=4
++ CONDA_SHLVL=4
++ export CONDA_DEFAULT_ENV=testbed
++ CONDA_DEFAULT_ENV=testbed
++ export 'CONDA_PROMPT_MODIFIER=(testbed) '
++ CONDA_PROMPT_MODIFIER='(testbed) '
++ export CONDA_PREFIX_3=/opt/miniconda3
++ CONDA_PREFIX_3=/opt/miniconda3
++ export CONDA_EXE=/opt/miniconda3/bin/conda
++ CONDA_EXE=/opt/miniconda3/bin/conda
++ export _CE_M=
++ _CE_M=
++ export _CE_CONDA=
++ _CE_CONDA=
++ export CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
++ CONDA_PYTHON_EXE=/opt/miniconda3/bin/python
+ __conda_hashr
+ '[' -n '' ']'
+ '[' -n '' ']'
+ hash -r
+ python -m pip install -e '.[test]'
Obtaining file:///testbed
  Preparing metadata (setup.py): started
  Preparing metadata (setup.py): finished with status 'done'
Requirement already satisfied: sphinxcontrib-applehelp<=1.0.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (1.0.4)
Requirement already satisfied: sphinxcontrib-devhelp<=1.0.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (1.0.2)
Requirement already satisfied: sphinxcontrib-jsmath in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (1.0.1)
Requirement already satisfied: sphinxcontrib-htmlhelp<=2.0.4 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (2.0.1)
Requirement already satisfied: sphinxcontrib-serializinghtml<=1.1.9 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (1.1.5)
Requirement already satisfied: sphinxcontrib-qthelp<=1.0.6 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (1.0.3)
Requirement already satisfied: Jinja2<3.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (2.11.3)
Requirement already satisfied: Pygments>=2.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (2.18.0)
Requirement already satisfied: docutils>=0.12 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (0.21.2)
Requirement already satisfied: snowballstemmer>=1.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (2.2.0)
Requirement already satisfied: babel>=1.3 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (2.16.0)
Requirement already satisfied: alabaster<0.7.12,>=0.7 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (0.7.11)
Requirement already satisfied: imagesize in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (1.4.1)
Requirement already satisfied: requests>=2.5.0 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (2.32.3)
Requirement already satisfied: setuptools in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (75.1.0)
Requirement already satisfied: packaging in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (24.1)
Requirement already satisfied: markupsafe<=2.0.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (2.0.1)
Requirement already satisfied: pytest in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (8.3.3)
Requirement already satisfied: pytest-cov in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (5.0.0)
Requirement already satisfied: html5lib in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (1.1)
Requirement already satisfied: typed_ast in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (1.5.5)
Requirement already satisfied: cython in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from Sphinx==3.2.0.dev20241029) (3.0.11)
Requirement already satisfied: charset-normalizer<4,>=2 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==3.2.0.dev20241029) (3.4.0)
Requirement already satisfied: idna<4,>=2.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==3.2.0.dev20241029) (3.10)
Requirement already satisfied: urllib3<3,>=1.21.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==3.2.0.dev20241029) (2.2.3)
Requirement already satisfied: certifi>=2017.4.17 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from requests>=2.5.0->Sphinx==3.2.0.dev20241029) (2024.8.30)
Requirement already satisfied: six>=1.9 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from html5lib->Sphinx==3.2.0.dev20241029) (1.16.0)
Requirement already satisfied: webencodings in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from html5lib->Sphinx==3.2.0.dev20241029) (0.5.1)
Requirement already satisfied: iniconfig in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==3.2.0.dev20241029) (2.0.0)
Requirement already satisfied: pluggy<2,>=1.5 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==3.2.0.dev20241029) (1.5.0)
Requirement already satisfied: exceptiongroup>=1.0.0rc8 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==3.2.0.dev20241029) (1.2.2)
Requirement already satisfied: tomli>=1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from pytest->Sphinx==3.2.0.dev20241029) (2.0.2)
Requirement already satisfied: coverage>=5.2.1 in /opt/miniconda3/envs/testbed/lib/python3.9/site-packages (from coverage[toml]>=5.2.1->pytest-cov->Sphinx==3.2.0.dev20241029) (7.6.4)
Installing collected packages: Sphinx
  Attempting uninstall: Sphinx
    Found existing installation: Sphinx 3.2.0.dev20241029
    Uninstalling Sphinx-3.2.0.dev20241029:
      Successfully uninstalled Sphinx-3.2.0.dev20241029
  DEPRECATION: Legacy editable install of Sphinx[test]==3.2.0.dev20241029 from file:///testbed (setup.py develop) is deprecated. pip 25.0 will enforce this behaviour change. A possible replacement is to add a pyproject.toml or enable --use-pep517, and use setuptools >= 64. If the resulting installation is not behaving as expected, try using --config-settings editable_mode=compat. Please consult the setuptools documentation for more information. Discussion can be found at https://github.com/pypa/pip/issues/11457
  Running setup.py develop for Sphinx
Successfully installed Sphinx
WARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager, possibly rendering your system unusable.It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv. Use the --root-user-action option if you know what you are doing and want to suppress this warning.
+ git checkout e188d56ed1248dead58f3f8018c0e9a3f99193f7 tests/test_ext_napoleon_docstring.py
Updated 0 paths from 83fce7094
+ git apply -v -
Checking patch tests/test_ext_napoleon_docstring.py...
Applied patch tests/test_ext_napoleon_docstring.py cleanly.
+ tox --current-env -epy39 -v -- tests/test_ext_napoleon_docstring.py
py39: commands[0]> pytest -rA --durations 25 tests/test_ext_napoleon_docstring.py
============================= test session starts ==============================
platform linux -- Python 3.9.20, pytest-8.3.3, pluggy-1.5.0
cachedir: .tox/py39/.pytest_cache
libraries: Sphinx-3.2.0, docutils-0.21.2
base tempdir: /tmp/pytest-of-root/pytest-0
rootdir: /testbed
configfile: setup.cfg
plugins: cov-5.0.0
collected 42 items

tests/test_ext_napoleon_docstring.py FFFFFFFFFF..FF....FF.FFF.FF........ [ 83%]
..FFFFF                                                                  [100%]

=================================== FAILURES ===================================
_______________ NamedtupleSubclassTest.test_attributes_docstring _______________

self = <test_ext_napoleon_docstring.NamedtupleSubclassTest testMethod=test_attributes_docstring>

        def test_attributes_docstring(self):
            config = Config()
            actual = str(NumpyDocstring(cleandoc(NamedtupleSubclass.__doc__),
                         config=config, app=None, what='class',
                         name='NamedtupleSubclass', obj=NamedtupleSubclass))
            expected = """\
    Sample namedtuple subclass
    
    .. attribute:: attr1
    
       Quick description of attr1
    
       :type: :class:`Arbitrary type`
    
    .. attribute:: attr2
    
       Quick description of attr2
    
       :type: :class:`Another arbitrary type`
    
    .. attribute:: attr3
    
       Adds a newline after the type
    
       :type: :class:`Type`
    """
    
>           self.assertEqual(expected, actual)
E           AssertionError: 'Samp[48 chars]\n   Quick description of attr1\n\n   :type: :[209 chars]e`\n' != 'Samp[48 chars]\n   -Quick description of attr1\n\n   :type: [212 chars]e`\n'
E             Sample namedtuple subclass
E             
E             .. attribute:: attr1
E             
E           -    Quick description of attr1
E           +    -Quick description of attr1
E           ?    +
E             
E                :type: :class:`Arbitrary type`
E             
E             .. attribute:: attr2
E             
E           -    Quick description of attr2
E           +    -Quick description of attr2
E           ?    +
E             
E                :type: :class:`Another arbitrary type`
E             
E             .. attribute:: attr3
E             
E           -    Adds a newline after the type
E           +    -Adds a newline after the type
E           ?    +
E             
E                :type: :class:`Type`

tests/test_ext_napoleon_docstring.py:84: AssertionError
__________________ InlineAttributeTest.test_class_data_member __________________

self = <test_ext_napoleon_docstring.InlineAttributeTest testMethod=test_class_data_member>

    def test_class_data_member(self):
        config = Config()
        docstring = dedent("""\
        data member description:
    
        - a: b
        """)
        actual = str(GoogleDocstring(docstring, config=config, app=None,
                     what='attribute', name='some_data', obj=0))
        expected = dedent("""\
        data member description:
    
        - a: b""")
    
>       self.assertEqual(expected, actual)
E       AssertionError: 'data member description:\n\n- a: b' != '-data member description:\n\n- a: b'
E       - data member description:
E       + -data member description:
E       ? +
E         
E         - a: b

tests/test_ext_napoleon_docstring.py:103: AssertionError
______________ InlineAttributeTest.test_class_data_member_inline _______________

self = <test_ext_napoleon_docstring.InlineAttributeTest testMethod=test_class_data_member_inline>

    def test_class_data_member_inline(self):
        config = Config()
        docstring = """b: data member description with :ref:`reference`"""
        actual = str(GoogleDocstring(docstring, config=config, app=None,
                     what='attribute', name='some_data', obj=0))
        expected = dedent("""\
        data member description with :ref:`reference`
    
        :type: b""")
>       self.assertEqual(expected, actual)
E       AssertionError: 'data member description with :ref:`reference`\n\n:type: b' != '-data member description with :ref:`reference`\n\n:type: b'
E       - data member description with :ref:`reference`
E       + -data member description with :ref:`reference`
E       ? +
E         
E         :type: b

tests/test_ext_napoleon_docstring.py:114: AssertionError
__________ InlineAttributeTest.test_class_data_member_inline_no_type ___________

self = <test_ext_napoleon_docstring.InlineAttributeTest testMethod=test_class_data_member_inline_no_type>

    def test_class_data_member_inline_no_type(self):
        config = Config()
        docstring = """data with ``a : in code`` and :ref:`reference` and no type"""
        actual = str(GoogleDocstring(docstring, config=config, app=None,
                     what='attribute', name='some_data', obj=0))
        expected = """data with ``a : in code`` and :ref:`reference` and no type"""
    
>       self.assertEqual(expected, actual)
E       AssertionError: 'data with ``a : in code`` and :ref:`reference` and no type' != '-data with ``a : in code`` and :ref:`reference` and no type'
E       - data with ``a : in code`` and :ref:`reference` and no type
E       + -data with ``a : in code`` and :ref:`reference` and no type
E       ? +

tests/test_ext_napoleon_docstring.py:123: AssertionError
________ InlineAttributeTest.test_class_data_member_inline_ref_in_type _________

self = <test_ext_napoleon_docstring.InlineAttributeTest testMethod=test_class_data_member_inline_ref_in_type>

    def test_class_data_member_inline_ref_in_type(self):
        config = Config()
        docstring = """:class:`int`: data member description"""
        actual = str(GoogleDocstring(docstring, config=config, app=None,
                     what='attribute', name='some_data', obj=0))
        expected = dedent("""\
        data member description
    
        :type: :class:`int`""")
>       self.assertEqual(expected, actual)
E       AssertionError: 'data member description\n\n:type: :class:`int`' != '-data member description\n\n:type: :class:`int`'
E       - data member description
E       + -data member description
E       ? +
E         
E         :type: :class:`int`

tests/test_ext_napoleon_docstring.py:134: AssertionError
___________ GoogleDocstringTest.test_attributes_with_class_reference ___________

self = <test_ext_napoleon_docstring.GoogleDocstringTest testMethod=test_attributes_with_class_reference>

        def test_attributes_with_class_reference(self):
            docstring = """\
    Attributes:
        in_attr(:class:`numpy.ndarray`): super-dooper attribute
    """
    
            actual = str(GoogleDocstring(docstring))
            expected = """\
    .. attribute:: in_attr
    
       super-dooper attribute
    
       :type: :class:`numpy.ndarray`
    """
>           self.assertEqual(expected, actual)
E           AssertionError: '.. a[20 chars]\n   super-dooper attribute\n\n   :type: :clas[15 chars]y`\n' != '.. a[20 chars]\n   -super-dooper attribute\n\n   :type: :cla[16 chars]y`\n'
E             .. attribute:: in_attr
E             
E           -    super-dooper attribute
E           +    -super-dooper attribute
E           ?    +
E             
E                :type: :class:`numpy.ndarray`

tests/test_ext_napoleon_docstring.py:430: AssertionError
____________ GoogleDocstringTest.test_code_block_in_returns_section ____________

self = <test_ext_napoleon_docstring.GoogleDocstringTest testMethod=test_code_block_in_returns_section>

        def test_code_block_in_returns_section(self):
            docstring = """
    Returns:
        foobar: foo::
    
            codecode
            codecode
    """
            expected = """
    :returns:
    
              foo::
    
                  codecode
                  codecode
    :rtype: foobar
    """
            actual = str(GoogleDocstring(docstring))
>           self.assertEqual(expected, actual)
E           AssertionError: '\n:returns:\n\n          foo::\n\n              code[42 chars]ar\n' != '\n:returns: -\n\n          foo::\n\n              co[44 chars]ar\n'
E             
E           - :returns:
E           + :returns: -
E           ?          ++
E             
E                       foo::
E             
E                           codecode
E                           codecode
E             :rtype: foobar

tests/test_ext_napoleon_docstring.py:465: AssertionError
________________ GoogleDocstringTest.test_colon_in_return_type _________________

self = <test_ext_napoleon_docstring.GoogleDocstringTest testMethod=test_colon_in_return_type>

        def test_colon_in_return_type(self):
            docstring = """Example property.
    
    Returns:
        :py:class:`~.module.submodule.SomeClass`: an example instance
        if available, None if not available.
    """
            expected = """Example property.
    
    :returns: an example instance
              if available, None if not available.
    :rtype: :py:class:`~.module.submodule.SomeClass`
    """
            actual = str(GoogleDocstring(docstring))
>           self.assertEqual(expected, actual)
E           AssertionError: 'Exam[22 chars]rns: an example instance\n          if availab[74 chars]s`\n' != 'Exam[22 chars]rns: -an example instance\n          if availa[75 chars]s`\n'
E             Example property.
E             
E           - :returns: an example instance
E           + :returns: -an example instance
E           ?           +
E                       if available, None if not available.
E             :rtype: :py:class:`~.module.submodule.SomeClass`

tests/test_ext_napoleon_docstring.py:481: AssertionError
_______________ GoogleDocstringTest.test_custom_generic_sections _______________

self = <test_ext_napoleon_docstring.GoogleDocstringTest testMethod=test_custom_generic_sections>

        def test_custom_generic_sections(self):
    
            docstrings = (("""\
    Really Important Details:
        You should listen to me!
    """, """.. rubric:: Really Important Details
    
    You should listen to me!
    """),
                          ("""\
    Sooper Warning:
        Stop hitting yourself!
    """, """:Warns: **Stop hitting yourself!**
    """))
    
            testConfig = Config(napoleon_custom_sections=['Really Important Details',
                                                          ('Sooper Warning', 'warns')])
    
            for docstring, expected in docstrings:
                actual = str(GoogleDocstring(docstring, testConfig))
>               self.assertEqual(expected, actual)
E               AssertionError: ':Warns: **Stop hitting yourself!**\n' != ':Warns: - Stop hitting yourself!\n'
E               - :Warns: **Stop hitting yourself!**
E               ?         ^^                      --
E               + :Warns: - Stop hitting yourself!
E               ?         ^^

tests/test_ext_napoleon_docstring.py:1053: AssertionError
_____________________ GoogleDocstringTest.test_docstrings ______________________

self = <test_ext_napoleon_docstring.GoogleDocstringTest testMethod=test_docstrings>

    def test_docstrings(self):
        config = Config(
            napoleon_use_param=False,
            napoleon_use_rtype=False,
            napoleon_use_keyword=False
        )
        for docstring, expected in self.docstrings:
            actual = str(GoogleDocstring(dedent(docstring), config))
            expected = dedent(expected)
>           self.assertEqual(expected, actual)
E           AssertionError: '\nSi[29 chars]ers: **arg1** (*str*) -- Extended\n           [19 chars]g1\n' != '\nSi[29 chars]ers: - arg1 (str) - Extended\n             des[14 chars]g1\n'
E             
E             Single line summary
E             
E           - :Parameters: **arg1** (*str*) -- Extended
E           ?              ^^    --  -   -   -
E           + :Parameters: - arg1 (str) - Extended
E           ?              ^^
E                          description of arg1

tests/test_ext_napoleon_docstring.py:378: AssertionError
____________ GoogleDocstringTest.test_list_in_parameter_description ____________

self = <test_ext_napoleon_docstring.GoogleDocstringTest testMethod=test_list_in_parameter_description>

        def test_list_in_parameter_description(self):
            docstring = """One line summary.
    
    Parameters:
        no_list (int):
        one_bullet_empty (int):
            *
        one_bullet_single_line (int):
            - first line
        one_bullet_two_lines (int):
            +   first line
                continued
        two_bullets_single_line (int):
            -  first line
            -  second line
        two_bullets_two_lines (int):
            * first line
              continued
            * second line
              continued
        one_enumeration_single_line (int):
            1.  first line
        one_enumeration_two_lines (int):
            1)   first line
                 continued
        two_enumerations_one_line (int):
            (iii) first line
            (iv) second line
        two_enumerations_two_lines (int):
            a. first line
               continued
            b. second line
               continued
        one_definition_one_line (int):
            item 1
                first line
        one_definition_two_lines (int):
            item 1
                first line
                continued
        two_definitions_one_line (int):
            item 1
                first line
            item 2
                second line
        two_definitions_two_lines (int):
            item 1
                first line
                continued
            item 2
                second line
                continued
        one_definition_blank_line (int):
            item 1
    
                first line
    
                extra first line
    
        two_definitions_blank_lines (int):
            item 1
    
                first line
    
                extra first line
    
            item 2
    
                second line
    
                extra second line
    
        definition_after_inline_text (int): text line
    
            item 1
                first line
    
        definition_after_normal_text (int):
            text line
    
            item 1
                first line
    """
    
            expected = """One line summary.
    
    :param no_list:
    :type no_list: int
    :param one_bullet_empty:
                             *
    :type one_bullet_empty: int
    :param one_bullet_single_line:
                                   - first line
    :type one_bullet_single_line: int
    :param one_bullet_two_lines:
                                 +   first line
                                     continued
    :type one_bullet_two_lines: int
    :param two_bullets_single_line:
                                    -  first line
                                    -  second line
    :type two_bullets_single_line: int
    :param two_bullets_two_lines:
                                  * first line
                                    continued
                                  * second line
                                    continued
    :type two_bullets_two_lines: int
    :param one_enumeration_single_line:
                                        1.  first line
    :type one_enumeration_single_line: int
    :param one_enumeration_two_lines:
                                      1)   first line
                                           continued
    :type one_enumeration_two_lines: int
    :param two_enumerations_one_line:
                                      (iii) first line
                                      (iv) second line
    :type two_enumerations_one_line: int
    :param two_enumerations_two_lines:
                                       a. first line
                                          continued
                                       b. second line
                                          continued
    :type two_enumerations_two_lines: int
    :param one_definition_one_line:
                                    item 1
                                        first line
    :type one_definition_one_line: int
    :param one_definition_two_lines:
                                     item 1
                                         first line
                                         continued
    :type one_definition_two_lines: int
    :param two_definitions_one_line:
                                     item 1
                                         first line
                                     item 2
                                         second line
    :type two_definitions_one_line: int
    :param two_definitions_two_lines:
                                      item 1
                                          first line
                                          continued
                                      item 2
                                          second line
                                          continued
    :type two_definitions_two_lines: int
    :param one_definition_blank_line:
                                      item 1
    
                                          first line
    
                                          extra first line
    :type one_definition_blank_line: int
    :param two_definitions_blank_lines:
                                        item 1
    
                                            first line
    
                                            extra first line
    
                                        item 2
    
                                            second line
    
                                            extra second line
    :type two_definitions_blank_lines: int
    :param definition_after_inline_text: text line
    
                                         item 1
                                             first line
    :type definition_after_inline_text: int
    :param definition_after_normal_text: text line
    
                                         item 1
                                             first line
    :type definition_after_normal_text: int
    """
            config = Config(napoleon_use_param=True)
            actual = str(GoogleDocstring(docstring, config))
            self.assertEqual(expected, actual)
    
            expected = """One line summary.
    
    :Parameters: * **no_list** (*int*)
                 * **one_bullet_empty** (*int*) --
    
                   *
                 * **one_bullet_single_line** (*int*) --
    
                   - first line
                 * **one_bullet_two_lines** (*int*) --
    
                   +   first line
                       continued
                 * **two_bullets_single_line** (*int*) --
    
                   -  first line
                   -  second line
                 * **two_bullets_two_lines** (*int*) --
    
                   * first line
                     continued
                   * second line
                     continued
                 * **one_enumeration_single_line** (*int*) --
    
                   1.  first line
                 * **one_enumeration_two_lines** (*int*) --
    
                   1)   first line
                        continued
                 * **two_enumerations_one_line** (*int*) --
    
                   (iii) first line
                   (iv) second line
                 * **two_enumerations_two_lines** (*int*) --
    
                   a. first line
                      continued
                   b. second line
                      continued
                 * **one_definition_one_line** (*int*) --
    
                   item 1
                       first line
                 * **one_definition_two_lines** (*int*) --
    
                   item 1
                       first line
                       continued
                 * **two_definitions_one_line** (*int*) --
    
                   item 1
                       first line
                   item 2
                       second line
                 * **two_definitions_two_lines** (*int*) --
    
                   item 1
                       first line
                       continued
                   item 2
                       second line
                       continued
                 * **one_definition_blank_line** (*int*) --
    
                   item 1
    
                       first line
    
                       extra first line
                 * **two_definitions_blank_lines** (*int*) --
    
                   item 1
    
                       first line
    
                       extra first line
    
                   item 2
    
                       second line
    
                       extra second line
                 * **definition_after_inline_text** (*int*) -- text line
    
                   item 1
                       first line
                 * **definition_after_normal_text** (*int*) -- text line
    
                   item 1
                       first line
    """
            config = Config(napoleon_use_param=False)
            actual = str(GoogleDocstring(docstring, config))
>           self.assertEqual(expected, actual)
E           AssertionError: 'One [27 chars]s: * **no_list** (*int*)\n             * **one[2359 chars]ne\n' != 'One [27 chars]s: * - no_list (int)\n             * - one_bul[2270 chars]ne\n'
E           Diff is 4821 characters long. Set self.maxDiff to None to see it.

tests/test_ext_napoleon_docstring.py:1031: AssertionError
_______________________ GoogleDocstringTest.test_noindex _______________________

self = <test_ext_napoleon_docstring.GoogleDocstringTest testMethod=test_noindex>

        def test_noindex(self):
            docstring = """
    Attributes:
        arg
            description
    
    Methods:
        func(i, j)
            description
    """
    
            expected = """
    .. attribute:: arg
       :noindex:
    
       description
    
    .. method:: func(i, j)
       :noindex:
    
    
       description
    """
            config = Config()
            actual = str(GoogleDocstring(docstring, config=config, app=None, what='module',
                                         options={'noindex': True}))
>           self.assertEqual(expected, actual)
E           AssertionError: '\n..[32 chars]\n   description\n\n.. method:: func(i, j)\n  [31 chars]on\n' != '\n..[32 chars]\n   -description\n\n.. method:: func(i, j)\n [32 chars]on\n'
E             
E             .. attribute:: arg
E                :noindex:
E             
E           -    description
E           +    -description
E           ?    +
E             
E             .. method:: func(i, j)
E                :noindex:
E             
E                
E                description

tests/test_ext_napoleon_docstring.py:1081: AssertionError
________________ GoogleDocstringTest.test_xrefs_in_return_type _________________

self = <test_ext_napoleon_docstring.GoogleDocstringTest testMethod=test_xrefs_in_return_type>

        def test_xrefs_in_return_type(self):
            docstring = """Example Function
    
    Returns:
        :class:`numpy.ndarray`: A :math:`n \\times 2` array containing
        a bunch of math items
    """
            expected = """Example Function
    
    :returns: A :math:`n \\times 2` array containing
              a bunch of math items
    :rtype: :class:`numpy.ndarray`
    """
            actual = str(GoogleDocstring(docstring))
>           self.assertEqual(expected, actual)
E           AssertionError: 'Exam[21 chars]rns: A :math:`n \\times 2` array containing\n [60 chars]y`\n' != 'Exam[21 chars]rns: -A :math:`n \\times 2` array containing\n[61 chars]y`\n'
E             Example Function
E             
E           - :returns: A :math:`n \times 2` array containing
E           + :returns: -A :math:`n \times 2` array containing
E           ?           +
E                       a bunch of math items
E             :rtype: :class:`numpy.ndarray`

tests/test_ext_napoleon_docstring.py:497: AssertionError
_________________ NumpyDocstringTest.test_colon_in_return_type _________________

self = <test_ext_napoleon_docstring.NumpyDocstringTest testMethod=test_colon_in_return_type>

        def test_colon_in_return_type(self):
            docstring = """
    Summary
    
    Returns
    -------
    :py:class:`~my_mod.my_class`
        an instance of :py:class:`~my_mod.my_class`
    """
    
            expected = """
    Summary
    
    :returns: an instance of :py:class:`~my_mod.my_class`
    :rtype: :py:class:`~my_mod.my_class`
    """
    
            config = Config()
            app = mock.Mock()
            actual = str(NumpyDocstring(docstring, config, app, "method"))
    
>           self.assertEqual(expected, actual)
E           AssertionError: '\nSu[14 chars]rns: an instance of :py:class:`~my_mod.my_clas[38 chars]s`\n' != '\nSu[14 chars]rns: -an instance of :py:class:`~my_mod.my_cla[39 chars]s`\n'
E             
E             Summary
E             
E           - :returns: an instance of :py:class:`~my_mod.my_class`
E           + :returns: -an instance of :py:class:`~my_mod.my_class`
E           ?           +
E             :rtype: :py:class:`~my_mod.my_class`

tests/test_ext_napoleon_docstring.py:1464: AssertionError
______________________ NumpyDocstringTest.test_docstrings ______________________

self = <test_ext_napoleon_docstring.NumpyDocstringTest testMethod=test_docstrings>

    def test_docstrings(self):
        config = Config(
            napoleon_use_param=False,
            napoleon_use_rtype=False,
            napoleon_use_keyword=False)
        for docstring, expected in self.docstrings:
            actual = str(NumpyDocstring(dedent(docstring), config))
            expected = dedent(expected)
>           self.assertEqual(expected, actual)
E           AssertionError: '\nSi[29 chars]ers: **arg1** (:class:`str`) -- Extended\n    [26 chars]g1\n' != '\nSi[29 chars]ers: - arg1 (:class:`str`) - Extended\n       [23 chars]g1\n'
E             
E             Single line summary
E             
E           - :Parameters: **arg1** (:class:`str`) -- Extended
E           ?              ^^    --                 -
E           + :Parameters: - arg1 (:class:`str`) - Extended
E           ?              ^^
E                          description of arg1

tests/test_ext_napoleon_docstring.py:1318: AssertionError
____________ NumpyDocstringTest.test_list_in_parameter_description _____________

self = <test_ext_napoleon_docstring.NumpyDocstringTest testMethod=test_list_in_parameter_description>

        def test_list_in_parameter_description(self):
            docstring = """One line summary.
    
    Parameters
    ----------
    no_list : int
    one_bullet_empty : int
        *
    one_bullet_single_line : int
        - first line
    one_bullet_two_lines : int
        +   first line
            continued
    two_bullets_single_line : int
        -  first line
        -  second line
    two_bullets_two_lines : int
        * first line
          continued
        * second line
          continued
    one_enumeration_single_line : int
        1.  first line
    one_enumeration_two_lines : int
        1)   first line
             continued
    two_enumerations_one_line : int
        (iii) first line
        (iv) second line
    two_enumerations_two_lines : int
        a. first line
           continued
        b. second line
           continued
    one_definition_one_line : int
        item 1
            first line
    one_definition_two_lines : int
        item 1
            first line
            continued
    two_definitions_one_line : int
        item 1
            first line
        item 2
            second line
    two_definitions_two_lines : int
        item 1
            first line
            continued
        item 2
            second line
            continued
    one_definition_blank_line : int
        item 1
    
            first line
    
            extra first line
    
    two_definitions_blank_lines : int
        item 1
    
            first line
    
            extra first line
    
        item 2
    
            second line
    
            extra second line
    
    definition_after_normal_text : int
        text line
    
        item 1
            first line
    """
    
            expected = """One line summary.
    
    :param no_list:
    :type no_list: :class:`int`
    :param one_bullet_empty:
                             *
    :type one_bullet_empty: :class:`int`
    :param one_bullet_single_line:
                                   - first line
    :type one_bullet_single_line: :class:`int`
    :param one_bullet_two_lines:
                                 +   first line
                                     continued
    :type one_bullet_two_lines: :class:`int`
    :param two_bullets_single_line:
                                    -  first line
                                    -  second line
    :type two_bullets_single_line: :class:`int`
    :param two_bullets_two_lines:
                                  * first line
                                    continued
                                  * second line
                                    continued
    :type two_bullets_two_lines: :class:`int`
    :param one_enumeration_single_line:
                                        1.  first line
    :type one_enumeration_single_line: :class:`int`
    :param one_enumeration_two_lines:
                                      1)   first line
                                           continued
    :type one_enumeration_two_lines: :class:`int`
    :param two_enumerations_one_line:
                                      (iii) first line
                                      (iv) second line
    :type two_enumerations_one_line: :class:`int`
    :param two_enumerations_two_lines:
                                       a. first line
                                          continued
                                       b. second line
                                          continued
    :type two_enumerations_two_lines: :class:`int`
    :param one_definition_one_line:
                                    item 1
                                        first line
    :type one_definition_one_line: :class:`int`
    :param one_definition_two_lines:
                                     item 1
                                         first line
                                         continued
    :type one_definition_two_lines: :class:`int`
    :param two_definitions_one_line:
                                     item 1
                                         first line
                                     item 2
                                         second line
    :type two_definitions_one_line: :class:`int`
    :param two_definitions_two_lines:
                                      item 1
                                          first line
                                          continued
                                      item 2
                                          second line
                                          continued
    :type two_definitions_two_lines: :class:`int`
    :param one_definition_blank_line:
                                      item 1
    
                                          first line
    
                                          extra first line
    :type one_definition_blank_line: :class:`int`
    :param two_definitions_blank_lines:
                                        item 1
    
                                            first line
    
                                            extra first line
    
                                        item 2
    
                                            second line
    
                                            extra second line
    :type two_definitions_blank_lines: :class:`int`
    :param definition_after_normal_text: text line
    
                                         item 1
                                             first line
    :type definition_after_normal_text: :class:`int`
    """
            config = Config(napoleon_use_param=True)
            actual = str(NumpyDocstring(docstring, config))
            self.assertEqual(expected, actual)
    
            expected = """One line summary.
    
    :Parameters: * **no_list** (:class:`int`)
                 * **one_bullet_empty** (:class:`int`) --
    
                   *
                 * **one_bullet_single_line** (:class:`int`) --
    
                   - first line
                 * **one_bullet_two_lines** (:class:`int`) --
    
                   +   first line
                       continued
                 * **two_bullets_single_line** (:class:`int`) --
    
                   -  first line
                   -  second line
                 * **two_bullets_two_lines** (:class:`int`) --
    
                   * first line
                     continued
                   * second line
                     continued
                 * **one_enumeration_single_line** (:class:`int`) --
    
                   1.  first line
                 * **one_enumeration_two_lines** (:class:`int`) --
    
                   1)   first line
                        continued
                 * **two_enumerations_one_line** (:class:`int`) --
    
                   (iii) first line
                   (iv) second line
                 * **two_enumerations_two_lines** (:class:`int`) --
    
                   a. first line
                      continued
                   b. second line
                      continued
                 * **one_definition_one_line** (:class:`int`) --
    
                   item 1
                       first line
                 * **one_definition_two_lines** (:class:`int`) --
    
                   item 1
                       first line
                       continued
                 * **two_definitions_one_line** (:class:`int`) --
    
                   item 1
                       first line
                   item 2
                       second line
                 * **two_definitions_two_lines** (:class:`int`) --
    
                   item 1
                       first line
                       continued
                   item 2
                       second line
                       continued
                 * **one_definition_blank_line** (:class:`int`) --
    
                   item 1
    
                       first line
    
                       extra first line
                 * **two_definitions_blank_lines** (:class:`int`) --
    
                   item 1
    
                       first line
    
                       extra first line
    
                   item 2
    
                       second line
    
                       extra second line
                 * **definition_after_normal_text** (:class:`int`) -- text line
    
                   item 1
                       first line
    """
            config = Config(napoleon_use_param=False)
            actual = str(NumpyDocstring(docstring, config))
>           self.assertEqual(expected, actual)
E           AssertionError: 'One [27 chars]s: * **no_list** (:class:`int`)\n             [2352 chars]ne\n' != 'One [27 chars]s: * - no_list (:class:`int`)\n             * [2302 chars]ne\n'
E           Diff is 4921 characters long. Set self.maxDiff to None to see it.

tests/test_ext_napoleon_docstring.py:2046: AssertionError
_________________ NumpyDocstringTest.test_multiple_parameters __________________

self = <test_ext_napoleon_docstring.NumpyDocstringTest testMethod=test_multiple_parameters>

        def test_multiple_parameters(self):
            docstring = """\
    Parameters
    ----------
    x1, x2 : array_like
        Input arrays, description of ``x1``, ``x2``.
    
    """
    
            config = Config(napoleon_use_param=False)
            actual = str(NumpyDocstring(docstring, config))
            expected = """\
    :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.
    """
>           self.assertEqual(expected, actual)
E           AssertionError: ':Parameters: **x1, x2** (:class:`array_like`) -- Input[37 chars]`.\n' != ':Parameters: - x1, x2 (:class:`array_like`) - Input ar[34 chars]`.\n'
E           - :Parameters: **x1, x2** (:class:`array_like`) -- Input arrays, description of ``x1``, ``x2``.
E           ?              ^^      --                        -
E           + :Parameters: - x1, x2 (:class:`array_like`) - Input arrays, description of ``x1``, ``x2``.
E           ?              ^^

tests/test_ext_napoleon_docstring.py:1357: AssertionError
___________ NumpyDocstringTest.test_parameters_with_class_reference ____________

self = <test_ext_napoleon_docstring.NumpyDocstringTest testMethod=test_parameters_with_class_reference>

        def test_parameters_with_class_reference(self):
            docstring = """\
    Parameters
    ----------
    param1 : :class:`MyClass <name.space.MyClass>` instance
    
    """
    
            config = Config(napoleon_use_param=False)
            actual = str(NumpyDocstring(docstring, config))
            expected = """\
    :Parameters: **param1** (:class:`MyClass <name.space.MyClass>` instance)
    """
>           self.assertEqual(expected, actual)
E           AssertionError: ':Parameters: **param1** (:class:`MyClass <name.space.MyClass>` instance)\n' != ':Parameters: - param1 (:class:`MyClass <name.space.MyClass>` instance)\n'
E           - :Parameters: **param1** (:class:`MyClass <name.space.MyClass>` instance)
E           ?              ^^      --
E           + :Parameters: - param1 (:class:`MyClass <name.space.MyClass>` instance)
E           ?              ^^

tests/test_ext_napoleon_docstring.py:1333: AssertionError
__________ NumpyDocstringTest.test_parameters_without_class_reference __________

self = <test_ext_napoleon_docstring.NumpyDocstringTest testMethod=test_parameters_without_class_reference>

        def test_parameters_without_class_reference(self):
            docstring = """\
    Parameters
    ----------
    param1 : MyClass instance
    
    """
    
            config = Config(napoleon_use_param=False)
            actual = str(NumpyDocstring(docstring, config))
            expected = """\
    :Parameters: **param1** (:class:`MyClass instance`)
    """
>           self.assertEqual(expected, actual)
E           AssertionError: ':Parameters: **param1** (:class:`MyClass instance`)\n' != ':Parameters: - param1 (:class:`MyClass instance`)\n'
E           - :Parameters: **param1** (:class:`MyClass instance`)
E           ?              ^^      --
E           + :Parameters: - param1 (:class:`MyClass instance`)
E           ?              ^^

tests/test_ext_napoleon_docstring.py:1382: AssertionError
_________________ NumpyDocstringTest.test_xrefs_in_return_type _________________

self = <test_ext_napoleon_docstring.NumpyDocstringTest testMethod=test_xrefs_in_return_type>

        def test_xrefs_in_return_type(self):
            docstring = """
    Example Function
    
    Returns
    -------
    :class:`numpy.ndarray`
        A :math:`n \\times 2` array containing
        a bunch of math items
    """
            expected = """
    Example Function
    
    :returns: A :math:`n \\times 2` array containing
              a bunch of math items
    :rtype: :class:`numpy.ndarray`
    """
            config = Config()
            app = mock.Mock()
            actual = str(NumpyDocstring(docstring, config, app, "method"))
>           self.assertEqual(expected, actual)
E           AssertionError: '\nEx[23 chars]rns: A :math:`n \\times 2` array containing\n [60 chars]y`\n' != '\nEx[23 chars]rns: -A :math:`n \\times 2` array containing\n[61 chars]y`\n'
E             
E             Example Function
E             
E           - :returns: A :math:`n \times 2` array containing
E           + :returns: -A :math:`n \times 2` array containing
E           ?           +
E                       a bunch of math items
E             :rtype: :class:`numpy.ndarray`

tests/test_ext_napoleon_docstring.py:1708: AssertionError
__________________ TestNumpyDocstring.test_token_type_invalid __________________

self = <test_ext_napoleon_docstring.TestNumpyDocstring object at 0x7f6c935a3eb0>
warning = <_io.StringIO object at 0x7f6c9340ae50>

    def test_token_type_invalid(self, warning):
        tokens = (
            "{1, 2",
            "}",
            "'abc",
            "def'",
            '"ghi',
            'jkl"',
        )
        errors = (
            r".+: invalid value set \(missing closing brace\):",
            r".+: invalid value set \(missing opening brace\):",
            r".+: malformed string literal \(missing closing quote\):",
            r".+: malformed string literal \(missing opening quote\):",
            r".+: malformed string literal \(missing closing quote\):",
            r".+: malformed string literal \(missing opening quote\):",
        )
        for token, error in zip(tokens, errors):
            with warns(warning, match=error):
>               _token_type(token)

tests/test_ext_napoleon_docstring.py:2264: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/opt/miniconda3/envs/testbed/lib/python3.9/contextlib.py:126: in __exit__
    next(self.gen)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

warning = <_io.StringIO object at 0x7f6c9340ae50>
match = '.+: invalid value set \\(missing closing brace\\):'

    @contextmanager
    def warns(warning, match):
        match_re = re.compile(match)
        try:
            yield warning
        finally:
            raw_warnings = warning.getvalue()
            warnings = [w for w in raw_warnings.split("\n") if w.strip()]
    
>           assert len(warnings) == 1 and all(match_re.match(w) for w in warnings)
E           assert (2 == 1)
E            +  where 2 = len(["\x1b[91mWARNING: while setting up extension sphinx.addnodes: node class 'meta' is already registered, its visitors will be overridden\x1b[39;49;00m", '\x1b[91mWARNING: invalid value set (missing closing brace): {1, 2\x1b[39;49;00m'])

tests/test_ext_napoleon_docstring.py:2240: AssertionError
--------------------------- Captured stdout teardown ---------------------------
# testroot: root
# builder: html
# srcdir: /tmp/pytest-of-root/pytest-0/root
# outdir: /tmp/pytest-of-root/pytest-0/root/_build/html
# status: 
[01mRunning Sphinx v3.2.0[39;49;00m

# warning: 
[91mWARNING: while setting up extension sphinx.addnodes: node class 'meta' is already registered, its visitors will be overridden[39;49;00m
[91mWARNING: invalid value set (missing closing brace): {1, 2[39;49;00m

_______ TestNumpyDocstring.test_escape_args_and_kwargs[x, y, z-x, y, z] ________

self = <test_ext_napoleon_docstring.TestNumpyDocstring object at 0x7f6c935a30a0>
name = 'x, y, z', expected = 'x, y, z'

    @pytest.mark.parametrize(
        ("name", "expected"),
        (
            ("x, y, z", "x, y, z"),
            ("*args, **kwargs", r"\*args, \*\*kwargs"),
            ("*x, **y", r"\*x, \*\*y"),
        ),
    )
    def test_escape_args_and_kwargs(self, name, expected):
        numpy_docstring = NumpyDocstring("")
        actual = numpy_docstring._escape_args_and_kwargs(name)
    
>       assert actual == expected
E       AssertionError: assert ['x', 'y', 'z'] == 'x, y, z'

tests/test_ext_napoleon_docstring.py:2278: AssertionError
_ TestNumpyDocstring.test_escape_args_and_kwargs[*args, **kwargs-\\*args, \\*\\*kwargs] _

self = <test_ext_napoleon_docstring.TestNumpyDocstring object at 0x7f6c9354db50>
name = '*args, **kwargs', expected = '\\*args, \\*\\*kwargs'

    @pytest.mark.parametrize(
        ("name", "expected"),
        (
            ("x, y, z", "x, y, z"),
            ("*args, **kwargs", r"\*args, \*\*kwargs"),
            ("*x, **y", r"\*x, \*\*y"),
        ),
    )
    def test_escape_args_and_kwargs(self, name, expected):
        numpy_docstring = NumpyDocstring("")
        actual = numpy_docstring._escape_args_and_kwargs(name)
    
>       assert actual == expected
E       AssertionError: assert ['\\*args', '\\*\\*kwargs'] == '\\*args, \\*\\*kwargs'

tests/test_ext_napoleon_docstring.py:2278: AssertionError
____ TestNumpyDocstring.test_escape_args_and_kwargs[*x, **y-\\*x, \\*\\*y] _____

self = <test_ext_napoleon_docstring.TestNumpyDocstring object at 0x7f6c9354d700>
name = '*x, **y', expected = '\\*x, \\*\\*y'

    @pytest.mark.parametrize(
        ("name", "expected"),
        (
            ("x, y, z", "x, y, z"),
            ("*args, **kwargs", r"\*args, \*\*kwargs"),
            ("*x, **y", r"\*x, \*\*y"),
        ),
    )
    def test_escape_args_and_kwargs(self, name, expected):
        numpy_docstring = NumpyDocstring("")
        actual = numpy_docstring._escape_args_and_kwargs(name)
    
>       assert actual == expected
E       AssertionError: assert ['\\*x', '\\*\\*y'] == '\\*x, \\*\\*y'

tests/test_ext_napoleon_docstring.py:2278: AssertionError
=============================== warnings summary ===============================
sphinx/util/docutils.py:45
  /testbed/sphinx/util/docutils.py:45: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
    __version_info__ = tuple(LooseVersion(docutils.__version__).version)

sphinx/registry.py:22
  /testbed/sphinx/registry.py:22: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html
    from pkg_resources import iter_entry_points

../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3154
../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3154
../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3154
../opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3154
  /opt/miniconda3/envs/testbed/lib/python3.9/site-packages/pkg_resources/__init__.py:3154: DeprecationWarning: Deprecated call to `pkg_resources.declare_namespace('sphinxcontrib')`.
  Implementing implicit namespace packages (as specified in PEP 420) is preferred to `pkg_resources.declare_namespace`. See https://setuptools.pypa.io/en/latest/references/keywords.html#keyword-namespace-packages
    declare_namespace(pkg)

sphinx/directives/patches.py:15
  /testbed/sphinx/directives/patches.py:15: DeprecationWarning: The `docutils.parsers.rst.directive.html` module will be removed in Docutils 2.0. Since Docutils 0.18, the "Meta" node is defined in `docutils.parsers.rst.directives.misc`.
    from docutils.parsers.rst.directives import images, html, tables

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
==================================== PASSES ====================================
============================= slowest 25 durations =============================
0.50s setup    tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_token_type_invalid
0.03s call     tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_list_in_parameter_description
0.01s call     tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_list_in_parameter_description

(22 durations < 0.005s hidden.  Use -vv to show these durations.)
=========================== short test summary info ============================
PASSED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_keywords_with_types
PASSED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_kwargs_in_arguments
PASSED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_parameters_with_class_reference
PASSED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_raises_types
PASSED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_section_header_formatting
PASSED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_sphinx_admonitions
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_convert_numpy_type_spec
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameter_types
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_raises_types
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_recombine_set_tokens_invalid
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_section_header_underline_length
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_see_also_refs
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_sphinx_admonitions
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_token_type
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_tokenize_type_spec
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute
PASSED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_underscore_in_attribute_strip_signature_backslash
FAILED tests/test_ext_napoleon_docstring.py::NamedtupleSubclassTest::test_attributes_docstring
FAILED tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member
FAILED tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline
FAILED tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_no_type
FAILED tests/test_ext_napoleon_docstring.py::InlineAttributeTest::test_class_data_member_inline_ref_in_type
FAILED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_attributes_with_class_reference
FAILED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_code_block_in_returns_section
FAILED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_colon_in_return_type
FAILED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_custom_generic_sections
FAILED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_docstrings
FAILED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_list_in_parameter_description
FAILED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_noindex
FAILED tests/test_ext_napoleon_docstring.py::GoogleDocstringTest::test_xrefs_in_return_type
FAILED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_colon_in_return_type
FAILED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_docstrings
FAILED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_list_in_parameter_description
FAILED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_multiple_parameters
FAILED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_with_class_reference
FAILED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_parameters_without_class_reference
FAILED tests/test_ext_napoleon_docstring.py::NumpyDocstringTest::test_xrefs_in_return_type
FAILED tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_token_type_invalid
FAILED tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[x, y, z-x, y, z]
FAILED tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*args, **kwargs-\\*args, \\*\\*kwargs]
FAILED tests/test_ext_napoleon_docstring.py::TestNumpyDocstring::test_escape_args_and_kwargs[*x, **y-\\*x, \\*\\*y]
================== 24 failed, 18 passed, 7 warnings in 0.99s ===================
py39: exit 1 (1.79 seconds) /testbed> pytest -rA --durations 25 tests/test_ext_napoleon_docstring.py pid=106
  py39: FAIL code 1 (1.81=setup[0.02]+cmd[1.79] seconds)
  evaluation failed :( (1.92 seconds)
+ git checkout e188d56ed1248dead58f3f8018c0e9a3f99193f7 tests/test_ext_napoleon_docstring.py
Updated 1 path from 83fce7094
