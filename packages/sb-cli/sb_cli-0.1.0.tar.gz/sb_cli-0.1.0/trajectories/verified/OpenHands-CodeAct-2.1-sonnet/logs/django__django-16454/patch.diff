diff --git a/django/core/management/base.py b/django/core/management/base.py
index abc6f79a15..ac5b4e21d8 100644
--- a/django/core/management/base.py
+++ b/django/core/management/base.py
@@ -71,6 +71,34 @@ class CommandParser(ArgumentParser):
         else:
             raise CommandError("Error: %s" % message)
 
+    def _get_subparser_kwargs(self):
+        """Get kwargs to be passed to subparser."""
+        return {
+            'missing_args_message': self.missing_args_message,
+            'called_from_command_line': self.called_from_command_line,
+            'formatter_class': self.formatter_class,
+        }
+
+    def add_subparsers(self, **kwargs):
+        # Propagate parser settings to the subparser action
+        subparsers = super().add_subparsers(**kwargs)
+        
+        # Store original add_parser method
+        original_add_parser = subparsers.add_parser
+        
+        # Define a wrapper that ensures subparsers are CommandParsers
+        def add_parser_wrapper(name, **sub_kwargs):
+            # Merge parent parser kwargs with subparser kwargs
+            parser_kwargs = self._get_subparser_kwargs()
+            parser_kwargs.update(sub_kwargs)
+            # Create the parser and store it in the name map
+            parser = original_add_parser(name, **parser_kwargs)
+            return parser
+        
+        # Replace the add_parser method with our wrapper
+        subparsers.add_parser = add_parser_wrapper
+        return subparsers
+
 
 def handle_default_options(options):
     """
diff --git a/reproduce_error.py b/reproduce_error.py
new file mode 100644
index 0000000000..0853c3402a
--- /dev/null
+++ b/reproduce_error.py
@@ -0,0 +1,28 @@
+from django.core.management.base import BaseCommand, CommandParser, CommandError
+
+class Command(BaseCommand):
+    def add_arguments(self, parser):
+        subparsers = parser.add_subparsers(dest='subcommand', required=True)
+        create = subparsers.add_parser("create", help="Create a new cheese")
+        create.add_argument("name", help="Name of the cheese")
+
+    def handle(self, *args, **options):
+        pass
+
+if __name__ == "__main__":
+    # Create a command instance
+    cmd = Command()
+    # Create parser
+    parser = cmd.create_parser("manage.py", "cheeses")
+    
+    # Test with missing subcommand - should show nice error
+    try:
+        parser.parse_args([])
+    except Exception as e:
+        print("Error with missing subcommand:", str(e))
+    
+    # Test with missing name argument - should show nice error but shows traceback
+    try:
+        parser.parse_args(["create"])
+    except Exception as e:
+        print("Error with missing name:", str(e))
\ No newline at end of file
