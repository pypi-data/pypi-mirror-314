diff --git a/django/db/models/fields/files.py b/django/db/models/fields/files.py
index e10a5bb6d9..4ee6f24543 100644
--- a/django/db/models/fields/files.py
+++ b/django/db/models/fields/files.py
@@ -227,14 +227,17 @@ class FileField(Field):
     def __init__(self, verbose_name=None, name=None, upload_to='', storage=None, **kwargs):
         self._primary_key_set_explicitly = 'primary_key' in kwargs
 
-        self.storage = storage or default_storage
-        if callable(self.storage):
-            self.storage = self.storage()
-            if not isinstance(self.storage, Storage):
-                raise TypeError(
-                    "%s.storage must be a subclass/instance of %s.%s"
-                    % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)
-                )
+        self._storage = storage or default_storage
+        self._storage_is_callable = callable(self._storage)
+        if self._storage_is_callable:
+            self.storage = self._storage()
+        else:
+            self.storage = self._storage
+        if not isinstance(self.storage, Storage):
+            raise TypeError(
+                "%s.storage must be a subclass/instance of %s.%s"
+                % (self.__class__.__qualname__, Storage.__module__, Storage.__qualname__)
+            )
         self.upload_to = upload_to
 
         kwargs.setdefault('max_length', 100)
@@ -278,8 +281,8 @@ class FileField(Field):
         if kwargs.get("max_length") == 100:
             del kwargs["max_length"]
         kwargs['upload_to'] = self.upload_to
-        if self.storage is not default_storage:
-            kwargs['storage'] = self.storage
+        if self._storage is not default_storage:
+            kwargs['storage'] = self._storage
         return name, path, args, kwargs
 
     def get_internal_type(self):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..cb4447799d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,30 @@
+from django.conf import settings
+from django.core.files.storage import FileSystemStorage
+from django.db import models
+import django
+
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+django.setup()
+
+# Test with invalid storage
+def get_invalid_storage():
+    return object()  # Not a Storage instance
+
+try:
+    class MyModel(models.Model):
+        file = models.FileField(storage=get_invalid_storage)
+except TypeError as e:
+    print("Got expected TypeError:", str(e))
+    
+    class Meta:
+        app_label = 'django.contrib.contenttypes'
+
+# Get the field's deconstruction
+field = MyModel._meta.get_field('file')
+name, path, args, kwargs = field.deconstruct()
+
+print("Deconstructed storage:", kwargs.get('storage'))
+print("Is callable?", callable(kwargs.get('storage')))
\ No newline at end of file
