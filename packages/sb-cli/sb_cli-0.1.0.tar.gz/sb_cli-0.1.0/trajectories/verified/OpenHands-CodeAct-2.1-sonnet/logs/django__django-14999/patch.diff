diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 982816be3a..2b281d2e24 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -320,6 +320,13 @@ class RenameModel(ModelOperation):
         new_model = to_state.apps.get_model(app_label, self.new_name)
         if self.allow_migrate_model(schema_editor.connection.alias, new_model):
             old_model = from_state.apps.get_model(app_label, self.old_name)
+            
+            # If both models have the same db_table, this is a no-op
+            if (hasattr(old_model._meta, 'db_table') and 
+                hasattr(new_model._meta, 'db_table') and 
+                old_model._meta.db_table == new_model._meta.db_table):
+                return
+                
             # Move the main table
             schema_editor.alter_db_table(
                 new_model,
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..bf9bf573ce
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,54 @@
+import django
+from django.conf import settings
+from django.db import models, migrations
+from django.db.migrations.state import ProjectState, ModelState
+from django.db.migrations.operations.models import RenameModel
+from django.db.backends.base.schema import BaseDatabaseSchemaEditor
+
+# Configure Django settings
+settings.configure(
+    DATABASES={
+        'default': {
+            'ENGINE': 'django.db.backends.sqlite3',
+            'NAME': ':memory:'
+        }
+    },
+    INSTALLED_APPS=[],
+)
+
+django.setup()
+
+# Create a model with custom db_table
+class OldModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+        db_table = 'custom_table'
+
+# Create a renamed version of the model
+class NewModel(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        app_label = 'testapp'
+        db_table = 'different_table'
+
+# Create states
+old_state = ProjectState()
+old_state.add_model(ModelState.from_model(OldModel))
+
+new_state = ProjectState()
+new_state.add_model(ModelState.from_model(NewModel))
+
+# Create RenameModel operation
+operation = RenameModel(old_name='OldModel', new_name='NewModel')
+
+# Create schema editor
+from django.db import connection
+schema_editor = connection.schema_editor()
+
+# Execute the operation
+print("Executing RenameModel operation...")
+operation.database_forwards('testapp', schema_editor, old_state, new_state)
+print("Operation completed.")
\ No newline at end of file
