diff --git a/sphinx/util/inspect.py b/sphinx/util/inspect.py
index 23dd9e930..83bc2bb9a 100644
--- a/sphinx/util/inspect.py
+++ b/sphinx/util/inspect.py
@@ -836,30 +836,58 @@ def getdoc(obj: Any, attrgetter: Callable = safe_getattr,
     * partial functions
     * inherited docstring
     * inherited decorated methods
+    * class properties (methods decorated with both @classmethod and @property)
     """
     doc = attrgetter(obj, '__doc__', None)
-    if ispartial(obj) and doc == obj.__class__.__doc__:
-        return getdoc(obj.func)
-    elif doc is None and allow_inherited:
-        if cls and name:
-            # Check a docstring of the attribute or method from super classes.
-            for basecls in getmro(cls):
-                meth = safe_getattr(basecls, name, None)
-                if meth is not None:
-                    doc = attrgetter(meth, '__doc__', None)
-                    if doc is not None:
-                        break
 
-            if doc is None:
-                # retry using `inspect.getdoc()`
+    # Handle class properties (methods decorated with both @classmethod and @property)
+    if cls and name and (doc is None or doc == str.__doc__ or doc == classmethod.__doc__):
+        # Try to get the original method before decoration
+        for basecls in getmro(cls):
+            if name in basecls.__dict__:
+                member = basecls.__dict__[name]
+                # Handle @classmethod @property case
+                if isinstance(member, classmethod):
+                    func = member.__func__
+                    if isinstance(func, property):
+                        doc = attrgetter(func.fget, '__doc__', None)
+                    else:
+                        doc = attrgetter(func, '__doc__', None)
+                # Handle @property @classmethod case
+                elif isinstance(member, property):
+                    if hasattr(member.fget, '__func__'):  # classmethod
+                        doc = attrgetter(member.fget.__func__, '__doc__', None)
+                    else:
+                        doc = attrgetter(member.fget, '__doc__', None)
+                # Handle case where member is already a function
+                elif inspect.isfunction(member):
+                    doc = attrgetter(member, '__doc__', None)
+                if doc is not None:
+                    break
+
+    if doc is None:
+        if ispartial(obj) and doc == obj.__class__.__doc__:
+            return getdoc(obj.func)
+        elif allow_inherited:
+            if cls and name:
+                # Check a docstring of the attribute or method from super classes.
                 for basecls in getmro(cls):
                     meth = safe_getattr(basecls, name, None)
                     if meth is not None:
-                        doc = inspect.getdoc(meth)
+                        doc = attrgetter(meth, '__doc__', None)
                         if doc is not None:
                             break
 
-        if doc is None:
-            doc = inspect.getdoc(obj)
+                if doc is None:
+                    # retry using `inspect.getdoc()`
+                    for basecls in getmro(cls):
+                        meth = safe_getattr(basecls, name, None)
+                        if meth is not None:
+                            doc = inspect.getdoc(meth)
+                            if doc is not None:
+                                break
+
+            if doc is None:
+                doc = inspect.getdoc(obj)
 
     return doc
