diff --git a/lib/matplotlib/cbook/__init__.py b/lib/matplotlib/cbook/__init__.py
index 34c6ddb861..d9f8c4d2ec 100644
--- a/lib/matplotlib/cbook/__init__.py
+++ b/lib/matplotlib/cbook/__init__.py
@@ -1746,7 +1746,13 @@ def _safe_first_finite(obj, *, skip_nonfinite=True):
         raise RuntimeError("matplotlib does not "
                            "support generators as input")
     else:
-        return next(val for val in obj if safe_isfinite(val))
+        try:
+            return next(val for val in obj if safe_isfinite(val))
+        except StopIteration:
+            # If all values are non-finite (e.g. all NaN), return the first value
+            if len(obj) > 0:
+                return obj[0]
+            raise
 
 
 def sanitize_sequence(data):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..3a5f3b1e2b
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,6 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+f, ax = plt.subplots()
+ax.bar([np.nan], [np.nan])
+plt.show()
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..89b909ccee
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,25 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test cases
+test_cases = [
+    ([np.nan], [0]),           # NaN x, finite height
+    ([0], [np.nan]),           # finite x, NaN height
+    ([np.nan], [np.nan]),      # NaN x and height
+    ([np.nan, 1], [0, 1]),     # Mix of NaN and finite x
+    ([1, np.nan], [1, 0]),     # Mix of finite and NaN x
+    ([], []),                  # Empty arrays
+]
+
+for i, (x, height) in enumerate(test_cases, 1):
+    print(f"\nTest case {i}:")
+    print(f"x = {x}")
+    print(f"height = {height}")
+    
+    f, ax = plt.subplots()
+    try:
+        ax.bar(x, height)
+        print("✓ Success")
+    except Exception as e:
+        print(f"✗ Failed: {type(e).__name__}: {str(e)}")
+    plt.close()
\ No newline at end of file
