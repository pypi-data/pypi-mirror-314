diff --git a/django/views/generic/base.py b/django/views/generic/base.py
index db1842e3e5..93979d1e9c 100644
--- a/django/views/generic/base.py
+++ b/django/views/generic/base.py
@@ -148,7 +148,12 @@ class View:
             request.path,
             extra={"status_code": 405, "request": request},
         )
-        return HttpResponseNotAllowed(self._allowed_methods())
+        response = HttpResponseNotAllowed(self._allowed_methods())
+        if self.view_is_async:
+            async def func():
+                return response
+            return func()
+        return response
 
     def options(self, request, *args, **kwargs):
         """Handle responding to requests for the OPTIONS HTTP verb."""
diff --git a/test_async_view.py b/test_async_view.py
new file mode 100644
index 0000000000..8eafce3300
--- /dev/null
+++ b/test_async_view.py
@@ -0,0 +1,76 @@
+import os
+import sys
+import django
+from django.conf import settings
+from django.core.handlers.asgi import ASGIHandler
+from django.urls import path
+from django.views import View
+from django.http import HttpResponse
+
+# Configure Django settings
+settings.configure(
+    DEBUG=True,
+    SECRET_KEY='secret',
+    ROOT_URLCONF=__name__,
+    MIDDLEWARE=[],
+)
+
+# Create test view
+class Demo(View):
+    """This basic view supports only POST requests"""
+    async def post(self, request):
+        return HttpResponse("ok")
+
+# URL patterns
+urlpatterns = [
+    path("demo", Demo.as_view()),
+]
+
+# Initialize Django
+django.setup()
+
+# Create ASGI application
+application = ASGIHandler()
+
+# Test function
+async def test_get_request():
+    from asgiref.testing import ApplicationCommunicator
+    
+    # Create a GET request
+    scope = {
+        "type": "http",
+        "method": "GET",
+        "path": "/demo",
+        "raw_path": b"/demo",
+        "query_string": b"",
+        "scheme": "http",
+        "server": ("testserver", 80),
+        "client": ("testclient", 80),
+        "asgi": {"version": "3.0"},
+        "headers": [],
+    }
+    
+    # Create communicator
+    comm = ApplicationCommunicator(application, scope)
+    
+    # Send request
+    await comm.send_input({
+        "type": "http.request",
+        "body": b"",
+        "more_body": False,
+    })
+    
+    # Get response
+    response_start = await comm.receive_output(1)
+    assert response_start["type"] == "http.response.start"
+    assert response_start["status"] == 405  # Method Not Allowed
+    
+    response_body = await comm.receive_output(1)
+    assert response_body["type"] == "http.response.body"
+    
+    print("Test passed! GET request to async view returns 405 Method Not Allowed")
+
+# Run test
+if __name__ == "__main__":
+    import asyncio
+    asyncio.run(test_get_request())
\ No newline at end of file
