diff --git a/accounts/__init__.py b/accounts/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/accounts/apps.py b/accounts/apps.py
new file mode 100644
index 0000000000..b250848706
--- /dev/null
+++ b/accounts/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class SpeedyCoreAccountsConfig(AppConfig):
+    name = 'accounts'
+    default_auto_field = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/accounts/models.py b/accounts/models.py
new file mode 100644
index 0000000000..5518cc47e3
--- /dev/null
+++ b/accounts/models.py
@@ -0,0 +1,14 @@
+
+from django.db import models
+
+class Entity(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        abstract = True
+
+class User(Entity):
+    email = models.EmailField()
+
+class ReservedUsername(Entity):
+    reserved = models.BooleanField(default=True)
diff --git a/blocks/__init__.py b/blocks/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/blocks/apps.py b/blocks/apps.py
new file mode 100644
index 0000000000..acbbff8832
--- /dev/null
+++ b/blocks/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class BlocksConfig(AppConfig):
+    name = 'blocks'
+    default_auto_field = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/blocks/models.py b/blocks/models.py
new file mode 100644
index 0000000000..4a6ac34f9e
--- /dev/null
+++ b/blocks/models.py
@@ -0,0 +1,11 @@
+
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class Block(Entity):
+    reason = models.TextField()
diff --git a/contact_by_form/__init__.py b/contact_by_form/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/contact_by_form/apps.py b/contact_by_form/apps.py
new file mode 100644
index 0000000000..6a3f778bbe
--- /dev/null
+++ b/contact_by_form/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class SpeedyCoreContactByFormConfig(AppConfig):
+    name = 'contact_by_form'
+    default_auto_field = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/contact_by_form/models.py b/contact_by_form/models.py
new file mode 100644
index 0000000000..0909cc17d4
--- /dev/null
+++ b/contact_by_form/models.py
@@ -0,0 +1,11 @@
+
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class Feedback(Entity):
+    message = models.TextField()
diff --git a/core_messages/__init__.py b/core_messages/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/core_messages/apps.py b/core_messages/apps.py
new file mode 100644
index 0000000000..cbf1404036
--- /dev/null
+++ b/core_messages/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class SpeedyCoreMessagesConfig(AppConfig):
+    name = 'core_messages'
+    default_auto_field = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/core_messages/models.py b/core_messages/models.py
new file mode 100644
index 0000000000..1f55d66438
--- /dev/null
+++ b/core_messages/models.py
@@ -0,0 +1,11 @@
+
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class ReadMark(Entity):
+    read_at = models.DateTimeField(auto_now_add=True)
diff --git a/friendship/__init__.py b/friendship/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/friendship/apps.py b/friendship/apps.py
new file mode 100644
index 0000000000..213db3a5d4
--- /dev/null
+++ b/friendship/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class FriendshipConfig(AppConfig):
+    name = 'friendship'
+    default_auto_field = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/friendship/models.py b/friendship/models.py
new file mode 100644
index 0000000000..442af7f8a6
--- /dev/null
+++ b/friendship/models.py
@@ -0,0 +1,20 @@
+
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class Friend(Entity):
+    name = models.CharField(max_length=100)
+
+class Follow(Entity):
+    name = models.CharField(max_length=100)
+
+class Block(Entity):
+    name = models.CharField(max_length=100)
+
+class FriendshipRequest(Entity):
+    message = models.TextField()
diff --git a/likes/__init__.py b/likes/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/likes/apps.py b/likes/apps.py
new file mode 100644
index 0000000000..31718a6cf6
--- /dev/null
+++ b/likes/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class LikesConfig(AppConfig):
+    name = 'likes'
+    default_auto_field = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/likes/models.py b/likes/models.py
new file mode 100644
index 0000000000..8fd4c41f2a
--- /dev/null
+++ b/likes/models.py
@@ -0,0 +1,11 @@
+
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class UserLike(Entity):
+    liked_at = models.DateTimeField(auto_now_add=True)
diff --git a/test_all_apps.py b/test_all_apps.py
new file mode 100644
index 0000000000..9d62aa56e1
--- /dev/null
+++ b/test_all_apps.py
@@ -0,0 +1,156 @@
+from django.db import models
+from django.core.management import execute_from_command_line
+from django.conf import settings
+import os
+import sys
+
+# Configure minimal Django settings
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'accounts.apps.SpeedyCoreAccountsConfig',
+    'blocks.apps.BlocksConfig',
+    'contact_by_form.apps.SpeedyCoreContactByFormConfig',
+    'core_messages.apps.SpeedyCoreMessagesConfig',
+    'friendship.apps.FriendshipConfig',
+    'likes.apps.LikesConfig',
+    'uploads.apps.UploadsConfig',
+]
+
+settings.configure(
+    DEBUG=True,
+    DATABASES=DATABASES,
+    INSTALLED_APPS=INSTALLED_APPS,
+)
+
+# Create __init__.py files
+for app in ['accounts', 'blocks', 'contact_by_form', 'core_messages', 'friendship', 'likes', 'uploads']:
+    with open(f'{app}/__init__.py', 'w') as f:
+        f.write('')
+
+# Create models.py files with inheritance
+accounts_models = '''
+from django.db import models
+
+class Entity(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        abstract = True
+
+class User(Entity):
+    email = models.EmailField()
+
+class ReservedUsername(Entity):
+    reserved = models.BooleanField(default=True)
+'''
+
+blocks_models = '''
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class Block(Entity):
+    reason = models.TextField()
+'''
+
+contact_models = '''
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class Feedback(Entity):
+    message = models.TextField()
+'''
+
+messages_models = '''
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class ReadMark(Entity):
+    read_at = models.DateTimeField(auto_now_add=True)
+'''
+
+friendship_models = '''
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class Friend(Entity):
+    name = models.CharField(max_length=100)
+
+class Follow(Entity):
+    name = models.CharField(max_length=100)
+
+class Block(Entity):
+    name = models.CharField(max_length=100)
+
+class FriendshipRequest(Entity):
+    message = models.TextField()
+'''
+
+likes_models = '''
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class UserLike(Entity):
+    liked_at = models.DateTimeField(auto_now_add=True)
+'''
+
+uploads_models = '''
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class Image(Entity):
+    file = models.ImageField(upload_to='images/')
+'''
+
+# Write models.py files
+models_content = {
+    'accounts': accounts_models,
+    'blocks': blocks_models,
+    'contact_by_form': contact_models,
+    'core_messages': messages_models,
+    'friendship': friendship_models,
+    'likes': likes_models,
+    'uploads': uploads_models,
+}
+
+for app, content in models_content.items():
+    with open(f'{app}/models.py', 'w') as f:
+        f.write(content)
+
+if __name__ == '__main__':
+    execute_from_command_line(['manage.py', 'makemigrations'])
\ No newline at end of file
diff --git a/test_app/__init__.py b/test_app/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app/apps.py b/test_app/apps.py
new file mode 100644
index 0000000000..00057d6ebc
--- /dev/null
+++ b/test_app/apps.py
@@ -0,0 +1,6 @@
+
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
+    default_auto_field = 'django.db.models.BigAutoField'
diff --git a/test_app/models.py b/test_app/models.py
new file mode 100644
index 0000000000..779d34bc6d
--- /dev/null
+++ b/test_app/models.py
@@ -0,0 +1,11 @@
+
+from django.db import models
+
+class Entity(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        abstract = True
+
+class User(Entity):
+    email = models.EmailField()
diff --git a/test_app2/__init__.py b/test_app2/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_app2/models.py b/test_app2/models.py
new file mode 100644
index 0000000000..f986db3248
--- /dev/null
+++ b/test_app2/models.py
@@ -0,0 +1,12 @@
+
+from django.db import models
+
+class Entity(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        abstract = True
+
+class User(Entity):
+    email = models.EmailField()
diff --git a/test_inheritance.py b/test_inheritance.py
new file mode 100644
index 0000000000..008dfa7e35
--- /dev/null
+++ b/test_inheritance.py
@@ -0,0 +1,63 @@
+from django.db import models
+from django.core.management import execute_from_command_line
+from django.conf import settings
+import os
+import sys
+
+# Configure minimal Django settings
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'test_app',
+]
+
+settings.configure(
+    DEBUG=True,
+    DATABASES=DATABASES,
+    INSTALLED_APPS=INSTALLED_APPS,
+)
+
+# Create test app
+if not os.path.exists('test_app'):
+    os.makedirs('test_app')
+
+# Create models.py
+models_content = '''
+from django.db import models
+
+class Entity(models.Model):
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        abstract = True
+
+class User(Entity):
+    email = models.EmailField()
+'''
+
+with open('test_app/models.py', 'w') as f:
+    f.write(models_content)
+
+# Create __init__.py
+with open('test_app/__init__.py', 'w') as f:
+    f.write('')
+
+# Create apps.py
+apps_content = '''
+from django.apps import AppConfig
+
+class TestAppConfig(AppConfig):
+    name = 'test_app'
+    default_auto_field = 'django.db.models.BigAutoField'
+'''
+
+with open('test_app/apps.py', 'w') as f:
+    f.write(apps_content)
+
+if __name__ == '__main__':
+    execute_from_command_line(['manage.py', 'makemigrations'])
\ No newline at end of file
diff --git a/test_inheritance_explicit.py b/test_inheritance_explicit.py
new file mode 100644
index 0000000000..10d3f1a662
--- /dev/null
+++ b/test_inheritance_explicit.py
@@ -0,0 +1,52 @@
+from django.db import models
+from django.core.management import execute_from_command_line
+from django.conf import settings
+import os
+import sys
+
+# Configure minimal Django settings
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': ':memory:',
+    }
+}
+
+INSTALLED_APPS = [
+    'test_app2',
+]
+
+settings.configure(
+    DEBUG=True,
+    DATABASES=DATABASES,
+    INSTALLED_APPS=INSTALLED_APPS,
+)
+
+# Create test app
+if not os.path.exists('test_app2'):
+    os.makedirs('test_app2')
+
+# Create models.py with explicit primary key
+models_content = '''
+from django.db import models
+
+class Entity(models.Model):
+    id = models.BigAutoField(primary_key=True)
+    name = models.CharField(max_length=100)
+    
+    class Meta:
+        abstract = True
+
+class User(Entity):
+    email = models.EmailField()
+'''
+
+with open('test_app2/models.py', 'w') as f:
+    f.write(models_content)
+
+# Create __init__.py
+with open('test_app2/__init__.py', 'w') as f:
+    f.write('')
+
+if __name__ == '__main__':
+    execute_from_command_line(['manage.py', 'makemigrations'])
\ No newline at end of file
diff --git a/uploads/__init__.py b/uploads/__init__.py
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/uploads/apps.py b/uploads/apps.py
new file mode 100644
index 0000000000..0c50031cd8
--- /dev/null
+++ b/uploads/apps.py
@@ -0,0 +1,5 @@
+from django.apps import AppConfig
+
+class UploadsConfig(AppConfig):
+    name = 'uploads'
+    default_auto_field = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/uploads/models.py b/uploads/models.py
new file mode 100644
index 0000000000..f6e8677eeb
--- /dev/null
+++ b/uploads/models.py
@@ -0,0 +1,11 @@
+
+from django.db import models
+
+class Entity(models.Model):
+    created_at = models.DateTimeField(auto_now_add=True)
+    
+    class Meta:
+        abstract = True
+
+class Image(Entity):
+    file = models.ImageField(upload_to='images/')
