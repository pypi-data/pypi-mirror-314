diff --git a/reproduce_stratified_kfold.py b/reproduce_stratified_kfold.py
new file mode 100644
index 000000000..d388a5dfc
--- /dev/null
+++ b/reproduce_stratified_kfold.py
@@ -0,0 +1,46 @@
+import numpy as np
+from sklearn.model_selection import StratifiedKFold
+
+RANDOM_SEED = 1
+
+samples_per_class = 10
+X = np.linspace(0, samples_per_class*2-1, samples_per_class * 2)
+y = np.concatenate((np.ones(samples_per_class), np.zeros(samples_per_class)), axis=0)
+
+print("X:", X)
+print("y:", y)
+print()
+
+print('shuffle = False')
+print('-' * 50)
+
+k_fold = StratifiedKFold(n_splits=10, shuffle=False, random_state=RANDOM_SEED)
+result = 0
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(f"Fold {fold_n}:")
+    print("Train:", train_idx)
+    print("Test: ", test_idx)
+    print()
+
+print('shuffle = True, Random seed =', RANDOM_SEED)
+print('-' * 50)
+
+k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)
+result = 0
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(f"Fold {fold_n}:")
+    print("Train:", train_idx)
+    print("Test: ", test_idx)
+    print()
+
+RANDOM_SEED += 1
+print('shuffle = True, Random seed =', RANDOM_SEED)
+print('-' * 50)
+
+k_fold = StratifiedKFold(n_splits=10, shuffle=True, random_state=RANDOM_SEED)
+result = 0
+for fold_n, (train_idx, test_idx) in enumerate(k_fold.split(X, y)):
+    print(f"Fold {fold_n}:")
+    print("Train:", train_idx)
+    print("Test: ", test_idx)
+    print()
\ No newline at end of file
diff --git a/sklearn/model_selection/_split.py b/sklearn/model_selection/_split.py
index 24394f869..c8f8f4d76 100644
--- a/sklearn/model_selection/_split.py
+++ b/sklearn/model_selection/_split.py
@@ -648,26 +648,27 @@ class StratifiedKFold(_BaseKFold):
         # pre-assign each sample to a test fold index using individual KFold
         # splitting strategies for each class so as to respect the balance of
         # classes
-        # NOTE: Passing the data corresponding to ith class say X[y==class_i]
-        # will break when the data is not 100% stratifiable for all classes.
-        # So we pass np.zeroes(max(c, n_splits)) as data to the KFold
-        per_cls_cvs = [
-            KFold(self.n_splits, shuffle=self.shuffle,
-                  random_state=rng).split(np.zeros(max(count, self.n_splits)))
-            for count in y_counts]
-
         test_folds = np.zeros(n_samples, dtype=np.int)
-        for test_fold_indices, per_cls_splits in enumerate(zip(*per_cls_cvs)):
-            for cls, (_, test_split) in zip(unique_y, per_cls_splits):
-                cls_test_folds = test_folds[y == cls]
-                # the test split can be too big because we used
-                # KFold(...).split(X[:max(c, n_splits)]) when data is not 100%
-                # stratifiable for all the classes
-                # (we use a warning instead of raising an exception)
-                # If this is the case, let's trim it:
-                test_split = test_split[test_split < len(cls_test_folds)]
-                cls_test_folds[test_split] = test_fold_indices
-                test_folds[y == cls] = cls_test_folds
+        for cls in unique_y:
+            # Get indices for samples in this class
+            cls_idx = np.where(y == cls)[0]
+            
+            if self.shuffle:
+                # Shuffle indices within this class if shuffle=True
+                rng = check_random_state(self.random_state)
+                rng.shuffle(cls_idx)
+            
+            # Split indices into n_splits groups
+            n_samples_cls = len(cls_idx)
+            fold_sizes = np.full(self.n_splits, n_samples_cls // self.n_splits, dtype=np.int)
+            fold_sizes[:n_samples_cls % self.n_splits] += 1
+            current = 0
+            
+            # Assign test fold indices
+            for fold_idx, fold_size in enumerate(fold_sizes):
+                start, stop = current, current + fold_size
+                test_folds[cls_idx[start:stop]] = fold_idx
+                current = stop
 
         return test_folds
