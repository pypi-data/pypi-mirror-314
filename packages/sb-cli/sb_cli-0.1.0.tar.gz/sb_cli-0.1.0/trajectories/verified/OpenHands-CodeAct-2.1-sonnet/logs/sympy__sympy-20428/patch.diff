diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..84a15b0d2d
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,27 @@
+from sympy import *
+x = symbols("x")
+f = Poly(sympify("-117968192370600*18**(1/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) - 15720318185*2**(2/3)*3**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 15720318185*12**(1/3)*(24201 + 253*sqrt(9165))**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3)) + 117968192370600*2**(1/3)*3**(2/3)/(217603955769048*(24201 + 253*sqrt(9165))**(1/3) + 2273005839412*sqrt(9165)*(24201 + 253*sqrt(9165))**(1/3))"), x)
+
+print("Original polynomial:")
+print(f)
+
+print("\nCalling clear_denoms():")
+coeff, bad_poly = f.clear_denoms()
+print("Coefficient:", coeff)
+print("Bad polynomial:", bad_poly)
+
+print("\nBehavior tests:")
+print("bad_poly:", bad_poly)
+print("bad_poly.is_zero:", bad_poly.is_zero)
+print("bad_poly.as_expr():", bad_poly.as_expr())
+print("bad_poly.as_expr().is_zero:", bad_poly.as_expr().is_zero)
+
+print("\nInternal representation:")
+print("bad_poly.rep:", bad_poly.rep)
+print("Poly(0, x, domain='EX').rep:", Poly(0, x, domain="EX").rep)
+
+print("\nTesting terms_gcd():")
+try:
+    print("bad_poly.terms_gcd():", bad_poly.terms_gcd())
+except Exception as e:
+    print("Error in terms_gcd():", str(e))
\ No newline at end of file
diff --git a/sympy/polys/densebasic.py b/sympy/polys/densebasic.py
index 1caeb8f629..cbe96f28d6 100644
--- a/sympy/polys/densebasic.py
+++ b/sympy/polys/densebasic.py
@@ -262,7 +262,13 @@ def dup_strip(f):
     [1, 2, 3, 0]
 
     """
-    if not f or f[0]:
+    if not f:
+        return []
+
+    if not any(f):  # All coefficients are zero
+        return []
+
+    if f[0]:
         return f
 
     i = 0
@@ -293,7 +299,9 @@ def dmp_strip(f, u):
         return dup_strip(f)
 
     if dmp_zero_p(f, u):
-        return f
+        if not u:
+            return []
+        return dmp_zero(u)
 
     i, v = 0, u - 1
 
@@ -355,6 +363,9 @@ def dmp_validate(f, K=None):
     ValueError: invalid data structure for a multivariate polynomial
 
     """
+    if not f:
+        return [], 0
+
     levels = _rec_validate(f, f, 0, K)
 
     u = levels.pop()
@@ -557,6 +568,11 @@ def dmp_convert(f, u, K0, K1):
     [[1], [2]]
 
     """
+    if dmp_zero_p(f, u):
+        if not u:
+            return []
+        return dmp_zero(u)
+
     if not u:
         return dup_convert(f, K0, K1)
     if K0 is not None and K0 == K1:
@@ -707,6 +723,12 @@ def dmp_zero_p(f, u):
     False
 
     """
+    if not f:
+        return True
+
+    if not u:
+        return not any(f)
+
     while u:
         if len(f) != 1:
             return False
@@ -817,7 +839,9 @@ def dmp_ground(c, u):
     1
 
     """
-    if not c:
+    if not c or c == 0:
+        if not u:
+            return []
         return dmp_zero(u)
 
     for i in range(u + 1):
@@ -988,22 +1012,43 @@ def dmp_from_dict(f, u, K):
     []
 
     """
-    if not u:
-        return dup_from_dict(f, K)
     if not f:
+        if not u:
+            return []
+        return dmp_zero(u)
+
+    # Check if all coefficients are zero
+    all_zero = True
+    for coeff in f.values():
+        if not K.is_zero(coeff):
+            all_zero = False
+            break
+
+    if all_zero:
+        if not u:
+            return []
         return dmp_zero(u)
 
+    if not u:
+        return dup_from_dict(f, K)
+
     coeffs = {}
 
     for monom, coeff in f.items():
-        head, tail = monom[0], monom[1:]
+        if not K.is_zero(coeff):  # Skip zero coefficients
+            head, tail = monom[0], monom[1:]
 
-        if head in coeffs:
-            coeffs[head][tail] = coeff
-        else:
-            coeffs[head] = { tail: coeff }
+            if head in coeffs:
+                coeffs[head][tail] = coeff
+            else:
+                coeffs[head] = { tail: coeff }
+
+    if not coeffs:  # All coefficients were zero
+        if not u:
+            return []
+        return dmp_zero(u)
 
-    n, v, h = max(coeffs.keys()), u - 1, []
+    n, v, h = max(coeffs.keys()) if coeffs else -1, u - 1, []
 
     for k in range(n, -1, -1):
         coeff = coeffs.get(k)
diff --git a/sympy/polys/densetools.py b/sympy/polys/densetools.py
index f057824642..33ddc1a1e5 100644
--- a/sympy/polys/densetools.py
+++ b/sympy/polys/densetools.py
@@ -1184,6 +1184,9 @@ def dup_clear_denoms(f, K0, K1=None, convert=False):
     (6, 3*x + 2)
 
     """
+    if not f:
+        return K0.one, []
+
     if K1 is None:
         if K0.has_assoc_Ring:
             K1 = K0.get_ring()
@@ -1238,6 +1241,12 @@ def dmp_clear_denoms(f, u, K0, K1=None, convert=False):
     (6, 3*x + 2*y + 6)
 
     """
+    if dmp_zero_p(f, u):
+        if not u:
+            return K0.one, []
+        else:
+            return K0.one, dmp_zero(u)
+
     if not u:
         return dup_clear_denoms(f, K0, K1, convert=convert)
 
diff --git a/sympy/polys/polyclasses.py b/sympy/polys/polyclasses.py
index 238a0f0b25..da7377d170 100644
--- a/sympy/polys/polyclasses.py
+++ b/sympy/polys/polyclasses.py
@@ -151,10 +151,23 @@ def __init__(self, rep, dom, lev=None, ring=None):
             if type(rep) is dict:
                 rep = dmp_from_dict(rep, lev, dom)
             elif type(rep) is not list:
-                rep = dmp_ground(dom.convert(rep), lev)
+                if dom.is_zero(rep):
+                    if not lev:
+                        rep = []
+                    else:
+                        rep = dmp_zero(lev)
+                else:
+                    rep = dmp_ground(dom.convert(rep), lev)
         else:
             rep, lev = dmp_validate(rep)
 
+        # Ensure zero polynomials have empty list representation
+        if dmp_zero_p(rep, lev):
+            if not lev:
+                rep = []
+            else:
+                rep = dmp_zero(lev)
+
         self.rep = rep
         self.lev = lev
         self.dom = dom
@@ -216,7 +229,9 @@ def per(f, rep, dom=None, kill=False, ring=None):
 
     @classmethod
     def zero(cls, lev, dom, ring=None):
-        return DMP(0, dom, lev, ring)
+        if not lev:
+            return DMP([], dom, lev, ring)
+        return DMP(dmp_zero(lev), dom, lev, ring)
 
     @classmethod
     def one(cls, lev, dom, ring=None):
@@ -841,6 +856,8 @@ def count_complex_roots(f, inf=None, sup=None):
     @property
     def is_zero(f):
         """Returns ``True`` if ``f`` is a zero polynomial. """
+        if not f.lev:
+            return not f.rep
         return dmp_zero_p(f.rep, f.lev)
 
     @property
