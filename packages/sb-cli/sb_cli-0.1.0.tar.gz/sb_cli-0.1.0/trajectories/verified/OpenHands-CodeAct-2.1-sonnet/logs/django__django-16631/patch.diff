diff --git a/django/contrib/auth/__init__.py b/django/contrib/auth/__init__.py
index 155330c596..c3700526ae 100644
--- a/django/contrib/auth/__init__.py
+++ b/django/contrib/auth/__init__.py
@@ -199,12 +199,13 @@ def get_user(request):
             # Verify the session
             if hasattr(user, "get_session_auth_hash"):
                 session_hash = request.session.get(HASH_SESSION_KEY)
-                session_hash_verified = session_hash and constant_time_compare(
-                    session_hash, user.get_session_auth_hash()
-                )
-                if not session_hash_verified:
-                    request.session.flush()
-                    user = None
+                if session_hash:
+                    # Try to verify with current key and fallbacks
+                    current_hash = user.get_session_auth_hash(compare_with=session_hash)
+                    session_hash_verified = constant_time_compare(session_hash, current_hash)
+                    if not session_hash_verified:
+                        request.session.flush()
+                        user = None
 
     return user or AnonymousUser()
 
diff --git a/django/contrib/auth/base_user.py b/django/contrib/auth/base_user.py
index 5ee30bf59c..66ebb1154a 100644
--- a/django/contrib/auth/base_user.py
+++ b/django/contrib/auth/base_user.py
@@ -131,15 +131,20 @@ class AbstractBaseUser(models.Model):
         """
         return is_password_usable(self.password)
 
-    def get_session_auth_hash(self):
+    def get_session_auth_hash(self, compare_with=None):
         """
         Return an HMAC of the password field.
+
+        If compare_with is provided and settings.SECRET_KEY_FALLBACKS exists,
+        it will try each fallback key until it finds one that produces a matching hash.
+        This is useful for maintaining sessions across secret key rotations.
         """
         key_salt = "django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash"
         return salted_hmac(
             key_salt,
             self.password,
             algorithm="sha256",
+            compare_with=compare_with,
         ).hexdigest()
 
     @classmethod
diff --git a/django/utils/crypto.py b/django/utils/crypto.py
index 1c0e7001c6..07efe6860b 100644
--- a/django/utils/crypto.py
+++ b/django/utils/crypto.py
@@ -15,32 +15,54 @@ class InvalidAlgorithm(ValueError):
     pass
 
 
-def salted_hmac(key_salt, value, secret=None, *, algorithm="sha1"):
+def salted_hmac(key_salt, value, secret=None, *, algorithm="sha1", compare_with=None):
     """
     Return the HMAC of 'value', using a key generated from key_salt and a
     secret (which defaults to settings.SECRET_KEY). Default algorithm is SHA1,
     but any algorithm name supported by hashlib can be passed.
 
+    If compare_with is provided and settings.SECRET_KEY_FALLBACKS is set,
+    it will try each fallback key until it finds one that produces a matching hash.
+    This is useful for maintaining sessions and other persistent tokens across
+    secret key rotations.
+
     A different key_salt should be passed in for every application of HMAC.
     """
     if secret is None:
         secret = settings.SECRET_KEY
 
     key_salt = force_bytes(key_salt)
-    secret = force_bytes(secret)
     try:
         hasher = getattr(hashlib, algorithm)
     except AttributeError as e:
         raise InvalidAlgorithm(
             "%r is not an algorithm accepted by the hashlib module." % algorithm
         ) from e
-    # We need to generate a derived key from our base key.  We can do this by
-    # passing the key_salt and our base key through a pseudo-random function.
-    key = hasher(key_salt + secret).digest()
-    # If len(key_salt + secret) > block size of the hash algorithm, the above
-    # line is redundant and could be replaced by key = key_salt + secret, since
-    # the hmac module does the same thing for keys longer than the block size.
-    # However, we need to ensure that we *always* do this.
+
+    # Try with the main secret first
+    secret_bytes = force_bytes(secret)
+    key = hasher(key_salt + secret_bytes).digest()
+    hmac_obj = hmac.new(key, msg=force_bytes(value), digestmod=hasher)
+
+    # If we're not comparing or the main secret worked, return this hash
+    if compare_with is None:
+        return hmac_obj
+    
+    current_hash = hmac_obj.hexdigest()
+    if current_hash == compare_with:
+        return hmac_obj
+
+    # If we have fallbacks and the main secret didn't match, try the fallbacks
+    if hasattr(settings, 'SECRET_KEY_FALLBACKS'):
+        for fallback_secret in settings.SECRET_KEY_FALLBACKS:
+            fallback_bytes = force_bytes(fallback_secret)
+            key = hasher(key_salt + fallback_bytes).digest()
+            hmac_obj = hmac.new(key, msg=force_bytes(value), digestmod=hasher)
+            if hmac_obj.hexdigest() == compare_with:
+                return hmac_obj
+
+    # If no match was found or no fallbacks exist, return the original hash
+    key = hasher(key_salt + secret_bytes).digest()
     return hmac.new(key, msg=force_bytes(value), digestmod=hasher)
