diff --git a/django/core/management/commands/runserver.py b/django/core/management/commands/runserver.py
index d9fb088350..09e3af3e3c 100644
--- a/django/core/management/commands/runserver.py
+++ b/django/core/management/commands/runserver.py
@@ -51,6 +51,10 @@ class Command(BaseCommand):
             '--noreload', action='store_false', dest='use_reloader',
             help='Tells Django to NOT use the auto-reloader.',
         )
+        parser.add_argument(
+            '--skip-checks', action='store_true',
+            help='Skip system checks.',
+        )
 
     def execute(self, *args, **options):
         if options['no_color']:
@@ -114,11 +118,14 @@ class Command(BaseCommand):
         shutdown_message = options.get('shutdown_message', '')
         quit_command = 'CTRL-BREAK' if sys.platform == 'win32' else 'CONTROL-C'
 
-        self.stdout.write("Performing system checks...\n\n")
-        self.check(display_num_errors=True)
-        # Need to check migrations here, so can't use the
-        # requires_migrations_check attribute.
-        self.check_migrations()
+        if not options.get('skip_checks', False):
+            self.stdout.write("Performing system checks...\n\n")
+            self.check(display_num_errors=True)
+            # Need to check migrations here, so can't use the
+            # requires_migrations_check attribute.
+            self.check_migrations()
+        else:
+            self.stdout.write("Skipping system checks.\n")
         now = datetime.now().strftime('%B %d, %Y - %X')
         self.stdout.write(now)
         self.stdout.write((
diff --git a/test_project/db.sqlite3 b/test_project/db.sqlite3
new file mode 100644
index 0000000000..e69de29bb2
diff --git a/test_project/manage.py b/test_project/manage.py
new file mode 100644
index 0000000000..bd5e510ebd
--- /dev/null
+++ b/test_project/manage.py
@@ -0,0 +1,18 @@
+#!/usr/bin/env python
+import os
+import sys
+
+def main():
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+    try:
+        from django.core.management import execute_from_command_line
+    except ImportError as exc:
+        raise ImportError(
+            "Couldn't import Django. Are you sure it's installed and "
+            "available on your PYTHONPATH environment variable? Did you "
+            "forget to activate a virtual environment?"
+        ) from exc
+    execute_from_command_line(sys.argv)
+
+if __name__ == '__main__':
+    main()
\ No newline at end of file
diff --git a/test_project/test_project/__init__.py b/test_project/test_project/__init__.py
new file mode 100644
index 0000000000..a7506fdc94
--- /dev/null
+++ b/test_project/test_project/__init__.py
@@ -0,0 +1 @@
+# Empty init file
\ No newline at end of file
diff --git a/test_project/test_project/settings.py b/test_project/test_project/settings.py
new file mode 100644
index 0000000000..24b8bf3030
--- /dev/null
+++ b/test_project/test_project/settings.py
@@ -0,0 +1,65 @@
+from pathlib import Path
+
+BASE_DIR = Path(__file__).resolve().parent.parent
+
+SECRET_KEY = 'test-key-not-for-production'
+
+DEBUG = True
+
+ALLOWED_HOSTS = []
+
+INSTALLED_APPS = [
+    'django.contrib.admin',
+    'django.contrib.auth',
+    'django.contrib.contenttypes',
+    'django.contrib.sessions',
+    'django.contrib.messages',
+    'django.contrib.staticfiles',
+]
+
+MIDDLEWARE = [
+    'django.middleware.security.SecurityMiddleware',
+    'django.contrib.sessions.middleware.SessionMiddleware',
+    'django.middleware.common.CommonMiddleware',
+    'django.middleware.csrf.CsrfViewMiddleware',
+    'django.contrib.auth.middleware.AuthenticationMiddleware',
+    'django.contrib.messages.middleware.MessageMiddleware',
+    'django.middleware.clickjacking.XFrameOptionsMiddleware',
+]
+
+ROOT_URLCONF = 'test_project.urls'
+
+TEMPLATES = [
+    {
+        'BACKEND': 'django.template.backends.django.DjangoTemplates',
+        'DIRS': [],
+        'APP_DIRS': True,
+        'OPTIONS': {
+            'context_processors': [
+                'django.template.context_processors.debug',
+                'django.template.context_processors.request',
+                'django.contrib.auth.context_processors.auth',
+                'django.contrib.messages.context_processors.messages',
+            ],
+        },
+    },
+]
+
+WSGI_APPLICATION = 'test_project.wsgi.application'
+
+DATABASES = {
+    'default': {
+        'ENGINE': 'django.db.backends.sqlite3',
+        'NAME': BASE_DIR / 'db.sqlite3',
+    }
+}
+
+AUTH_PASSWORD_VALIDATORS = []
+
+LANGUAGE_CODE = 'en-us'
+TIME_ZONE = 'UTC'
+USE_I18N = True
+USE_TZ = True
+
+STATIC_URL = 'static/'
+DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
\ No newline at end of file
diff --git a/test_project/test_project/urls.py b/test_project/test_project/urls.py
new file mode 100644
index 0000000000..6b669efaa2
--- /dev/null
+++ b/test_project/test_project/urls.py
@@ -0,0 +1,6 @@
+from django.contrib import admin
+from django.urls import path
+
+urlpatterns = [
+    path('admin/', admin.site.urls),
+]
\ No newline at end of file
diff --git a/test_project/test_project/wsgi.py b/test_project/test_project/wsgi.py
new file mode 100644
index 0000000000..a1ab05fc76
--- /dev/null
+++ b/test_project/test_project/wsgi.py
@@ -0,0 +1,4 @@
+import os
+from django.core.wsgi import get_wsgi_application
+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')
+application = get_wsgi_application()
\ No newline at end of file
diff --git a/test_project/test_runserver.py b/test_project/test_runserver.py
new file mode 100644
index 0000000000..b65da7bd08
--- /dev/null
+++ b/test_project/test_runserver.py
@@ -0,0 +1,30 @@
+import os
+import sys
+import threading
+import time
+
+def kill_server():
+    # Wait a bit and then kill the server
+    time.sleep(2)
+    os._exit(0)
+
+if __name__ == "__main__":
+    # Add the Django source code to Python path
+    sys.path.insert(0, '/testbed')
+    
+    # Start a thread to kill the server after a few seconds
+    killer = threading.Thread(target=kill_server)
+    killer.daemon = True
+    killer.start()
+
+    from django.core.management import execute_from_command_line
+
+    # Test without --skip-checks first
+    print("\nTesting runserver without --skip-checks:")
+    sys.argv = ['manage.py', 'runserver', '--noreload']
+    execute_from_command_line(sys.argv)
+
+    # Test with --skip-checks
+    print("\nTesting runserver with --skip-checks:")
+    sys.argv = ['manage.py', 'runserver', '--skip-checks', '--noreload']
+    execute_from_command_line(sys.argv)
\ No newline at end of file
diff --git a/test_runserver.py b/test_runserver.py
new file mode 100644
index 0000000000..a31653cd61
--- /dev/null
+++ b/test_runserver.py
@@ -0,0 +1,26 @@
+import os
+import sys
+import django
+from django.core.management import execute_from_command_line
+import threading
+import time
+
+def kill_server():
+    # Wait a bit and then kill the server
+    time.sleep(2)
+    os._exit(0)
+
+if __name__ == "__main__":
+    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django.conf.global_settings')
+    from django.conf import settings
+    settings.configure(DEBUG=True)
+    django.setup()
+    
+    # Start a thread to kill the server after a few seconds
+    killer = threading.Thread(target=kill_server)
+    killer.daemon = True
+    killer.start()
+
+    print("\nTesting runserver with --skip-checks:")
+    sys.argv = ['manage.py', 'runserver', '--skip-checks']
+    execute_from_command_line(sys.argv)
\ No newline at end of file
