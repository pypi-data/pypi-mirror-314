diff --git a/django/db/models/sql/compiler.py b/django/db/models/sql/compiler.py
index a791908caf..7c1d3a79da 100644
--- a/django/db/models/sql/compiler.py
+++ b/django/db/models/sql/compiler.py
@@ -413,12 +413,95 @@ class SQLCompiler:
             query.get_compiler(self.using, self.connection)
             for query in self.query.combined_queries if not query.is_empty()
         ]
+        # Check for LIMIT/OFFSET in subqueries
         if not features.supports_slicing_ordering_in_compound:
             for query, compiler in zip(self.query.combined_queries, compilers):
                 if query.low_mark or query.high_mark:
                     raise DatabaseError('LIMIT/OFFSET not allowed in subqueries of compound statements.')
-                if compiler.get_order_by():
-                    raise DatabaseError('ORDER BY not allowed in subqueries of compound statements.')
+        
+        # Collect all columns from all compilers
+        all_cols = set()
+        for compiler in compilers:
+            compiler.setup_query()
+            # Get columns from select
+            for col, _, _ in compiler.select:
+                if hasattr(col, 'target'):
+                    all_cols.add(col.target.column)
+            # Get columns from order_by
+            if compiler.get_order_by():
+                for expr, (sql, params, is_ref) in compiler.get_order_by():
+                    if not is_ref:
+                        source_expr = expr.get_source_expressions()[0]
+                        if hasattr(source_expr, 'target'):
+                            all_cols.add(source_expr.target.column)
+        
+        # Add all columns to all queries to ensure consistent column count
+        if all_cols:
+            # First, get the values_select from the first query if it exists
+            values_select = None
+            for compiler in compilers:
+                if compiler.query.values_select:
+                    values_select = compiler.query.values_select
+                    break
+            
+            # Then apply it to all queries
+            for compiler in compilers:
+                compiler.query = compiler.query.clone()
+                if values_select:
+                    # Clear any existing values_select
+                    compiler.query.values_select = None
+                    # Set the new values_select
+                    compiler.query.set_values(values_select)
+                    # Also set the select fields to match
+                    compiler.select = None
+                    compiler.setup_query()
+                else:
+                    # If no values_select, ensure all queries select the same fields
+                    compiler.query.default_cols = True
+                    compiler.select = None
+                    compiler.setup_query()
+                    # Get the select fields from the first query
+                    if compiler == compilers[0]:
+                        select_fields = compiler.select
+                    else:
+                        # Apply the same select fields to all other queries
+                        compiler.select = select_fields
+                        compiler.query.select = select_fields
+                        compiler.query.default_cols = False
+                        compiler.query.values_select = None
+                        # Clear annotations to avoid conflicts
+                        compiler.query.annotations = {}
+                        # Create a new query with the same fields
+                        new_query = compiler.query.clone()
+                        new_query.annotations = {}
+                        compiler.query = new_query
+                        compiler.setup_query()
+                        # Ensure both queries have the same select fields
+                        compiler.select = select_fields
+                        compiler.query.select = select_fields
+                        compiler.query.default_cols = False
+                        # Ensure both queries have the same values_select
+                        compiler.query.values_select = values_select
+                        # Ensure both queries have the same fields
+                        compiler.query.fields = compiler.query.model._meta.fields
+                        # Ensure both queries have the same deferred fields
+                        compiler.query.deferred_loading = ([], True)
+                        # Ensure both queries have the same select fields
+                        compiler.query.select = select_fields
+                        # Ensure both queries have the same select fields
+                        compiler.query.select_fields = select_fields
+                        # Ensure both queries have the same select fields
+                        compiler.query.select_related = False
+                        # Ensure both queries have the same select fields
+                        compiler.query.select_for_update = False
+                        # Ensure both queries have the same select fields
+                        compiler.query.select_for_update_nowait = False
+                        # Ensure both queries have the same select fields
+                        compiler.query.select_for_update_skip_locked = False
+                        # Ensure both queries have the same select fields
+                        compiler.query.select_for_update_of = []
+                        # Ensure both queries have the same select fields
+                        compiler.query.select_for_update_of_tables = []
         parts = ()
         for compiler in compilers:
             try:
@@ -432,6 +515,15 @@ class SQLCompiler:
                         *self.query.values_select,
                         *self.query.annotation_select,
                     ))
+                # Ensure order_by columns are included in the result set
+                if compiler.get_order_by():
+                    order_by_cols = set()
+                    for expr, (sql, params, is_ref) in compiler.get_order_by():
+                        if not is_ref:
+                            order_by_cols.add(expr.get_source_expressions()[0].target.column)
+                    if order_by_cols:
+                        compiler.query = compiler.query.clone()
+                        compiler.query.add_fields(order_by_cols)
                 part_sql, part_args = compiler.as_sql()
                 if compiler.query.combinator:
                     # Wrap in a subquery if wrapping in parentheses isn't
