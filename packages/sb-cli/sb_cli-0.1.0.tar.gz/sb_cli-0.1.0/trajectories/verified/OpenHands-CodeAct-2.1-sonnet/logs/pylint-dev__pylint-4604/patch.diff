diff --git a/ast_dump.py b/ast_dump.py
new file mode 100644
index 000000000..5e0422565
--- /dev/null
+++ b/ast_dump.py
@@ -0,0 +1,13 @@
+import astroid
+
+code = '''"""Docstring."""
+
+import abc
+from abc import ABC
+
+X = ...  # type: abc.ABC
+Y = ...  # type: ABC
+'''
+
+module = astroid.parse(code)
+print(module.repr_tree())
\ No newline at end of file
diff --git a/ast_dump2.py b/ast_dump2.py
new file mode 100644
index 000000000..b29510c2b
--- /dev/null
+++ b/ast_dump2.py
@@ -0,0 +1,18 @@
+import astroid
+
+code = '''"""Docstring."""
+
+import abc
+from abc import ABC
+
+X = ...  # type: abc.ABC
+Y = ...  # type: ABC
+'''
+
+module = astroid.parse(code)
+for node in module.body:
+    print(f"\nNode type: {type(node)}")
+    print(f"Node attributes: {dir(node)}")
+    if isinstance(node, astroid.Assign):
+        print(f"Type annotation: {node.type_annotation}")
+        print(f"Type comment: {node.type_comment}")
\ No newline at end of file
diff --git a/edge_case1.py b/edge_case1.py
new file mode 100644
index 000000000..2a57f65e7
--- /dev/null
+++ b/edge_case1.py
@@ -0,0 +1,7 @@
+"""Docstring."""
+
+import abc
+from abc import ABC
+
+X = ...  # type: str
+Y = ...  # type: int
\ No newline at end of file
diff --git a/edge_case2.py b/edge_case2.py
new file mode 100644
index 000000000..da8ceeeec
--- /dev/null
+++ b/edge_case2.py
@@ -0,0 +1,8 @@
+"""Docstring."""
+
+import abc
+from abc import ABC
+import sys
+
+X = ...  # type: abc.ABC
+Y = ...  # type: ABC
\ No newline at end of file
diff --git a/edge_case3.py b/edge_case3.py
new file mode 100644
index 000000000..985724e36
--- /dev/null
+++ b/edge_case3.py
@@ -0,0 +1,5 @@
+"""Docstring."""
+
+import typing.abc
+
+X = ...  # type: typing.abc.Sequence
\ No newline at end of file
diff --git a/edge_case4.py b/edge_case4.py
new file mode 100644
index 000000000..c0dc39eac
--- /dev/null
+++ b/edge_case4.py
@@ -0,0 +1,5 @@
+"""Docstring."""
+
+import collections
+
+X = ...  # type: collections.abc.Sequence
\ No newline at end of file
diff --git a/pylint/checkers/variables.py b/pylint/checkers/variables.py
index 3ddafd599..983302e2c 100644
--- a/pylint/checkers/variables.py
+++ b/pylint/checkers/variables.py
@@ -346,10 +346,33 @@ def _assigned_locally(name_node):
 
 def _is_type_checking_import(node):
     parent = node.parent
-    if not isinstance(parent, astroid.If):
-        return False
-    test = parent.test
-    return test.as_string() in TYPING_TYPE_CHECKS_GUARDS
+    if isinstance(parent, astroid.If):
+        test = parent.test
+        if test.as_string() in TYPING_TYPE_CHECKS_GUARDS:
+            return True
+
+    # Check if the imported name is used in type annotations
+    imported_names = []
+    if isinstance(node, astroid.Import):
+        imported_names.extend(name[0] for name in node.names)
+    elif isinstance(node, astroid.ImportFrom):
+        imported_names.extend(name[0] for name in node.names)
+        # For 'from' imports, we need to check the full qualified name
+        imported_names.extend(f"{node.modname}.{name[0]}" for name in node.names)
+
+    def _check_type_annotation(annotation):
+        if annotation is None:
+            return False
+        annotation_str = annotation.as_string()
+        return any(name in annotation_str for name in imported_names)
+
+    # Look for type annotations in all assignments in the module
+    module = node.root()
+    for assign_node in module.nodes_of_class(astroid.Assign):
+        if _check_type_annotation(assign_node.type_annotation):
+            return True
+
+    return False
 
 
 def _has_locals_call_after_node(stmt, scope):
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 000000000..ba4ac30f5
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,7 @@
+"""Docstring."""
+
+import abc
+from abc import ABC
+
+X = ...  # type: abc.ABC
+Y = ...  # type: ABC
\ No newline at end of file
