diff --git a/benchmark_escape.py b/benchmark_escape.py
new file mode 100644
index 0000000000..5521c63274
--- /dev/null
+++ b/benchmark_escape.py
@@ -0,0 +1,7 @@
+import timeit
+
+setup = 'from django.utils.html import escape'
+code = 'escape(copyright)'
+
+result = timeit.repeat(stmt=code, setup=setup, number=50000, repeat=5)
+print(f"{50000} loops, best of 5: {min(result)/50000*1e6:.2f} usec per loop")
\ No newline at end of file
diff --git a/django/utils/html.py b/django/utils/html.py
index 9c519978f5..b4a546df46 100644
--- a/django/utils/html.py
+++ b/django/utils/html.py
@@ -1,5 +1,6 @@
 """HTML utilities suitable for global use."""
 
+import html
 import json
 import re
 from html.parser import HTMLParser
@@ -24,14 +25,6 @@ word_split_re = re.compile(r'''([\s<>"']+)''')
 simple_url_re = re.compile(r'^https?://\[?\w', re.IGNORECASE)
 simple_url_2_re = re.compile(r'^www\.|^(?!http)\w[^@]+\.(com|edu|gov|int|mil|net|org)($|/.*)$', re.IGNORECASE)
 
-_html_escapes = {
-    ord('&'): '&amp;',
-    ord('<'): '&lt;',
-    ord('>'): '&gt;',
-    ord('"'): '&quot;',
-    ord("'"): '&#39;',
-}
-
 
 @keep_lazy(str, SafeString)
 def escape(text):
@@ -43,7 +36,7 @@ def escape(text):
     This may result in double-escaping. If this is a concern, use
     conditional_escape() instead.
     """
-    return mark_safe(str(text).translate(_html_escapes))
+    return mark_safe(html.escape(str(text)))
 
 
 _js_escapes = {
diff --git a/test_escape.py b/test_escape.py
new file mode 100644
index 0000000000..f6e8c84602
--- /dev/null
+++ b/test_escape.py
@@ -0,0 +1,40 @@
+from django.utils.html import escape
+from django.utils.safestring import mark_safe, SafeString
+
+def test_escape():
+    test_cases = [
+        # Basic test cases
+        ('&', '&amp;'),
+        ('<', '&lt;'),
+        ('>', '&gt;'),
+        ('"', '&quot;'),
+        ("'", '&#x27;'),  # Note: This is different from Django's original &#39;
+        
+        # Combined test cases
+        ('<script>alert("&");</script>', '&lt;script&gt;alert(&quot;&amp;&quot;);&lt;/script&gt;'),
+        
+        # Edge cases
+        ('', ''),  # Empty string
+        ('Hello World', 'Hello World'),  # No special chars
+        ('&amp;', '&amp;amp;'),  # Already escaped
+        ('&&', '&amp;&amp;'),  # Multiple special chars
+        ('<>"\'"', '&lt;&gt;&quot;&#x27;&quot;'),  # All special chars
+        
+        # Unicode
+        ('Hello 世界', 'Hello 世界'),  # Unicode text
+        ('Hello & 世界', 'Hello &amp; 世界'),  # Unicode with special chars
+    ]
+    
+    for input_text, expected in test_cases:
+        result = escape(input_text)
+        assert isinstance(result, SafeString), f"Result for {input_text!r} should be SafeString"
+        assert result == expected, f"Failed for {input_text!r}: expected {expected!r}, got {result!r}"
+        
+        # Test with SafeString input
+        safe_result = escape(mark_safe(input_text))
+        assert isinstance(safe_result, SafeString), f"Result for SafeString {input_text!r} should be SafeString"
+        assert safe_result == expected, f"Failed for SafeString {input_text!r}: expected {expected!r}, got {safe_result!r}"
+
+if __name__ == '__main__':
+    test_escape()
+    print("All tests passed!")
\ No newline at end of file
