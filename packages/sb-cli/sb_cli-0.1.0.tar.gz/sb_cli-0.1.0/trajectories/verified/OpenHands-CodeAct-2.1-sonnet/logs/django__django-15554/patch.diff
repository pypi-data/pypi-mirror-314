diff --git a/django/db/models/sql/datastructures.py b/django/db/models/sql/datastructures.py
index 1edf040e82..d7a2647e8a 100644
--- a/django/db/models/sql/datastructures.py
+++ b/django/db/models/sql/datastructures.py
@@ -100,6 +100,10 @@ class Join:
             join_conditions.append("(%s)" % extra_sql)
             params.extend(extra_params)
         if self.filtered_relation:
+            # Store the current table alias to ensure it's used in the filtered relation
+            self.filtered_relation.path = [self.table_alias]
+            # Set the filtered_relation attribute on the Q object to allow access to the alias
+            self.filtered_relation.condition.filtered_relation = self.filtered_relation
             extra_sql, extra_params = compiler.compile(self.filtered_relation)
             if extra_sql:
                 join_conditions.append("(%s)" % extra_sql)
@@ -162,8 +166,8 @@ class Join:
         return hash(self.identity)
 
     def equals(self, other):
-        # Ignore filtered_relation in equality check.
-        return self.identity[:-1] == other.identity[:-1]
+        # Include filtered_relation in equality check to support multiple filtered relations
+        return self.identity == other.identity
 
     def demote(self):
         new = self.relabeled_clone({})
diff --git a/django/db/models/sql/query.py b/django/db/models/sql/query.py
index 54f3258eac..bf598e7f34 100644
--- a/django/db/models/sql/query.py
+++ b/django/db/models/sql/query.py
@@ -1558,6 +1558,29 @@ class Query(BaseExpression):
                     current_negated=current_negated,
                 )
             else:
+                # Ensure the table alias is used in the condition
+                if isinstance(child, tuple) and len(child) == 2:
+                    lookup, value = child
+                    if lookup.startswith(q_object.filtered_relation.relation_name + '__'):
+                        # Replace the relation name with the alias in the lookup
+                        lookup = lookup.replace(
+                            q_object.filtered_relation.relation_name + '__',
+                            q_object.filtered_relation.alias + '__',
+                            1
+                        )
+                        child = (lookup, value)
+                    elif isinstance(value, F) and value.name.startswith(q_object.filtered_relation.relation_name + '__'):
+                        # Also handle F() expressions in the value
+                        value = F(value.name.replace(
+                            q_object.filtered_relation.relation_name + '__',
+                            q_object.filtered_relation.alias + '__',
+                            1
+                        ))
+                        child = (lookup, value)
+                    elif isinstance(value, F) and not value.name.startswith(q_object.filtered_relation.alias + '__'):
+                        # If the F() expression doesn't have an alias yet, add it
+                        value = F(q_object.filtered_relation.alias + '__' + value.name)
+                        child = (lookup, value)
                 child_clause, _ = self.build_filter(
                     child,
                     can_reuse=reuse,
@@ -1598,7 +1621,8 @@ class Query(BaseExpression):
                         "relations deeper than the relation_name (got %r for "
                         "%r)." % (lookup, filtered_relation.relation_name)
                     )
-        self._filtered_relations[filtered_relation.alias] = filtered_relation
+        # Store the filtered relation in _filtered_relations to ensure it's used in the query
+        self._filtered_relations[alias] = filtered_relation
 
     def names_to_path(self, names, opts, allow_many=True, fail_on_missing=False):
         """
