diff --git a/lib/matplotlib/contour.py b/lib/matplotlib/contour.py
index 144eadeae2..349da78587 100644
--- a/lib/matplotlib/contour.py
+++ b/lib/matplotlib/contour.py
@@ -1122,24 +1122,44 @@ class ContourSet(cm.ScalarMappable, ContourLabeler):
         Determine the contour levels and store in self.levels.
         """
         if self.levels is None:
-            if len(args) == 0:
-                levels_arg = 7  # Default, hard-wired.
+            # Check if input was a boolean array
+            if hasattr(self, '_input_is_boolean') and self._input_is_boolean:
+                # For boolean arrays, always use level [0.5] regardless of data range
+                self.levels = np.array([0.5], dtype=np.float64)
+                # Temporarily adjust zmin/zmax to ensure level is within range
+                self._orig_zmin, self._orig_zmax = self.zmin, self.zmax
+                self.zmin, self.zmax = 0.0, 1.0
             else:
-                levels_arg = args[0]
-        else:
-            levels_arg = self.levels
-        if isinstance(levels_arg, Integral):
-            self.levels = self._autolev(levels_arg)
+                if len(args) == 0:
+                    levels_arg = 7  # Default, hard-wired.
+                else:
+                    levels_arg = args[0]
+                if isinstance(levels_arg, Integral):
+                    self.levels = self._autolev(levels_arg)
+                else:
+                    self.levels = np.asarray(levels_arg, np.float64)
         else:
-            self.levels = np.asarray(levels_arg, np.float64)
+            self.levels = np.asarray(self.levels, np.float64)
 
         if not self.filled:
             inside = (self.levels > self.zmin) & (self.levels < self.zmax)
             levels_in = self.levels[inside]
             if len(levels_in) == 0:
-                self.levels = [self.zmin]
-                _api.warn_external(
-                    "No contour levels were found within the data range.")
+                if hasattr(self, '_input_is_boolean') and self._input_is_boolean:
+                    # For boolean arrays, keep the 0.5 level even if outside data range
+                    pass
+                else:
+                    self.levels = [self.zmin]
+                    _api.warn_external(
+                        "No contour levels were found within the data range.")
+            
+            # Restore original zmin/zmax if they were temporarily changed
+            if hasattr(self, '_orig_zmin'):
+                self.zmin = self._orig_zmin
+                del self._orig_zmin
+            if hasattr(self, '_orig_zmax'):
+                self.zmax = self._orig_zmax
+                del self._orig_zmax
 
         if self.filled and len(self.levels) < 2:
             raise ValueError("Filled contours require at least 2 levels.")
@@ -1447,10 +1467,14 @@ class QuadContourSet(ContourSet):
             fn = 'contour'
         nargs = len(args)
         if nargs <= 2:
+            # Store original dtype before converting to float64
+            self._input_is_boolean = isinstance(args[0], np.ndarray) and args[0].dtype == bool
             z = ma.asarray(args[0], dtype=np.float64)
             x, y = self._initialize_x_y(z)
             args = args[1:]
         elif nargs <= 4:
+            # Store original dtype before converting to float64
+            self._input_is_boolean = isinstance(args[2], np.ndarray) and args[2].dtype == bool
             x, y, z = self._check_xyz(args[:3], kwargs)
             args = args[3:]
         else:
diff --git a/reproduce_issue.py b/reproduce_issue.py
new file mode 100644
index 0000000000..122131d656
--- /dev/null
+++ b/reproduce_issue.py
@@ -0,0 +1,37 @@
+import numpy as np
+import matplotlib.pyplot as plt
+
+# Test cases
+test_cases = [
+    # Regular boolean array
+    ('Regular boolean', (np.random.rand(10, 10) > 0.5)),
+    
+    # All True boolean array
+    ('All True', np.ones((10, 10), dtype=bool)),
+    
+    # All False boolean array
+    ('All False', np.zeros((10, 10), dtype=bool)),
+    
+    # Checkerboard pattern
+    ('Checkerboard', np.indices((10, 10)).sum(axis=0) % 2 == 0),
+    
+    # Float array for comparison
+    ('Float array', np.random.rand(10, 10)),
+]
+
+# Create subplots
+fig, axes = plt.subplots(len(test_cases), 2, figsize=(10, 4*len(test_cases)))
+plt.subplots_adjust(hspace=0.4)
+
+for i, (title, data) in enumerate(test_cases):
+    # Default levels
+    cs1 = axes[i, 0].contour(data)
+    axes[i, 0].set_title(f'{title}\n(auto levels)')
+    print(f"{title} auto levels:", cs1.levels)
+    
+    # Explicit levels
+    cs2 = axes[i, 1].contour(data, levels=[0.25, 0.5, 0.75])
+    axes[i, 1].set_title(f'{title}\n(explicit levels)')
+    print(f"{title} explicit levels:", cs2.levels)
+
+plt.show()
\ No newline at end of file
