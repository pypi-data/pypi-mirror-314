diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py
index ccc2223a5f..65950590e2 100644
--- a/django/db/models/fields/reverse_related.py
+++ b/django/db/models/fields/reverse_related.py
@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):
     def identity(self):
         return super().identity + (
             self.through,
-            self.through_fields,
+            make_hashable(self.through_fields),
             self.db_constraint,
         )
 
diff --git a/reproduce.py b/reproduce.py
new file mode 100644
index 0000000000..59af61d9dc
--- /dev/null
+++ b/reproduce.py
@@ -0,0 +1,34 @@
+from django.conf import settings
+from django.db import models
+import django
+
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes', '__main__'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+django.setup()
+
+class Parent(models.Model):
+    name = models.CharField(max_length=256)
+
+class ProxyParent(Parent):
+    class Meta:
+        proxy = True
+
+class Child(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+    many_to_many_field = models.ManyToManyField(
+        to=Parent,
+        through="ManyToManyModel",
+        through_fields=['child', 'parent'],
+        related_name="something"
+    )
+
+class ManyToManyModel(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')
+    child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')
+    second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)
+
+# This will trigger model validation which will try to hash the fields
+from django.core.management import execute_from_command_line
+execute_from_command_line(['manage.py', 'check'])
\ No newline at end of file
diff --git a/test_edge_cases.py b/test_edge_cases.py
new file mode 100644
index 0000000000..15b69ae440
--- /dev/null
+++ b/test_edge_cases.py
@@ -0,0 +1,44 @@
+from django.conf import settings
+from django.db import models
+import django
+
+settings.configure(
+    INSTALLED_APPS=['django.contrib.contenttypes', '__main__'],
+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': ':memory:'}},
+)
+django.setup()
+
+class Parent(models.Model):
+    name = models.CharField(max_length=256)
+
+class ProxyParent(Parent):
+    class Meta:
+        proxy = True
+
+class Child(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)
+    
+    # Test case 1: through_fields as tuple
+    m2m_tuple = models.ManyToManyField(
+        to=Parent,
+        through="ManyToManyModel",
+        through_fields=('child', 'parent'),
+        related_name="something1"
+    )
+    
+    # Test case 2: through_fields as list
+    m2m_list = models.ManyToManyField(
+        to=Parent,
+        through="ManyToManyModel",
+        through_fields=['child', 'parent'],
+        related_name="something2"
+    )
+
+class ManyToManyModel(models.Model):
+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')
+    child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')
+    second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)
+
+# This will trigger model validation which will try to hash the fields
+from django.core.management import execute_from_command_line
+execute_from_command_line(['manage.py', 'check'])
\ No newline at end of file
