diff --git a/reproduce_swap_dims.py b/reproduce_swap_dims.py
new file mode 100644
index 00000000..c809620c
--- /dev/null
+++ b/reproduce_swap_dims.py
@@ -0,0 +1,59 @@
+import numpy as np
+import xarray as xr
+
+nz = 11
+ds = xr.Dataset(
+    data_vars={
+        "y": ("z", np.random.rand(nz)),
+        "lev": ("z", np.arange(nz) * 10),
+        # ^ We want this to be a dimension coordinate
+    },
+)
+print(f"Original ds\n{ds}")
+print(f"\nds, 'lev' -> dim coord\n{ds.swap_dims(z='lev')}")
+
+ds2 = (
+    ds.swap_dims(z="lev")
+    .rename_dims(lev="z")
+    .reset_index("lev")
+    .reset_coords()
+)
+print(f"\nds2\n{ds2}")
+# ^ This Dataset appears same as the original
+
+print(f"\nds2, 'lev' -> dim coord\n{ds2.swap_dims(z='lev')}")
+# ^ Produces a Dataset with dimension coordinate 'lev'
+print(f"\nds2 after .swap_dims() applied\n{ds2}")
+# ^ `ds2['lev']` now has dimension 'lev' although otherwise same
+
+# Let's also print the dims of ds2['lev'] before and after swap_dims
+print("\nBefore swap_dims, ds2['lev'].dims:", ds2["lev"].dims)
+ds2.swap_dims(z='lev')
+print("After swap_dims, ds2['lev'].dims:", ds2["lev"].dims)
+
+# Test case with multiple variables
+ds3 = xr.Dataset(
+    data_vars={
+        "temp": ("z", np.random.rand(nz)),
+        "height": ("z", np.arange(nz) * 100),
+        "pressure": ("z", np.arange(nz) * 10),
+    },
+)
+print("\nTest case with multiple variables:")
+print("Original ds3\n", ds3)
+ds3_swapped = ds3.swap_dims(z="height")
+print("\nds3 after swap_dims(z='height')\n", ds3)
+print("\nSwapped ds3\n", ds3_swapped)
+
+# Test case with multiple dimensions
+ds4 = xr.Dataset(
+    data_vars={
+        "temp": (("x", "z"), np.random.rand(5, nz)),
+        "height": ("z", np.arange(nz) * 100),
+    },
+)
+print("\nTest case with multiple dimensions:")
+print("Original ds4\n", ds4)
+ds4_swapped = ds4.swap_dims(z="height")
+print("\nds4 after swap_dims(z='height')\n", ds4)
+print("\nSwapped ds4\n", ds4_swapped)
\ No newline at end of file
diff --git a/xarray/core/dataset.py b/xarray/core/dataset.py
index c775d05c..d64377b5 100644
--- a/xarray/core/dataset.py
+++ b/xarray/core/dataset.py
@@ -3772,8 +3772,8 @@ class Dataset(
         for k, v in self.variables.items():
             dims = tuple(dims_dict.get(dim, dim) for dim in v.dims)
             if k in result_dims:
-                var = v.to_index_variable()
-                var.dims = dims
+                # Create a new index variable with a deep copy of the data
+                var = IndexVariable(dims, v._data.copy(), v._attrs, v._encoding)
                 if k in self._indexes:
                     indexes[k] = self._indexes[k]
                     variables[k] = var
@@ -3783,8 +3783,8 @@ class Dataset(
                     variables.update(index_vars)
                     coord_names.update(index_vars)
             else:
-                var = v.to_base_variable()
-                var.dims = dims
+                # Create a new variable with a deep copy of the data
+                var = Variable(dims, v._data.copy(), v._attrs, v._encoding)
                 variables[k] = var
 
         return self._replace_with_new_dims(variables, coord_names, indexes=indexes)
