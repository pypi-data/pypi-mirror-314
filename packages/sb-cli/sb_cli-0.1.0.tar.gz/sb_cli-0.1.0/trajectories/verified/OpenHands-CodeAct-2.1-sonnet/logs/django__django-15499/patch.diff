diff --git a/django/db/migrations/operations/models.py b/django/db/migrations/operations/models.py
index 90fc31bee5..8a5c04393b 100644
--- a/django/db/migrations/operations/models.py
+++ b/django/db/migrations/operations/models.py
@@ -170,6 +170,19 @@ class CreateModel(ModelOperation):
                     managers=self.managers,
                 ),
             ]
+        elif (
+            isinstance(operation, AlterModelManagers)
+            and self.name_lower == operation.name_lower
+        ):
+            return [
+                CreateModel(
+                    self.name,
+                    fields=self.fields,
+                    options=self.options,
+                    bases=self.bases,
+                    managers=operation.managers,
+                ),
+            ]
         elif (
             isinstance(operation, AlterTogetherOptionOperation)
             and self.name_lower == operation.name_lower
diff --git a/test_migration_optimization.py b/test_migration_optimization.py
new file mode 100644
index 0000000000..9b44b516c0
--- /dev/null
+++ b/test_migration_optimization.py
@@ -0,0 +1,46 @@
+from django.db import models
+from django.db.migrations.operations.models import CreateModel, AlterModelManagers
+from django.db.migrations.optimizer import MigrationOptimizer
+
+# Create a test model manager
+class CustomManager(models.Manager):
+    def get_queryset(self):
+        return super().get_queryset().filter(active=True)
+
+# Test case 1: CreateModel + AlterModelManagers should optimize to just CreateModel
+def test_optimize_create_model_and_alter_managers():
+    # Initial CreateModel operation
+    create_model = CreateModel(
+        name="TestModel",
+        fields=[
+            ("id", models.AutoField(primary_key=True)),
+            ("name", models.CharField(max_length=100)),
+            ("active", models.BooleanField(default=True)),
+        ],
+        managers=[("objects", models.Manager())],
+    )
+
+    # AlterModelManagers operation
+    alter_managers = AlterModelManagers(
+        name="TestModel",
+        managers=[
+            ("objects", models.Manager()),
+            ("active_only", CustomManager()),
+        ],
+    )
+
+    # Create optimizer
+    optimizer = MigrationOptimizer()
+
+    # Run optimization
+    result = optimizer.optimize([create_model, alter_managers], app_label="testapp")
+
+    # Verify result
+    assert len(result) == 1, "Expected optimization to single CreateModel operation"
+    assert isinstance(result[0], CreateModel), "Expected CreateModel operation"
+    assert len(result[0].managers) == 2, "Expected 2 managers in optimized CreateModel"
+    assert result[0].managers[1][0] == "active_only", "Expected custom manager name"
+    print("Test passed! CreateModel + AlterModelManagers was optimized to CreateModel")
+
+if __name__ == "__main__":
+    test_optimize_create_model_and_alter_managers()
\ No newline at end of file
