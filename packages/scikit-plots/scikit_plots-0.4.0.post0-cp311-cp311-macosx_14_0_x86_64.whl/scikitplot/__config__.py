# This file is generated by scikitplot's build process
# It contains system_info results at the time of building this package.
from enum import Enum

__all__ = ["show"]
_built_with_meson = True


class DisplayModes(Enum):
  stdout = "stdout"
  dicts = "dicts"


def _cleanup(d):
  """
  Removes empty values in a `dict` recursively
  This ensures we remove values that Meson could not provide to CONFIG
  """
  if isinstance(d, dict):
    return { k: _cleanup(v) for k, v in d.items() if v != '' and _cleanup(v) != '' }
  else:
    return d


# Create a base CONFIG dictionary
CONFIG = _cleanup(
  {
    "Build Dependencies": {
      "blas": {
        "name": "Accelerate",
        "found": bool("True".lower().replace('false', '')),
        "version": "unknown",
        "detection method": "extraframeworks",
        "include directory": r"unknown",
        "lib directory": r"unknown",
        "openblas configuration": r"unknown",
        "pc file directory": r"unknown",
      },
      "lapack": {
        "name": "Accelerate",
        "found": bool("True".lower().replace('false', '')),
        "version": "unknown",
        "detection method": "extraframeworks",
        "include directory": r"unknown",
        "lib directory": r"unknown",
        "openblas configuration": r"unknown",
        "pc file directory": r"unknown",
      },
      "pybind11": {
        "name": "pybind11",
        "version": "2.13.6",
        "detection method": "config-tool",
        "include directory": r"unknown",
      },
    },
    "Compilers": {
      "fortran": {
        "name": "gcc",
        "linker": r"ld64",
        "version": "13.3.0",
        "commands": r"gfortran-13",
        "args": r"",
        "linker args": r"",
      },
      "c": {
        "name": "clang",
        "linker": r"ld64",
        "version": "15.0.0",
        "commands": r"cc",
        "args": r"",
        "linker args": r"",
      },
      "c++": {
        "name": "clang",
        "linker": r"ld64",
        "version": "15.0.0",
        "commands": r"c++",
        "args": r"",
        "linker args": r"",
      },
      "cython": {
        "name": r"cython",
        "linker": r"cython",
        "version": r"3.0.11",
        "commands": r"cython",
        "args": r"",
        "linker args": r"",
      },
      "pythran": {
        "version": r"",
        "include directory": r""
      },
    },
    "Machine Information": {
      "build": {
        "cpu": r"x86_64",
        "family": r"x86_64",
        "endian": r"little",
        "system": r"darwin",
      },
      "cross-compiled": bool("False".lower().replace('false', '')),
      "host": {
        "cpu": r"x86_64",
        "family": r"x86_64",
        "endian": r"little",
        "system": r"darwin",
      },
    },
    "Python Information": {
      "path": r"/private/var/folders/x4/dc0wnrqs60v8cfdj3vx06s1h0000gn/T/build-env-7376fzn2/bin/python",
      "version": "3.11",
    },
  }
)


def _check_pyyaml():
  import yaml
  return yaml


def show(mode=DisplayModes.stdout.value):
  """
  Show libraries and system information on which SciPy was built
  and is being used

  Parameters
  ----------
  mode : {`'stdout'`, `'dicts'`}, optional.
      Indicates how to display the config information.
      `'stdout'` prints to console, `'dicts'` returns a dictionary
      of the configuration.

  Returns
  -------
  out : {`dict`, `None`}
      If mode is `'dicts'`, a dict is returned, else None

  Notes
  -----
  1. The `'stdout'` mode will give more readable
     output if ``pyyaml`` is installed
     
  Examples
  --------
  .. jupyter-execute::

      >>> import scikitplot
      >>> scikitplot.show_config()
  """
  if mode == DisplayModes.stdout.value:
      try:  # Non-standard library, check import
        yaml = _check_pyyaml()
        print(yaml.dump(CONFIG))
      except ModuleNotFoundError:
        import warnings
        import json

        warnings.warn("Install `pyyaml` for better output", stacklevel=1)
        print(json.dumps(CONFIG, indent=2))
  elif mode == DisplayModes.dicts.value:
    try:  # Non-standard library, check import
      from pprint import pprint
      pprint(CONFIG)
    except ModuleNotFoundError:
      return CONFIG
  else:
    raise AttributeError(
      f"Invalid `mode`, use one of: {', '.join([e.value for e in DisplayModes])}"
    )