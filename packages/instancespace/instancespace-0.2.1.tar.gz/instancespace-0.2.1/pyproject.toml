[tool.poetry]
name = "instancespace"
version = "0.2.1"
description = ""
authors = [
    "Kushagra Khare <kharek@student.unimelb.edu.au>",
    "Nathan Harvey <nhharvey@student.unimelb.edu.au>",
    "Kian Dsouza <kiandsouza01@gmail.com>",
    "Yusuf Berdan GÃ¼zel <yguzel@student.unimelb.edu.au>",
    "Junheng Chen <junhengc3382@gmail.com>",
    "Dong Hyeog Jang <djang9303@gmail.com>",
    "Cheng Ze Lam <chengzel@student.unimelb.edu.au>",
    "Hazel Yi <yijiaying233@gmail.com>",
    "Tao Yu <ty2@student.unimelb.edu.au>",
]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
numpy = "^1.26.4"
pandas = "^2.2.1"
pandas-stubs = "^2.2.1.240316"
click = "^8.1.7"
scipy = "^1.13.0"
pygad = "^3.3.1"
shapely = "^2.0.5"
matplotlib = "^3.9.2"
alphashape = "^1.3.1"
loguru = "^0.7.2"
scikit-optimize = "^0.10.2"
scikit-learn = "^1.5.2"
black = "^24.4.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
poethepoet = "^0.25.0"
ruff = "^0.5.1"
mypy = "^1.9.0"
pdoc = "^14.4.0"
docconvert = "^2.1.0"
ipykernel = "^6.29.5"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poe.tasks]
format_docstrings = "docconvert -o numpy matilda/ --in-place"
check_ruff = "ruff check --fix"
check_mypy = "mypy --strict ."
check_black = "black ."

test_ruff = "ruff check --no-fix"
test_black = "black . --check"

check.sequence = ["format_docstrings", "check_black", "check_ruff", "check_mypy"]
check.ignore_fail = "return_non_zero"

test.sequence = ["test_ruff", "check_mypy", "test_black"]
test.ignore_fail = "return_non_zero"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.12
target-version = "py312"


[tool.ruff.lint]
extend-select = [
    "F",
    "E",
    "W",
    "I",
    "N",
    "D",
    "UP",
    "ANN",
    "A",
    "COM",
    "DTZ",
    "ICN",
    "INP",
    "PT",
    "Q",
    "RET",
    "SLF",
    "SIM",
    "TID",
    "ARG",
    "PTH",
    "PL",
    "NPY",
    "RUF",

    "D107",
    "D211",
    "D212",
    "D402",
    "D410",
    "D415",
    "D417",
]

ignore = [
    "D203",
    "D212",

    # Don't care about too many arguments
    "PLR0913",

    # Temporary, while we are doing stubs
    "ARG001",

    # Deprecated, type annotation on self is unneeded
    "ANN101",

    # Collides with D416
    "D406",

    # Long functions are expected
    "PLR0915",
]

[tool.ruff.lint.pydocstyle]
# Use google style docstrings
convention = "numpy"

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true



[tool.mypy]
disallow_untyped_defs = 'True'

[[tool.mypy.overrides]]
module = [
    'sklearn',
    'sklearn.cluster',
    'sklearn.metrics',
    'sklearn.neighbors',
    'sklearn.model_selection',
    'scipy',
    'scipy.stats',
    'scipy.spatial',
    'scipy.spatial.distance',
    'shapely.geometry',
    'scipy.linalg',
    'scipy.optimize',
    'scipy.io',
    'pygad',
    'sklearn.metrics',
    'sklearn.model_selection',
    'sklearn.svm',
    'skopt',
    'skopt.space',
    'sklearn.model_selection',
    'shapely',
    'shapely.ops' ,
    'scipy.special' ,
    'sklearn.cluster',
    'alphashape'
]
ignore_missing_imports = 'True'
