/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package github.com/bebop/poly-py/poly/search/align/matrix */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 9 "matrix.go"





// #define Py_LIMITED_API // need full API for PyRun*
#include <Python.h>
typedef uint8_t bool;
// static inline is trick for avoiding need for extra .c file
// the following are used for build value -- switch on reflect.Kind
// or the types equivalent
static inline PyObject* gopy_build_bool(uint8_t val) {
	return Py_BuildValue("b", val);
}
static inline PyObject* gopy_build_int64(int64_t val) {
	return Py_BuildValue("k", val);
}
static inline PyObject* gopy_build_uint64(uint64_t val) {
	return Py_BuildValue("K", val);
}
static inline PyObject* gopy_build_float64(double val) {
	return Py_BuildValue("d", val);
}
static inline PyObject* gopy_build_string(const char* val) {
	return Py_BuildValue("s", val);
}
static inline void gopy_decref(PyObject* obj) { // macro
	Py_XDECREF(obj);
}
static inline void gopy_incref(PyObject* obj) { // macro
	Py_XINCREF(obj);
}
static inline int gopy_method_check(PyObject* obj) { // macro
	return PyMethod_Check(obj);
}
static inline void gopy_err_handle() {
	if(PyErr_Occurred() != NULL) {
		PyErr_Print();
	}
}


#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern void GoPyInit();

// DecRef decrements the reference count for the specified handle
// and deletes it it goes to zero.
//
extern void DecRef(long long handle);

// IncRef increments the reference count for the specified handle.
//
extern void IncRef(long long handle);

// NumHandles returns the number of handles currently in use.
//
extern GoInt NumHandles();

// --- wrapping slice: []bool ---
//
extern long long Slice_bool_CTor();
extern GoInt Slice_bool_len(long long handle);
extern char Slice_bool_elem(long long handle, GoInt _idx);
extern long long Slice_bool_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_bool_set(long long handle, GoInt _idx, char _vl);
extern void Slice_bool_append(long long handle, char _vl);

// --- wrapping slice: []byte ---
//
extern long long Slice_byte_CTor();
extern GoInt Slice_byte_len(long long handle);
extern char Slice_byte_elem(long long handle, GoInt _idx);
extern long long Slice_byte_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_byte_set(long long handle, GoInt _idx, char _vl);
extern void Slice_byte_append(long long handle, char _vl);
extern long long Slice_byte_from_bytes(PyObject* o);
extern PyObject* Slice_byte_to_bytes(long long handle);

// --- wrapping slice: []error ---
//
extern long long Slice_error_CTor();
extern GoInt Slice_error_len(long long handle);
extern char* Slice_error_elem(long long handle, GoInt _idx);
extern long long Slice_error_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_error_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_error_append(long long handle, char* _vl);

// --- wrapping slice: []float32 ---
//
extern long long Slice_float32_CTor();
extern GoInt Slice_float32_len(long long handle);
extern float Slice_float32_elem(long long handle, GoInt _idx);
extern long long Slice_float32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float32_set(long long handle, GoInt _idx, float _vl);
extern void Slice_float32_append(long long handle, float _vl);

// --- wrapping slice: []float64 ---
//
extern long long Slice_float64_CTor();
extern GoInt Slice_float64_len(long long handle);
extern double Slice_float64_elem(long long handle, GoInt _idx);
extern long long Slice_float64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_float64_set(long long handle, GoInt _idx, double _vl);
extern void Slice_float64_append(long long handle, double _vl);

// --- wrapping slice: []int ---
//
extern long long Slice_int_CTor();
extern GoInt Slice_int_len(long long handle);
extern long long Slice_int_elem(long long handle, GoInt _idx);
extern long long Slice_int_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int_append(long long handle, long long _vl);

// --- wrapping slice: []int16 ---
//
extern long long Slice_int16_CTor();
extern GoInt Slice_int16_len(long long handle);
extern short Slice_int16_elem(long long handle, GoInt _idx);
extern long long Slice_int16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int16_set(long long handle, GoInt _idx, short _vl);
extern void Slice_int16_append(long long handle, short _vl);

// --- wrapping slice: []int32 ---
//
extern long long Slice_int32_CTor();
extern GoInt Slice_int32_len(long long handle);
extern long Slice_int32_elem(long long handle, GoInt _idx);
extern long long Slice_int32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int32_set(long long handle, GoInt _idx, long _vl);
extern void Slice_int32_append(long long handle, long _vl);

// --- wrapping slice: []int64 ---
//
extern long long Slice_int64_CTor();
extern GoInt Slice_int64_len(long long handle);
extern long long Slice_int64_elem(long long handle, GoInt _idx);
extern long long Slice_int64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int64_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_int64_append(long long handle, long long _vl);

// --- wrapping slice: []int8 ---
//
extern long long Slice_int8_CTor();
extern GoInt Slice_int8_len(long long handle);
extern char Slice_int8_elem(long long handle, GoInt _idx);
extern long long Slice_int8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_int8_set(long long handle, GoInt _idx, char _vl);
extern void Slice_int8_append(long long handle, char _vl);

// --- wrapping slice: []rune ---
//
extern long long Slice_rune_CTor();
extern GoInt Slice_rune_len(long long handle);
extern long Slice_rune_elem(long long handle, GoInt _idx);
extern long long Slice_rune_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_rune_set(long long handle, GoInt _idx, long _vl);
extern void Slice_rune_append(long long handle, long _vl);

// --- wrapping slice: []string ---
//
extern long long Slice_string_CTor();
extern GoInt Slice_string_len(long long handle);
extern char* Slice_string_elem(long long handle, GoInt _idx);
extern long long Slice_string_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_string_set(long long handle, GoInt _idx, char* _vl);
extern void Slice_string_append(long long handle, char* _vl);

// --- wrapping slice: []uint ---
//
extern long long Slice_uint_CTor();
extern GoInt Slice_uint_len(long long handle);
extern unsigned long long Slice_uint_elem(long long handle, GoInt _idx);
extern long long Slice_uint_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint16 ---
//
extern long long Slice_uint16_CTor();
extern GoInt Slice_uint16_len(long long handle);
extern unsigned short Slice_uint16_elem(long long handle, GoInt _idx);
extern long long Slice_uint16_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint16_set(long long handle, GoInt _idx, unsigned short _vl);
extern void Slice_uint16_append(long long handle, unsigned short _vl);

// --- wrapping slice: []uint32 ---
//
extern long long Slice_uint32_CTor();
extern GoInt Slice_uint32_len(long long handle);
extern unsigned long Slice_uint32_elem(long long handle, GoInt _idx);
extern long long Slice_uint32_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint32_set(long long handle, GoInt _idx, unsigned long _vl);
extern void Slice_uint32_append(long long handle, unsigned long _vl);

// --- wrapping slice: []uint64 ---
//
extern long long Slice_uint64_CTor();
extern GoInt Slice_uint64_len(long long handle);
extern unsigned long long Slice_uint64_elem(long long handle, GoInt _idx);
extern long long Slice_uint64_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint64_set(long long handle, GoInt _idx, unsigned long long _vl);
extern void Slice_uint64_append(long long handle, unsigned long long _vl);

// --- wrapping slice: []uint8 ---
//
extern long long Slice_uint8_CTor();
extern GoInt Slice_uint8_len(long long handle);
extern unsigned char Slice_uint8_elem(long long handle, GoInt _idx);
extern long long Slice_uint8_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_uint8_set(long long handle, GoInt _idx, unsigned char _vl);
extern void Slice_uint8_append(long long handle, unsigned char _vl);

// --- wrapping slice: [][]int ---
//
extern long long Slice_Slice_int_CTor();
extern GoInt Slice_Slice_int_len(long long handle);
extern long long Slice_Slice_int_elem(long long handle, GoInt _idx);
extern long long Slice_Slice_int_subslice(long long handle, GoInt _st, GoInt _ed);
extern void Slice_Slice_int_set(long long handle, GoInt _idx, long long _vl);
extern void Slice_Slice_int_append(long long handle, long long _vl);

// ---- Global Variables: can only use functions to access ---
//
extern long long matrix_BLOSUM100();
extern void matrix_Set_BLOSUM100(long long val);
extern long long matrix_BLOSUM30();
extern void matrix_Set_BLOSUM30(long long val);
extern long long matrix_BLOSUM35();
extern void matrix_Set_BLOSUM35(long long val);
extern long long matrix_BLOSUM40();
extern void matrix_Set_BLOSUM40(long long val);
extern long long matrix_BLOSUM45();
extern void matrix_Set_BLOSUM45(long long val);
extern long long matrix_BLOSUM50();
extern void matrix_Set_BLOSUM50(long long val);
extern long long matrix_BLOSUM55();
extern void matrix_Set_BLOSUM55(long long val);
extern long long matrix_BLOSUM60();
extern void matrix_Set_BLOSUM60(long long val);
extern long long matrix_BLOSUM62();
extern void matrix_Set_BLOSUM62(long long val);
extern long long matrix_BLOSUM65();
extern void matrix_Set_BLOSUM65(long long val);
extern long long matrix_BLOSUM70();
extern void matrix_Set_BLOSUM70(long long val);
extern long long matrix_BLOSUM75();
extern void matrix_Set_BLOSUM75(long long val);
extern long long matrix_BLOSUM80();
extern void matrix_Set_BLOSUM80(long long val);
extern long long matrix_BLOSUM85();
extern void matrix_Set_BLOSUM85(long long val);
extern long long matrix_BLOSUM90();
extern void matrix_Set_BLOSUM90(long long val);
extern long long matrix_BLOSUMN();
extern void matrix_Set_BLOSUMN(long long val);
extern long long matrix_DAYHOFF();
extern void matrix_Set_DAYHOFF(long long val);
extern long long matrix_Default();
extern void matrix_Set_Default(long long val);
extern long long matrix_GONNET();
extern void matrix_Set_GONNET(long long val);
extern long long matrix_IDENTITY();
extern void matrix_Set_IDENTITY(long long val);
extern long long matrix_MATCH();
extern void matrix_Set_MATCH(long long val);
extern long long matrix_NUC_4();
extern void matrix_Set_NUC_4(long long val);
extern long long matrix_NUC_4_4();
extern void matrix_Set_NUC_4_4(long long val);
extern long long matrix_PAM10();
extern void matrix_Set_PAM10(long long val);
extern long long matrix_PAM100();
extern void matrix_Set_PAM100(long long val);
extern long long matrix_PAM110();
extern void matrix_Set_PAM110(long long val);
extern long long matrix_PAM120();
extern void matrix_Set_PAM120(long long val);
extern long long matrix_PAM120_cdi();
extern void matrix_Set_PAM120_cdi(long long val);
extern long long matrix_PAM130();
extern void matrix_Set_PAM130(long long val);
extern long long matrix_PAM140();
extern void matrix_Set_PAM140(long long val);
extern long long matrix_PAM150();
extern void matrix_Set_PAM150(long long val);
extern long long matrix_PAM160();
extern void matrix_Set_PAM160(long long val);
extern long long matrix_PAM160_cdi();
extern void matrix_Set_PAM160_cdi(long long val);
extern long long matrix_PAM170();
extern void matrix_Set_PAM170(long long val);
extern long long matrix_PAM180();
extern void matrix_Set_PAM180(long long val);
extern long long matrix_PAM190();
extern void matrix_Set_PAM190(long long val);
extern long long matrix_PAM20();
extern void matrix_Set_PAM20(long long val);
extern long long matrix_PAM200();
extern void matrix_Set_PAM200(long long val);
extern long long matrix_PAM200_cdi();
extern void matrix_Set_PAM200_cdi(long long val);
extern long long matrix_PAM210();
extern void matrix_Set_PAM210(long long val);
extern long long matrix_PAM220();
extern void matrix_Set_PAM220(long long val);
extern long long matrix_PAM230();
extern void matrix_Set_PAM230(long long val);
extern long long matrix_PAM240();
extern void matrix_Set_PAM240(long long val);
extern long long matrix_PAM250();
extern void matrix_Set_PAM250(long long val);
extern long long matrix_PAM250_cdi();
extern void matrix_Set_PAM250_cdi(long long val);
extern long long matrix_PAM260();
extern void matrix_Set_PAM260(long long val);
extern long long matrix_PAM270();
extern void matrix_Set_PAM270(long long val);
extern long long matrix_PAM280();
extern void matrix_Set_PAM280(long long val);
extern long long matrix_PAM290();
extern void matrix_Set_PAM290(long long val);
extern long long matrix_PAM30();
extern void matrix_Set_PAM30(long long val);
extern long long matrix_PAM300();
extern void matrix_Set_PAM300(long long val);
extern long long matrix_PAM310();
extern void matrix_Set_PAM310(long long val);
extern long long matrix_PAM320();
extern void matrix_Set_PAM320(long long val);
extern long long matrix_PAM330();
extern void matrix_Set_PAM330(long long val);
extern long long matrix_PAM340();
extern void matrix_Set_PAM340(long long val);
extern long long matrix_PAM350();
extern void matrix_Set_PAM350(long long val);
extern long long matrix_PAM360();
extern void matrix_Set_PAM360(long long val);
extern long long matrix_PAM370();
extern void matrix_Set_PAM370(long long val);
extern long long matrix_PAM380();
extern void matrix_Set_PAM380(long long val);
extern long long matrix_PAM390();
extern void matrix_Set_PAM390(long long val);
extern long long matrix_PAM40();
extern void matrix_Set_PAM40(long long val);
extern long long matrix_PAM400();
extern void matrix_Set_PAM400(long long val);
extern long long matrix_PAM40_cdi();
extern void matrix_Set_PAM40_cdi(long long val);
extern long long matrix_PAM410();
extern void matrix_Set_PAM410(long long val);
extern long long matrix_PAM420();
extern void matrix_Set_PAM420(long long val);
extern long long matrix_PAM430();
extern void matrix_Set_PAM430(long long val);
extern long long matrix_PAM440();
extern void matrix_Set_PAM440(long long val);
extern long long matrix_PAM450();
extern void matrix_Set_PAM450(long long val);
extern long long matrix_PAM460();
extern void matrix_Set_PAM460(long long val);
extern long long matrix_PAM470();
extern void matrix_Set_PAM470(long long val);
extern long long matrix_PAM480();
extern void matrix_Set_PAM480(long long val);
extern long long matrix_PAM490();
extern void matrix_Set_PAM490(long long val);
extern long long matrix_PAM50();
extern void matrix_Set_PAM50(long long val);
extern long long matrix_PAM500();
extern void matrix_Set_PAM500(long long val);
extern long long matrix_PAM60();
extern void matrix_Set_PAM60(long long val);
extern long long matrix_PAM70();
extern void matrix_Set_PAM70(long long val);
extern long long matrix_PAM80();
extern void matrix_Set_PAM80(long long val);
extern long long matrix_PAM80_cdi();
extern void matrix_Set_PAM80_cdi(long long val);
extern long long matrix_PAM90();
extern void matrix_Set_PAM90(long long val);

// --- wrapping struct: matrix.SubstitutionMatrix ---
//
extern long long matrix_SubstitutionMatrix_CTor();
extern long long matrix_SubstitutionMatrix_FirstAlphabet_Get(long long handle);
extern void matrix_SubstitutionMatrix_FirstAlphabet_Set(long long handle, long long val);
extern long long matrix_SubstitutionMatrix_SecondAlphabet_Get(long long handle);
extern void matrix_SubstitutionMatrix_SecondAlphabet_Set(long long handle, long long val);
extern long long matrix_SubstitutionMatrix_Score(long long _handle, char* a, char* b);
extern long long matrix_NewSubstitutionMatrix(long long firstAlphabet, long long secondAlphabet, long long scores);

#ifdef __cplusplus
}
#endif
