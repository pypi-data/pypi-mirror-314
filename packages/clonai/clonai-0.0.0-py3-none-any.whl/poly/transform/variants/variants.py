"""
Package variants contains a function for generating all variants of a sequence.

Sometimes sequencers will only give you an *estimate* of what the basepair at
a given position is. This package provides a function for generating all
possible deterministic variants of a sequence given a sequence
with ambiguous bases.

"""
# python wrapper for package github.com/bebop/poly/transform/variants within overall package variants
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy build -output=poly/transform/variants -vm=python3 github.com/bebop/poly/transform/variants

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _variants
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from variants import variants
# and then refer to everything using variants. prefix
# packages imported by this package listed below:




# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---


# ---- Interfaces ---


# ---- Structs ---


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---


# ---- Functions ---
def AllVariantsIUPAC(seq):
	"""AllVariantsIUPAC(str seq) []str, str
	
	AllVariantsIUPAC takes a string as input
	and returns all iupac variants as output
	"""
	return go.Slice_string(handle=_variants.variants_AllVariantsIUPAC(seq))


