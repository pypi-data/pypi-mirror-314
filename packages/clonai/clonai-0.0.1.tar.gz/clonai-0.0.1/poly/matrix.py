"""
Package matrix provides a variety of alignment scoring matrices for sequence alignment.
These matrices have been lovingly borrowed from biogo/align.

https://github.com/biogo/biogo/blob/master/align/matrix/matrices.go

Package matrix provides a struct for substitution matrices and a struct for scoring matrices.

"""
# python wrapper for package github.com/bebop/poly/search/align/matrix within overall package poly
# This is what you import to use the package.
# File is generated by gopy. Do not edit.
# gopy pkg -vm=python3 github.com/bebop/poly

# the following is required to enable dlopen to open the _go.so file
import os,sys,inspect,collections
try:
	import collections.abc as _collections_abc
except ImportError:
	_collections_abc = collections

cwd = os.getcwd()
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
os.chdir(currentdir)
from . import _poly
from . import go

os.chdir(cwd)

# to use this code in your end-user python file, import it as follows:
# from poly import matrix
# and then refer to everything using matrix. prefix
# packages imported by this package listed below:

from . import alphabet
from . import clone



# ---- Types ---


#---- Enums from Go (collections of consts with same type) ---


#---- Constants from Go: Python can only ask that you please don't change these! ---


# ---- Global Variables: can only use functions to access ---
def BLOSUM100():
	"""
	BLOSUM100 Gets Go Variable: matrix.BLOSUM100
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM100())

def Set_BLOSUM100(value):
	"""
	Set_BLOSUM100 Sets Go Variable: matrix.BLOSUM100
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM100(value.handle)
	else:
		_poly.matrix_Set_BLOSUM100(value)

def BLOSUM30():
	"""
	BLOSUM30 Gets Go Variable: matrix.BLOSUM30
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM30())

def Set_BLOSUM30(value):
	"""
	Set_BLOSUM30 Sets Go Variable: matrix.BLOSUM30
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM30(value.handle)
	else:
		_poly.matrix_Set_BLOSUM30(value)

def BLOSUM35():
	"""
	BLOSUM35 Gets Go Variable: matrix.BLOSUM35
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM35())

def Set_BLOSUM35(value):
	"""
	Set_BLOSUM35 Sets Go Variable: matrix.BLOSUM35
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM35(value.handle)
	else:
		_poly.matrix_Set_BLOSUM35(value)

def BLOSUM40():
	"""
	BLOSUM40 Gets Go Variable: matrix.BLOSUM40
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM40())

def Set_BLOSUM40(value):
	"""
	Set_BLOSUM40 Sets Go Variable: matrix.BLOSUM40
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM40(value.handle)
	else:
		_poly.matrix_Set_BLOSUM40(value)

def BLOSUM45():
	"""
	BLOSUM45 Gets Go Variable: matrix.BLOSUM45
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM45())

def Set_BLOSUM45(value):
	"""
	Set_BLOSUM45 Sets Go Variable: matrix.BLOSUM45
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM45(value.handle)
	else:
		_poly.matrix_Set_BLOSUM45(value)

def BLOSUM50():
	"""
	BLOSUM50 Gets Go Variable: matrix.BLOSUM50
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM50())

def Set_BLOSUM50(value):
	"""
	Set_BLOSUM50 Sets Go Variable: matrix.BLOSUM50
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM50(value.handle)
	else:
		_poly.matrix_Set_BLOSUM50(value)

def BLOSUM55():
	"""
	BLOSUM55 Gets Go Variable: matrix.BLOSUM55
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM55())

def Set_BLOSUM55(value):
	"""
	Set_BLOSUM55 Sets Go Variable: matrix.BLOSUM55
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM55(value.handle)
	else:
		_poly.matrix_Set_BLOSUM55(value)

def BLOSUM60():
	"""
	BLOSUM60 Gets Go Variable: matrix.BLOSUM60
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM60())

def Set_BLOSUM60(value):
	"""
	Set_BLOSUM60 Sets Go Variable: matrix.BLOSUM60
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM60(value.handle)
	else:
		_poly.matrix_Set_BLOSUM60(value)

def BLOSUM62():
	"""
	BLOSUM62 Gets Go Variable: matrix.BLOSUM62
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM62())

def Set_BLOSUM62(value):
	"""
	Set_BLOSUM62 Sets Go Variable: matrix.BLOSUM62
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM62(value.handle)
	else:
		_poly.matrix_Set_BLOSUM62(value)

def BLOSUM65():
	"""
	BLOSUM65 Gets Go Variable: matrix.BLOSUM65
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM65())

def Set_BLOSUM65(value):
	"""
	Set_BLOSUM65 Sets Go Variable: matrix.BLOSUM65
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM65(value.handle)
	else:
		_poly.matrix_Set_BLOSUM65(value)

def BLOSUM70():
	"""
	BLOSUM70 Gets Go Variable: matrix.BLOSUM70
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM70())

def Set_BLOSUM70(value):
	"""
	Set_BLOSUM70 Sets Go Variable: matrix.BLOSUM70
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM70(value.handle)
	else:
		_poly.matrix_Set_BLOSUM70(value)

def BLOSUM75():
	"""
	BLOSUM75 Gets Go Variable: matrix.BLOSUM75
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM75())

def Set_BLOSUM75(value):
	"""
	Set_BLOSUM75 Sets Go Variable: matrix.BLOSUM75
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM75(value.handle)
	else:
		_poly.matrix_Set_BLOSUM75(value)

def BLOSUM80():
	"""
	BLOSUM80 Gets Go Variable: matrix.BLOSUM80
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM80())

def Set_BLOSUM80(value):
	"""
	Set_BLOSUM80 Sets Go Variable: matrix.BLOSUM80
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM80(value.handle)
	else:
		_poly.matrix_Set_BLOSUM80(value)

def BLOSUM85():
	"""
	BLOSUM85 Gets Go Variable: matrix.BLOSUM85
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM85())

def Set_BLOSUM85(value):
	"""
	Set_BLOSUM85 Sets Go Variable: matrix.BLOSUM85
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM85(value.handle)
	else:
		_poly.matrix_Set_BLOSUM85(value)

def BLOSUM90():
	"""
	BLOSUM90 Gets Go Variable: matrix.BLOSUM90
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUM90())

def Set_BLOSUM90(value):
	"""
	Set_BLOSUM90 Sets Go Variable: matrix.BLOSUM90
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUM90(value.handle)
	else:
		_poly.matrix_Set_BLOSUM90(value)

def BLOSUMN():
	"""
	BLOSUMN Gets Go Variable: matrix.BLOSUMN
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_BLOSUMN())

def Set_BLOSUMN(value):
	"""
	Set_BLOSUMN Sets Go Variable: matrix.BLOSUMN
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_BLOSUMN(value.handle)
	else:
		_poly.matrix_Set_BLOSUMN(value)

def DAYHOFF():
	"""
	DAYHOFF Gets Go Variable: matrix.DAYHOFF
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_DAYHOFF())

def Set_DAYHOFF(value):
	"""
	Set_DAYHOFF Sets Go Variable: matrix.DAYHOFF
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_DAYHOFF(value.handle)
	else:
		_poly.matrix_Set_DAYHOFF(value)

def Default():
	"""
	Default Gets Go Variable: matrix.Default
	Default scoring matrix for ALL sequences. Diagonal values are 1, all other values are -1)
	
	"""
	return SubstitutionMatrix(handle=_poly.matrix_Default())

def Set_Default(value):
	"""
	Set_Default Sets Go Variable: matrix.Default
	Default scoring matrix for ALL sequences. Diagonal values are 1, all other values are -1)
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_Default(value.handle)
	else:
		_poly.matrix_Set_Default(value)

def GONNET():
	"""
	GONNET Gets Go Variable: matrix.GONNET
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_GONNET())

def Set_GONNET(value):
	"""
	Set_GONNET Sets Go Variable: matrix.GONNET
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_GONNET(value.handle)
	else:
		_poly.matrix_Set_GONNET(value)

def IDENTITY():
	"""
	IDENTITY Gets Go Variable: matrix.IDENTITY
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_IDENTITY())

def Set_IDENTITY(value):
	"""
	Set_IDENTITY Sets Go Variable: matrix.IDENTITY
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_IDENTITY(value.handle)
	else:
		_poly.matrix_Set_IDENTITY(value)

def MATCH():
	"""
	MATCH Gets Go Variable: matrix.MATCH
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_MATCH())

def Set_MATCH(value):
	"""
	Set_MATCH Sets Go Variable: matrix.MATCH
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_MATCH(value.handle)
	else:
		_poly.matrix_Set_MATCH(value)

def NUC_4():
	"""
	NUC_4 Gets Go Variable: matrix.NUC_4
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_NUC_4())

def Set_NUC_4(value):
	"""
	Set_NUC_4 Sets Go Variable: matrix.NUC_4
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_NUC_4(value.handle)
	else:
		_poly.matrix_Set_NUC_4(value)

def NUC_4_4():
	"""
	NUC_4_4 Gets Go Variable: matrix.NUC_4_4
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_NUC_4_4())

def Set_NUC_4_4(value):
	"""
	Set_NUC_4_4 Sets Go Variable: matrix.NUC_4_4
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_NUC_4_4(value.handle)
	else:
		_poly.matrix_Set_NUC_4_4(value)

def PAM10():
	"""
	PAM10 Gets Go Variable: matrix.PAM10
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM10())

def Set_PAM10(value):
	"""
	Set_PAM10 Sets Go Variable: matrix.PAM10
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM10(value.handle)
	else:
		_poly.matrix_Set_PAM10(value)

def PAM100():
	"""
	PAM100 Gets Go Variable: matrix.PAM100
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM100())

def Set_PAM100(value):
	"""
	Set_PAM100 Sets Go Variable: matrix.PAM100
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM100(value.handle)
	else:
		_poly.matrix_Set_PAM100(value)

def PAM110():
	"""
	PAM110 Gets Go Variable: matrix.PAM110
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM110())

def Set_PAM110(value):
	"""
	Set_PAM110 Sets Go Variable: matrix.PAM110
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM110(value.handle)
	else:
		_poly.matrix_Set_PAM110(value)

def PAM120():
	"""
	PAM120 Gets Go Variable: matrix.PAM120
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM120())

def Set_PAM120(value):
	"""
	Set_PAM120 Sets Go Variable: matrix.PAM120
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM120(value.handle)
	else:
		_poly.matrix_Set_PAM120(value)

def PAM120_cdi():
	"""
	PAM120_cdi Gets Go Variable: matrix.PAM120_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM120_cdi())

def Set_PAM120_cdi(value):
	"""
	Set_PAM120_cdi Sets Go Variable: matrix.PAM120_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM120_cdi(value.handle)
	else:
		_poly.matrix_Set_PAM120_cdi(value)

def PAM130():
	"""
	PAM130 Gets Go Variable: matrix.PAM130
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM130())

def Set_PAM130(value):
	"""
	Set_PAM130 Sets Go Variable: matrix.PAM130
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM130(value.handle)
	else:
		_poly.matrix_Set_PAM130(value)

def PAM140():
	"""
	PAM140 Gets Go Variable: matrix.PAM140
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM140())

def Set_PAM140(value):
	"""
	Set_PAM140 Sets Go Variable: matrix.PAM140
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM140(value.handle)
	else:
		_poly.matrix_Set_PAM140(value)

def PAM150():
	"""
	PAM150 Gets Go Variable: matrix.PAM150
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM150())

def Set_PAM150(value):
	"""
	Set_PAM150 Sets Go Variable: matrix.PAM150
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM150(value.handle)
	else:
		_poly.matrix_Set_PAM150(value)

def PAM160():
	"""
	PAM160 Gets Go Variable: matrix.PAM160
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM160())

def Set_PAM160(value):
	"""
	Set_PAM160 Sets Go Variable: matrix.PAM160
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM160(value.handle)
	else:
		_poly.matrix_Set_PAM160(value)

def PAM160_cdi():
	"""
	PAM160_cdi Gets Go Variable: matrix.PAM160_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM160_cdi())

def Set_PAM160_cdi(value):
	"""
	Set_PAM160_cdi Sets Go Variable: matrix.PAM160_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM160_cdi(value.handle)
	else:
		_poly.matrix_Set_PAM160_cdi(value)

def PAM170():
	"""
	PAM170 Gets Go Variable: matrix.PAM170
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM170())

def Set_PAM170(value):
	"""
	Set_PAM170 Sets Go Variable: matrix.PAM170
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM170(value.handle)
	else:
		_poly.matrix_Set_PAM170(value)

def PAM180():
	"""
	PAM180 Gets Go Variable: matrix.PAM180
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM180())

def Set_PAM180(value):
	"""
	Set_PAM180 Sets Go Variable: matrix.PAM180
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM180(value.handle)
	else:
		_poly.matrix_Set_PAM180(value)

def PAM190():
	"""
	PAM190 Gets Go Variable: matrix.PAM190
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM190())

def Set_PAM190(value):
	"""
	Set_PAM190 Sets Go Variable: matrix.PAM190
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM190(value.handle)
	else:
		_poly.matrix_Set_PAM190(value)

def PAM20():
	"""
	PAM20 Gets Go Variable: matrix.PAM20
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM20())

def Set_PAM20(value):
	"""
	Set_PAM20 Sets Go Variable: matrix.PAM20
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM20(value.handle)
	else:
		_poly.matrix_Set_PAM20(value)

def PAM200():
	"""
	PAM200 Gets Go Variable: matrix.PAM200
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM200())

def Set_PAM200(value):
	"""
	Set_PAM200 Sets Go Variable: matrix.PAM200
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM200(value.handle)
	else:
		_poly.matrix_Set_PAM200(value)

def PAM200_cdi():
	"""
	PAM200_cdi Gets Go Variable: matrix.PAM200_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM200_cdi())

def Set_PAM200_cdi(value):
	"""
	Set_PAM200_cdi Sets Go Variable: matrix.PAM200_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM200_cdi(value.handle)
	else:
		_poly.matrix_Set_PAM200_cdi(value)

def PAM210():
	"""
	PAM210 Gets Go Variable: matrix.PAM210
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM210())

def Set_PAM210(value):
	"""
	Set_PAM210 Sets Go Variable: matrix.PAM210
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM210(value.handle)
	else:
		_poly.matrix_Set_PAM210(value)

def PAM220():
	"""
	PAM220 Gets Go Variable: matrix.PAM220
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM220())

def Set_PAM220(value):
	"""
	Set_PAM220 Sets Go Variable: matrix.PAM220
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM220(value.handle)
	else:
		_poly.matrix_Set_PAM220(value)

def PAM230():
	"""
	PAM230 Gets Go Variable: matrix.PAM230
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM230())

def Set_PAM230(value):
	"""
	Set_PAM230 Sets Go Variable: matrix.PAM230
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM230(value.handle)
	else:
		_poly.matrix_Set_PAM230(value)

def PAM240():
	"""
	PAM240 Gets Go Variable: matrix.PAM240
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM240())

def Set_PAM240(value):
	"""
	Set_PAM240 Sets Go Variable: matrix.PAM240
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM240(value.handle)
	else:
		_poly.matrix_Set_PAM240(value)

def PAM250():
	"""
	PAM250 Gets Go Variable: matrix.PAM250
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM250())

def Set_PAM250(value):
	"""
	Set_PAM250 Sets Go Variable: matrix.PAM250
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM250(value.handle)
	else:
		_poly.matrix_Set_PAM250(value)

def PAM250_cdi():
	"""
	PAM250_cdi Gets Go Variable: matrix.PAM250_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM250_cdi())

def Set_PAM250_cdi(value):
	"""
	Set_PAM250_cdi Sets Go Variable: matrix.PAM250_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM250_cdi(value.handle)
	else:
		_poly.matrix_Set_PAM250_cdi(value)

def PAM260():
	"""
	PAM260 Gets Go Variable: matrix.PAM260
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM260())

def Set_PAM260(value):
	"""
	Set_PAM260 Sets Go Variable: matrix.PAM260
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM260(value.handle)
	else:
		_poly.matrix_Set_PAM260(value)

def PAM270():
	"""
	PAM270 Gets Go Variable: matrix.PAM270
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM270())

def Set_PAM270(value):
	"""
	Set_PAM270 Sets Go Variable: matrix.PAM270
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM270(value.handle)
	else:
		_poly.matrix_Set_PAM270(value)

def PAM280():
	"""
	PAM280 Gets Go Variable: matrix.PAM280
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM280())

def Set_PAM280(value):
	"""
	Set_PAM280 Sets Go Variable: matrix.PAM280
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM280(value.handle)
	else:
		_poly.matrix_Set_PAM280(value)

def PAM290():
	"""
	PAM290 Gets Go Variable: matrix.PAM290
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM290())

def Set_PAM290(value):
	"""
	Set_PAM290 Sets Go Variable: matrix.PAM290
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM290(value.handle)
	else:
		_poly.matrix_Set_PAM290(value)

def PAM30():
	"""
	PAM30 Gets Go Variable: matrix.PAM30
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM30())

def Set_PAM30(value):
	"""
	Set_PAM30 Sets Go Variable: matrix.PAM30
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM30(value.handle)
	else:
		_poly.matrix_Set_PAM30(value)

def PAM300():
	"""
	PAM300 Gets Go Variable: matrix.PAM300
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM300())

def Set_PAM300(value):
	"""
	Set_PAM300 Sets Go Variable: matrix.PAM300
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM300(value.handle)
	else:
		_poly.matrix_Set_PAM300(value)

def PAM310():
	"""
	PAM310 Gets Go Variable: matrix.PAM310
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM310())

def Set_PAM310(value):
	"""
	Set_PAM310 Sets Go Variable: matrix.PAM310
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM310(value.handle)
	else:
		_poly.matrix_Set_PAM310(value)

def PAM320():
	"""
	PAM320 Gets Go Variable: matrix.PAM320
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM320())

def Set_PAM320(value):
	"""
	Set_PAM320 Sets Go Variable: matrix.PAM320
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM320(value.handle)
	else:
		_poly.matrix_Set_PAM320(value)

def PAM330():
	"""
	PAM330 Gets Go Variable: matrix.PAM330
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM330())

def Set_PAM330(value):
	"""
	Set_PAM330 Sets Go Variable: matrix.PAM330
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM330(value.handle)
	else:
		_poly.matrix_Set_PAM330(value)

def PAM340():
	"""
	PAM340 Gets Go Variable: matrix.PAM340
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM340())

def Set_PAM340(value):
	"""
	Set_PAM340 Sets Go Variable: matrix.PAM340
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM340(value.handle)
	else:
		_poly.matrix_Set_PAM340(value)

def PAM350():
	"""
	PAM350 Gets Go Variable: matrix.PAM350
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM350())

def Set_PAM350(value):
	"""
	Set_PAM350 Sets Go Variable: matrix.PAM350
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM350(value.handle)
	else:
		_poly.matrix_Set_PAM350(value)

def PAM360():
	"""
	PAM360 Gets Go Variable: matrix.PAM360
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM360())

def Set_PAM360(value):
	"""
	Set_PAM360 Sets Go Variable: matrix.PAM360
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM360(value.handle)
	else:
		_poly.matrix_Set_PAM360(value)

def PAM370():
	"""
	PAM370 Gets Go Variable: matrix.PAM370
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM370())

def Set_PAM370(value):
	"""
	Set_PAM370 Sets Go Variable: matrix.PAM370
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM370(value.handle)
	else:
		_poly.matrix_Set_PAM370(value)

def PAM380():
	"""
	PAM380 Gets Go Variable: matrix.PAM380
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM380())

def Set_PAM380(value):
	"""
	Set_PAM380 Sets Go Variable: matrix.PAM380
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM380(value.handle)
	else:
		_poly.matrix_Set_PAM380(value)

def PAM390():
	"""
	PAM390 Gets Go Variable: matrix.PAM390
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM390())

def Set_PAM390(value):
	"""
	Set_PAM390 Sets Go Variable: matrix.PAM390
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM390(value.handle)
	else:
		_poly.matrix_Set_PAM390(value)

def PAM40():
	"""
	PAM40 Gets Go Variable: matrix.PAM40
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM40())

def Set_PAM40(value):
	"""
	Set_PAM40 Sets Go Variable: matrix.PAM40
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM40(value.handle)
	else:
		_poly.matrix_Set_PAM40(value)

def PAM400():
	"""
	PAM400 Gets Go Variable: matrix.PAM400
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM400())

def Set_PAM400(value):
	"""
	Set_PAM400 Sets Go Variable: matrix.PAM400
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM400(value.handle)
	else:
		_poly.matrix_Set_PAM400(value)

def PAM40_cdi():
	"""
	PAM40_cdi Gets Go Variable: matrix.PAM40_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM40_cdi())

def Set_PAM40_cdi(value):
	"""
	Set_PAM40_cdi Sets Go Variable: matrix.PAM40_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM40_cdi(value.handle)
	else:
		_poly.matrix_Set_PAM40_cdi(value)

def PAM410():
	"""
	PAM410 Gets Go Variable: matrix.PAM410
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM410())

def Set_PAM410(value):
	"""
	Set_PAM410 Sets Go Variable: matrix.PAM410
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM410(value.handle)
	else:
		_poly.matrix_Set_PAM410(value)

def PAM420():
	"""
	PAM420 Gets Go Variable: matrix.PAM420
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM420())

def Set_PAM420(value):
	"""
	Set_PAM420 Sets Go Variable: matrix.PAM420
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM420(value.handle)
	else:
		_poly.matrix_Set_PAM420(value)

def PAM430():
	"""
	PAM430 Gets Go Variable: matrix.PAM430
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM430())

def Set_PAM430(value):
	"""
	Set_PAM430 Sets Go Variable: matrix.PAM430
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM430(value.handle)
	else:
		_poly.matrix_Set_PAM430(value)

def PAM440():
	"""
	PAM440 Gets Go Variable: matrix.PAM440
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM440())

def Set_PAM440(value):
	"""
	Set_PAM440 Sets Go Variable: matrix.PAM440
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM440(value.handle)
	else:
		_poly.matrix_Set_PAM440(value)

def PAM450():
	"""
	PAM450 Gets Go Variable: matrix.PAM450
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM450())

def Set_PAM450(value):
	"""
	Set_PAM450 Sets Go Variable: matrix.PAM450
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM450(value.handle)
	else:
		_poly.matrix_Set_PAM450(value)

def PAM460():
	"""
	PAM460 Gets Go Variable: matrix.PAM460
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM460())

def Set_PAM460(value):
	"""
	Set_PAM460 Sets Go Variable: matrix.PAM460
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM460(value.handle)
	else:
		_poly.matrix_Set_PAM460(value)

def PAM470():
	"""
	PAM470 Gets Go Variable: matrix.PAM470
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM470())

def Set_PAM470(value):
	"""
	Set_PAM470 Sets Go Variable: matrix.PAM470
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM470(value.handle)
	else:
		_poly.matrix_Set_PAM470(value)

def PAM480():
	"""
	PAM480 Gets Go Variable: matrix.PAM480
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM480())

def Set_PAM480(value):
	"""
	Set_PAM480 Sets Go Variable: matrix.PAM480
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM480(value.handle)
	else:
		_poly.matrix_Set_PAM480(value)

def PAM490():
	"""
	PAM490 Gets Go Variable: matrix.PAM490
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM490())

def Set_PAM490(value):
	"""
	Set_PAM490 Sets Go Variable: matrix.PAM490
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM490(value.handle)
	else:
		_poly.matrix_Set_PAM490(value)

def PAM50():
	"""
	PAM50 Gets Go Variable: matrix.PAM50
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM50())

def Set_PAM50(value):
	"""
	Set_PAM50 Sets Go Variable: matrix.PAM50
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM50(value.handle)
	else:
		_poly.matrix_Set_PAM50(value)

def PAM500():
	"""
	PAM500 Gets Go Variable: matrix.PAM500
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM500())

def Set_PAM500(value):
	"""
	Set_PAM500 Sets Go Variable: matrix.PAM500
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM500(value.handle)
	else:
		_poly.matrix_Set_PAM500(value)

def PAM60():
	"""
	PAM60 Gets Go Variable: matrix.PAM60
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM60())

def Set_PAM60(value):
	"""
	Set_PAM60 Sets Go Variable: matrix.PAM60
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM60(value.handle)
	else:
		_poly.matrix_Set_PAM60(value)

def PAM70():
	"""
	PAM70 Gets Go Variable: matrix.PAM70
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM70())

def Set_PAM70(value):
	"""
	Set_PAM70 Sets Go Variable: matrix.PAM70
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM70(value.handle)
	else:
		_poly.matrix_Set_PAM70(value)

def PAM80():
	"""
	PAM80 Gets Go Variable: matrix.PAM80
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM80())

def Set_PAM80(value):
	"""
	Set_PAM80 Sets Go Variable: matrix.PAM80
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM80(value.handle)
	else:
		_poly.matrix_Set_PAM80(value)

def PAM80_cdi():
	"""
	PAM80_cdi Gets Go Variable: matrix.PAM80_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM80_cdi())

def Set_PAM80_cdi(value):
	"""
	Set_PAM80_cdi Sets Go Variable: matrix.PAM80_cdi
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM80_cdi(value.handle)
	else:
		_poly.matrix_Set_PAM80_cdi(value)

def PAM90():
	"""
	PAM90 Gets Go Variable: matrix.PAM90
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	return clone.Slice_Slice_int(handle=_poly.matrix_PAM90())

def Set_PAM90(value):
	"""
	Set_PAM90 Sets Go Variable: matrix.PAM90
	All alignment scoring matrices are organised to allow direct lookup using alphabets
	defined in biogo/alphabet. Gap penalties are set to zero for all matrices and the I/L
	single letter amino acid code, "J", is included but not defined for all the protein
	scoring matrices.
	
	"""
	if isinstance(value, go.GoClass):
		_poly.matrix_Set_PAM90(value.handle)
	else:
		_poly.matrix_Set_PAM90(value)



# ---- Interfaces ---


# ---- Structs ---

# Python type for struct matrix.SubstitutionMatrix
class SubstitutionMatrix(go.GoClass):
	"""SubstitutionMatrix is a struct that holds a substitution matrix and the two alphabets that the matrix is defined over.\n"""
	def __init__(self, *args, **kwargs):
		"""
		handle=A Go-side object is always initialized with an explicit handle=arg
		otherwise parameters can be unnamed in order of field names or named fields
		in which case a new Go object is constructed first
		"""
		if len(kwargs) == 1 and 'handle' in kwargs:
			self.handle = kwargs['handle']
			_poly.IncRef(self.handle)
		elif len(args) == 1 and isinstance(args[0], go.GoClass):
			self.handle = args[0].handle
			_poly.IncRef(self.handle)
		else:
			self.handle = _poly.matrix_SubstitutionMatrix_CTor()
			_poly.IncRef(self.handle)
			if  0 < len(args):
				self.FirstAlphabet = args[0]
			if "FirstAlphabet" in kwargs:
				self.FirstAlphabet = kwargs["FirstAlphabet"]
			if  1 < len(args):
				self.SecondAlphabet = args[1]
			if "SecondAlphabet" in kwargs:
				self.SecondAlphabet = kwargs["SecondAlphabet"]
	def __del__(self):
		_poly.DecRef(self.handle)
	def __str__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'matrix.SubstitutionMatrix{'
		first = True
		for v in pr:
			if callable(v[1]):
				continue
			if first:
				first = False
			else:
				sv += ', '
			sv += v[0] + '=' + str(v[1])
		return sv + '}'
	def __repr__(self):
		pr = [(p, getattr(self, p)) for p in dir(self) if not p.startswith('__')]
		sv = 'matrix.SubstitutionMatrix ( '
		for v in pr:
			if not callable(v[1]):
				sv += v[0] + '=' + str(v[1]) + ', '
		return sv + ')'
	@property
	def FirstAlphabet(self):
		return alphabet.Alphabet(handle=_poly.matrix_SubstitutionMatrix_FirstAlphabet_Get(self.handle))
	@FirstAlphabet.setter
	def FirstAlphabet(self, value):
		if isinstance(value, go.GoClass):
			_poly.matrix_SubstitutionMatrix_FirstAlphabet_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	@property
	def SecondAlphabet(self):
		return alphabet.Alphabet(handle=_poly.matrix_SubstitutionMatrix_SecondAlphabet_Get(self.handle))
	@SecondAlphabet.setter
	def SecondAlphabet(self, value):
		if isinstance(value, go.GoClass):
			_poly.matrix_SubstitutionMatrix_SecondAlphabet_Set(self.handle, value.handle)
		else:
			raise TypeError("supplied argument type {t} is not a go.GoClass".format(t=type(value)))
	def Score(self, a, b):
		"""Score(str a, str b) int, str
		
		Score returns the score of two symbols in the substitution matrix.
		"""
		return _poly.matrix_SubstitutionMatrix_Score(self.handle, a, b)


# ---- Slices ---


# ---- Maps ---


# ---- Constructors ---
def NewSubstitutionMatrix(firstAlphabet, secondAlphabet, scores):
	"""NewSubstitutionMatrix(object firstAlphabet, object secondAlphabet, [][]int scores) object, str
	
	NewSubstitutionMatrix creates a new substitution matrix from two alphabets and a 2D array of scores.
	"""
	return SubstitutionMatrix(handle=_poly.matrix_NewSubstitutionMatrix(firstAlphabet.handle, secondAlphabet.handle, scores.handle))


# ---- Functions ---


