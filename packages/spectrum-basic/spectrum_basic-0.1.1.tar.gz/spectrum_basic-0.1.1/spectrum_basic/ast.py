#
# This file is automatically generated by gen_ast.py
#
# Do not edit by hand!
#
              
from .ast_base import *
import sys

# Re-export everything from ast_base as if it were defined here
this_module = sys.modules[__name__]
base_module = sys.modules['spectrum_basic.ast_base']
for name in dir(base_module):
    if not name.startswith('_'):  # Skip private/special attributes
        setattr(this_module, name, getattr(base_module, name))

# Automagically generated code for the AST classes

class Let(Statement):
    """Let AST node"""
    def __init__(self, parent, var, expr):
        self.parent = parent
        self.var = var
        self.expr = expr
    def __str__(self):
        """Return a string representation of a Let node"""
        return f"LET {self.var} = {self.expr}"
    def walk(self):
        """Walk method for Let nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.var)
        yield from walk(self.expr)
        yield (Walk.LEAVING, self)

class For(Statement):
    """For AST node"""
    def __init__(self, parent, var, start, end, step):
        self.parent = parent
        self.var = var
        self.start = start
        self.end = end
        self.step = step
    def __str__(self):
        """Return a string representation of a For node"""
        return f"FOR {self.var} = {self.start} TO {self.end}{f' STEP {self.step}' if self.step else ''}"
    def walk(self):
        """Walk method for For nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.var)
        yield from walk(self.start)
        yield from walk(self.end)
        yield from walk(self.step)
        yield (Walk.LEAVING, self)

class Next(Statement):
    """Next AST node"""
    def __init__(self, parent, var):
        self.parent = parent
        self.var = var
    def __str__(self):
        """Return a string representation of a Next node"""
        return f"NEXT {self.var}"
    def walk(self):
        """Walk method for Next nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.var)
        yield (Walk.LEAVING, self)

class If(Statement):
    """If AST node"""
    def __init__(self, parent, condition, statements):
        self.parent = parent
        self.condition = condition
        self.statements = statements
    def __str__(self):
        """Return a string representation of a If node"""
        return f"IF {self.condition} THEN {': '.join(str(stmt) for stmt in self.statements)}"
    def walk(self):
        """Walk method for If nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.condition)
        yield from walk(self.statements)
        yield (Walk.LEAVING, self)

class Dim(Statement):
    """Dim AST node"""
    def __init__(self, parent, name, dims):
        self.parent = parent
        self.name = name
        self.dims = dims
    def __str__(self):
        """Return a string representation of a Dim node"""
        return f"DIM {self.name}({', '.join(str(d) for d in self.dims)})"
    def walk(self):
        """Walk method for Dim nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.name)
        yield from walk(self.dims)
        yield (Walk.LEAVING, self)

class DefFn(ASTNode):
    """DefFn AST node"""
    def __init__(self, parent, name, params, expr):
        self.parent = parent
        self.name = name
        self.params = params
        self.expr = expr
    def __str__(self):
        """Return a string representation of a DefFn node"""
        return f"DEF FN {self.name}({', '.join(str(p) for p in self.params)}) = {self.expr}"
    def walk(self):
        """Walk method for DefFn nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.name)
        yield from walk(self.params)
        yield from walk(self.expr)
        yield (Walk.LEAVING, self)

class PrintItem(ASTNode):
    """PrintItem AST node"""
    def __init__(self, value, sep):
        self.value = value
        self.sep = sep
    def __str__(self):
        """Return a string representation of a PrintItem node"""
        return f"{nstr(self.value)}{nstr(self.sep)}"
    def walk(self):
        """Walk method for PrintItem nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.value)
        yield from walk(self.sep)
        yield (Walk.LEAVING, self)

class Rem(Statement):
    """Rem AST node"""
    def __init__(self, parent, comment):
        self.parent = parent
        self.comment = comment
    def __str__(self):
        """Return a string representation of a Rem node"""
        return f"REM {self.comment}"
    def walk(self):
        """Walk method for Rem nodes"""
        yield (Walk.VISITING, self)

class Label(ASTNode):
    """Label AST node"""
    def __init__(self, parent, name):
        self.parent = parent
        self.name = name[1:]
    def __str__(self):
        """Return a string representation of a Label node"""
        return f"@{self.name}"
    def walk(self):
        """Walk method for Label nodes"""
        yield (Walk.VISITING, self)

class Variable(Expression):
    """Variable AST node"""
    def __init__(self, parent, name):
        self.parent = parent
        self.name = name.replace(' ', '').replace('\t', '')
    def __str__(self):
        """Return a string representation of a Variable node"""
        return f"{self.name}"
    def walk(self):
        """Walk method for Variable nodes"""
        yield (Walk.VISITING, self)

class Number(Expression):
    """Number AST node"""
    def __init__(self, parent, value):
        self.parent = parent
        self.value = value
    def __str__(self):
        """Return a string representation of a Number node"""
        return f"{self.value}"
    def walk(self):
        """Walk method for Number nodes"""
        yield (Walk.VISITING, self)

class String(Expression):
    """String AST node"""
    def __init__(self, parent, value):
        self.parent = parent
        self.value = value[1:-1]
    def __str__(self):
        """Return a string representation of a String node"""
        return f"{speccy_quote(self.value)}"
    def walk(self):
        """Walk method for String nodes"""
        yield (Walk.VISITING, self)

class BinValue(ASTNode):
    """BinValue AST node"""
    def __init__(self, parent, digits):
        self.parent = parent
        self.digits = digits
    def __str__(self):
        """Return a string representation of a BinValue node"""
        return f"BIN {self.digits}"
    def walk(self):
        """Walk method for BinValue nodes"""
        yield (Walk.VISITING, self)

class ArrayRef(ASTNode):
    """ArrayRef AST node"""
    def __init__(self, parent, name, subscripts):
        self.parent = parent
        self.name = name
        self.subscripts = subscripts
    def __str__(self):
        """Return a string representation of a ArrayRef node"""
        return f"{self.name}({', '.join(str(s) for s in self.subscripts)})"
    def walk(self):
        """Walk method for ArrayRef nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.name)
        yield from walk(self.subscripts)
        yield (Walk.LEAVING, self)

class Fn(ASTNode):
    """Fn AST node"""
    def __init__(self, parent, name, args):
        self.parent = parent
        self.name = name
        self.args = args
    def __str__(self):
        """Return a string representation of a Fn node"""
        return f"FN {self.name}({', '.join(str(arg) for arg in self.args)})"
    def walk(self):
        """Walk method for Fn nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.name)
        yield from walk(self.args)
        yield (Walk.LEAVING, self)

class Slice(ASTNode):
    """Slice AST node"""
    def __init__(self, parent, min, max):
        self.parent = parent
        self.min = min
        self.max = max
    def walk(self):
        """Walk method for Slice nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.min)
        yield from walk(self.max)
        yield (Walk.LEAVING, self)

    def __str__(self):
        if self.min is None:
            return f"TO {self.max}"
        if self.max is None:
            return f"{self.min} TO"
        return f"{self.min} TO {self.max}"

class BinaryOp(ASTNode):
    """BinaryOp AST node"""
    def __init__(self, op, lhs, rhs):
        self.op = op
        self.lhs = lhs
        self.rhs = rhs
    def walk(self):
        """Walk method for BinaryOp nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.op)
        yield from walk(self.lhs)
        yield from walk(self.rhs)
        yield (Walk.LEAVING, self)

    def __str__(self):
        # Format left side
        lhs_str = str(self.lhs)
        if isinstance(self.lhs, BinaryOp) and needs_parens(self.lhs, self.op, False):
            lhs_str = f"({lhs_str})"
            
        # Format right side
        rhs_str = str(self.rhs)
        if isinstance(self.rhs, BinaryOp) and needs_parens(self.rhs, self.op, True):
            rhs_str = f"({rhs_str})"
            
        return f"{lhs_str} {self.op} {rhs_str}"

class ChanSpec(ASTNode):
    """ChanSpec AST node"""
    def __init__(self, parent, chan):
        self.parent = parent
        self.chan = chan
    def __str__(self):
        """Return a string representation of a ChanSpec node"""
        return f"#{self.chan}"
    def walk(self):
        """Walk method for ChanSpec nodes"""
        if (yield (Walk.ENTERING, self)) == Walk.SKIP: return
        yield from walk(self.chan)
        yield (Walk.LEAVING, self)

