"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    The version of the OpenAPI document: 1.28
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from esi_client.api_client import ApiClient, Endpoint as _Endpoint
from esi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from esi_client.model.bad_request import BadRequest
from esi_client.model.delete_fleets_fleet_id_members_member_id_not_found import DeleteFleetsFleetIdMembersMemberIdNotFound
from esi_client.model.delete_fleets_fleet_id_squads_squad_id_not_found import DeleteFleetsFleetIdSquadsSquadIdNotFound
from esi_client.model.delete_fleets_fleet_id_wings_wing_id_not_found import DeleteFleetsFleetIdWingsWingIdNotFound
from esi_client.model.error_limited import ErrorLimited
from esi_client.model.forbidden import Forbidden
from esi_client.model.gateway_timeout import GatewayTimeout
from esi_client.model.get_characters_character_id_fleet_not_found import GetCharactersCharacterIdFleetNotFound
from esi_client.model.get_characters_character_id_fleet_ok import GetCharactersCharacterIdFleetOk
from esi_client.model.get_fleets_fleet_id_members200_ok import GetFleetsFleetIdMembers200Ok
from esi_client.model.get_fleets_fleet_id_members_not_found import GetFleetsFleetIdMembersNotFound
from esi_client.model.get_fleets_fleet_id_not_found import GetFleetsFleetIdNotFound
from esi_client.model.get_fleets_fleet_id_ok import GetFleetsFleetIdOk
from esi_client.model.get_fleets_fleet_id_wings200_ok import GetFleetsFleetIdWings200Ok
from esi_client.model.get_fleets_fleet_id_wings_not_found import GetFleetsFleetIdWingsNotFound
from esi_client.model.internal_server_error import InternalServerError
from esi_client.model.post_fleets_fleet_id_members_invitation import PostFleetsFleetIdMembersInvitation
from esi_client.model.post_fleets_fleet_id_members_not_found import PostFleetsFleetIdMembersNotFound
from esi_client.model.post_fleets_fleet_id_members_unprocessable_entity import PostFleetsFleetIdMembersUnprocessableEntity
from esi_client.model.post_fleets_fleet_id_wings_created import PostFleetsFleetIdWingsCreated
from esi_client.model.post_fleets_fleet_id_wings_not_found import PostFleetsFleetIdWingsNotFound
from esi_client.model.post_fleets_fleet_id_wings_wing_id_squads_created import PostFleetsFleetIdWingsWingIdSquadsCreated
from esi_client.model.post_fleets_fleet_id_wings_wing_id_squads_not_found import PostFleetsFleetIdWingsWingIdSquadsNotFound
from esi_client.model.put_fleets_fleet_id_members_member_id_movement import PutFleetsFleetIdMembersMemberIdMovement
from esi_client.model.put_fleets_fleet_id_members_member_id_not_found import PutFleetsFleetIdMembersMemberIdNotFound
from esi_client.model.put_fleets_fleet_id_members_member_id_unprocessable_entity import PutFleetsFleetIdMembersMemberIdUnprocessableEntity
from esi_client.model.put_fleets_fleet_id_new_settings import PutFleetsFleetIdNewSettings
from esi_client.model.put_fleets_fleet_id_not_found import PutFleetsFleetIdNotFound
from esi_client.model.put_fleets_fleet_id_squads_squad_id_naming import PutFleetsFleetIdSquadsSquadIdNaming
from esi_client.model.put_fleets_fleet_id_squads_squad_id_not_found import PutFleetsFleetIdSquadsSquadIdNotFound
from esi_client.model.put_fleets_fleet_id_wings_wing_id_naming import PutFleetsFleetIdWingsWingIdNaming
from esi_client.model.put_fleets_fleet_id_wings_wing_id_not_found import PutFleetsFleetIdWingsWingIdNotFound
from esi_client.model.service_unavailable import ServiceUnavailable
from esi_client.model.unauthorized import Unauthorized


class FleetsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_fleets_fleet_id_members_member_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/members/{member_id}/',
                'operation_id': 'delete_fleets_fleet_id_members_member_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'member_id',
                    'datasource',
                    'token',
                ],
                'required': [
                    'fleet_id',
                    'member_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'member_id':
                        (int,),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'member_id': 'member_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'member_id': 'path',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_fleets_fleet_id_squads_squad_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/squads/{squad_id}/',
                'operation_id': 'delete_fleets_fleet_id_squads_squad_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'squad_id',
                    'datasource',
                    'token',
                ],
                'required': [
                    'fleet_id',
                    'squad_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'squad_id':
                        (int,),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'squad_id': 'squad_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'squad_id': 'path',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_fleets_fleet_id_wings_wing_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/wings/{wing_id}/',
                'operation_id': 'delete_fleets_fleet_id_wings_wing_id',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'wing_id',
                    'datasource',
                    'token',
                ],
                'required': [
                    'fleet_id',
                    'wing_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'wing_id':
                        (int,),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'wing_id': 'wing_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'wing_id': 'path',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_fleet_endpoint = _Endpoint(
            settings={
                'response_type': (GetCharactersCharacterIdFleetOk,),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/fleet/',
                'operation_id': 'get_characters_character_id_fleet',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fleets_fleet_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetFleetsFleetIdOk,),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/',
                'operation_id': 'get_fleets_fleet_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'fleet_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fleets_fleet_id_members_endpoint = _Endpoint(
            settings={
                'response_type': ([GetFleetsFleetIdMembers200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/members/',
                'operation_id': 'get_fleets_fleet_id_members',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                    'token',
                ],
                'required': [
                    'fleet_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fleets_fleet_id_wings_endpoint = _Endpoint(
            settings={
                'response_type': ([GetFleetsFleetIdWings200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/wings/',
                'operation_id': 'get_fleets_fleet_id_wings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                    'token',
                ],
                'required': [
                    'fleet_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_fleets_fleet_id_members_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/members/',
                'operation_id': 'post_fleets_fleet_id_members',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'invitation',
                    'datasource',
                    'token',
                ],
                'required': [
                    'fleet_id',
                    'invitation',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'invitation':
                        (PostFleetsFleetIdMembersInvitation,),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'invitation': 'body',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_fleets_fleet_id_wings_endpoint = _Endpoint(
            settings={
                'response_type': (PostFleetsFleetIdWingsCreated,),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/wings/',
                'operation_id': 'post_fleets_fleet_id_wings',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'datasource',
                    'token',
                ],
                'required': [
                    'fleet_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_fleets_fleet_id_wings_wing_id_squads_endpoint = _Endpoint(
            settings={
                'response_type': (PostFleetsFleetIdWingsWingIdSquadsCreated,),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/wings/{wing_id}/squads/',
                'operation_id': 'post_fleets_fleet_id_wings_wing_id_squads',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'wing_id',
                    'datasource',
                    'token',
                ],
                'required': [
                    'fleet_id',
                    'wing_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'wing_id':
                        (int,),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'wing_id': 'wing_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'wing_id': 'path',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.put_fleets_fleet_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/',
                'operation_id': 'put_fleets_fleet_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'new_settings',
                    'datasource',
                    'token',
                ],
                'required': [
                    'fleet_id',
                    'new_settings',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'new_settings':
                        (PutFleetsFleetIdNewSettings,),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'new_settings': 'body',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.put_fleets_fleet_id_members_member_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/members/{member_id}/',
                'operation_id': 'put_fleets_fleet_id_members_member_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'member_id',
                    'movement',
                    'datasource',
                    'token',
                ],
                'required': [
                    'fleet_id',
                    'member_id',
                    'movement',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'member_id':
                        (int,),
                    'movement':
                        (PutFleetsFleetIdMembersMemberIdMovement,),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'member_id': 'member_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'member_id': 'path',
                    'movement': 'body',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.put_fleets_fleet_id_squads_squad_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/squads/{squad_id}/',
                'operation_id': 'put_fleets_fleet_id_squads_squad_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'squad_id',
                    'naming',
                    'datasource',
                    'token',
                ],
                'required': [
                    'fleet_id',
                    'squad_id',
                    'naming',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'squad_id':
                        (int,),
                    'naming':
                        (PutFleetsFleetIdSquadsSquadIdNaming,),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'squad_id': 'squad_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'squad_id': 'path',
                    'naming': 'body',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.put_fleets_fleet_id_wings_wing_id_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/fleets/{fleet_id}/wings/{wing_id}/',
                'operation_id': 'put_fleets_fleet_id_wings_wing_id',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'fleet_id',
                    'wing_id',
                    'naming',
                    'datasource',
                    'token',
                ],
                'required': [
                    'fleet_id',
                    'wing_id',
                    'naming',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'fleet_id':
                        (int,),
                    'wing_id':
                        (int,),
                    'naming':
                        (PutFleetsFleetIdWingsWingIdNaming,),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'fleet_id': 'fleet_id',
                    'wing_id': 'wing_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'fleet_id': 'path',
                    'wing_id': 'path',
                    'naming': 'body',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def delete_fleets_fleet_id_members_member_id(
        self,
        fleet_id,
        member_id,
        **kwargs
    ):
        """Kick fleet member  # noqa: E501

        Kick a fleet member  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_fleets_fleet_id_members_member_id(fleet_id, member_id, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet
            member_id (int): The character ID of a member in this fleet

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        kwargs['member_id'] = \
            member_id
        return self.delete_fleets_fleet_id_members_member_id_endpoint.call_with_http_info(**kwargs)

    def delete_fleets_fleet_id_squads_squad_id(
        self,
        fleet_id,
        squad_id,
        **kwargs
    ):
        """Delete fleet squad  # noqa: E501

        Delete a fleet squad, only empty squads can be deleted  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_fleets_fleet_id_squads_squad_id(fleet_id, squad_id, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet
            squad_id (int): The squad to delete

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        kwargs['squad_id'] = \
            squad_id
        return self.delete_fleets_fleet_id_squads_squad_id_endpoint.call_with_http_info(**kwargs)

    def delete_fleets_fleet_id_wings_wing_id(
        self,
        fleet_id,
        wing_id,
        **kwargs
    ):
        """Delete fleet wing  # noqa: E501

        Delete a fleet wing, only empty wings can be deleted. The wing may contain squads, but the squads must be empty  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_fleets_fleet_id_wings_wing_id(fleet_id, wing_id, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet
            wing_id (int): The wing to delete

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        kwargs['wing_id'] = \
            wing_id
        return self.delete_fleets_fleet_id_wings_wing_id_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_fleet(
        self,
        character_id,
        **kwargs
    ):
        """Get character fleet info  # noqa: E501

        Return the fleet ID the character is in, if any.  --- Alternate route: `/legacy/characters/{character_id}/fleet/`  Alternate route: `/v1/characters/{character_id}/fleet/`  --- This route is cached for up to 60 seconds  --- Warning: This route has an upgrade available  --- [Diff of the upcoming changes](https://esi.evetech.net/diff/latest/dev/#GET-/characters/{character_id}/fleet/)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_fleet(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetCharactersCharacterIdFleetOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_fleet_endpoint.call_with_http_info(**kwargs)

    def get_fleets_fleet_id(
        self,
        fleet_id,
        **kwargs
    ):
        """Get fleet information  # noqa: E501

        Return details about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`  --- This route is cached for up to 5 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fleets_fleet_id(fleet_id, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetFleetsFleetIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        return self.get_fleets_fleet_id_endpoint.call_with_http_info(**kwargs)

    def get_fleets_fleet_id_members(
        self,
        fleet_id,
        **kwargs
    ):
        """Get fleet members  # noqa: E501

        Return information about fleet members  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`  --- This route is cached for up to 5 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fleets_fleet_id_members(fleet_id, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet

        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetFleetsFleetIdMembers200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        return self.get_fleets_fleet_id_members_endpoint.call_with_http_info(**kwargs)

    def get_fleets_fleet_id_wings(
        self,
        fleet_id,
        **kwargs
    ):
        """Get fleet wings  # noqa: E501

        Return information about wings in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`  --- This route is cached for up to 5 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fleets_fleet_id_wings(fleet_id, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet

        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetFleetsFleetIdWings200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        return self.get_fleets_fleet_id_wings_endpoint.call_with_http_info(**kwargs)

    def post_fleets_fleet_id_members(
        self,
        fleet_id,
        invitation,
        **kwargs
    ):
        """Create fleet invitation  # noqa: E501

        Invite a character into the fleet. If a character has a CSPA charge set it is not possible to invite them to the fleet using ESI  --- Alternate route: `/dev/fleets/{fleet_id}/members/`  Alternate route: `/legacy/fleets/{fleet_id}/members/`  Alternate route: `/v1/fleets/{fleet_id}/members/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_fleets_fleet_id_members(fleet_id, invitation, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet
            invitation (PostFleetsFleetIdMembersInvitation): Details of the invitation

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        kwargs['invitation'] = \
            invitation
        return self.post_fleets_fleet_id_members_endpoint.call_with_http_info(**kwargs)

    def post_fleets_fleet_id_wings(
        self,
        fleet_id,
        **kwargs
    ):
        """Create fleet wing  # noqa: E501

        Create a new wing in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/`  Alternate route: `/v1/fleets/{fleet_id}/wings/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_fleets_fleet_id_wings(fleet_id, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PostFleetsFleetIdWingsCreated
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        return self.post_fleets_fleet_id_wings_endpoint.call_with_http_info(**kwargs)

    def post_fleets_fleet_id_wings_wing_id_squads(
        self,
        fleet_id,
        wing_id,
        **kwargs
    ):
        """Create fleet squad  # noqa: E501

        Create a new squad in a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/squads/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/squads/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_fleets_fleet_id_wings_wing_id_squads(fleet_id, wing_id, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet
            wing_id (int): The wing_id to create squad in

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PostFleetsFleetIdWingsWingIdSquadsCreated
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        kwargs['wing_id'] = \
            wing_id
        return self.post_fleets_fleet_id_wings_wing_id_squads_endpoint.call_with_http_info(**kwargs)

    def put_fleets_fleet_id(
        self,
        fleet_id,
        new_settings,
        **kwargs
    ):
        """Update fleet  # noqa: E501

        Update settings about a fleet  --- Alternate route: `/dev/fleets/{fleet_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/`  Alternate route: `/v1/fleets/{fleet_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_fleets_fleet_id(fleet_id, new_settings, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet
            new_settings (PutFleetsFleetIdNewSettings): What to update for this fleet

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        kwargs['new_settings'] = \
            new_settings
        return self.put_fleets_fleet_id_endpoint.call_with_http_info(**kwargs)

    def put_fleets_fleet_id_members_member_id(
        self,
        fleet_id,
        member_id,
        movement,
        **kwargs
    ):
        """Move fleet member  # noqa: E501

        Move a fleet member around  --- Alternate route: `/dev/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/members/{member_id}/`  Alternate route: `/v1/fleets/{fleet_id}/members/{member_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_fleets_fleet_id_members_member_id(fleet_id, member_id, movement, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet
            member_id (int): The character ID of a member in this fleet
            movement (PutFleetsFleetIdMembersMemberIdMovement): Details of the invitation

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        kwargs['member_id'] = \
            member_id
        kwargs['movement'] = \
            movement
        return self.put_fleets_fleet_id_members_member_id_endpoint.call_with_http_info(**kwargs)

    def put_fleets_fleet_id_squads_squad_id(
        self,
        fleet_id,
        squad_id,
        naming,
        **kwargs
    ):
        """Rename fleet squad  # noqa: E501

        Rename a fleet squad  --- Alternate route: `/dev/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/squads/{squad_id}/`  Alternate route: `/v1/fleets/{fleet_id}/squads/{squad_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_fleets_fleet_id_squads_squad_id(fleet_id, squad_id, naming, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet
            squad_id (int): The squad to rename
            naming (PutFleetsFleetIdSquadsSquadIdNaming): New name of the squad

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        kwargs['squad_id'] = \
            squad_id
        kwargs['naming'] = \
            naming
        return self.put_fleets_fleet_id_squads_squad_id_endpoint.call_with_http_info(**kwargs)

    def put_fleets_fleet_id_wings_wing_id(
        self,
        fleet_id,
        wing_id,
        naming,
        **kwargs
    ):
        """Rename fleet wing  # noqa: E501

        Rename a fleet wing  --- Alternate route: `/dev/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/legacy/fleets/{fleet_id}/wings/{wing_id}/`  Alternate route: `/v1/fleets/{fleet_id}/wings/{wing_id}/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_fleets_fleet_id_wings_wing_id(fleet_id, wing_id, naming, async_req=True)
        >>> result = thread.get()

        Args:
            fleet_id (int): ID for a fleet
            wing_id (int): The wing to rename
            naming (PutFleetsFleetIdWingsWingIdNaming): New name of the wing

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['fleet_id'] = \
            fleet_id
        kwargs['wing_id'] = \
            wing_id
        kwargs['naming'] = \
            naming
        return self.put_fleets_fleet_id_wings_wing_id_endpoint.call_with_http_info(**kwargs)

