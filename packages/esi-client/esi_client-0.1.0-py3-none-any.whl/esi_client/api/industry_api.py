"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    The version of the OpenAPI document: 1.28
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from esi_client.api_client import ApiClient, Endpoint as _Endpoint
from esi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from esi_client.model.bad_request import BadRequest
from esi_client.model.error_limited import ErrorLimited
from esi_client.model.forbidden import Forbidden
from esi_client.model.gateway_timeout import GatewayTimeout
from esi_client.model.get_characters_character_id_industry_jobs200_ok import GetCharactersCharacterIdIndustryJobs200Ok
from esi_client.model.get_characters_character_id_mining200_ok import GetCharactersCharacterIdMining200Ok
from esi_client.model.get_corporation_corporation_id_mining_extractions200_ok import GetCorporationCorporationIdMiningExtractions200Ok
from esi_client.model.get_corporation_corporation_id_mining_observers200_ok import GetCorporationCorporationIdMiningObservers200Ok
from esi_client.model.get_corporation_corporation_id_mining_observers_observer_id200_ok import GetCorporationCorporationIdMiningObserversObserverId200Ok
from esi_client.model.get_corporations_corporation_id_industry_jobs200_ok import GetCorporationsCorporationIdIndustryJobs200Ok
from esi_client.model.get_industry_facilities200_ok import GetIndustryFacilities200Ok
from esi_client.model.get_industry_systems200_ok import GetIndustrySystems200Ok
from esi_client.model.internal_server_error import InternalServerError
from esi_client.model.service_unavailable import ServiceUnavailable
from esi_client.model.unauthorized import Unauthorized


class IndustryApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_characters_character_id_industry_jobs_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCharactersCharacterIdIndustryJobs200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/industry/jobs/',
                'operation_id': 'get_characters_character_id_industry_jobs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'include_completed',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'include_completed':
                        (bool,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'include_completed': 'include_completed',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'include_completed': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_mining_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCharactersCharacterIdMining200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/mining/',
                'operation_id': 'get_characters_character_id_mining',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'page',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                    'page',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'page':
                        (int,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'page': 'page',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'page': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_corporation_corporation_id_mining_extractions_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCorporationCorporationIdMiningExtractions200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/corporation/{corporation_id}/mining/extractions/',
                'operation_id': 'get_corporation_corporation_id_mining_extractions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'corporation_id',
                    'datasource',
                    'if_none_match',
                    'page',
                    'token',
                ],
                'required': [
                    'corporation_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'corporation_id',
                    'page',
                ]
            },
            root_map={
                'validations': {
                    ('corporation_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'corporation_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'page':
                        (int,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'corporation_id': 'corporation_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'page': 'page',
                    'token': 'token',
                },
                'location_map': {
                    'corporation_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'page': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_corporation_corporation_id_mining_observers_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCorporationCorporationIdMiningObservers200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/corporation/{corporation_id}/mining/observers/',
                'operation_id': 'get_corporation_corporation_id_mining_observers',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'corporation_id',
                    'datasource',
                    'if_none_match',
                    'page',
                    'token',
                ],
                'required': [
                    'corporation_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'corporation_id',
                    'page',
                ]
            },
            root_map={
                'validations': {
                    ('corporation_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'corporation_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'page':
                        (int,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'corporation_id': 'corporation_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'page': 'page',
                    'token': 'token',
                },
                'location_map': {
                    'corporation_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'page': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_corporation_corporation_id_mining_observers_observer_id_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCorporationCorporationIdMiningObserversObserverId200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/corporation/{corporation_id}/mining/observers/{observer_id}/',
                'operation_id': 'get_corporation_corporation_id_mining_observers_observer_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'corporation_id',
                    'observer_id',
                    'datasource',
                    'if_none_match',
                    'page',
                    'token',
                ],
                'required': [
                    'corporation_id',
                    'observer_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'corporation_id',
                    'page',
                ]
            },
            root_map={
                'validations': {
                    ('corporation_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'corporation_id':
                        (int,),
                    'observer_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'page':
                        (int,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'corporation_id': 'corporation_id',
                    'observer_id': 'observer_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'page': 'page',
                    'token': 'token',
                },
                'location_map': {
                    'corporation_id': 'path',
                    'observer_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'page': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_corporations_corporation_id_industry_jobs_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCorporationsCorporationIdIndustryJobs200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/corporations/{corporation_id}/industry/jobs/',
                'operation_id': 'get_corporations_corporation_id_industry_jobs',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'corporation_id',
                    'datasource',
                    'if_none_match',
                    'include_completed',
                    'page',
                    'token',
                ],
                'required': [
                    'corporation_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'corporation_id',
                    'page',
                ]
            },
            root_map={
                'validations': {
                    ('corporation_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'corporation_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'include_completed':
                        (bool,),
                    'page':
                        (int,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'corporation_id': 'corporation_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'include_completed': 'include_completed',
                    'page': 'page',
                    'token': 'token',
                },
                'location_map': {
                    'corporation_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'include_completed': 'query',
                    'page': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_industry_facilities_endpoint = _Endpoint(
            settings={
                'response_type': ([GetIndustryFacilities200Ok],),
                'auth': [],
                'endpoint_path': '/industry/facilities/',
                'operation_id': 'get_industry_facilities',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_industry_systems_endpoint = _Endpoint(
            settings={
                'response_type': ([GetIndustrySystems200Ok],),
                'auth': [],
                'endpoint_path': '/industry/systems/',
                'operation_id': 'get_industry_systems',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_characters_character_id_industry_jobs(
        self,
        character_id,
        **kwargs
    ):
        """List character industry jobs  # noqa: E501

        List industry jobs placed by a character  --- Alternate route: `/dev/characters/{character_id}/industry/jobs/`  Alternate route: `/legacy/characters/{character_id}/industry/jobs/`  Alternate route: `/v1/characters/{character_id}/industry/jobs/`  --- This route is cached for up to 300 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_industry_jobs(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            include_completed (bool): Whether to retrieve completed character industry jobs. Only includes jobs from the past 90 days. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCharactersCharacterIdIndustryJobs200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_industry_jobs_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_mining(
        self,
        character_id,
        **kwargs
    ):
        """Character mining ledger  # noqa: E501

        Paginated record of all mining done by a character for the past 30 days   --- Alternate route: `/dev/characters/{character_id}/mining/`  Alternate route: `/legacy/characters/{character_id}/mining/`  Alternate route: `/v1/characters/{character_id}/mining/`  --- This route is cached for up to 600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_mining(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            page (int): Which page of results to return. [optional] if omitted the server will use the default value of 1
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCharactersCharacterIdMining200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_mining_endpoint.call_with_http_info(**kwargs)

    def get_corporation_corporation_id_mining_extractions(
        self,
        corporation_id,
        **kwargs
    ):
        """Moon extraction timers  # noqa: E501

        Extraction timers for all moon chunks being extracted by refineries belonging to a corporation.   --- Alternate route: `/dev/corporation/{corporation_id}/mining/extractions/`  Alternate route: `/legacy/corporation/{corporation_id}/mining/extractions/`  Alternate route: `/v1/corporation/{corporation_id}/mining/extractions/`  --- This route is cached for up to 1800 seconds  --- Requires one of the following EVE corporation role(s): Station_Manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_corporation_corporation_id_mining_extractions(corporation_id, async_req=True)
        >>> result = thread.get()

        Args:
            corporation_id (int): An EVE corporation ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            page (int): Which page of results to return. [optional] if omitted the server will use the default value of 1
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCorporationCorporationIdMiningExtractions200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['corporation_id'] = \
            corporation_id
        return self.get_corporation_corporation_id_mining_extractions_endpoint.call_with_http_info(**kwargs)

    def get_corporation_corporation_id_mining_observers(
        self,
        corporation_id,
        **kwargs
    ):
        """Corporation mining observers  # noqa: E501

        Paginated list of all entities capable of observing and recording mining for a corporation   --- Alternate route: `/dev/corporation/{corporation_id}/mining/observers/`  Alternate route: `/legacy/corporation/{corporation_id}/mining/observers/`  Alternate route: `/v1/corporation/{corporation_id}/mining/observers/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_corporation_corporation_id_mining_observers(corporation_id, async_req=True)
        >>> result = thread.get()

        Args:
            corporation_id (int): An EVE corporation ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            page (int): Which page of results to return. [optional] if omitted the server will use the default value of 1
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCorporationCorporationIdMiningObservers200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['corporation_id'] = \
            corporation_id
        return self.get_corporation_corporation_id_mining_observers_endpoint.call_with_http_info(**kwargs)

    def get_corporation_corporation_id_mining_observers_observer_id(
        self,
        corporation_id,
        observer_id,
        **kwargs
    ):
        """Observed corporation mining  # noqa: E501

        Paginated record of all mining seen by an observer   --- Alternate route: `/dev/corporation/{corporation_id}/mining/observers/{observer_id}/`  Alternate route: `/legacy/corporation/{corporation_id}/mining/observers/{observer_id}/`  Alternate route: `/v1/corporation/{corporation_id}/mining/observers/{observer_id}/`  --- This route is cached for up to 3600 seconds  --- Requires one of the following EVE corporation role(s): Accountant   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_corporation_corporation_id_mining_observers_observer_id(corporation_id, observer_id, async_req=True)
        >>> result = thread.get()

        Args:
            corporation_id (int): An EVE corporation ID
            observer_id (int): A mining observer id

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            page (int): Which page of results to return. [optional] if omitted the server will use the default value of 1
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCorporationCorporationIdMiningObserversObserverId200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['corporation_id'] = \
            corporation_id
        kwargs['observer_id'] = \
            observer_id
        return self.get_corporation_corporation_id_mining_observers_observer_id_endpoint.call_with_http_info(**kwargs)

    def get_corporations_corporation_id_industry_jobs(
        self,
        corporation_id,
        **kwargs
    ):
        """List corporation industry jobs  # noqa: E501

        List industry jobs run by a corporation  --- Alternate route: `/dev/corporations/{corporation_id}/industry/jobs/`  Alternate route: `/legacy/corporations/{corporation_id}/industry/jobs/`  Alternate route: `/v1/corporations/{corporation_id}/industry/jobs/`  --- This route is cached for up to 300 seconds  --- Requires one of the following EVE corporation role(s): Factory_Manager   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_corporations_corporation_id_industry_jobs(corporation_id, async_req=True)
        >>> result = thread.get()

        Args:
            corporation_id (int): An EVE corporation ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            include_completed (bool): Whether to retrieve completed corporation industry jobs. Only includes jobs from the past 90 days. [optional] if omitted the server will use the default value of False
            page (int): Which page of results to return. [optional] if omitted the server will use the default value of 1
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCorporationsCorporationIdIndustryJobs200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['corporation_id'] = \
            corporation_id
        return self.get_corporations_corporation_id_industry_jobs_endpoint.call_with_http_info(**kwargs)

    def get_industry_facilities(
        self,
        **kwargs
    ):
        """List industry facilities  # noqa: E501

        Return a list of industry facilities  --- Alternate route: `/dev/industry/facilities/`  Alternate route: `/legacy/industry/facilities/`  Alternate route: `/v1/industry/facilities/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_industry_facilities(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetIndustryFacilities200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_industry_facilities_endpoint.call_with_http_info(**kwargs)

    def get_industry_systems(
        self,
        **kwargs
    ):
        """List solar system cost indices  # noqa: E501

        Return cost indices for solar systems  --- Alternate route: `/dev/industry/systems/`  Alternate route: `/legacy/industry/systems/`  Alternate route: `/v1/industry/systems/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_industry_systems(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetIndustrySystems200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_industry_systems_endpoint.call_with_http_info(**kwargs)

