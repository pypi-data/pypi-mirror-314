"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    The version of the OpenAPI document: 1.28
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from esi_client.api_client import ApiClient, Endpoint as _Endpoint
from esi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from esi_client.model.bad_request import BadRequest
from esi_client.model.error_limited import ErrorLimited
from esi_client.model.forbidden import Forbidden
from esi_client.model.gateway_timeout import GatewayTimeout
from esi_client.model.get_characters_character_id_agents_research200_ok import GetCharactersCharacterIdAgentsResearch200Ok
from esi_client.model.get_characters_character_id_blueprints200_ok import GetCharactersCharacterIdBlueprints200Ok
from esi_client.model.get_characters_character_id_corporationhistory200_ok import GetCharactersCharacterIdCorporationhistory200Ok
from esi_client.model.get_characters_character_id_fatigue_ok import GetCharactersCharacterIdFatigueOk
from esi_client.model.get_characters_character_id_medals200_ok import GetCharactersCharacterIdMedals200Ok
from esi_client.model.get_characters_character_id_not_found import GetCharactersCharacterIdNotFound
from esi_client.model.get_characters_character_id_notifications200_ok import GetCharactersCharacterIdNotifications200Ok
from esi_client.model.get_characters_character_id_notifications_contacts200_ok import GetCharactersCharacterIdNotificationsContacts200Ok
from esi_client.model.get_characters_character_id_ok import GetCharactersCharacterIdOk
from esi_client.model.get_characters_character_id_portrait_not_found import GetCharactersCharacterIdPortraitNotFound
from esi_client.model.get_characters_character_id_portrait_ok import GetCharactersCharacterIdPortraitOk
from esi_client.model.get_characters_character_id_roles_ok import GetCharactersCharacterIdRolesOk
from esi_client.model.get_characters_character_id_standings200_ok import GetCharactersCharacterIdStandings200Ok
from esi_client.model.get_characters_character_id_titles200_ok import GetCharactersCharacterIdTitles200Ok
from esi_client.model.internal_server_error import InternalServerError
from esi_client.model.post_characters_affiliation200_ok import PostCharactersAffiliation200Ok
from esi_client.model.service_unavailable import ServiceUnavailable
from esi_client.model.unauthorized import Unauthorized


class CharacterApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_characters_character_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetCharactersCharacterIdOk,),
                'auth': [],
                'endpoint_path': '/characters/{character_id}/',
                'operation_id': 'get_characters_character_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_agents_research_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCharactersCharacterIdAgentsResearch200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/agents_research/',
                'operation_id': 'get_characters_character_id_agents_research',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_blueprints_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCharactersCharacterIdBlueprints200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/blueprints/',
                'operation_id': 'get_characters_character_id_blueprints',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'page',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                    'page',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'page':
                        (int,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'page': 'page',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'page': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_corporationhistory_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCharactersCharacterIdCorporationhistory200Ok],),
                'auth': [],
                'endpoint_path': '/characters/{character_id}/corporationhistory/',
                'operation_id': 'get_characters_character_id_corporationhistory',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_fatigue_endpoint = _Endpoint(
            settings={
                'response_type': (GetCharactersCharacterIdFatigueOk,),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/fatigue/',
                'operation_id': 'get_characters_character_id_fatigue',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_medals_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCharactersCharacterIdMedals200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/medals/',
                'operation_id': 'get_characters_character_id_medals',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_notifications_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCharactersCharacterIdNotifications200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/notifications/',
                'operation_id': 'get_characters_character_id_notifications',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_notifications_contacts_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCharactersCharacterIdNotificationsContacts200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/notifications/contacts/',
                'operation_id': 'get_characters_character_id_notifications_contacts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_portrait_endpoint = _Endpoint(
            settings={
                'response_type': (GetCharactersCharacterIdPortraitOk,),
                'auth': [],
                'endpoint_path': '/characters/{character_id}/portrait/',
                'operation_id': 'get_characters_character_id_portrait',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_roles_endpoint = _Endpoint(
            settings={
                'response_type': (GetCharactersCharacterIdRolesOk,),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/roles/',
                'operation_id': 'get_characters_character_id_roles',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_standings_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCharactersCharacterIdStandings200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/standings/',
                'operation_id': 'get_characters_character_id_standings',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_characters_character_id_titles_endpoint = _Endpoint(
            settings={
                'response_type': ([GetCharactersCharacterIdTitles200Ok],),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/titles/',
                'operation_id': 'get_characters_character_id_titles',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_characters_affiliation_endpoint = _Endpoint(
            settings={
                'response_type': ([PostCharactersAffiliation200Ok],),
                'auth': [],
                'endpoint_path': '/characters/affiliation/',
                'operation_id': 'post_characters_affiliation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'characters',
                    'datasource',
                ],
                'required': [
                    'characters',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'characters',
                ]
            },
            root_map={
                'validations': {
                    ('characters',): {

                        'max_items': 1000,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'characters':
                        ([int],),
                    'datasource':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                },
                'location_map': {
                    'characters': 'body',
                    'datasource': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_characters_character_id_cspa_endpoint = _Endpoint(
            settings={
                'response_type': (float,),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/cspa/',
                'operation_id': 'post_characters_character_id_cspa',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'characters',
                    'datasource',
                    'token',
                ],
                'required': [
                    'character_id',
                    'characters',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                    'characters',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                    ('characters',): {

                        'max_items': 100,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'characters':
                        ([int],),
                    'datasource':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'characters': 'body',
                    'datasource': 'query',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def get_characters_character_id(
        self,
        character_id,
        **kwargs
    ):
        """Get character's public information  # noqa: E501

        Public information about a character  --- Alternate route: `/dev/characters/{character_id}/`  Alternate route: `/legacy/characters/{character_id}/`  Alternate route: `/v5/characters/{character_id}/`  --- This route is cached for up to 604800 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetCharactersCharacterIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_agents_research(
        self,
        character_id,
        **kwargs
    ):
        """Get agents research  # noqa: E501

        Return a list of agents research information for a character. The formula for finding the current research points with an agent is: currentPoints = remainderPoints + pointsPerDay * days(currentTime - researchStartDate)  --- Alternate route: `/dev/characters/{character_id}/agents_research/`  Alternate route: `/v2/characters/{character_id}/agents_research/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_agents_research(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCharactersCharacterIdAgentsResearch200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_agents_research_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_blueprints(
        self,
        character_id,
        **kwargs
    ):
        """Get blueprints  # noqa: E501

        Return a list of blueprints the character owns  --- Alternate route: `/dev/characters/{character_id}/blueprints/`  Alternate route: `/v3/characters/{character_id}/blueprints/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_blueprints(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            page (int): Which page of results to return. [optional] if omitted the server will use the default value of 1
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCharactersCharacterIdBlueprints200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_blueprints_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_corporationhistory(
        self,
        character_id,
        **kwargs
    ):
        """Get corporation history  # noqa: E501

        Get a list of all the corporations a character has been a member of  --- Alternate route: `/dev/characters/{character_id}/corporationhistory/`  Alternate route: `/v2/characters/{character_id}/corporationhistory/`  --- This route is cached for up to 86400 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_corporationhistory(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCharactersCharacterIdCorporationhistory200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_corporationhistory_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_fatigue(
        self,
        character_id,
        **kwargs
    ):
        """Get jump fatigue  # noqa: E501

        Return a character's jump activation and fatigue information  --- Alternate route: `/dev/characters/{character_id}/fatigue/`  Alternate route: `/v2/characters/{character_id}/fatigue/`  --- This route is cached for up to 300 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_fatigue(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetCharactersCharacterIdFatigueOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_fatigue_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_medals(
        self,
        character_id,
        **kwargs
    ):
        """Get medals  # noqa: E501

        Return a list of medals the character has  --- Alternate route: `/dev/characters/{character_id}/medals/`  Alternate route: `/v2/characters/{character_id}/medals/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_medals(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCharactersCharacterIdMedals200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_medals_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_notifications(
        self,
        character_id,
        **kwargs
    ):
        """Get character notifications  # noqa: E501

        Return character notifications  --- Alternate route: `/dev/characters/{character_id}/notifications/`  Alternate route: `/v5/characters/{character_id}/notifications/`  Alternate route: `/v6/characters/{character_id}/notifications/`  --- This route is cached for up to 600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_notifications(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCharactersCharacterIdNotifications200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_notifications_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_notifications_contacts(
        self,
        character_id,
        **kwargs
    ):
        """Get new contact notifications  # noqa: E501

        Return notifications about having been added to someone's contact list  --- Alternate route: `/dev/characters/{character_id}/notifications/contacts/`  Alternate route: `/v2/characters/{character_id}/notifications/contacts/`  --- This route is cached for up to 600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_notifications_contacts(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCharactersCharacterIdNotificationsContacts200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_notifications_contacts_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_portrait(
        self,
        character_id,
        **kwargs
    ):
        """Get character portraits  # noqa: E501

        Get portrait urls for a character  --- Alternate route: `/dev/characters/{character_id}/portrait/`  Alternate route: `/v2/characters/{character_id}/portrait/`  Alternate route: `/v3/characters/{character_id}/portrait/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_portrait(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetCharactersCharacterIdPortraitOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_portrait_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_roles(
        self,
        character_id,
        **kwargs
    ):
        """Get character corporation roles  # noqa: E501

        Returns a character's corporation roles  --- Alternate route: `/dev/characters/{character_id}/roles/`  Alternate route: `/v3/characters/{character_id}/roles/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_roles(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetCharactersCharacterIdRolesOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_roles_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_standings(
        self,
        character_id,
        **kwargs
    ):
        """Get standings  # noqa: E501

        Return character standings from agents, NPC corporations, and factions  --- Alternate route: `/dev/characters/{character_id}/standings/`  Alternate route: `/v2/characters/{character_id}/standings/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_standings(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCharactersCharacterIdStandings200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_standings_endpoint.call_with_http_info(**kwargs)

    def get_characters_character_id_titles(
        self,
        character_id,
        **kwargs
    ):
        """Get character corporation titles  # noqa: E501

        Returns a character's titles  --- Alternate route: `/dev/characters/{character_id}/titles/`  Alternate route: `/v2/characters/{character_id}/titles/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_titles(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetCharactersCharacterIdTitles200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_titles_endpoint.call_with_http_info(**kwargs)

    def post_characters_affiliation(
        self,
        characters,
        **kwargs
    ):
        """Character affiliation  # noqa: E501

        Bulk lookup of character IDs to corporation, alliance and faction  --- Alternate route: `/dev/characters/affiliation/`  Alternate route: `/v2/characters/affiliation/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_characters_affiliation(characters, async_req=True)
        >>> result = thread.get()

        Args:
            characters ([int]): The character IDs to fetch affiliations for. All characters must exist, or none will be returned

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [PostCharactersAffiliation200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['characters'] = \
            characters
        return self.post_characters_affiliation_endpoint.call_with_http_info(**kwargs)

    def post_characters_character_id_cspa(
        self,
        character_id,
        characters,
        **kwargs
    ):
        """Calculate a CSPA charge cost  # noqa: E501

        Takes a source character ID in the url and a set of target character ID's in the body, returns a CSPA charge cost  --- Alternate route: `/dev/characters/{character_id}/cspa/`  Alternate route: `/v5/characters/{character_id}/cspa/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_characters_character_id_cspa(character_id, characters, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID
            characters ([int]): The target characters to calculate the charge for

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            float
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        kwargs['characters'] = \
            characters
        return self.post_characters_character_id_cspa_endpoint.call_with_http_info(**kwargs)

