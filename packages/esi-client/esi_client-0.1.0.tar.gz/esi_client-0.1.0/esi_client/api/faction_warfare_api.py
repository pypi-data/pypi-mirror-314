"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    The version of the OpenAPI document: 1.28
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from esi_client.api_client import ApiClient, Endpoint as _Endpoint
from esi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from esi_client.model.bad_request import BadRequest
from esi_client.model.error_limited import ErrorLimited
from esi_client.model.forbidden import Forbidden
from esi_client.model.gateway_timeout import GatewayTimeout
from esi_client.model.get_characters_character_id_fw_stats_ok import GetCharactersCharacterIdFwStatsOk
from esi_client.model.get_corporations_corporation_id_fw_stats_ok import GetCorporationsCorporationIdFwStatsOk
from esi_client.model.get_fw_leaderboards_characters_ok import GetFwLeaderboardsCharactersOk
from esi_client.model.get_fw_leaderboards_corporations_ok import GetFwLeaderboardsCorporationsOk
from esi_client.model.get_fw_leaderboards_ok import GetFwLeaderboardsOk
from esi_client.model.get_fw_stats200_ok import GetFwStats200Ok
from esi_client.model.get_fw_systems200_ok import GetFwSystems200Ok
from esi_client.model.get_fw_wars200_ok import GetFwWars200Ok
from esi_client.model.internal_server_error import InternalServerError
from esi_client.model.service_unavailable import ServiceUnavailable
from esi_client.model.unauthorized import Unauthorized


class FactionWarfareApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_characters_character_id_fw_stats_endpoint = _Endpoint(
            settings={
                'response_type': (GetCharactersCharacterIdFwStatsOk,),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/characters/{character_id}/fw/stats/',
                'operation_id': 'get_characters_character_id_fw_stats',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'character_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'character_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'character_id',
                ]
            },
            root_map={
                'validations': {
                    ('character_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'character_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'character_id': 'character_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'character_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_corporations_corporation_id_fw_stats_endpoint = _Endpoint(
            settings={
                'response_type': (GetCorporationsCorporationIdFwStatsOk,),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/corporations/{corporation_id}/fw/stats/',
                'operation_id': 'get_corporations_corporation_id_fw_stats',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'corporation_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'corporation_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'corporation_id',
                ]
            },
            root_map={
                'validations': {
                    ('corporation_id',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'corporation_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'corporation_id': 'corporation_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'corporation_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fw_leaderboards_endpoint = _Endpoint(
            settings={
                'response_type': (GetFwLeaderboardsOk,),
                'auth': [],
                'endpoint_path': '/fw/leaderboards/',
                'operation_id': 'get_fw_leaderboards',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fw_leaderboards_characters_endpoint = _Endpoint(
            settings={
                'response_type': (GetFwLeaderboardsCharactersOk,),
                'auth': [],
                'endpoint_path': '/fw/leaderboards/characters/',
                'operation_id': 'get_fw_leaderboards_characters',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fw_leaderboards_corporations_endpoint = _Endpoint(
            settings={
                'response_type': (GetFwLeaderboardsCorporationsOk,),
                'auth': [],
                'endpoint_path': '/fw/leaderboards/corporations/',
                'operation_id': 'get_fw_leaderboards_corporations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fw_stats_endpoint = _Endpoint(
            settings={
                'response_type': ([GetFwStats200Ok],),
                'auth': [],
                'endpoint_path': '/fw/stats/',
                'operation_id': 'get_fw_stats',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fw_systems_endpoint = _Endpoint(
            settings={
                'response_type': ([GetFwSystems200Ok],),
                'auth': [],
                'endpoint_path': '/fw/systems/',
                'operation_id': 'get_fw_systems',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_fw_wars_endpoint = _Endpoint(
            settings={
                'response_type': ([GetFwWars200Ok],),
                'auth': [],
                'endpoint_path': '/fw/wars/',
                'operation_id': 'get_fw_wars',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_characters_character_id_fw_stats(
        self,
        character_id,
        **kwargs
    ):
        """Overview of a character involved in faction warfare  # noqa: E501

        Statistical overview of a character involved in faction warfare  --- Alternate route: `/dev/characters/{character_id}/fw/stats/`  Alternate route: `/legacy/characters/{character_id}/fw/stats/`  Alternate route: `/v1/characters/{character_id}/fw/stats/`  Alternate route: `/v2/characters/{character_id}/fw/stats/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_characters_character_id_fw_stats(character_id, async_req=True)
        >>> result = thread.get()

        Args:
            character_id (int): An EVE character ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetCharactersCharacterIdFwStatsOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['character_id'] = \
            character_id
        return self.get_characters_character_id_fw_stats_endpoint.call_with_http_info(**kwargs)

    def get_corporations_corporation_id_fw_stats(
        self,
        corporation_id,
        **kwargs
    ):
        """Overview of a corporation involved in faction warfare  # noqa: E501

        Statistics about a corporation involved in faction warfare  --- Alternate route: `/dev/corporations/{corporation_id}/fw/stats/`  Alternate route: `/legacy/corporations/{corporation_id}/fw/stats/`  Alternate route: `/v1/corporations/{corporation_id}/fw/stats/`  Alternate route: `/v2/corporations/{corporation_id}/fw/stats/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_corporations_corporation_id_fw_stats(corporation_id, async_req=True)
        >>> result = thread.get()

        Args:
            corporation_id (int): An EVE corporation ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetCorporationsCorporationIdFwStatsOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['corporation_id'] = \
            corporation_id
        return self.get_corporations_corporation_id_fw_stats_endpoint.call_with_http_info(**kwargs)

    def get_fw_leaderboards(
        self,
        **kwargs
    ):
        """List of the top factions in faction warfare  # noqa: E501

        Top 4 leaderboard of factions for kills and victory points separated by total, last week and yesterday  --- Alternate route: `/dev/fw/leaderboards/`  Alternate route: `/legacy/fw/leaderboards/`  Alternate route: `/v1/fw/leaderboards/`  Alternate route: `/v2/fw/leaderboards/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fw_leaderboards(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetFwLeaderboardsOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_fw_leaderboards_endpoint.call_with_http_info(**kwargs)

    def get_fw_leaderboards_characters(
        self,
        **kwargs
    ):
        """List of the top pilots in faction warfare  # noqa: E501

        Top 100 leaderboard of pilots for kills and victory points separated by total, last week and yesterday  --- Alternate route: `/dev/fw/leaderboards/characters/`  Alternate route: `/legacy/fw/leaderboards/characters/`  Alternate route: `/v1/fw/leaderboards/characters/`  Alternate route: `/v2/fw/leaderboards/characters/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fw_leaderboards_characters(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetFwLeaderboardsCharactersOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_fw_leaderboards_characters_endpoint.call_with_http_info(**kwargs)

    def get_fw_leaderboards_corporations(
        self,
        **kwargs
    ):
        """List of the top corporations in faction warfare  # noqa: E501

        Top 10 leaderboard of corporations for kills and victory points separated by total, last week and yesterday  --- Alternate route: `/dev/fw/leaderboards/corporations/`  Alternate route: `/legacy/fw/leaderboards/corporations/`  Alternate route: `/v1/fw/leaderboards/corporations/`  Alternate route: `/v2/fw/leaderboards/corporations/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fw_leaderboards_corporations(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetFwLeaderboardsCorporationsOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_fw_leaderboards_corporations_endpoint.call_with_http_info(**kwargs)

    def get_fw_stats(
        self,
        **kwargs
    ):
        """An overview of statistics about factions involved in faction warfare  # noqa: E501

        Statistical overviews of factions involved in faction warfare  --- Alternate route: `/dev/fw/stats/`  Alternate route: `/legacy/fw/stats/`  Alternate route: `/v1/fw/stats/`  Alternate route: `/v2/fw/stats/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fw_stats(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetFwStats200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_fw_stats_endpoint.call_with_http_info(**kwargs)

    def get_fw_systems(
        self,
        **kwargs
    ):
        """Ownership of faction warfare systems  # noqa: E501

        An overview of the current ownership of faction warfare solar systems  --- Alternate route: `/dev/fw/systems/`  Alternate route: `/legacy/fw/systems/`  Alternate route: `/v2/fw/systems/`  Alternate route: `/v3/fw/systems/`  --- This route is cached for up to 1800 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fw_systems(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetFwSystems200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_fw_systems_endpoint.call_with_http_info(**kwargs)

    def get_fw_wars(
        self,
        **kwargs
    ):
        """Data about which NPC factions are at war  # noqa: E501

        Data about which NPC factions are at war  --- Alternate route: `/dev/fw/wars/`  Alternate route: `/legacy/fw/wars/`  Alternate route: `/v1/fw/wars/`  Alternate route: `/v2/fw/wars/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_fw_wars(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetFwWars200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_fw_wars_endpoint.call_with_http_info(**kwargs)

