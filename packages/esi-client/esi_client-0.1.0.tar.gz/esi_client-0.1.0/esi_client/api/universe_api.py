"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    The version of the OpenAPI document: 1.28
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from esi_client.api_client import ApiClient, Endpoint as _Endpoint
from esi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from esi_client.model.bad_request import BadRequest
from esi_client.model.error_limited import ErrorLimited
from esi_client.model.forbidden import Forbidden
from esi_client.model.gateway_timeout import GatewayTimeout
from esi_client.model.get_universe_ancestries200_ok import GetUniverseAncestries200Ok
from esi_client.model.get_universe_asteroid_belts_asteroid_belt_id_not_found import GetUniverseAsteroidBeltsAsteroidBeltIdNotFound
from esi_client.model.get_universe_asteroid_belts_asteroid_belt_id_ok import GetUniverseAsteroidBeltsAsteroidBeltIdOk
from esi_client.model.get_universe_bloodlines200_ok import GetUniverseBloodlines200Ok
from esi_client.model.get_universe_categories_category_id_not_found import GetUniverseCategoriesCategoryIdNotFound
from esi_client.model.get_universe_categories_category_id_ok import GetUniverseCategoriesCategoryIdOk
from esi_client.model.get_universe_constellations_constellation_id_not_found import GetUniverseConstellationsConstellationIdNotFound
from esi_client.model.get_universe_constellations_constellation_id_ok import GetUniverseConstellationsConstellationIdOk
from esi_client.model.get_universe_factions200_ok import GetUniverseFactions200Ok
from esi_client.model.get_universe_graphics_graphic_id_not_found import GetUniverseGraphicsGraphicIdNotFound
from esi_client.model.get_universe_graphics_graphic_id_ok import GetUniverseGraphicsGraphicIdOk
from esi_client.model.get_universe_groups_group_id_not_found import GetUniverseGroupsGroupIdNotFound
from esi_client.model.get_universe_groups_group_id_ok import GetUniverseGroupsGroupIdOk
from esi_client.model.get_universe_moons_moon_id_not_found import GetUniverseMoonsMoonIdNotFound
from esi_client.model.get_universe_moons_moon_id_ok import GetUniverseMoonsMoonIdOk
from esi_client.model.get_universe_planets_planet_id_not_found import GetUniversePlanetsPlanetIdNotFound
from esi_client.model.get_universe_planets_planet_id_ok import GetUniversePlanetsPlanetIdOk
from esi_client.model.get_universe_races200_ok import GetUniverseRaces200Ok
from esi_client.model.get_universe_regions_region_id_not_found import GetUniverseRegionsRegionIdNotFound
from esi_client.model.get_universe_regions_region_id_ok import GetUniverseRegionsRegionIdOk
from esi_client.model.get_universe_stargates_stargate_id_not_found import GetUniverseStargatesStargateIdNotFound
from esi_client.model.get_universe_stargates_stargate_id_ok import GetUniverseStargatesStargateIdOk
from esi_client.model.get_universe_stars_star_id_ok import GetUniverseStarsStarIdOk
from esi_client.model.get_universe_stations_station_id_not_found import GetUniverseStationsStationIdNotFound
from esi_client.model.get_universe_stations_station_id_ok import GetUniverseStationsStationIdOk
from esi_client.model.get_universe_structures_structure_id_not_found import GetUniverseStructuresStructureIdNotFound
from esi_client.model.get_universe_structures_structure_id_ok import GetUniverseStructuresStructureIdOk
from esi_client.model.get_universe_system_jumps200_ok import GetUniverseSystemJumps200Ok
from esi_client.model.get_universe_system_kills200_ok import GetUniverseSystemKills200Ok
from esi_client.model.get_universe_systems_system_id_not_found import GetUniverseSystemsSystemIdNotFound
from esi_client.model.get_universe_systems_system_id_ok import GetUniverseSystemsSystemIdOk
from esi_client.model.get_universe_types_type_id_not_found import GetUniverseTypesTypeIdNotFound
from esi_client.model.get_universe_types_type_id_ok import GetUniverseTypesTypeIdOk
from esi_client.model.internal_server_error import InternalServerError
from esi_client.model.post_universe_ids_ok import PostUniverseIdsOk
from esi_client.model.post_universe_names200_ok import PostUniverseNames200Ok
from esi_client.model.post_universe_names_not_found import PostUniverseNamesNotFound
from esi_client.model.service_unavailable import ServiceUnavailable
from esi_client.model.unauthorized import Unauthorized


class UniverseApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_universe_ancestries_endpoint = _Endpoint(
            settings={
                'response_type': ([GetUniverseAncestries200Ok],),
                'auth': [],
                'endpoint_path': '/universe/ancestries/',
                'operation_id': 'get_universe_ancestries',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                },
                'location_map': {
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_asteroid_belts_asteroid_belt_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseAsteroidBeltsAsteroidBeltIdOk,),
                'auth': [],
                'endpoint_path': '/universe/asteroid_belts/{asteroid_belt_id}/',
                'operation_id': 'get_universe_asteroid_belts_asteroid_belt_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'asteroid_belt_id',
                    'datasource',
                    'if_none_match',
                ],
                'required': [
                    'asteroid_belt_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'asteroid_belt_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'asteroid_belt_id': 'asteroid_belt_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'asteroid_belt_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_bloodlines_endpoint = _Endpoint(
            settings={
                'response_type': ([GetUniverseBloodlines200Ok],),
                'auth': [],
                'endpoint_path': '/universe/bloodlines/',
                'operation_id': 'get_universe_bloodlines',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                },
                'location_map': {
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_categories_endpoint = _Endpoint(
            settings={
                'response_type': ([int],),
                'auth': [],
                'endpoint_path': '/universe/categories/',
                'operation_id': 'get_universe_categories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_categories_category_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseCategoriesCategoryIdOk,),
                'auth': [],
                'endpoint_path': '/universe/categories/{category_id}/',
                'operation_id': 'get_universe_categories_category_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'category_id',
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                ],
                'required': [
                    'category_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'category_id':
                        (int,),
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'category_id': 'category_id',
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                },
                'location_map': {
                    'category_id': 'path',
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_constellations_endpoint = _Endpoint(
            settings={
                'response_type': ([int],),
                'auth': [],
                'endpoint_path': '/universe/constellations/',
                'operation_id': 'get_universe_constellations',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_constellations_constellation_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseConstellationsConstellationIdOk,),
                'auth': [],
                'endpoint_path': '/universe/constellations/{constellation_id}/',
                'operation_id': 'get_universe_constellations_constellation_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'constellation_id',
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                ],
                'required': [
                    'constellation_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'constellation_id':
                        (int,),
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'constellation_id': 'constellation_id',
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                },
                'location_map': {
                    'constellation_id': 'path',
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_factions_endpoint = _Endpoint(
            settings={
                'response_type': ([GetUniverseFactions200Ok],),
                'auth': [],
                'endpoint_path': '/universe/factions/',
                'operation_id': 'get_universe_factions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                },
                'location_map': {
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_graphics_endpoint = _Endpoint(
            settings={
                'response_type': ([int],),
                'auth': [],
                'endpoint_path': '/universe/graphics/',
                'operation_id': 'get_universe_graphics',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_graphics_graphic_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseGraphicsGraphicIdOk,),
                'auth': [],
                'endpoint_path': '/universe/graphics/{graphic_id}/',
                'operation_id': 'get_universe_graphics_graphic_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'graphic_id',
                    'datasource',
                    'if_none_match',
                ],
                'required': [
                    'graphic_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'graphic_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'graphic_id': 'graphic_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'graphic_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_groups_endpoint = _Endpoint(
            settings={
                'response_type': ([int],),
                'auth': [],
                'endpoint_path': '/universe/groups/',
                'operation_id': 'get_universe_groups',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                    'page',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'page',
                ]
            },
            root_map={
                'validations': {
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'page':
                        (int,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'page': 'page',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'page': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_groups_group_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseGroupsGroupIdOk,),
                'auth': [],
                'endpoint_path': '/universe/groups/{group_id}/',
                'operation_id': 'get_universe_groups_group_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'group_id',
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                ],
                'required': [
                    'group_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'group_id':
                        (int,),
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'group_id': 'group_id',
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                },
                'location_map': {
                    'group_id': 'path',
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_moons_moon_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseMoonsMoonIdOk,),
                'auth': [],
                'endpoint_path': '/universe/moons/{moon_id}/',
                'operation_id': 'get_universe_moons_moon_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'moon_id',
                    'datasource',
                    'if_none_match',
                ],
                'required': [
                    'moon_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'moon_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'moon_id': 'moon_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'moon_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_planets_planet_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniversePlanetsPlanetIdOk,),
                'auth': [],
                'endpoint_path': '/universe/planets/{planet_id}/',
                'operation_id': 'get_universe_planets_planet_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'planet_id',
                    'datasource',
                    'if_none_match',
                ],
                'required': [
                    'planet_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'planet_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'planet_id': 'planet_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'planet_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_races_endpoint = _Endpoint(
            settings={
                'response_type': ([GetUniverseRaces200Ok],),
                'auth': [],
                'endpoint_path': '/universe/races/',
                'operation_id': 'get_universe_races',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                },
                'location_map': {
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_regions_endpoint = _Endpoint(
            settings={
                'response_type': ([int],),
                'auth': [],
                'endpoint_path': '/universe/regions/',
                'operation_id': 'get_universe_regions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_regions_region_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseRegionsRegionIdOk,),
                'auth': [],
                'endpoint_path': '/universe/regions/{region_id}/',
                'operation_id': 'get_universe_regions_region_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region_id',
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                ],
                'required': [
                    'region_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'region_id':
                        (int,),
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'region_id': 'region_id',
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                },
                'location_map': {
                    'region_id': 'path',
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_stargates_stargate_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseStargatesStargateIdOk,),
                'auth': [],
                'endpoint_path': '/universe/stargates/{stargate_id}/',
                'operation_id': 'get_universe_stargates_stargate_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'stargate_id',
                    'datasource',
                    'if_none_match',
                ],
                'required': [
                    'stargate_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'stargate_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'stargate_id': 'stargate_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'stargate_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_stars_star_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseStarsStarIdOk,),
                'auth': [],
                'endpoint_path': '/universe/stars/{star_id}/',
                'operation_id': 'get_universe_stars_star_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'star_id',
                    'datasource',
                    'if_none_match',
                ],
                'required': [
                    'star_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'star_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'star_id': 'star_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'star_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_stations_station_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseStationsStationIdOk,),
                'auth': [],
                'endpoint_path': '/universe/stations/{station_id}/',
                'operation_id': 'get_universe_stations_station_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'station_id',
                    'datasource',
                    'if_none_match',
                ],
                'required': [
                    'station_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'station_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'station_id': 'station_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'station_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_structures_endpoint = _Endpoint(
            settings={
                'response_type': ([int],),
                'auth': [],
                'endpoint_path': '/universe/structures/',
                'operation_id': 'get_universe_structures',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'filter',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                    'filter',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('filter',): {

                        "MARKET": "market",
                        "MANUFACTURING_BASIC": "manufacturing_basic"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'filter':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'filter': 'filter',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'filter': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_structures_structure_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseStructuresStructureIdOk,),
                'auth': [
                    'evesso'
                ],
                'endpoint_path': '/universe/structures/{structure_id}/',
                'operation_id': 'get_universe_structures_structure_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'structure_id',
                    'datasource',
                    'if_none_match',
                    'token',
                ],
                'required': [
                    'structure_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'structure_id':
                        (int,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'token':
                        (str,),
                },
                'attribute_map': {
                    'structure_id': 'structure_id',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'token': 'token',
                },
                'location_map': {
                    'structure_id': 'path',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'token': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_system_jumps_endpoint = _Endpoint(
            settings={
                'response_type': ([GetUniverseSystemJumps200Ok],),
                'auth': [],
                'endpoint_path': '/universe/system_jumps/',
                'operation_id': 'get_universe_system_jumps',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_system_kills_endpoint = _Endpoint(
            settings={
                'response_type': ([GetUniverseSystemKills200Ok],),
                'auth': [],
                'endpoint_path': '/universe/system_kills/',
                'operation_id': 'get_universe_system_kills',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_systems_endpoint = _Endpoint(
            settings={
                'response_type': ([int],),
                'auth': [],
                'endpoint_path': '/universe/systems/',
                'operation_id': 'get_universe_systems',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_systems_system_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseSystemsSystemIdOk,),
                'auth': [],
                'endpoint_path': '/universe/systems/{system_id}/',
                'operation_id': 'get_universe_systems_system_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'system_id',
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                ],
                'required': [
                    'system_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'system_id':
                        (int,),
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'system_id': 'system_id',
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                },
                'location_map': {
                    'system_id': 'path',
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_types_endpoint = _Endpoint(
            settings={
                'response_type': ([int],),
                'auth': [],
                'endpoint_path': '/universe/types/',
                'operation_id': 'get_universe_types',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'datasource',
                    'if_none_match',
                    'page',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'page',
                ]
            },
            root_map={
                'validations': {
                    ('page',): {

                        'inclusive_minimum': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'page':
                        (int,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'page': 'page',
                },
                'location_map': {
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'page': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_universe_types_type_id_endpoint = _Endpoint(
            settings={
                'response_type': (GetUniverseTypesTypeIdOk,),
                'auth': [],
                'endpoint_path': '/universe/types/{type_id}/',
                'operation_id': 'get_universe_types_type_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'type_id',
                    'accept_language',
                    'datasource',
                    'if_none_match',
                    'language',
                ],
                'required': [
                    'type_id',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'type_id':
                        (int,),
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'if_none_match':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'type_id': 'type_id',
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'if_none_match': 'If-None-Match',
                    'language': 'language',
                },
                'location_map': {
                    'type_id': 'path',
                    'accept_language': 'header',
                    'datasource': 'query',
                    'if_none_match': 'header',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_universe_ids_endpoint = _Endpoint(
            settings={
                'response_type': (PostUniverseIdsOk,),
                'auth': [],
                'endpoint_path': '/universe/ids/',
                'operation_id': 'post_universe_ids',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'names',
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'required': [
                    'names',
                ],
                'nullable': [
                ],
                'enum': [
                    'accept_language',
                    'datasource',
                    'language',
                ],
                'validation': [
                    'names',
                ]
            },
            root_map={
                'validations': {
                    ('names',): {

                        'max_items': 500,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('accept_language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                    ('language',): {

                        "EN": "en",
                        "EN-US": "en-us",
                        "DE": "de",
                        "FR": "fr",
                        "JA": "ja",
                        "RU": "ru",
                        "ZH": "zh",
                        "KO": "ko",
                        "ES": "es"
                    },
                },
                'openapi_types': {
                    'names':
                        ([str],),
                    'accept_language':
                        (str,),
                    'datasource':
                        (str,),
                    'language':
                        (str,),
                },
                'attribute_map': {
                    'accept_language': 'Accept-Language',
                    'datasource': 'datasource',
                    'language': 'language',
                },
                'location_map': {
                    'names': 'body',
                    'accept_language': 'header',
                    'datasource': 'query',
                    'language': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )
        self.post_universe_names_endpoint = _Endpoint(
            settings={
                'response_type': ([PostUniverseNames200Ok],),
                'auth': [],
                'endpoint_path': '/universe/names/',
                'operation_id': 'post_universe_names',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'ids',
                    'datasource',
                ],
                'required': [
                    'ids',
                ],
                'nullable': [
                ],
                'enum': [
                    'datasource',
                ],
                'validation': [
                    'ids',
                ]
            },
            root_map={
                'validations': {
                    ('ids',): {

                        'max_items': 1000,
                        'min_items': 1,
                    },
                },
                'allowed_values': {
                    ('datasource',): {

                        "TRANQUILITY": "tranquility"
                    },
                },
                'openapi_types': {
                    'ids':
                        ([int],),
                    'datasource':
                        (str,),
                },
                'attribute_map': {
                    'datasource': 'datasource',
                },
                'location_map': {
                    'ids': 'body',
                    'datasource': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json'
                ]
            },
            api_client=api_client
        )

    def get_universe_ancestries(
        self,
        **kwargs
    ):
        """Get ancestries  # noqa: E501

        Get all character ancestries  --- Alternate route: `/legacy/universe/ancestries/`  Alternate route: `/v1/universe/ancestries/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_ancestries(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetUniverseAncestries200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_ancestries_endpoint.call_with_http_info(**kwargs)

    def get_universe_asteroid_belts_asteroid_belt_id(
        self,
        asteroid_belt_id,
        **kwargs
    ):
        """Get asteroid belt information  # noqa: E501

        Get information on an asteroid belt  --- Alternate route: `/legacy/universe/asteroid_belts/{asteroid_belt_id}/`  Alternate route: `/v1/universe/asteroid_belts/{asteroid_belt_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_asteroid_belts_asteroid_belt_id(asteroid_belt_id, async_req=True)
        >>> result = thread.get()

        Args:
            asteroid_belt_id (int): asteroid_belt_id integer

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseAsteroidBeltsAsteroidBeltIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['asteroid_belt_id'] = \
            asteroid_belt_id
        return self.get_universe_asteroid_belts_asteroid_belt_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_bloodlines(
        self,
        **kwargs
    ):
        """Get bloodlines  # noqa: E501

        Get a list of bloodlines  --- Alternate route: `/legacy/universe/bloodlines/`  Alternate route: `/v1/universe/bloodlines/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_bloodlines(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetUniverseBloodlines200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_bloodlines_endpoint.call_with_http_info(**kwargs)

    def get_universe_categories(
        self,
        **kwargs
    ):
        """Get item categories  # noqa: E501

        Get a list of item categories  --- Alternate route: `/legacy/universe/categories/`  Alternate route: `/v1/universe/categories/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_categories(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [int]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_categories_endpoint.call_with_http_info(**kwargs)

    def get_universe_categories_category_id(
        self,
        category_id,
        **kwargs
    ):
        """Get item category information  # noqa: E501

        Get information of an item category  --- Alternate route: `/legacy/universe/categories/{category_id}/`  Alternate route: `/v1/universe/categories/{category_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_categories_category_id(category_id, async_req=True)
        >>> result = thread.get()

        Args:
            category_id (int): An Eve item category ID

        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseCategoriesCategoryIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['category_id'] = \
            category_id
        return self.get_universe_categories_category_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_constellations(
        self,
        **kwargs
    ):
        """Get constellations  # noqa: E501

        Get a list of constellations  --- Alternate route: `/legacy/universe/constellations/`  Alternate route: `/v1/universe/constellations/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_constellations(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [int]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_constellations_endpoint.call_with_http_info(**kwargs)

    def get_universe_constellations_constellation_id(
        self,
        constellation_id,
        **kwargs
    ):
        """Get constellation information  # noqa: E501

        Get information on a constellation  --- Alternate route: `/legacy/universe/constellations/{constellation_id}/`  Alternate route: `/v1/universe/constellations/{constellation_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_constellations_constellation_id(constellation_id, async_req=True)
        >>> result = thread.get()

        Args:
            constellation_id (int): constellation_id integer

        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseConstellationsConstellationIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['constellation_id'] = \
            constellation_id
        return self.get_universe_constellations_constellation_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_factions(
        self,
        **kwargs
    ):
        """Get factions  # noqa: E501

        Get a list of factions  --- Alternate route: `/dev/universe/factions/`  Alternate route: `/v2/universe/factions/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_factions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetUniverseFactions200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_factions_endpoint.call_with_http_info(**kwargs)

    def get_universe_graphics(
        self,
        **kwargs
    ):
        """Get graphics  # noqa: E501

        Get a list of graphics  --- Alternate route: `/legacy/universe/graphics/`  Alternate route: `/v1/universe/graphics/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_graphics(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [int]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_graphics_endpoint.call_with_http_info(**kwargs)

    def get_universe_graphics_graphic_id(
        self,
        graphic_id,
        **kwargs
    ):
        """Get graphic information  # noqa: E501

        Get information on a graphic  --- Alternate route: `/dev/universe/graphics/{graphic_id}/`  Alternate route: `/legacy/universe/graphics/{graphic_id}/`  Alternate route: `/v1/universe/graphics/{graphic_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_graphics_graphic_id(graphic_id, async_req=True)
        >>> result = thread.get()

        Args:
            graphic_id (int): graphic_id integer

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseGraphicsGraphicIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['graphic_id'] = \
            graphic_id
        return self.get_universe_graphics_graphic_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_groups(
        self,
        **kwargs
    ):
        """Get item groups  # noqa: E501

        Get a list of item groups  --- Alternate route: `/legacy/universe/groups/`  Alternate route: `/v1/universe/groups/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_groups(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            page (int): Which page of results to return. [optional] if omitted the server will use the default value of 1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [int]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_groups_endpoint.call_with_http_info(**kwargs)

    def get_universe_groups_group_id(
        self,
        group_id,
        **kwargs
    ):
        """Get item group information  # noqa: E501

        Get information on an item group  --- Alternate route: `/dev/universe/groups/{group_id}/`  Alternate route: `/legacy/universe/groups/{group_id}/`  Alternate route: `/v1/universe/groups/{group_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_groups_group_id(group_id, async_req=True)
        >>> result = thread.get()

        Args:
            group_id (int): An Eve item group ID

        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseGroupsGroupIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['group_id'] = \
            group_id
        return self.get_universe_groups_group_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_moons_moon_id(
        self,
        moon_id,
        **kwargs
    ):
        """Get moon information  # noqa: E501

        Get information on a moon  --- Alternate route: `/legacy/universe/moons/{moon_id}/`  Alternate route: `/v1/universe/moons/{moon_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_moons_moon_id(moon_id, async_req=True)
        >>> result = thread.get()

        Args:
            moon_id (int): moon_id integer

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseMoonsMoonIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['moon_id'] = \
            moon_id
        return self.get_universe_moons_moon_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_planets_planet_id(
        self,
        planet_id,
        **kwargs
    ):
        """Get planet information  # noqa: E501

        Get information on a planet  --- Alternate route: `/legacy/universe/planets/{planet_id}/`  Alternate route: `/v1/universe/planets/{planet_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_planets_planet_id(planet_id, async_req=True)
        >>> result = thread.get()

        Args:
            planet_id (int): planet_id integer

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniversePlanetsPlanetIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['planet_id'] = \
            planet_id
        return self.get_universe_planets_planet_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_races(
        self,
        **kwargs
    ):
        """Get character races  # noqa: E501

        Get a list of character races  --- Alternate route: `/dev/universe/races/`  Alternate route: `/legacy/universe/races/`  Alternate route: `/v1/universe/races/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_races(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetUniverseRaces200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_races_endpoint.call_with_http_info(**kwargs)

    def get_universe_regions(
        self,
        **kwargs
    ):
        """Get regions  # noqa: E501

        Get a list of regions  --- Alternate route: `/legacy/universe/regions/`  Alternate route: `/v1/universe/regions/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_regions(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [int]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_regions_endpoint.call_with_http_info(**kwargs)

    def get_universe_regions_region_id(
        self,
        region_id,
        **kwargs
    ):
        """Get region information  # noqa: E501

        Get information on a region  --- Alternate route: `/legacy/universe/regions/{region_id}/`  Alternate route: `/v1/universe/regions/{region_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_regions_region_id(region_id, async_req=True)
        >>> result = thread.get()

        Args:
            region_id (int): region_id integer

        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseRegionsRegionIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['region_id'] = \
            region_id
        return self.get_universe_regions_region_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_stargates_stargate_id(
        self,
        stargate_id,
        **kwargs
    ):
        """Get stargate information  # noqa: E501

        Get information on a stargate  --- Alternate route: `/legacy/universe/stargates/{stargate_id}/`  Alternate route: `/v1/universe/stargates/{stargate_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_stargates_stargate_id(stargate_id, async_req=True)
        >>> result = thread.get()

        Args:
            stargate_id (int): stargate_id integer

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseStargatesStargateIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['stargate_id'] = \
            stargate_id
        return self.get_universe_stargates_stargate_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_stars_star_id(
        self,
        star_id,
        **kwargs
    ):
        """Get star information  # noqa: E501

        Get information on a star  --- Alternate route: `/legacy/universe/stars/{star_id}/`  Alternate route: `/v1/universe/stars/{star_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_stars_star_id(star_id, async_req=True)
        >>> result = thread.get()

        Args:
            star_id (int): star_id integer

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseStarsStarIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['star_id'] = \
            star_id
        return self.get_universe_stars_star_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_stations_station_id(
        self,
        station_id,
        **kwargs
    ):
        """Get station information  # noqa: E501

        Get information on a station  --- Alternate route: `/dev/universe/stations/{station_id}/`  Alternate route: `/v2/universe/stations/{station_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_stations_station_id(station_id, async_req=True)
        >>> result = thread.get()

        Args:
            station_id (int): station_id integer

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseStationsStationIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['station_id'] = \
            station_id
        return self.get_universe_stations_station_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_structures(
        self,
        **kwargs
    ):
        """List all public structures  # noqa: E501

        List all public structures  --- Alternate route: `/dev/universe/structures/`  Alternate route: `/legacy/universe/structures/`  Alternate route: `/v1/universe/structures/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_structures(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            filter (str): Only list public structures that have this service online. [optional]
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [int]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_structures_endpoint.call_with_http_info(**kwargs)

    def get_universe_structures_structure_id(
        self,
        structure_id,
        **kwargs
    ):
        """Get structure information  # noqa: E501

        Returns information on requested structure if you are on the ACL. Otherwise, returns \"Forbidden\" for all inputs.  --- Alternate route: `/v2/universe/structures/{structure_id}/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_structures_structure_id(structure_id, async_req=True)
        >>> result = thread.get()

        Args:
            structure_id (int): An Eve structure ID

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            token (str): Access token to use if unable to set a header. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseStructuresStructureIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['structure_id'] = \
            structure_id
        return self.get_universe_structures_structure_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_system_jumps(
        self,
        **kwargs
    ):
        """Get system jumps  # noqa: E501

        Get the number of jumps in solar systems within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with jumps will be listed  --- Alternate route: `/legacy/universe/system_jumps/`  Alternate route: `/v1/universe/system_jumps/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_system_jumps(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetUniverseSystemJumps200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_system_jumps_endpoint.call_with_http_info(**kwargs)

    def get_universe_system_kills(
        self,
        **kwargs
    ):
        """Get system kills  # noqa: E501

        Get the number of ship, pod and NPC kills per solar system within the last hour ending at the timestamp of the Last-Modified header, excluding wormhole space. Only systems with kills will be listed  --- Alternate route: `/v2/universe/system_kills/`  --- This route is cached for up to 3600 seconds  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_system_kills(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [GetUniverseSystemKills200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_system_kills_endpoint.call_with_http_info(**kwargs)

    def get_universe_systems(
        self,
        **kwargs
    ):
        """Get solar systems  # noqa: E501

        Get a list of solar systems  --- Alternate route: `/dev/universe/systems/`  Alternate route: `/legacy/universe/systems/`  Alternate route: `/v1/universe/systems/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_systems(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [int]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_systems_endpoint.call_with_http_info(**kwargs)

    def get_universe_systems_system_id(
        self,
        system_id,
        **kwargs
    ):
        """Get solar system information  # noqa: E501

        Get information on a solar system.  --- Alternate route: `/dev/universe/systems/{system_id}/`  Alternate route: `/v4/universe/systems/{system_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_systems_system_id(system_id, async_req=True)
        >>> result = thread.get()

        Args:
            system_id (int): system_id integer

        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseSystemsSystemIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['system_id'] = \
            system_id
        return self.get_universe_systems_system_id_endpoint.call_with_http_info(**kwargs)

    def get_universe_types(
        self,
        **kwargs
    ):
        """Get types  # noqa: E501

        Get a list of type ids  --- Alternate route: `/legacy/universe/types/`  Alternate route: `/v1/universe/types/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_types(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            page (int): Which page of results to return. [optional] if omitted the server will use the default value of 1
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [int]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        return self.get_universe_types_endpoint.call_with_http_info(**kwargs)

    def get_universe_types_type_id(
        self,
        type_id,
        **kwargs
    ):
        """Get type information  # noqa: E501

        Get information on a type  --- Alternate route: `/dev/universe/types/{type_id}/`  Alternate route: `/v3/universe/types/{type_id}/`  --- This route expires daily at 11:05  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_universe_types_type_id(type_id, async_req=True)
        >>> result = thread.get()

        Args:
            type_id (int): An Eve item type ID

        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            if_none_match (str): ETag from a previous request. A 304 will be returned if this matches the current ETag. [optional]
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            GetUniverseTypesTypeIdOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['type_id'] = \
            type_id
        return self.get_universe_types_type_id_endpoint.call_with_http_info(**kwargs)

    def post_universe_ids(
        self,
        names,
        **kwargs
    ):
        """Bulk names to IDs  # noqa: E501

        Resolve a set of names to IDs in the following categories: agents, alliances, characters, constellations, corporations factions, inventory_types, regions, stations, and systems. Only exact matches will be returned. All names searched for are cached for 12 hours  --- Alternate route: `/dev/universe/ids/`  Alternate route: `/legacy/universe/ids/`  Alternate route: `/v1/universe/ids/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_universe_ids(names, async_req=True)
        >>> result = thread.get()

        Args:
            names ([str]): The names to resolve

        Keyword Args:
            accept_language (str): Language to use in the response. [optional] if omitted the server will use the default value of "en"
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            language (str): Language to use in the response, takes precedence over Accept-Language. [optional] if omitted the server will use the default value of "en"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            PostUniverseIdsOk
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['names'] = \
            names
        return self.post_universe_ids_endpoint.call_with_http_info(**kwargs)

    def post_universe_names(
        self,
        ids,
        **kwargs
    ):
        """Get names and categories for a set of IDs  # noqa: E501

        Resolve a set of IDs to names and categories. Supported ID's for resolving are: Characters, Corporations, Alliances, Stations, Solar Systems, Constellations, Regions, Types, Factions  --- Alternate route: `/dev/universe/names/`  Alternate route: `/v3/universe/names/`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_universe_names(ids, async_req=True)
        >>> result = thread.get()

        Args:
            ids ([int]): The ids to resolve

        Keyword Args:
            datasource (str): The server name you would like data from. [optional] if omitted the server will use the default value of "tranquility"
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            _request_auths (list): set to override the auth_settings for an a single
                request; this effectively ignores the authentication
                in the spec for a single request.
                Default is None
            async_req (bool): execute request asynchronously

        Returns:
            [PostUniverseNames200Ok]
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['_request_auths'] = kwargs.get('_request_auths', None)
        kwargs['ids'] = \
            ids
        return self.post_universe_names_endpoint.call_with_http_info(**kwargs)

