"""
    EVE Swagger Interface

    An OpenAPI for EVE Online  # noqa: E501

    The version of the OpenAPI document: 1.28
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from esi_client.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from esi_client.exceptions import ApiAttributeError



class GetCorporationsCorporationIdIndustryJobs200Ok(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
        ('status',): {
            'ACTIVE': "active",
            'CANCELLED': "cancelled",
            'DELIVERED': "delivered",
            'PAUSED': "paused",
            'READY': "ready",
            'REVERTED': "reverted",
        },
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        return {
            'activity_id': (int,),  # noqa: E501
            'blueprint_id': (int,),  # noqa: E501
            'blueprint_location_id': (int,),  # noqa: E501
            'blueprint_type_id': (int,),  # noqa: E501
            'duration': (int,),  # noqa: E501
            'end_date': (datetime,),  # noqa: E501
            'facility_id': (int,),  # noqa: E501
            'installer_id': (int,),  # noqa: E501
            'job_id': (int,),  # noqa: E501
            'location_id': (int,),  # noqa: E501
            'output_location_id': (int,),  # noqa: E501
            'runs': (int,),  # noqa: E501
            'start_date': (datetime,),  # noqa: E501
            'status': (str,),  # noqa: E501
            'completed_character_id': (int,),  # noqa: E501
            'completed_date': (datetime,),  # noqa: E501
            'cost': (float,),  # noqa: E501
            'licensed_runs': (int,),  # noqa: E501
            'pause_date': (datetime,),  # noqa: E501
            'probability': (float,),  # noqa: E501
            'product_type_id': (int,),  # noqa: E501
            'successful_runs': (int,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'activity_id': 'activity_id',  # noqa: E501
        'blueprint_id': 'blueprint_id',  # noqa: E501
        'blueprint_location_id': 'blueprint_location_id',  # noqa: E501
        'blueprint_type_id': 'blueprint_type_id',  # noqa: E501
        'duration': 'duration',  # noqa: E501
        'end_date': 'end_date',  # noqa: E501
        'facility_id': 'facility_id',  # noqa: E501
        'installer_id': 'installer_id',  # noqa: E501
        'job_id': 'job_id',  # noqa: E501
        'location_id': 'location_id',  # noqa: E501
        'output_location_id': 'output_location_id',  # noqa: E501
        'runs': 'runs',  # noqa: E501
        'start_date': 'start_date',  # noqa: E501
        'status': 'status',  # noqa: E501
        'completed_character_id': 'completed_character_id',  # noqa: E501
        'completed_date': 'completed_date',  # noqa: E501
        'cost': 'cost',  # noqa: E501
        'licensed_runs': 'licensed_runs',  # noqa: E501
        'pause_date': 'pause_date',  # noqa: E501
        'probability': 'probability',  # noqa: E501
        'product_type_id': 'product_type_id',  # noqa: E501
        'successful_runs': 'successful_runs',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, activity_id, blueprint_id, blueprint_location_id, blueprint_type_id, duration, end_date, facility_id, installer_id, job_id, location_id, output_location_id, runs, start_date, status, *args, **kwargs):  # noqa: E501
        """GetCorporationsCorporationIdIndustryJobs200Ok - a model defined in OpenAPI

        Args:
            activity_id (int): Job activity ID
            blueprint_id (int): blueprint_id integer
            blueprint_location_id (int): Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
            blueprint_type_id (int): blueprint_type_id integer
            duration (int): Job duration in seconds
            end_date (datetime): Date and time when this job finished
            facility_id (int): ID of the facility where this job is running
            installer_id (int): ID of the character which installed this job
            job_id (int): Unique job ID
            location_id (int): ID of the location for the industry facility
            output_location_id (int): Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
            runs (int): Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
            start_date (datetime): Date and time when this job started
            status (str): status string

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            completed_character_id (int): ID of the character which completed this job. [optional]  # noqa: E501
            completed_date (datetime): Date and time when this job was completed. [optional]  # noqa: E501
            cost (float): The sume of job installation fee and industry facility tax. [optional]  # noqa: E501
            licensed_runs (int): Number of runs blueprint is licensed for. [optional]  # noqa: E501
            pause_date (datetime): Date and time when this job was paused (i.e. time when the facility where this job was installed went offline). [optional]  # noqa: E501
            probability (float): Chance of success for invention. [optional]  # noqa: E501
            product_type_id (int): Type ID of product (manufactured, copied or invented). [optional]  # noqa: E501
            successful_runs (int): Number of successful runs for this job. Equal to runs unless this is an invention job. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', True)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.activity_id = activity_id
        self.blueprint_id = blueprint_id
        self.blueprint_location_id = blueprint_location_id
        self.blueprint_type_id = blueprint_type_id
        self.duration = duration
        self.end_date = end_date
        self.facility_id = facility_id
        self.installer_id = installer_id
        self.job_id = job_id
        self.location_id = location_id
        self.output_location_id = output_location_id
        self.runs = runs
        self.start_date = start_date
        self.status = status
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, activity_id, blueprint_id, blueprint_location_id, blueprint_type_id, duration, end_date, facility_id, installer_id, job_id, location_id, output_location_id, runs, start_date, status, *args, **kwargs):  # noqa: E501
        """GetCorporationsCorporationIdIndustryJobs200Ok - a model defined in OpenAPI

        Args:
            activity_id (int): Job activity ID
            blueprint_id (int): blueprint_id integer
            blueprint_location_id (int): Location ID of the location from which the blueprint was installed. Normally a station ID, but can also be an asset (e.g. container) or corporation facility
            blueprint_type_id (int): blueprint_type_id integer
            duration (int): Job duration in seconds
            end_date (datetime): Date and time when this job finished
            facility_id (int): ID of the facility where this job is running
            installer_id (int): ID of the character which installed this job
            job_id (int): Unique job ID
            location_id (int): ID of the location for the industry facility
            output_location_id (int): Location ID of the location to which the output of the job will be delivered. Normally a station ID, but can also be a corporation facility
            runs (int): Number of runs for a manufacturing job, or number of copies to make for a blueprint copy
            start_date (datetime): Date and time when this job started
            status (str): status string

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            completed_character_id (int): ID of the character which completed this job. [optional]  # noqa: E501
            completed_date (datetime): Date and time when this job was completed. [optional]  # noqa: E501
            cost (float): The sume of job installation fee and industry facility tax. [optional]  # noqa: E501
            licensed_runs (int): Number of runs blueprint is licensed for. [optional]  # noqa: E501
            pause_date (datetime): Date and time when this job was paused (i.e. time when the facility where this job was installed went offline). [optional]  # noqa: E501
            probability (float): Chance of success for invention. [optional]  # noqa: E501
            product_type_id (int): Type ID of product (manufactured, copied or invented). [optional]  # noqa: E501
            successful_runs (int): Number of successful runs for this job. Equal to runs unless this is an invention job. [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            for arg in args:
                if isinstance(arg, dict):
                    kwargs.update(arg)
                else:
                    raise ApiTypeError(
                        "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                            args,
                            self.__class__.__name__,
                        ),
                        path_to_item=_path_to_item,
                        valid_classes=(self.__class__,),
                    )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        self.activity_id = activity_id
        self.blueprint_id = blueprint_id
        self.blueprint_location_id = blueprint_location_id
        self.blueprint_type_id = blueprint_type_id
        self.duration = duration
        self.end_date = end_date
        self.facility_id = facility_id
        self.installer_id = installer_id
        self.job_id = job_id
        self.location_id = location_id
        self.output_location_id = output_location_id
        self.runs = runs
        self.start_date = start_date
        self.status = status
        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
