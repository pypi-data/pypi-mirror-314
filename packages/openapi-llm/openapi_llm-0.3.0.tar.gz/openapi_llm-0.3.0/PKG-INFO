Metadata-Version: 2.3
Name: openapi-llm
Version: 0.3.0
Summary: Convert and invoke OpenAPI specifications as LLM tool/function definitions
Project-URL: Homepage, https://github.com/vblagoje/openapi-llm
Project-URL: Bug Tracker, https://github.com/vblagoje/openapi-llm/issues
Project-URL: Source Code, https://github.com/vblagoje/openapi-llm
Author-email: Vladimir Blagojevic <dovlex@gmail.com>
License: Apache-2.0
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Requires-Dist: jsonref
Requires-Dist: pyyaml
Requires-Dist: requests
Description-Content-Type: text/markdown

# OpenAPI-LLM

A Python library that converts OpenAPI specifications into LLM tool/function definitions, enabling OpenAPI invocations through Large Language Models generated tool calls.

## Features

- Convert OpenAPI specifications into LLM-compatible tool/function definitions
- Support for multiple LLM providers (OpenAI, Anthropic, Cohere)
- Handle complex request bodies and parameter types
- Flexible authentication mechanisms

## Installation

```bash
pip install openapi-llm
```

### LLM Provider Dependencies

This library focuses on OpenAPI-to-LLM conversion and doesn't include LLM provider libraries by default. Install the ones you need:

```bash
# For OpenAI
pip install openai

# For Anthropic
pip install anthropic

# For Cohere
pip install cohere
```

## Library Scope

OpenAPI-LLM provides core functionality for converting OpenAPI specifications into LLM-compatible tool/function definitions. It intentionally does not provide an opinionated, high-level interface for OpenAPI-LLM interactions. Users are encouraged to develop their own thin application layer above this library that suits their specific needs and preferences for OpenAPI-LLM integration.

## Quick Start

Here's a practical example using OpenAI to perform a Google search via SerperDev API:

```python
import os
from openai import OpenAI

from openapi_llm.client.config import ClientConfig
from openapi_llm.client.openapi import OpenAPIClient
from openapi_llm.core.spec import OpenAPISpecification


# Configure the OpenAPI client with SerperDev API spec and credentials
config = ClientConfig(
    openapi_spec=OpenAPISpecification.from_url("https://bit.ly/serperdev_openapi"), 
    credentials=os.getenv("SERPERDEV_API_KEY")
)

# Initialize OpenAI client
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Create a chat completion with tool definitions
response = client.chat.completions.create(
    model="gpt-4o",
    messages=[{"role": "user", "content": "Do a serperdev google search: Who was Nikola Tesla?"}],
    tools=config.get_tool_definitions(),
)

# Execute the API call based on the LLM's response
service_api = OpenAPIClient(config)
service_response = service_api.invoke(response)
```

This example demonstrates:
- Loading an OpenAPI specification from a URL
- Integrating with OpenAI's function calling
- Handling API authentication
- Converting and executing OpenAPI calls based on LLM responses

## Requirements

- Python >= 3.8
- Dependencies:
  - pydantic
  - jsonref
  - requests
  - PyYAML

## Development Setup

1. Clone the repository

```bash
git clone https://github.com/vblagoje/openapi-llm.git
```

2. Install hatch if you haven't already

```bash
pip install hatch
```

3. Install pre-commit hooks

```bash
pre-commit install
```

4. Install desired LLM provider dependencies (as needed)

```bash
pip install openai anthropic cohere
```

## Testing

Run tests using hatch:

```bash
# Unit tests
hatch run test:unit

# Integration tests
hatch run test:integration

# Type checking
hatch run test:typing

# Linting
hatch run test:lint
```

## License

MIT License - See [LICENSE](LICENSE) for details.

## Security

For security concerns, please see our [Security Policy](SECURITY.md).

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

## Author
Vladimir Blagojevic (dovlex@gmail.com)

Reviews and guidance by Madeesh Kannan