# This file was generated by Nuitka

# Stubs included by default
from typing_extensions import Self
from remdex.host import ClientResult, ConnClient, ConnServer, Socket, connect_to
from pprint import pprint
import os
from typing import List, Tuple
from threading import Event
from queue import Queue
import sys

__auto_server_addr__: str
class DexError:def add_gradient_weighted(grad1: typing.Any, grad2: typing.Any, w2: typing.Any) -> typing.Any:
    ...
def divide_gradients(gradients: typing.Any, divider: typing.Any) -> typing.Any:
    ...
def multiply_gradients(gradients: typing.Any, factor: typing.Any) -> typing.Any:
    ...
class Metric:
    def __init__(self: Self, name: str, value: typing.Any, weight: float) -> None: ...
class Params:
    def __init__(self: Self, params: typing.Any, weight: float) -> None: ...
class Gradients:
    def __init__(self: Self, gradients: typing.Any, weight: float) -> None: ...
class Model:
    def __init__(self: Self, model: typing.Any, name: str) -> None: ...
class FedAvgClient:
    def __setup_add__(self: Self) -> typing.Any: ...
    def __train__(self: Self) -> typing.Any: ...
    def __get_params__(self: Self) -> typing.Any: ...
    def __batch_train__(self: Self) -> typing.Any: ...
    def __batch_train_start__(self: Self) -> typing.Any: ...
    def __finish__(self: Self) -> typing.Any: ...
    def __setup_user_methods__(self: Self) -> typing.Any: ...
    def __init__(self: Self) -> None: ...
    def get_params(self: Self) -> List[Params]: ...
    def update_params(self: Self, parameters: List[list]) -> typing.Any: ...
    def train(self: Self) -> typing.Any: ...
    def batch_generator(self: Self) -> typing.Any: ...
    def batch_train(self: Self, batch: typing.Any) -> typing.Any: ...
    def save(self: Self) -> typing.Any: ...
    def evaluate(self: Self) -> List[Metric]: ...
    def return_models(self: Self) -> List[Model]: ...
    def start(self: Self, server_address: str) -> typing.Any: ...
class FedSgdClient:
    def __setup_add__(self: Self) -> typing.Any: ...
    def __get_latest_gradients__(self: Self) -> typing.Any: ...
    def __train__(self: Self) -> typing.Any: ...
    def __batch_train_start__(self: Self) -> typing.Any: ...
    def __batch_train__(self: Self) -> typing.Any: ...
    def __finish__(self: Self) -> typing.Any: ...
    def __setup_user_methods__(self: Self) -> typing.Any: ...
    def __init__(self: Self) -> None: ...
    def train(self: Self) -> List[Gradients]: ...
    def init_parameters(self: Self, parameters: List[list]) -> typing.Any: ...
    def optimize(self: Self, gradients: List[list]) -> typing.Any: ...
    def batch_generator(self: Self) -> typing.Any: ...
    def batch_train(self: Self, batch: typing.Any) -> List[Gradients]: ...
    def return_models(self: Self) -> List[Model]: ...
    def evaluate(self: Self) -> List[Metric]: ...
    def start(self: Self, server_address: str) -> typing.Any: ...
    def init_parameters(client: ConnClient, parameters: List[list]) -> typing.Any: ...
def save_model(model: Model) -> typing.Any:
    ...
    def return_models(clients: List[ConnClient]) -> typing.Any: ...
def finish_clients(clients: List[ConnClient]) -> typing.Any:
    ...
def get_summed_gradients(clients: List[ConnClient]) -> typing.Any:
    ...
def sgd_optimize(grads: List[list], clients: List[ConnClient]) -> typing.Any:
    ...
def sgd_step_update(clients: List[ConnClient]) -> typing.Any:
    ...
def sgd_step(clients: List[ConnClient]) -> typing.Any:
    ...
def batch_sgd_step(clients: List[ConnClient], epoch: int, epochs: int) -> typing.Any:
    ...
def retrieve_models(clients: List[ConnClient]) -> typing.Any:
    ...
def train_sgd(clients: List[ConnClient], epochs: int, batched: bool, parameters: List[list]) -> typing.Any:
    ...
def get_summed_params(clients: List[ConnClient]) -> typing.Any:
    ...
def avg_update_params(params: typing.Any, clients: List[ConnClient]) -> typing.Any:
    ...
def avg_step_update(clients: List[ConnClient]) -> typing.Any:
    ...
def avg_step(clients: List[ConnClient]) -> typing.Any:
    ...
def batch_avg_step(clients: List[ConnClient], epoch: int, epochs: int) -> typing.Any:
    ...
def compute_eval(evals: List[Metric]) -> typing.Any:
    ...
def get_eval(clients: List[ConnClient]) -> typing.Any:
    ...
def train_avg(clients: List[ConnClient], epochs: int, batched: bool, parameters: List[list]) -> typing.Any:
    ...
class FedAvgServer:
    def __init__(self: Self, address: str, epochs: int, num_clients: int, batched: typing.Any, init_params: List[list]) -> None: ...
    def start(self: Self) -> typing.Any: ...
class FedSgdServer:
    def __init__(self: Self, address: str, epochs: int, num_clients: int, batched: typing.Any, init_params: List[List]) -> None: ...
    def start(self: Self) -> typing.Any: ...

__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import typing
import remdex
import remdex.host
import threading
import queue
import pprint
import sys
import os
import torch