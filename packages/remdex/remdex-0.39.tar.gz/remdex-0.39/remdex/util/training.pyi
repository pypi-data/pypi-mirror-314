# This file was generated by Nuitka

# Stubs included by default
from typing_extensions import Self
from remdex.host import ClientResult, ConnClient, ConnServer, Socket, connect_to
from typing import List
from pprint import pprint
from remdex.util.avg_ops import avg_step, batch_avg_step
from threading import Event
from queue import Queue
from remdex.util.artifacts import DexError, Gradients, Metric, Model, Params
from remdex.util.sgd_ops import batch_sgd_step, sgd_step
from remdex.util.general import finish_clients, get_eval, init_parameters

class FedAvgClient:
    def __setup_add__(self: Self) -> typing.Any: ...
    def __train__(self: Self) -> typing.Any: ...
    def __get_params__(self: Self) -> typing.Any: ...
    def __batch_train__(self: Self) -> typing.Any: ...
    def __batch_train_start__(self: Self) -> typing.Any: ...
    def __finish__(self: Self) -> typing.Any: ...
    def __setup_user_methods__(self: Self) -> typing.Any: ...
    def __init__(self: Self) -> None: ...
    def get_params(self: Self) -> List[Params]: ...
    def update_params(self: Self, parameters: List[list]) -> typing.Any: ...
    def train(self: Self) -> typing.Any: ...
    def batch_generator(self: Self) -> typing.Any: ...
    def batch_train(self: Self, batch: typing.Any) -> typing.Any: ...
    def save(self: Self) -> typing.Any: ...
    def evaluate(self: Self) -> List[Metric]: ...
    def return_models(self: Self) -> List[Model]: ...
    def start(self: Self, server_address: str) -> typing.Any: ...
class FedSgdClient:
    def __setup_add__(self: Self) -> typing.Any: ...
    def __get_latest_gradients__(self: Self) -> typing.Any: ...
    def __train__(self: Self) -> typing.Any: ...
    def __batch_train_start__(self: Self) -> typing.Any: ...
    def __batch_train__(self: Self) -> typing.Any: ...
    def __finish__(self: Self) -> typing.Any: ...
    def __setup_user_methods__(self: Self) -> typing.Any: ...
    def __init__(self: Self) -> None: ...
    def train(self: Self) -> List[Gradients]: ...
    def init_parameters(self: Self, parameters: List[list]) -> typing.Any: ...
    def optimize(self: Self, gradients: List[list]) -> typing.Any: ...
    def batch_generator(self: Self) -> typing.Any: ...
    def batch_train(self: Self, batch: typing.Any) -> List[Gradients]: ...
    def return_models(self: Self) -> List[Model]: ...
    def evaluate(self: Self) -> List[Metric]: ...
    def start(self: Self, server_address: str) -> typing.Any: ...
def retrieve_models(clients: List[ConnClient]) -> typing.Any:
    ...
def train_avg(clients: List[ConnClient], epochs: int, batched: bool, parameters: List[list]) -> typing.Any:
    ...
def train_sgd(clients: List[ConnClient], epochs: int, batched: bool, parameters: List[list]) -> typing.Any:
    ...
class FedAvgServer:
    def __init__(self: Self, address: str, epochs: int, num_clients: int, batched: typing.Any, init_params: List[list]) -> None: ...
    def start(self: Self) -> typing.Any: ...
class FedSgdServer:
    def __init__(self: Self, address: str, epochs: int, num_clients: int, batched: typing.Any, init_params: List[List]) -> None: ...
    def start(self: Self) -> typing.Any: ...

__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import typing
import threading
import queue
import remdex
import remdex.host
import remdex.util
import remdex.util.artifacts
import remdex.util.general
import remdex.util.avg_ops
import remdex.util.sgd_ops
import pprint