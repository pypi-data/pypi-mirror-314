# This file was generated by Nuitka

# Stubs included by default
from typing_extensions import Self
import cloudpickle
from threading import Thread
import socket
from concurrent.futures import ThreadPoolExecutor
from remdex.connect import Message, ReceiverSide, SenderSide, SentMessage

class Socket:
    def __init__(self: Self, address: str, port: int) -> None: ...
    def get_incoming(self: Self) -> typing.Any: ...
def connect_to(address: str, port: int) -> typing.Any:
    ...
class ConnServer:
    def __setup_add__(self: Self) -> typing.Any: ...
    def _process_single(self: Self, message: Message) -> typing.Any: ...
    def _processing(self: Self) -> typing.Any: ...
    def __init__(self: Self, sock: socket.socket) -> None: ...
    def add(self: Self, name: str) -> typing.Any: ...
class ClientResult:
    def __init__(self: Self, sent_message: SentMessage) -> None: ...
    def get(self: Self) -> typing.Any: ...
class ClientFn:
    def __init__(self: Self, name: str, sender: SenderSide) -> None: ...
    def run(self: Self) -> typing.Any: ...
class ConnClient:
    def __init__(self: Self, sock: socket.socket, index: typing.Any) -> None: ...
    def call(self: Self, name: str) -> typing.Any: ...

__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import remdex
import remdex.connect
import socket
import concurrent
import concurrent.futures
import concurrent.futures.ThreadPoolExecutor
import threading
import cloudpickle