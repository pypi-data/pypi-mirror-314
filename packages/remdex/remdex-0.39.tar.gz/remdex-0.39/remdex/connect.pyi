# This file was generated by Nuitka

# Stubs included by default
from threading import Event, Lock, Thread
from typing import Dict, List
from typing_extensions import Self
import socket
import random

def random_id() -> bytes:
    ...
def recv_size(sock: socket.socket, size: int) -> typing.Any:
    ...
def recv_data_seg(sock: socket.socket) -> typing.Any:
    ...
def breakdown_id(data: bytes) -> typing.Any:
    ...
class Message:
    def __init__(self: Self, data: bytes, reply_fn: callable) -> None: ...
    def reply(self: Self, data: bytes) -> typing.Any: ...
class ReceiverSide:
    def __setup_add__(self: Self) -> typing.Any: ...
    def _replying(self: Self) -> typing.Any: ...
    def __init__(self: Self, sock: socket.socket) -> None: ...
    def _data_processing(self: Self, data: bytes) -> typing.Any: ...
    def _reply(self: Self, data_id: bytes, data: bytes) -> typing.Any: ...
    def recv(self: Self) -> typing.Any: ...
class SentMessage:
    def __init__(self: Self, data_id: bytes, get_fn: typing.Any) -> None: ...
    def get(self: Self) -> bytes: ...
class SenderSide:
    def __setup_add__(self: Self) -> typing.Any: ...
    def _sending(self: Self) -> typing.Any: ...
    def _recv_once(self: Self) -> typing.Any: ...
    def _get_reply(self: Self, data_id: bytes) -> typing.Any: ...
    def __init__(self: Self, sock: socket.socket, index: typing.Any) -> None: ...
    def _data_processing(self: Self, data: bytes) -> typing.Any: ...
    def send(self: Self, data: bytes) -> typing.Any: ...

__name__ = ...



# Modules used internally, to allow implicit dependencies to be seen:
import socket
import threading
import random
import typing