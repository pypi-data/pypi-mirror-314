# coding: utf-8

"""
    Opisanie API Analitika

    Servis predostavlaet publihnyi API dla poluhenia analitiheskih dannyh. S pomohu etih metodov vy mohete poluhat analitiheskie othety. [hast metodov](./#tag/Voronka-prodazh-(Dzhem)/) dostupna tolko s [podpiskoi na rashirennuu analitiku Dhem](https://seller.wildberries.ru/dynamic-product-categories/jam).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GroupedByObjectsBrandsAndTagsReqParams(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject_i_ds': 'list[int]',
        'brand_names': 'list[str]',
        'tag_i_ds': 'list[int]',
        'start_date': 'date',
        'end_date': 'date',
        'timezone': 'str',
        'aggregation_level': 'str',
        'skip_deleted_nm': 'bool'
    }

    attribute_map = {
        'subject_i_ds': 'subjectIDs',
        'brand_names': 'brandNames',
        'tag_i_ds': 'tagIDs',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'timezone': 'timezone',
        'aggregation_level': 'aggregationLevel',
        'skip_deleted_nm': 'skipDeletedNm'
    }

    def __init__(self, subject_i_ds=None, brand_names=None, tag_i_ds=None, start_date=None, end_date=None, timezone=None, aggregation_level=None, skip_deleted_nm=None):  # noqa: E501
        """GroupedByObjectsBrandsAndTagsReqParams - a model defined in Swagger"""  # noqa: E501
        self._subject_i_ds = None
        self._brand_names = None
        self._tag_i_ds = None
        self._start_date = None
        self._end_date = None
        self._timezone = None
        self._aggregation_level = None
        self._skip_deleted_nm = None
        self.discriminator = None
        if subject_i_ds is not None:
            self.subject_i_ds = subject_i_ds
        if brand_names is not None:
            self.brand_names = brand_names
        if tag_i_ds is not None:
            self.tag_i_ds = tag_i_ds
        self.start_date = start_date
        self.end_date = end_date
        if timezone is not None:
            self.timezone = timezone
        if aggregation_level is not None:
            self.aggregation_level = aggregation_level
        if skip_deleted_nm is not None:
            self.skip_deleted_nm = skip_deleted_nm

    @property
    def subject_i_ds(self):
        """Gets the subject_i_ds of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501

        Identifikatory predmetov  # noqa: E501

        :return: The subject_i_ds of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._subject_i_ds

    @subject_i_ds.setter
    def subject_i_ds(self, subject_i_ds):
        """Sets the subject_i_ds of this GroupedByObjectsBrandsAndTagsReqParams.

        Identifikatory predmetov  # noqa: E501

        :param subject_i_ds: The subject_i_ds of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :type: list[int]
        """

        self._subject_i_ds = subject_i_ds

    @property
    def brand_names(self):
        """Gets the brand_names of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501

        Brendy  # noqa: E501

        :return: The brand_names of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :rtype: list[str]
        """
        return self._brand_names

    @brand_names.setter
    def brand_names(self, brand_names):
        """Sets the brand_names of this GroupedByObjectsBrandsAndTagsReqParams.

        Brendy  # noqa: E501

        :param brand_names: The brand_names of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :type: list[str]
        """

        self._brand_names = brand_names

    @property
    def tag_i_ds(self):
        """Gets the tag_i_ds of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501

        Identifikatory tegov  # noqa: E501

        :return: The tag_i_ds of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :rtype: list[int]
        """
        return self._tag_i_ds

    @tag_i_ds.setter
    def tag_i_ds(self, tag_i_ds):
        """Sets the tag_i_ds of this GroupedByObjectsBrandsAndTagsReqParams.

        Identifikatory tegov  # noqa: E501

        :param tag_i_ds: The tag_i_ds of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :type: list[int]
        """

        self._tag_i_ds = tag_i_ds

    @property
    def start_date(self):
        """Gets the start_date of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501

        Nahalo perioda  # noqa: E501

        :return: The start_date of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GroupedByObjectsBrandsAndTagsReqParams.

        Nahalo perioda  # noqa: E501

        :param start_date: The start_date of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :type: date
        """
        if start_date is None:
            raise ValueError("Invalid value for `start_date`, must not be `None`")  # noqa: E501

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501

        Konec perioda  # noqa: E501

        :return: The end_date of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GroupedByObjectsBrandsAndTagsReqParams.

        Konec perioda  # noqa: E501

        :param end_date: The end_date of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :type: date
        """
        if end_date is None:
            raise ValueError("Invalid value for `end_date`, must not be `None`")  # noqa: E501

        self._end_date = end_date

    @property
    def timezone(self):
        """Gets the timezone of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501

        Vremennaa zona, po umolhaniu Europe/Moscow   # noqa: E501

        :return: The timezone of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this GroupedByObjectsBrandsAndTagsReqParams.

        Vremennaa zona, po umolhaniu Europe/Moscow   # noqa: E501

        :param timezone: The timezone of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :type: str
        """

        self._timezone = timezone

    @property
    def aggregation_level(self):
        """Gets the aggregation_level of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501

        Kak sgruppirovat dannye (po umolhaniu po dnam):    * `day` — po dnam   * `week` — po nedelam   * `month` — po mesacam   # noqa: E501

        :return: The aggregation_level of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :rtype: str
        """
        return self._aggregation_level

    @aggregation_level.setter
    def aggregation_level(self, aggregation_level):
        """Sets the aggregation_level of this GroupedByObjectsBrandsAndTagsReqParams.

        Kak sgruppirovat dannye (po umolhaniu po dnam):    * `day` — po dnam   * `week` — po nedelam   * `month` — po mesacam   # noqa: E501

        :param aggregation_level: The aggregation_level of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :type: str
        """

        self._aggregation_level = aggregation_level

    @property
    def skip_deleted_nm(self):
        """Gets the skip_deleted_nm of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501

        Skryt udalennye `nmID`  # noqa: E501

        :return: The skip_deleted_nm of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :rtype: bool
        """
        return self._skip_deleted_nm

    @skip_deleted_nm.setter
    def skip_deleted_nm(self, skip_deleted_nm):
        """Sets the skip_deleted_nm of this GroupedByObjectsBrandsAndTagsReqParams.

        Skryt udalennye `nmID`  # noqa: E501

        :param skip_deleted_nm: The skip_deleted_nm of this GroupedByObjectsBrandsAndTagsReqParams.  # noqa: E501
        :type: bool
        """

        self._skip_deleted_nm = skip_deleted_nm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GroupedByObjectsBrandsAndTagsReqParams, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupedByObjectsBrandsAndTagsReqParams):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
