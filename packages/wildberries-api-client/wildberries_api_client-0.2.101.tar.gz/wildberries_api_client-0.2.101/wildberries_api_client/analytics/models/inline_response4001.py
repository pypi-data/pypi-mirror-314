# coding: utf-8

"""
    Opisanie API Analitika

    Servis predostavlaet publihnyi API dla poluhenia analitiheskih dannyh. S pomohu etih metodov vy mohete poluhat analitiheskie othety. [hast metodov](./#tag/Voronka-prodazh-(Dzhem)/) dostupna tolko s [podpiskoi na rashirennuu analitiku Dhem](https://seller.wildberries.ru/dynamic-product-categories/jam).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse4001(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'detail': 'str',
        'request_id': 'str',
        'origin': 'str'
    }

    attribute_map = {
        'title': 'title',
        'detail': 'detail',
        'request_id': 'requestId',
        'origin': 'origin'
    }

    def __init__(self, title=None, detail=None, request_id=None, origin=None):  # noqa: E501
        """InlineResponse4001 - a model defined in Swagger"""  # noqa: E501
        self._title = None
        self._detail = None
        self._request_id = None
        self._origin = None
        self.discriminator = None
        if title is not None:
            self.title = title
        if detail is not None:
            self.detail = detail
        if request_id is not None:
            self.request_id = request_id
        if origin is not None:
            self.origin = origin

    @property
    def title(self):
        """Gets the title of this InlineResponse4001.  # noqa: E501

        ID ohibki  # noqa: E501

        :return: The title of this InlineResponse4001.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this InlineResponse4001.

        ID ohibki  # noqa: E501

        :param title: The title of this InlineResponse4001.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def detail(self):
        """Gets the detail of this InlineResponse4001.  # noqa: E501

        Opisanie ohibki  # noqa: E501

        :return: The detail of this InlineResponse4001.  # noqa: E501
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this InlineResponse4001.

        Opisanie ohibki  # noqa: E501

        :param detail: The detail of this InlineResponse4001.  # noqa: E501
        :type: str
        """

        self._detail = detail

    @property
    def request_id(self):
        """Gets the request_id of this InlineResponse4001.  # noqa: E501

        ID zaprosa  # noqa: E501

        :return: The request_id of this InlineResponse4001.  # noqa: E501
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this InlineResponse4001.

        ID zaprosa  # noqa: E501

        :param request_id: The request_id of this InlineResponse4001.  # noqa: E501
        :type: str
        """

        self._request_id = request_id

    @property
    def origin(self):
        """Gets the origin of this InlineResponse4001.  # noqa: E501

        Servis, vernuvhii ohibku  # noqa: E501

        :return: The origin of this InlineResponse4001.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this InlineResponse4001.

        Servis, vernuvhii ohibku  # noqa: E501

        :param origin: The origin of this InlineResponse4001.  # noqa: E501
        :type: str
        """

        self._origin = origin

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse4001, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse4001):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
