# coding: utf-8

"""
    hat s pokupatelami

    hat pozvolaet prodavcam i pokupatelam obhatsa napramuu. <br>Pokupateli mogut obrahatsa s voprosami po tovaram ili pretenziami. Rekomenduem otvehat na soobhenia v hate v tehenie 10 dnei. <br>hat vsegda nahinaet pokupatel. V odnom hate mohno obhatsa tolko s odnim pokupatelem.  <blockquote class=\"spoiler\">     <p class=\"descr\">Obrabotka zaavok na vozvrat tovara dostupna tolko v <a class=\"link\" target=\"_blank\" href=\"https://seller.wildberries.ru/chat-with-clients\">veb-versii hatov s pokupatelami</a>.</p>   </blockquote>   <br>  <p>Rabota s hatami: <br>1. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1chats/get\">Poluhite spisok hatov</a>. Sohranite ID hatov v svoei baze dannyh â€” eto pozvolit obnovlat informaciu o hatah pri poluhenii sobytii. <br>2. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1events/get\">Poluhite sobytia hatov</a>: soobhenia i vozvraty. U novyh hatov znahenie pola <code>isNewChat</code> budet <code>true</code>. <br>3. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1message/post\">Otpravlaite soobhenia v hat</a>.</p>   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class File(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_type': 'str',
        '_date': 'str',
        'name': 'str',
        'url': 'str',
        'size': 'int'
    }

    attribute_map = {
        'content_type': 'contentType',
        '_date': 'date',
        'name': 'name',
        'url': 'url',
        'size': 'size'
    }

    def __init__(self, content_type=None, _date=None, name=None, url=None, size=None):  # noqa: E501
        """File - a model defined in Swagger"""  # noqa: E501
        self._content_type = None
        self.__date = None
        self._name = None
        self._url = None
        self._size = None
        self.discriminator = None
        if content_type is not None:
            self.content_type = content_type
        if _date is not None:
            self._date = _date
        if name is not None:
            self.name = name
        if url is not None:
            self.url = url
        if size is not None:
            self.size = size

    @property
    def content_type(self):
        """Gets the content_type of this File.  # noqa: E501

        Tip faila  # noqa: E501

        :return: The content_type of this File.  # noqa: E501
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this File.

        Tip faila  # noqa: E501

        :param content_type: The content_type of this File.  # noqa: E501
        :type: str
        """

        self._content_type = content_type

    @property
    def _date(self):
        """Gets the _date of this File.  # noqa: E501

        Data zagruzki faila  # noqa: E501

        :return: The _date of this File.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this File.

        Data zagruzki faila  # noqa: E501

        :param _date: The _date of this File.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def name(self):
        """Gets the name of this File.  # noqa: E501

        Nazvanie faila  # noqa: E501

        :return: The name of this File.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.

        Nazvanie faila  # noqa: E501

        :param name: The name of this File.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def url(self):
        """Gets the url of this File.  # noqa: E501

        URL dla poluhenia faila  # noqa: E501

        :return: The url of this File.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this File.

        URL dla poluhenia faila  # noqa: E501

        :param url: The url of this File.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def size(self):
        """Gets the size of this File.  # noqa: E501

        Razmer faila v baitah  # noqa: E501

        :return: The size of this File.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this File.

        Razmer faila v baitah  # noqa: E501

        :param size: The size of this File.  # noqa: E501
        :type: int
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(File, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
