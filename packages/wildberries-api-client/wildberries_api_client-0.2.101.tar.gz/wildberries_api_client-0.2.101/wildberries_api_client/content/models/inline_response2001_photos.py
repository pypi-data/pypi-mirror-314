# coding: utf-8

"""
    Opisanie API Kontenta

     <dl> <dt>Slovar sokrahenii:</dt> <dd>KT — kartohka tovara</dd> <dd>NM — nomenklatura</dd> </dl> Ogranihenia po kolihestvu zaprosov: <dd>Dopuskaetsa maksimum 100 zaprosov v minutu na metody kontenta v celom.</dd>  <br> Publihnoe API Kontenta sozdano dla sinhronizacii dannyh mehdu serverami Wildberries i serverami prodavcov. <br> Vy zagruhaete dannye na svoi nositeli, rabotaete s nimi na svoih mohnostah i sinhroniziruetes s nahimi serverami po mere neobhodimosti. <br> <code>Ne dopuskaetsa ispolzovanie API Kontenta v kahestve vnehnei bazy dannyh. Pri prevyhenii limitov na zaprosy dostup k API budet ogranihen.</code>   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2001Photos(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'big': 'str',
        'c246x328': 'str',
        'c516x688': 'str',
        'square': 'str',
        'tm': 'str'
    }

    attribute_map = {
        'big': 'big',
        'c246x328': 'c246x328',
        'c516x688': 'c516x688',
        'square': 'square',
        'tm': 'tm'
    }

    def __init__(self, big=None, c246x328=None, c516x688=None, square=None, tm=None):  # noqa: E501
        """InlineResponse2001Photos - a model defined in Swagger"""  # noqa: E501
        self._big = None
        self._c246x328 = None
        self._c516x688 = None
        self._square = None
        self._tm = None
        self.discriminator = None
        if big is not None:
            self.big = big
        if c246x328 is not None:
            self.c246x328 = c246x328
        if c516x688 is not None:
            self.c516x688 = c516x688
        if square is not None:
            self.square = square
        if tm is not None:
            self.tm = tm

    @property
    def big(self):
        """Gets the big of this InlineResponse2001Photos.  # noqa: E501

        URL foto `900h1200`  # noqa: E501

        :return: The big of this InlineResponse2001Photos.  # noqa: E501
        :rtype: str
        """
        return self._big

    @big.setter
    def big(self, big):
        """Sets the big of this InlineResponse2001Photos.

        URL foto `900h1200`  # noqa: E501

        :param big: The big of this InlineResponse2001Photos.  # noqa: E501
        :type: str
        """

        self._big = big

    @property
    def c246x328(self):
        """Gets the c246x328 of this InlineResponse2001Photos.  # noqa: E501

        URL foto `248h328`  # noqa: E501

        :return: The c246x328 of this InlineResponse2001Photos.  # noqa: E501
        :rtype: str
        """
        return self._c246x328

    @c246x328.setter
    def c246x328(self, c246x328):
        """Sets the c246x328 of this InlineResponse2001Photos.

        URL foto `248h328`  # noqa: E501

        :param c246x328: The c246x328 of this InlineResponse2001Photos.  # noqa: E501
        :type: str
        """

        self._c246x328 = c246x328

    @property
    def c516x688(self):
        """Gets the c516x688 of this InlineResponse2001Photos.  # noqa: E501

        URL foto `516h688`  # noqa: E501

        :return: The c516x688 of this InlineResponse2001Photos.  # noqa: E501
        :rtype: str
        """
        return self._c516x688

    @c516x688.setter
    def c516x688(self, c516x688):
        """Sets the c516x688 of this InlineResponse2001Photos.

        URL foto `516h688`  # noqa: E501

        :param c516x688: The c516x688 of this InlineResponse2001Photos.  # noqa: E501
        :type: str
        """

        self._c516x688 = c516x688

    @property
    def square(self):
        """Gets the square of this InlineResponse2001Photos.  # noqa: E501

        URL foto `600h600`  # noqa: E501

        :return: The square of this InlineResponse2001Photos.  # noqa: E501
        :rtype: str
        """
        return self._square

    @square.setter
    def square(self, square):
        """Sets the square of this InlineResponse2001Photos.

        URL foto `600h600`  # noqa: E501

        :param square: The square of this InlineResponse2001Photos.  # noqa: E501
        :type: str
        """

        self._square = square

    @property
    def tm(self):
        """Gets the tm of this InlineResponse2001Photos.  # noqa: E501

        URL foto `75h100`  # noqa: E501

        :return: The tm of this InlineResponse2001Photos.  # noqa: E501
        :rtype: str
        """
        return self._tm

    @tm.setter
    def tm(self, tm):
        """Sets the tm of this InlineResponse2001Photos.

        URL foto `75h100`  # noqa: E501

        :param tm: The tm of this InlineResponse2001Photos.  # noqa: E501
        :type: str
        """

        self._tm = tm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2001Photos, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001Photos):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
