# coding: utf-8

"""
    Opisanie API Voprosov i Otzyvov

    Dopuskaetsa 1 zapros v sekundu na metody voprosov i otzyvov v celom. Pri prevyhenii limita do 3 zaprosov v sekundu posleduet blokirovka na 60 sekund.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.feedbacks_questions.api_client import ApiClient


class OtzyvyApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_feedback_get(self, id, **kwargs):  # noqa: E501
        """Poluhit otzyv po Id  # noqa: E501

        Metod pozvolaet poluhit otzyv po ego Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedback_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifikator otzyva (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedback_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedback_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def api_v1_feedback_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """Poluhit otzyv po Id  # noqa: E501

        Metod pozvolaet poluhit otzyv po ego Id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedback_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: Identifikator otzyva (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedback_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `api_v1_feedback_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'id' in params:
            query_params.append(('id', params['id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedback', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_archive_get(self, take, skip, **kwargs):  # noqa: E501
        """Spisok arhivnyh otzyvov  # noqa: E501

        Metod pozvolaet poluhit spisok arhivnyh otzyvov. <br> Otzyv stanovitsa arhivnym, esli:   - Na otzyv poluhen otvet.   - Otvet na otzyv ne poluhen v tehenie 30 dnei.   - V otzyve net teksta i foto.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_archive_get(take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Kolihestvo otzyvov (max. 5 000) (required)
        :param int skip: Kolihestvo otzyvov dla propuska (required)
        :param int nm_id: Artikul WB
        :param str order: Sortirovka otzyvov po date (dateAsc/dateDesc)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_archive_get_with_http_info(take, skip, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_archive_get_with_http_info(take, skip, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_archive_get_with_http_info(self, take, skip, **kwargs):  # noqa: E501
        """Spisok arhivnyh otzyvov  # noqa: E501

        Metod pozvolaet poluhit spisok arhivnyh otzyvov. <br> Otzyv stanovitsa arhivnym, esli:   - Na otzyv poluhen otvet.   - Otvet na otzyv ne poluhen v tehenie 30 dnei.   - V otzyve net teksta i foto.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_archive_get_with_http_info(take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int take: Kolihestvo otzyvov (max. 5 000) (required)
        :param int skip: Kolihestvo otzyvov dla propuska (required)
        :param int nm_id: Artikul WB
        :param str order: Sortirovka otzyvov po date (dateAsc/dateDesc)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['take', 'skip', 'nm_id', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_archive_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `api_v1_feedbacks_archive_get`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `api_v1_feedbacks_archive_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'nm_id' in params:
            query_params.append(('nmId', params['nm_id']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/archive', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_count_get(self, **kwargs):  # noqa: E501
        """Kolihestvo otzyvov  # noqa: E501

        Metod pozvolaet poluhit kolihestvo otzyvov.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date_from: Data nahala perioda v formate Unix timestamp
        :param int date_to: Data konca perioda v formate Unix timestamp
        :param bool is_answered: Obrabotannye otzyvy(`true`) ili neobrabotannye otzyvy(`false`).<br> Esli ne ukazat, vernutsa obrabotannye otzyvy. 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_count_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_count_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_count_get_with_http_info(self, **kwargs):  # noqa: E501
        """Kolihestvo otzyvov  # noqa: E501

        Metod pozvolaet poluhit kolihestvo otzyvov.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int date_from: Data nahala perioda v formate Unix timestamp
        :param int date_to: Data konca perioda v formate Unix timestamp
        :param bool is_answered: Obrabotannye otzyvy(`true`) ili neobrabotannye otzyvy(`false`).<br> Esli ne ukazat, vernutsa obrabotannye otzyvy. 
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'date_to', 'is_answered']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_count_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/count', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_count_unanswered_get(self, **kwargs):  # noqa: E501
        """Neobrabotannye otzyvy  # noqa: E501

        Metod pozvolaet poluhit kolihestvo neobrabotannyh otzyvov za segodna, za vse vrema, i srednuu ocenku vseh otzyvov.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_unanswered_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_count_unanswered_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_count_unanswered_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_count_unanswered_get_with_http_info(self, **kwargs):  # noqa: E501
        """Neobrabotannye otzyvy  # noqa: E501

        Metod pozvolaet poluhit kolihestvo neobrabotannyh otzyvov za segodna, za vse vrema, i srednuu ocenku vseh otzyvov.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_count_unanswered_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_count_unanswered_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/count-unanswered', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_get(self, is_answered, take, skip, **kwargs):  # noqa: E501
        """Spisok otzyvov  # noqa: E501

        Metod pozvolaet poluhit spisok otzyvov po zadannym parametram s paginaciei i sortirovkoi.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_get(is_answered, take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Obrabotannye otzyvy (`true`) ili neobrabotannye otzyvy(`false`) (required)
        :param int take: Kolihestvo otzyvov (max. 5 000) (required)
        :param int skip: Kolihestvo otzyvov dla propuska (max. 199990) (required)
        :param int nm_id: Artikul WB
        :param str order: Sortirovka otzyvov po date (dateAsc/dateDesc)
        :param int date_from: Data nahala perioda v formate Unix timestamp
        :param int date_to: Data konca perioda v formate Unix timestamp
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_get_with_http_info(is_answered, take, skip, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_get_with_http_info(is_answered, take, skip, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_get_with_http_info(self, is_answered, take, skip, **kwargs):  # noqa: E501
        """Spisok otzyvov  # noqa: E501

        Metod pozvolaet poluhit spisok otzyvov po zadannym parametram s paginaciei i sortirovkoi.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_get_with_http_info(is_answered, take, skip, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Obrabotannye otzyvy (`true`) ili neobrabotannye otzyvy(`false`) (required)
        :param int take: Kolihestvo otzyvov (max. 5 000) (required)
        :param int skip: Kolihestvo otzyvov dla propuska (max. 199990) (required)
        :param int nm_id: Artikul WB
        :param str order: Sortirovka otzyvov po date (dateAsc/dateDesc)
        :param int date_from: Data nahala perioda v formate Unix timestamp
        :param int date_to: Data konca perioda v formate Unix timestamp
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_answered', 'take', 'skip', 'nm_id', 'order', 'date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_answered' is set
        if ('is_answered' not in params or
                params['is_answered'] is None):
            raise ValueError("Missing the required parameter `is_answered` when calling `api_v1_feedbacks_get`")  # noqa: E501
        # verify the required parameter 'take' is set
        if ('take' not in params or
                params['take'] is None):
            raise ValueError("Missing the required parameter `take` when calling `api_v1_feedbacks_get`")  # noqa: E501
        # verify the required parameter 'skip' is set
        if ('skip' not in params or
                params['skip'] is None):
            raise ValueError("Missing the required parameter `skip` when calling `api_v1_feedbacks_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501
        if 'nm_id' in params:
            query_params.append(('nmId', params['nm_id']))  # noqa: E501
        if 'take' in params:
            query_params.append(('take', params['take']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_patch(self, **kwargs):  # noqa: E501
        """Rabota s otzyvom  # noqa: E501

        V zavisimosti ot tela zaprosa mohno: - Prosmotret otzyv. - Otvetit na otzyv, ili otredaktirovat otvet.      - Ocenit otzyv i/ili tovar.  Otredaktirovat otvet na otzyv mohno v tehenie 2 mesacev (60 dnei), posle predostavlenia otveta i tolko 1 raz.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_patch_with_http_info(self, **kwargs):  # noqa: E501
        """Rabota s otzyvom  # noqa: E501

        V zavisimosti ot tela zaprosa mohno: - Prosmotret otzyv. - Otvetit na otzyv, ili otredaktirovat otvet.      - Ocenit otzyv i/ili tovar.  Otredaktirovat otvet na otzyv mohno v tehenie 2 mesacev (60 dnei), posle predostavlenia otveta i tolko 1 raz.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_report_get(self, is_answered, **kwargs):  # noqa: E501
        """Poluhenie otzyvov v formate XLSX  # noqa: E501

        Metod pozvolaet poluhit XLSX fail s otzyvami v kodirovke BASE64. <br> Za odin zapros mohno poluhit 5000 otzyvov. <br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_report_get(is_answered, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Neobrabotannyi(`false`) ili v arhive(`true`) (required)
        :param int skip: Parametr paginacii, ukazyvaet skolko otzyvov propustit (max. 20 000)
        :param int date_from: Data nahala perioda v formate Unix timestamp <br>
        :param int date_to: Data konca perioda v formate Unix timestamp <br>
        :param str order: Sortirovka otzyvov po date (dateAsc/dateDesc) <br>
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_report_get_with_http_info(is_answered, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_report_get_with_http_info(is_answered, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_report_get_with_http_info(self, is_answered, **kwargs):  # noqa: E501
        """Poluhenie otzyvov v formate XLSX  # noqa: E501

        Metod pozvolaet poluhit XLSX fail s otzyvami v kodirovke BASE64. <br> Za odin zapros mohno poluhit 5000 otzyvov. <br>   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_report_get_with_http_info(is_answered, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool is_answered: Neobrabotannyi(`false`) ili v arhive(`true`) (required)
        :param int skip: Parametr paginacii, ukazyvaet skolko otzyvov propustit (max. 20 000)
        :param int date_from: Data nahala perioda v formate Unix timestamp <br>
        :param int date_to: Data konca perioda v formate Unix timestamp <br>
        :param str order: Sortirovka otzyvov po date (dateAsc/dateDesc) <br>
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['is_answered', 'skip', 'date_from', 'date_to', 'order']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_report_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'is_answered' is set
        if ('is_answered' not in params or
                params['is_answered'] is None):
            raise ValueError("Missing the required parameter `is_answered` when calling `api_v1_feedbacks_report_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'is_answered' in params:
            query_params.append(('isAnswered', params['is_answered']))  # noqa: E501
        if 'skip' in params:
            query_params.append(('skip', params['skip']))  # noqa: E501
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501
        if 'order' in params:
            query_params.append(('order', params['order']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/report', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
