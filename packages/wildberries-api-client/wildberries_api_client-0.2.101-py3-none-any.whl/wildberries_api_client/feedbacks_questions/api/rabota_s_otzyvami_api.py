# coding: utf-8

"""
    Opisanie API Voprosov i Otzyvov

    Dopuskaetsa 1 zapros v sekundu na metody voprosov i otzyvov v celom. Pri prevyhenii limita do 3 zaprosov v sekundu posleduet blokirovka na 60 sekund.   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.feedbacks_questions.api_client import ApiClient


class RabotaSOtzyvamiApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_feedbacks_actions_post(self, **kwargs):  # noqa: E501
        """Pohalovatsa na otzyv, soobhit o probleme s tovarom  # noqa: E501

        Pozvolaet podat halobu na otzyv i/ili soobhit o probleme s tovarom iz otzyva.  <br>   Validacia po <b>ID otzyva</b> otsutstvuet: esli v zaprose peredano nekorrektnoe znahenie, vy ne poluhite ohibku.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_actions_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_actions_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_actions_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_actions_post_with_http_info(self, **kwargs):  # noqa: E501
        """Pohalovatsa na otzyv, soobhit o probleme s tovarom  # noqa: E501

        Pozvolaet podat halobu na otzyv i/ili soobhit o probleme s tovarom iz otzyva.  <br>   Validacia po <b>ID otzyva</b> otsutstvuet: esli v zaprose peredano nekorrektnoe znahenie, vy ne poluhite ohibku.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_actions_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_actions_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_answer_patch(self, **kwargs):  # noqa: E501
        """Otredaktirovat otvet na otzyv  # noqa: E501

        Pozvolaet otredaktirovat uhe otpravlennyi otvet na otzyv. <br>  Otredaktirovat otvet mohno tolko odin raz v tehenie 60 dnei. <br>  Validacia po <b>ID otzyva</b> otsutstvuet: esli v zaprose peredano nekorrektnoe znahenie, vy ne poluhite ohibku.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_answer_patch(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_answer_patch_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_answer_patch_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_answer_patch_with_http_info(self, **kwargs):  # noqa: E501
        """Otredaktirovat otvet na otzyv  # noqa: E501

        Pozvolaet otredaktirovat uhe otpravlennyi otvet na otzyv. <br>  Otredaktirovat otvet mohno tolko odin raz v tehenie 60 dnei. <br>  Validacia po <b>ID otzyva</b> otsutstvuet: esli v zaprose peredano nekorrektnoe znahenie, vy ne poluhite ohibku.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_answer_patch_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_answer_patch" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/answer', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_answer_post(self, **kwargs):  # noqa: E501
        """Otvetit na otzyv  # noqa: E501

        Pozvolaet otvetit na otzyv.  <br>   Validacia po <b>ID otzyva</b> otsutstvuet: esli v zaprose peredano nekorrektnoe znahenie, vy ne poluhite ohibku.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_answer_post(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_answer_post_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_answer_post_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_answer_post_with_http_info(self, **kwargs):  # noqa: E501
        """Otvetit na otzyv  # noqa: E501

        Pozvolaet otvetit na otzyv.  <br>   Validacia po <b>ID otzyva</b> otsutstvuet: esli v zaprose peredano nekorrektnoe znahenie, vy ne poluhite ohibku.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_answer_post_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_answer_post" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/answer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_feedbacks_order_return_post(self, body, **kwargs):  # noqa: E501
        """Vozvrat tovara po ID otzyva  # noqa: E501

        Metod pozvolaet zaprosit na vozvrat tovar, po kotoromu ostavlen otzyv.  <br> Vozvrat dostupen dla otzyvov s `\"isAbleReturnProductOrders\": true`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_order_return_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_feedbacks_order_return_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_feedbacks_order_return_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def api_v1_feedbacks_order_return_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Vozvrat tovara po ID otzyva  # noqa: E501

        Metod pozvolaet zaprosit na vozvrat tovar, po kotoromu ostavlen otzyv.  <br> Vozvrat dostupen dla otzyvov s `\"isAbleReturnProductOrders\": true`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_feedbacks_order_return_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_feedbacks_order_return_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `api_v1_feedbacks_order_return_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/feedbacks/order/return', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_supplier_valuations_get(self, **kwargs):  # noqa: E501
        """Poluhit spiski prihin halob na otzyv i problem s tovarom  # noqa: E501

        Vozvrahaet spiski prihin halob i problem s tovarom.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_valuations_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_locale: Vybor azyka znahenii polei otveta (`ru` - russkii, `en` - angliiskii, `zh` - kitaiskii)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_supplier_valuations_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_supplier_valuations_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_supplier_valuations_get_with_http_info(self, **kwargs):  # noqa: E501
        """Poluhit spiski prihin halob na otzyv i problem s tovarom  # noqa: E501

        Vozvrahaet spiski prihin halob i problem s tovarom.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_supplier_valuations_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str x_locale: Vybor azyka znahenii polei otveta (`ru` - russkii, `en` - angliiskii, `zh` - kitaiskii)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_locale']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_supplier_valuations_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_locale' in params:
            header_params['X-Locale'] = params['x_locale']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/supplier-valuations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
