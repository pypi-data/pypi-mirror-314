# coding: utf-8

"""
    hat s pokupatelami

    hat pozvolaet prodavcam i pokupatelam obhatsa napramuu. <br>Pokupateli mogut obrahatsa s voprosami po tovaram ili pretenziami. Rekomenduem otvehat na soobhenia v hate v tehenie 10 dnei. <br>hat vsegda nahinaet pokupatel. V odnom hate mohno obhatsa tolko s odnim pokupatelem.  <blockquote class=\"spoiler\">     <p class=\"descr\">Obrabotka zaavok na vozvrat tovara dostupna tolko v <a class=\"link\" target=\"_blank\" href=\"https://seller.wildberries.ru/chat-with-clients\">veb-versii hatov s pokupatelami</a>.</p>   </blockquote>   <br>  <p>Rabota s hatami: <br>1. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1chats/get\">Poluhite spisok hatov</a>. Sohranite ID hatov v svoei baze dannyh â€” eto pozvolit obnovlat informaciu o hatah pri poluhenii sobytii. <br>2. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1events/get\">Poluhite sobytia hatov</a>: soobhenia i vozvraty. U novyh hatov znahenie pola <code>isNewChat</code> budet <code>true</code>. <br>3. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1message/post\">Otpravlaite soobhenia v hat</a>.</p>   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Refund(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action_type': 'RefundActionType',
        'price': 'int',
        'price_currency': 'str',
        'rid': 'str'
    }

    attribute_map = {
        'action_type': 'actionType',
        'price': 'price',
        'price_currency': 'priceCurrency',
        'rid': 'rid'
    }

    def __init__(self, action_type=None, price=None, price_currency=None, rid=None):  # noqa: E501
        """Refund - a model defined in Swagger"""  # noqa: E501
        self._action_type = None
        self._price = None
        self._price_currency = None
        self._rid = None
        self.discriminator = None
        if action_type is not None:
            self.action_type = action_type
        if price is not None:
            self.price = price
        if price_currency is not None:
            self.price_currency = price_currency
        if rid is not None:
            self.rid = rid

    @property
    def action_type(self):
        """Gets the action_type of this Refund.  # noqa: E501


        :return: The action_type of this Refund.  # noqa: E501
        :rtype: RefundActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this Refund.


        :param action_type: The action_type of this Refund.  # noqa: E501
        :type: RefundActionType
        """

        self._action_type = action_type

    @property
    def price(self):
        """Gets the price of this Refund.  # noqa: E501

        Stoimost zakaza  # noqa: E501

        :return: The price of this Refund.  # noqa: E501
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Refund.

        Stoimost zakaza  # noqa: E501

        :param price: The price of this Refund.  # noqa: E501
        :type: int
        """

        self._price = price

    @property
    def price_currency(self):
        """Gets the price_currency of this Refund.  # noqa: E501

        Valuta  # noqa: E501

        :return: The price_currency of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._price_currency

    @price_currency.setter
    def price_currency(self, price_currency):
        """Sets the price_currency of this Refund.

        Valuta  # noqa: E501

        :param price_currency: The price_currency of this Refund.  # noqa: E501
        :type: str
        """

        self._price_currency = price_currency

    @property
    def rid(self):
        """Gets the rid of this Refund.  # noqa: E501

        Unikalnyi ID zakaza v WB  # noqa: E501

        :return: The rid of this Refund.  # noqa: E501
        :rtype: str
        """
        return self._rid

    @rid.setter
    def rid(self, rid):
        """Sets the rid of this Refund.

        Unikalnyi ID zakaza v WB  # noqa: E501

        :param rid: The rid of this Refund.  # noqa: E501
        :type: str
        """

        self._rid = rid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Refund, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Refund):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
