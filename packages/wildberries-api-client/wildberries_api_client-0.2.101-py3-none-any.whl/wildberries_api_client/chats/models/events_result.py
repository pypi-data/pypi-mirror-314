# coding: utf-8

"""
    hat s pokupatelami

    hat pozvolaet prodavcam i pokupatelam obhatsa napramuu. <br>Pokupateli mogut obrahatsa s voprosami po tovaram ili pretenziami. Rekomenduem otvehat na soobhenia v hate v tehenie 10 dnei. <br>hat vsegda nahinaet pokupatel. V odnom hate mohno obhatsa tolko s odnim pokupatelem.  <blockquote class=\"spoiler\">     <p class=\"descr\">Obrabotka zaavok na vozvrat tovara dostupna tolko v <a class=\"link\" target=\"_blank\" href=\"https://seller.wildberries.ru/chat-with-clients\">veb-versii hatov s pokupatelami</a>.</p>   </blockquote>   <br>  <p>Rabota s hatami: <br>1. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1chats/get\">Poluhite spisok hatov</a>. Sohranite ID hatov v svoei baze dannyh â€” eto pozvolit obnovlat informaciu o hatah pri poluhenii sobytii. <br>2. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1events/get\">Poluhite sobytia hatov</a>: soobhenia i vozvraty. U novyh hatov znahenie pola <code>isNewChat</code> budet <code>true</code>. <br>3. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1message/post\">Otpravlaite soobhenia v hat</a>.</p>   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EventsResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'next': 'int',
        'newest_event_time': 'str',
        'oldest_event_time': 'str',
        'total_events': 'int',
        'events': 'list[Event]'
    }

    attribute_map = {
        'next': 'next',
        'newest_event_time': 'newestEventTime',
        'oldest_event_time': 'oldestEventTime',
        'total_events': 'totalEvents',
        'events': 'events'
    }

    def __init__(self, next=None, newest_event_time=None, oldest_event_time=None, total_events=None, events=None):  # noqa: E501
        """EventsResult - a model defined in Swagger"""  # noqa: E501
        self._next = None
        self._newest_event_time = None
        self._oldest_event_time = None
        self._total_events = None
        self._events = None
        self.discriminator = None
        if next is not None:
            self.next = next
        if newest_event_time is not None:
            self.newest_event_time = newest_event_time
        if oldest_event_time is not None:
            self.oldest_event_time = oldest_event_time
        if total_events is not None:
            self.total_events = total_events
        if events is not None:
            self.events = events

    @property
    def next(self):
        """Gets the next of this EventsResult.  # noqa: E501

        Paginator. Znahenie pola neobhodimo ukazat v zaprose dla poluhenia sleduuhego paketa dannyh.  # noqa: E501

        :return: The next of this EventsResult.  # noqa: E501
        :rtype: int
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this EventsResult.

        Paginator. Znahenie pola neobhodimo ukazat v zaprose dla poluhenia sleduuhego paketa dannyh.  # noqa: E501

        :param next: The next of this EventsResult.  # noqa: E501
        :type: int
        """

        self._next = next

    @property
    def newest_event_time(self):
        """Gets the newest_event_time of this EventsResult.  # noqa: E501

        Vrema noveihego sobytia v otvete  # noqa: E501

        :return: The newest_event_time of this EventsResult.  # noqa: E501
        :rtype: str
        """
        return self._newest_event_time

    @newest_event_time.setter
    def newest_event_time(self, newest_event_time):
        """Sets the newest_event_time of this EventsResult.

        Vrema noveihego sobytia v otvete  # noqa: E501

        :param newest_event_time: The newest_event_time of this EventsResult.  # noqa: E501
        :type: str
        """

        self._newest_event_time = newest_event_time

    @property
    def oldest_event_time(self):
        """Gets the oldest_event_time of this EventsResult.  # noqa: E501

        Vrema stareihego sobytia v otvete  # noqa: E501

        :return: The oldest_event_time of this EventsResult.  # noqa: E501
        :rtype: str
        """
        return self._oldest_event_time

    @oldest_event_time.setter
    def oldest_event_time(self, oldest_event_time):
        """Sets the oldest_event_time of this EventsResult.

        Vrema stareihego sobytia v otvete  # noqa: E501

        :param oldest_event_time: The oldest_event_time of this EventsResult.  # noqa: E501
        :type: str
        """

        self._oldest_event_time = oldest_event_time

    @property
    def total_events(self):
        """Gets the total_events of this EventsResult.  # noqa: E501

        Kolihestvo sobytii  # noqa: E501

        :return: The total_events of this EventsResult.  # noqa: E501
        :rtype: int
        """
        return self._total_events

    @total_events.setter
    def total_events(self, total_events):
        """Sets the total_events of this EventsResult.

        Kolihestvo sobytii  # noqa: E501

        :param total_events: The total_events of this EventsResult.  # noqa: E501
        :type: int
        """

        self._total_events = total_events

    @property
    def events(self):
        """Gets the events of this EventsResult.  # noqa: E501


        :return: The events of this EventsResult.  # noqa: E501
        :rtype: list[Event]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this EventsResult.


        :param events: The events of this EventsResult.  # noqa: E501
        :type: list[Event]
        """

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventsResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventsResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
