# coding: utf-8

"""
    hat s pokupatelami

    hat pozvolaet prodavcam i pokupatelam obhatsa napramuu. <br>Pokupateli mogut obrahatsa s voprosami po tovaram ili pretenziami. Rekomenduem otvehat na soobhenia v hate v tehenie 10 dnei. <br>hat vsegda nahinaet pokupatel. V odnom hate mohno obhatsa tolko s odnim pokupatelem.  <blockquote class=\"spoiler\">     <p class=\"descr\">Obrabotka zaavok na vozvrat tovara dostupna tolko v <a class=\"link\" target=\"_blank\" href=\"https://seller.wildberries.ru/chat-with-clients\">veb-versii hatov s pokupatelami</a>.</p>   </blockquote>   <br>  <p>Rabota s hatami: <br>1. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1chats/get\">Poluhite spisok hatov</a>. Sohranite ID hatov v svoei baze dannyh â€” eto pozvolit obnovlat informaciu o hatah pri poluhenii sobytii. <br>2. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1events/get\">Poluhite sobytia hatov</a>: soobhenia i vozvraty. U novyh hatov znahenie pola <code>isNewChat</code> budet <code>true</code>. <br>3. <a REPLINK/api/ru/#/paths/~1api~1v1~1seller~1message/post\">Otpravlaite soobhenia v hat</a>.</p>   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MessageResponseResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'add_time': 'int',
        'chat_id': 'str'
    }

    attribute_map = {
        'add_time': 'addTime',
        'chat_id': 'chatID'
    }

    def __init__(self, add_time=None, chat_id=None):  # noqa: E501
        """MessageResponseResult - a model defined in Swagger"""  # noqa: E501
        self._add_time = None
        self._chat_id = None
        self.discriminator = None
        if add_time is not None:
            self.add_time = add_time
        if chat_id is not None:
            self.chat_id = chat_id

    @property
    def add_time(self):
        """Gets the add_time of this MessageResponseResult.  # noqa: E501

        Vrema zagruzki  # noqa: E501

        :return: The add_time of this MessageResponseResult.  # noqa: E501
        :rtype: int
        """
        return self._add_time

    @add_time.setter
    def add_time(self, add_time):
        """Sets the add_time of this MessageResponseResult.

        Vrema zagruzki  # noqa: E501

        :param add_time: The add_time of this MessageResponseResult.  # noqa: E501
        :type: int
        """

        self._add_time = add_time

    @property
    def chat_id(self):
        """Gets the chat_id of this MessageResponseResult.  # noqa: E501

        ID hata  # noqa: E501

        :return: The chat_id of this MessageResponseResult.  # noqa: E501
        :rtype: str
        """
        return self._chat_id

    @chat_id.setter
    def chat_id(self, chat_id):
        """Sets the chat_id of this MessageResponseResult.

        ID hata  # noqa: E501

        :param chat_id: The chat_id of this MessageResponseResult.  # noqa: E501
        :type: str
        """

        self._chat_id = chat_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessageResponseResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessageResponseResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
