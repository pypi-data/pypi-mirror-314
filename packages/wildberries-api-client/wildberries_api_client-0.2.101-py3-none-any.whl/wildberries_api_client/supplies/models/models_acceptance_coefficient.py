# coding: utf-8

"""
    API Postavok

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelsAcceptanceCoefficient(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_date': 'str',
        'coefficient': 'float',
        'warehouse_id': 'int',
        'warehouse_name': 'str',
        'box_type_name': 'str',
        'box_type_id': 'int'
    }

    attribute_map = {
        '_date': 'date',
        'coefficient': 'coefficient',
        'warehouse_id': 'warehouseID',
        'warehouse_name': 'warehouseName',
        'box_type_name': 'boxTypeName',
        'box_type_id': 'boxTypeID'
    }

    def __init__(self, _date=None, coefficient=None, warehouse_id=None, warehouse_name=None, box_type_name=None, box_type_id=None):  # noqa: E501
        """ModelsAcceptanceCoefficient - a model defined in Swagger"""  # noqa: E501
        self.__date = None
        self._coefficient = None
        self._warehouse_id = None
        self._warehouse_name = None
        self._box_type_name = None
        self._box_type_id = None
        self.discriminator = None
        if _date is not None:
            self._date = _date
        if coefficient is not None:
            self.coefficient = coefficient
        if warehouse_id is not None:
            self.warehouse_id = warehouse_id
        if warehouse_name is not None:
            self.warehouse_name = warehouse_name
        if box_type_name is not None:
            self.box_type_name = box_type_name
        if box_type_id is not None:
            self.box_type_id = box_type_id

    @property
    def _date(self):
        """Gets the _date of this ModelsAcceptanceCoefficient.  # noqa: E501

        Data nahala deistvia koefficienta  # noqa: E501

        :return: The _date of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ModelsAcceptanceCoefficient.

        Data nahala deistvia koefficienta  # noqa: E501

        :param _date: The _date of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self.__date = _date

    @property
    def coefficient(self):
        """Gets the coefficient of this ModelsAcceptanceCoefficient.  # noqa: E501

        Koefficient priemki:   - `-1` — postavka nedostupna   - `0` — besplatnaa postavka   - ot `1` — mnohitel stoimosti priemki   # noqa: E501

        :return: The coefficient of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: float
        """
        return self._coefficient

    @coefficient.setter
    def coefficient(self, coefficient):
        """Sets the coefficient of this ModelsAcceptanceCoefficient.

        Koefficient priemki:   - `-1` — postavka nedostupna   - `0` — besplatnaa postavka   - ot `1` — mnohitel stoimosti priemki   # noqa: E501

        :param coefficient: The coefficient of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: float
        """

        self._coefficient = coefficient

    @property
    def warehouse_id(self):
        """Gets the warehouse_id of this ModelsAcceptanceCoefficient.  # noqa: E501

        ID sklada. Po nemu mohno poluhit [informaciu o sklade](./#tag/Informaciya-dlya-formirovaniya-postavok/paths/~1api~1v1~1warehouses/get)  # noqa: E501

        :return: The warehouse_id of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: int
        """
        return self._warehouse_id

    @warehouse_id.setter
    def warehouse_id(self, warehouse_id):
        """Sets the warehouse_id of this ModelsAcceptanceCoefficient.

        ID sklada. Po nemu mohno poluhit [informaciu o sklade](./#tag/Informaciya-dlya-formirovaniya-postavok/paths/~1api~1v1~1warehouses/get)  # noqa: E501

        :param warehouse_id: The warehouse_id of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: int
        """

        self._warehouse_id = warehouse_id

    @property
    def warehouse_name(self):
        """Gets the warehouse_name of this ModelsAcceptanceCoefficient.  # noqa: E501

        Nazvanie sklada  # noqa: E501

        :return: The warehouse_name of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self._warehouse_name

    @warehouse_name.setter
    def warehouse_name(self, warehouse_name):
        """Sets the warehouse_name of this ModelsAcceptanceCoefficient.

        Nazvanie sklada  # noqa: E501

        :param warehouse_name: The warehouse_name of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self._warehouse_name = warehouse_name

    @property
    def box_type_name(self):
        """Gets the box_type_name of this ModelsAcceptanceCoefficient.  # noqa: E501

        Tip postavki:   - `Koroba`   - `Monopallety`   - `Superseif`   - `QR-postavka s korobami`   # noqa: E501

        :return: The box_type_name of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: str
        """
        return self._box_type_name

    @box_type_name.setter
    def box_type_name(self, box_type_name):
        """Sets the box_type_name of this ModelsAcceptanceCoefficient.

        Tip postavki:   - `Koroba`   - `Monopallety`   - `Superseif`   - `QR-postavka s korobami`   # noqa: E501

        :param box_type_name: The box_type_name of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: str
        """

        self._box_type_name = box_type_name

    @property
    def box_type_id(self):
        """Gets the box_type_id of this ModelsAcceptanceCoefficient.  # noqa: E501

        ID tipa postavki:   - `2` — Koroba   - `5` — Monopallety   - `6` — Superseif <br>Dla tipa postavki **QR-postavka s korobami** pole ne vozvrahaetsa   # noqa: E501

        :return: The box_type_id of this ModelsAcceptanceCoefficient.  # noqa: E501
        :rtype: int
        """
        return self._box_type_id

    @box_type_id.setter
    def box_type_id(self, box_type_id):
        """Sets the box_type_id of this ModelsAcceptanceCoefficient.

        ID tipa postavki:   - `2` — Koroba   - `5` — Monopallety   - `6` — Superseif <br>Dla tipa postavki **QR-postavka s korobami** pole ne vozvrahaetsa   # noqa: E501

        :param box_type_id: The box_type_id of this ModelsAcceptanceCoefficient.  # noqa: E501
        :type: int
        """

        self._box_type_id = box_type_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelsAcceptanceCoefficient, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelsAcceptanceCoefficient):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
