# coding: utf-8

"""
    Opisanie API Analitika

    Servis predostavlaet publihnyi API dla poluhenia analitiheskih dannyh. S pomohu etih metodov vy mohete poluhat analitiheskie othety. [hast metodov](./#tag/Voronka-prodazh-(Dzhem)/) dostupna tolko s [podpiskoi na rashirennuu analitiku Dhem](https://seller.wildberries.ru/dynamic-product-categories/jam).   # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from wildberries_api_client.analytics.api_client import ApiClient


class OthetyPoUderhaniamApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_v1_analytics_antifraud_details_get(self, **kwargs):  # noqa: E501
        """Samovykupy  # noqa: E501

        Vozvrahaet othet po uderhaniam za samovykupy. Othet formiruetsa kahduu nedelu po sredam, do 7:00 po moskovskomu vremeni, i soderhit dannye za odnu nedelu. Takhe mohno poluhit othet za vse vrema s avgusta 2023. <br/><br/> Uderhanie za samovykup — eto 30% ot stoimosti tovarov. Minimalnaa summa vseh uderhanii — 100 000 ₽, esli za nedelu v PVZ privezli bolhe vahih tovarov, hem na 100 000 ₽. <br/><br/> Maksimum 10 zaprosov za 100 minut.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_analytics_antifraud_details_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Data, kotoraa vhodit v othetnyi period, `GGGG-MM-DD`.  <br/>          htoby poluhit dannye za vse vrema s avgusta 2023,  ne ukazyvaite etot parametr 
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_analytics_antifraud_details_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_analytics_antifraud_details_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_analytics_antifraud_details_get_with_http_info(self, **kwargs):  # noqa: E501
        """Samovykupy  # noqa: E501

        Vozvrahaet othet po uderhaniam za samovykupy. Othet formiruetsa kahduu nedelu po sredam, do 7:00 po moskovskomu vremeni, i soderhit dannye za odnu nedelu. Takhe mohno poluhit othet za vse vrema s avgusta 2023. <br/><br/> Uderhanie za samovykup — eto 30% ot stoimosti tovarov. Minimalnaa summa vseh uderhanii — 100 000 ₽, esli za nedelu v PVZ privezli bolhe vahih tovarov, hem na 100 000 ₽. <br/><br/> Maksimum 10 zaprosov za 100 minut.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_analytics_antifraud_details_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Data, kotoraa vhodit v othetnyi period, `GGGG-MM-DD`.  <br/>          htoby poluhit dannye za vse vrema s avgusta 2023,  ne ukazyvaite etot parametr 
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_analytics_antifraud_details_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/analytics/antifraud-details', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_analytics_characteristics_change_get(self, date_from, date_to, **kwargs):  # noqa: E501
        """Smena harakteristik  # noqa: E501

        Vozvrahaet othet ob uderhaniah za smenu harakteristik tovara. Esli tovary posle priemki ne sootvetstvuut zaavlennym cvetam i razmeram, i na sklade ih peremarkirovali s pravilnymi harakteristikami, po takim tovaram naznahaetsa htraf. <br>Mohno poluhit othet maksimum za 31 den, dostupny dannye s 28 dekabra 2021. <br>Maksimum 10 zaprosov za 10 minut   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_analytics_characteristics_change_get(date_from, date_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date date_from: Nahalo othetnogo perioda, `GGGG-MM-DD` (required)
        :param date date_to: Konec othetnogo perioda, `GGGG-MM-DD` (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_analytics_characteristics_change_get_with_http_info(date_from, date_to, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_analytics_characteristics_change_get_with_http_info(date_from, date_to, **kwargs)  # noqa: E501
            return data

    def api_v1_analytics_characteristics_change_get_with_http_info(self, date_from, date_to, **kwargs):  # noqa: E501
        """Smena harakteristik  # noqa: E501

        Vozvrahaet othet ob uderhaniah za smenu harakteristik tovara. Esli tovary posle priemki ne sootvetstvuut zaavlennym cvetam i razmeram, i na sklade ih peremarkirovali s pravilnymi harakteristikami, po takim tovaram naznahaetsa htraf. <br>Mohno poluhit othet maksimum za 31 den, dostupny dannye s 28 dekabra 2021. <br>Maksimum 10 zaprosov za 10 minut   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_analytics_characteristics_change_get_with_http_info(date_from, date_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date date_from: Nahalo othetnogo perioda, `GGGG-MM-DD` (required)
        :param date date_to: Konec othetnogo perioda, `GGGG-MM-DD` (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_analytics_characteristics_change_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'date_from' is set
        if ('date_from' not in params or
                params['date_from'] is None):
            raise ValueError("Missing the required parameter `date_from` when calling `api_v1_analytics_characteristics_change_get`")  # noqa: E501
        # verify the required parameter 'date_to' is set
        if ('date_to' not in params or
                params['date_to'] is None):
            raise ValueError("Missing the required parameter `date_to` when calling `api_v1_analytics_characteristics_change_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/analytics/characteristics-change', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_analytics_goods_labeling_get(self, date_from, date_to, **kwargs):  # noqa: E501
        """Markirovka tovara  # noqa: E501

        Vozvrahaet othet o htrafah za otsutstvie obazatelnoi markirovki tovarov. <br>V othete predstavleny fotografii tovarov, na kotoryh markirovka otsutstvuet libo ne shityvaetsa. <br>Mohno poluhit dannye maksimum za 31 den, nahinaa s marta 2024. <br>Maksimum 10 zaprosov za 10 minut   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_analytics_goods_labeling_get(date_from, date_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date date_from: Nahalo othetnogo perioda, `GGGG-MM-DD`  (required)
        :param date date_to: Konec othetnogo perioda, `GGGG-MM-DD`  (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_analytics_goods_labeling_get_with_http_info(date_from, date_to, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_analytics_goods_labeling_get_with_http_info(date_from, date_to, **kwargs)  # noqa: E501
            return data

    def api_v1_analytics_goods_labeling_get_with_http_info(self, date_from, date_to, **kwargs):  # noqa: E501
        """Markirovka tovara  # noqa: E501

        Vozvrahaet othet o htrafah za otsutstvie obazatelnoi markirovki tovarov. <br>V othete predstavleny fotografii tovarov, na kotoryh markirovka otsutstvuet libo ne shityvaetsa. <br>Mohno poluhit dannye maksimum za 31 den, nahinaa s marta 2024. <br>Maksimum 10 zaprosov za 10 minut   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_analytics_goods_labeling_get_with_http_info(date_from, date_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date date_from: Nahalo othetnogo perioda, `GGGG-MM-DD`  (required)
        :param date date_to: Konec othetnogo perioda, `GGGG-MM-DD`  (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_analytics_goods_labeling_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'date_from' is set
        if ('date_from' not in params or
                params['date_from'] is None):
            raise ValueError("Missing the required parameter `date_from` when calling `api_v1_analytics_goods_labeling_get`")  # noqa: E501
        # verify the required parameter 'date_to' is set
        if ('date_to' not in params or
                params['date_to'] is None):
            raise ValueError("Missing the required parameter `date_to` when calling `api_v1_analytics_goods_labeling_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/analytics/goods-labeling', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_analytics_incorrect_attachments_get(self, date_from, date_to, **kwargs):  # noqa: E501
        """Podmena tovara  # noqa: E501

        Vozvrahaet othet ob uderhaniah za otpravku ne teh tovarov, pustyh korobok ili korobok bez tovara, no s postoronnimi predmetami. V takih sluhaah uderhivaetsa 100% ot stoimosti zakaza.  Mohno poluhit othet maksimum za 31 den, dostupny dannye s iuna 2023.  Maksimum 1 zapros v minutu.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_analytics_incorrect_attachments_get(date_from, date_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Nahalo othetnogo perioda, `GGGG-MM-DD`  (required)
        :param str date_to: Konec othetnogo perioda, `GGGG-MM-DD`  (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_analytics_incorrect_attachments_get_with_http_info(date_from, date_to, **kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_analytics_incorrect_attachments_get_with_http_info(date_from, date_to, **kwargs)  # noqa: E501
            return data

    def api_v1_analytics_incorrect_attachments_get_with_http_info(self, date_from, date_to, **kwargs):  # noqa: E501
        """Podmena tovara  # noqa: E501

        Vozvrahaet othet ob uderhaniah za otpravku ne teh tovarov, pustyh korobok ili korobok bez tovara, no s postoronnimi predmetami. V takih sluhaah uderhivaetsa 100% ot stoimosti zakaza.  Mohno poluhit othet maksimum za 31 den, dostupny dannye s iuna 2023.  Maksimum 1 zapros v minutu.     # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_analytics_incorrect_attachments_get_with_http_info(date_from, date_to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str date_from: Nahalo othetnogo perioda, `GGGG-MM-DD`  (required)
        :param str date_to: Konec othetnogo perioda, `GGGG-MM-DD`  (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['date_from', 'date_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_analytics_incorrect_attachments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'date_from' is set
        if ('date_from' not in params or
                params['date_from'] is None):
            raise ValueError("Missing the required parameter `date_from` when calling `api_v1_analytics_incorrect_attachments_get`")  # noqa: E501
        # verify the required parameter 'date_to' is set
        if ('date_to' not in params or
                params['date_to'] is None):
            raise ValueError("Missing the required parameter `date_to` when calling `api_v1_analytics_incorrect_attachments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'date_from' in params:
            query_params.append(('dateFrom', params['date_from']))  # noqa: E501
        if 'date_to' in params:
            query_params.append(('dateTo', params['date_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/analytics/incorrect-attachments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def api_v1_analytics_storage_coefficient_get(self, **kwargs):  # noqa: E501
        """Koefficient logistiki i hranenia  # noqa: E501

        Vozvrahaet koefficienty logistiki i hranenia. Oni rasshityvautsa na nedelu (s ponedelnika po voskresene).   Mohno poluhit dannye s 31.10.2022.  **Maksimum 1 zapros v minutu.**  **Kak eto rabotaet**   V nahale kahdoi nedeli dla prodavca rasshityvaetsa novyi koefficient logistiki i hranenia. Zatem stoimost logistiki i hranenia umnohaetsa na koefficient etoi nedeli.   **Kak shitaetsa koefficient**    Na osnove rashohdenia faktiheskih i zaavlennyh gabaritov upakovki tovara:    1. Izmeraem tovary.<br/>Rabotniki sklada izmeraut po odnomu tovaru kahdogo naimenovania, s uhetom upakovki (krome tovarov menhe 2 l). Dla rasheta ispolzuutsa izmerenia za 30 dnei do nahala tekuhei nedeli.    2. Shitaem koefficient dla tovara.</br>Rezultaty izmerenii sravnivautsa s gabaritami iz kartohki tovara. V zavisimosti ot raznicy kahdomu naimenovaniu prisvaivaetsa koefficient po tovaru.    3. Shitaem koefficient logistiki i hranenia.</br>Koefficient logistiki i hranenia — eto srednii koefficient po tovaram.<br>   Koefficient logistiki i hranenia raven 1, esli     * Po tovaram prodavca sdelano menhe 10 unikalnyh izmerenii.    * Srednaa raznica v gabaritah ne bolhe 10%.    Dla prodavcov s koefficientom 1 stoimost logistiki i hranenia ne uvelihitsa.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_analytics_storage_coefficient_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Data, kotoraa vhodit v othetnyi period, `GGGG-MM-DD` 
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_v1_analytics_storage_coefficient_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.api_v1_analytics_storage_coefficient_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def api_v1_analytics_storage_coefficient_get_with_http_info(self, **kwargs):  # noqa: E501
        """Koefficient logistiki i hranenia  # noqa: E501

        Vozvrahaet koefficienty logistiki i hranenia. Oni rasshityvautsa na nedelu (s ponedelnika po voskresene).   Mohno poluhit dannye s 31.10.2022.  **Maksimum 1 zapros v minutu.**  **Kak eto rabotaet**   V nahale kahdoi nedeli dla prodavca rasshityvaetsa novyi koefficient logistiki i hranenia. Zatem stoimost logistiki i hranenia umnohaetsa na koefficient etoi nedeli.   **Kak shitaetsa koefficient**    Na osnove rashohdenia faktiheskih i zaavlennyh gabaritov upakovki tovara:    1. Izmeraem tovary.<br/>Rabotniki sklada izmeraut po odnomu tovaru kahdogo naimenovania, s uhetom upakovki (krome tovarov menhe 2 l). Dla rasheta ispolzuutsa izmerenia za 30 dnei do nahala tekuhei nedeli.    2. Shitaem koefficient dla tovara.</br>Rezultaty izmerenii sravnivautsa s gabaritami iz kartohki tovara. V zavisimosti ot raznicy kahdomu naimenovaniu prisvaivaetsa koefficient po tovaru.    3. Shitaem koefficient logistiki i hranenia.</br>Koefficient logistiki i hranenia — eto srednii koefficient po tovaram.<br>   Koefficient logistiki i hranenia raven 1, esli     * Po tovaram prodavca sdelano menhe 10 unikalnyh izmerenii.    * Srednaa raznica v gabaritah ne bolhe 10%.    Dla prodavcov s koefficientom 1 stoimost logistiki i hranenia ne uvelihitsa.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_v1_analytics_storage_coefficient_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str _date: Data, kotoraa vhodit v othetnyi period, `GGGG-MM-DD` 
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_v1_analytics_storage_coefficient_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_date' in params:
            query_params.append(('date', params['_date']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['HeaderApiKey']  # noqa: E501

        return self.api_client.call_api(
            '/api/v1/analytics/storage-coefficient', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
