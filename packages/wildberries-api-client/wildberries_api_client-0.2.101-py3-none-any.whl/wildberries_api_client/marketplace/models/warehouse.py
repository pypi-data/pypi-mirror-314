# coding: utf-8

"""
    Opisanie API Marketplace

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Warehouse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'office_id': 'int',
        'id': 'int',
        'cargo_type': 'int',
        'delivery_type': 'int'
    }

    attribute_map = {
        'name': 'name',
        'office_id': 'officeId',
        'id': 'id',
        'cargo_type': 'cargoType',
        'delivery_type': 'deliveryType'
    }

    def __init__(self, name=None, office_id=None, id=None, cargo_type=None, delivery_type=None):  # noqa: E501
        """Warehouse - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._office_id = None
        self._id = None
        self._cargo_type = None
        self._delivery_type = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if office_id is not None:
            self.office_id = office_id
        if id is not None:
            self.id = id
        if cargo_type is not None:
            self.cargo_type = cargo_type
        if delivery_type is not None:
            self.delivery_type = delivery_type

    @property
    def name(self):
        """Gets the name of this Warehouse.  # noqa: E501

        Nazvanie sklada prodavca  # noqa: E501

        :return: The name of this Warehouse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Warehouse.

        Nazvanie sklada prodavca  # noqa: E501

        :param name: The name of this Warehouse.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def office_id(self):
        """Gets the office_id of this Warehouse.  # noqa: E501

        ID sklada WB  # noqa: E501

        :return: The office_id of this Warehouse.  # noqa: E501
        :rtype: int
        """
        return self._office_id

    @office_id.setter
    def office_id(self, office_id):
        """Sets the office_id of this Warehouse.

        ID sklada WB  # noqa: E501

        :param office_id: The office_id of this Warehouse.  # noqa: E501
        :type: int
        """

        self._office_id = office_id

    @property
    def id(self):
        """Gets the id of this Warehouse.  # noqa: E501

        ID sklada prodavca  # noqa: E501

        :return: The id of this Warehouse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Warehouse.

        ID sklada prodavca  # noqa: E501

        :param id: The id of this Warehouse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def cargo_type(self):
        """Gets the cargo_type of this Warehouse.  # noqa: E501

        <dl> <dt>Tip tovara, kotoryi prinimaet sklad:</dt> <dd>1 - obyhnyi</dd> <dd>2 - SGT (Sverhgabaritnyi tovar)</dd> <dd>3 - KGT (Krupnogabaritnyi tovar). Ne ispolzuetsa na dannyi moment.</dd> </dl>   # noqa: E501

        :return: The cargo_type of this Warehouse.  # noqa: E501
        :rtype: int
        """
        return self._cargo_type

    @cargo_type.setter
    def cargo_type(self, cargo_type):
        """Sets the cargo_type of this Warehouse.

        <dl> <dt>Tip tovara, kotoryi prinimaet sklad:</dt> <dd>1 - obyhnyi</dd> <dd>2 - SGT (Sverhgabaritnyi tovar)</dd> <dd>3 - KGT (Krupnogabaritnyi tovar). Ne ispolzuetsa na dannyi moment.</dd> </dl>   # noqa: E501

        :param cargo_type: The cargo_type of this Warehouse.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if cargo_type not in allowed_values:
            raise ValueError(
                "Invalid value for `cargo_type` ({0}), must be one of {1}"  # noqa: E501
                .format(cargo_type, allowed_values)
            )

        self._cargo_type = cargo_type

    @property
    def delivery_type(self):
        """Gets the delivery_type of this Warehouse.  # noqa: E501

        <dl> <dt>Tip dostavki, kotoryi prinimaet sklad:</dt> <dd>1 - dostavka na sklad Wildberries</dd> <dd>2 - dostavka silami prodavca</dd> <dd>3 - dostavka kurerom WB</dd> </dl>   # noqa: E501

        :return: The delivery_type of this Warehouse.  # noqa: E501
        :rtype: int
        """
        return self._delivery_type

    @delivery_type.setter
    def delivery_type(self, delivery_type):
        """Sets the delivery_type of this Warehouse.

        <dl> <dt>Tip dostavki, kotoryi prinimaet sklad:</dt> <dd>1 - dostavka na sklad Wildberries</dd> <dd>2 - dostavka silami prodavca</dd> <dd>3 - dostavka kurerom WB</dd> </dl>   # noqa: E501

        :param delivery_type: The delivery_type of this Warehouse.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8]  # noqa: E501
        if delivery_type not in allowed_values:
            raise ValueError(
                "Invalid value for `delivery_type` ({0}), must be one of {1}"  # noqa: E501
                .format(delivery_type, allowed_values)
            )

        self._delivery_type = delivery_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Warehouse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Warehouse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
