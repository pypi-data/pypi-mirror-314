import requests

from datetime import datetime
from zoneinfo import ZoneInfo

from pyvulnerabilitylookup import PyVulnerabilityLookup

from exploitdbsighting import config

# Define the URL
url = "https://www.exploit-db.com/"

# Define the query parameters
params = {
    "draw": "1",
    "columns[0][data]": "date_published",
    "columns[0][name]": "date_published",
    "columns[0][searchable]": "true",
    "columns[0][orderable]": "true",
    "columns[0][search][value]": "",
    "columns[0][search][regex]": "false",
    "columns[1][data]": "download",
    "columns[1][name]": "download",
    "columns[1][searchable]": "false",
    "columns[1][orderable]": "false",
    "columns[1][search][value]": "",
    "columns[1][search][regex]": "false",
    "columns[2][data]": "application_md5",
    "columns[2][name]": "application_md5",
    "columns[2][searchable]": "true",
    "columns[2][orderable]": "false",
    "columns[2][search][value]": "",
    "columns[2][search][regex]": "false",
    "columns[3][data]": "verified",
    "columns[3][name]": "verified",
    "columns[3][searchable]": "true",
    "columns[3][orderable]": "false",
    "columns[3][search][value]": "1",
    "columns[3][search][regex]": "true",
    "columns[4][data]": "description",
    "columns[4][name]": "description",
    "columns[4][searchable]": "true",
    "columns[4][orderable]": "false",
    "columns[4][search][value]": "",
    "columns[4][search][regex]": "false",
    "columns[5][data]": "type_id",
    "columns[5][name]": "type_id",
    "columns[5][searchable]": "true",
    "columns[5][orderable]": "false",
    "columns[5][search][value]": "",
    "columns[5][search][regex]": "false",
    "columns[6][data]": "platform_id",
    "columns[6][name]": "platform_id",
    "columns[6][searchable]": "true",
    "columns[6][orderable]": "false",
    "columns[6][search][value]": "",
    "columns[6][search][regex]": "false",
    "columns[7][data]": "author_id",
    "columns[7][name]": "author_id",
    "columns[7][searchable]": "false",
    "columns[7][orderable]": "false",
    "columns[7][search][value]": "",
    "columns[7][search][regex]": "false",
    "columns[8][data]": "code",
    "columns[8][name]": "code.code",
    "columns[8][searchable]": "true",
    "columns[8][orderable]": "true",
    "columns[8][search][value]": "",
    "columns[8][search][regex]": "false",
    "columns[9][data]": "id",
    "columns[9][name]": "id",
    "columns[9][searchable]": "false",
    "columns[9][orderable]": "true",
    "columns[9][search][value]": "",
    "columns[9][search][regex]": "false",
    "order[0][column]": "9",
    "order[0][dir]": "desc",
    "start": "0",
    "length": "15",
    "search[value]": "",
    "search[regex]": "false",
    "author": "",
    "port": "",
    "type": "",
    "tag": "",
    "platform": "",
    # "_": "1732139957113" # probably a timestamp.
}

# Define the headers
headers = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; rv:132.0) Gecko/20100101 Firefox/132.0",
    "Accept": "application/json, text/javascript, */*; q=0.01",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Referer": "https://www.exploit-db.com/",
    "X-Requested-With": "XMLHttpRequest",
    "DNT": "1",
    "Connection": "keep-alive",
}


def main():
    # Send the GET request
    response = requests.get(url, headers=headers, params=params)

    # Parse and process the JSON response
    if response.status_code == 200:
        data = response.json()
        result = []
        if "data" in data:
            for entry in data["data"]:
                exploit_id = entry.get("id")
                date_published = entry.get("date_published")
                naive_datetime = datetime.strptime(date_published, "%Y-%m-%d")
                utc_datetime = naive_datetime.replace(tzinfo=ZoneInfo("UTC"))
                codes = entry.get("code", [])
                if codes:
                    for code_entry in codes:
                        if code_entry.get("code_type") == "cve" and code_entry.get(
                            "code"
                        ):
                            result.append(
                                (code_entry["code"], exploit_id, utc_datetime)
                            )
                else:
                    # Include entries without CVE codes
                    result.append((None, exploit_id, utc_datetime))

        for item in result:
            if None is not item[0]:
                print(
                    f"CVE-{item[0]}\nhttps://www.exploit-db.com/exploits/{item[1]}\n{item[2]}"
                )
                push_sighting_to_vulnerability_lookup(item[0], item[1], item[2])
                print("")

    else:
        print(f"Failed to fetch data. Status code: {response.status_code}")


def push_sighting_to_vulnerability_lookup(vulnerability_id, exploit_id, date_published):
    """Create a sighting and push it to the Vulnerability-Lookup instance."""
    print("Pushing sighting to Vulnerability-Lookup...")
    vuln_lookup = PyVulnerabilityLookup(
        config.vulnerability_lookup_base_url, token=config.vulnerability_auth_token
    )

    # Create the sighting
    sighting = {
        "type": config.sighting_type,
        "source": f"https://www.exploit-db.com/exploits/{exploit_id}",
        "vulnerability": f"CVE-{vulnerability_id}",
        "creation_timestamp": date_published,
    }

    # Post the JSON to Vulnerability Lookup
    try:
        r = vuln_lookup.create_sighting(sighting=sighting)
        if "message" in r:
            print(r["message"])
    except Exception as e:
        print(
            f"Error when sending POST request to the Vulnerability Lookup server:\n{e}"
        )


if __name__ == "__main__":
    # Point of entry in execution mode.
    main()
