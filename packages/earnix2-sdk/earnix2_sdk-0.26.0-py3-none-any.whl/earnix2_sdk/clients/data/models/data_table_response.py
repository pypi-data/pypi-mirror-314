# coding: utf-8

"""
Earnix DataService API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 0.0.1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from earnix2_sdk.clients.data.models.data_version import DataVersion


class DataTableResponse(BaseModel):
    """
    DataTableResponse
    """  # noqa: E501

    latest_data_version: Optional[DataVersion] = Field(
        default=None, description="The latest DataVersion", alias="latestDataVersion"
    )
    id: Optional[StrictInt] = None
    data_source_id: Optional[StrictInt] = Field(default=None, alias="dataSourceId")
    version: Optional[StrictInt] = None
    name: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="name"
    )
    product: Optional[StrictStr] = Field(default=None, description="product")
    description: Optional[StrictStr] = Field(default=None, description="description")
    latest_data_version_number: Optional[StrictInt] = Field(
        default=None,
        description="The id of the latest DataVersions",
        alias="latestDataVersionNumber",
    )
    tags: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "dataSourceId",
        "version",
        "name",
        "product",
        "description",
        "latestDataVersionNumber",
        "tags",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DataTableResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "latest_data_version",
                "version",
                "latest_data_version_number",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DataTableResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "dataSourceId": obj.get("dataSourceId"),
                "version": obj.get("version"),
                "name": obj.get("name"),
                "product": obj.get("product"),
                "description": obj.get("description"),
                "latestDataVersionNumber": obj.get("latestDataVersionNumber"),
                "tags": obj.get("tags"),
            }
        )
        return _obj
