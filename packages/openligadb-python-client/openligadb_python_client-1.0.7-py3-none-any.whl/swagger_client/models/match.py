# coding: utf-8

"""
    OpenLigaDB-API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Match(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'match_id': 'int',
        'match_date_time': 'datetime',
        'time_zone_id': 'str',
        'league_id': 'int',
        'league_name': 'str',
        'league_season': 'int',
        'league_shortcut': 'str',
        'match_date_time_utc': 'datetime',
        'group': 'Group',
        'team1': 'Team',
        'team2': 'Team',
        'last_update_date_time': 'datetime',
        'match_is_finished': 'bool',
        'match_results': 'list[MatchResult]',
        'goals': 'list[Goal]',
        'location': 'Location',
        'number_of_viewers': 'int'
    }

    attribute_map = {
        'match_id': 'matchID',
        'match_date_time': 'matchDateTime',
        'time_zone_id': 'timeZoneID',
        'league_id': 'leagueId',
        'league_name': 'leagueName',
        'league_season': 'leagueSeason',
        'league_shortcut': 'leagueShortcut',
        'match_date_time_utc': 'matchDateTimeUTC',
        'group': 'group',
        'team1': 'team1',
        'team2': 'team2',
        'last_update_date_time': 'lastUpdateDateTime',
        'match_is_finished': 'matchIsFinished',
        'match_results': 'matchResults',
        'goals': 'goals',
        'location': 'location',
        'number_of_viewers': 'numberOfViewers'
    }

    def __init__(self, match_id=None, match_date_time=None, time_zone_id=None, league_id=None, league_name=None, league_season=None, league_shortcut=None, match_date_time_utc=None, group=None, team1=None, team2=None, last_update_date_time=None, match_is_finished=None, match_results=None, goals=None, location=None, number_of_viewers=None):  # noqa: E501
        """Match - a model defined in Swagger"""  # noqa: E501
        self._match_id = None
        self._match_date_time = None
        self._time_zone_id = None
        self._league_id = None
        self._league_name = None
        self._league_season = None
        self._league_shortcut = None
        self._match_date_time_utc = None
        self._group = None
        self._team1 = None
        self._team2 = None
        self._last_update_date_time = None
        self._match_is_finished = None
        self._match_results = None
        self._goals = None
        self._location = None
        self._number_of_viewers = None
        self.discriminator = None
        if match_id is not None:
            self.match_id = match_id
        if match_date_time is not None:
            self.match_date_time = match_date_time
        if time_zone_id is not None:
            self.time_zone_id = time_zone_id
        if league_id is not None:
            self.league_id = league_id
        if league_name is not None:
            self.league_name = league_name
        if league_season is not None:
            self.league_season = league_season
        if league_shortcut is not None:
            self.league_shortcut = league_shortcut
        if match_date_time_utc is not None:
            self.match_date_time_utc = match_date_time_utc
        if group is not None:
            self.group = group
        if team1 is not None:
            self.team1 = team1
        if team2 is not None:
            self.team2 = team2
        if last_update_date_time is not None:
            self.last_update_date_time = last_update_date_time
        if match_is_finished is not None:
            self.match_is_finished = match_is_finished
        if match_results is not None:
            self.match_results = match_results
        if goals is not None:
            self.goals = goals
        if location is not None:
            self.location = location
        if number_of_viewers is not None:
            self.number_of_viewers = number_of_viewers

    @property
    def match_id(self):
        """Gets the match_id of this Match.  # noqa: E501


        :return: The match_id of this Match.  # noqa: E501
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this Match.


        :param match_id: The match_id of this Match.  # noqa: E501
        :type: int
        """

        self._match_id = match_id

    @property
    def match_date_time(self):
        """Gets the match_date_time of this Match.  # noqa: E501


        :return: The match_date_time of this Match.  # noqa: E501
        :rtype: datetime
        """
        return self._match_date_time

    @match_date_time.setter
    def match_date_time(self, match_date_time):
        """Sets the match_date_time of this Match.


        :param match_date_time: The match_date_time of this Match.  # noqa: E501
        :type: datetime
        """

        self._match_date_time = match_date_time

    @property
    def time_zone_id(self):
        """Gets the time_zone_id of this Match.  # noqa: E501


        :return: The time_zone_id of this Match.  # noqa: E501
        :rtype: str
        """
        return self._time_zone_id

    @time_zone_id.setter
    def time_zone_id(self, time_zone_id):
        """Sets the time_zone_id of this Match.


        :param time_zone_id: The time_zone_id of this Match.  # noqa: E501
        :type: str
        """

        self._time_zone_id = time_zone_id

    @property
    def league_id(self):
        """Gets the league_id of this Match.  # noqa: E501


        :return: The league_id of this Match.  # noqa: E501
        :rtype: int
        """
        return self._league_id

    @league_id.setter
    def league_id(self, league_id):
        """Sets the league_id of this Match.


        :param league_id: The league_id of this Match.  # noqa: E501
        :type: int
        """

        self._league_id = league_id

    @property
    def league_name(self):
        """Gets the league_name of this Match.  # noqa: E501


        :return: The league_name of this Match.  # noqa: E501
        :rtype: str
        """
        return self._league_name

    @league_name.setter
    def league_name(self, league_name):
        """Sets the league_name of this Match.


        :param league_name: The league_name of this Match.  # noqa: E501
        :type: str
        """

        self._league_name = league_name

    @property
    def league_season(self):
        """Gets the league_season of this Match.  # noqa: E501


        :return: The league_season of this Match.  # noqa: E501
        :rtype: int
        """
        return self._league_season

    @league_season.setter
    def league_season(self, league_season):
        """Sets the league_season of this Match.


        :param league_season: The league_season of this Match.  # noqa: E501
        :type: int
        """

        self._league_season = league_season

    @property
    def league_shortcut(self):
        """Gets the league_shortcut of this Match.  # noqa: E501


        :return: The league_shortcut of this Match.  # noqa: E501
        :rtype: str
        """
        return self._league_shortcut

    @league_shortcut.setter
    def league_shortcut(self, league_shortcut):
        """Sets the league_shortcut of this Match.


        :param league_shortcut: The league_shortcut of this Match.  # noqa: E501
        :type: str
        """

        self._league_shortcut = league_shortcut

    @property
    def match_date_time_utc(self):
        """Gets the match_date_time_utc of this Match.  # noqa: E501


        :return: The match_date_time_utc of this Match.  # noqa: E501
        :rtype: datetime
        """
        return self._match_date_time_utc

    @match_date_time_utc.setter
    def match_date_time_utc(self, match_date_time_utc):
        """Sets the match_date_time_utc of this Match.


        :param match_date_time_utc: The match_date_time_utc of this Match.  # noqa: E501
        :type: datetime
        """

        self._match_date_time_utc = match_date_time_utc

    @property
    def group(self):
        """Gets the group of this Match.  # noqa: E501


        :return: The group of this Match.  # noqa: E501
        :rtype: Group
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Match.


        :param group: The group of this Match.  # noqa: E501
        :type: Group
        """

        self._group = group

    @property
    def team1(self):
        """Gets the team1 of this Match.  # noqa: E501


        :return: The team1 of this Match.  # noqa: E501
        :rtype: Team
        """
        return self._team1

    @team1.setter
    def team1(self, team1):
        """Sets the team1 of this Match.


        :param team1: The team1 of this Match.  # noqa: E501
        :type: Team
        """

        self._team1 = team1

    @property
    def team2(self):
        """Gets the team2 of this Match.  # noqa: E501


        :return: The team2 of this Match.  # noqa: E501
        :rtype: Team
        """
        return self._team2

    @team2.setter
    def team2(self, team2):
        """Sets the team2 of this Match.


        :param team2: The team2 of this Match.  # noqa: E501
        :type: Team
        """

        self._team2 = team2

    @property
    def last_update_date_time(self):
        """Gets the last_update_date_time of this Match.  # noqa: E501


        :return: The last_update_date_time of this Match.  # noqa: E501
        :rtype: datetime
        """
        return self._last_update_date_time

    @last_update_date_time.setter
    def last_update_date_time(self, last_update_date_time):
        """Sets the last_update_date_time of this Match.


        :param last_update_date_time: The last_update_date_time of this Match.  # noqa: E501
        :type: datetime
        """

        self._last_update_date_time = last_update_date_time

    @property
    def match_is_finished(self):
        """Gets the match_is_finished of this Match.  # noqa: E501


        :return: The match_is_finished of this Match.  # noqa: E501
        :rtype: bool
        """
        return self._match_is_finished

    @match_is_finished.setter
    def match_is_finished(self, match_is_finished):
        """Sets the match_is_finished of this Match.


        :param match_is_finished: The match_is_finished of this Match.  # noqa: E501
        :type: bool
        """

        self._match_is_finished = match_is_finished

    @property
    def match_results(self):
        """Gets the match_results of this Match.  # noqa: E501


        :return: The match_results of this Match.  # noqa: E501
        :rtype: list[MatchResult]
        """
        return self._match_results

    @match_results.setter
    def match_results(self, match_results):
        """Sets the match_results of this Match.


        :param match_results: The match_results of this Match.  # noqa: E501
        :type: list[MatchResult]
        """

        self._match_results = match_results

    @property
    def goals(self):
        """Gets the goals of this Match.  # noqa: E501


        :return: The goals of this Match.  # noqa: E501
        :rtype: list[Goal]
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this Match.


        :param goals: The goals of this Match.  # noqa: E501
        :type: list[Goal]
        """

        self._goals = goals

    @property
    def location(self):
        """Gets the location of this Match.  # noqa: E501


        :return: The location of this Match.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Match.


        :param location: The location of this Match.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def number_of_viewers(self):
        """Gets the number_of_viewers of this Match.  # noqa: E501


        :return: The number_of_viewers of this Match.  # noqa: E501
        :rtype: int
        """
        return self._number_of_viewers

    @number_of_viewers.setter
    def number_of_viewers(self, number_of_viewers):
        """Sets the number_of_viewers of this Match.


        :param number_of_viewers: The number_of_viewers of this Match.  # noqa: E501
        :type: int
        """

        self._number_of_viewers = number_of_viewers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Match, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Match):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
