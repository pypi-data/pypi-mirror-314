# coding: utf-8

"""
    OpenLigaDB-API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Team(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_id': 'int',
        'team_name': 'str',
        'short_name': 'str',
        'team_icon_url': 'str',
        'team_group_name': 'str'
    }

    attribute_map = {
        'team_id': 'teamId',
        'team_name': 'teamName',
        'short_name': 'shortName',
        'team_icon_url': 'teamIconUrl',
        'team_group_name': 'teamGroupName'
    }

    def __init__(self, team_id=None, team_name=None, short_name=None, team_icon_url=None, team_group_name=None):  # noqa: E501
        """Team - a model defined in Swagger"""  # noqa: E501
        self._team_id = None
        self._team_name = None
        self._short_name = None
        self._team_icon_url = None
        self._team_group_name = None
        self.discriminator = None
        if team_id is not None:
            self.team_id = team_id
        if team_name is not None:
            self.team_name = team_name
        if short_name is not None:
            self.short_name = short_name
        if team_icon_url is not None:
            self.team_icon_url = team_icon_url
        if team_group_name is not None:
            self.team_group_name = team_group_name

    @property
    def team_id(self):
        """Gets the team_id of this Team.  # noqa: E501


        :return: The team_id of this Team.  # noqa: E501
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this Team.


        :param team_id: The team_id of this Team.  # noqa: E501
        :type: int
        """

        self._team_id = team_id

    @property
    def team_name(self):
        """Gets the team_name of this Team.  # noqa: E501


        :return: The team_name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this Team.


        :param team_name: The team_name of this Team.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def short_name(self):
        """Gets the short_name of this Team.  # noqa: E501


        :return: The short_name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this Team.


        :param short_name: The short_name of this Team.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def team_icon_url(self):
        """Gets the team_icon_url of this Team.  # noqa: E501


        :return: The team_icon_url of this Team.  # noqa: E501
        :rtype: str
        """
        return self._team_icon_url

    @team_icon_url.setter
    def team_icon_url(self, team_icon_url):
        """Sets the team_icon_url of this Team.


        :param team_icon_url: The team_icon_url of this Team.  # noqa: E501
        :type: str
        """

        self._team_icon_url = team_icon_url

    @property
    def team_group_name(self):
        """Gets the team_group_name of this Team.  # noqa: E501


        :return: The team_group_name of this Team.  # noqa: E501
        :rtype: str
        """
        return self._team_group_name

    @team_group_name.setter
    def team_group_name(self, team_group_name):
        """Sets the team_group_name of this Team.


        :param team_group_name: The team_group_name of this Team.  # noqa: E501
        :type: str
        """

        self._team_group_name = team_group_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Team, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Team):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
