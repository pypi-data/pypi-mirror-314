# coding: utf-8

"""
    OpenLigaDB-API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GoalGetter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'goal_getter_id': 'int',
        'goal_getter_name': 'str',
        'goal_count': 'int'
    }

    attribute_map = {
        'goal_getter_id': 'goalGetterId',
        'goal_getter_name': 'goalGetterName',
        'goal_count': 'goalCount'
    }

    def __init__(self, goal_getter_id=None, goal_getter_name=None, goal_count=None):  # noqa: E501
        """GoalGetter - a model defined in Swagger"""  # noqa: E501
        self._goal_getter_id = None
        self._goal_getter_name = None
        self._goal_count = None
        self.discriminator = None
        if goal_getter_id is not None:
            self.goal_getter_id = goal_getter_id
        if goal_getter_name is not None:
            self.goal_getter_name = goal_getter_name
        if goal_count is not None:
            self.goal_count = goal_count

    @property
    def goal_getter_id(self):
        """Gets the goal_getter_id of this GoalGetter.  # noqa: E501


        :return: The goal_getter_id of this GoalGetter.  # noqa: E501
        :rtype: int
        """
        return self._goal_getter_id

    @goal_getter_id.setter
    def goal_getter_id(self, goal_getter_id):
        """Sets the goal_getter_id of this GoalGetter.


        :param goal_getter_id: The goal_getter_id of this GoalGetter.  # noqa: E501
        :type: int
        """

        self._goal_getter_id = goal_getter_id

    @property
    def goal_getter_name(self):
        """Gets the goal_getter_name of this GoalGetter.  # noqa: E501


        :return: The goal_getter_name of this GoalGetter.  # noqa: E501
        :rtype: str
        """
        return self._goal_getter_name

    @goal_getter_name.setter
    def goal_getter_name(self, goal_getter_name):
        """Sets the goal_getter_name of this GoalGetter.


        :param goal_getter_name: The goal_getter_name of this GoalGetter.  # noqa: E501
        :type: str
        """

        self._goal_getter_name = goal_getter_name

    @property
    def goal_count(self):
        """Gets the goal_count of this GoalGetter.  # noqa: E501


        :return: The goal_count of this GoalGetter.  # noqa: E501
        :rtype: int
        """
        return self._goal_count

    @goal_count.setter
    def goal_count(self, goal_count):
        """Sets the goal_count of this GoalGetter.


        :param goal_count: The goal_count of this GoalGetter.  # noqa: E501
        :type: int
        """

        self._goal_count = goal_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GoalGetter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GoalGetter):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
