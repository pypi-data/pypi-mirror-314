# coding: utf-8

"""
    OpenLigaDB-API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BlTableTeam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'team_info_id': 'int',
        'team_name': 'str',
        'short_name': 'str',
        'team_icon_url': 'str',
        'points': 'int',
        'opponent_goals': 'int',
        'goals': 'int',
        'matches': 'int',
        'won': 'int',
        'lost': 'int',
        'draw': 'int',
        'goal_diff': 'int'
    }

    attribute_map = {
        'team_info_id': 'teamInfoId',
        'team_name': 'teamName',
        'short_name': 'shortName',
        'team_icon_url': 'teamIconUrl',
        'points': 'points',
        'opponent_goals': 'opponentGoals',
        'goals': 'goals',
        'matches': 'matches',
        'won': 'won',
        'lost': 'lost',
        'draw': 'draw',
        'goal_diff': 'goalDiff'
    }

    def __init__(self, team_info_id=None, team_name=None, short_name=None, team_icon_url=None, points=None, opponent_goals=None, goals=None, matches=None, won=None, lost=None, draw=None, goal_diff=None):  # noqa: E501
        """BlTableTeam - a model defined in Swagger"""  # noqa: E501
        self._team_info_id = None
        self._team_name = None
        self._short_name = None
        self._team_icon_url = None
        self._points = None
        self._opponent_goals = None
        self._goals = None
        self._matches = None
        self._won = None
        self._lost = None
        self._draw = None
        self._goal_diff = None
        self.discriminator = None
        if team_info_id is not None:
            self.team_info_id = team_info_id
        if team_name is not None:
            self.team_name = team_name
        if short_name is not None:
            self.short_name = short_name
        if team_icon_url is not None:
            self.team_icon_url = team_icon_url
        if points is not None:
            self.points = points
        if opponent_goals is not None:
            self.opponent_goals = opponent_goals
        if goals is not None:
            self.goals = goals
        if matches is not None:
            self.matches = matches
        if won is not None:
            self.won = won
        if lost is not None:
            self.lost = lost
        if draw is not None:
            self.draw = draw
        if goal_diff is not None:
            self.goal_diff = goal_diff

    @property
    def team_info_id(self):
        """Gets the team_info_id of this BlTableTeam.  # noqa: E501


        :return: The team_info_id of this BlTableTeam.  # noqa: E501
        :rtype: int
        """
        return self._team_info_id

    @team_info_id.setter
    def team_info_id(self, team_info_id):
        """Sets the team_info_id of this BlTableTeam.


        :param team_info_id: The team_info_id of this BlTableTeam.  # noqa: E501
        :type: int
        """

        self._team_info_id = team_info_id

    @property
    def team_name(self):
        """Gets the team_name of this BlTableTeam.  # noqa: E501


        :return: The team_name of this BlTableTeam.  # noqa: E501
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this BlTableTeam.


        :param team_name: The team_name of this BlTableTeam.  # noqa: E501
        :type: str
        """

        self._team_name = team_name

    @property
    def short_name(self):
        """Gets the short_name of this BlTableTeam.  # noqa: E501


        :return: The short_name of this BlTableTeam.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this BlTableTeam.


        :param short_name: The short_name of this BlTableTeam.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def team_icon_url(self):
        """Gets the team_icon_url of this BlTableTeam.  # noqa: E501


        :return: The team_icon_url of this BlTableTeam.  # noqa: E501
        :rtype: str
        """
        return self._team_icon_url

    @team_icon_url.setter
    def team_icon_url(self, team_icon_url):
        """Sets the team_icon_url of this BlTableTeam.


        :param team_icon_url: The team_icon_url of this BlTableTeam.  # noqa: E501
        :type: str
        """

        self._team_icon_url = team_icon_url

    @property
    def points(self):
        """Gets the points of this BlTableTeam.  # noqa: E501


        :return: The points of this BlTableTeam.  # noqa: E501
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this BlTableTeam.


        :param points: The points of this BlTableTeam.  # noqa: E501
        :type: int
        """

        self._points = points

    @property
    def opponent_goals(self):
        """Gets the opponent_goals of this BlTableTeam.  # noqa: E501


        :return: The opponent_goals of this BlTableTeam.  # noqa: E501
        :rtype: int
        """
        return self._opponent_goals

    @opponent_goals.setter
    def opponent_goals(self, opponent_goals):
        """Sets the opponent_goals of this BlTableTeam.


        :param opponent_goals: The opponent_goals of this BlTableTeam.  # noqa: E501
        :type: int
        """

        self._opponent_goals = opponent_goals

    @property
    def goals(self):
        """Gets the goals of this BlTableTeam.  # noqa: E501


        :return: The goals of this BlTableTeam.  # noqa: E501
        :rtype: int
        """
        return self._goals

    @goals.setter
    def goals(self, goals):
        """Sets the goals of this BlTableTeam.


        :param goals: The goals of this BlTableTeam.  # noqa: E501
        :type: int
        """

        self._goals = goals

    @property
    def matches(self):
        """Gets the matches of this BlTableTeam.  # noqa: E501


        :return: The matches of this BlTableTeam.  # noqa: E501
        :rtype: int
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this BlTableTeam.


        :param matches: The matches of this BlTableTeam.  # noqa: E501
        :type: int
        """

        self._matches = matches

    @property
    def won(self):
        """Gets the won of this BlTableTeam.  # noqa: E501


        :return: The won of this BlTableTeam.  # noqa: E501
        :rtype: int
        """
        return self._won

    @won.setter
    def won(self, won):
        """Sets the won of this BlTableTeam.


        :param won: The won of this BlTableTeam.  # noqa: E501
        :type: int
        """

        self._won = won

    @property
    def lost(self):
        """Gets the lost of this BlTableTeam.  # noqa: E501


        :return: The lost of this BlTableTeam.  # noqa: E501
        :rtype: int
        """
        return self._lost

    @lost.setter
    def lost(self, lost):
        """Sets the lost of this BlTableTeam.


        :param lost: The lost of this BlTableTeam.  # noqa: E501
        :type: int
        """

        self._lost = lost

    @property
    def draw(self):
        """Gets the draw of this BlTableTeam.  # noqa: E501


        :return: The draw of this BlTableTeam.  # noqa: E501
        :rtype: int
        """
        return self._draw

    @draw.setter
    def draw(self, draw):
        """Sets the draw of this BlTableTeam.


        :param draw: The draw of this BlTableTeam.  # noqa: E501
        :type: int
        """

        self._draw = draw

    @property
    def goal_diff(self):
        """Gets the goal_diff of this BlTableTeam.  # noqa: E501


        :return: The goal_diff of this BlTableTeam.  # noqa: E501
        :rtype: int
        """
        return self._goal_diff

    @goal_diff.setter
    def goal_diff(self, goal_diff):
        """Sets the goal_diff of this BlTableTeam.


        :param goal_diff: The goal_diff of this BlTableTeam.  # noqa: E501
        :type: int
        """

        self._goal_diff = goal_diff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlTableTeam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlTableTeam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
