# coding: utf-8

"""
    OpenLigaDB-API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Goal(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'goal_id': 'int',
        'score_team1': 'int',
        'score_team2': 'int',
        'match_minute': 'int',
        'goal_getter_id': 'int',
        'goal_getter_name': 'str',
        'is_penalty': 'bool',
        'is_own_goal': 'bool',
        'is_overtime': 'bool',
        'comment': 'str'
    }

    attribute_map = {
        'goal_id': 'goalID',
        'score_team1': 'scoreTeam1',
        'score_team2': 'scoreTeam2',
        'match_minute': 'matchMinute',
        'goal_getter_id': 'goalGetterID',
        'goal_getter_name': 'goalGetterName',
        'is_penalty': 'isPenalty',
        'is_own_goal': 'isOwnGoal',
        'is_overtime': 'isOvertime',
        'comment': 'comment'
    }

    def __init__(self, goal_id=None, score_team1=None, score_team2=None, match_minute=None, goal_getter_id=None, goal_getter_name=None, is_penalty=None, is_own_goal=None, is_overtime=None, comment=None):  # noqa: E501
        """Goal - a model defined in Swagger"""  # noqa: E501
        self._goal_id = None
        self._score_team1 = None
        self._score_team2 = None
        self._match_minute = None
        self._goal_getter_id = None
        self._goal_getter_name = None
        self._is_penalty = None
        self._is_own_goal = None
        self._is_overtime = None
        self._comment = None
        self.discriminator = None
        if goal_id is not None:
            self.goal_id = goal_id
        if score_team1 is not None:
            self.score_team1 = score_team1
        if score_team2 is not None:
            self.score_team2 = score_team2
        if match_minute is not None:
            self.match_minute = match_minute
        if goal_getter_id is not None:
            self.goal_getter_id = goal_getter_id
        if goal_getter_name is not None:
            self.goal_getter_name = goal_getter_name
        if is_penalty is not None:
            self.is_penalty = is_penalty
        if is_own_goal is not None:
            self.is_own_goal = is_own_goal
        if is_overtime is not None:
            self.is_overtime = is_overtime
        if comment is not None:
            self.comment = comment

    @property
    def goal_id(self):
        """Gets the goal_id of this Goal.  # noqa: E501


        :return: The goal_id of this Goal.  # noqa: E501
        :rtype: int
        """
        return self._goal_id

    @goal_id.setter
    def goal_id(self, goal_id):
        """Sets the goal_id of this Goal.


        :param goal_id: The goal_id of this Goal.  # noqa: E501
        :type: int
        """

        self._goal_id = goal_id

    @property
    def score_team1(self):
        """Gets the score_team1 of this Goal.  # noqa: E501


        :return: The score_team1 of this Goal.  # noqa: E501
        :rtype: int
        """
        return self._score_team1

    @score_team1.setter
    def score_team1(self, score_team1):
        """Sets the score_team1 of this Goal.


        :param score_team1: The score_team1 of this Goal.  # noqa: E501
        :type: int
        """

        self._score_team1 = score_team1

    @property
    def score_team2(self):
        """Gets the score_team2 of this Goal.  # noqa: E501


        :return: The score_team2 of this Goal.  # noqa: E501
        :rtype: int
        """
        return self._score_team2

    @score_team2.setter
    def score_team2(self, score_team2):
        """Sets the score_team2 of this Goal.


        :param score_team2: The score_team2 of this Goal.  # noqa: E501
        :type: int
        """

        self._score_team2 = score_team2

    @property
    def match_minute(self):
        """Gets the match_minute of this Goal.  # noqa: E501


        :return: The match_minute of this Goal.  # noqa: E501
        :rtype: int
        """
        return self._match_minute

    @match_minute.setter
    def match_minute(self, match_minute):
        """Sets the match_minute of this Goal.


        :param match_minute: The match_minute of this Goal.  # noqa: E501
        :type: int
        """

        self._match_minute = match_minute

    @property
    def goal_getter_id(self):
        """Gets the goal_getter_id of this Goal.  # noqa: E501


        :return: The goal_getter_id of this Goal.  # noqa: E501
        :rtype: int
        """
        return self._goal_getter_id

    @goal_getter_id.setter
    def goal_getter_id(self, goal_getter_id):
        """Sets the goal_getter_id of this Goal.


        :param goal_getter_id: The goal_getter_id of this Goal.  # noqa: E501
        :type: int
        """

        self._goal_getter_id = goal_getter_id

    @property
    def goal_getter_name(self):
        """Gets the goal_getter_name of this Goal.  # noqa: E501


        :return: The goal_getter_name of this Goal.  # noqa: E501
        :rtype: str
        """
        return self._goal_getter_name

    @goal_getter_name.setter
    def goal_getter_name(self, goal_getter_name):
        """Sets the goal_getter_name of this Goal.


        :param goal_getter_name: The goal_getter_name of this Goal.  # noqa: E501
        :type: str
        """

        self._goal_getter_name = goal_getter_name

    @property
    def is_penalty(self):
        """Gets the is_penalty of this Goal.  # noqa: E501


        :return: The is_penalty of this Goal.  # noqa: E501
        :rtype: bool
        """
        return self._is_penalty

    @is_penalty.setter
    def is_penalty(self, is_penalty):
        """Sets the is_penalty of this Goal.


        :param is_penalty: The is_penalty of this Goal.  # noqa: E501
        :type: bool
        """

        self._is_penalty = is_penalty

    @property
    def is_own_goal(self):
        """Gets the is_own_goal of this Goal.  # noqa: E501


        :return: The is_own_goal of this Goal.  # noqa: E501
        :rtype: bool
        """
        return self._is_own_goal

    @is_own_goal.setter
    def is_own_goal(self, is_own_goal):
        """Sets the is_own_goal of this Goal.


        :param is_own_goal: The is_own_goal of this Goal.  # noqa: E501
        :type: bool
        """

        self._is_own_goal = is_own_goal

    @property
    def is_overtime(self):
        """Gets the is_overtime of this Goal.  # noqa: E501


        :return: The is_overtime of this Goal.  # noqa: E501
        :rtype: bool
        """
        return self._is_overtime

    @is_overtime.setter
    def is_overtime(self, is_overtime):
        """Sets the is_overtime of this Goal.


        :param is_overtime: The is_overtime of this Goal.  # noqa: E501
        :type: bool
        """

        self._is_overtime = is_overtime

    @property
    def comment(self):
        """Gets the comment of this Goal.  # noqa: E501


        :return: The comment of this Goal.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this Goal.


        :param comment: The comment of this Goal.  # noqa: E501
        :type: str
        """

        self._comment = comment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Goal, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Goal):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
