# coding: utf-8

"""
    OpenLigaDB-API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MatchdataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def getavailablegroups_league_shortcut_league_season_get(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getavailablegroups_league_shortcut_league_season_get(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getavailablegroups_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
        else:
            (data) = self.getavailablegroups_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
            return data

    def getavailablegroups_league_shortcut_league_season_get_with_http_info(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getavailablegroups_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :return: list[Group]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut', 'league_season']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getavailablegroups_league_shortcut_league_season_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getavailablegroups_league_shortcut_league_season_get`")  # noqa: E501
        # verify the required parameter 'league_season' is set
        if ('league_season' not in params or
                params['league_season'] is None):
            raise ValueError("Missing the required parameter `league_season` when calling `getavailablegroups_league_shortcut_league_season_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501
        if 'league_season' in params:
            path_params['leagueSeason'] = params['league_season']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getavailablegroups/{leagueShortcut}/{leagueSeason}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Group]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getavailableleagues_get(self, **kwargs):  # noqa: E501
        """getavailableleagues_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getavailableleagues_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[League]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getavailableleagues_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.getavailableleagues_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def getavailableleagues_get_with_http_info(self, **kwargs):  # noqa: E501
        """getavailableleagues_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getavailableleagues_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[League]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getavailableleagues_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getavailableleagues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[League]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getavailablesports_get(self, **kwargs):  # noqa: E501
        """getavailablesports_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getavailablesports_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Sport]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getavailablesports_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.getavailablesports_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def getavailablesports_get_with_http_info(self, **kwargs):  # noqa: E501
        """getavailablesports_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getavailablesports_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Sport]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getavailablesports_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getavailablesports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Sport]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getavailableteams_league_shortcut_league_season_get(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getavailableteams_league_shortcut_league_season_get(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getavailableteams_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
        else:
            (data) = self.getavailableteams_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
            return data

    def getavailableteams_league_shortcut_league_season_get_with_http_info(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """Eine Liste der Teams der als Parameter zu übergebenden Liga + Saison  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getavailableteams_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :return: list[Team]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut', 'league_season']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getavailableteams_league_shortcut_league_season_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getavailableteams_league_shortcut_league_season_get`")  # noqa: E501
        # verify the required parameter 'league_season' is set
        if ('league_season' not in params or
                params['league_season'] is None):
            raise ValueError("Missing the required parameter `league_season` when calling `getavailableteams_league_shortcut_league_season_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501
        if 'league_season' in params:
            path_params['leagueSeason'] = params['league_season']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getavailableteams/{leagueShortcut}/{leagueSeason}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Team]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getbltable_league_shortcut_league_season_get(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """returns the table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getbltable_league_shortcut_league_season_get(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :return: list[BlTableTeam]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getbltable_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
        else:
            (data) = self.getbltable_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
            return data

    def getbltable_league_shortcut_league_season_get_with_http_info(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """returns the table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getbltable_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :return: list[BlTableTeam]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut', 'league_season']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getbltable_league_shortcut_league_season_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getbltable_league_shortcut_league_season_get`")  # noqa: E501
        # verify the required parameter 'league_season' is set
        if ('league_season' not in params or
                params['league_season'] is None):
            raise ValueError("Missing the required parameter `league_season` when calling `getbltable_league_shortcut_league_season_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501
        if 'league_season' in params:
            path_params['leagueSeason'] = params['league_season']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getbltable/{leagueShortcut}/{leagueSeason}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlTableTeam]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getcurrentgroup_league_shortcut_get(self, league_shortcut, **kwargs):  # noqa: E501
        """Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem 'Spieltag') des als Parameter zu übergebenden leagueShortcuts (z.B. 'bl1') aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getcurrentgroup_league_shortcut_get(league_shortcut, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: der Shortcut der Liga, z.B. 'bl1' für die erste Bundesliga (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getcurrentgroup_league_shortcut_get_with_http_info(league_shortcut, **kwargs)  # noqa: E501
        else:
            (data) = self.getcurrentgroup_league_shortcut_get_with_http_info(league_shortcut, **kwargs)  # noqa: E501
            return data

    def getcurrentgroup_league_shortcut_get_with_http_info(self, league_shortcut, **kwargs):  # noqa: E501
        """Gibt die aktuelle Group (entspricht z.B. bei der Fussball-Bundesliga dem 'Spieltag') des als Parameter zu übergebenden leagueShortcuts (z.B. 'bl1') aus. Der aktuelle Spieltag  wird jeweils zur Hälfte der Zeit zwischen dem letzten Spiel des letzten Spieltages und dem ersten Spiel des nächsten Spieltages erhöht.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getcurrentgroup_league_shortcut_get_with_http_info(league_shortcut, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: der Shortcut der Liga, z.B. 'bl1' für die erste Bundesliga (required)
        :return: Group
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getcurrentgroup_league_shortcut_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getcurrentgroup_league_shortcut_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getcurrentgroup/{leagueShortcut}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Group',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getgoalgetters_league_shortcut_league_season_get(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getgoalgetters_league_shortcut_league_season_get(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :return: list[GoalGetter]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getgoalgetters_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
        else:
            (data) = self.getgoalgetters_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
            return data

    def getgoalgetters_league_shortcut_league_season_get_with_http_info(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """Eine Liste der Spiel-Einteilungen (Spieltag, Vorrunde, Finale, ...) der als Parameter zu übergebenden Liga + Saison  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getgoalgetters_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :return: list[GoalGetter]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut', 'league_season']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getgoalgetters_league_shortcut_league_season_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getgoalgetters_league_shortcut_league_season_get`")  # noqa: E501
        # verify the required parameter 'league_season' is set
        if ('league_season' not in params or
                params['league_season'] is None):
            raise ValueError("Missing the required parameter `league_season` when calling `getgoalgetters_league_shortcut_league_season_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501
        if 'league_season' in params:
            path_params['leagueSeason'] = params['league_season']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getgoalgetters/{leagueShortcut}/{leagueSeason}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GoalGetter]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getgrouptable_league_shortcut_league_season_get(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """returns the table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getgrouptable_league_shortcut_league_season_get(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :return: list[BlTableTeam]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getgrouptable_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
        else:
            (data) = self.getgrouptable_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
            return data

    def getgrouptable_league_shortcut_league_season_get_with_http_info(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """returns the table  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getgrouptable_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :return: list[BlTableTeam]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut', 'league_season']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getgrouptable_league_shortcut_league_season_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getgrouptable_league_shortcut_league_season_get`")  # noqa: E501
        # verify the required parameter 'league_season' is set
        if ('league_season' not in params or
                params['league_season'] is None):
            raise ValueError("Missing the required parameter `league_season` when calling `getgrouptable_league_shortcut_league_season_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501
        if 'league_season' in params:
            path_params['leagueSeason'] = params['league_season']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getgrouptable/{leagueShortcut}/{leagueSeason}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[BlTableTeam]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getlastchangedate_league_shortcut_league_season_group_order_id_get(self, league_shortcut, league_season, group_order_id, **kwargs):  # noqa: E501
        """Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getlastchangedate_league_shortcut_league_season_group_order_id_get(league_shortcut, league_season, group_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: der Shortcut der Liga, z.B. 'bl1' für die erste Bundesliga (required)
        :param int league_season: die Saison der Liga, z.B. 2019 für die Saison 2019/2020 (required)
        :param int group_order_id: beim Fußball der Spieltag, z.B. 1 (required)
        :return: datetime
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getlastchangedate_league_shortcut_league_season_group_order_id_get_with_http_info(league_shortcut, league_season, group_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getlastchangedate_league_shortcut_league_season_group_order_id_get_with_http_info(league_shortcut, league_season, group_order_id, **kwargs)  # noqa: E501
            return data

    def getlastchangedate_league_shortcut_league_season_group_order_id_get_with_http_info(self, league_shortcut, league_season, group_order_id, **kwargs):  # noqa: E501
        """Gibt ein DateTime-Objekt der letzten Änderung der Daten der übergebenen Liga (leagueShortcut) für die übergebene Saison (leagueSeason) für den übergebenen Spieltag (groupOrderId) zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getlastchangedate_league_shortcut_league_season_group_order_id_get_with_http_info(league_shortcut, league_season, group_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: der Shortcut der Liga, z.B. 'bl1' für die erste Bundesliga (required)
        :param int league_season: die Saison der Liga, z.B. 2019 für die Saison 2019/2020 (required)
        :param int group_order_id: beim Fußball der Spieltag, z.B. 1 (required)
        :return: datetime
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut', 'league_season', 'group_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getlastchangedate_league_shortcut_league_season_group_order_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getlastchangedate_league_shortcut_league_season_group_order_id_get`")  # noqa: E501
        # verify the required parameter 'league_season' is set
        if ('league_season' not in params or
                params['league_season'] is None):
            raise ValueError("Missing the required parameter `league_season` when calling `getlastchangedate_league_shortcut_league_season_group_order_id_get`")  # noqa: E501
        # verify the required parameter 'group_order_id' is set
        if ('group_order_id' not in params or
                params['group_order_id'] is None):
            raise ValueError("Missing the required parameter `group_order_id` when calling `getlastchangedate_league_shortcut_league_season_group_order_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501
        if 'league_season' in params:
            path_params['leagueSeason'] = params['league_season']  # noqa: E501
        if 'group_order_id' in params:
            path_params['groupOrderId'] = params['group_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getlastchangedate/{leagueShortcut}/{leagueSeason}/{groupOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='datetime',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getlastmatchbyleagueshortcut_league_shortcut_get(self, league_shortcut, **kwargs):  # noqa: E501
        """Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getlastmatchbyleagueshortcut_league_shortcut_get(league_shortcut, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: Der Liga-Shortcut (required)
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getlastmatchbyleagueshortcut_league_shortcut_get_with_http_info(league_shortcut, **kwargs)  # noqa: E501
        else:
            (data) = self.getlastmatchbyleagueshortcut_league_shortcut_get_with_http_info(league_shortcut, **kwargs)  # noqa: E501
            return data

    def getlastmatchbyleagueshortcut_league_shortcut_get_with_http_info(self, league_shortcut, **kwargs):  # noqa: E501
        """Gibt das letzte Spiel des übergebenen LigaShortcuts zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getlastmatchbyleagueshortcut_league_shortcut_get_with_http_info(league_shortcut, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: Der Liga-Shortcut (required)
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getlastmatchbyleagueshortcut_league_shortcut_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getlastmatchbyleagueshortcut_league_shortcut_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getlastmatchbyleagueshortcut/{leagueShortcut}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Match',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getlastmatchbyleagueteam_league_id_team_id_get(self, league_id, team_id, **kwargs):  # noqa: E501
        """Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getlastmatchbyleagueteam_league_id_team_id_get(league_id, team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: die Id der Liga (required)
        :param int team_id: die Id des Teams (required)
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getlastmatchbyleagueteam_league_id_team_id_get_with_http_info(league_id, team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getlastmatchbyleagueteam_league_id_team_id_get_with_http_info(league_id, team_id, **kwargs)  # noqa: E501
            return data

    def getlastmatchbyleagueteam_league_id_team_id_get_with_http_info(self, league_id, team_id, **kwargs):  # noqa: E501
        """Gibt das letzte zurückliegende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getlastmatchbyleagueteam_league_id_team_id_get_with_http_info(league_id, team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: die Id der Liga (required)
        :param int team_id: die Id des Teams (required)
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'team_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getlastmatchbyleagueteam_league_id_team_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `getlastmatchbyleagueteam_league_id_team_id_get`")  # noqa: E501
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `getlastmatchbyleagueteam_league_id_team_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getlastmatchbyleagueteam/{leagueId}/{teamId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Match',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getmatchdata_league_shortcut_league_season_get(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchdata_league_shortcut_league_season_get(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: der Shortcut der Liga, z.B. 'bl1' für die erste Bundesliga (required)
        :param int league_season: die Saison der Liga, z.B. 2019 für die Saison 2019/2020 (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getmatchdata_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
        else:
            (data) = self.getmatchdata_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, **kwargs)  # noqa: E501
            return data

    def getmatchdata_league_shortcut_league_season_get_with_http_info(self, league_shortcut, league_season, **kwargs):  # noqa: E501
        """Gibt eine Struktur von Spieldaten aller Spiele der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchdata_league_shortcut_league_season_get_with_http_info(league_shortcut, league_season, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: der Shortcut der Liga, z.B. 'bl1' für die erste Bundesliga (required)
        :param int league_season: die Saison der Liga, z.B. 2019 für die Saison 2019/2020 (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut', 'league_season']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmatchdata_league_shortcut_league_season_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getmatchdata_league_shortcut_league_season_get`")  # noqa: E501
        # verify the required parameter 'league_season' is set
        if ('league_season' not in params or
                params['league_season'] is None):
            raise ValueError("Missing the required parameter `league_season` when calling `getmatchdata_league_shortcut_league_season_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501
        if 'league_season' in params:
            path_params['leagueSeason'] = params['league_season']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getmatchdata/{leagueShortcut}/{leagueSeason}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getmatchdata_league_shortcut_league_season_group_order_id_get(self, league_shortcut, league_season, group_order_id, **kwargs):  # noqa: E501
        """getmatchdata_league_shortcut_league_season_group_order_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchdata_league_shortcut_league_season_group_order_id_get(league_shortcut, league_season, group_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :param int group_order_id: (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getmatchdata_league_shortcut_league_season_group_order_id_get_with_http_info(league_shortcut, league_season, group_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getmatchdata_league_shortcut_league_season_group_order_id_get_with_http_info(league_shortcut, league_season, group_order_id, **kwargs)  # noqa: E501
            return data

    def getmatchdata_league_shortcut_league_season_group_order_id_get_with_http_info(self, league_shortcut, league_season, group_order_id, **kwargs):  # noqa: E501
        """getmatchdata_league_shortcut_league_season_group_order_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchdata_league_shortcut_league_season_group_order_id_get_with_http_info(league_shortcut, league_season, group_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: (required)
        :param int league_season: (required)
        :param int group_order_id: (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut', 'league_season', 'group_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmatchdata_league_shortcut_league_season_group_order_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getmatchdata_league_shortcut_league_season_group_order_id_get`")  # noqa: E501
        # verify the required parameter 'league_season' is set
        if ('league_season' not in params or
                params['league_season'] is None):
            raise ValueError("Missing the required parameter `league_season` when calling `getmatchdata_league_shortcut_league_season_group_order_id_get`")  # noqa: E501
        # verify the required parameter 'group_order_id' is set
        if ('group_order_id' not in params or
                params['group_order_id'] is None):
            raise ValueError("Missing the required parameter `group_order_id` when calling `getmatchdata_league_shortcut_league_season_group_order_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501
        if 'league_season' in params:
            path_params['leagueSeason'] = params['league_season']  # noqa: E501
        if 'group_order_id' in params:
            path_params['groupOrderId'] = params['group_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getmatchdata/{leagueShortcut}/{leagueSeason}/{groupOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getmatchdata_league_shortcut_league_season_team_filterstring_get(self, league_shortcut, league_season, team_filterstring, **kwargs):  # noqa: E501
        """Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \"teamFilterstring\" übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchdata_league_shortcut_league_season_team_filterstring_get(league_shortcut, league_season, team_filterstring, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: der Shortcut der Liga, z.B. 'bl1' für die erste Bundesliga (required)
        :param int league_season: die Saison der Liga, z.B. 2019 für die Saison 2019/2020 (required)
        :param str team_filterstring: Name bzw. Teil des Namens eines Teams (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getmatchdata_league_shortcut_league_season_team_filterstring_get_with_http_info(league_shortcut, league_season, team_filterstring, **kwargs)  # noqa: E501
        else:
            (data) = self.getmatchdata_league_shortcut_league_season_team_filterstring_get_with_http_info(league_shortcut, league_season, team_filterstring, **kwargs)  # noqa: E501
            return data

    def getmatchdata_league_shortcut_league_season_team_filterstring_get_with_http_info(self, league_shortcut, league_season, team_filterstring, **kwargs):  # noqa: E501
        """Gibt eine Struktur von Spieldaten aller Spiele eines Teams der übergebenen Liga (leagueShortcut) für die gesamte übergebene Saison (leagueSeason) für das im \"teamFilterstring\" übergebene Team zurueck.   Hier reicht ein Teil des Vereinsnamen aus.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchdata_league_shortcut_league_season_team_filterstring_get_with_http_info(league_shortcut, league_season, team_filterstring, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: der Shortcut der Liga, z.B. 'bl1' für die erste Bundesliga (required)
        :param int league_season: die Saison der Liga, z.B. 2019 für die Saison 2019/2020 (required)
        :param str team_filterstring: Name bzw. Teil des Namens eines Teams (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut', 'league_season', 'team_filterstring']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmatchdata_league_shortcut_league_season_team_filterstring_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getmatchdata_league_shortcut_league_season_team_filterstring_get`")  # noqa: E501
        # verify the required parameter 'league_season' is set
        if ('league_season' not in params or
                params['league_season'] is None):
            raise ValueError("Missing the required parameter `league_season` when calling `getmatchdata_league_shortcut_league_season_team_filterstring_get`")  # noqa: E501
        # verify the required parameter 'team_filterstring' is set
        if ('team_filterstring' not in params or
                params['team_filterstring'] is None):
            raise ValueError("Missing the required parameter `team_filterstring` when calling `getmatchdata_league_shortcut_league_season_team_filterstring_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501
        if 'league_season' in params:
            path_params['leagueSeason'] = params['league_season']  # noqa: E501
        if 'team_filterstring' in params:
            path_params['teamFilterstring'] = params['team_filterstring']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getmatchdata/{leagueShortcut}/{leagueSeason}/{teamFilterstring}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getmatchdata_match_id_get(self, match_id, **kwargs):  # noqa: E501
        """getmatchdata_match_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchdata_match_id_get(match_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int match_id: (required)
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getmatchdata_match_id_get_with_http_info(match_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getmatchdata_match_id_get_with_http_info(match_id, **kwargs)  # noqa: E501
            return data

    def getmatchdata_match_id_get_with_http_info(self, match_id, **kwargs):  # noqa: E501
        """getmatchdata_match_id_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchdata_match_id_get_with_http_info(match_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int match_id: (required)
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['match_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmatchdata_match_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'match_id' is set
        if ('match_id' not in params or
                params['match_id'] is None):
            raise ValueError("Missing the required parameter `match_id` when calling `getmatchdata_match_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'match_id' in params:
            path_params['matchId'] = params['match_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getmatchdata/{matchId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Match',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getmatchdata_team_id1_team_id2_get(self, team_id1, team_id2, **kwargs):  # noqa: E501
        """Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchdata_team_id1_team_id2_get(team_id1, team_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id1: die Id des ersten Teams (required)
        :param int team_id2: die Id des anderen Teams (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getmatchdata_team_id1_team_id2_get_with_http_info(team_id1, team_id2, **kwargs)  # noqa: E501
        else:
            (data) = self.getmatchdata_team_id1_team_id2_get_with_http_info(team_id1, team_id2, **kwargs)  # noqa: E501
            return data

    def getmatchdata_team_id1_team_id2_get_with_http_info(self, team_id1, team_id2, **kwargs):  # noqa: E501
        """Gibt eine Struktur von Matches zurück, bei welchen die als Parameter übergebenen Teams gegeneinander spielen.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchdata_team_id1_team_id2_get_with_http_info(team_id1, team_id2, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id1: die Id des ersten Teams (required)
        :param int team_id2: die Id des anderen Teams (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id1', 'team_id2']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmatchdata_team_id1_team_id2_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id1' is set
        if ('team_id1' not in params or
                params['team_id1'] is None):
            raise ValueError("Missing the required parameter `team_id1` when calling `getmatchdata_team_id1_team_id2_get`")  # noqa: E501
        # verify the required parameter 'team_id2' is set
        if ('team_id2' not in params or
                params['team_id2'] is None):
            raise ValueError("Missing the required parameter `team_id2` when calling `getmatchdata_team_id1_team_id2_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id1' in params:
            path_params['teamId1'] = params['team_id1']  # noqa: E501
        if 'team_id2' in params:
            path_params['teamId2'] = params['team_id2']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getmatchdata/{teamId1}/{teamId2}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get(self, team_filterstring, week_count_past, week_count_future, **kwargs):  # noqa: E501
        """getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get(team_filterstring, week_count_past, week_count_future, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_filterstring: (required)
        :param int week_count_past: (required)
        :param int week_count_future: (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get_with_http_info(team_filterstring, week_count_past, week_count_future, **kwargs)  # noqa: E501
        else:
            (data) = self.getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get_with_http_info(team_filterstring, week_count_past, week_count_future, **kwargs)  # noqa: E501
            return data

    def getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get_with_http_info(self, team_filterstring, week_count_past, week_count_future, **kwargs):  # noqa: E501
        """getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get_with_http_info(team_filterstring, week_count_past, week_count_future, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str team_filterstring: (required)
        :param int week_count_past: (required)
        :param int week_count_future: (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_filterstring', 'week_count_past', 'week_count_future']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_filterstring' is set
        if ('team_filterstring' not in params or
                params['team_filterstring'] is None):
            raise ValueError("Missing the required parameter `team_filterstring` when calling `getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get`")  # noqa: E501
        # verify the required parameter 'week_count_past' is set
        if ('week_count_past' not in params or
                params['week_count_past'] is None):
            raise ValueError("Missing the required parameter `week_count_past` when calling `getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get`")  # noqa: E501
        # verify the required parameter 'week_count_future' is set
        if ('week_count_future' not in params or
                params['week_count_future'] is None):
            raise ValueError("Missing the required parameter `week_count_future` when calling `getmatchesbyteam_team_filterstring_week_count_past_week_count_future_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_filterstring' in params:
            path_params['teamFilterstring'] = params['team_filterstring']  # noqa: E501
        if 'week_count_past' in params:
            path_params['weekCountPast'] = params['week_count_past']  # noqa: E501
        if 'week_count_future' in params:
            path_params['weekCountFuture'] = params['week_count_future']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getmatchesbyteam/{teamFilterstring}/{weekCountPast}/{weekCountFuture}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getmatchesbyteamid_team_id_week_count_past_week_count_future_get(self, team_id, week_count_past, week_count_future, **kwargs):  # noqa: E501
        """getmatchesbyteamid_team_id_week_count_past_week_count_future_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchesbyteamid_team_id_week_count_past_week_count_future_get(team_id, week_count_past, week_count_future, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: (required)
        :param int week_count_past: (required)
        :param int week_count_future: (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getmatchesbyteamid_team_id_week_count_past_week_count_future_get_with_http_info(team_id, week_count_past, week_count_future, **kwargs)  # noqa: E501
        else:
            (data) = self.getmatchesbyteamid_team_id_week_count_past_week_count_future_get_with_http_info(team_id, week_count_past, week_count_future, **kwargs)  # noqa: E501
            return data

    def getmatchesbyteamid_team_id_week_count_past_week_count_future_get_with_http_info(self, team_id, week_count_past, week_count_future, **kwargs):  # noqa: E501
        """getmatchesbyteamid_team_id_week_count_past_week_count_future_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getmatchesbyteamid_team_id_week_count_past_week_count_future_get_with_http_info(team_id, week_count_past, week_count_future, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int team_id: (required)
        :param int week_count_past: (required)
        :param int week_count_future: (required)
        :return: list[Match]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['team_id', 'week_count_past', 'week_count_future']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getmatchesbyteamid_team_id_week_count_past_week_count_future_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `getmatchesbyteamid_team_id_week_count_past_week_count_future_get`")  # noqa: E501
        # verify the required parameter 'week_count_past' is set
        if ('week_count_past' not in params or
                params['week_count_past'] is None):
            raise ValueError("Missing the required parameter `week_count_past` when calling `getmatchesbyteamid_team_id_week_count_past_week_count_future_get`")  # noqa: E501
        # verify the required parameter 'week_count_future' is set
        if ('week_count_future' not in params or
                params['week_count_future'] is None):
            raise ValueError("Missing the required parameter `week_count_future` when calling `getmatchesbyteamid_team_id_week_count_past_week_count_future_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501
        if 'week_count_past' in params:
            path_params['weekCountPast'] = params['week_count_past']  # noqa: E501
        if 'week_count_future' in params:
            path_params['weekCountFuture'] = params['week_count_future']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getmatchesbyteamid/{teamId}/{weekCountPast}/{weekCountFuture}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Match]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getnextmatchbyleagueshortcut_league_shortcut_get(self, league_shortcut, **kwargs):  # noqa: E501
        """Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getnextmatchbyleagueshortcut_league_shortcut_get(league_shortcut, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: Der Liga-Shortcut (required)
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getnextmatchbyleagueshortcut_league_shortcut_get_with_http_info(league_shortcut, **kwargs)  # noqa: E501
        else:
            (data) = self.getnextmatchbyleagueshortcut_league_shortcut_get_with_http_info(league_shortcut, **kwargs)  # noqa: E501
            return data

    def getnextmatchbyleagueshortcut_league_shortcut_get_with_http_info(self, league_shortcut, **kwargs):  # noqa: E501
        """Gibt das nächste folgende Spiel des übergebenen LigaShortcuts zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getnextmatchbyleagueshortcut_league_shortcut_get_with_http_info(league_shortcut, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str league_shortcut: Der Liga-Shortcut (required)
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_shortcut']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getnextmatchbyleagueshortcut_league_shortcut_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_shortcut' is set
        if ('league_shortcut' not in params or
                params['league_shortcut'] is None):
            raise ValueError("Missing the required parameter `league_shortcut` when calling `getnextmatchbyleagueshortcut_league_shortcut_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_shortcut' in params:
            path_params['leagueShortcut'] = params['league_shortcut']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getnextmatchbyleagueshortcut/{leagueShortcut}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Match',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getnextmatchbyleagueteam_league_id_team_id_get(self, league_id, team_id, **kwargs):  # noqa: E501
        """Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getnextmatchbyleagueteam_league_id_team_id_get(league_id, team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: die Id der Liga (required)
        :param int team_id: die Id des Teams (required)
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getnextmatchbyleagueteam_league_id_team_id_get_with_http_info(league_id, team_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getnextmatchbyleagueteam_league_id_team_id_get_with_http_info(league_id, team_id, **kwargs)  # noqa: E501
            return data

    def getnextmatchbyleagueteam_league_id_team_id_get_with_http_info(self, league_id, team_id, **kwargs):  # noqa: E501
        """Gibt das nächste folgende Spiel der übergebenen Liga (leagueId) des übergebenen Teams (teamId) zurueck.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getnextmatchbyleagueteam_league_id_team_id_get_with_http_info(league_id, team_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: die Id der Liga (required)
        :param int team_id: die Id des Teams (required)
        :return: Match
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id', 'team_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getnextmatchbyleagueteam_league_id_team_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `getnextmatchbyleagueteam_league_id_team_id_get`")  # noqa: E501
        # verify the required parameter 'team_id' is set
        if ('team_id' not in params or
                params['team_id'] is None):
            raise ValueError("Missing the required parameter `team_id` when calling `getnextmatchbyleagueteam_league_id_team_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501
        if 'team_id' in params:
            path_params['teamId'] = params['team_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getnextmatchbyleagueteam/{leagueId}/{teamId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Match',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def getresultinfos_league_id_get(self, league_id, **kwargs):  # noqa: E501
        """Gibt die für diese Liga konfigurierten Ergebnistypen zurück!  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getresultinfos_league_id_get(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Id der Liga, z.B. '4500' für die erste Bundesliga 2021/2022 (required)
        :return: ResultInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.getresultinfos_league_id_get_with_http_info(league_id, **kwargs)  # noqa: E501
        else:
            (data) = self.getresultinfos_league_id_get_with_http_info(league_id, **kwargs)  # noqa: E501
            return data

    def getresultinfos_league_id_get_with_http_info(self, league_id, **kwargs):  # noqa: E501
        """Gibt die für diese Liga konfigurierten Ergebnistypen zurück!  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.getresultinfos_league_id_get_with_http_info(league_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int league_id: Id der Liga, z.B. '4500' für die erste Bundesliga 2021/2022 (required)
        :return: ResultInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['league_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method getresultinfos_league_id_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'league_id' is set
        if ('league_id' not in params or
                params['league_id'] is None):
            raise ValueError("Missing the required parameter `league_id` when calling `getresultinfos_league_id_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'league_id' in params:
            path_params['leagueId'] = params['league_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/getresultinfos/{leagueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResultInfo',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
