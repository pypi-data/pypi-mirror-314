from dataclasses import dataclass, field
from datetime import date as _date
from typing import Self

from dateutil.rrule import rrule
from stockholm import Money


@dataclass
class Transaction:
    """A single transaction record."""

    amount: Money
    description: str
    date: _date = field(default_factory=_date.today)
    parent: "Transaction | None" = field(default=None, kw_only=True)

    def __lt__(self, other: Self):
        """Compare transactions based on their date for ordering."""
        return self.date < other.date


@dataclass(kw_only=True)
class RecurringTransaction(Transaction):
    """
    A transaction that repeats on a schedule described by a
    `dateutil.rrule.rrule`.
    """

    schedule: rrule

    def __iter__(self):
        """
        Yield transactions generated by the recurring rule, each with the
        specified amount and description, and link them to this recurring
        transaction as their parent.
        """
        for next in self.schedule:
            yield Transaction(
                date=next.date(),
                amount=self.amount,
                description=self.description,
                parent=self,
            )
