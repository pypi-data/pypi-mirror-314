# coding: utf-8

"""
    DigitalRebar Provision Server

    An RestFUL API-driven Provisioner and DHCP server  # noqa: E501

    OpenAPI spec version: 4.0.0
    Contact: greg@rackn.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from drppy_client.configuration import Configuration


class JobAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'meta': 'dict(str, str)',
        'name': 'str',
        'path': 'str'
    }

    attribute_map = {
        'content': 'Content',
        'meta': 'Meta',
        'name': 'Name',
        'path': 'Path'
    }

    def __init__(self, content=None, meta=None, name=None, path=None, _configuration=None):  # noqa: E501
        """JobAction - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._content = None
        self._meta = None
        self._name = None
        self._path = None
        self.discriminator = None

        self.content = content
        self.meta = meta
        self.name = name
        self.path = path

    @property
    def content(self):
        """Gets the content of this JobAction.  # noqa: E501

        Content is the rendered version of the Template on the Task corresponding to this JobAction.  # noqa: E501

        :return: The content of this JobAction.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this JobAction.

        Content is the rendered version of the Template on the Task corresponding to this JobAction.  # noqa: E501

        :param content: The content of this JobAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def meta(self):
        """Gets the meta of this JobAction.  # noqa: E501

        Meta is a copt of the Meta field of the corresponding Template from the Task this Job was built from.  # noqa: E501

        :return: The meta of this JobAction.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this JobAction.

        Meta is a copt of the Meta field of the corresponding Template from the Task this Job was built from.  # noqa: E501

        :param meta: The meta of this JobAction.  # noqa: E501
        :type: dict(str, str)
        """
        if self._configuration.client_side_validation and meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")  # noqa: E501

        self._meta = meta

    @property
    def name(self):
        """Gets the name of this JobAction.  # noqa: E501

        Name is the name of this particular JobAction.  It is taken from the name of the corresponding Template on the Task this Action was rendered from.  # noqa: E501

        :return: The name of this JobAction.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobAction.

        Name is the name of this particular JobAction.  It is taken from the name of the corresponding Template on the Task this Action was rendered from.  # noqa: E501

        :param name: The name of this JobAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this JobAction.  # noqa: E501

        Path is the location that Content should be written to on disk.  If Path is absolute, it will be written in that location.  If Path is relative, it will be written relative to the temporary direcory created for running the Job in.  If Path is empty, then Content is interpreted as a script to be run.  # noqa: E501

        :return: The path of this JobAction.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this JobAction.

        Path is the location that Content should be written to on disk.  If Path is absolute, it will be written in that location.  If Path is relative, it will be written relative to the temporary direcory created for running the Job in.  If Path is empty, then Content is interpreted as a script to be run.  # noqa: E501

        :param path: The path of this JobAction.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobAction):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobAction):
            return True

        return self.to_dict() != other.to_dict()
