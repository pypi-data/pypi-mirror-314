
// Generated from D:/a/pyA2L/pyA2L/pya2l/aml.g4 by ANTLR 4.13.2


#include "amlLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct AmlLexerStaticData final {
  AmlLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  AmlLexerStaticData(const AmlLexerStaticData&) = delete;
  AmlLexerStaticData(AmlLexerStaticData&&) = delete;
  AmlLexerStaticData& operator=(const AmlLexerStaticData&) = delete;
  AmlLexerStaticData& operator=(AmlLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag amllexerLexerOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
std::unique_ptr<AmlLexerStaticData> amllexerLexerStaticData = nullptr;

void amllexerLexerInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (amllexerLexerStaticData != nullptr) {
    return;
  }
#else
  assert(amllexerLexerStaticData == nullptr);
#endif
  auto staticData = std::make_unique<AmlLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "INT", "HEX", "FLOAT", "ID", "TAG", "COMMENT", 
      "WS", "STRING", "EXPONENT", "HEX_DIGIT", "ESC_SEQ", "OCTAL_ESC"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'/begin'", "'A2ML'", "'/end'", "';'", "'char'", "'int'", "'long'", 
      "'uchar'", "'uint'", "'ulong'", "'int64'", "'uint64'", "'double'", 
      "'float'", "'block'", "'enum'", "'{'", "'}'", "','", "'='", "'struct'", 
      "'['", "']'", "'taggedstruct'", "'('", "')'", "'*'", "'taggedunion'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "INT", "HEX", "FLOAT", 
      "ID", "TAG", "COMMENT", "WS", "STRING"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,36,343,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,1,0,1,0,1,0,1,0,1,0,1,0,
  	1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,
  	4,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,
  	1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,
  	1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
  	1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,
  	1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,
  	1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,4,28,220,8,28,
  	11,28,12,28,221,1,29,1,29,1,29,4,29,227,8,29,11,29,12,29,228,1,30,3,30,
  	232,8,30,1,30,4,30,235,8,30,11,30,12,30,236,1,30,1,30,5,30,241,8,30,10,
  	30,12,30,244,9,30,1,30,3,30,247,8,30,1,30,1,30,4,30,251,8,30,11,30,12,
  	30,252,1,30,3,30,256,8,30,1,30,4,30,259,8,30,11,30,12,30,260,1,30,3,30,
  	264,8,30,1,31,4,31,267,8,31,11,31,12,31,268,1,32,1,32,1,32,1,32,1,33,
  	1,33,1,33,1,33,5,33,279,8,33,10,33,12,33,282,9,33,1,33,3,33,285,8,33,
  	1,33,1,33,1,33,1,33,1,33,5,33,292,8,33,10,33,12,33,295,9,33,1,33,1,33,
  	3,33,299,8,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,5,35,310,8,
  	35,10,35,12,35,313,9,35,1,35,1,35,1,36,1,36,3,36,319,8,36,1,36,4,36,322,
  	8,36,11,36,12,36,323,1,37,1,37,1,38,1,38,1,38,3,38,331,8,38,1,39,1,39,
  	1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,342,8,39,1,293,0,40,1,1,3,2,5,
  	3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,0,75,0,77,0,
  	79,0,1,0,9,2,0,88,88,120,120,3,0,48,57,65,70,97,102,2,0,43,43,45,45,4,
  	0,48,57,65,90,95,95,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,2,0,34,
  	34,92,92,2,0,69,69,101,101,8,0,34,34,39,39,92,92,98,98,102,102,110,110,
  	114,114,116,116,361,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,
  	9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
  	0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
  	0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
  	41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
  	0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
  	0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,
  	81,1,0,0,0,3,88,1,0,0,0,5,93,1,0,0,0,7,98,1,0,0,0,9,100,1,0,0,0,11,105,
  	1,0,0,0,13,109,1,0,0,0,15,114,1,0,0,0,17,120,1,0,0,0,19,125,1,0,0,0,21,
  	131,1,0,0,0,23,137,1,0,0,0,25,144,1,0,0,0,27,151,1,0,0,0,29,157,1,0,0,
  	0,31,163,1,0,0,0,33,168,1,0,0,0,35,170,1,0,0,0,37,172,1,0,0,0,39,174,
  	1,0,0,0,41,176,1,0,0,0,43,183,1,0,0,0,45,185,1,0,0,0,47,187,1,0,0,0,49,
  	200,1,0,0,0,51,202,1,0,0,0,53,204,1,0,0,0,55,206,1,0,0,0,57,219,1,0,0,
  	0,59,223,1,0,0,0,61,231,1,0,0,0,63,266,1,0,0,0,65,270,1,0,0,0,67,298,
  	1,0,0,0,69,302,1,0,0,0,71,306,1,0,0,0,73,316,1,0,0,0,75,325,1,0,0,0,77,
  	330,1,0,0,0,79,341,1,0,0,0,81,82,5,47,0,0,82,83,5,98,0,0,83,84,5,101,
  	0,0,84,85,5,103,0,0,85,86,5,105,0,0,86,87,5,110,0,0,87,2,1,0,0,0,88,89,
  	5,65,0,0,89,90,5,50,0,0,90,91,5,77,0,0,91,92,5,76,0,0,92,4,1,0,0,0,93,
  	94,5,47,0,0,94,95,5,101,0,0,95,96,5,110,0,0,96,97,5,100,0,0,97,6,1,0,
  	0,0,98,99,5,59,0,0,99,8,1,0,0,0,100,101,5,99,0,0,101,102,5,104,0,0,102,
  	103,5,97,0,0,103,104,5,114,0,0,104,10,1,0,0,0,105,106,5,105,0,0,106,107,
  	5,110,0,0,107,108,5,116,0,0,108,12,1,0,0,0,109,110,5,108,0,0,110,111,
  	5,111,0,0,111,112,5,110,0,0,112,113,5,103,0,0,113,14,1,0,0,0,114,115,
  	5,117,0,0,115,116,5,99,0,0,116,117,5,104,0,0,117,118,5,97,0,0,118,119,
  	5,114,0,0,119,16,1,0,0,0,120,121,5,117,0,0,121,122,5,105,0,0,122,123,
  	5,110,0,0,123,124,5,116,0,0,124,18,1,0,0,0,125,126,5,117,0,0,126,127,
  	5,108,0,0,127,128,5,111,0,0,128,129,5,110,0,0,129,130,5,103,0,0,130,20,
  	1,0,0,0,131,132,5,105,0,0,132,133,5,110,0,0,133,134,5,116,0,0,134,135,
  	5,54,0,0,135,136,5,52,0,0,136,22,1,0,0,0,137,138,5,117,0,0,138,139,5,
  	105,0,0,139,140,5,110,0,0,140,141,5,116,0,0,141,142,5,54,0,0,142,143,
  	5,52,0,0,143,24,1,0,0,0,144,145,5,100,0,0,145,146,5,111,0,0,146,147,5,
  	117,0,0,147,148,5,98,0,0,148,149,5,108,0,0,149,150,5,101,0,0,150,26,1,
  	0,0,0,151,152,5,102,0,0,152,153,5,108,0,0,153,154,5,111,0,0,154,155,5,
  	97,0,0,155,156,5,116,0,0,156,28,1,0,0,0,157,158,5,98,0,0,158,159,5,108,
  	0,0,159,160,5,111,0,0,160,161,5,99,0,0,161,162,5,107,0,0,162,30,1,0,0,
  	0,163,164,5,101,0,0,164,165,5,110,0,0,165,166,5,117,0,0,166,167,5,109,
  	0,0,167,32,1,0,0,0,168,169,5,123,0,0,169,34,1,0,0,0,170,171,5,125,0,0,
  	171,36,1,0,0,0,172,173,5,44,0,0,173,38,1,0,0,0,174,175,5,61,0,0,175,40,
  	1,0,0,0,176,177,5,115,0,0,177,178,5,116,0,0,178,179,5,114,0,0,179,180,
  	5,117,0,0,180,181,5,99,0,0,181,182,5,116,0,0,182,42,1,0,0,0,183,184,5,
  	91,0,0,184,44,1,0,0,0,185,186,5,93,0,0,186,46,1,0,0,0,187,188,5,116,0,
  	0,188,189,5,97,0,0,189,190,5,103,0,0,190,191,5,103,0,0,191,192,5,101,
  	0,0,192,193,5,100,0,0,193,194,5,115,0,0,194,195,5,116,0,0,195,196,5,114,
  	0,0,196,197,5,117,0,0,197,198,5,99,0,0,198,199,5,116,0,0,199,48,1,0,0,
  	0,200,201,5,40,0,0,201,50,1,0,0,0,202,203,5,41,0,0,203,52,1,0,0,0,204,
  	205,5,42,0,0,205,54,1,0,0,0,206,207,5,116,0,0,207,208,5,97,0,0,208,209,
  	5,103,0,0,209,210,5,103,0,0,210,211,5,101,0,0,211,212,5,100,0,0,212,213,
  	5,117,0,0,213,214,5,110,0,0,214,215,5,105,0,0,215,216,5,111,0,0,216,217,
  	5,110,0,0,217,56,1,0,0,0,218,220,2,48,57,0,219,218,1,0,0,0,220,221,1,
  	0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,58,1,0,0,0,223,224,5,48,0,0,
  	224,226,7,0,0,0,225,227,7,1,0,0,226,225,1,0,0,0,227,228,1,0,0,0,228,226,
  	1,0,0,0,228,229,1,0,0,0,229,60,1,0,0,0,230,232,7,2,0,0,231,230,1,0,0,
  	0,231,232,1,0,0,0,232,263,1,0,0,0,233,235,2,48,57,0,234,233,1,0,0,0,235,
  	236,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,242,5,
  	46,0,0,239,241,2,48,57,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,
  	0,0,242,243,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,245,247,3,73,36,0,
  	246,245,1,0,0,0,246,247,1,0,0,0,247,264,1,0,0,0,248,250,5,46,0,0,249,
  	251,2,48,57,0,250,249,1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,253,
  	1,0,0,0,253,255,1,0,0,0,254,256,3,73,36,0,255,254,1,0,0,0,255,256,1,0,
  	0,0,256,264,1,0,0,0,257,259,2,48,57,0,258,257,1,0,0,0,259,260,1,0,0,0,
  	260,258,1,0,0,0,260,261,1,0,0,0,261,262,1,0,0,0,262,264,3,73,36,0,263,
  	234,1,0,0,0,263,248,1,0,0,0,263,258,1,0,0,0,264,62,1,0,0,0,265,267,7,
  	3,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,
  	269,64,1,0,0,0,270,271,5,34,0,0,271,272,3,63,31,0,272,273,5,34,0,0,273,
  	66,1,0,0,0,274,275,5,47,0,0,275,276,5,47,0,0,276,280,1,0,0,0,277,279,
  	8,4,0,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,
  	0,281,284,1,0,0,0,282,280,1,0,0,0,283,285,5,13,0,0,284,283,1,0,0,0,284,
  	285,1,0,0,0,285,286,1,0,0,0,286,299,5,10,0,0,287,288,5,47,0,0,288,289,
  	5,42,0,0,289,293,1,0,0,0,290,292,9,0,0,0,291,290,1,0,0,0,292,295,1,0,
  	0,0,293,294,1,0,0,0,293,291,1,0,0,0,294,296,1,0,0,0,295,293,1,0,0,0,296,
  	297,5,42,0,0,297,299,5,47,0,0,298,274,1,0,0,0,298,287,1,0,0,0,299,300,
  	1,0,0,0,300,301,6,33,0,0,301,68,1,0,0,0,302,303,7,5,0,0,303,304,1,0,0,
  	0,304,305,6,34,1,0,305,70,1,0,0,0,306,311,5,34,0,0,307,310,3,77,38,0,
  	308,310,8,6,0,0,309,307,1,0,0,0,309,308,1,0,0,0,310,313,1,0,0,0,311,309,
  	1,0,0,0,311,312,1,0,0,0,312,314,1,0,0,0,313,311,1,0,0,0,314,315,5,34,
  	0,0,315,72,1,0,0,0,316,318,7,7,0,0,317,319,7,2,0,0,318,317,1,0,0,0,318,
  	319,1,0,0,0,319,321,1,0,0,0,320,322,2,48,57,0,321,320,1,0,0,0,322,323,
  	1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,74,1,0,0,0,325,326,7,1,0,
  	0,326,76,1,0,0,0,327,328,5,92,0,0,328,331,7,8,0,0,329,331,3,79,39,0,330,
  	327,1,0,0,0,330,329,1,0,0,0,331,78,1,0,0,0,332,333,5,92,0,0,333,334,2,
  	48,51,0,334,335,2,48,55,0,335,342,2,48,55,0,336,337,5,92,0,0,337,338,
  	2,48,55,0,338,342,2,48,55,0,339,340,5,92,0,0,340,342,2,48,55,0,341,332,
  	1,0,0,0,341,336,1,0,0,0,341,339,1,0,0,0,342,80,1,0,0,0,22,0,221,228,231,
  	236,242,246,252,255,260,263,268,280,284,293,298,309,311,318,323,330,341,
  	2,0,1,0,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  amllexerLexerStaticData = std::move(staticData);
}

}

amlLexer::amlLexer(CharStream *input) : Lexer(input) {
  amlLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *amllexerLexerStaticData->atn, amllexerLexerStaticData->decisionToDFA, amllexerLexerStaticData->sharedContextCache);
}

amlLexer::~amlLexer() {
  delete _interpreter;
}

std::string amlLexer::getGrammarFileName() const {
  return "aml.g4";
}

const std::vector<std::string>& amlLexer::getRuleNames() const {
  return amllexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& amlLexer::getChannelNames() const {
  return amllexerLexerStaticData->channelNames;
}

const std::vector<std::string>& amlLexer::getModeNames() const {
  return amllexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& amlLexer::getVocabulary() const {
  return amllexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView amlLexer::getSerializedATN() const {
  return amllexerLexerStaticData->serializedATN;
}

const atn::ATN& amlLexer::getATN() const {
  return *amllexerLexerStaticData->atn;
}




void amlLexer::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  amllexerLexerInitialize();
#else
  ::antlr4::internal::call_once(amllexerLexerOnceFlag, amllexerLexerInitialize);
#endif
}
