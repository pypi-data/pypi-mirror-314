[project]
name = "Flask-SQLAlchemy-compat-backend-py37"
description = "Flask SQLAlchemy backend supporting the Python 3.7 version of Flask SQLAlchemy compat."
readme = "README.rst"
license = { file = "LICENSE.rst" }
maintainers = [{name = "Pallets", email = "contact@palletsprojects.com"},]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
]
requires-python = ">=3.7,<3.8"
dependencies = [
    "flask>=2.2.5",
    "sqlalchemy>=2.0.0",
    "flask-sqlalchemy",
]
dynamic = ["version"]

[project.urls]
Donate = "https://palletsprojects.com/donate"
Documentation = "https://flask-sqlalchemy.palletsprojects.com"
Changes = "https://flask-sqlalchemy.palletsprojects.com/changes/"
"Source Code" = "https://github.com/pallets-eco/flask-sqlalchemy/"
"Issue Tracker" = "https://github.com/pallets-eco/flask-sqlalchemy/issues/"
Chat = "https://discord.gg/pallets"

[build-system]
requires = ["setuptools", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["flask_sqlalchemy", "flask_sqlalchemy_py37"]
zip-safe = true
include-package-data = false

[tool.setuptools.dynamic]
version = { attr = "version.__version__" }

[tool.setuptools.package-dir]
flask_sqlalchemy = "src/flask_sqlalchemy"
flask_sqlalchemy_py37 = "src/flask_sqlalchemy"

[tool.pytest.ini_options]
testpaths = ["tests"]
filterwarnings = ["error"]

[tool.coverage.run]
branch = true
source = ["flask_sqlalchemy", "tests"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]

[tool.mypy]
python_version = "3.7"
files = ["src/flask_sqlalchemy", "tests"]
show_error_codes = true
pretty = true
strict = true
# db.Model attribute doesn't recognize subclassing
disable_error_code = ["name-defined"]
# db.Model is Any
disallow_subclassing_any = false

[[tool.mypy.overrides]]
module = [
    "cryptography.*",
    "importlib_metadata.*",
]
ignore_missing_imports = true
