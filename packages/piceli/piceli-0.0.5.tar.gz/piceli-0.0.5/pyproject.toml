[tool.poetry]
name = "piceli"
version = "0.0.5"
description = "Infrastructure for python"
authors = ["Jose Diaz"]
license = "MIT License"
readme = "README.md"
homepage = "https://www.pynenc.org"
documentation = "https://docs.piceli.pynenc.org"
repository = "https://github.com/pynenc/piceli"
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Environment :: Console",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
include = ["piceli/py.typed"]


[tool.poetry.scripts]
piceli = 'piceli.__main__:main'


[tool.poetry.dependencies]
python = ">=3.11.6,<4.0"
textual = "^0.49.0"
kubernetes = "^29.0.0"
tenacity = "^8.2.3"
cron-validator = "^1.0.8"
pydantic = "^2.6.1"
typer = { extras = ["all"], version = "^0.9.0" }
cistell = "^0.0.4"

[tool.poetry.group.gcp]
optional = false

[tool.poetry.group.gcp.dependencies]
google-auth = "^2.27.0"
google-cloud = "^0.34.0"
google-api-core = "^2.17.0"
google-cloud-container = "^2.40.0"


[tool.poetry.group.dev.dependencies]
black = "23.11.0"
pytest = ">=7.3.1,<8.0.0"
coverage = { version = ">=7.2.6,<8.0", extras = ["toml"] }
mypy = "1.7.0"
pre-commit = "^3.5.0"
pytest-timeout = "^2.2.0"
types-pyyaml = "^6.0.12.12"
pytest-asyncio = "^0.23.5"


[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.0"
myst-parser = "^2"
furo = "^2023"
sphinx-copybutton = "^0.5.2"
sphinx-design = "^0.5.0"
sphinx-inline-tabs = "^2023.4.21"
sphinx-autodoc2 = "^0.5.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.isort]
profile = "black"
skip = ["legacy_libs"]

[tool.black]
exclude = '''
/(
    \.mypy_cache
    | \.env
    | \.venv
)/
'''

line-length = 88
target-version = ['py311']
required-version = '23.11.0'
[tool.ruff]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    # "I",  # isort # using isort for now
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    # "B008",  # do not perform function calls in argument defaults
    "C901", # too complex
    # "W191", # indentation contains tabs
]
exclude = ["legacy_libs/"]

[tool.mypy]
files = ["piceli"]
warn_unused_configs = true
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
exclude = '(venv|env|legacy_libs)'
show_error_codes = true
pretty = true
allow_redefinition = true
no_implicit_optional = true
strict_equality = true

[tool.pytest]
log_cli = true

[tool.pytest.ini_options]
filterwarnings = [
    "ignore:Running in a secondary thread. Signal handling will be skipped.:UserWarning",
    "ignore::pytest.PytestUnhandledThreadExceptionWarning",
]
timeout = 30 # delete namespace on minikube integration tests can take a while

[tool.coverage.run]
omit = [
    "tests/*",       # Exclude all files in the tests directory
    "legacy_libs/*", # Exclude all files in the legacy_libs directory
]
relative_files = true # to combine coverage data from multiple processes

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if (typing\\.)?TYPE_CHECKING:",
    "^\\s*\\.\\.\\.\\s*$",           # ... ellipsis
    "if __name__ == .__main__.:",
]
