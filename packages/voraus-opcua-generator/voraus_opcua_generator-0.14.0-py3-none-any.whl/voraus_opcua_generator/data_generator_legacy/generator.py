"""Create RemoteRobots data module."""

from pathlib import Path

from voraus_opcua_generator import templates
from voraus_opcua_generator.doc_builder.node import Node
from voraus_opcua_generator.doc_builder.parser import HasNoParent


class LegacyWrapper:
    """Wrap sibling nodes under an arbitrary name.

    Extend the list of siblings to its full extent with respect to the provides ast.
    """

    def __init__(self, nodes: list[Node], title: str, partial_siblings: list[str]):
        """Construct a wrapper of a subset of sibling nodes from a larger set and give it a title.

        Args:
            nodes: A collection of path-initialized nodes.
            title: The title to call the wrapped collection of sibling-nodes.
            partial_siblings: A not necessarily complete list of sibling nodes to complete and wrap.

        Raises:
            KeyError: When the first element of partial_siblings can not be found in nodes.
            HasNoParent: If the first element of partial_siblings is the root node.
            ValueError: If not all the given partial_siblings are in fact siblings.
        """
        self.title = title

        one_child_id, other_child_ids = partial_siblings[0], partial_siblings[1:]
        one_child = next(filter(lambda node: node.data.nodeid == one_child_id, nodes), None)

        if one_child is None:
            raise KeyError(f"No such child in nodes: {one_child_id}")

        parent = one_child.parent

        if parent is None:
            raise HasNoParent(one_child)

        full_sibling_ids = parent.variable_ids

        for other_id in other_child_ids:
            if other_id not in full_sibling_ids:
                raise ValueError(f"{id} is not a sibling of {one_child_id}")
        self.parent = parent

    @property
    def docstring_title(self) -> str:
        """Provide a docstring title line hinting its own auto generation.

        Return:
            A docstring title line.
        """
        return f"Autogenerated {self.title} data object."


def render_data_class(nodes: list[Node], data_path: Path) -> None:
    """Render the python template for data module.

    Args:
        nodes : List of the OPC UA nodes.
        data_path: Path of the output data.py.
    """
    # an arbitrary list of nodes taken from Remote Robots data.py from commit
    # 3
    target_wrappers = {
        "General": ["ns=1;i=100007"],
        "TCP": ["ns=1;i=100700", "ns=1;i=100707", "ns=1;i=100717"],
        "Axes": ["ns=1;i=100111", "ns=1;i=100103"],
        "System": [
            "ns=1;i=100913",
            "ns=1;i=100920",
            "ns=1;i=100909",
            "ns=1;i=100903",
            "ns=1;i=100904",
            "ns=1;i=100906",
            "ns=1;i=100911",
        ],
        "Tool": ["ns=1;i=100300", "ns=1;i=100303", "ns=1;i=100302", "ns=1;i=100322"],
        "UserCS": ["ns=1;i=100401"],
        "MediaFlange": ["ns=1;i=100305", "ns=1;i=100304", "ns=1;i=100306"],
        "Interpolator": ["ns=1;i=100503", "ns=1;i=100500", "ns=1;i=100501", "ns=1;i=100502", "ns=1;i=100504"],
        "MSC": ["ns=1;i=202201", "ns=1;i=202202"],
        "MSCStatus": ["ns=1;i=202008", "ns=1;i=202015"],
        "ImpedanceControl": [
            "ns=1;i=100731",
            "ns=1;i=100732",
            "ns=1;i=100714",
            "ns=1;i=100733",
            "ns=1;i=100706",
            "ns=1;i=100704",
            "ns=1;i=100705",
            "ns=1;i=100713",
        ],
    }

    wrappers = []
    for title, siblings in target_wrappers.items():
        wrappers.append(LegacyWrapper(nodes, title, partial_siblings=siblings))

    rendered_overview = templates.DATA_PYTHON_TEMPLATE.render(wrappers=wrappers)

    with open(data_path, "w", encoding="utf-8") as file:
        file.write(rendered_overview)
