[DEFAULT]

ch_types = mag, grad
#ch_types (str) - mag or/and grad - which channels to process - enter 1 or both values separated by ,

#For which metrics to run the pipleline?

STD = True
PSD = True
PTP_manual = True
PTP_auto_mne = False
ECG = True
EOG = True
Head = False
Muscle = True

; STD = True
; PSD = True
; PTP_manual = True
; PTP_auto_mne = True
; ECG = True
; EOG = True
; Head = False
; Muscle = True

data_crop_tmin = 0
data_crop_tmax = 
# Crop the data: time in seconds. If no cropping needed, leave one or both blank.

plot_mne_butterfly = False

plot_interactive_time_series = False
# plot_interactive_time_series (bool) - Plot interactive time series (each channel on top of others, separated by ch type: mags, grads). This plot may signifcantly increase the time it takes to run the script. If you want to run the script faster, set this to False. Plot will be done on the data resampled to 100Hz/sec. Default: True

plot_interactive_time_series_average = False
# plot_interactive_time_series_average (bool) - Plot interactive time series average (average over all channels of each type: mags, grads). Plot will be done on the data resampled to 100Hz/sec. Default: True


verbose_plots = False
# verbose_plots (bool) - Show the plots when running the script. Default: True



[Filtering]
apply_filtering = True
downsample_to_hz = 1000
# downsample_to_hz (int or float) - frequency to downsample to. Must be: 1) at least 5 times higher than h_freq to avoid misrepresentation. 2) small value may lead to misrepresentation of chpi coils signal. They send signals in frequencies in higher than 100 hz. When downsampled this information may disappear. Recommended optimal value: 1000. Recommended minimum value: 500 Unit: Hz. Can be also set to False to avoid downsampling.
l_freq = 0
# l_freq (int or float) - lower frequency for bandpass filter. Unit: Hz. Default: 0.
h_freq = 140
# h_freq (int or float) - higher frequency for bandpass filter. Unit: Hz. Default: 140. 
# Reason: output of PSD can be used for filtering the data before muscle artifact detection. Musce artifacts are usually around 110-140 Hz, so this setting allows to see if there are extra frequencies which would need to be filtered out
method = iir
# method (str) - method for filtering. Default: iir.
# Or turn off filtering completely by setting apply_filtering = False. Parameters in this case dont matter.

[Epoching]
event_dur = 0.2
# event_dur (float) - duration of the event. Unit: seconds. Default: 0.2 seconds
epoch_tmin = -0.2
# epoch_tmin (float) - time before the event. Unit: seconds.  Default: -0.2 seconds
epoch_tmax = 1
# epoch_tmax (float) - time after the event. Unit: seconds. Default: 1 second
stim_channel =
# stim_channel leave empty if want it to be detected automatically or write explicitely like stim_channel = STI101. 
event_repeated = merge
# event_repeated (str) - How to handle duplicates in events[:, 0]. Can be 'error' to raise an error, ‘drop’ to only retain the row occurring first in the events, or 'merge' to combine the coinciding events (=duplicates) into a new event (see Notes for details).


[STD]
std_lvl = 1
#std_lvl (int) - set like std_lvl = 1 or std_lvl = 3, etc. Defines how many std from the mean to use for the threshold. 
allow_percent_noisy_flat_epochs = 70
# allow_percent_noisy_flat_epochs (int) - Defines how many percent of epochs can be noisy or flat. Over this number - epoch is marged as noisy/flat. Unit: percent. Default: 70 percent
noisy_channel_multiplier = 1.2
# noisy_channel_multiplier (float or int) - Multiplier to define noisy channel, if std of this channel for this epoch is over (the mean std of this channel for all epochs together*multipliar), then this channel is noisy
# higher value - less channels are marked as noisy
flat_multiplier = 0.5
# flat_multiplier (float or int) - Multiplier to define flat channel, if std of this channel for this epoch is under (the mean std of this channel for all epochs together*multipliar), then this channel is flat

[PSD]
freq_min = 0.5
# freq_min (int or float) - lower frequency for PSD calculation. Unit: Hz. Default: 0.5 Hz
freq_max = 140
# freq_max (int or float) - higher frequency for PSD calculation. Unit: Hz. Default: 140. 
# Reason: output of PSD can be used for filtering the data before muscle artifact detection. Musce artifacts are usually around 110-140 Hz, so this setting allows to see if there are extra frequencies which would need to be filtered out
psd_step_size = 0.5
# psd_step_size (float or int) - frequency resolution of the PSD. Unit: Hz. Default: 0.5 Hz


[PTP_manual]
max_pair_dist_sec = 20
#max_pair_dist_sec (float) - will hard code it when decide on best value after trying out different data sets. might be different for mag and grad. Unit: seconds. Default: 20 seconds
ptp_thresh_lvl  = 10
#thresh_lvl (int) - scaling factor for threshold. the higher this vaues is - the more eaks will be detected

allow_percent_noisy_flat_epochs = 70
# allow_percent_noisy_flat_epochs (int) - Defines how many percent of epochs can be noisy or flat. Over this number - epoch is marged as noisy/flat. Unit: percent. Default: 70 percent
std_lvl = 1
#std_lvl (int) - set like std_lvl = 1 or std_lvl = 3, etc. Defines how many std from the mean to use for the threshold. 

noisy_channel_multiplier = 1.2
# noisy_channel_multiplier (float or int) - Multiplier to define noisy channel, if std of this channel for this epoch is over (the mean std of this channel for all epochs together*multipliar), then this channel is noisy
flat_multiplier = 0.5
# flat_multiplier (float or int) - Multiplier to define flat channel, if std of this channel for this epoch is under (the mean std of this channel for all epochs together*multipliar), then this channel is flat

ptp_top_limit = 1e-12
ptp_bottom_limit = -1e-12
#these 2 are not used now. done in case we want to limit by exact number not by std level. Unit: Tesla or Tesla/meter depending on channel type


[PTP_auto]
peak_m = 4e-14
# peak_m (float or int) - minimal PTP amplitude to count as peak for magnetometers. Unit: Tesla or Tesla/meter depending on channel type
peak_g = 4e-14
# peak_g (float or int) - minimal PTP amplitude to count as peak for gradiometers. Unit: Tesla or Tesla/meter depending on channel type
flat_m = 3e-14
# flat_m (float or int) - max PTP amplitude to count as flat for magnetometers. Unit: Tesla or Tesla/meter depending on channel type
flat_g = 3e-14
# flat_g (float or int) - max PTP amplitude to count as flat for gradiometers. Unit: Tesla or Tesla/meter depending on channel type
bad_percent = 5
# bad_percent (int) - The percentage of the time a channel can be above or below thresholds. Below this percentage, Annotations are created. Above this percentage, the channel involved is return in bads. Note the returned bads are not automatically added to info['bads']. Unit: percent. Default: 5 percent
min_duration = 0.002
# min_duration (float) - The minimum duration (s) required by consecutives samples to be above peak or below flat thresholds to be considered. to consider as above or below threshold. For some systems, adjacent time samples with exactly the same value are not totally uncommon. Unit: seconds. Default: 0.002 seconds


[ECG]
drop_bad_ch = True
#drop_bad_ch (bool) - if True - will drop the bad ECG channel from the data and attempt to reconstruct ECG data on base of magnetometers. If False - will not drop the bad ECG channel and will attempt to calculate ECG events on base of the bad ECG channel. Default:: True
n_breaks_bursts_allowed_per_10min = 3 
#n_breaks_bursts_allowed_per_10min (int) - number of breaks in ECG channel allowed per 10 minutes of recording. (This setting is for ECG channel only, not for any other channels Used to detect a noisy ECG channel). Default: 3
allowed_range_of_peaks_stds = 0.14
#allowed_range_of_peaks_stds (float) - the allowed range of peaks in standard deviations. (This setting is for ECG channel only, not for any other channels Used to detect a noisy ECG channel). Unit: arbitrary (the data using this setting is always scaled between 0 and 1) Default: 0.05
# - The channel data will be scaled from 0 to 1, so the setting is universal for all data sets.
# - The peaks will be detected on the scaled data
# - The average std of all peaks has to be within this allowed range, If it is higher - the channel has too high deviation in peaks height and is counted as noisy

height_multiplier = 0.6
# height_multiplier(float) : defines how high the peaks on the ECG channel should be to be counted as peaks. Higher value - higher the peak need to be, hense less peaks will be found.

norm_lvl = 1
#norm_lvl (int) - The norm level is the scaling factor for the threshold. The mean artifact amplitude over all channels is multiplied by the norm_lvl to get the threshold.

gaussian_sigma = 4
#gaussian_sigma (int) - The sigma of the gaussian kernel used to smooth the data. The higher the sigma, the more smoothing. Typically ECG data is less noisy than EOG nd requires smaller sigma. Default: 4

thresh_lvl_peakfinder = 5
#thresh_lvl_peakfinder - higher - more peaks will be found on the ecg artifact for both separate channels and average overall. As a result, average over all may change completely, since it is centered around the peaks of 5 most prominent channels.

[EOG]
n_breaks_bursts_allowed_per_10min = 3 
#n_breaks_bursts_allowed_per_10min (int) - number of breaks in EOG channel allowed per 10 minutes of recording. (This setting is for EOG channel only, not for any other channels Used to detect a noisy EOG channel). Default: 3
allowed_range_of_peaks_stds = 0.15
#allowed_range_of_peaks_stds (float) - the allowed range of peaks in standard deviations. (This setting is for EOG channel only, not for any other channels Used to detect a noisy EOG channel). Unit: arbitrary (the data using this setting is always scaled between 0 and 1.). Default: 0.12
# - The channel data will be scaled from 0 to 1, so the setting is universal for all data sets.
# - The peaks will be detected on the scaled data
# - The average std of all peaks has to be within this allowed range, If it is higher - the channel has too high deviation in peaks height and is counted as noisy

norm_lvl = 1
#norm_lvl (int) - The norm level is the scaling factor for the threshold. The mean artifact amplitude over all channels is multiplied by the norm_lvl to get the threshold.

gaussian_sigma = 6
#gaussian_sigma (int) - The sigma of the gaussian kernel used to smooth the data. The higher the sigma, the more smoothing. Typically EOG data is more noisy than EG nd requires larger sigma. Default: 6

thresh_lvl_peakfinder = 3
#thresh_lvl_peakfinder - higher - more peaks will be found on the eog artifact for both separate channels and average overall. As a result, average over all may change completely, since it is centered around the peaks of 5 most prominent channels.

[Head_movement]


[Muscle]
muscle_freqs = 110, 140
#muscle_freqs (2 ints or 2 float) - Defines the frequency band for detecting muscle activity. Unit: Hz. Default: by mne: 110, 140 Hz
threshold_muscle = 5
#threshold_muscle (int or float) - threshold for muscle detection. Zscores detected above this threshold will be considered as muscle artifacts. Unit: z-scores. Default: 5, 10. 
#UPD: since we decided not to use explicit threshold, just keep it here as 5. muscle detction still needs some threshold. otherwise it doesnt work. So use minimum of 5. If lower - it will just count random noise as muscle artifacts.

min_length_good = 0.2
#min_length_good (int or float) - The shortest allowed duration of "good data" between adjacent muscle annotations; shorter segments will be incorporated into the surrounding annotations. Unit: seconds. Default: 0.2 seconds
min_distance_between_different_muscle_events = 1
#min_distance_between_different_muscle_events (int or float) - minimum distance between different muscle events in seconds. Unit: seconds. Default: 1 second
#If events happen closer to each other - they will all be counted as one event and the time will be assigned as the first peak.
#Difference between last 2 settings: min_length_good - used to detect ALL muscle events, min_distance_between_different_muscle_events - used to detect event ABOVE threshold on base of ALL muscle events



