"""Dataclasses for all structs in the IL2Pool contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs


@dataclass(kw_only=True)
class BackUnbackedEvent(BaseEvent):
    """The event type for event BackUnbacked"""

    @dataclass(kw_only=True)
    class BackUnbackedEventArgs(BaseEventArgs):
        """The args to the event BackUnbacked"""

        reserve: str
        backer: str
        amount: int
        fee: int

    # We redefine the args field with the specific event arg type.
    args: BackUnbackedEventArgs  # type: ignore[override]

    __name__: str = "BackUnbacked"


@dataclass(kw_only=True)
class BorrowEvent(BaseEvent):
    """The event type for event Borrow"""

    @dataclass(kw_only=True)
    class BorrowEventArgs(BaseEventArgs):
        """The args to the event Borrow"""

        reserve: str
        user: str
        onBehalfOf: str
        amount: int
        interestRateMode: int
        borrowRate: int
        referralCode: int

    # We redefine the args field with the specific event arg type.
    args: BorrowEventArgs  # type: ignore[override]

    __name__: str = "Borrow"


@dataclass(kw_only=True)
class FlashLoanEvent(BaseEvent):
    """The event type for event FlashLoan"""

    @dataclass(kw_only=True)
    class FlashLoanEventArgs(BaseEventArgs):
        """The args to the event FlashLoan"""

        target: str
        initiator: str
        asset: str
        amount: int
        interestRateMode: int
        premium: int
        referralCode: int

    # We redefine the args field with the specific event arg type.
    args: FlashLoanEventArgs  # type: ignore[override]

    __name__: str = "FlashLoan"


@dataclass(kw_only=True)
class IsolationModeTotalDebtUpdatedEvent(BaseEvent):
    """The event type for event IsolationModeTotalDebtUpdated"""

    @dataclass(kw_only=True)
    class IsolationModeTotalDebtUpdatedEventArgs(BaseEventArgs):
        """The args to the event IsolationModeTotalDebtUpdated"""

        asset: str
        totalDebt: int

    # We redefine the args field with the specific event arg type.
    args: IsolationModeTotalDebtUpdatedEventArgs  # type: ignore[override]

    __name__: str = "IsolationModeTotalDebtUpdated"


@dataclass(kw_only=True)
class LiquidationCallEvent(BaseEvent):
    """The event type for event LiquidationCall"""

    @dataclass(kw_only=True)
    class LiquidationCallEventArgs(BaseEventArgs):
        """The args to the event LiquidationCall"""

        collateralAsset: str
        debtAsset: str
        user: str
        debtToCover: int
        liquidatedCollateralAmount: int
        liquidator: str
        receiveAToken: bool

    # We redefine the args field with the specific event arg type.
    args: LiquidationCallEventArgs  # type: ignore[override]

    __name__: str = "LiquidationCall"


@dataclass(kw_only=True)
class MintUnbackedEvent(BaseEvent):
    """The event type for event MintUnbacked"""

    @dataclass(kw_only=True)
    class MintUnbackedEventArgs(BaseEventArgs):
        """The args to the event MintUnbacked"""

        reserve: str
        user: str
        onBehalfOf: str
        amount: int
        referralCode: int

    # We redefine the args field with the specific event arg type.
    args: MintUnbackedEventArgs  # type: ignore[override]

    __name__: str = "MintUnbacked"


@dataclass(kw_only=True)
class MintedToTreasuryEvent(BaseEvent):
    """The event type for event MintedToTreasury"""

    @dataclass(kw_only=True)
    class MintedToTreasuryEventArgs(BaseEventArgs):
        """The args to the event MintedToTreasury"""

        reserve: str
        amountMinted: int

    # We redefine the args field with the specific event arg type.
    args: MintedToTreasuryEventArgs  # type: ignore[override]

    __name__: str = "MintedToTreasury"


@dataclass(kw_only=True)
class RebalanceStableBorrowRateEvent(BaseEvent):
    """The event type for event RebalanceStableBorrowRate"""

    @dataclass(kw_only=True)
    class RebalanceStableBorrowRateEventArgs(BaseEventArgs):
        """The args to the event RebalanceStableBorrowRate"""

        reserve: str
        user: str

    # We redefine the args field with the specific event arg type.
    args: RebalanceStableBorrowRateEventArgs  # type: ignore[override]

    __name__: str = "RebalanceStableBorrowRate"


@dataclass(kw_only=True)
class RepayEvent(BaseEvent):
    """The event type for event Repay"""

    @dataclass(kw_only=True)
    class RepayEventArgs(BaseEventArgs):
        """The args to the event Repay"""

        reserve: str
        user: str
        repayer: str
        amount: int
        useATokens: bool

    # We redefine the args field with the specific event arg type.
    args: RepayEventArgs  # type: ignore[override]

    __name__: str = "Repay"


@dataclass(kw_only=True)
class ReserveDataUpdatedEvent(BaseEvent):
    """The event type for event ReserveDataUpdated"""

    @dataclass(kw_only=True)
    class ReserveDataUpdatedEventArgs(BaseEventArgs):
        """The args to the event ReserveDataUpdated"""

        reserve: str
        liquidityRate: int
        stableBorrowRate: int
        variableBorrowRate: int
        liquidityIndex: int
        variableBorrowIndex: int

    # We redefine the args field with the specific event arg type.
    args: ReserveDataUpdatedEventArgs  # type: ignore[override]

    __name__: str = "ReserveDataUpdated"


@dataclass(kw_only=True)
class ReserveUsedAsCollateralDisabledEvent(BaseEvent):
    """The event type for event ReserveUsedAsCollateralDisabled"""

    @dataclass(kw_only=True)
    class ReserveUsedAsCollateralDisabledEventArgs(BaseEventArgs):
        """The args to the event ReserveUsedAsCollateralDisabled"""

        reserve: str
        user: str

    # We redefine the args field with the specific event arg type.
    args: ReserveUsedAsCollateralDisabledEventArgs  # type: ignore[override]

    __name__: str = "ReserveUsedAsCollateralDisabled"


@dataclass(kw_only=True)
class ReserveUsedAsCollateralEnabledEvent(BaseEvent):
    """The event type for event ReserveUsedAsCollateralEnabled"""

    @dataclass(kw_only=True)
    class ReserveUsedAsCollateralEnabledEventArgs(BaseEventArgs):
        """The args to the event ReserveUsedAsCollateralEnabled"""

        reserve: str
        user: str

    # We redefine the args field with the specific event arg type.
    args: ReserveUsedAsCollateralEnabledEventArgs  # type: ignore[override]

    __name__: str = "ReserveUsedAsCollateralEnabled"


@dataclass(kw_only=True)
class SupplyEvent(BaseEvent):
    """The event type for event Supply"""

    @dataclass(kw_only=True)
    class SupplyEventArgs(BaseEventArgs):
        """The args to the event Supply"""

        reserve: str
        user: str
        onBehalfOf: str
        amount: int
        referralCode: int

    # We redefine the args field with the specific event arg type.
    args: SupplyEventArgs  # type: ignore[override]

    __name__: str = "Supply"


@dataclass(kw_only=True)
class SwapBorrowRateModeEvent(BaseEvent):
    """The event type for event SwapBorrowRateMode"""

    @dataclass(kw_only=True)
    class SwapBorrowRateModeEventArgs(BaseEventArgs):
        """The args to the event SwapBorrowRateMode"""

        reserve: str
        user: str
        interestRateMode: int

    # We redefine the args field with the specific event arg type.
    args: SwapBorrowRateModeEventArgs  # type: ignore[override]

    __name__: str = "SwapBorrowRateMode"


@dataclass(kw_only=True)
class UserEModeSetEvent(BaseEvent):
    """The event type for event UserEModeSet"""

    @dataclass(kw_only=True)
    class UserEModeSetEventArgs(BaseEventArgs):
        """The args to the event UserEModeSet"""

        user: str
        categoryId: int

    # We redefine the args field with the specific event arg type.
    args: UserEModeSetEventArgs  # type: ignore[override]

    __name__: str = "UserEModeSet"


@dataclass(kw_only=True)
class WithdrawEvent(BaseEvent):
    """The event type for event Withdraw"""

    @dataclass(kw_only=True)
    class WithdrawEventArgs(BaseEventArgs):
        """The args to the event Withdraw"""

        reserve: str
        user: str
        to: str
        amount: int

    # We redefine the args field with the specific event arg type.
    args: WithdrawEventArgs  # type: ignore[override]

    __name__: str = "Withdraw"
