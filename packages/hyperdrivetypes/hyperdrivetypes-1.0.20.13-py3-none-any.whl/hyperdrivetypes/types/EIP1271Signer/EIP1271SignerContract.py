"""A web3.py Contract class for the EIP1271Signer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..IHyperdriveMatchingEngine import (
    IHyperdriveMatchingEngineTypes as IHyperdriveMatchingEngine,
)

structs = {
    "IHyperdrive.Options": IHyperdrive.Options,
    "IHyperdriveMatchingEngine.OrderIntent": IHyperdriveMatchingEngine.OrderIntent,
}

eip1271signer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "approve",
            "inputs": [
                {
                    "name": "_token",
                    "type": "address",
                    "internalType": "contract ERC20",
                },
                {
                    "name": "_target",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "cancelOrders",
            "inputs": [
                {
                    "name": "_matchingEngine",
                    "type": "address",
                    "internalType": "contract IHyperdriveMatchingEngine",
                },
                {
                    "name": "_orders",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveMatchingEngine.OrderIntent[]",
                    "components": [
                        {
                            "name": "trader",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "hyperdrive",
                            "type": "address",
                            "internalType": "contract IHyperdrive",
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "slippageGuard",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "options",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Options",
                            "components": [
                                {
                                    "name": "destination",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "asBase",
                                    "type": "bool",
                                    "internalType": "bool",
                                },
                                {
                                    "name": "extraData",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                            ],
                        },
                        {
                            "name": "orderType",
                            "type": "uint8",
                            "internalType": "enum IHyperdriveMatchingEngine.OrderType",
                        },
                        {
                            "name": "signature",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "expiry",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "salt",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                    ],
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "isValidSignature",
            "inputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"},
                {"name": "", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [
                {"name": "", "type": "bytes4", "internalType": "bytes4"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setShouldVerifySignature",
            "inputs": [
                {"name": "_value", "type": "bool", "internalType": "bool"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "shouldVerifySignature",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
    ],
)


class EIP1271SignerAddressEmptyCodeContractError(PypechainBaseError):
    """ContractError for AddressEmptyCode."""

    # Error name
    name: str = "AddressEmptyCode"
    # 4 byte error selector
    selector: str = "0x9996b315"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressEmptyCode(address)"
    # Error input types
    abi: ABI = eip1271signer_abi


class EIP1271SignerAddressInsufficientBalanceContractError(PypechainBaseError):
    """ContractError for AddressInsufficientBalance."""

    # Error name
    name: str = "AddressInsufficientBalance"
    # 4 byte error selector
    selector: str = "0xcd786059"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressInsufficientBalance(address)"
    # Error input types
    abi: ABI = eip1271signer_abi


class EIP1271SignerFailedInnerCallContractError(PypechainBaseError):
    """ContractError for FailedInnerCall."""

    # Error name
    name: str = "FailedInnerCall"
    # 4 byte error selector
    selector: str = "0x1425ea42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "FailedInnerCall()"
    # Error input types
    abi: ABI = eip1271signer_abi


class EIP1271SignerSafeERC20FailedOperationContractError(PypechainBaseError):
    """ContractError for SafeERC20FailedOperation."""

    # Error name
    name: str = "SafeERC20FailedOperation"
    # 4 byte error selector
    selector: str = "0x5274afe7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SafeERC20FailedOperation(address)"
    # Error input types
    abi: ABI = eip1271signer_abi


class EIP1271SignerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the EIP1271Signer contract."""

    AddressEmptyCode: EIP1271SignerAddressEmptyCodeContractError

    AddressInsufficientBalance: (
        EIP1271SignerAddressInsufficientBalanceContractError
    )

    FailedInnerCall: EIP1271SignerFailedInnerCallContractError

    SafeERC20FailedOperation: EIP1271SignerSafeERC20FailedOperationContractError

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = EIP1271SignerAddressEmptyCodeContractError()
        self.AddressInsufficientBalance = (
            EIP1271SignerAddressInsufficientBalanceContractError()
        )
        self.FailedInnerCall = EIP1271SignerFailedInnerCallContractError()
        self.SafeERC20FailedOperation = (
            EIP1271SignerSafeERC20FailedOperationContractError()
        )

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.FailedInnerCall,
            self.SafeERC20FailedOperation,
        ]


class EIP1271SignerApproveContractFunction0(PypechainContractFunction):
    """ContractFunction for the approve(str,str,int) method."""

    _function_name = "approve"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int"]), structs
    )
    _error_class = EIP1271SignerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class EIP1271SignerApproveContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the approve method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "approve"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _token: str, _target: str, _amount: int) -> EIP1271SignerApproveContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EIP1271SignerApproveContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            EIP1271SignerApproveContractFunction0._type_signature: EIP1271SignerApproveContractFunction0,
        }
        return out


class EIP1271SignerCancelOrdersContractFunction0(PypechainContractFunction):
    """ContractFunction for the cancelOrders(str,list[IHyperdriveMatchingEngine.OrderIntent]) method."""

    _function_name = "cancelOrders"
    _type_signature = expand_struct_type_str(
        tuple(["str", "list[IHyperdriveMatchingEngine.OrderIntent]"]), structs
    )
    _error_class = EIP1271SignerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class EIP1271SignerCancelOrdersContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the cancelOrders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "cancelOrders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _matchingEngine: str, _orders: list[IHyperdriveMatchingEngine.OrderIntent]) -> EIP1271SignerCancelOrdersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EIP1271SignerCancelOrdersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            EIP1271SignerCancelOrdersContractFunction0._type_signature: EIP1271SignerCancelOrdersContractFunction0,
        }
        return out


class EIP1271SignerIsValidSignatureContractFunction0(PypechainContractFunction):
    """ContractFunction for the isValidSignature(bytes,bytes) method."""

    _function_name = "isValidSignature"
    _type_signature = expand_struct_type_str(tuple(["bytes", "bytes"]), structs)
    _error_class = EIP1271SignerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class EIP1271SignerIsValidSignatureContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the isValidSignature method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isValidSignature"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, arg1: bytes, arg2: bytes) -> EIP1271SignerIsValidSignatureContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EIP1271SignerIsValidSignatureContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            EIP1271SignerIsValidSignatureContractFunction0._type_signature: EIP1271SignerIsValidSignatureContractFunction0,
        }
        return out


class EIP1271SignerSetShouldVerifySignatureContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the setShouldVerifySignature(bool) method."""

    _function_name = "setShouldVerifySignature"
    _type_signature = expand_struct_type_str(tuple(["bool"]), structs)
    _error_class = EIP1271SignerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class EIP1271SignerSetShouldVerifySignatureContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the setShouldVerifySignature method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setShouldVerifySignature"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _value: bool) -> EIP1271SignerSetShouldVerifySignatureContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EIP1271SignerSetShouldVerifySignatureContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            EIP1271SignerSetShouldVerifySignatureContractFunction0._type_signature: EIP1271SignerSetShouldVerifySignatureContractFunction0,
        }
        return out


class EIP1271SignerShouldVerifySignatureContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the shouldVerifySignature() method."""

    _function_name = "shouldVerifySignature"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = EIP1271SignerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class EIP1271SignerShouldVerifySignatureContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the shouldVerifySignature method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "shouldVerifySignature"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> EIP1271SignerShouldVerifySignatureContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> EIP1271SignerShouldVerifySignatureContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            EIP1271SignerShouldVerifySignatureContractFunction0._type_signature: EIP1271SignerShouldVerifySignatureContractFunction0,
        }
        return out


class EIP1271SignerContractFunctions(ContractFunctions):
    """ContractFunctions for the EIP1271Signer contract."""

    approve: EIP1271SignerApproveContractFunction

    cancelOrders: EIP1271SignerCancelOrdersContractFunction

    isValidSignature: EIP1271SignerIsValidSignatureContractFunction

    setShouldVerifySignature: (
        EIP1271SignerSetShouldVerifySignatureContractFunction
    )

    shouldVerifySignature: EIP1271SignerShouldVerifySignatureContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.approve = EIP1271SignerApproveContractFunction.factory(
            "approve",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="approve",
        )
        self.cancelOrders = EIP1271SignerCancelOrdersContractFunction.factory(
            "cancelOrders",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="cancelOrders",
        )
        self.isValidSignature = (
            EIP1271SignerIsValidSignatureContractFunction.factory(
                "isValidSignature",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="isValidSignature",
            )
        )
        self.setShouldVerifySignature = (
            EIP1271SignerSetShouldVerifySignatureContractFunction.factory(
                "setShouldVerifySignature",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="setShouldVerifySignature",
            )
        )
        self.shouldVerifySignature = (
            EIP1271SignerShouldVerifySignatureContractFunction.factory(
                "shouldVerifySignature",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="shouldVerifySignature",
            )
        )


class EIP1271SignerContract(Contract):
    """A web3.py Contract class for the EIP1271Signer contract."""

    abi: ABI = eip1271signer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60806040525f805460ff1916600117905534801561001b575f80fd5b50610a61806100295f395ff3fe608060405234801561000f575f80fd5b5060043610610055575f3560e01c80631626ba7e14610059578063a3944d1b1461008a578063e1f21c67146100ac578063e627d009146100bf578063fdc48e31146100d2575b5f80fd5b61006c610067366004610556565b6100ee565b6040516001600160e01b031990911681526020015b60405180910390f35b6100aa6100983660046105a7565b5f805460ff1916911515919091179055565b005b6100aa6100ba3660046105e6565b610110565b6100aa6100cd3660046106bf565b610129565b5f546100de9060ff1681565b6040519015158152602001610081565b5f805460ff16156101075750630b135d3f60e11b61010a565b505f5b92915050565b6101246001600160a01b0384168383610186565b505050565b604051633ee78d1560e11b81526001600160a01b03831690637dcf1a2a906101559084906004016108fa565b5f604051808303815f87803b15801561016c575f80fd5b505af115801561017e573d5f803e3d5ffd5b505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526101d7848261023f565b61023957604080516001600160a01b03851660248201525f6044808301919091528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261022f9085906102e0565b61023984826102e0565b50505050565b5f805f846001600160a01b03168460405161025a91906109f5565b5f604051808303815f865af19150503d805f8114610293576040519150601f19603f3d011682016040523d82523d5f602084013e610298565b606091505b50915091508180156102c25750805115806102c25750808060200190518101906102c29190610a10565b80156102d757505f856001600160a01b03163b115b95945050505050565b5f6102f46001600160a01b03841683610346565b905080515f141580156103185750808060200190518101906103169190610a10565b155b1561012457604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b606061035383835f61035a565b9392505050565b60608147101561037f5760405163cd78605960e01b815230600482015260240161033d565b5f80856001600160a01b0316848660405161039a91906109f5565b5f6040518083038185875af1925050503d805f81146103d4576040519150601f19603f3d011682016040523d82523d5f602084013e6103d9565b606091505b50915091506103e98683836103f3565b9695505050505050565b606082610408576104038261044f565b610353565b815115801561041f57506001600160a01b0384163b155b1561044857604051639996b31560e01b81526001600160a01b038516600482015260240161033d565b5080610353565b80511561045f5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b634e487b7160e01b5f52604160045260245ffd5b604051610140810167ffffffffffffffff811182821017156104b3576104b361047b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156104e2576104e261047b565b604052919050565b5f82601f8301126104f9575f80fd5b813567ffffffffffffffff8111156105135761051361047b565b610526601f8201601f19166020016104b9565b81815284602083860101111561053a575f80fd5b816020850160208301375f918101602001919091529392505050565b5f8060408385031215610567575f80fd5b82359150602083013567ffffffffffffffff811115610584575f80fd5b610590858286016104ea565b9150509250929050565b8015158114610478575f80fd5b5f602082840312156105b7575f80fd5b81356103538161059a565b6001600160a01b0381168114610478575f80fd5b80356105e1816105c2565b919050565b5f805f606084860312156105f8575f80fd5b8335610603816105c2565b92506020840135610613816105c2565b929592945050506040919091013590565b5f60608284031215610634575f80fd5b6040516060810167ffffffffffffffff82821081831117156106585761065861047b565b816040528293508435915061066c826105c2565b90825260208401359061067e8261059a565b8160208401526040850135915080821115610697575f80fd5b506106a4858286016104ea565b6040830152505092915050565b8035600281106105e1575f80fd5b5f80604083850312156106d0575f80fd5b82356106db816105c2565b915060208381013567ffffffffffffffff808211156106f8575f80fd5b818601915086601f83011261070b575f80fd5b81358181111561071d5761071d61047b565b8060051b61072c8582016104b9565b918252838101850191858101908a841115610745575f80fd5b86860192505b8383101561084257823585811115610761575f80fd5b8601610140818d03601f19011215610777575f80fd5b61077f61048f565b61078a8983016105d6565b8152610798604083016105d6565b89820152606082013560408201526080820135606082015260a0820135608082015260c0820135878111156107cb575f80fd5b6107d98e8b83860101610624565b60a0830152506107eb60e083016106b1565b60c08201526101008083013588811115610803575f80fd5b6108118f8c838701016104ea565b60e084015250610120808401358284015261014084013581840152505080845250508682019150868301925061074b565b809750505050505050509250929050565b5f5b8381101561086d578181015183820152602001610855565b50505f910152565b5f815180845261088c816020860160208601610853565b601f01601f19169290920160200192915050565b60018060a01b0381511682526020810151151560208301525f6040820151606060408501526108d26060850182610875565b949350505050565b600281106108f657634e487b7160e01b5f52602160045260245ffd5b9052565b5f60208083018184528085518083526040925060408601915060408160051b8701018488015f5b838110156109e757888303603f19018552815180516001600160a01b03168452610140818901516001600160a01b038116868b0152508188015185890152606080830151908601526080808301519086015260a08083015181870183905261098b838801826108a0565b9250505060c0808301516109a1828801826108da565b505060e080830151868303828801526109ba8382610875565b61010085810151908901526101209485015194909701939093525050509386019390860190600101610921565b509098975050505050505050565b5f8251610a06818460208701610853565b9190910192915050565b5f60208284031215610a20575f80fd5b81516103538161059a56fea264697066735822122014549f625a9b36e2297349e6e4096b87d96b51723b08907136a996558372458264736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = EIP1271SignerContractFunctions(eip1271signer_abi, self.w3, address)  # type: ignore

        self.errors = EIP1271SignerContractErrors()

    errors: EIP1271SignerContractErrors = EIP1271SignerContractErrors()

    functions: EIP1271SignerContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = EIP1271SignerContractFunctions(
            eip1271signer_abi, w3, None
        )
        contract.errors = EIP1271SignerContractErrors()

        return contract
