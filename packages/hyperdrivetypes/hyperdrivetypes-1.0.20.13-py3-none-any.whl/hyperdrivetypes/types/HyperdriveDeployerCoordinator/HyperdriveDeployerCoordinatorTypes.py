"""Dataclasses for all structs in the HyperdriveDeployerCoordinator contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import ErrorInfo


@dataclass
class Deployment:
    """Deployment struct."""

    configHash: bytes
    extraDataHash: bytes
    initialSharePrice: int
    hyperdrive: str
    target0: str
    target1: str
    target2: str
    target3: str
    target4: str


ApprovalFailedError = ErrorInfo(
    inputs=[],
    name="ApprovalFailed",
    selector="0x8164f842",
    signature="ApprovalFailed()",
)

DeploymentAlreadyExistsError = ErrorInfo(
    inputs=[],
    name="DeploymentAlreadyExists",
    selector="0x77c3669a",
    signature="DeploymentAlreadyExists()",
)

DeploymentDoesNotExistError = ErrorInfo(
    inputs=[],
    name="DeploymentDoesNotExist",
    selector="0xe62c7024",
    signature="DeploymentDoesNotExist()",
)

HyperdriveAlreadyDeployedError = ErrorInfo(
    inputs=[],
    name="HyperdriveAlreadyDeployed",
    selector="0x2c95caeb",
    signature="HyperdriveAlreadyDeployed()",
)

HyperdriveIsNotDeployedError = ErrorInfo(
    inputs=[],
    name="HyperdriveIsNotDeployed",
    selector="0x952b05cb",
    signature="HyperdriveIsNotDeployed()",
)

IncompleteDeploymentError = ErrorInfo(
    inputs=[],
    name="IncompleteDeployment",
    selector="0xe97cc2bf",
    signature="IncompleteDeployment()",
)

InsufficientValueError = ErrorInfo(
    inputs=[],
    name="InsufficientValue",
    selector="0x11011294",
    signature="InsufficientValue()",
)

InvalidBaseTokenError = ErrorInfo(
    inputs=[],
    name="InvalidBaseToken",
    selector="0x0e442a4a",
    signature="InvalidBaseToken()",
)

InvalidCheckpointDurationError = ErrorInfo(
    inputs=[],
    name="InvalidCheckpointDuration",
    selector="0x5428734d",
    signature="InvalidCheckpointDuration()",
)

InvalidFeeAmountsError = ErrorInfo(
    inputs=[],
    name="InvalidFeeAmounts",
    selector="0x45ee5986",
    signature="InvalidFeeAmounts()",
)

InvalidMinimumShareReservesError = ErrorInfo(
    inputs=[],
    name="InvalidMinimumShareReserves",
    selector="0x49db44f5",
    signature="InvalidMinimumShareReserves()",
)

InvalidMinimumTransactionAmountError = ErrorInfo(
    inputs=[],
    name="InvalidMinimumTransactionAmount",
    selector="0x3192a446",
    signature="InvalidMinimumTransactionAmount()",
)

InvalidPositionDurationError = ErrorInfo(
    inputs=[],
    name="InvalidPositionDuration",
    selector="0x4a7fff9e",
    signature="InvalidPositionDuration()",
)

InvalidTargetIndexError = ErrorInfo(
    inputs=[],
    name="InvalidTargetIndex",
    selector="0x3b3f02b2",
    signature="InvalidTargetIndex()",
)

InvalidVaultSharesTokenError = ErrorInfo(
    inputs=[],
    name="InvalidVaultSharesToken",
    selector="0xe7ee73a0",
    signature="InvalidVaultSharesToken()",
)

MismatchedConfigError = ErrorInfo(
    inputs=[],
    name="MismatchedConfig",
    selector="0x332ee11f",
    signature="MismatchedConfig()",
)

MismatchedExtraDataError = ErrorInfo(
    inputs=[],
    name="MismatchedExtraData",
    selector="0xd1939688",
    signature="MismatchedExtraData()",
)

NotPayableError = ErrorInfo(
    inputs=[],
    name="NotPayable",
    selector="0x1574f9f3",
    signature="NotPayable()",
)

SenderIsNotFactoryError = ErrorInfo(
    inputs=[],
    name="SenderIsNotFactory",
    selector="0x40843511",
    signature="SenderIsNotFactory()",
)

TargetAlreadyDeployedError = ErrorInfo(
    inputs=[],
    name="TargetAlreadyDeployed",
    selector="0x0744b578",
    signature="TargetAlreadyDeployed()",
)

TransferFailedError = ErrorInfo(
    inputs=[],
    name="TransferFailed",
    selector="0x90b8ec18",
    signature="TransferFailed()",
)
