"""Dataclasses for all structs in the IPoolAddressesProvider contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs


@dataclass(kw_only=True)
class ACLAdminUpdatedEvent(BaseEvent):
    """The event type for event ACLAdminUpdated"""

    @dataclass(kw_only=True)
    class ACLAdminUpdatedEventArgs(BaseEventArgs):
        """The args to the event ACLAdminUpdated"""

        oldAddress: str
        newAddress: str

    # We redefine the args field with the specific event arg type.
    args: ACLAdminUpdatedEventArgs  # type: ignore[override]

    __name__: str = "ACLAdminUpdated"


@dataclass(kw_only=True)
class ACLManagerUpdatedEvent(BaseEvent):
    """The event type for event ACLManagerUpdated"""

    @dataclass(kw_only=True)
    class ACLManagerUpdatedEventArgs(BaseEventArgs):
        """The args to the event ACLManagerUpdated"""

        oldAddress: str
        newAddress: str

    # We redefine the args field with the specific event arg type.
    args: ACLManagerUpdatedEventArgs  # type: ignore[override]

    __name__: str = "ACLManagerUpdated"


@dataclass(kw_only=True)
class AddressSetEvent(BaseEvent):
    """The event type for event AddressSet"""

    @dataclass(kw_only=True)
    class AddressSetEventArgs(BaseEventArgs):
        """The args to the event AddressSet"""

        _id: bytes
        oldAddress: str
        newAddress: str

    # We redefine the args field with the specific event arg type.
    args: AddressSetEventArgs  # type: ignore[override]

    __name__: str = "AddressSet"


@dataclass(kw_only=True)
class AddressSetAsProxyEvent(BaseEvent):
    """The event type for event AddressSetAsProxy"""

    @dataclass(kw_only=True)
    class AddressSetAsProxyEventArgs(BaseEventArgs):
        """The args to the event AddressSetAsProxy"""

        _id: bytes
        proxyAddress: str
        oldImplementationAddress: str
        newImplementationAddress: str

    # We redefine the args field with the specific event arg type.
    args: AddressSetAsProxyEventArgs  # type: ignore[override]

    __name__: str = "AddressSetAsProxy"


@dataclass(kw_only=True)
class MarketIdSetEvent(BaseEvent):
    """The event type for event MarketIdSet"""

    @dataclass(kw_only=True)
    class MarketIdSetEventArgs(BaseEventArgs):
        """The args to the event MarketIdSet"""

        oldMarketId: str
        newMarketId: str

    # We redefine the args field with the specific event arg type.
    args: MarketIdSetEventArgs  # type: ignore[override]

    __name__: str = "MarketIdSet"


@dataclass(kw_only=True)
class PoolConfiguratorUpdatedEvent(BaseEvent):
    """The event type for event PoolConfiguratorUpdated"""

    @dataclass(kw_only=True)
    class PoolConfiguratorUpdatedEventArgs(BaseEventArgs):
        """The args to the event PoolConfiguratorUpdated"""

        oldAddress: str
        newAddress: str

    # We redefine the args field with the specific event arg type.
    args: PoolConfiguratorUpdatedEventArgs  # type: ignore[override]

    __name__: str = "PoolConfiguratorUpdated"


@dataclass(kw_only=True)
class PoolDataProviderUpdatedEvent(BaseEvent):
    """The event type for event PoolDataProviderUpdated"""

    @dataclass(kw_only=True)
    class PoolDataProviderUpdatedEventArgs(BaseEventArgs):
        """The args to the event PoolDataProviderUpdated"""

        oldAddress: str
        newAddress: str

    # We redefine the args field with the specific event arg type.
    args: PoolDataProviderUpdatedEventArgs  # type: ignore[override]

    __name__: str = "PoolDataProviderUpdated"


@dataclass(kw_only=True)
class PoolUpdatedEvent(BaseEvent):
    """The event type for event PoolUpdated"""

    @dataclass(kw_only=True)
    class PoolUpdatedEventArgs(BaseEventArgs):
        """The args to the event PoolUpdated"""

        oldAddress: str
        newAddress: str

    # We redefine the args field with the specific event arg type.
    args: PoolUpdatedEventArgs  # type: ignore[override]

    __name__: str = "PoolUpdated"


@dataclass(kw_only=True)
class PriceOracleSentinelUpdatedEvent(BaseEvent):
    """The event type for event PriceOracleSentinelUpdated"""

    @dataclass(kw_only=True)
    class PriceOracleSentinelUpdatedEventArgs(BaseEventArgs):
        """The args to the event PriceOracleSentinelUpdated"""

        oldAddress: str
        newAddress: str

    # We redefine the args field with the specific event arg type.
    args: PriceOracleSentinelUpdatedEventArgs  # type: ignore[override]

    __name__: str = "PriceOracleSentinelUpdated"


@dataclass(kw_only=True)
class PriceOracleUpdatedEvent(BaseEvent):
    """The event type for event PriceOracleUpdated"""

    @dataclass(kw_only=True)
    class PriceOracleUpdatedEventArgs(BaseEventArgs):
        """The args to the event PriceOracleUpdated"""

        oldAddress: str
        newAddress: str

    # We redefine the args field with the specific event arg type.
    args: PriceOracleUpdatedEventArgs  # type: ignore[override]

    __name__: str = "PriceOracleUpdated"


@dataclass(kw_only=True)
class ProxyCreatedEvent(BaseEvent):
    """The event type for event ProxyCreated"""

    @dataclass(kw_only=True)
    class ProxyCreatedEventArgs(BaseEventArgs):
        """The args to the event ProxyCreated"""

        _id: bytes
        proxyAddress: str
        implementationAddress: str

    # We redefine the args field with the specific event arg type.
    args: ProxyCreatedEventArgs  # type: ignore[override]

    __name__: str = "ProxyCreated"
