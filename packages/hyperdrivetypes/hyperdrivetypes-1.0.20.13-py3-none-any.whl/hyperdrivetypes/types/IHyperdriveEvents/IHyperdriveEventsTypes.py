"""Dataclasses for all structs in the IHyperdriveEvents contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs


@dataclass(kw_only=True)
class AddLiquidityEvent(BaseEvent):
    """The event type for event AddLiquidity"""

    @dataclass(kw_only=True)
    class AddLiquidityEventArgs(BaseEventArgs):
        """The args to the event AddLiquidity"""

        provider: str
        lpAmount: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        lpSharePrice: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: AddLiquidityEventArgs  # type: ignore[override]

    __name__: str = "AddLiquidity"


@dataclass(kw_only=True)
class ApprovalEvent(BaseEvent):
    """The event type for event Approval"""

    @dataclass(kw_only=True)
    class ApprovalEventArgs(BaseEventArgs):
        """The args to the event Approval"""

        owner: str
        spender: str
        value: int

    # We redefine the args field with the specific event arg type.
    args: ApprovalEventArgs  # type: ignore[override]

    __name__: str = "Approval"


@dataclass(kw_only=True)
class ApprovalForAllEvent(BaseEvent):
    """The event type for event ApprovalForAll"""

    @dataclass(kw_only=True)
    class ApprovalForAllEventArgs(BaseEventArgs):
        """The args to the event ApprovalForAll"""

        account: str
        operator: str
        approved: bool

    # We redefine the args field with the specific event arg type.
    args: ApprovalForAllEventArgs  # type: ignore[override]

    __name__: str = "ApprovalForAll"


@dataclass(kw_only=True)
class CloseLongEvent(BaseEvent):
    """The event type for event CloseLong"""

    @dataclass(kw_only=True)
    class CloseLongEventArgs(BaseEventArgs):
        """The args to the event CloseLong"""

        trader: str
        destination: str
        assetId: int
        maturityTime: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        bondAmount: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: CloseLongEventArgs  # type: ignore[override]

    __name__: str = "CloseLong"


@dataclass(kw_only=True)
class CloseShortEvent(BaseEvent):
    """The event type for event CloseShort"""

    @dataclass(kw_only=True)
    class CloseShortEventArgs(BaseEventArgs):
        """The args to the event CloseShort"""

        trader: str
        destination: str
        assetId: int
        maturityTime: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        basePayment: int
        bondAmount: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: CloseShortEventArgs  # type: ignore[override]

    __name__: str = "CloseShort"


@dataclass(kw_only=True)
class CollectGovernanceFeeEvent(BaseEvent):
    """The event type for event CollectGovernanceFee"""

    @dataclass(kw_only=True)
    class CollectGovernanceFeeEventArgs(BaseEventArgs):
        """The args to the event CollectGovernanceFee"""

        collector: str
        amount: int
        vaultSharePrice: int
        asBase: bool

    # We redefine the args field with the specific event arg type.
    args: CollectGovernanceFeeEventArgs  # type: ignore[override]

    __name__: str = "CollectGovernanceFee"


@dataclass(kw_only=True)
class CreateCheckpointEvent(BaseEvent):
    """The event type for event CreateCheckpoint"""

    @dataclass(kw_only=True)
    class CreateCheckpointEventArgs(BaseEventArgs):
        """The args to the event CreateCheckpoint"""

        checkpointTime: int
        checkpointVaultSharePrice: int
        vaultSharePrice: int
        maturedShorts: int
        maturedLongs: int
        lpSharePrice: int

    # We redefine the args field with the specific event arg type.
    args: CreateCheckpointEventArgs  # type: ignore[override]

    __name__: str = "CreateCheckpoint"


@dataclass(kw_only=True)
class InitializeEvent(BaseEvent):
    """The event type for event Initialize"""

    @dataclass(kw_only=True)
    class InitializeEventArgs(BaseEventArgs):
        """The args to the event Initialize"""

        provider: str
        lpAmount: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        apr: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: InitializeEventArgs  # type: ignore[override]

    __name__: str = "Initialize"


@dataclass(kw_only=True)
class OpenLongEvent(BaseEvent):
    """The event type for event OpenLong"""

    @dataclass(kw_only=True)
    class OpenLongEventArgs(BaseEventArgs):
        """The args to the event OpenLong"""

        trader: str
        assetId: int
        maturityTime: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        bondAmount: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: OpenLongEventArgs  # type: ignore[override]

    __name__: str = "OpenLong"


@dataclass(kw_only=True)
class OpenShortEvent(BaseEvent):
    """The event type for event OpenShort"""

    @dataclass(kw_only=True)
    class OpenShortEventArgs(BaseEventArgs):
        """The args to the event OpenShort"""

        trader: str
        assetId: int
        maturityTime: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        baseProceeds: int
        bondAmount: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: OpenShortEventArgs  # type: ignore[override]

    __name__: str = "OpenShort"


@dataclass(kw_only=True)
class PauseStatusUpdatedEvent(BaseEvent):
    """The event type for event PauseStatusUpdated"""

    @dataclass(kw_only=True)
    class PauseStatusUpdatedEventArgs(BaseEventArgs):
        """The args to the event PauseStatusUpdated"""

        isPaused: bool

    # We redefine the args field with the specific event arg type.
    args: PauseStatusUpdatedEventArgs  # type: ignore[override]

    __name__: str = "PauseStatusUpdated"


@dataclass(kw_only=True)
class RedeemWithdrawalSharesEvent(BaseEvent):
    """The event type for event RedeemWithdrawalShares"""

    @dataclass(kw_only=True)
    class RedeemWithdrawalSharesEventArgs(BaseEventArgs):
        """The args to the event RedeemWithdrawalShares"""

        provider: str
        destination: str
        withdrawalShareAmount: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: RedeemWithdrawalSharesEventArgs  # type: ignore[override]

    __name__: str = "RedeemWithdrawalShares"


@dataclass(kw_only=True)
class RemoveLiquidityEvent(BaseEvent):
    """The event type for event RemoveLiquidity"""

    @dataclass(kw_only=True)
    class RemoveLiquidityEventArgs(BaseEventArgs):
        """The args to the event RemoveLiquidity"""

        provider: str
        destination: str
        lpAmount: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        withdrawalShareAmount: int
        lpSharePrice: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: RemoveLiquidityEventArgs  # type: ignore[override]

    __name__: str = "RemoveLiquidity"


@dataclass(kw_only=True)
class SweepEvent(BaseEvent):
    """The event type for event Sweep"""

    @dataclass(kw_only=True)
    class SweepEventArgs(BaseEventArgs):
        """The args to the event Sweep"""

        collector: str
        target: str

    # We redefine the args field with the specific event arg type.
    args: SweepEventArgs  # type: ignore[override]

    __name__: str = "Sweep"


@dataclass(kw_only=True)
class TransferSingleEvent(BaseEvent):
    """The event type for event TransferSingle"""

    @dataclass(kw_only=True)
    class TransferSingleEventArgs(BaseEventArgs):
        """The args to the event TransferSingle"""

        operator: str
        _from: str
        to: str
        _id: int
        value: int

    # We redefine the args field with the specific event arg type.
    args: TransferSingleEventArgs  # type: ignore[override]

    __name__: str = "TransferSingle"
