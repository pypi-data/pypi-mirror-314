"""A web3.py Contract class for the ReentrantEthReceiver contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..Lib import LibContract

structs = {}

reentrantethreceiver_abi: ABI = cast(
    ABI,
    [
        {"type": "receive", "stateMutability": "payable"},
        {
            "type": "function",
            "name": "isSuccess",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setData",
            "inputs": [
                {"name": "_data_", "type": "bytes", "internalType": "bytes"}
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "setTarget",
            "inputs": [
                {
                    "name": "_target_",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
    ],
)


class ReentrantEthReceiverContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the ReentrantEthReceiver contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class ReentrantEthReceiverIsSuccessContractFunction0(PypechainContractFunction):
    """ContractFunction for the isSuccess() method."""

    _function_name = "isSuccess"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ReentrantEthReceiverContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class ReentrantEthReceiverIsSuccessContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the isSuccess method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isSuccess"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ReentrantEthReceiverIsSuccessContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ReentrantEthReceiverIsSuccessContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ReentrantEthReceiverIsSuccessContractFunction0._type_signature: ReentrantEthReceiverIsSuccessContractFunction0,
        }
        return out


class ReentrantEthReceiverSetDataContractFunction0(PypechainContractFunction):
    """ContractFunction for the setData(bytes) method."""

    _function_name = "setData"
    _type_signature = expand_struct_type_str(tuple(["bytes"]), structs)
    _error_class = ReentrantEthReceiverContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ReentrantEthReceiverSetDataContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the setData method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setData"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _data_: bytes) -> ReentrantEthReceiverSetDataContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ReentrantEthReceiverSetDataContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ReentrantEthReceiverSetDataContractFunction0._type_signature: ReentrantEthReceiverSetDataContractFunction0,
        }
        return out


class ReentrantEthReceiverSetTargetContractFunction0(PypechainContractFunction):
    """ContractFunction for the setTarget(str) method."""

    _function_name = "setTarget"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = ReentrantEthReceiverContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ReentrantEthReceiverSetTargetContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the setTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _target_: str) -> ReentrantEthReceiverSetTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ReentrantEthReceiverSetTargetContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ReentrantEthReceiverSetTargetContractFunction0._type_signature: ReentrantEthReceiverSetTargetContractFunction0,
        }
        return out


class ReentrantEthReceiverContractFunctions(ContractFunctions):
    """ContractFunctions for the ReentrantEthReceiver contract."""

    isSuccess: ReentrantEthReceiverIsSuccessContractFunction

    setData: ReentrantEthReceiverSetDataContractFunction

    setTarget: ReentrantEthReceiverSetTargetContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.isSuccess = ReentrantEthReceiverIsSuccessContractFunction.factory(
            "isSuccess",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="isSuccess",
        )
        self.setData = ReentrantEthReceiverSetDataContractFunction.factory(
            "setData",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setData",
        )
        self.setTarget = ReentrantEthReceiverSetTargetContractFunction.factory(
            "setTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setTarget",
        )


class ReentrantEthReceiverContract(Contract):
    """A web3.py Contract class for the ReentrantEthReceiver contract."""

    abi: ABI = reentrantethreceiver_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561000f575f80fd5b506105318061001d5f395ff3fe608060405260043610610036575f3560e01c80630b6c754b1461005a578063776d1a0114610087578063ab62f0e1146100c2575f80fd5b36610056575f546001600160a01b03163303610054576100546100e1565b005b5f80fd5b348015610065575f80fd5b506002546100739060ff1681565b604051901515815260200160405180910390f35b348015610092575f80fd5b506100546100a1366004610210565b5f80546001600160a01b0319166001600160a01b0392909216919091179055565b3480156100cd575f80fd5b506100546100dc36600461023d565b6101fe565b5f805460405182916001600160a01b0316906100ff906001906102e1565b5f604051808303815f865af19150503d805f8114610138576040519150601f19603f3d011682016040523d82523d5f602084013e61013d565b606091505b5091509150811580156101e757506040805160048082526024820183526020820180516001600160e01b0316633ee5aeb560e01b1790529151630336c5a160e61b815273__$d8b743afbb06e0339798c3a9c7622b5022$__9263cdb16840926101a892869201610396565b602060405180830381865af41580156101c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906101e791906103c3565b156101fa576002805460ff191660011790555b5050565b600161020b828483610441565b505050565b5f60208284031215610220575f80fd5b81356001600160a01b0381168114610236575f80fd5b9392505050565b5f806020838503121561024e575f80fd5b823567ffffffffffffffff80821115610265575f80fd5b818501915085601f830112610278575f80fd5b813581811115610286575f80fd5b866020828501011115610297575f80fd5b60209290920196919550909350505050565b600181811c908216806102bd57607f821691505b6020821081036102db57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f8083546102ee816102a9565b60018281168015610306576001811461031b57610347565b60ff1984168752821515830287019450610347565b875f526020805f205f5b8581101561033e5781548a820152908401908201610325565b50505082870194505b50929695505050505050565b5f81518084525f5b818110156103775760208185018101518683018201520161035b565b505f602082860101526020601f19601f83011685010191505092915050565b604081525f6103a86040830185610353565b82810360208401526103ba8185610353565b95945050505050565b5f602082840312156103d3575f80fd5b81518015158114610236575f80fd5b634e487b7160e01b5f52604160045260245ffd5b601f82111561020b57805f5260205f20601f840160051c8101602085101561041b5750805b601f840160051c820191505b8181101561043a575f8155600101610427565b5050505050565b67ffffffffffffffff831115610459576104596103e2565b61046d8361046783546102a9565b836103f6565b5f601f84116001811461049e575f85156104875750838201355b5f19600387901b1c1916600186901b17835561043a565b5f83815260208120601f198716915b828110156104cd57868501358255602094850194600190920191016104ad565b50868210156104e9575f1960f88860031b161c19848701351681555b505060018560011b018355505050505056fea2646970667358221220747e9d320c4d7138f82ea61772f7b9cbee5e398192c6def562cccd8e0378ae4364736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = ReentrantEthReceiverContractFunctions(reentrantethreceiver_abi, self.w3, address)  # type: ignore

    functions: ReentrantEthReceiverContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        Lib: LibContract

    link_references_placeholder_lookup: dict[str, str] = {
        "Lib": "__$d8b743afbb06e0339798c3a9c7622b5022$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["Lib"],
                link_references.Lib.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ReentrantEthReceiverContractFunctions(
            reentrantethreceiver_abi, w3, None
        )

        return contract
