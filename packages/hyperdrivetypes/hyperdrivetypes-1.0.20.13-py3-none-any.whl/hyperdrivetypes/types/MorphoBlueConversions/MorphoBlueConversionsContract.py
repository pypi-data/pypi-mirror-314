"""A web3.py Contract class for the MorphoBlueConversions contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

morphoblueconversions_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "convertToBase",
            "inputs": [
                {
                    "name": "_vault",
                    "type": "IMorpho",
                    "internalType": "contract IMorpho",
                },
                {
                    "name": "_baseToken",
                    "type": "IERC20",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_collateralToken",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_oracle",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "_irm", "type": "address", "internalType": "address"},
                {"name": "_lltv", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_shareAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {
                    "name": "_vault",
                    "type": "IMorpho",
                    "internalType": "contract IMorpho",
                },
                {
                    "name": "_baseToken",
                    "type": "IERC20",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_collateralToken",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_oracle",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "_irm", "type": "address", "internalType": "address"},
                {"name": "_lltv", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_baseAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
    ],
)


class MorphoBlueConversionsContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the MorphoBlueConversions contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class MorphoBlueConversionsConvertToBaseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the convertToBase(IMorpho,IERC20,str,str,str,int,int) method."""

    _function_name = "convertToBase"
    _type_signature = expand_struct_type_str(
        tuple(["IMorpho", "IERC20", "str", "str", "str", "int", "int"]), structs
    )
    _error_class = MorphoBlueConversionsContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MorphoBlueConversionsConvertToBaseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the convertToBase method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToBase"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vault: IMorpho, _baseToken: IERC20, _collateralToken: str, _oracle: str, _irm: str, _lltv: int, _shareAmount: int) -> MorphoBlueConversionsConvertToBaseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MorphoBlueConversionsConvertToBaseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MorphoBlueConversionsConvertToBaseContractFunction0._type_signature: MorphoBlueConversionsConvertToBaseContractFunction0,
        }
        return out


class MorphoBlueConversionsConvertToSharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the convertToShares(IMorpho,IERC20,str,str,str,int,int) method."""

    _function_name = "convertToShares"
    _type_signature = expand_struct_type_str(
        tuple(["IMorpho", "IERC20", "str", "str", "str", "int", "int"]), structs
    )
    _error_class = MorphoBlueConversionsContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MorphoBlueConversionsConvertToSharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the convertToShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vault: IMorpho, _baseToken: IERC20, _collateralToken: str, _oracle: str, _irm: str, _lltv: int, _baseAmount: int) -> MorphoBlueConversionsConvertToSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MorphoBlueConversionsConvertToSharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MorphoBlueConversionsConvertToSharesContractFunction0._type_signature: MorphoBlueConversionsConvertToSharesContractFunction0,
        }
        return out


class MorphoBlueConversionsContractFunctions(ContractFunctions):
    """ContractFunctions for the MorphoBlueConversions contract."""

    convertToBase: MorphoBlueConversionsConvertToBaseContractFunction

    convertToShares: MorphoBlueConversionsConvertToSharesContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.convertToBase = (
            MorphoBlueConversionsConvertToBaseContractFunction.factory(
                "convertToBase",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="convertToBase",
            )
        )
        self.convertToShares = (
            MorphoBlueConversionsConvertToSharesContractFunction.factory(
                "convertToShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="convertToShares",
            )
        )


class MorphoBlueConversionsContract(Contract):
    """A web3.py Contract class for the MorphoBlueConversions contract."""

    abi: ABI = morphoblueconversions_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x61080b610035600b8282823980515f1a60731461002957634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061003f575f3560e01c80633c2063f01461004357806349124ca314610068575b5f80fd5b610056610051366004610599565b61007b565b60405190815260200160405180910390f35b610056610076366004610599565b6100aa565b5f805f61008c8a8a8a8a8a8a6100cb565b909250905061009c848383610144565b9a9950505050505050505050565b5f805f6100bb8a8a8a8a8a8a6100cb565b909250905061009c848383610170565b5f806101336040518060a00160405280896001600160a01b03168152602001886001600160a01b03168152602001876001600160a01b03168152602001866001600160a01b0316815260200185815250896001600160a01b031661018c90919063ffffffff16565b50919a909950975050505050505050565b5f61016861015360018561062b565b610160620f42408561062b565b869190610482565b949350505050565b5f610168610181620f42408461062b565b61016060018661062b565b5f805f805f61019c8660a0902090565b604051632e3071cd60e11b8152600481018290529091505f906001600160a01b03891690635c60e39a9060240160c060405180830381865afa1580156101e4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102089190610659565b90505f81608001516001600160801b0316426102249190610702565b90508015801590610241575060408201516001600160801b031615155b8015610259575060608801516001600160a01b031615155b1561044e576060888101805160408051638c00bf6b60e01b81528c516001600160a01b0390811660048301526020808f015182166024840152838f0151821660448401529451811660648301526080808f0151608484015288516001600160801b0390811660a485015295890151861660c484015292880151851660e483015294870151841661010482015290860151831661012482015260a08601519092166101448301525f921690638c00bf6b9061016401602060405180830381865afa158015610328573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061034c9190610715565b90505f61037061035c8385610498565b60408601516001600160801b031690610502565b905061037b8161051d565b8460400181815161038c919061072c565b6001600160801b03169052506103a18161051d565b845185906103b090839061072c565b6001600160801b0390811690915260a08601511615905061044b575f6103ec8560a001516001600160801b03168361050290919063ffffffff16565b90505f61042082875f01516001600160801b031661040a9190610702565b60208801518491906001600160801b0316610170565b905061042b8161051d565b8660200181815161043c919061072c565b6001600160801b031690525050505b50505b508051602082015160408301516060909301516001600160801b039283169b9183169a509282169850911695509350505050565b5f8161048e8486610753565b610168919061076a565b5f806104a48385610753565b90505f6104c482806104bf670de0b6b3a76400006002610753565b610482565b90505f6104df82846104bf670de0b6b3a76400006003610753565b9050806104ec838561062b565b6104f6919061062b565b93505050505b92915050565b5f6105168383670de0b6b3a7640000610482565b9392505050565b6040805180820190915260148152731b585e081d5a5b9d0c4c8e08195e18d95959195960621b60208201525f906001600160801b0383111561057b5760405162461bcd60e51b81526004016105729190610789565b60405180910390fd5b5090919050565b6001600160a01b0381168114610596575f80fd5b50565b5f805f805f805f60e0888a0312156105af575f80fd5b87356105ba81610582565b965060208801356105ca81610582565b955060408801356105da81610582565b945060608801356105ea81610582565b935060808801356105fa81610582565b9699959850939692959460a0840135945060c09093013592915050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156104fc576104fc610617565b80516001600160801b0381168114610654575f80fd5b919050565b5f60c08284031215610669575f80fd5b60405160c0810181811067ffffffffffffffff8211171561069857634e487b7160e01b5f52604160045260245ffd5b6040526106a48361063e565b81526106b26020840161063e565b60208201526106c36040840161063e565b60408201526106d46060840161063e565b60608201526106e56080840161063e565b60808201526106f660a0840161063e565b60a08201529392505050565b818103818111156104fc576104fc610617565b5f60208284031215610725575f80fd5b5051919050565b6001600160801b0381811683821601908082111561074c5761074c610617565b5092915050565b80820281158282048414176104fc576104fc610617565b5f8261078457634e487b7160e01b5f52601260045260245ffd5b500490565b5f602080835283518060208501525f5b818110156107b557858101830151858201604001528201610799565b505f604082860101526040601f19601f830116850101925050509291505056fea26469706673582212204ab4ccba0c5f3e764c460b8ee0bec464bc002d7bd25300673a0c9251c4e0e73f64736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MorphoBlueConversionsContractFunctions(morphoblueconversions_abi, self.w3, address)  # type: ignore

    functions: MorphoBlueConversionsContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MorphoBlueConversionsContractFunctions(
            morphoblueconversions_abi, w3, None
        )

        return contract
