"""Dataclasses for all structs in the IStkWellHyperdrive contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs, ErrorInfo, ErrorParams


@dataclass(kw_only=True)
class AddLiquidityEvent(BaseEvent):
    """The event type for event AddLiquidity"""

    @dataclass(kw_only=True)
    class AddLiquidityEventArgs(BaseEventArgs):
        """The args to the event AddLiquidity"""

        provider: str
        lpAmount: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        lpSharePrice: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: AddLiquidityEventArgs  # type: ignore[override]

    __name__: str = "AddLiquidity"


@dataclass(kw_only=True)
class ApprovalEvent(BaseEvent):
    """The event type for event Approval"""

    @dataclass(kw_only=True)
    class ApprovalEventArgs(BaseEventArgs):
        """The args to the event Approval"""

        owner: str
        spender: str
        value: int

    # We redefine the args field with the specific event arg type.
    args: ApprovalEventArgs  # type: ignore[override]

    __name__: str = "Approval"


@dataclass(kw_only=True)
class ApprovalForAllEvent(BaseEvent):
    """The event type for event ApprovalForAll"""

    @dataclass(kw_only=True)
    class ApprovalForAllEventArgs(BaseEventArgs):
        """The args to the event ApprovalForAll"""

        account: str
        operator: str
        approved: bool

    # We redefine the args field with the specific event arg type.
    args: ApprovalForAllEventArgs  # type: ignore[override]

    __name__: str = "ApprovalForAll"


@dataclass(kw_only=True)
class CloseLongEvent(BaseEvent):
    """The event type for event CloseLong"""

    @dataclass(kw_only=True)
    class CloseLongEventArgs(BaseEventArgs):
        """The args to the event CloseLong"""

        trader: str
        destination: str
        assetId: int
        maturityTime: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        bondAmount: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: CloseLongEventArgs  # type: ignore[override]

    __name__: str = "CloseLong"


@dataclass(kw_only=True)
class CloseShortEvent(BaseEvent):
    """The event type for event CloseShort"""

    @dataclass(kw_only=True)
    class CloseShortEventArgs(BaseEventArgs):
        """The args to the event CloseShort"""

        trader: str
        destination: str
        assetId: int
        maturityTime: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        basePayment: int
        bondAmount: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: CloseShortEventArgs  # type: ignore[override]

    __name__: str = "CloseShort"


@dataclass(kw_only=True)
class CollectGovernanceFeeEvent(BaseEvent):
    """The event type for event CollectGovernanceFee"""

    @dataclass(kw_only=True)
    class CollectGovernanceFeeEventArgs(BaseEventArgs):
        """The args to the event CollectGovernanceFee"""

        collector: str
        amount: int
        vaultSharePrice: int
        asBase: bool

    # We redefine the args field with the specific event arg type.
    args: CollectGovernanceFeeEventArgs  # type: ignore[override]

    __name__: str = "CollectGovernanceFee"


@dataclass(kw_only=True)
class CreateCheckpointEvent(BaseEvent):
    """The event type for event CreateCheckpoint"""

    @dataclass(kw_only=True)
    class CreateCheckpointEventArgs(BaseEventArgs):
        """The args to the event CreateCheckpoint"""

        checkpointTime: int
        checkpointVaultSharePrice: int
        vaultSharePrice: int
        maturedShorts: int
        maturedLongs: int
        lpSharePrice: int

    # We redefine the args field with the specific event arg type.
    args: CreateCheckpointEventArgs  # type: ignore[override]

    __name__: str = "CreateCheckpoint"


@dataclass(kw_only=True)
class InitializeEvent(BaseEvent):
    """The event type for event Initialize"""

    @dataclass(kw_only=True)
    class InitializeEventArgs(BaseEventArgs):
        """The args to the event Initialize"""

        provider: str
        lpAmount: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        apr: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: InitializeEventArgs  # type: ignore[override]

    __name__: str = "Initialize"


@dataclass(kw_only=True)
class OpenLongEvent(BaseEvent):
    """The event type for event OpenLong"""

    @dataclass(kw_only=True)
    class OpenLongEventArgs(BaseEventArgs):
        """The args to the event OpenLong"""

        trader: str
        assetId: int
        maturityTime: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        bondAmount: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: OpenLongEventArgs  # type: ignore[override]

    __name__: str = "OpenLong"


@dataclass(kw_only=True)
class OpenShortEvent(BaseEvent):
    """The event type for event OpenShort"""

    @dataclass(kw_only=True)
    class OpenShortEventArgs(BaseEventArgs):
        """The args to the event OpenShort"""

        trader: str
        assetId: int
        maturityTime: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        baseProceeds: int
        bondAmount: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: OpenShortEventArgs  # type: ignore[override]

    __name__: str = "OpenShort"


@dataclass(kw_only=True)
class PauseStatusUpdatedEvent(BaseEvent):
    """The event type for event PauseStatusUpdated"""

    @dataclass(kw_only=True)
    class PauseStatusUpdatedEventArgs(BaseEventArgs):
        """The args to the event PauseStatusUpdated"""

        isPaused: bool

    # We redefine the args field with the specific event arg type.
    args: PauseStatusUpdatedEventArgs  # type: ignore[override]

    __name__: str = "PauseStatusUpdated"


@dataclass(kw_only=True)
class RedeemWithdrawalSharesEvent(BaseEvent):
    """The event type for event RedeemWithdrawalShares"""

    @dataclass(kw_only=True)
    class RedeemWithdrawalSharesEventArgs(BaseEventArgs):
        """The args to the event RedeemWithdrawalShares"""

        provider: str
        destination: str
        withdrawalShareAmount: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: RedeemWithdrawalSharesEventArgs  # type: ignore[override]

    __name__: str = "RedeemWithdrawalShares"


@dataclass(kw_only=True)
class RemoveLiquidityEvent(BaseEvent):
    """The event type for event RemoveLiquidity"""

    @dataclass(kw_only=True)
    class RemoveLiquidityEventArgs(BaseEventArgs):
        """The args to the event RemoveLiquidity"""

        provider: str
        destination: str
        lpAmount: int
        amount: int
        vaultSharePrice: int
        asBase: bool
        withdrawalShareAmount: int
        lpSharePrice: int
        extraData: bytes

    # We redefine the args field with the specific event arg type.
    args: RemoveLiquidityEventArgs  # type: ignore[override]

    __name__: str = "RemoveLiquidity"


@dataclass(kw_only=True)
class SweepEvent(BaseEvent):
    """The event type for event Sweep"""

    @dataclass(kw_only=True)
    class SweepEventArgs(BaseEventArgs):
        """The args to the event Sweep"""

        collector: str
        target: str

    # We redefine the args field with the specific event arg type.
    args: SweepEventArgs  # type: ignore[override]

    __name__: str = "Sweep"


@dataclass(kw_only=True)
class TransferSingleEvent(BaseEvent):
    """The event type for event TransferSingle"""

    @dataclass(kw_only=True)
    class TransferSingleEventArgs(BaseEventArgs):
        """The args to the event TransferSingle"""

        operator: str
        _from: str
        to: str
        _id: int
        value: int

    # We redefine the args field with the specific event arg type.
    args: TransferSingleEventArgs  # type: ignore[override]

    __name__: str = "TransferSingle"


BatchInputLengthMismatchError = ErrorInfo(
    inputs=[],
    name="BatchInputLengthMismatch",
    selector="0xba430d38",
    signature="BatchInputLengthMismatch()",
)

BelowMinimumContributionError = ErrorInfo(
    inputs=[],
    name="BelowMinimumContribution",
    selector="0xabed41c4",
    signature="BelowMinimumContribution()",
)

CircuitBreakerTriggeredError = ErrorInfo(
    inputs=[],
    name="CircuitBreakerTriggered",
    selector="0x2a958098",
    signature="CircuitBreakerTriggered()",
)

DecreasedPresentValueWhenAddingLiquidityError = ErrorInfo(
    inputs=[],
    name="DecreasedPresentValueWhenAddingLiquidity",
    selector="0x309b2a42",
    signature="DecreasedPresentValueWhenAddingLiquidity()",
)

DistributeExcessIdleFailedError = ErrorInfo(
    inputs=[],
    name="DistributeExcessIdleFailed",
    selector="0x8bdf918d",
    signature="DistributeExcessIdleFailed()",
)

ExpInvalidExponentError = ErrorInfo(
    inputs=[],
    name="ExpInvalidExponent",
    selector="0x73a2d6b1",
    signature="ExpInvalidExponent()",
)

ExpiredDeadlineError = ErrorInfo(
    inputs=[],
    name="ExpiredDeadline",
    selector="0xf87d9271",
    signature="ExpiredDeadline()",
)

InsufficientBalanceError = ErrorInfo(
    inputs=[],
    name="InsufficientBalance",
    selector="0xf4d678b8",
    signature="InsufficientBalance()",
)

InsufficientLiquidityError = ErrorInfo(
    inputs=[],
    name="InsufficientLiquidity",
    selector="0xbb55fd27",
    signature="InsufficientLiquidity()",
)

InvalidAprError = ErrorInfo(
    inputs=[],
    name="InvalidApr",
    selector="0x76c22a22",
    signature="InvalidApr()",
)

InvalidCheckpointTimeError = ErrorInfo(
    inputs=[],
    name="InvalidCheckpointTime",
    selector="0xecd29e81",
    signature="InvalidCheckpointTime()",
)

InvalidERC20BridgeError = ErrorInfo(
    inputs=[],
    name="InvalidERC20Bridge",
    selector="0x2aab8bd3",
    signature="InvalidERC20Bridge()",
)

InvalidEffectiveShareReservesError = ErrorInfo(
    inputs=[],
    name="InvalidEffectiveShareReserves",
    selector="0x85bd2ac4",
    signature="InvalidEffectiveShareReserves()",
)

InvalidFeeDestinationError = ErrorInfo(
    inputs=[],
    name="InvalidFeeDestination",
    selector="0x2b44eccc",
    signature="InvalidFeeDestination()",
)

InvalidInitialVaultSharePriceError = ErrorInfo(
    inputs=[],
    name="InvalidInitialVaultSharePrice",
    selector="0x094b19ad",
    signature="InvalidInitialVaultSharePrice()",
)

InvalidLPSharePriceError = ErrorInfo(
    inputs=[],
    name="InvalidLPSharePrice",
    selector="0xabeba7ee",
    signature="InvalidLPSharePrice()",
)

InvalidPresentValueError = ErrorInfo(
    inputs=[],
    name="InvalidPresentValue",
    selector="0xaa2c6516",
    signature="InvalidPresentValue()",
)

InvalidSignatureError = ErrorInfo(
    inputs=[],
    name="InvalidSignature",
    selector="0x8baa579f",
    signature="InvalidSignature()",
)

InvalidTimestampError = ErrorInfo(
    inputs=[],
    name="InvalidTimestamp",
    selector="0xb7d09497",
    signature="InvalidTimestamp()",
)

LnInvalidInputError = ErrorInfo(
    inputs=[],
    name="LnInvalidInput",
    selector="0xe61b4975",
    signature="LnInvalidInput()",
)

MinimumSharePriceError = ErrorInfo(
    inputs=[],
    name="MinimumSharePrice",
    selector="0x42af972b",
    signature="MinimumSharePrice()",
)

MinimumTransactionAmountError = ErrorInfo(
    inputs=[],
    name="MinimumTransactionAmount",
    selector="0x423bbb46",
    signature="MinimumTransactionAmount()",
)

NotPayableError = ErrorInfo(
    inputs=[],
    name="NotPayable",
    selector="0x1574f9f3",
    signature="NotPayable()",
)

OutputLimitError = ErrorInfo(
    inputs=[],
    name="OutputLimit",
    selector="0xc9726517",
    signature="OutputLimit()",
)

PoolAlreadyInitializedError = ErrorInfo(
    inputs=[],
    name="PoolAlreadyInitialized",
    selector="0x7983c051",
    signature="PoolAlreadyInitialized()",
)

PoolIsPausedError = ErrorInfo(
    inputs=[],
    name="PoolIsPaused",
    selector="0x21081abf",
    signature="PoolIsPaused()",
)

RestrictedZeroAddressError = ErrorInfo(
    inputs=[],
    name="RestrictedZeroAddress",
    selector="0xf0dd15fd",
    signature="RestrictedZeroAddress()",
)

ReturnDataError = ErrorInfo(
    inputs=[
        ErrorParams(name="data", python_type="bytes", solidity_type="bytes"),
    ],
    name="ReturnData",
    selector="0xdcc81126",
    signature="ReturnData(bytes)",
)

SweepFailedError = ErrorInfo(
    inputs=[],
    name="SweepFailed",
    selector="0x9eec2ff8",
    signature="SweepFailed()",
)

TransferFailedError = ErrorInfo(
    inputs=[],
    name="TransferFailed",
    selector="0x90b8ec18",
    signature="TransferFailed()",
)

UnauthorizedError = ErrorInfo(
    inputs=[],
    name="Unauthorized",
    selector="0x82b42900",
    signature="Unauthorized()",
)

UnexpectedSuccessError = ErrorInfo(
    inputs=[],
    name="UnexpectedSuccess",
    selector="0x8bb0a34b",
    signature="UnexpectedSuccess()",
)

UnsafeCastToInt128Error = ErrorInfo(
    inputs=[],
    name="UnsafeCastToInt128",
    selector="0xa5353be5",
    signature="UnsafeCastToInt128()",
)

UnsafeCastToInt256Error = ErrorInfo(
    inputs=[],
    name="UnsafeCastToInt256",
    selector="0x72dd4e02",
    signature="UnsafeCastToInt256()",
)

UnsafeCastToUint112Error = ErrorInfo(
    inputs=[],
    name="UnsafeCastToUint112",
    selector="0x10d62a2e",
    signature="UnsafeCastToUint112()",
)

UnsafeCastToUint128Error = ErrorInfo(
    inputs=[],
    name="UnsafeCastToUint128",
    selector="0x1e15f2a2",
    signature="UnsafeCastToUint128()",
)

UnsafeCastToUint256Error = ErrorInfo(
    inputs=[],
    name="UnsafeCastToUint256",
    selector="0xe3a26e20",
    signature="UnsafeCastToUint256()",
)

UnsupportedTokenError = ErrorInfo(
    inputs=[],
    name="UnsupportedToken",
    selector="0x6a172882",
    signature="UnsupportedToken()",
)

UpdateLiquidityFailedError = ErrorInfo(
    inputs=[],
    name="UpdateLiquidityFailed",
    selector="0x5044b7f5",
    signature="UpdateLiquidityFailed()",
)
