"""A web3.py Contract class for the ValidationLogic contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

validationlogic_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "ISOLATED_COLLATERAL_SUPPLIER_ROLE",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
    ],
)


class ValidationLogicContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the ValidationLogic contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class ValidationLogicHEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the HEALTH_FACTOR_LIQUIDATION_THRESHOLD() method."""

    _function_name = "HEALTH_FACTOR_LIQUIDATION_THRESHOLD"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ValidationLogicContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ValidationLogicHEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the HEALTH_FACTOR_LIQUIDATION_THRESHOLD method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "HEALTH_FACTOR_LIQUIDATION_THRESHOLD"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ValidationLogicHEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ValidationLogicHEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ValidationLogicHEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction0._type_signature: ValidationLogicHEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction0,
        }
        return out


class ValidationLogicISOLATED_COLLATERAL_SUPPLIER_ROLEContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the ISOLATED_COLLATERAL_SUPPLIER_ROLE() method."""

    _function_name = "ISOLATED_COLLATERAL_SUPPLIER_ROLE"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ValidationLogicContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class ValidationLogicISOLATED_COLLATERAL_SUPPLIER_ROLEContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the ISOLATED_COLLATERAL_SUPPLIER_ROLE method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "ISOLATED_COLLATERAL_SUPPLIER_ROLE"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ValidationLogicISOLATED_COLLATERAL_SUPPLIER_ROLEContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ValidationLogicISOLATED_COLLATERAL_SUPPLIER_ROLEContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ValidationLogicISOLATED_COLLATERAL_SUPPLIER_ROLEContractFunction0._type_signature: ValidationLogicISOLATED_COLLATERAL_SUPPLIER_ROLEContractFunction0,
        }
        return out


class ValidationLogicMINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD() method."""

    _function_name = "MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ValidationLogicContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ValidationLogicMINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ValidationLogicMINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ValidationLogicMINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ValidationLogicMINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction0._type_signature: ValidationLogicMINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction0,
        }
        return out


class ValidationLogicREBALANCE_UP_LIQUIDITY_RATE_THRESHOLDContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD() method."""

    _function_name = "REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ValidationLogicContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ValidationLogicREBALANCE_UP_LIQUIDITY_RATE_THRESHOLDContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ValidationLogicREBALANCE_UP_LIQUIDITY_RATE_THRESHOLDContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ValidationLogicREBALANCE_UP_LIQUIDITY_RATE_THRESHOLDContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ValidationLogicREBALANCE_UP_LIQUIDITY_RATE_THRESHOLDContractFunction0._type_signature: ValidationLogicREBALANCE_UP_LIQUIDITY_RATE_THRESHOLDContractFunction0,
        }
        return out


class ValidationLogicContractFunctions(ContractFunctions):
    """ContractFunctions for the ValidationLogic contract."""

    HEALTH_FACTOR_LIQUIDATION_THRESHOLD: (
        ValidationLogicHEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction
    )

    ISOLATED_COLLATERAL_SUPPLIER_ROLE: (
        ValidationLogicISOLATED_COLLATERAL_SUPPLIER_ROLEContractFunction
    )

    MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD: ValidationLogicMINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction

    REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD: (
        ValidationLogicREBALANCE_UP_LIQUIDITY_RATE_THRESHOLDContractFunction
    )

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.HEALTH_FACTOR_LIQUIDATION_THRESHOLD = ValidationLogicHEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction.factory(
            "HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
        )
        self.ISOLATED_COLLATERAL_SUPPLIER_ROLE = ValidationLogicISOLATED_COLLATERAL_SUPPLIER_ROLEContractFunction.factory(
            "ISOLATED_COLLATERAL_SUPPLIER_ROLE",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="ISOLATED_COLLATERAL_SUPPLIER_ROLE",
        )
        self.MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD = ValidationLogicMINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLDContractFunction.factory(
            "MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="MINIMUM_HEALTH_FACTOR_LIQUIDATION_THRESHOLD",
        )
        self.REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = ValidationLogicREBALANCE_UP_LIQUIDITY_RATE_THRESHOLDContractFunction.factory(
            "REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD",
        )


class ValidationLogicContract(Contract):
    """A web3.py Contract class for the ValidationLogic contract."""

    abi: ABI = validationlogic_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60e6610034600b8282823980515f1a60731461002857634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106050575f3560e01c80632b0139fa146054578063561cbec914608c578063abfcc86a14609a578063c3525c281460a2575b5f80fd5b607a7fd1d2cf869016112a9af1107bcf43c3759daf22cf734aad47d0c9c726e33bc78281565b60405190815260200160405180910390f35b607a670d2f13f7789f000081565b607a61232881565b607a670de0b6b3a76400008156fea264697066735822122020401f0e60219deb3a6f673e4e19acdcde4e9ae802b2f85a0f04147f7e1d6ebe64736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = ValidationLogicContractFunctions(validationlogic_abi, self.w3, address)  # type: ignore

    functions: ValidationLogicContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ValidationLogicContractFunctions(
            validationlogic_abi, w3, None
        )

        return contract
