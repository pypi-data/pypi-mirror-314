"""A web3.py Contract class for the IAaveL2HyperdriveDeployerCoordinator contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolDeployConfig": IHyperdrive.PoolDeployConfig,
    "IHyperdrive.Options": IHyperdrive.Options,
}

iaavel2hyperdrivedeployercoordinator_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "convertToBase",
            "inputs": [
                {
                    "name": "_baseToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_vault",
                    "type": "address",
                    "internalType": "contract IL2Pool",
                },
                {
                    "name": "_shareAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {
                    "name": "_baseToken",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "_vault",
                    "type": "address",
                    "internalType": "contract IL2Pool",
                },
                {
                    "name": "_baseAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployHyperdrive",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "_deployConfig",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_targetIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "getNumberOfTargets",
            "inputs": [],
            "outputs": [
                {
                    "name": "numTargets",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "initialize",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {"name": "_lp", "type": "address", "internalType": "address"},
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_apr", "type": "uint256", "internalType": "uint256"},
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {"type": "error", "name": "ApprovalFailed", "inputs": []},
        {"type": "error", "name": "DeploymentAlreadyExists", "inputs": []},
        {"type": "error", "name": "DeploymentDoesNotExist", "inputs": []},
        {"type": "error", "name": "HyperdriveAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "HyperdriveIsNotDeployed", "inputs": []},
        {"type": "error", "name": "IncompleteDeployment", "inputs": []},
        {"type": "error", "name": "InsufficientValue", "inputs": []},
        {"type": "error", "name": "InvalidBaseToken", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {"type": "error", "name": "InvalidFeeAmounts", "inputs": []},
        {"type": "error", "name": "InvalidMinimumShareReserves", "inputs": []},
        {
            "type": "error",
            "name": "InvalidMinimumTransactionAmount",
            "inputs": [],
        },
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTargetIndex", "inputs": []},
        {"type": "error", "name": "InvalidVaultSharesToken", "inputs": []},
        {"type": "error", "name": "MismatchedConfig", "inputs": []},
        {"type": "error", "name": "MismatchedExtraData", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {"type": "error", "name": "SenderIsNotFactory", "inputs": []},
        {"type": "error", "name": "TargetAlreadyDeployed", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
    ],
)


class IAaveL2HyperdriveDeployerCoordinatorApprovalFailedContractError(
    PypechainBaseError
):
    """ContractError for ApprovalFailed."""

    # Error name
    name: str = "ApprovalFailed"
    # 4 byte error selector
    selector: str = "0x8164f842"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ApprovalFailed()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError(
    PypechainBaseError
):
    """ContractError for DeploymentAlreadyExists."""

    # Error name
    name: str = "DeploymentAlreadyExists"
    # 4 byte error selector
    selector: str = "0x77c3669a"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeploymentAlreadyExists()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError(
    PypechainBaseError
):
    """ContractError for DeploymentDoesNotExist."""

    # Error name
    name: str = "DeploymentDoesNotExist"
    # 4 byte error selector
    selector: str = "0xe62c7024"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeploymentDoesNotExist()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError(
    PypechainBaseError
):
    """ContractError for HyperdriveAlreadyDeployed."""

    # Error name
    name: str = "HyperdriveAlreadyDeployed"
    # 4 byte error selector
    selector: str = "0x2c95caeb"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "HyperdriveAlreadyDeployed()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError(
    PypechainBaseError
):
    """ContractError for HyperdriveIsNotDeployed."""

    # Error name
    name: str = "HyperdriveIsNotDeployed"
    # 4 byte error selector
    selector: str = "0x952b05cb"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "HyperdriveIsNotDeployed()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorIncompleteDeploymentContractError(
    PypechainBaseError
):
    """ContractError for IncompleteDeployment."""

    # Error name
    name: str = "IncompleteDeployment"
    # 4 byte error selector
    selector: str = "0xe97cc2bf"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "IncompleteDeployment()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorInsufficientValueContractError(
    PypechainBaseError
):
    """ContractError for InsufficientValue."""

    # Error name
    name: str = "InsufficientValue"
    # 4 byte error selector
    selector: str = "0x11011294"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InsufficientValue()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorInvalidBaseTokenContractError(
    PypechainBaseError
):
    """ContractError for InvalidBaseToken."""

    # Error name
    name: str = "InvalidBaseToken"
    # 4 byte error selector
    selector: str = "0x0e442a4a"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidBaseToken()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidCheckpointDuration."""

    # Error name
    name: str = "InvalidCheckpointDuration"
    # 4 byte error selector
    selector: str = "0x5428734d"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidCheckpointDuration()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError(
    PypechainBaseError
):
    """ContractError for InvalidFeeAmounts."""

    # Error name
    name: str = "InvalidFeeAmounts"
    # 4 byte error selector
    selector: str = "0x45ee5986"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidFeeAmounts()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinimumShareReserves."""

    # Error name
    name: str = "InvalidMinimumShareReserves"
    # 4 byte error selector
    selector: str = "0x49db44f5"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinimumShareReserves()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinimumTransactionAmount."""

    # Error name
    name: str = "InvalidMinimumTransactionAmount"
    # 4 byte error selector
    selector: str = "0x3192a446"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinimumTransactionAmount()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorInvalidPositionDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidPositionDuration."""

    # Error name
    name: str = "InvalidPositionDuration"
    # 4 byte error selector
    selector: str = "0x4a7fff9e"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidPositionDuration()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorInvalidTargetIndexContractError(
    PypechainBaseError
):
    """ContractError for InvalidTargetIndex."""

    # Error name
    name: str = "InvalidTargetIndex"
    # 4 byte error selector
    selector: str = "0x3b3f02b2"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTargetIndex()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError(
    PypechainBaseError
):
    """ContractError for InvalidVaultSharesToken."""

    # Error name
    name: str = "InvalidVaultSharesToken"
    # 4 byte error selector
    selector: str = "0xe7ee73a0"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidVaultSharesToken()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorMismatchedConfigContractError(
    PypechainBaseError
):
    """ContractError for MismatchedConfig."""

    # Error name
    name: str = "MismatchedConfig"
    # 4 byte error selector
    selector: str = "0x332ee11f"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "MismatchedConfig()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorMismatchedExtraDataContractError(
    PypechainBaseError
):
    """ContractError for MismatchedExtraData."""

    # Error name
    name: str = "MismatchedExtraData"
    # 4 byte error selector
    selector: str = "0xd1939688"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "MismatchedExtraData()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorNotPayableContractError(
    PypechainBaseError
):
    """ContractError for NotPayable."""

    # Error name
    name: str = "NotPayable"
    # 4 byte error selector
    selector: str = "0x1574f9f3"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "NotPayable()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError(
    PypechainBaseError
):
    """ContractError for SenderIsNotFactory."""

    # Error name
    name: str = "SenderIsNotFactory"
    # 4 byte error selector
    selector: str = "0x40843511"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SenderIsNotFactory()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError(
    PypechainBaseError
):
    """ContractError for TargetAlreadyDeployed."""

    # Error name
    name: str = "TargetAlreadyDeployed"
    # 4 byte error selector
    selector: str = "0x0744b578"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TargetAlreadyDeployed()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorTransferFailedContractError(
    PypechainBaseError
):
    """ContractError for TransferFailed."""

    # Error name
    name: str = "TransferFailed"
    # 4 byte error selector
    selector: str = "0x90b8ec18"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TransferFailed()"
    # Error input types
    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi


class IAaveL2HyperdriveDeployerCoordinatorContractErrors(
    PypechainBaseContractErrors
):
    """ContractErrors for the IAaveL2HyperdriveDeployerCoordinator contract."""

    ApprovalFailed: (
        IAaveL2HyperdriveDeployerCoordinatorApprovalFailedContractError
    )

    DeploymentAlreadyExists: (
        IAaveL2HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError
    )

    DeploymentDoesNotExist: (
        IAaveL2HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError
    )

    HyperdriveAlreadyDeployed: IAaveL2HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError

    HyperdriveIsNotDeployed: (
        IAaveL2HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError
    )

    IncompleteDeployment: (
        IAaveL2HyperdriveDeployerCoordinatorIncompleteDeploymentContractError
    )

    InsufficientValue: (
        IAaveL2HyperdriveDeployerCoordinatorInsufficientValueContractError
    )

    InvalidBaseToken: (
        IAaveL2HyperdriveDeployerCoordinatorInvalidBaseTokenContractError
    )

    InvalidCheckpointDuration: IAaveL2HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError

    InvalidFeeAmounts: (
        IAaveL2HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError
    )

    InvalidMinimumShareReserves: IAaveL2HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError

    InvalidMinimumTransactionAmount: IAaveL2HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError

    InvalidPositionDuration: (
        IAaveL2HyperdriveDeployerCoordinatorInvalidPositionDurationContractError
    )

    InvalidTargetIndex: (
        IAaveL2HyperdriveDeployerCoordinatorInvalidTargetIndexContractError
    )

    InvalidVaultSharesToken: (
        IAaveL2HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError
    )

    MismatchedConfig: (
        IAaveL2HyperdriveDeployerCoordinatorMismatchedConfigContractError
    )

    MismatchedExtraData: (
        IAaveL2HyperdriveDeployerCoordinatorMismatchedExtraDataContractError
    )

    NotPayable: IAaveL2HyperdriveDeployerCoordinatorNotPayableContractError

    SenderIsNotFactory: (
        IAaveL2HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError
    )

    TargetAlreadyDeployed: (
        IAaveL2HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError
    )

    TransferFailed: (
        IAaveL2HyperdriveDeployerCoordinatorTransferFailedContractError
    )

    def __init__(
        self,
    ) -> None:
        self.ApprovalFailed = (
            IAaveL2HyperdriveDeployerCoordinatorApprovalFailedContractError()
        )
        self.DeploymentAlreadyExists = (
            IAaveL2HyperdriveDeployerCoordinatorDeploymentAlreadyExistsContractError()
        )
        self.DeploymentDoesNotExist = (
            IAaveL2HyperdriveDeployerCoordinatorDeploymentDoesNotExistContractError()
        )
        self.HyperdriveAlreadyDeployed = (
            IAaveL2HyperdriveDeployerCoordinatorHyperdriveAlreadyDeployedContractError()
        )
        self.HyperdriveIsNotDeployed = (
            IAaveL2HyperdriveDeployerCoordinatorHyperdriveIsNotDeployedContractError()
        )
        self.IncompleteDeployment = (
            IAaveL2HyperdriveDeployerCoordinatorIncompleteDeploymentContractError()
        )
        self.InsufficientValue = (
            IAaveL2HyperdriveDeployerCoordinatorInsufficientValueContractError()
        )
        self.InvalidBaseToken = (
            IAaveL2HyperdriveDeployerCoordinatorInvalidBaseTokenContractError()
        )
        self.InvalidCheckpointDuration = (
            IAaveL2HyperdriveDeployerCoordinatorInvalidCheckpointDurationContractError()
        )
        self.InvalidFeeAmounts = (
            IAaveL2HyperdriveDeployerCoordinatorInvalidFeeAmountsContractError()
        )
        self.InvalidMinimumShareReserves = (
            IAaveL2HyperdriveDeployerCoordinatorInvalidMinimumShareReservesContractError()
        )
        self.InvalidMinimumTransactionAmount = (
            IAaveL2HyperdriveDeployerCoordinatorInvalidMinimumTransactionAmountContractError()
        )
        self.InvalidPositionDuration = (
            IAaveL2HyperdriveDeployerCoordinatorInvalidPositionDurationContractError()
        )
        self.InvalidTargetIndex = (
            IAaveL2HyperdriveDeployerCoordinatorInvalidTargetIndexContractError()
        )
        self.InvalidVaultSharesToken = (
            IAaveL2HyperdriveDeployerCoordinatorInvalidVaultSharesTokenContractError()
        )
        self.MismatchedConfig = (
            IAaveL2HyperdriveDeployerCoordinatorMismatchedConfigContractError()
        )
        self.MismatchedExtraData = (
            IAaveL2HyperdriveDeployerCoordinatorMismatchedExtraDataContractError()
        )
        self.NotPayable = (
            IAaveL2HyperdriveDeployerCoordinatorNotPayableContractError()
        )
        self.SenderIsNotFactory = (
            IAaveL2HyperdriveDeployerCoordinatorSenderIsNotFactoryContractError()
        )
        self.TargetAlreadyDeployed = (
            IAaveL2HyperdriveDeployerCoordinatorTargetAlreadyDeployedContractError()
        )
        self.TransferFailed = (
            IAaveL2HyperdriveDeployerCoordinatorTransferFailedContractError()
        )

        self._all = [
            self.ApprovalFailed,
            self.DeploymentAlreadyExists,
            self.DeploymentDoesNotExist,
            self.HyperdriveAlreadyDeployed,
            self.HyperdriveIsNotDeployed,
            self.IncompleteDeployment,
            self.InsufficientValue,
            self.InvalidBaseToken,
            self.InvalidCheckpointDuration,
            self.InvalidFeeAmounts,
            self.InvalidMinimumShareReserves,
            self.InvalidMinimumTransactionAmount,
            self.InvalidPositionDuration,
            self.InvalidTargetIndex,
            self.InvalidVaultSharesToken,
            self.MismatchedConfig,
            self.MismatchedExtraData,
            self.NotPayable,
            self.SenderIsNotFactory,
            self.TargetAlreadyDeployed,
            self.TransferFailed,
        ]


class IAaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the convertToBase(str,str,int) method."""

    _function_name = "convertToBase"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int"]), structs
    )
    _error_class = IAaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IAaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the convertToBase method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToBase"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _baseToken: str, _vault: str, _shareAmount: int) -> IAaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IAaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IAaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction0._type_signature: IAaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction0,
        }
        return out


class IAaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the convertToShares(str,str,int) method."""

    _function_name = "convertToShares"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int"]), structs
    )
    _error_class = IAaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IAaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the convertToShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _baseToken: str, _vault: str, _baseAmount: int) -> IAaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IAaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IAaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction0._type_signature: IAaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction0,
        }
        return out


class IAaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployHyperdrive(bytes,str,IHyperdrive.PoolDeployConfig,bytes,bytes) method."""

    _function_name = "deployHyperdrive"
    _type_signature = expand_struct_type_str(
        tuple(
            ["bytes", "str", "IHyperdrive.PoolDeployConfig", "bytes", "bytes"]
        ),
        structs,
    )
    _error_class = IAaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IAaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the deployHyperdrive method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployHyperdrive"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, __name: str, _deployConfig: IHyperdrive.PoolDeployConfig, _extraData: bytes, _salt: bytes) -> IAaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IAaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IAaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0._type_signature: IAaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction0,
        }
        return out


class IAaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployTarget(bytes,IHyperdrive.PoolDeployConfig,bytes,int,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(
            ["bytes", "IHyperdrive.PoolDeployConfig", "bytes", "int", "bytes"]
        ),
        structs,
    )
    _error_class = IAaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IAaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, _deployConfig: IHyperdrive.PoolDeployConfig, _extraData: bytes, _targetIndex: int, _salt: bytes) -> IAaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IAaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IAaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction0._type_signature: IAaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction0,
        }
        return out


class IAaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getNumberOfTargets() method."""

    _function_name = "getNumberOfTargets"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IAaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IAaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the getNumberOfTargets method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getNumberOfTargets"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IAaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IAaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IAaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0._type_signature: IAaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction0,
        }
        return out


class IAaveL2HyperdriveDeployerCoordinatorInitializeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the initialize(bytes,str,int,int,IHyperdrive.Options) method."""

    _function_name = "initialize"
    _type_signature = expand_struct_type_str(
        tuple(["bytes", "str", "int", "int", "IHyperdrive.Options"]), structs
    )
    _error_class = IAaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class IAaveL2HyperdriveDeployerCoordinatorInitializeContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the initialize method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "initialize"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, _lp: str, _contribution: int, _apr: int, _options: IHyperdrive.Options) -> IAaveL2HyperdriveDeployerCoordinatorInitializeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IAaveL2HyperdriveDeployerCoordinatorInitializeContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IAaveL2HyperdriveDeployerCoordinatorInitializeContractFunction0._type_signature: IAaveL2HyperdriveDeployerCoordinatorInitializeContractFunction0,
        }
        return out


class IAaveL2HyperdriveDeployerCoordinatorKindContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the kind() method."""

    _function_name = "kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IAaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IAaveL2HyperdriveDeployerCoordinatorKindContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IAaveL2HyperdriveDeployerCoordinatorKindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IAaveL2HyperdriveDeployerCoordinatorKindContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IAaveL2HyperdriveDeployerCoordinatorKindContractFunction0._type_signature: IAaveL2HyperdriveDeployerCoordinatorKindContractFunction0,
        }
        return out


class IAaveL2HyperdriveDeployerCoordinatorNameContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the name() method."""

    _function_name = "name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IAaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IAaveL2HyperdriveDeployerCoordinatorNameContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IAaveL2HyperdriveDeployerCoordinatorNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IAaveL2HyperdriveDeployerCoordinatorNameContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IAaveL2HyperdriveDeployerCoordinatorNameContractFunction0._type_signature: IAaveL2HyperdriveDeployerCoordinatorNameContractFunction0,
        }
        return out


class IAaveL2HyperdriveDeployerCoordinatorVersionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the version() method."""

    _function_name = "version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IAaveL2HyperdriveDeployerCoordinatorContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IAaveL2HyperdriveDeployerCoordinatorVersionContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IAaveL2HyperdriveDeployerCoordinatorVersionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IAaveL2HyperdriveDeployerCoordinatorVersionContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IAaveL2HyperdriveDeployerCoordinatorVersionContractFunction0._type_signature: IAaveL2HyperdriveDeployerCoordinatorVersionContractFunction0,
        }
        return out


class IAaveL2HyperdriveDeployerCoordinatorContractFunctions(ContractFunctions):
    """ContractFunctions for the IAaveL2HyperdriveDeployerCoordinator contract."""

    convertToBase: (
        IAaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction
    )

    convertToShares: (
        IAaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction
    )

    deployHyperdrive: (
        IAaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction
    )

    deployTarget: (
        IAaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction
    )

    getNumberOfTargets: (
        IAaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction
    )

    initialize: IAaveL2HyperdriveDeployerCoordinatorInitializeContractFunction

    kind: IAaveL2HyperdriveDeployerCoordinatorKindContractFunction

    name: IAaveL2HyperdriveDeployerCoordinatorNameContractFunction

    version: IAaveL2HyperdriveDeployerCoordinatorVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.convertToBase = IAaveL2HyperdriveDeployerCoordinatorConvertToBaseContractFunction.factory(
            "convertToBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToBase",
        )
        self.convertToShares = IAaveL2HyperdriveDeployerCoordinatorConvertToSharesContractFunction.factory(
            "convertToShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="convertToShares",
        )
        self.deployHyperdrive = IAaveL2HyperdriveDeployerCoordinatorDeployHyperdriveContractFunction.factory(
            "deployHyperdrive",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployHyperdrive",
        )
        self.deployTarget = IAaveL2HyperdriveDeployerCoordinatorDeployTargetContractFunction.factory(
            "deployTarget",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployTarget",
        )
        self.getNumberOfTargets = IAaveL2HyperdriveDeployerCoordinatorGetNumberOfTargetsContractFunction.factory(
            "getNumberOfTargets",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getNumberOfTargets",
        )
        self.initialize = IAaveL2HyperdriveDeployerCoordinatorInitializeContractFunction.factory(
            "initialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="initialize",
        )
        self.kind = (
            IAaveL2HyperdriveDeployerCoordinatorKindContractFunction.factory(
                "kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="kind",
            )
        )
        self.name = (
            IAaveL2HyperdriveDeployerCoordinatorNameContractFunction.factory(
                "name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="name",
            )
        )
        self.version = (
            IAaveL2HyperdriveDeployerCoordinatorVersionContractFunction.factory(
                "version",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="version",
            )
        )


class IAaveL2HyperdriveDeployerCoordinatorContract(Contract):
    """A web3.py Contract class for the IAaveL2HyperdriveDeployerCoordinator contract."""

    abi: ABI = iaavel2hyperdrivedeployercoordinator_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IAaveL2HyperdriveDeployerCoordinatorContractFunctions(iaavel2hyperdrivedeployercoordinator_abi, self.w3, address)  # type: ignore

        self.errors = IAaveL2HyperdriveDeployerCoordinatorContractErrors()

    errors: IAaveL2HyperdriveDeployerCoordinatorContractErrors = (
        IAaveL2HyperdriveDeployerCoordinatorContractErrors()
    )

    functions: IAaveL2HyperdriveDeployerCoordinatorContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = (
            IAaveL2HyperdriveDeployerCoordinatorContractFunctions(
                iaavel2hyperdrivedeployercoordinator_abi, w3, None
            )
        )
        contract.errors = IAaveL2HyperdriveDeployerCoordinatorContractErrors()

        return contract
