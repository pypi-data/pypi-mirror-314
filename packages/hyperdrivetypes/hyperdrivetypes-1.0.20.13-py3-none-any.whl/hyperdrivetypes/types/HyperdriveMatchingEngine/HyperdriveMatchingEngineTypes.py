"""Dataclasses for all structs in the HyperdriveMatchingEngine contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs, ErrorInfo, ErrorParams


@dataclass(kw_only=True)
class EIP712DomainChangedEvent(BaseEvent):
    """The event type for event EIP712DomainChanged"""

    __name__: str = "EIP712DomainChanged"


@dataclass(kw_only=True)
class OrdersCancelledEvent(BaseEvent):
    """The event type for event OrdersCancelled"""

    @dataclass(kw_only=True)
    class OrdersCancelledEventArgs(BaseEventArgs):
        """The args to the event OrdersCancelled"""

        trader: str
        orderHashes: list[bytes]

    # We redefine the args field with the specific event arg type.
    args: OrdersCancelledEventArgs  # type: ignore[override]

    __name__: str = "OrdersCancelled"


@dataclass(kw_only=True)
class OrdersMatchedEvent(BaseEvent):
    """The event type for event OrdersMatched"""

    @dataclass(kw_only=True)
    class OrdersMatchedEventArgs(BaseEventArgs):
        """The args to the event OrdersMatched"""

        hyperdrive: str
        longOrderHash: bytes
        shortOrderHash: bytes
        long: str
        short: str

    # We redefine the args field with the specific event arg type.
    args: OrdersMatchedEventArgs  # type: ignore[override]

    __name__: str = "OrdersMatched"


AddressEmptyCodeError = ErrorInfo(
    inputs=[
        ErrorParams(name="target", python_type="str", solidity_type="address"),
    ],
    name="AddressEmptyCode",
    selector="0x9996b315",
    signature="AddressEmptyCode(address)",
)

AddressInsufficientBalanceError = ErrorInfo(
    inputs=[
        ErrorParams(name="account", python_type="str", solidity_type="address"),
    ],
    name="AddressInsufficientBalance",
    selector="0xcd786059",
    signature="AddressInsufficientBalance(address)",
)

AlreadyCancelledError = ErrorInfo(
    inputs=[],
    name="AlreadyCancelled",
    selector="0x54e37625",
    signature="AlreadyCancelled()",
)

AlreadyExpiredError = ErrorInfo(
    inputs=[],
    name="AlreadyExpired",
    selector="0xa0d64f8a",
    signature="AlreadyExpired()",
)

ECDSAInvalidSignatureError = ErrorInfo(
    inputs=[],
    name="ECDSAInvalidSignature",
    selector="0xf645eedf",
    signature="ECDSAInvalidSignature()",
)

ECDSAInvalidSignatureLengthError = ErrorInfo(
    inputs=[
        ErrorParams(name="length", python_type="int", solidity_type="uint256"),
    ],
    name="ECDSAInvalidSignatureLength",
    selector="0xfce698f7",
    signature="ECDSAInvalidSignatureLength(uint256)",
)

ECDSAInvalidSignatureSError = ErrorInfo(
    inputs=[
        ErrorParams(name="s", python_type="bytes", solidity_type="bytes32"),
    ],
    name="ECDSAInvalidSignatureS",
    selector="0xd78bce0c",
    signature="ECDSAInvalidSignatureS(bytes32)",
)

FailedInnerCallError = ErrorInfo(
    inputs=[],
    name="FailedInnerCall",
    selector="0x1425ea42",
    signature="FailedInnerCall()",
)

InvalidDestinationError = ErrorInfo(
    inputs=[],
    name="InvalidDestination",
    selector="0xac6b05f5",
    signature="InvalidDestination()",
)

InvalidMatchError = ErrorInfo(
    inputs=[],
    name="InvalidMatch",
    selector="0x29ac473e",
    signature="InvalidMatch()",
)

InvalidOrderTypeError = ErrorInfo(
    inputs=[],
    name="InvalidOrderType",
    selector="0x688c176f",
    signature="InvalidOrderType()",
)

InvalidSenderError = ErrorInfo(
    inputs=[],
    name="InvalidSender",
    selector="0xddb5de5e",
    signature="InvalidSender()",
)

InvalidSettlementAssetError = ErrorInfo(
    inputs=[],
    name="InvalidSettlementAsset",
    selector="0xabca264a",
    signature="InvalidSettlementAsset()",
)

InvalidShortStringError = ErrorInfo(
    inputs=[],
    name="InvalidShortString",
    selector="0xb3512b0c",
    signature="InvalidShortString()",
)

InvalidSignatureError = ErrorInfo(
    inputs=[],
    name="InvalidSignature",
    selector="0x8baa579f",
    signature="InvalidSignature()",
)

MismatchedHyperdriveError = ErrorInfo(
    inputs=[],
    name="MismatchedHyperdrive",
    selector="0x4cf1ffa4",
    signature="MismatchedHyperdrive()",
)

ReentrancyGuardReentrantCallError = ErrorInfo(
    inputs=[],
    name="ReentrancyGuardReentrantCall",
    selector="0x3ee5aeb5",
    signature="ReentrancyGuardReentrantCall()",
)

SafeERC20FailedOperationError = ErrorInfo(
    inputs=[
        ErrorParams(name="token", python_type="str", solidity_type="address"),
    ],
    name="SafeERC20FailedOperation",
    selector="0x5274afe7",
    signature="SafeERC20FailedOperation(address)",
)

StringTooLongError = ErrorInfo(
    inputs=[
        ErrorParams(name="str", python_type="str", solidity_type="string"),
    ],
    name="StringTooLong",
    selector="0x305a27a9",
    signature="StringTooLong(string)",
)
