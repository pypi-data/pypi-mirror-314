"""A web3.py Contract class for the StakingUSDSHyperdriveInstanceTest contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..InstanceTest import InstanceTestTypes as InstanceTest
from ..LPMath import LPMathContract
from ..StakingUSDSConversions import StakingUSDSConversionsContract
from ..StdInvariant import StdInvariantTypes as StdInvariant
from .StakingUSDSHyperdriveInstanceTestTypes import (
    AddLiquidityEvent,
    ApprovalEvent,
    ApprovalForAllEvent,
    CloseLongEvent,
    CloseShortEvent,
    CollectGovernanceFeeEvent,
    CreateCheckpointEvent,
    DeployedEvent,
    InitializeEvent,
    Log_addressEvent,
    Log_arrayEvent,
    Log_bytes32Event,
    Log_bytesEvent,
    Log_intEvent,
    Log_named_addressEvent,
    Log_named_arrayEvent,
    Log_named_bytes32Event,
    Log_named_bytesEvent,
    Log_named_decimal_intEvent,
    Log_named_decimal_uintEvent,
    Log_named_intEvent,
    Log_named_stringEvent,
    Log_named_uintEvent,
    Log_stringEvent,
    Log_uintEvent,
    LogEvent,
    LogsEvent,
    OpenLongEvent,
    OpenShortEvent,
    PauseStatusUpdatedEvent,
    RedeemWithdrawalSharesEvent,
    RemoveLiquidityEvent,
    SweepEvent,
    TransferSingleEvent,
)

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "InstanceTest.InstanceTestConfig": InstanceTest.InstanceTestConfig,
    "StdInvariant.FuzzSelector": StdInvariant.FuzzSelector,
    "StdInvariant.FuzzInterface": StdInvariant.FuzzInterface,
}

stakingusdshyperdriveinstancetest_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct InstanceTest.InstanceTestConfig",
                    "components": [
                        {
                            "name": "name",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "kind",
                            "type": "string",
                            "internalType": "string",
                        },
                        {
                            "name": "decimals",
                            "type": "uint8",
                            "internalType": "uint8",
                        },
                        {
                            "name": "baseTokenWhaleAccounts",
                            "type": "address[]",
                            "internalType": "address[]",
                        },
                        {
                            "name": "vaultSharesTokenWhaleAccounts",
                            "type": "address[]",
                            "internalType": "address[]",
                        },
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "shareTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "enableBaseDeposits",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "enableShareDeposits",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "enableBaseWithdraws",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "enableShareWithdraws",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "baseWithdrawError",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "isRebasing",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "shouldAccrueInterest",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "closeLongWithSharesTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "closeLongWithBaseTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "closeShortWithBaseUpperBoundTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "closeShortWithBaseTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "closeShortWithSharesTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLpInstantaneousWithBaseTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLpInstantaneousWithSharesTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLpWithdrawalSharesWithBaseTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLpWithdrawalSharesWithSharesTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLongInstantaneousWithBaseUpperBoundTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLongInstantaneousWithBaseTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLongInstantaneousWithSharesUpperBoundTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLongInstantaneousWithSharesTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLongMaturityWithBaseUpperBoundTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLongMaturityWithBaseTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLongMaturityWithSharesUpperBoundTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripLongMaturityWithSharesTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripShortInstantaneousWithBaseUpperBoundTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripShortInstantaneousWithBaseTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripShortInstantaneousWithSharesUpperBoundTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripShortInstantaneousWithSharesTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripShortMaturityWithBaseTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "roundTripShortMaturityWithSharesTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "verifyDepositTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "verifyWithdrawalTolerance",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {
                    "name": "_stakingUSDS",
                    "type": "address",
                    "internalType": "contract IStakingUSDS",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "user", "type": "address", "internalType": "address"},
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__deployAndInitialize__asBase",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__deployAndInitialize__asShares",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__kind",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__name",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test__pricePerVaultShare",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__rewards",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test__version",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_close_long_with_base",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_long_with_shares",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_short_with_base",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_close_short_with_shares",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_getters",
            "inputs": [],
            "outputs": [],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_open_long_with_base",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_long_with_eth",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_long_with_shares",
            "inputs": [
                {
                    "name": "basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_base",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_eth",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_open_short_with_shares",
            "inputs": [
                {
                    "name": "shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_vaultSharesPaid",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_maturity_with_base",
            "inputs": [
                {
                    "name": "_basePaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_long_maturity_with_shares",
            "inputs": [
                {
                    "name": "_vaultSharesPaid",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_withdrawal_shares_with_base",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_lp_withdrawal_shares_with_shares",
            "inputs": [
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_instantaneous_with_base",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_instantaneous_with_shares",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_maturity_with_base",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_round_trip_short_maturity_with_shares",
            "inputs": [
                {
                    "name": "_shortAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_variableRate",
                    "type": "int256",
                    "internalType": "int256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_failure_directSweep",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_sweep_success",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "name",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "ExpInvalidExponent", "inputs": []},
        {"type": "error", "name": "InsufficientLiquidity", "inputs": []},
        {"type": "error", "name": "InvalidTimestamp", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint256", "inputs": []},
        {"type": "error", "name": "UnsupportedToken", "inputs": []},
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)


class StakingUSDSHyperdriveInstanceTestExpInvalidExponentContractError(
    PypechainBaseError
):
    """ContractError for ExpInvalidExponent."""

    # Error name
    name: str = "ExpInvalidExponent"
    # 4 byte error selector
    selector: str = "0x73a2d6b1"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ExpInvalidExponent()"
    # Error input types
    abi: ABI = stakingusdshyperdriveinstancetest_abi


class StakingUSDSHyperdriveInstanceTestInsufficientLiquidityContractError(
    PypechainBaseError
):
    """ContractError for InsufficientLiquidity."""

    # Error name
    name: str = "InsufficientLiquidity"
    # 4 byte error selector
    selector: str = "0xbb55fd27"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InsufficientLiquidity()"
    # Error input types
    abi: ABI = stakingusdshyperdriveinstancetest_abi


class StakingUSDSHyperdriveInstanceTestInvalidTimestampContractError(
    PypechainBaseError
):
    """ContractError for InvalidTimestamp."""

    # Error name
    name: str = "InvalidTimestamp"
    # 4 byte error selector
    selector: str = "0xb7d09497"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTimestamp()"
    # Error input types
    abi: ABI = stakingusdshyperdriveinstancetest_abi


class StakingUSDSHyperdriveInstanceTestLnInvalidInputContractError(
    PypechainBaseError
):
    """ContractError for LnInvalidInput."""

    # Error name
    name: str = "LnInvalidInput"
    # 4 byte error selector
    selector: str = "0xe61b4975"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "LnInvalidInput()"
    # Error input types
    abi: ABI = stakingusdshyperdriveinstancetest_abi


class StakingUSDSHyperdriveInstanceTestUnsafeCastToInt256ContractError(
    PypechainBaseError
):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = stakingusdshyperdriveinstancetest_abi


class StakingUSDSHyperdriveInstanceTestUnsafeCastToUint256ContractError(
    PypechainBaseError
):
    """ContractError for UnsafeCastToUint256."""

    # Error name
    name: str = "UnsafeCastToUint256"
    # 4 byte error selector
    selector: str = "0xe3a26e20"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToUint256()"
    # Error input types
    abi: ABI = stakingusdshyperdriveinstancetest_abi


class StakingUSDSHyperdriveInstanceTestUnsupportedTokenContractError(
    PypechainBaseError
):
    """ContractError for UnsupportedToken."""

    # Error name
    name: str = "UnsupportedToken"
    # 4 byte error selector
    selector: str = "0x6a172882"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsupportedToken()"
    # Error input types
    abi: ABI = stakingusdshyperdriveinstancetest_abi


class StakingUSDSHyperdriveInstanceTestWhaleBalanceExceededContractError(
    PypechainBaseError
):
    """ContractError for WhaleBalanceExceeded."""

    # Error name
    name: str = "WhaleBalanceExceeded"
    # 4 byte error selector
    selector: str = "0xc4649d28"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleBalanceExceeded()"
    # Error input types
    abi: ABI = stakingusdshyperdriveinstancetest_abi


class StakingUSDSHyperdriveInstanceTestWhaleIsContractContractError(
    PypechainBaseError
):
    """ContractError for WhaleIsContract."""

    # Error name
    name: str = "WhaleIsContract"
    # 4 byte error selector
    selector: str = "0x98d85a67"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleIsContract()"
    # Error input types
    abi: ABI = stakingusdshyperdriveinstancetest_abi


class StakingUSDSHyperdriveInstanceTestContractErrors(
    PypechainBaseContractErrors
):
    """ContractErrors for the StakingUSDSHyperdriveInstanceTest contract."""

    ExpInvalidExponent: (
        StakingUSDSHyperdriveInstanceTestExpInvalidExponentContractError
    )

    InsufficientLiquidity: (
        StakingUSDSHyperdriveInstanceTestInsufficientLiquidityContractError
    )

    InvalidTimestamp: (
        StakingUSDSHyperdriveInstanceTestInvalidTimestampContractError
    )

    LnInvalidInput: StakingUSDSHyperdriveInstanceTestLnInvalidInputContractError

    UnsafeCastToInt256: (
        StakingUSDSHyperdriveInstanceTestUnsafeCastToInt256ContractError
    )

    UnsafeCastToUint256: (
        StakingUSDSHyperdriveInstanceTestUnsafeCastToUint256ContractError
    )

    UnsupportedToken: (
        StakingUSDSHyperdriveInstanceTestUnsupportedTokenContractError
    )

    WhaleBalanceExceeded: (
        StakingUSDSHyperdriveInstanceTestWhaleBalanceExceededContractError
    )

    WhaleIsContract: (
        StakingUSDSHyperdriveInstanceTestWhaleIsContractContractError
    )

    def __init__(
        self,
    ) -> None:
        self.ExpInvalidExponent = (
            StakingUSDSHyperdriveInstanceTestExpInvalidExponentContractError()
        )
        self.InsufficientLiquidity = (
            StakingUSDSHyperdriveInstanceTestInsufficientLiquidityContractError()
        )
        self.InvalidTimestamp = (
            StakingUSDSHyperdriveInstanceTestInvalidTimestampContractError()
        )
        self.LnInvalidInput = (
            StakingUSDSHyperdriveInstanceTestLnInvalidInputContractError()
        )
        self.UnsafeCastToInt256 = (
            StakingUSDSHyperdriveInstanceTestUnsafeCastToInt256ContractError()
        )
        self.UnsafeCastToUint256 = (
            StakingUSDSHyperdriveInstanceTestUnsafeCastToUint256ContractError()
        )
        self.UnsupportedToken = (
            StakingUSDSHyperdriveInstanceTestUnsupportedTokenContractError()
        )
        self.WhaleBalanceExceeded = (
            StakingUSDSHyperdriveInstanceTestWhaleBalanceExceededContractError()
        )
        self.WhaleIsContract = (
            StakingUSDSHyperdriveInstanceTestWhaleIsContractContractError()
        )

        self._all = [
            self.ExpInvalidExponent,
            self.InsufficientLiquidity,
            self.InvalidTimestamp,
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
            self.UnsafeCastToUint256,
            self.UnsupportedToken,
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]


class StakingUSDSHyperdriveInstanceTestIS_TESTContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the IS_TEST() method."""

    _function_name = "IS_TEST"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestIS_TESTContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the IS_TEST method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "IS_TEST"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestIS_TESTContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestIS_TESTContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestIS_TESTContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestIS_TESTContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestCreateUserContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the createUser(str) method."""

    _function_name = "createUser"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for CreateUser."""

        user: str
        privateKey: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [str, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestCreateUserContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the createUser method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "createUser"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _name: str) -> StakingUSDSHyperdriveInstanceTestCreateUserContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestCreateUserContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestCreateUserContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestCreateUserContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestExcludeArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts() method."""

    _function_name = "excludeArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestExcludeArtifactsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the excludeArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestExcludeArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestExcludeArtifactsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestExcludeArtifactsContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestExcludeArtifactsContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestExcludeContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts() method."""

    _function_name = "excludeContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestExcludeContractsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the excludeContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestExcludeContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestExcludeContractsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestExcludeContractsContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestExcludeContractsContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestExcludeSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders() method."""

    _function_name = "excludeSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestExcludeSendersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the excludeSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestExcludeSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestExcludeSendersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestExcludeSendersContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestExcludeSendersContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestFailedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the failed() method."""

    _function_name = "failed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestFailedContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the failed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "failed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestFailedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestFailedContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestFailedContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestFailedContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestSetUpContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the setUp() method."""

    _function_name = "setUp"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestSetUpContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the setUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestSetUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestSetUpContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestSetUpContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestSetUpContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTargetArtifactSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors() method."""

    _function_name = "targetArtifactSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class StakingUSDSHyperdriveInstanceTestTargetArtifactSelectorsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetArtifactSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifactSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTargetArtifactSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTargetArtifactSelectorsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTargetArtifactSelectorsContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTargetArtifactSelectorsContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTargetArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts() method."""

    _function_name = "targetArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestTargetArtifactsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTargetArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTargetArtifactsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTargetArtifactsContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTargetArtifactsContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTargetContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts() method."""

    _function_name = "targetContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestTargetContractsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTargetContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTargetContractsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTargetContractsContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTargetContractsContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTargetInterfacesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces() method."""

    _function_name = "targetInterfaces"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzInterface]:
        """returns list[StdInvariant.FuzzInterface]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzInterface]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )


class StakingUSDSHyperdriveInstanceTestTargetInterfacesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetInterfaces method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetInterfaces"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTargetInterfacesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTargetInterfacesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTargetInterfacesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTargetInterfacesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTargetSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors() method."""

    _function_name = "targetSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class StakingUSDSHyperdriveInstanceTestTargetSelectorsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTargetSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTargetSelectorsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTargetSelectorsContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTargetSelectorsContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTargetSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders() method."""

    _function_name = "targetSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestTargetSendersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTargetSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTargetSendersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTargetSendersContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTargetSendersContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asBase() method."""

    _function_name = "test__deployAndInitialize__asBase"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test__deployAndInitialize__asBase method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__deployAndInitialize__asBase"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__deployAndInitialize__asShares() method."""

    _function_name = "test__deployAndInitialize__asShares"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test__deployAndInitialize__asShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__deployAndInitialize__asShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest__kindContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__kind() method."""

    _function_name = "test__kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest__kindContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test__kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest__kindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest__kindContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest__kindContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest__kindContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest__nameContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__name() method."""

    _function_name = "test__name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest__nameContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test__name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest__nameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest__nameContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest__nameContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest__nameContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest__pricePerVaultShareContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__pricePerVaultShare(int) method."""

    _function_name = "test__pricePerVaultShare"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest__pricePerVaultShareContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test__pricePerVaultShare method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__pricePerVaultShare"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> StakingUSDSHyperdriveInstanceTestTest__pricePerVaultShareContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest__pricePerVaultShareContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest__pricePerVaultShareContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest__pricePerVaultShareContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest__rewardsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__rewards() method."""

    _function_name = "test__rewards"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest__rewardsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test__rewards method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__rewards"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest__rewardsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest__rewardsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest__rewardsContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest__rewardsContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest__versionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test__version() method."""

    _function_name = "test__version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest__versionContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test__version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test__version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest__versionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest__versionContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest__versionContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest__versionContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_close_long_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_base(int,int) method."""

    _function_name = "test_close_long_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_close_long_with_baseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_close_long_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_long_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int, variableRate: int) -> StakingUSDSHyperdriveInstanceTestTest_close_long_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_close_long_with_baseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_close_long_with_baseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_close_long_with_baseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_close_long_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_long_with_shares(int,int) method."""

    _function_name = "test_close_long_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_close_long_with_sharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_close_long_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_long_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int, variableRate: int) -> StakingUSDSHyperdriveInstanceTestTest_close_long_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_close_long_with_sharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_close_long_with_sharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_close_long_with_sharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_close_short_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_base(int,int) method."""

    _function_name = "test_close_short_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_close_short_with_baseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_close_short_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_short_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int, variableRate: int) -> StakingUSDSHyperdriveInstanceTestTest_close_short_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_close_short_with_baseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_close_short_with_baseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_close_short_with_baseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_close_short_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_close_short_with_shares(int,int) method."""

    _function_name = "test_close_short_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_close_short_with_sharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_close_short_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_close_short_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int, variableRate: int) -> StakingUSDSHyperdriveInstanceTestTest_close_short_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_close_short_with_sharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_close_short_with_sharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_close_short_with_sharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_gettersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_getters() method."""

    _function_name = "test_getters"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_gettersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_getters method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_getters"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest_gettersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_gettersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_gettersContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_gettersContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_open_long_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_base(int) method."""

    _function_name = "test_open_long_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_open_long_with_baseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_open_long_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> StakingUSDSHyperdriveInstanceTestTest_open_long_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_open_long_with_baseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_open_long_with_baseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_open_long_with_baseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_open_long_with_ethContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_eth() method."""

    _function_name = "test_open_long_with_eth"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_open_long_with_ethContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_open_long_with_eth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_eth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest_open_long_with_ethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_open_long_with_ethContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_open_long_with_ethContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_open_long_with_ethContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_open_long_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_long_with_shares(int) method."""

    _function_name = "test_open_long_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_open_long_with_sharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_open_long_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_long_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, basePaid: int) -> StakingUSDSHyperdriveInstanceTestTest_open_long_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_open_long_with_sharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_open_long_with_sharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_open_long_with_sharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_open_short_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_base(int) method."""

    _function_name = "test_open_short_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_open_short_with_baseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_open_short_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int) -> StakingUSDSHyperdriveInstanceTestTest_open_short_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_open_short_with_baseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_open_short_with_baseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_open_short_with_baseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_open_short_with_ethContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_eth() method."""

    _function_name = "test_open_short_with_eth"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_open_short_with_ethContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_open_short_with_eth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_eth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest_open_short_with_ethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_open_short_with_ethContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_open_short_with_ethContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_open_short_with_ethContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_open_short_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_open_short_with_shares(int) method."""

    _function_name = "test_open_short_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_open_short_with_sharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_open_short_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_open_short_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, shortAmount: int) -> StakingUSDSHyperdriveInstanceTestTest_open_short_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_open_short_with_sharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_open_short_with_sharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_open_short_with_sharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_long_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _basePaid: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_long_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_long_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vaultSharesPaid: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_base(int,int) method."""

    _function_name = "test_round_trip_long_maturity_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_long_maturity_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_maturity_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _basePaid: int, _variableRate: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_long_maturity_with_shares(int,int) method."""

    _function_name = "test_round_trip_long_maturity_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_long_maturity_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_long_maturity_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _vaultSharesPaid: int, _variableRate: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_lp_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_lp_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_lp_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_base(int,int) method."""

    _function_name = "test_round_trip_lp_withdrawal_shares_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_withdrawal_shares_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int, _variableRate: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_shares(int,int) method."""

    _function_name = "test_round_trip_lp_withdrawal_shares_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_lp_withdrawal_shares_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_lp_withdrawal_shares_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _contribution: int, _variableRate: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_base(int) method."""

    _function_name = "test_round_trip_short_instantaneous_with_base"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_instantaneous_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_shares(int) method."""

    _function_name = "test_round_trip_short_instantaneous_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_short_instantaneous_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_instantaneous_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_base(int,int) method."""

    _function_name = "test_round_trip_short_maturity_with_base"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_short_maturity_with_base method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_maturity_with_base"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int, _variableRate: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_round_trip_short_maturity_with_shares(int,int) method."""

    _function_name = "test_round_trip_short_maturity_with_shares"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_round_trip_short_maturity_with_shares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_round_trip_short_maturity_with_shares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _shortAmount: int, _variableRate: int) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_failure_directSweep() method."""

    _function_name = "test_sweep_failure_directSweep"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_sweep_failure_directSweep method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_failure_directSweep"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestTest_sweep_successContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_sweep_success() method."""

    _function_name = "test_sweep_success"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class StakingUSDSHyperdriveInstanceTestTest_sweep_successContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_sweep_success method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_sweep_success"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> StakingUSDSHyperdriveInstanceTestTest_sweep_successContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestTest_sweep_successContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestTest_sweep_successContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestTest_sweep_successContractFunction0,
        }
        return out


class StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "str"]), structs
    )
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction1(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,int,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int", "str"]), structs
    )
    _error_class = StakingUSDSHyperdriveInstanceTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "whaleTransfer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, whale: str, token: str, to: str) -> StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction0._type_signature: StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction0,
            StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction1._type_signature: StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction1,
        }
        return out


class StakingUSDSHyperdriveInstanceTestContractFunctions(ContractFunctions):
    """ContractFunctions for the StakingUSDSHyperdriveInstanceTest contract."""

    IS_TEST: StakingUSDSHyperdriveInstanceTestIS_TESTContractFunction

    createUser: StakingUSDSHyperdriveInstanceTestCreateUserContractFunction

    excludeArtifacts: (
        StakingUSDSHyperdriveInstanceTestExcludeArtifactsContractFunction
    )

    excludeContracts: (
        StakingUSDSHyperdriveInstanceTestExcludeContractsContractFunction
    )

    excludeSenders: (
        StakingUSDSHyperdriveInstanceTestExcludeSendersContractFunction
    )

    failed: StakingUSDSHyperdriveInstanceTestFailedContractFunction

    setUp: StakingUSDSHyperdriveInstanceTestSetUpContractFunction

    targetArtifactSelectors: (
        StakingUSDSHyperdriveInstanceTestTargetArtifactSelectorsContractFunction
    )

    targetArtifacts: (
        StakingUSDSHyperdriveInstanceTestTargetArtifactsContractFunction
    )

    targetContracts: (
        StakingUSDSHyperdriveInstanceTestTargetContractsContractFunction
    )

    targetInterfaces: (
        StakingUSDSHyperdriveInstanceTestTargetInterfacesContractFunction
    )

    targetSelectors: (
        StakingUSDSHyperdriveInstanceTestTargetSelectorsContractFunction
    )

    targetSenders: (
        StakingUSDSHyperdriveInstanceTestTargetSendersContractFunction
    )

    test__deployAndInitialize__asBase: StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction

    test__deployAndInitialize__asShares: StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction

    test__kind: StakingUSDSHyperdriveInstanceTestTest__kindContractFunction

    test__name: StakingUSDSHyperdriveInstanceTestTest__nameContractFunction

    test__pricePerVaultShare: StakingUSDSHyperdriveInstanceTestTest__pricePerVaultShareContractFunction

    test__rewards: (
        StakingUSDSHyperdriveInstanceTestTest__rewardsContractFunction
    )

    test__version: (
        StakingUSDSHyperdriveInstanceTestTest__versionContractFunction
    )

    test_close_long_with_base: StakingUSDSHyperdriveInstanceTestTest_close_long_with_baseContractFunction

    test_close_long_with_shares: StakingUSDSHyperdriveInstanceTestTest_close_long_with_sharesContractFunction

    test_close_short_with_base: StakingUSDSHyperdriveInstanceTestTest_close_short_with_baseContractFunction

    test_close_short_with_shares: StakingUSDSHyperdriveInstanceTestTest_close_short_with_sharesContractFunction

    test_getters: StakingUSDSHyperdriveInstanceTestTest_gettersContractFunction

    test_open_long_with_base: StakingUSDSHyperdriveInstanceTestTest_open_long_with_baseContractFunction

    test_open_long_with_eth: (
        StakingUSDSHyperdriveInstanceTestTest_open_long_with_ethContractFunction
    )

    test_open_long_with_shares: StakingUSDSHyperdriveInstanceTestTest_open_long_with_sharesContractFunction

    test_open_short_with_base: StakingUSDSHyperdriveInstanceTestTest_open_short_with_baseContractFunction

    test_open_short_with_eth: StakingUSDSHyperdriveInstanceTestTest_open_short_with_ethContractFunction

    test_open_short_with_shares: StakingUSDSHyperdriveInstanceTestTest_open_short_with_sharesContractFunction

    test_round_trip_long_instantaneous_with_base: StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction

    test_round_trip_long_instantaneous_with_shares: StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction

    test_round_trip_long_maturity_with_base: StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction

    test_round_trip_long_maturity_with_shares: StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction

    test_round_trip_lp_instantaneous_with_base: StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction

    test_round_trip_lp_instantaneous_with_shares: StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction

    test_round_trip_lp_withdrawal_shares_with_base: StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction

    test_round_trip_lp_withdrawal_shares_with_shares: StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction

    test_round_trip_short_instantaneous_with_base: StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction

    test_round_trip_short_instantaneous_with_shares: StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction

    test_round_trip_short_maturity_with_base: StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction

    test_round_trip_short_maturity_with_shares: StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction

    test_sweep_failure_directSweep: StakingUSDSHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction

    test_sweep_success: (
        StakingUSDSHyperdriveInstanceTestTest_sweep_successContractFunction
    )

    whaleTransfer: (
        StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction
    )

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = (
            StakingUSDSHyperdriveInstanceTestIS_TESTContractFunction.factory(
                "IS_TEST",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="IS_TEST",
            )
        )
        self.createUser = (
            StakingUSDSHyperdriveInstanceTestCreateUserContractFunction.factory(
                "createUser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="createUser",
            )
        )
        self.excludeArtifacts = StakingUSDSHyperdriveInstanceTestExcludeArtifactsContractFunction.factory(
            "excludeArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeArtifacts",
        )
        self.excludeContracts = StakingUSDSHyperdriveInstanceTestExcludeContractsContractFunction.factory(
            "excludeContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeContracts",
        )
        self.excludeSenders = StakingUSDSHyperdriveInstanceTestExcludeSendersContractFunction.factory(
            "excludeSenders",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeSenders",
        )
        self.failed = (
            StakingUSDSHyperdriveInstanceTestFailedContractFunction.factory(
                "failed",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="failed",
            )
        )
        self.setUp = (
            StakingUSDSHyperdriveInstanceTestSetUpContractFunction.factory(
                "setUp",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="setUp",
            )
        )
        self.targetArtifactSelectors = StakingUSDSHyperdriveInstanceTestTargetArtifactSelectorsContractFunction.factory(
            "targetArtifactSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifactSelectors",
        )
        self.targetArtifacts = StakingUSDSHyperdriveInstanceTestTargetArtifactsContractFunction.factory(
            "targetArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifacts",
        )
        self.targetContracts = StakingUSDSHyperdriveInstanceTestTargetContractsContractFunction.factory(
            "targetContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetContracts",
        )
        self.targetInterfaces = StakingUSDSHyperdriveInstanceTestTargetInterfacesContractFunction.factory(
            "targetInterfaces",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetInterfaces",
        )
        self.targetSelectors = StakingUSDSHyperdriveInstanceTestTargetSelectorsContractFunction.factory(
            "targetSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetSelectors",
        )
        self.targetSenders = StakingUSDSHyperdriveInstanceTestTargetSendersContractFunction.factory(
            "targetSenders",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetSenders",
        )
        self.test__deployAndInitialize__asBase = StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asBaseContractFunction.factory(
            "test__deployAndInitialize__asBase",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__deployAndInitialize__asBase",
        )
        self.test__deployAndInitialize__asShares = StakingUSDSHyperdriveInstanceTestTest__deployAndInitialize__asSharesContractFunction.factory(
            "test__deployAndInitialize__asShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__deployAndInitialize__asShares",
        )
        self.test__kind = (
            StakingUSDSHyperdriveInstanceTestTest__kindContractFunction.factory(
                "test__kind",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__kind",
            )
        )
        self.test__name = (
            StakingUSDSHyperdriveInstanceTestTest__nameContractFunction.factory(
                "test__name",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test__name",
            )
        )
        self.test__pricePerVaultShare = StakingUSDSHyperdriveInstanceTestTest__pricePerVaultShareContractFunction.factory(
            "test__pricePerVaultShare",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__pricePerVaultShare",
        )
        self.test__rewards = StakingUSDSHyperdriveInstanceTestTest__rewardsContractFunction.factory(
            "test__rewards",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__rewards",
        )
        self.test__version = StakingUSDSHyperdriveInstanceTestTest__versionContractFunction.factory(
            "test__version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test__version",
        )
        self.test_close_long_with_base = StakingUSDSHyperdriveInstanceTestTest_close_long_with_baseContractFunction.factory(
            "test_close_long_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_long_with_base",
        )
        self.test_close_long_with_shares = StakingUSDSHyperdriveInstanceTestTest_close_long_with_sharesContractFunction.factory(
            "test_close_long_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_long_with_shares",
        )
        self.test_close_short_with_base = StakingUSDSHyperdriveInstanceTestTest_close_short_with_baseContractFunction.factory(
            "test_close_short_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_short_with_base",
        )
        self.test_close_short_with_shares = StakingUSDSHyperdriveInstanceTestTest_close_short_with_sharesContractFunction.factory(
            "test_close_short_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_close_short_with_shares",
        )
        self.test_getters = StakingUSDSHyperdriveInstanceTestTest_gettersContractFunction.factory(
            "test_getters",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_getters",
        )
        self.test_open_long_with_base = StakingUSDSHyperdriveInstanceTestTest_open_long_with_baseContractFunction.factory(
            "test_open_long_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_base",
        )
        self.test_open_long_with_eth = StakingUSDSHyperdriveInstanceTestTest_open_long_with_ethContractFunction.factory(
            "test_open_long_with_eth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_eth",
        )
        self.test_open_long_with_shares = StakingUSDSHyperdriveInstanceTestTest_open_long_with_sharesContractFunction.factory(
            "test_open_long_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_long_with_shares",
        )
        self.test_open_short_with_base = StakingUSDSHyperdriveInstanceTestTest_open_short_with_baseContractFunction.factory(
            "test_open_short_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_base",
        )
        self.test_open_short_with_eth = StakingUSDSHyperdriveInstanceTestTest_open_short_with_ethContractFunction.factory(
            "test_open_short_with_eth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_eth",
        )
        self.test_open_short_with_shares = StakingUSDSHyperdriveInstanceTestTest_open_short_with_sharesContractFunction.factory(
            "test_open_short_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_open_short_with_shares",
        )
        self.test_round_trip_long_instantaneous_with_base = StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_long_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_instantaneous_with_base",
        )
        self.test_round_trip_long_instantaneous_with_shares = StakingUSDSHyperdriveInstanceTestTest_round_trip_long_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_long_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_instantaneous_with_shares",
        )
        self.test_round_trip_long_maturity_with_base = StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_baseContractFunction.factory(
            "test_round_trip_long_maturity_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_maturity_with_base",
        )
        self.test_round_trip_long_maturity_with_shares = StakingUSDSHyperdriveInstanceTestTest_round_trip_long_maturity_with_sharesContractFunction.factory(
            "test_round_trip_long_maturity_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_long_maturity_with_shares",
        )
        self.test_round_trip_lp_instantaneous_with_base = StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_lp_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_instantaneous_with_base",
        )
        self.test_round_trip_lp_instantaneous_with_shares = StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_lp_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_instantaneous_with_shares",
        )
        self.test_round_trip_lp_withdrawal_shares_with_base = StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_baseContractFunction.factory(
            "test_round_trip_lp_withdrawal_shares_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_withdrawal_shares_with_base",
        )
        self.test_round_trip_lp_withdrawal_shares_with_shares = StakingUSDSHyperdriveInstanceTestTest_round_trip_lp_withdrawal_shares_with_sharesContractFunction.factory(
            "test_round_trip_lp_withdrawal_shares_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_lp_withdrawal_shares_with_shares",
        )
        self.test_round_trip_short_instantaneous_with_base = StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_baseContractFunction.factory(
            "test_round_trip_short_instantaneous_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_instantaneous_with_base",
        )
        self.test_round_trip_short_instantaneous_with_shares = StakingUSDSHyperdriveInstanceTestTest_round_trip_short_instantaneous_with_sharesContractFunction.factory(
            "test_round_trip_short_instantaneous_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_instantaneous_with_shares",
        )
        self.test_round_trip_short_maturity_with_base = StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_baseContractFunction.factory(
            "test_round_trip_short_maturity_with_base",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_maturity_with_base",
        )
        self.test_round_trip_short_maturity_with_shares = StakingUSDSHyperdriveInstanceTestTest_round_trip_short_maturity_with_sharesContractFunction.factory(
            "test_round_trip_short_maturity_with_shares",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_round_trip_short_maturity_with_shares",
        )
        self.test_sweep_failure_directSweep = StakingUSDSHyperdriveInstanceTestTest_sweep_failure_directSweepContractFunction.factory(
            "test_sweep_failure_directSweep",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_failure_directSweep",
        )
        self.test_sweep_success = StakingUSDSHyperdriveInstanceTestTest_sweep_successContractFunction.factory(
            "test_sweep_success",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_sweep_success",
        )
        self.whaleTransfer = StakingUSDSHyperdriveInstanceTestWhaleTransferContractFunction.factory(
            "whaleTransfer",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="whaleTransfer",
        )


class StakingUSDSHyperdriveInstanceTestAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestApprovalForAllContractEvent(
    ContractEvent
):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestCollectGovernanceFeeContractEvent(
    ContractEvent
):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestCreateCheckpointContractEvent(
    ContractEvent
):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[InitializeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[InitializeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestPauseStatusUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestRedeemWithdrawalSharesContractEvent(
    ContractEvent
):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestRemoveLiquidityContractEvent(
    ContractEvent
):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestTransferSingleContractEvent(
    ContractEvent
):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_named_addressContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_named_arrayContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_named_bytesContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_named_bytes32ContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_named_decimal_intContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_named_decimal_uintContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_named_intContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_named_stringContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_named_uintContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogsEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogsEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class StakingUSDSHyperdriveInstanceTestContractEvents(ContractEvents):
    """ContractEvents for the StakingUSDSHyperdriveInstanceTest contract."""

    AddLiquidity: StakingUSDSHyperdriveInstanceTestAddLiquidityContractEvent

    Approval: StakingUSDSHyperdriveInstanceTestApprovalContractEvent

    ApprovalForAll: StakingUSDSHyperdriveInstanceTestApprovalForAllContractEvent

    CloseLong: StakingUSDSHyperdriveInstanceTestCloseLongContractEvent

    CloseShort: StakingUSDSHyperdriveInstanceTestCloseShortContractEvent

    CollectGovernanceFee: (
        StakingUSDSHyperdriveInstanceTestCollectGovernanceFeeContractEvent
    )

    CreateCheckpoint: (
        StakingUSDSHyperdriveInstanceTestCreateCheckpointContractEvent
    )

    Deployed: StakingUSDSHyperdriveInstanceTestDeployedContractEvent

    Initialize: StakingUSDSHyperdriveInstanceTestInitializeContractEvent

    OpenLong: StakingUSDSHyperdriveInstanceTestOpenLongContractEvent

    OpenShort: StakingUSDSHyperdriveInstanceTestOpenShortContractEvent

    PauseStatusUpdated: (
        StakingUSDSHyperdriveInstanceTestPauseStatusUpdatedContractEvent
    )

    RedeemWithdrawalShares: (
        StakingUSDSHyperdriveInstanceTestRedeemWithdrawalSharesContractEvent
    )

    RemoveLiquidity: (
        StakingUSDSHyperdriveInstanceTestRemoveLiquidityContractEvent
    )

    Sweep: StakingUSDSHyperdriveInstanceTestSweepContractEvent

    TransferSingle: StakingUSDSHyperdriveInstanceTestTransferSingleContractEvent

    log: StakingUSDSHyperdriveInstanceTestLogContractEvent

    log_address: StakingUSDSHyperdriveInstanceTestLog_addressContractEvent

    log_array: StakingUSDSHyperdriveInstanceTestLog_arrayContractEvent

    log_bytes: StakingUSDSHyperdriveInstanceTestLog_bytesContractEvent

    log_bytes32: StakingUSDSHyperdriveInstanceTestLog_bytes32ContractEvent

    log_int: StakingUSDSHyperdriveInstanceTestLog_intContractEvent

    log_named_address: (
        StakingUSDSHyperdriveInstanceTestLog_named_addressContractEvent
    )

    log_named_array: (
        StakingUSDSHyperdriveInstanceTestLog_named_arrayContractEvent
    )

    log_named_bytes: (
        StakingUSDSHyperdriveInstanceTestLog_named_bytesContractEvent
    )

    log_named_bytes32: (
        StakingUSDSHyperdriveInstanceTestLog_named_bytes32ContractEvent
    )

    log_named_decimal_int: (
        StakingUSDSHyperdriveInstanceTestLog_named_decimal_intContractEvent
    )

    log_named_decimal_uint: (
        StakingUSDSHyperdriveInstanceTestLog_named_decimal_uintContractEvent
    )

    log_named_int: StakingUSDSHyperdriveInstanceTestLog_named_intContractEvent

    log_named_string: (
        StakingUSDSHyperdriveInstanceTestLog_named_stringContractEvent
    )

    log_named_uint: StakingUSDSHyperdriveInstanceTestLog_named_uintContractEvent

    log_string: StakingUSDSHyperdriveInstanceTestLog_stringContractEvent

    log_uint: StakingUSDSHyperdriveInstanceTestLog_uintContractEvent

    logs: StakingUSDSHyperdriveInstanceTestLogsContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = (
            StakingUSDSHyperdriveInstanceTestAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            )
        )
        self.Approval = (
            StakingUSDSHyperdriveInstanceTestApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            )
        )
        self.ApprovalForAll = StakingUSDSHyperdriveInstanceTestApprovalForAllContractEvent.factory(
            "ApprovalForAll",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="ApprovalForAll",
        )
        self.CloseLong = (
            StakingUSDSHyperdriveInstanceTestCloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            )
        )
        self.CloseShort = (
            StakingUSDSHyperdriveInstanceTestCloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            )
        )
        self.CollectGovernanceFee = StakingUSDSHyperdriveInstanceTestCollectGovernanceFeeContractEvent.factory(
            "CollectGovernanceFee",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="CollectGovernanceFee",
        )
        self.CreateCheckpoint = StakingUSDSHyperdriveInstanceTestCreateCheckpointContractEvent.factory(
            "CreateCheckpoint",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="CreateCheckpoint",
        )
        self.Deployed = (
            StakingUSDSHyperdriveInstanceTestDeployedContractEvent.factory(
                "Deployed",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Deployed",
            )
        )
        self.Initialize = (
            StakingUSDSHyperdriveInstanceTestInitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            )
        )
        self.OpenLong = (
            StakingUSDSHyperdriveInstanceTestOpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            )
        )
        self.OpenShort = (
            StakingUSDSHyperdriveInstanceTestOpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            )
        )
        self.PauseStatusUpdated = StakingUSDSHyperdriveInstanceTestPauseStatusUpdatedContractEvent.factory(
            "PauseStatusUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="PauseStatusUpdated",
        )
        self.RedeemWithdrawalShares = StakingUSDSHyperdriveInstanceTestRedeemWithdrawalSharesContractEvent.factory(
            "RedeemWithdrawalShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="RedeemWithdrawalShares",
        )
        self.RemoveLiquidity = StakingUSDSHyperdriveInstanceTestRemoveLiquidityContractEvent.factory(
            "RemoveLiquidity",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="RemoveLiquidity",
        )
        self.Sweep = (
            StakingUSDSHyperdriveInstanceTestSweepContractEvent.factory(
                "Sweep",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Sweep",
            )
        )
        self.TransferSingle = StakingUSDSHyperdriveInstanceTestTransferSingleContractEvent.factory(
            "TransferSingle",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="TransferSingle",
        )
        self.log = StakingUSDSHyperdriveInstanceTestLogContractEvent.factory(
            "log", w3=w3, contract_abi=abi, address=address, event_name="log"
        )
        self.log_address = (
            StakingUSDSHyperdriveInstanceTestLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            )
        )
        self.log_array = (
            StakingUSDSHyperdriveInstanceTestLog_arrayContractEvent.factory(
                "log_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_array",
            )
        )
        self.log_bytes = (
            StakingUSDSHyperdriveInstanceTestLog_bytesContractEvent.factory(
                "log_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes",
            )
        )
        self.log_bytes32 = (
            StakingUSDSHyperdriveInstanceTestLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            )
        )
        self.log_int = (
            StakingUSDSHyperdriveInstanceTestLog_intContractEvent.factory(
                "log_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_int",
            )
        )
        self.log_named_address = StakingUSDSHyperdriveInstanceTestLog_named_addressContractEvent.factory(
            "log_named_address",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_named_address",
        )
        self.log_named_array = StakingUSDSHyperdriveInstanceTestLog_named_arrayContractEvent.factory(
            "log_named_array",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_named_array",
        )
        self.log_named_bytes = StakingUSDSHyperdriveInstanceTestLog_named_bytesContractEvent.factory(
            "log_named_bytes",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_named_bytes",
        )
        self.log_named_bytes32 = StakingUSDSHyperdriveInstanceTestLog_named_bytes32ContractEvent.factory(
            "log_named_bytes32",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_named_bytes32",
        )
        self.log_named_decimal_int = StakingUSDSHyperdriveInstanceTestLog_named_decimal_intContractEvent.factory(
            "log_named_decimal_int",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_named_decimal_int",
        )
        self.log_named_decimal_uint = StakingUSDSHyperdriveInstanceTestLog_named_decimal_uintContractEvent.factory(
            "log_named_decimal_uint",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_named_decimal_uint",
        )
        self.log_named_int = (
            StakingUSDSHyperdriveInstanceTestLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            )
        )
        self.log_named_string = StakingUSDSHyperdriveInstanceTestLog_named_stringContractEvent.factory(
            "log_named_string",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_named_string",
        )
        self.log_named_uint = StakingUSDSHyperdriveInstanceTestLog_named_uintContractEvent.factory(
            "log_named_uint",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_named_uint",
        )
        self.log_string = (
            StakingUSDSHyperdriveInstanceTestLog_stringContractEvent.factory(
                "log_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_string",
            )
        )
        self.log_uint = (
            StakingUSDSHyperdriveInstanceTestLog_uintContractEvent.factory(
                "log_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_uint",
            )
        )
        self.logs = StakingUSDSHyperdriveInstanceTestLogsContractEvent.factory(
            "logs", w3=w3, contract_abi=abi, address=address, event_name="logs"
        )


class StakingUSDSHyperdriveInstanceTestContract(Contract):
    """A web3.py Contract class for the StakingUSDSHyperdriveInstanceTest contract."""

    abi: ABI = stakingusdshyperdriveinstancetest_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "$27b302b103d10b9a6b3339aabd1a10a718$__9063c6e6f592906024015b602060405180830381865af41580156200afeb573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200af93919062011a2b565b601e546040516303223eab60e11b81526101009091046001600160a01b031660048201525f805160206204f232833981519152906306447d56906024015f604051808303815f87803b1580156200b066575f80fd5b505af11580156200b079573d5f803e3d5ffd5b505050505f5b60835f9054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200b0d0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200b0f6919062011a2b565b8110156200b1a2576082546083546001600160a01b03918216916349f13de79188911660706200b1256200b731565b66b1a2bc2ec5000080888c6040518963ffffffff1660e01b81526004016200b15598979695949392919062012334565b6020604051808303815f875af11580156200b172573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200b198919062011dd7565b506001016200b07f565b508080156200b1cf57507f0000000000000000000000000000000000000000000000000000000000000000155b156200b25757604a5460835460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200b20d9291169086906004016201178a565b6020604051808303815f875af11580156200b22a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200b250919062011a82565b506200b335565b801580156200b269575060565460ff16155b156200b2a757604b5460835460405163095ea7b360e01b81526001600160a01b039283169263095ea7b3926200b20d9291169086906004016201178a565b806200b33557604b546083546001600160a01b039182169163095ea7b391166200b2d1856200cf22565b6040518363ffffffff1660e01b81526004016200b2f09291906201178a565b6020604051808303815f875af11580156200b30d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200b333919062011a82565b505b60545460ff161580156200b3465750805b156200b3eb575f805160206204f23283398151915263c31eb0e07f00000000000000000000000000000000000000000000000000000000000000006200b3945763350b944160e11b6200b39d565b631574f9f360e01b5b6040518263ffffffff1660e01b81526004016200b3bb919062011d88565b5f604051808303815f87803b1580156200b3d3575f80fd5b505af11580156200b3e6573d5f803e3d5ffd5b505050505b605454610100900460ff161580156200b402575080155b156200b47257604051630618f58760e51b81525f805160206204f2328339815191529063c31eb0e0906200b4429063350b944160e11b9060040162011d88565b5f604051808303815f87803b1580156200b45a575f80fd5b505af11580156200b46d573d5f803e3d5ffd5b505050505b601e546082546001600160a01b036101009092048216319116632e7cd9718380156200b4bb57507f00000000000000000000000000000000000000000000000000000000000000005b6200b4c7575f6200b4d4565b6200b4d485600262011a11565b60835488906001600160a01b0316604560706200b4f06200b731565b60408051606081018252601e5461010090046001600160a01b031681528b151560208201528c9166b1a2bc2ec5000091829181015f6040519080825280601f01601f1916602001820160405280156200b550576020820181803683370190505b508152508f6040518c63ffffffff1660e01b81526004016200b57c9a999897969594939291906201239a565b60206040518083038185885af11580156200b599573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906200b5c0919062011dd7565b604380546001600160a01b0319166001600160a01b039290921691909117905560545460ff1680156200b5f05750815b80156200b61a57507f00000000000000000000000000000000000000000000000000000000000000005b156200b64e576200b6486200b630848362011c23565b601e5461010090046001600160a01b0316316200b6d2565b6200346f565b601e546200346f90829061010090046001600160a01b0316316200b6d2565b604051630b6903e360e11b81526004810184905260248101839052604481018290525f805160206204f232833981519152906316d207c6906064015f6040518083038186803b1580156200b6bf575f80fd5b505afa15801562002f48573d5f803e3d5ffd5b60405163260a5b1560e21b815260048101839052602481018290525f805160206204f232833981519152906398296c54906044015b5f6040518083038186803b1580156200b71e575f80fd5b505afa15801562001586573d5f803e3d5ffd5b604080516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016602082015260609101604051602081830303815290604052905090565b5f5f805160206204f2528339815191525f1c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004015f604051808303815f875af11580156200b7ca573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526200b7f3919081019062012456565b90505f6200b822827fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed2344656200dec8565b90506200b832815160016200b6d2565b6200b899815f815181106200b84b576200b84b620118be565b60200260200101515f01515f815181106200b86a576200b86a620118be565b60200260200101517fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed2344656200dfe5565b6200b8ec815f815181106200b8b2576200b8b2620118be565b60200260200101515f01516001815181106200b8d2576200b8d2620118be565b60200260200101515f1c8c6001600160a01b03166200b6d2565b5f805f80845f815181106200b905576200b905620118be565b6020026020010151602001518060200190518101906200b9269190620125c4565b93509350935093506200b93a848f6200d3bf565b6200b9aa838f6001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156200b97b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526200b9a4919081019062011e3e565b6200d092565b5f8e6001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200b9e9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200ba0f919062011b12565b835181519192506200ba21916200d3bf565b6200ba35836020015182602001516200d3bf565b6200ba49836040015182604001516200d3bf565b6200ba5d836060015182606001516200dfe5565b6200ba7183608001518260a001516200b6d2565b6200ba858360a001518260c001516200b6d2565b6200ba9a8360e001518261010001516200b6d2565b6200bab08361010001518261012001516200b6d2565b6200bac68361012001518261014001516200b6d2565b6200badc8361014001518261016001516200d3bf565b6200baf28361016001518261018001516200d3bf565b6101c0830151516101e0820151516200bb0c91906200b6d2565b6200bb2a836101c0015160200151826101e00151602001516200b6d2565b6200bb48836101c0015160400151826101e00151604001516200b6d2565b6200bb66836101c0015160600151826101e00151606001516200b6d2565b6200bbc2826040516020016200bb7d919062012753565b604051602081830303815290604052805190602001208a6040516020016200bba6919062012753565b604051602081830303815290604052805190602001206200dfe5565b5050505050505f6200bbf5827f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af36200dec8565b90506200bc05815160016200b6d2565b6200bc6c815f815181106200bc1e576200bc1e620118be565b60200260200101515f01515f815181106200bc3d576200bc3d620118be565b60200260200101517f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af36200dfe5565b6200bcb6815f815181106200bc85576200bc85620118be565b60200260200101515f01516001815181106200bca5576200bca5620118be565b60200260200101515f1c8a6200d3bf565b5f8a90505f805f805f865f815181106200bcd4576200bcd4620118be565b6020026020010151602001518060200190518101906200bcf5919062012767565b9398509196509450925090508d8c156200bd9e576200bd98866200bd1b8e600262011a11565b6040516363737ac960e11b8152600481018590526001600160a01b038b169063c6e6f59290602401602060405180830381865afa1580156200bd5f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200bd85919062011a2b565b6200bd91919062011c23565b8c6200b66d565b6200bdbc565b6200bdbc866200bdb08e600262011a11565b6200bd91908462011c23565b6200bdc885826200b6d2565b6200be3f84886001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa1580156200be0b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200be31919062011b12565b60800151620186a06200b66d565b6200be4b838e6200e01f565b6200be57828f6200b6d2565b505050505050505050505050505050505050565b5f6200af938260076200e05b565b5f818311156200bec15760405162461bcd60e51b815260206004820152600e60248201526d098d2c47440dad2dc407c40dac2f60931b60448201526064015b60405180910390fd5b5f6200bece848462011c23565b6200bedb90600162011cf5565b90505f6200beea8287620127af565b90506200bef8858262011cf5565b9695505050505050565b5f805f836200bf7f5760435460405163b88fed9f60e01b8152600481018790526001600160a01b039091169063b88fed9f90602401602060405180830381865afa1580156200bf53573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200bf79919062011a2b565b6200bf81565b845b90506200c01486866040518060e0016040528088151581526020018a6001600160a01b031681526020015f6001600160401b038111156200bfc6576200bfc662011622565b6040519080825280601f01601f1916602001820160405280156200bff1576020820181803683370190505b5081526020018981526020015f81526020018581526020015f198152506200e254565b92509250505b935093915050565b80156200c08a5760405162461bcd60e51b815260206004820152602f60248201527f5374616b696e675553445348797065726472697665546573743a20766172696160448201526e0626c65526174652069736e2774203608c1b60648201526084016200beb8565b5f805160206204f23283398151915263e5d6bf026200a475844262011cf5565b604a546040516370a0823160e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301525f9283929116906370a0823190602401602060405180830381865afa1580156200c116573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200c13c919062011a2b565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200c199573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200c1bf919062011a2b565b915091509091565b6200c1e960405180606001604052805f81526020015f81526020015f81525090565b5f806200c1f6846200d29d565b6040805160608101825291825260208201929092526001600160a01b039095163190850152509192915050565b5f6200c2a3858585604051806080016040528087151581526020018a6001600160a01b031681526020015f6001600160401b038111156200c268576200c26862011622565b6040519080825280601f01601f1916602001820160405280156200c293576020820181803683370190505b5081526020015f8152506200e66d565b95945050505050565b5f6200af908383670de0b6b3a76400006200d3a3565b604051638466f41560e01b815260048101839052602481018290525f805160206204f23283398151915290638466f415906044016200b707565b60408051608081018252600181526001600160a01b03851660208201525f916200160b918691869186918101866200c268565b84156200c4ed5760545462010000900460ff166200c3605760405163350b944160e11b815260040160405180910390fd5b5f806200c36c6200c0aa565b90925090506200c38a826200c3828a8962011c23565b60016200b66d565b6200c3af816200c39a8a6200af99565b6200c3a6908862011c23565b606f546200b66d565b7f00000000000000000000000000000000000000000000000000000000000000006200c4175760435460408401516200c3f3916001600160a01b031631906200b6d2565b60205460408501516200c411916001600160a01b031631906200b6d2565b6200c45a565b60435460408401516200c435916001600160a01b031631906200b6d2565b60205460408501516200c45a916001600160a01b0316319062001708908b9062011cf5565b6043545f9081906200c475906001600160a01b03166200d29d565b915091505f806200c4868d6200d29d565b915091506200c49a8488602001516200b6d2565b6200c4b1828d8a6020015162001708919062011cf5565b6200c4cf836200c4c18e6200af99565b89516200c3a6919062011c23565b8751606f546200c4e19183916200b66d565b50505050505062002f48565b6054546301000000900460ff166200c5185760405163350b944160e11b815260040160405180910390fd5b5f806200c5246200c0aa565b915091506200c536828760016200b66d565b6200c544818660016200b66d565b60435460408401516200c562916001600160a01b031631906200b6d2565b60205460408501516200c580916001600160a01b031631906200b6d2565b6043545f9081906200c59b906001600160a01b03166200d29d565b915091505f806200c5ac8d6200d29d565b915091506200c5c68488602001516045602a01546200b66d565b6200c5dc8289602001516045602a01546200b66d565b6200c5ec836200c4c18e6200af99565b6200c60a816200c5fc8e6200af99565b8a516200c3a6919062011cf5565b50505050505050505050505050565b5f6200160b84846040518060e001604052808615158152602001886001600160a01b031681526020015f6001600160401b038111156200c65d576200c65d62011622565b6040519080825280601f01601f1916602001820160405280156200c688576020820181803683370190505b5081526020018781526020015f81526020015f81526020015f198152506200e7d5565b5f806200c72b858560405180608001604052808715158152602001896001600160a01b031681526020015f6001600160401b038111156200c6f0576200c6f062011622565b6040519080825280601f01601f1916602001820160405280156200c71b576020820181803683370190505b5081526020015f8152506200eb8b565b91509150935093915050565b60408051608081018252600181526001600160a01b03841660208201525f9182916200c76a91869186918101856200c6f0565b915091505b9250929050565b5f6200af938260076200ecf1565b5f805f836200c801576043546040516363737ac960e11b8152600481018790526001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200c7d5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200c7fb919062011a2b565b6200c803565b845b90505f846200c880576043546040516363737ac960e11b8152600481018890526001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200c854573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200c87a919062011a2b565b6200c882565b855b90506200c91487876040518060e0016040528089151581526020018b6001600160a01b031681526020015f6001600160401b038111156200c8c7576200c8c762011622565b6040519080825280601f01601f1916602001820160405280156200c8f2576020820181803683370190505b5081526020018681526020015f81526020015f8152602001858152506200eee0565b935093505050935093915050565b5f6200c2a3858585604051806080016040528087151581526020018a6001600160a01b031681526020015f6001600160401b038111156200c967576200c96762011622565b6040519080825280601f01601f1916602001820160405280156200c992576020820181803683370190505b5081526020015f8152506200f337565b60405163b12fc00560e01b815260048101839052602481018290525f805160206204f2328339815191529063b12fc005906044016200b707565b60408051608081018252600181526001600160a01b03851660208201525f916200160b918691869186918101866200c967565b5f6001600160f81b038211156200ca395760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b84156200cca75760545460ff166200ca6f5760405163350b944160e11b815260040160405180910390fd5b5f806200ca7b6200c0aa565b90925090506200ca9a826200ca918a8962011cf5565b606e546200b66d565b6043546040516363737ac960e11b8152600481018a90526200cb1b9183916001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200cae9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200cb0f919062011a2b565b6200ca91908862011cf5565b7f00000000000000000000000000000000000000000000000000000000000000006200cb7f5760435460408401516200cb5f916001600160a01b031631906200b6d2565b6200cb79896001600160a01b03163185604001516200b6d2565b6200cbbe565b60435460408401516200cb9d916001600160a01b031631906200b6d2565b6200cbbe896001600160a01b03163189866040015162001708919062011c23565b6043545f9081906200cbd9906001600160a01b03166200d29d565b915091505f806200cbea8d6200d29d565b915091506200cbfe8488602001516200b6d2565b6200cc15828d8a6020015162001708919062011c23565b6043546040516363737ac960e11b8152600481018e90526200cc989185916001600160a01b039091169063c6e6f59290602401602060405180830381865afa1580156200cc64573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200cc8a919062011a2b565b89516200ca91919062011cf5565b6200c4e181895f01516200b6d2565b605454610100900460ff166200ccd05760405163350b944160e11b815260040160405180910390fd5b5f806200ccdc6200c0aa565b915091506200ccec82876200b6d2565b6200ccfe81866045602901546200b66d565b60435460408401516200cd1c916001600160a01b031631906200b6d2565b60205460408501516200cd3a916001600160a01b031631906200b6d2565b6043545f9081906200cd55906001600160a01b03166200d29d565b915091505f806200cd668d6200d29d565b915091506200cd7a8488602001516200b6d2565b6200cd8a8289602001516200b6d2565b6200cd9a836200cc8a8e6200af99565b6200c60a816200cdaa8e6200af99565b8a516200ca91919062011c23565b5f80826040516020016200cdcd9190620127c5565b60408051808303601f190181529082905280516020909101206001625e79b760e01b031982526004820181905291505f805160206204f2328339815191529063ffa1864990602401602060405180830381865afa1580156200ce31573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200ce57919062011dd7565b6040516318caf8e360e31b81529092505f805160206204f2328339815191529063c657c7189062003f4e9085908790600401620127e2565b5f818313156200ced35760405162461bcd60e51b815260206004820152600e60248201526d098d2c47440dad2dc407c40dac2f60931b60448201526064016200beb8565b5f6200cee0848462012807565b6200ceed90600162012829565b90505f6200cefc828762012853565b90505f8112156200cf16576200cf13828262012829565b90505b6200bef8858262012829565b60405163b88fed9f60e01b8152600481018290525f9073__$27b302b103d10b9a6b3339aabd1a10a718$$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610a3e85612442565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610aed573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b119190613604565b509050610b1e81846125cc565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201525f906101a081018415610bf157610bec84866125e0565b610bf3565b5f5b81526003546001600160801b0316602091820152604051919250610c1d9161058a918491016130ac565b5050505090565b6001600160a01b0381165f908152600e602090815260408083205481519283015261059e910161058a565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201525f916105f8910161058a565b610c9a838383336123c4565b505050565b335f818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610d12612c6d565b6105f86040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f3a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f5e9190613632565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fc8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fec9190613632565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611056573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061107a9190613632565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110e4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111089190613632565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081525060405160200161058a91906131ae565b5f61059e61085f836125f4565b5f818152600b602090815260408083205481519283015261059e910161058a565b60605f8267ffffffffffffffff8111156112145761121461364d565b60405190808252806020026020018201604052801561123d578160200160208202803683370190505b5090505f5b83811015611293575f85858381811061125d5761125d613661565b9050602002013590505f815490508084848151811061127e5761127e613661565b60209081029190910101525050600101611242565b506112a88160405160200161058a9190613313565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201525f916105f8910161058a565b5f6105f860095460405160200161058a91815260200190565b5f61059e61085f83612669565b5f61059e61085f6113457f0000000000000000000000000000000000000000000000000000000000000000856135de565b6126a3565b60408051610180810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105f8600260405160200161058a919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b8461145f81612307565b6001600160a01b0316336001600160a01b03161461149057604051632aab8bd360e01b815260040160405180910390fd5b6106ba8686868686611ca6565b6001600160a01b038281165f908152600c60209081526040808320938516835292815282822054835160ff909116151591810191909152909161084d910161058a565b604080518082019091525f80825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105f89060600161058a565b606060f882901c6001600160f81b0383165f611559826126e3565b90505f83600381111561156e5761156e6135b6565b036115a0576040518060400160405280600d81526020016c048797065726472697665204c5609c1b815250935061165c565b60018360038111156115b4576115b46135b6565b036115e057806040516020016115ca9190613675565b604051602081830303815290604052935061165c565b60028360038111156115f4576115f46135b6565b0361160a57806040516020016115ca91906136ad565b600383600381111561161e5761161e6135b6565b0361165c576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b815260040161167f9190612da5565b60405180910390fd5b611690612795565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116ed573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117119190613632565b9050336001600160a01b038216148015906117bd57507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611783573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117a79190613632565b6001600160a01b0316336001600160a01b031614155b80156117cf57506117cd3361212d565b155b156117ec576040516282b42960e81b815260040160405180910390fd5b5f6117f5611e61565b6040516370a0823160e01b81523060048201529091505f906001600160a01b038516906370a0823190602401602060405180830381865afa15801561183c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061186091906136e6565b90506118766001600160a01b03851684836127bd565b8161187f611e61565b1461189d576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a350505061046e60015f55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611945573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119699190613632565b6001600160a01b0316336001600160a01b031614158015611990575061198e3361212d565b155b156119ad576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a5906119f690831515815260200190565b60405180910390a150565b83421115611a225760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b038716611a495760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781165f818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f1981840301815282825280516020918201205f80855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611b33573d5f803e3d5ffd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611b7157604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981165f818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611c1057506001600160a01b038516155b15611c2e5760405163f0dd15fd60e01b815260040160405180910390fd5b828114611c4e5760405163174861a760e31b815260040160405180910390fd5b5f5b83811015611c9d57611c95858583818110611c6d57611c6d613661565b905060200201358888868686818110611c8857611c88613661565b9050602002013533611ca6565b600101611c50565b50505050505050565b6001600160a01b0384161580611cc357506001600160a01b038316155b15611ce15760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611da1576001600160a01b038085165f908152600c602090815260408083209385168352929052205460ff16611da1575f858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020545f198114611d9f575f868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611d999084906135f1565b90915550505b505b5f858152600a602090815260408083206001600160a01b038816845290915281208054849290611dd29084906135f1565b90915550505f858152600a602090815260408083206001600160a01b038716845290915281208054849290611e089084906135de565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b81523060048201525f90611ef2906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015611ec9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611eed91906136e6565b612669565b905090565b5f611f00612795565b611f098261280f565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f66573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f8a9190613632565b90506001600160a01b038116611fa36020850185612dcb565b6001600160a01b031614611fca57604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b0382161480159061207457507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561203a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061205e9190613632565b6001600160a01b0316336001600160a01b031614155b801561208657506120843361212d565b155b156120a3576040516282b42960e81b815260040160405180910390fd5b5f6120ac612430565b600980545f9091559091506120c2818387612844565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a6038361858461210160408a0160208b01612df3565b60408051938452602084019290925215159082015260600160405180910390a250505061059e60015f55565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b81526004015f60405180830381865afa15801561218a573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526121b191908101906136fd565b90505f5b815181101561220257836001600160a01b03168282815181106121da576121da613661565b60200260200101516001600160a01b0316036121fa575060019392505050565b6001016121b5565b505f9392505050565b606060f882901c6001600160f81b0383165f612226826126e3565b90505f83600381111561223b5761223b6135b6565b0361226d576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b815250935061165c565b6001836003811115612281576122816135b6565b0361229757806040516020016115ca91906137bd565b60028360038111156122ab576122ab6135b6565b036122c157806040516020016115ca91906137f4565b60038360038111156122d5576122d56135b6565b0361165c57505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b5f848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b5f611ef2670de0b6b3a76400006125f4565b61249a6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e0830152600354048216610100820152600554909161012083019161259291166128da565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926125c4929004166128da565b905292915050565b5f61077c8383670de0b6b3a764000061294e565b5f61077c83670de0b6b3a76400008461294e565b60405163b88fed9f60e01b8152600481018290525f9073__$27b302b103d10b9a6b3339aabd1a10a718$__9063b88fed9f906024015b602060405180830381865af4158015612645573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061084d91906136e6565b6040516363737ac960e11b8152600481018290525f9073__$27b302b103d10b9a6b3339aabd1a10a718$$27b302b103d10b9a6b3339aabd1a10a718$__9063b88fed9f906024015b602060405180830381865af41580156119bb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061131b919061382d565b5f6119ea8284613858565b61157d908461375b565b6002546004545f916105a6916001600160801b0390911690600f0b6126a4565b5f61007d82611a2485888861252d565b906126c9565b5f6001600160801b0382111561134a57604051630f0af95160e11b815260040160405180910390fd5b5f818311611a61578261157d565b50919050565b6006545f908190611a89908490600160801b90046001600160801b0316611584565b6006546201000090046001600160701b03169250905081811115611bff575f611ab2838361375b565b9050611ac16110fa8286612738565b60068054601090611ae3908490600160801b90046001600160801b03166137e0565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611b1b858361274c90919063ffffffff16565b90505f611b48827f0000000000000000000000000000000000000000000000000000000000000000611584565b90508060095f828254611b5b91906135b9565b90915550611b6b9050818361375b565b9150611b7682611a2a565b600280545f90611b909084906001600160801b031661378e565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611bbd82612760565b600480545f90611bd1908490600f0b613800565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f80611c10878561274c565b91505f611c3d837f0000000000000000000000000000000000000000000000000000000000000000611584565b9050611c69817f0000000000000000000000000000000000000000000000000000000000000000611584565b91508315611c8c57611c7b828261375b565b611c85908461375b565b9250611ca3565b611c96828261375b565b611ca090846135b9565b92505b86861015611cc657611cb683878961252d565b9250611cc382878961252d565b91505b509550959350505050565b5f80611ce884611ce28a888a61252d565b9061274c565b9050611cf588848661252d565b611cff90826135b9565b905086811115611d0f5786810391505b509695505050505050565b5f6001600160701b0382111561134a5760405163086b151760e11b815260040160405180910390fd5b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611d8d916001600160801b03169061375b565b9050805f03611da057600191505061131b565b5f611daa85612789565b9050805f03611dbe5760019250505061131b565b5f80611dcb838589612824565b9150915080611de0575f94505050505061131b565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611e1b9291906138e9565b6040805180830381865af4158015611e35573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e59919061395e565b91509150611e77611e6982611321565b611e7290613980565b612998565b925082611e8c575f965050505050505061131b565b611e9582611a2a565b600780545f90611eaf9084906001600160801b031661378e565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611edc81611a2a565b60078054601090611efe908490600160801b90046001600160801b031661378e565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611f5987612b2c565b6040518263ffffffff1660e01b8152600401611f75919061399a565b6040805180830381865af4158015611f8f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fb391906139a9565b9150915080611fc857505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161202d916135b9565b612037919061375b565b9050805f0361204d57505f958695509350505050565b5f80871161205b575f612066565b61206684888461252d565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff811115612097576120976139d7565b6040519080825280601f01601f1916602001820160405280156120c1576020820181803683370190505b5090505f808751602089018b8e8ef191503d9250868311156120e1578692505b828152825f602083013e90999098509650505050505050565b5f806121046105ab565b9050808311612113575f61211d565b61211d818461375b565b915061157d827f000000000000000000000000000000000000000000000000000000000000000061274c565b5f808061216961216188670de0b6b3a764000061375b565b899087612c66565b905086156121ab5761217b8888612519565b915061219c8a8a846121958a670de0b6b3a764000061375b565b8989612c89565b92506121a883826135b9565b90505b9750975097945050505050565b5f6121d56121ce84670de0b6b3a764000061375b565b8390612519565b61157d90670de0b6b3a764000061375b565b5f8061221d856121f56119f4565b6121ff91906135b9565b600254610fa9908790600160801b90046001600160801b031661375b565b909210949350505050565b5f80808061227e87866122778b61227161224a8c670de0b6b3a764000061375b565b7f000000000000000000000000000000000000000000000000000000000000000090612519565b90612519565b9190612c66565b93506122aa847f0000000000000000000000000000000000000000000000000000000000000000611584565b91505f6122ca6122c289670de0b6b3a764000061375b565b8a9088612c66565b90506122f6817f0000000000000000000000000000000000000000000000000000000000000000612519565b9350612322847f0000000000000000000000000000000000000000000000000000000000000000611584565b61232c90846135b9565b915050945094509450949050565b5f805f805f80888810156123a657861561235c576123598d898b61252d565b9c505b6123678c898b61252d565b9b506123728b611321565b61237b8d611321565b61238591906135cc565b90506123928b898b61252d565b9a5061239f8a898b61252d565b99506123c5565b6123af8b611321565b6123b88d611321565b6123c291906135cc565b90505b9b9c9a9b999a975050505050505050565b5f825f036123e5575084612473565b8115612437576124166123f884876135b9565b6124028587611584565b61240c888a611584565b611ce291906135b9565b90505f6124238588611a53565b905080821015612431578091505b50612473565b82850361244557505f612473565b612470612452848761375b565b61245c8587612519565b612466888a611584565b611ce2919061375b565b90505b95945050505050565b5f60016001607f1b0319821280612499575060016001607f1b0382135b1561134a5760405163a5353be560e01b815260040160405180910390fd5b5f806124c3845f612cab565b6124cd845f612cab565b6124d791906135cc565b90505f8113156124f2576124eb81866135b9565b9450612510565b5f8112156125105761250381613980565b61250d908661375b565b94505b50929392505050565b5f61157d8383670de0b6b3a7640000612c66565b5f825f190484118302158202612541575f80fd5b5091020490565b6040516363737ac960e11b8152600481018290525f9073__$27b302b103d10b9a6b3339aabd1a10a718$__9063c6e6f592906024016119a0565b604051632e1a7d4d60e01b8152600481018590525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b1580156125e3575f80fd5b505af11580156125f5573d5f803e3d5ffd5b505050506126028561196a565b90506100806001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168583612cc0565b60405163350b944160e11b815260040160405180910390fd5b5f808061267161266988670de0b6b3a764000061375b565b89908761252d565b905086156121ab576126838888611584565b915061219c8a8a8461269d8a670de0b6b3a764000061375b565b8989612d17565b5f806126b08484612d27565b9092509050806126c2576126c26113ec565b5092915050565b5f815f036126e05750670de0b6b3a764000061131b565b825f036126ee57505f61131b565b5f6126f883611321565b90505f61270c61270786611321565b612d62565b9050818102612723670de0b6b3a7640000826139eb565b905061272e81612f87565b9695505050505050565b5f61157d83670de0b6b3a764000084612c66565b5f61157d83670de0b6b3a76400008461252d565b5f60016001607f1b0382111561134a5760405163a5353be560e01b815260040160405180910390fd5b6003545f9081906127a3906001600160801b031684612738565b90506127cf7f0000000000000000000000000000000000000000000000000000000000000000826135b9565b6002546001600160801b03161115611a61576002547f00000000000000000000000000000000000000000000000000000000000000009061281a9083906001600160801b031661375b565b61157d919061375b565b61282c6134ac565b5f8061283784612b2c565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612871919061399a565b6040805180830381865af415801561288b573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128af91906139a9565b93509050826128c357505f91506129909050565b5f6128e96128e484610160015185610140015161158490919063ffffffff16565b611321565b6129096128e485610120015186610100015161251990919063ffffffff16565b61291391906135cc565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612a4e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a729190613a17565b935093509350935080612a8d57505f98975050505050505050565b868414612abe57612a9d84611a2a565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612aef57612ace8361247c565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612b1d57612aff82611a2a565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612b346134f6565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612c2c9116613119565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612c5e92900416613119565b905292915050565b5f825f190484118302158202612c7a575f80fd5b50910281810615159190040190565b5f80612c9988888888888861318d565b909250905080611d0f57611d0f6113ec565b5f818313612cb9578161157d565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612d12908490613269565b505050565b5f80612c998888888888886132cf565b5f805f83612d3486611321565b612d3e91906135cc565b90505f811215612d54575f809250925050612d5b565b9150600190505b9250929050565b5f808213612d835760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612e069084901c611321565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e198213612fa057505f919050565b680755bf798b4a1bf1e58212612fc9576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061272e74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611321565b5f80670de0b6b3a764000061312c6105ab565b61313691906137c9565b9050808311613145575f61314f565b61314f818461375b565b915061157d613186670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006137c9565b839061274c565b5f805f61319d898988888861338b565b9050868810156131b3575f80925092505061325e565b96869003966131c288876126c9565b9750878110156131d8575f80925092505061325e565b8781036131e6818688612c66565b9050670de0b6b3a7640000811061321a5761321361320c670de0b6b3a764000089612738565b82906126c9565b9050613232565b61322f61320c670de0b6b3a76400008961274c565b90505b61323c8186612738565b905089811015613253575f8093509350505061325e565b899003925060019150505b965096945050505050565b5f61327d6001600160a01b038416836133b9565b905080515f141580156132a157508080602001905181019061329f9190613a4a565b155b15612d1257604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b5f805f6132df898988888861338b565b90506132ef86611a24898b6135b9565b975087811015613305575f80925092505061325e565b878103613313818688612c66565b9050670de0b6b3a764000081106133405761333961320c670de0b6b3a764000089612738565b9050613358565b61335561320c670de0b6b3a76400008961274c565b90505b6133628186612738565b9050808a1015613379575f8093509350505061325e565b90980398600198509650505050505050565b5f61339685856126c9565b6133af6133a786611a24868b612519565b859085612c66565b61247091906135b9565b606061157d83835f845f80856001600160a01b031684866040516133dd9190613a65565b5f6040518083038185875af1925050503d805f8114613417576040519150601f19603f3d011682016040523d82523d5f602084013e61341c565b606091505b509150915061272e86838360608261343c5761343782613483565b61157d565b815115801561345357506001600160a01b0384163b155b1561347c57604051639996b31560e01b81526001600160a01b03851660048201526024016132c6565b508061157d565b8051156134935780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806134c06134f6565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f806080858703121561355e575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613589575f80fd5b85016060818803121561359a575f80fd5b939692955090935050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561131b5761131b6135a5565b8181035f8312801583831316838312821617156126c2576126c26135a5565b6001600160a01b0381168114610591575f80fd5b5f6020828403121561360f575f80fd5b813561157d816135eb565b8015158114610591575f80fd5b5f60208284031215613637575f80fd5b813561157d8161361a565b5f808335601e19843603018112613657575f80fd5b83018035915067ffffffffffffffff821115613671575f80fd5b602001915036819003821315612d5b575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f6136e660e083018486613685565b9a9950505050505050505050565b8082018281125f831280158216821582161715613713576137136135a5565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a08201525f61374e60c083018486613685565b9998505050505050505050565b8181038181111561131b5761131b6135a5565b6001600160701b038181168382160190808211156126c2576126c26135a5565b6001600160801b038181168382160190808211156126c2576126c26135a5565b5f602082840312156137be575f80fd5b815161157d816135eb565b808202811582820484141761131b5761131b6135a5565b6001600160801b038281168282160390808211156126c2576126c26135a5565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561131b5761131b6135a5565b5f6020828403121561383d575f80fd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b5f8261386657613866613844565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a0820190506138fc82855161386b565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f806040838503121561396f575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613994576139946135a5565b505f0390565b610180810161131b828461386b565b5f80604083850312156139ba575f80fd5b8251915060208301516139cc8161361a565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f826139f9576139f9613844565b600160ff1b82145f1984141615613a1257613a126135a5565b500590565b5f805f8060808587031215613a2a575f80fd5b845193506020850151925060408501519150606085015161359a8161361a565b5f60208284031215613a5a575f80fd5b815161157d8161361a565b5f82515f5b81811015613a845760208186018101518583015201613a6a565b505f92019182525091905056fea264697066735822122046525d2a834802300c8ca111fa70d2ea8711ca19f2715118b3bddf099aed91f164736f6c63430008180033a264697066735822122081a75838b9b8a4e445fe0182a90f55f376ad3eece291135886422adaf47fa88264736f6c63430008180033608060405234801561000f575f80fd5b50614b0f8061001d5f395ff3fe608060405234801562000010575f80fd5b50600436106200002c575f3560e01c80638c98b3c61462000030575b5f80fd5b620000476200004136600462000263565b62000063565b6040516001600160a01b03909116815260200160405180910390f35b5f80838060200190518101906200007b9190620003d3565b6040805133602082015290810185905290915060600160405160208183030381529060405280519060200120868683604051620000b890620000f1565b620000c693929190620003f8565b8190604051809103905ff5905080158015620000e4573d5f803e3d5ffd5b509150505b949350505050565b6145a9806200053183390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff811182821017156200013a576200013a620000ff565b60405290565b6001600160a01b038116811462000155575f80fd5b50565b8035620001658162000140565b919050565b5f608082840312156200017b575f80fd5b6040516080810181811067ffffffffffffffff82111715620001a157620001a1620000ff565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f82601f830112620001e2575f80fd5b813567ffffffffffffffff80821115620002005762000200620000ff565b604051601f8301601f19908116603f011681019082821181831017156200022b576200022b620000ff565b8160405283815286602085880101111562000244575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f808486036102c081121562000279575f80fd5b6102608082121562000289575f80fd5b6200029362000113565b9150620002a08762000158565b8252620002b06020880162000158565b6020830152620002c36040880162000158565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606200032e81890162000158565b908301526101806200034288820162000158565b908301526101a06200035688820162000158565b908301526101c06200036a88820162000158565b908301526101e06200037f898983016200016a565b81840152508195506200039481880162000158565b9450505061028085013567ffffffffffffffff811115620003b3575f80fd5b620003c187828801620001d2565b949793965093946102a0013593505050565b5f60208284031215620003e4575f80fd5b8151620003f18162000140565b9392505050565b83516001600160a01b031681526102a0810160208501516200042560208401826001600160a01b03169052565b5060408501516200044160408401826001600160a01b03169052565b50606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e083015261010080860151818401525061012080860151818401525061014080860151818401525061016080860151620004b4828501826001600160a01b03169052565b5050610180858101516001600160a01b03908116918401919091526101a0808701518216908401526101c0808701518216908401526101e08087015180519185019190915260208101516102008501526040810151610220850152606001516102408401528481166102608401528316610280830152620000e956fe6102a060405234801562000011575f80fd5b50604051620045a9380380620045a98339810160408190526200003491620004ef565b60015f81905583516001600160a01b039081166080818152602080880151841660a0908152918801516101a052908701516101c05260c0808801516101e090815260e0808a015161020052610120808b0151909352610100808b0151909152610140808b0151909152908901805151909252815190920151909152805160409081015161016052905160609081015161018052908701518316610240528601516102605281851661022052908316610280528291620000f69190839062000100565b505050506200068a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200015a9085908390620001cb16565b620001c557604080516001600160a01b03851660248201525f6044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001b99186916200027516565b620001c5848262000275565b50505050565b5f805f846001600160a01b031684604051620001e891906200063b565b5f604051808303815f865af19150503d805f811462000223576040519150601f19603f3d011682016040523d82523d5f602084013e62000228565b606091505b5091509150818015620002565750805115806200025657508080602001905181019062000256919062000669565b80156200026c57505f856001600160a01b03163b115b95945050505050565b5f6200028b6001600160a01b03841683620002e6565b905080515f14158015620002b2575080806020019051810190620002b0919062000669565b155b15620002e157604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6060620002f583835f620002fc565b9392505050565b606081471015620003235760405163cd78605960e01b8152306004820152602401620002d8565b5f80856001600160a01b031684866040516200034091906200063b565b5f6040518083038185875af1925050503d805f81146200037c576040519150601f19603f3d011682016040523d82523d5f602084013e62000381565b606091505b509092509050620003948683836200039e565b9695505050505050565b606082620003b757620003b18262000402565b620002f5565b8151158015620003cf57506001600160a01b0384163b155b15620003fa57604051639996b31560e01b81526001600160a01b0385166004820152602401620002d8565b5080620002f5565b805115620004135780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405161020081016001600160401b03811182821017156200045c57634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b038116811462000479575f80fd5b919050565b5f608082840312156200048f575f80fd5b604051608081016001600160401b0381118282101715620004be57634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f805f8385036102a081121562000504575f80fd5b6102608082121562000514575f80fd5b6200051e6200042c565b91506200052b8662000462565b82526200053b6020870162000462565b60208301526200054e6040870162000462565b6040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e0830152610100808701518184015250610120808701518184015250610140808701518184015250610160620005b981880162000462565b90830152610180620005cd87820162000462565b908301526101a0620005e187820162000462565b908301526101c0620005f587820162000462565b908301526101e06200060a888883016200047e565b81840152508194506200061f81870162000462565b9350505062000632610280850162000462565b90509250925092565b5f82515f5b818110156200065c576020818601810151858301520162000640565b505f920191825250919050565b5f602082840312156200067a575f80fd5b81518015158114620002f5575f80fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051613d65620008445f395f81816116f8015261176f01525f50505f50505f610c2801525f50505f818160f9015281816103020152612db101525f818161152f01528181611d3901528181611d9c01528181612523015281816129a1015281816129dd01528181612bce0152612d8b01525f81816107e601528181610d8201528181610dc401528181610eb60152818161131c0152818161137a0152612d6501525f61196301525f8181611a84015281816126140152818161268c0152612ec901525f81816109a301528181610e370152818161141501528181611a58015261266001525f8181610e16015281816125e00152612e8501525f818161080701528181610d6001528181610de501528181610ed7015281816112fa0152818161139b0152612dd701525f81816101d301528181610396015281816108e1015261345501525f81816106a7015281816107230152818161079701528181610862015261089a01525f50505f81816116cb015261172c0152613d655ff3fe608060405260043610610028575f3560e01c8063cba2e58d1461002c578063dbbe807014610058575b5f80fd5b61003f61003a3660046137e9565b61006b565b6040805192835260208301919091520160405180910390f35b61003f6100663660046137e9565b610087565b5f8061007986868686610095565b915091505b94509492505050565b5f80610079868686866102bc565b5f8061009f610531565b600654610100900460ff16156100c8576040516321081abf60e01b815260040160405180910390fd5b6100d0610559565b6100d98361057a565b5f806100e588866105b2565b90925090505f6100f58383610683565b90507f00000000000000000000000000000000000000000000000000000000000000008110156101385760405163211ddda360e11b815260040160405180910390fd5b86821015610159576040516342af972b60e01b815260040160405180910390fd5b5f6101626106a0565b90506101728184600460016106d0565b505f805f6101808787610d34565b919a5091945090925090508b8810156101ac5760405163c972651760e01b815260040160405180910390fd5b8160095f8282546101bd9190613857565b909155506101ce9050844283610f13565b6101f87f000000000000000000000000000000000000000000000000000000000000000085613857565b98506102068389888c61104c565b5f61021260018b6111e3565b905061022b8161022560208e018e61387e565b8b611217565b8d8a8a898e8561023e602083018361387e565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a86888661027b60408801602089016138a6565b8961028960408a018a6138c1565b60405161029c979695949392919061392c565b60405180910390a350909b50505050505050505050505061007e60015f55565b5f806102c6610531565b600654610100900460ff16156102ef576040516321081abf60e01b815260040160405180910390fd5b6102f7610559565b6103008361057a565b7f00000000000000000000000000000000000000000000000000000000000000008610156103415760405163211ddda360e11b815260040160405180910390fd5b5f61034a6112bc565b90508481101561036d576040516342af972b60e01b815260040160405180910390fd5b5f6103766106a0565b90505f61038e6103846106a0565b84600460016106d0565b90505f6103bb7f000000000000000000000000000000000000000000000000000000000000000084613857565b90505f805f806103cc8e89886112ce565b60098054949850929650909450925083915f906103ea908490613857565b909155506103fb9050874283610f13565b61040d610408858a611450565b611464565b610418906001613857565b9350505f61042784898d6114d8565b9050808d101561044a5760405163c972651760e01b815260040160405180910390fd5b610454818c6105b2565b508e905061046481858b89611509565b5f6104706002886111e3565b90508c61048a82610484602084018461387e565b85611217565b858b868461049b602086018661387e565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104d860408b0160208c016138a6565b6104ec896104e68a8d61396c565b90610683565b8d6104fa60408e018e6138c1565b60405161050e98979695949392919061397f565b60405180910390a350989d50939b50505050505050505050505061007e60015f55565b60025f540361055357604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b341561057857604051631574f9f360e01b815260040160405180910390fd5b565b5f610588602083018361387e565b6001600160a01b0316036105af5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b815f806105c560408501602086016138a6565b156105ea576105e0856105db60408701876138c1565b6116bc565b9093509050610602565b5034610602856105fd60408701876138c1565b6117dd565b61060a6112bc565b9150801561067a576040515f90339083908381818185875af1925050503d805f8114610651576040519150601f19603f3d011682016040523d82523d5f602084013e610656565b606091505b5050905080610678576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b5f6106978383670de0b6b3a76400006117f6565b90505b92915050565b5f6106cb427f0000000000000000000000000000000000000000000000000000000000000000611811565b905090565b5f84815260086020526040812060018101546001600160801b03161515806106f757504286115b1561071057600101546001600160801b03169050610d2c565b5f805f61071b6106a0565b90505f6107487f00000000000000000000000000000000000000000000000000000000000000008b613857565b90505b818110156107bc575f818152600860205260409020600101546001600160801b03168015610794575f828152600860205260409020549094506001600160801b031692506107bc565b507f00000000000000000000000000000000000000000000000000000000000000000161074b565b835f0361082e5788935061082b6107d1611826565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611846565b92505b5061083883611865565b6001850180546001600160801b0319166001600160801b039290921691909117905561088e6108877f00000000000000000000000000000000000000000000000000000000000000008b61396c565b8a84610f13565b6108cc896108c66108bf7f000000000000000000000000000000000000000000000000000000000000000083613857565b4290611892565b84610f13565b6108d5886118a6565b505f90506008816109067f00000000000000000000000000000000000000000000000000000000000000008d61396c565b815260208101919091526040015f908120600101546001600160801b0316915061093160028c6111e3565b5f818152600b60205260408120549192508c8c8315610a7257600192505f8061095d86898d865f611a43565b915091508060095f8282546109729190613857565b9091555061098d9050865f8461098781611b10565b88611b39565b6109978183613857565b91506109c786838a8e877f0000000000000000000000000000000000000000000000000000000000000000611cb0565b91506109db6109d68385610683565b611cf9565b600680546002906109fc9084906201000090046001600160701b03166139c6565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a2982611865565b60068054601090610a4b908490600160801b90046001600160801b03166139e6565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f610a7e6001846111e3565b5f818152600b60205260409020549091508015610b8957600194505f80610aa9838b8f886001611a43565b915091508060095f828254610abe9190613857565b90915550610ad99050835f84610ad381611b10565b8a611d22565b610ae3818361396c565b9150610af26109d68387610683565b60068054600290610b139084906201000090046001600160701b03166139c6565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610b4082611865565b60068054601090610b62908490600160801b90046001600160801b03166139e6565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610bc257610bb4610b9b87611b10565b610ba483611b10565b610bae9190613a06565b5f611f12565b8e610bbf8482611f51565b50505b5f610bcc84612140565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c82573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ca69190613a25565b90506001600160a01b03811615610d1a57610d175a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190612282565b50505b509b9d50505050505050505050505050505b949350505050565b5f805f805f610d41611826565b600254909150610da6908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f0000000000000000000000000000000000000000000000000000000000000000612308565b600254909450610e09908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611846565b9150610e608785610e5b857f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612333565b612397565b15610e6d57610e6d6123d8565b610e79878588856123f1565b91965094509250670de0b6b3a7640000610efb610e968784613857565b600254610eb4908890600160801b90046001600160801b031661396c565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611846565b1115610f0957610f096123d8565b5092959194509250565b5f83815260086020526040902054600160801b90046001600160801b0316808303610f3e5750505050565b5f848152600860205260408120546001600160801b031690819003610f9657610f6683611865565b5f86815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611013565b610fe7610fe2670de0b6b3a7640000610faf888661396c565b610fb99190613a40565b85670de0b6b3a7640000610fcd878a61396c565b610fd79190613a40565b859291906001612439565b611865565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61101c84611865565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b031661108e610fe282611078670de0b6b3a764000086613a40565b6005546001600160801b03169190886001612439565b600580546001600160801b0319166001600160801b03929092169190911790556110b785611865565b600280545f906110d19084906001600160801b03166139e6565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506110fe84611865565b60028054601090611120908490600160801b90046001600160801b0316613a57565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061114d84611865565b61115790826139e6565b600380546001600160801b03808416600160801b02911617905590505f61117d836124dd565b905061119b8161118c87611b10565b6111969084613a77565b611f12565b6111a48461251d565b6111b0576111b06123d8565b5f6111ba8561257c565b9050806111da57604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b5f6001600160f81b0382111561120c5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f838152600a602090815260408083206001600160a01b038616845290915281208054839290611248908490613857565b90915550505f838152600b60205260408120805483929061126a908490613857565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b5f6106cb670de0b6b3a7640000611464565b5f805f805f6112db611826565b600254909150611340908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f0000000000000000000000000000000000000000000000000000000000000000612588565b93508761134d85896125a8565b111561135b5761135b6123d8565b6002545f9081906113bf908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611846565b93506113d58a670de0b6b3a7640000868c6125bc565b509193509091506113e89050818361396c565b6113f2908761396c565b95508861143f816114398d611407868c61396c565b8d61141287826126c8565b877f00000000000000000000000000000000000000000000000000000000000000006126dd565b906125a8565b975090945050505093509350935093565b5f61069783670de0b6b3a7640000846126fd565b60405163b88fed9f60e01b8152600481018290525f9073__$27b302b103d10b9a6b3339aabd1a10a718$__9063b88fed9f90602401602060405180830381865af41580156114b4573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061069a9190613a9e565b5f6114e960408301602084016138a6565b156114f5575082611502565b6114ff8484612720565b90505b9392505050565b6002546001600160801b031683811015611525576115256123d8565b60045490849003907f00000000000000000000000000000000000000000000000000000000000000009061155d908390600f0b612734565b101561156b5761156b6123d8565b6004546115b590610fe290600160801b90046001600160801b0316611598670de0b6b3a764000086613a40565b600554600160801b90046001600160801b03169190896001612439565b600580546001600160801b03928316600160801b0292169190911790556115db81611865565b600280546001600160801b0319166001600160801b039290921691909117905561160485611865565b60028054601090611626908490600160801b90046001600160801b03166139e6565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061165385611865565b60048054601090611675908490600160801b90046001600160801b03166139e6565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f6116a3836124dd565b905061119b816116b288611b10565b6111969084613a06565b5f806116f36001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333088612759565b6117537f0000000000000000000000000000000000000000000000000000000000000000611722876001613857565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001691906127c6565b6040516342ea02c160e01b8152600481018690525f60248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906342ea02c1906044015f604051808303815f87803b1580156117b8575f80fd5b505af11580156117ca573d5f803e3d5ffd5b50505050845f915091505b935093915050565b60405163350b944160e11b815260040160405180910390fd5b5f825f19048411830215820261180a575f80fd5b5091020490565b5f61181c8284613ac9565b610697908461396c565b6002546004545f916106cb916001600160801b0390911690600f0b612734565b5f61185c826118568588886117f6565b90612855565b95945050505050565b5f6001600160801b0382111561188e57604051630f0af95160e11b815260040160405180910390fd5b5090565b5f8183116118a05782610697565b50919050565b6006545f9081906118c8908490600160801b90046001600160801b0316610683565b6006546201000090046001600160701b03169250905081811115611a3e575f6118f1838361396c565b9050611900610fe28286611450565b60068054601090611922908490600160801b90046001600160801b0316613a57565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f61195a858361272090919063ffffffff16565b90505f611987827f0000000000000000000000000000000000000000000000000000000000000000610683565b90508060095f82825461199a9190613857565b909155506119aa9050818361396c565b91506119b582611865565b600280545f906119cf9084906001600160801b03166139e6565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506119fc826128ba565b600480545f90611a10908490600f0b613adc565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f80611a4f8785612720565b91505f611a7c837f0000000000000000000000000000000000000000000000000000000000000000610683565b9050611aa8817f0000000000000000000000000000000000000000000000000000000000000000610683565b91508315611acb57611aba828261396c565b611ac4908461396c565b9250611ae2565b611ad5828261396c565b611adf9084613857565b92505b86861015611b0557611af58387896117f6565b9250611b028287896117f6565b91505b509550959350505050565b5f6001600160ff1b0382111561188e5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611b81610fe282611b65670de0b6b3a764000086613a40565b600554600160801b90046001600160801b031691908a5f612439565b600580546001600160801b03928316600160801b029216919091179055611ba786611865565b611bb19082613a57565b600480546001600160801b03928316600160801b029216919091179055611bd784611865565b600280545f90611bf19084906001600160801b03166139e6565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611c1e836128e3565b600480545f90611c32908490600f0b613adc565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611c6285611865565b60028054601090611c84908490600160801b90046001600160801b0316613a57565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f80611cc784611cc18a888a6117f6565b90612720565b9050611cd48884866117f6565b611cde9082613857565b905086811115611cee5786810391505b509695505050505050565b5f6001600160701b0382111561188e5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b031683811080611d6457507f0000000000000000000000000000000000000000000000000000000000000000611d62858361396c565b105b15611d7157611d716123d8565b6004549084900390600f0b611d868482613a06565b905083611d9286611b10565b138015611dc757507f0000000000000000000000000000000000000000000000000000000000000000611dc58383612734565b105b15611dd457611dd46123d8565b600354600160801b90046001600160801b0316611e15610fe282611e00670de0b6b3a764000088613a40565b6005546001600160801b031691908c5f612439565b600580546001600160801b0319166001600160801b0392909216919091179055611e3f888261396c565b9050611e4a81611865565b600380546001600160801b03928316600160801b029216919091179055611e7083611865565b600280546001600160801b0319166001600160801b0392909216919091179055611e99826128e3565b600480546001600160801b0319166001600160801b0392909216919091179055611ec287611865565b60028054601090611ee4908490600160801b90046001600160801b03166139e6565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611f2d90610fe2906001600160801b0316848461291e565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611f9b916001600160801b03169061396c565b9050805f03611fae57600191505061069a565b5f611fb885612980565b9050805f03611fcc5760019250505061069a565b5f80611fd9838589612a1b565b9150915080611fee575f94505050505061069a565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612029929190613b87565b6040805180830381865af4158015612043573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120679190613bfc565b9150915061208561207782611b10565b61208090613c1e565b612b88565b92508261209a575f965050505050505061069a565b6120a382611865565b600780545f906120bd9084906001600160801b03166139e6565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506120ea81611865565b6007805460109061210c908490600160801b90046001600160801b03166139e6565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61216787612d1c565b6040518263ffffffff1660e01b81526004016121839190613c38565b6040805180830381865af415801561219d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121c19190613c47565b91509150806121d657505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161223b91613857565b612245919061396c565b9050805f0361225b57505f958695509350505050565b5f808711612269575f612274565b6122748488846117f6565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff8111156122a5576122a5613c75565b6040519080825280601f01601f1916602001820160405280156122cf576020820181803683370190505b5090505f808751602089018b8e8ef191503d9250868311156122ef578692505b828152825f602083013e90999098509650505050505050565b5f61232887878761232188670de0b6b3a764000061396c565b8787612e56565b979650505050505050565b5f6114ff61237361234c84670de0b6b3a764000061396c565b611439670de0b6b3a7640000612362818a611450565b61236c919061396c565b87906125a8565b61238590670de0b6b3a7640000613857565b611cc184670de0b6b3a764000061396c565b5f806123cd856123a5611826565b6123af9190613857565b600254610eb4908790600160801b90046001600160801b031661396c565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f805f805f612401898789612e78565b9092509050612410828961396c565b97505f61241e82888a6117f6565b905061242a818b61396c565b9a989950979650505050505050565b5f825f0361244857508461185c565b811561249a5761247961245b8487613857565b6124658587610683565b61246f888a610683565b611cc19190613857565b90505f6124868588611892565b905080821015612494578091505b5061185c565b8285036124a857505f61185c565b6124d36124b5848761396c565b6124bf85876125a8565b6124c9888a610683565b611cc1919061396c565b9695505050505050565b5f612502600b5f6124ef6002866111e3565b81526020019081526020015f2054611b10565b612513600b5f6124ef6001876111e3565b61069a9190613a06565b5f6125487f0000000000000000000000000000000000000000000000000000000000000000836125a8565b60035461255e91906001600160801b0316613857565b600254612574906001600160801b031684610683565b101592915050565b5f61069a826004611f51565b5f6123288787876125a188670de0b6b3a764000061396c565b8787612ef7565b5f6106978383670de0b6b3a76400006126fd565b5f80808061260c87866126058b6114396125de8c670de0b6b3a764000061396c565b7f0000000000000000000000000000000000000000000000000000000000000000906125a8565b91906126fd565b9350612638847f0000000000000000000000000000000000000000000000000000000000000000610683565b91505f61265861265089670de0b6b3a764000061396c565b8a90886126fd565b9050612684817f00000000000000000000000000000000000000000000000000000000000000006125a8565b93506126b0847f0000000000000000000000000000000000000000000000000000000000000000610683565b6126ba9084613857565b915050945094509450949050565b5f8183116126d65781610697565b5090919050565b5f806126f4846126ee8a888a6126fd565b90611450565b9050611cd48884865b5f825f190484118302158202612711575f80fd5b50910281810615159190040190565b5f61069783670de0b6b3a7640000846117f6565b5f806127408484612f07565b909250905080612752576127526123d8565b5092915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526127c09186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612f3f565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b1790526128178482612faa565b6127c0576040516001600160a01b0384811660248301525f604483015261284b91869182169063095ea7b39060640161278e565b6127c08482612f3f565b5f815f0361286c5750670de0b6b3a764000061069a565b825f0361287a57505f61069a565b5f61288483611b10565b90505f61289861289386611b10565b613047565b90508181026128af670de0b6b3a764000082613c89565b90506124d38161326c565b5f60016001607f1b0382111561188e5760405163a5353be560e01b815260040160405180910390fd5b5f60016001607f1b0319821280612900575060016001607f1b0382135b1561188e5760405163a5353be560e01b815260040160405180910390fd5b5f8061292a845f6133fe565b612934845f6133fe565b61293e9190613a06565b90505f811315612959576129528186613857565b9450612977565b5f8112156129775761296a81613c1e565b612974908661396c565b94505b50929392505050565b6003545f90819061299a906001600160801b031684611450565b90506129c67f000000000000000000000000000000000000000000000000000000000000000082613857565b6002546001600160801b031611156118a0576002547f000000000000000000000000000000000000000000000000000000000000000090612a119083906001600160801b031661396c565b611502919061396c565b612a2361374a565b5f80612a2e84612d1c565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612a689190613c38565b6040805180830381865af4158015612a82573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612aa69190613c47565b9350905082612aba57505f91506117d59050565b5f612ae0612adb84610160015185610140015161068390919063ffffffff16565b611b10565b612b00612adb8561012001518661010001516125a890919063ffffffff16565b612b0a9190613a06565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612c3e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c629190613cb5565b935093509350935080612c7d57505f98975050505050505050565b868414612cae57612c8d84611865565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612cdf57612cbe836128e3565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612d0d57612cef82611865565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612d24613794565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612e1c911661340c565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612e4e9290041661340c565b905292915050565b5f80612e66888888888888613480565b909250905080611cee57611cee6123d8565b5f80612ec18561143985817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612eb7818c611450565b611439919061396c565b9150612eed827f0000000000000000000000000000000000000000000000000000000000000000610683565b9050935093915050565b5f80612e66888888888888613544565b5f805f83612f1486611b10565b612f1e9190613a06565b90505f811215612f34575f80925092505061067c565b946001945092505050565b5f612f536001600160a01b03841683613600565b905080515f14158015612f77575080806020019051810190612f759190613ce8565b155b15612fa557604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b5f805f846001600160a01b031684604051612fc59190613d03565b5f604051808303815f865af19150503d805f8114612ffe576040519150601f19603f3d011682016040523d82523d5f602084013e613003565b606091505b509150915081801561302d57508051158061302d57508080602001905181019061302d9190613ce8565b801561185c5750505050506001600160a01b03163b151590565b5f8082136130685760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906130eb9084901c611b10565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e19821361328557505f919050565b680755bf798b4a1bf1e582126132ae576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906124d374029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611b10565b5f8183136126d65781610697565b5f80670de0b6b3a764000061341f6106a0565b6134299190613a40565b9050808311613438575f613442565b613442818461396c565b9150611502613479670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613a40565b8390612720565b5f805f613490898988888861360d565b90506134aa866118566134a38a8d613857565b8790610683565b98506134b7858a866117f6565b9850888110156134cd575f809250925050613539565b888103670de0b6b3a76400008110613502576134fb6134f4670de0b6b3a764000089611450565b8290612855565b905061351a565b6135176134f4670de0b6b3a764000089612720565b90505b8089101561352f575f80935093505050613539565b8803925060019150505b965096945050505050565b5f805f613554898988888861360d565b905061356486611856898b613857565b97508781101561357a575f809250925050613539565b8781036135888186886126fd565b9050670de0b6b3a764000081106135b5576135ae6134f4670de0b6b3a764000089611450565b90506135cd565b6135ca6134f4670de0b6b3a764000089612720565b90505b6135d78186611450565b9050808a10156135ee575f80935093505050613539565b90980398600198509650505050505050565b606061069783835f61363b565b5f6136188585612855565b61363161362986611856868b6125a8565b8590856126fd565b6124d39190613857565b6060814710156136605760405163cd78605960e01b8152306004820152602401612f9c565b5f80856001600160a01b0316848660405161367b9190613d03565b5f6040518083038185875af1925050503d805f81146136b5576040519150601f19603f3d011682016040523d82523d5f602084013e6136ba565b606091505b50915091506124d38683836060826136da576136d582613721565b611502565b81511580156136f157506001600160a01b0384163b155b1561371a57604051639996b31560e01b81526001600160a01b0385166004820152602401612f9c565b5080611502565b8051156137315780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610120016040528061375e613794565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f80608085870312156137fc575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613827575f80fd5b850160608188031215613838575f80fd5b939692955090935050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561069a5761069a613843565b6001600160a01b03811681146105af575f80fd5b5f6020828403121561388e575f80fd5b81356115028161386a565b80151581146105af575f80fd5b5f602082840312156138b6575f80fd5b813561150281613899565b5f808335601e198436030181126138d6575f80fd5b83018035915067ffffffffffffffff8211156138f0575f80fd5b60200191503681900382131561067c575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201525f61395f60c083018486613904565b9998505050505050505050565b8181038181111561069a5761069a613843565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f6139b860e083018486613904565b9a9950505050505050505050565b6001600160701b0381811683821601908082111561275257612752613843565b6001600160801b0381811683821601908082111561275257612752613843565b8181035f83128015838313168383128216171561275257612752613843565b5f60208284031215613a35575f80fd5b81516115028161386a565b808202811582820484141761069a5761069a613843565b6001600160801b0382811682821603908082111561275257612752613843565b8082018281125f831280158216821582161715613a9657613a96613843565b505092915050565b5f60208284031215613aae575f80fd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b5f82613ad757613ad7613ab5565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561069a5761069a613843565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a082019050613b9a828551613b09565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613c0d575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613c3257613c32613843565b505f0390565b610180810161069a8284613b09565b5f8060408385031215613c58575f80fd5b825191506020830151613c6a81613899565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f82613c9757613c97613ab5565b600160ff1b82145f1984141615613cb057613cb0613843565b500590565b5f805f8060808587031215613cc8575f80fd5b845193506020850151925060408501519150606085015161383881613899565b5f60208284031215613cf8575f80fd5b815161150281613899565b5f82515f5b81811015613d225760208186018101518583015201613d08565b505f92019182525091905056fea264697066735822122030e557a8234aca0755968baaa306b148c9d49b024c769f6389b03f9e467771c364736f6c63430008180033a2646970667358221220e55b234b7c144d606bdf2bbaa721b636e2570928d084cf2c1dec441790dfb36c64736f6c63430008180033608060405234801561000f575f80fd5b50614a7b8061001d5f395ff3fe608060405234801562000010575f80fd5b50600436106200002c575f3560e01c80638c98b3c61462000030575b5f80fd5b620000476200004136600462000263565b62000063565b6040516001600160a01b03909116815260200160405180910390f35b5f80838060200190518101906200007b9190620003d3565b6040805133602082015290810185905290915060600160405160208183030381529060405280519060200120868683604051620000b890620000f1565b620000c693929190620003f8565b8190604051809103905ff5905080158015620000e4573d5f803e3d5ffd5b509150505b949350505050565b614515806200053183390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff811182821017156200013a576200013a620000ff565b60405290565b6001600160a01b038116811462000155575f80fd5b50565b8035620001658162000140565b919050565b5f608082840312156200017b575f80fd5b6040516080810181811067ffffffffffffffff82111715620001a157620001a1620000ff565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f82601f830112620001e2575f80fd5b813567ffffffffffffffff80821115620002005762000200620000ff565b604051601f8301601f19908116603f011681019082821181831017156200022b576200022b620000ff565b8160405283815286602085880101111562000244575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f808486036102c081121562000279575f80fd5b6102608082121562000289575f80fd5b6200029362000113565b9150620002a08762000158565b8252620002b06020880162000158565b6020830152620002c36040880162000158565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606200032e81890162000158565b908301526101806200034288820162000158565b908301526101a06200035688820162000158565b908301526101c06200036a88820162000158565b908301526101e06200037f898983016200016a565b81840152508195506200039481880162000158565b9450505061028085013567ffffffffffffffff811115620003b3575f80fd5b620003c187828801620001d2565b949793965093946102a0013593505050565b5f60208284031215620003e4575f80fd5b8151620003f18162000140565b9392505050565b83516001600160a01b031681526102a0810160208501516200042560208401826001600160a01b03169052565b5060408501516200044160408401826001600160a01b03169052565b50606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e083015261010080860151818401525061012080860151818401525061014080860151818401525061016080860151620004b4828501826001600160a01b03169052565b5050610180858101516001600160a01b03908116918401919091526101a0808701518216908401526101c0808701518216908401526101e08087015180519185019190915260208101516102008501526040810151610220850152606001516102408401528481166102608401528316610280830152620000e956fe6102a060405234801562000011575f80fd5b5060405162004515380380620045158339810160408190526200003491620004ef565b60015f81905583516001600160a01b039081166080818152602080880151841660a0908152918801516101a052908701516101c05260c0808801516101e090815260e0808a015161020052610120808b0151909352610100808b0151909152610140808b0151909152908901805151909252815190920151909152805160409081015161016052905160609081015161018052908701518316610240528601516102605281851661022052908316610280528291620000f69190839062000100565b505050506200068a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200015a9085908390620001cb16565b620001c557604080516001600160a01b03851660248201525f6044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001b99186916200027516565b620001c5848262000275565b50505050565b5f805f846001600160a01b031684604051620001e891906200063b565b5f604051808303815f865af19150503d805f811462000223576040519150601f19603f3d011682016040523d82523d5f602084013e62000228565b606091505b5091509150818015620002565750805115806200025657508080602001905181019062000256919062000669565b80156200026c57505f856001600160a01b03163b115b95945050505050565b5f6200028b6001600160a01b03841683620002e6565b905080515f14158015620002b2575080806020019051810190620002b0919062000669565b155b15620002e157604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6060620002f583835f620002fc565b9392505050565b606081471015620003235760405163cd78605960e01b8152306004820152602401620002d8565b5f80856001600160a01b031684866040516200034091906200063b565b5f6040518083038185875af1925050503d805f81146200037c576040519150601f19603f3d011682016040523d82523d5f602084013e62000381565b606091505b509092509050620003948683836200039e565b9695505050505050565b606082620003b757620003b18262000402565b620002f5565b8151158015620003cf57506001600160a01b0384163b155b15620003fa57604051639996b31560e01b81526001600160a01b0385166004820152602401620002d8565b5080620002f5565b805115620004135780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405161020081016001600160401b03811182821017156200045c57634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b038116811462000479575f80fd5b919050565b5f608082840312156200048f575f80fd5b604051608081016001600160401b0381118282101715620004be57634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f805f8385036102a081121562000504575f80fd5b6102608082121562000514575f80fd5b6200051e6200042c565b91506200052b8662000462565b82526200053b6020870162000462565b60208301526200054e6040870162000462565b6040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e0830152610100808701518184015250610120808701518184015250610140808701518184015250610160620005b981880162000462565b90830152610180620005cd87820162000462565b908301526101a0620005e187820162000462565b908301526101c0620005f587820162000462565b908301526101e06200060a888883016200047e565b81840152508194506200061f81870162000462565b9350505062000632610280850162000462565b90509250925092565b5f82515f5b818110156200065c576020818601810151858301520162000640565b505f920191825250919050565b5f602082840312156200067a575f80fd5b81518015158114620002f5575f80fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051613cc0620008555f395f818161198801526119ff01525f50505f50505f6112ab01525f81816102f801528181610327015261035401525f818160d90152818161059601526116c101525f81816108320152818161091d015281816109ad01528181610ab2015281816115930152818161169b015281816120a001528181612103015281816129ac01528181612dea0152612e2601525f8181610139015281816108a201528181610e690152818161145c015281816114bf01528181611504015261167501525f611cb101525f8181611e06015261307501525f81816110260152611dda01525f61302b01525f818161017b015281816108f501528181610e8a0152818161142c0152818161148f0152818161152501526116e701525f818161015a0152818161022f015281816102cd015281816106d5015281816108cf01528181610f64015261294201525f818161028d01528181610d2f01528181610da601528181610e1a01528181610ee50152610f1d01525f50505f818161195b01526119bc0152613cc05ff3fe608060405260043610610028575f3560e01c80634c2ac1d91461002c57806377d05ff414610051575b5f80fd5b61003f61003a366004613719565b610064565b60405190815260200160405180910390f35b61003f61005f366004613778565b61007e565b5f6100728686868686610094565b90505b95945050505050565b5f61008a8484846107de565b90505b9392505050565b5f61009d610b8c565b600654610100900460ff16156100c6576040516321081abf60e01b815260040160405180910390fd5b6100ce610bb4565b6100d782610bd5565b7f00000000000000000000000000000000000000000000000000000000000000008610156101185760405163211ddda360e11b815260040160405180910390fd5b5f61019f610124610c0d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c32565b9050848110806101ae57508381115b156101cc57604051633b61151160e11b815260040160405180910390fd5b5f806101d88986610c57565b915091505f6101e5610d28565b90506101f5818360046001610d53565b506002546004546003545f92839261025e926001600160801b0380841693600f9390930b92600160801b90048116918991166102596102547f00000000000000000000000000000000000000000000000000000000000000008b6137d8565b6113b7565b6113fd565b915091508061028057604051630552b01360e31b815260040160405180910390fd5b8b5f6102f16008826102b27f0000000000000000000000000000000000000000000000000000000000000000896137eb565b815260208101919091526040015f20546001600160801b03167f0000000000000000000000000000000000000000000000000000000000000000611601565b905061031d7f0000000000000000000000000000000000000000000000000000000000000000826137d8565b88118061037c57507f00000000000000000000000000000000000000000000000000000000000000008111801561037c57506103797f0000000000000000000000000000000000000000000000000000000000000000826137eb565b88105b1561039a57604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103e5916001600160801b03909116906137eb565b5f808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061041f9083906137d8565b90505f805f61042d8a61162c565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa1569061046790849060040161387c565b602060405180830381865af4158015610482573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104a6919061388b565b91506104b96104b48c611766565b611793565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161051a9185910161387c565b602060405180830381865af4158015610535573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610559919061388b565b92508183101561057c5760405163184d952160e11b815260040160405180910390fd5b610592848361058b81876137eb565b91906117b9565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105d55760405163211ddda360e11b815260040160405180910390fd5b508f6105e1868e6117d4565b10156106005760405163c972651760e01b815260040160405180910390fd5b61061c5f8e5f01602081019061061691906138b6565b8e6117e8565b6106258961188d565b95508561064557604051638bdf918d60e01b815260040160405180910390fd5b5f8890505f8d9050368f90505f8c90505f6106ff60025f015f9054906101000a90046001600160801b03166001600160801b0316600280015f9054906101000a9004600f0b600f0b60025f0160109054906101000a90046001600160801b03166001600160801b03168560026001015f9054906101000a90046001600160801b03166001600160801b03166102597f00000000000000000000000000000000000000000000000000000000000000008c61025491906137d8565b9b5090508a158061071857506107158c5f611899565b81125b1561073657604051630552b01360e31b815260040160405180910390fd5b5f881561074d5761074887848b6117b9565b61074f565b5f5b905061075e60208501856138b6565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d8661079b60408a0160208b016138de565b866107a960408c018c6138f9565b6040516107bc979695949392919061393c565b60405180910390a2505050505050505050505050505050505061007560015f55565b5f6107e7610b8c565b6107ef610bb4565b6107f882610bd5565b60065460ff161561081c57604051637983c05160e01b815260040160405180910390fd5b5f806108288685610c57565b90925090506108587f0000000000000000000000000000000000000000000000000000000000000000600261398f565b82101561087857604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393505f908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612390929190613ae6565b6040805180830381865af41580156123aa573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123ce9190613b5b565b915091506123ec6123de82611766565b6123e790613b7d565b612966565b925082612401575f96505050505050506113f7565b61240a826118d2565b600780545f906124249084906001600160801b03166139f1565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612451816118d2565b60078054601090612473908490600160801b90046001600160801b03166139f1565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6124ce8761162c565b6040518263ffffffff1660e01b81526004016124ea919061387c565b6040805180830381865af4158015612504573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125289190613b97565b915091508061253d57505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916125a2916137d8565b6125ac91906137eb565b9050805f036125c257505f958695509350505050565b5f8087116125d0575f6125db565b6125db8488846117b9565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff81111561260c5761260c613bc5565b6040519080825280601f01601f191660200182016040528015612636576020820181803683370190505b5090505f808751602089018b8e8ef191503d925086831115612656578692505b828152825f602083013e9093509150505b9550959350505050565b5f805f8361267e86611766565b6126889190613a11565b90505f81121561269e575f809250925050610d21565b946001945092505050565b5f805f6126b98888888888612fcc565b90505f6126e3670de0b6b3a76400006126d28888612d8c565b6126dc91906137d8565b83906117d4565b9050670de0b6b3a7640000811061271757612710612709670de0b6b3a7640000896117d4565b8290612b13565b905061272f565b61272c612709670de0b6b3a764000089612d8c565b90505b61273981866117d4565b905088811015612750575f80935093505050612667565b97909703976001975095505050505050565b5f805f6127728989888888612ffa565b905061278c866119466127858a8d6137d8565b879061204c565b9850612799858a866117b9565b9850888110156127af575f8092509250506115f6565b888103670de0b6b3a764000081106127dd576127d6612709670de0b6b3a764000089612d8c565b90506127f5565b6127f2612709670de0b6b3a7640000896117d4565b90505b8089101561280a575f809350935050506115f6565b90970398600198509650505050505050565b5f805f805f61282c89878961301e565b909250905061283b82896137eb565b97505f61284982888a6117b9565b9050612855818b6137eb565b9a989950979650505050505050565b5f80612870845f6130a3565b61287a845f6130a3565b6128849190613a11565b90505f81131561289f5761289881866137d8565b94506128bd565b5f8112156128bd576128b081613b7d565b6128ba90866137eb565b94505b50929392505050565b5f61008d8383670de0b6b3a76400005b5f825f1904841183021582026128ea575f80fd5b50910281810615159190040190565b5f80670de0b6b3a764000061290c610d28565b612916919061398f565b9050808311612925575f61292f565b61292f81846137eb565b915061008d6126dc670de0b6b3a76400007f000000000000000000000000000000000000000000000000000000000000000061398f565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612a1c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a409190613bd9565b935093509350935080612a5b57505f98975050505050505050565b868414612a8c57612a6b846118d2565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612abd57612a9c836118fb565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612aeb57612acd826118d2565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f815f03612b2a5750670de0b6b3a76400006113f7565b825f03612b3857505f6113f7565b5f612b4283611766565b90505f612b56612b5186611766565b6130b8565b9050818102612b6d670de0b6b3a764000082613c17565b9050612b78816132dd565b9695505050505050565b6040516001600160a01b038481166024830152838116604483015260648201839052612be99186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061346f565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612c4084826134da565b612be9576040516001600160a01b0384811660248301525f6044830152612c7491869182169063095ea7b390606401612bb7565b612be9848261346f565b60405163b88fed9f60e01b8152600481018290525f9073__$27b302b103d10b9a6b3339aabd1a10a718$__9063b88fed9f90602401602060405180830381865af4158015612cce573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113f7919061388b565b5f825f03612d01575084610075565b8115612d5357612d32612d1484876137d8565b612d1e858761204c565b612d28888a61204c565b61162691906137d8565b90505f612d3f8588611be6565b905080821015612d4d578091505b50610075565b828503612d6157505f610075565b610072612d6e84876137eb565b612d7885876128c6565b612d82888a61204c565b61162691906137eb565b5f61008d83670de0b6b3a7640000846128d6565b5f60016001607f1b0382111561178f5760405163a5353be560e01b815260040160405180910390fd5b6003545f908190612de3906001600160801b031684612d8c565b9050612e0f7f0000000000000000000000000000000000000000000000000000000000000000826137d8565b6002546001600160801b031611156118a7576002547f000000000000000000000000000000000000000000000000000000000000000090612e5a9083906001600160801b03166137eb565b61008d91906137eb565b612e6c6136bf565b5f80612e778461162c565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612eb1919061387c565b6040805180830381865af4158015612ecb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612eef9190613b97565b9350905082612f0357505f9150611a659050565b5f612f246115b884610160015185610140015161204c90919063ffffffff16565b612f446115b88561012001518661010001516128c690919063ffffffff16565b612f4e9190613a11565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b5f612fd78585612b13565b612ff0612fe886611946868b61204c565b8590856117b9565b61007291906137d8565b5f6130058585612b13565b612ff061301686611946868b6128c6565b8590856128d6565b5f8061306d8561306785817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000061305d818c612d8c565b61306791906137eb565b906128c6565b9150613099827f000000000000000000000000000000000000000000000000000000000000000061204c565b9050935093915050565b5f8183136130b1578161008d565b5090919050565b5f8082136130d95760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f1982019061315c9084901c611766565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e1982136132f657505f919050565b680755bf798b4a1bf1e5821261331f576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612b7874029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611766565b5f6134836001600160a01b03841683613577565b905080515f141580156134a75750808060200190518101906134a59190613c43565b155b156134d557604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b5f805f846001600160a01b0316846040516134f59190613c5e565b5f604051808303815f865af19150503d805f811461352e576040519150601f19603f3d011682016040523d82523d5f602084013e613533565b606091505b509150915081801561355d57508051158061355d57508080602001905181019061355d9190613c43565b80156100755750505050506001600160a01b03163b151590565b606061008d83835f845f80856001600160a01b0316848660405161359b9190613c5e565b5f6040518083038185875af1925050503d805f81146135d5576040519150601f19603f3d011682016040523d82523d5f602084013e6135da565b606091505b5091509150612b788683836060826135fa576135f582613641565b61008d565b815115801561361157506001600160a01b0384163b155b1561363a57604051639996b31560e01b81526001600160a01b03851660048201526024016134cc565b508061008d565b8051156136515780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061012001604052806136d361366a565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f606082840312156118a7575f80fd5b5f805f805f60a0868803121561372d575f80fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561375f575f80fd5b61376b88828901613709565b9150509295509295909350565b5f805f6060848603121561378a575f80fd5b8335925060208401359150604084013567ffffffffffffffff8111156137ae575f80fd5b6137ba86828701613709565b9150509250925092565b634e487b7160e01b5f52601160045260245ffd5b808201808211156113f7576113f76137c4565b818103818111156113f7576113f76137c4565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b61018081016113f782846137fe565b5f6020828403121561389b575f80fd5b5051919050565b6001600160a01b0381168114610c0a575f80fd5b5f602082840312156138c6575f80fd5b813561008d816138a2565b8015158114610c0a575f80fd5b5f602082840312156138ee575f80fd5b813561008d816138d1565b5f808335601e1984360301811261390e575f80fd5b83018035915067ffffffffffffffff821115613928575f80fd5b602001915036819003821315610d21575f80fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e08301375f81830160e090810191909152601f909201601f191601019695505050505050565b80820281158282048414176113f7576113f76137c4565b5f805f606084860312156139b8575f80fd5b8351925060208401519150604084015190509250925092565b6001600160701b038181168382160190808211156118cb576118cb6137c4565b6001600160801b038181168382160190808211156118cb576118cb6137c4565b8181035f8312801583831316838312821617156118cb576118cb6137c4565b5f60208284031215613a40575f80fd5b815161008d816138a2565b8082018281125f831280158216821582161715613a6a57613a6a6137c4565b505092915050565b634e487b7160e01b5f52601260045260245ffd5b5f82613a9457613a94613a72565b500690565b6001600160801b038281168282160390808211156118cb576118cb6137c4565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156113f7576113f76137c4565b5f6102a082019050613af98285516137fe565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613b6c575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613b9157613b916137c4565b505f0390565b5f8060408385031215613ba8575f80fd5b825191506020830151613bba816138d1565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215613bec575f80fd5b8451935060208501519250604085015191506060850151613c0c816138d1565b939692955090935050565b5f82613c2557613c25613a72565b600160ff1b82145f1984141615613c3e57613c3e6137c4565b500590565b5f60208284031215613c53575f80fd5b815161008d816138d1565b5f82515f5b81811015613c7d5760208186018101518583015201613c63565b505f92019182525091905056fea2646970667358221220c5c36d55a13872898a124c8c7563e6ea85370ddb352206c2245014b3deaf386564736f6c63430008180033a26469706673582212208e3416aac7e3d6e574d545c90d6dc188d6b3cabcc7db9f41dca7e2ec4cf29d6264736f6c63430008180033608060405234801561000f575f80fd5b50613c898061001d5f395ff3fe608060405234801562000010575f80fd5b50600436106200002c575f3560e01c80638c98b3c61462000030575b5f80fd5b620000476200004136600462000263565b62000063565b6040516001600160a01b03909116815260200160405180910390f35b5f80838060200190518101906200007b9190620003d3565b6040805133602082015290810185905290915060600160405160208183030381529060405280519060200120868683604051620000b890620000f1565b620000c693929190620003f8565b8190604051809103905ff5905080158015620000e4573d5f803e3d5ffd5b509150505b949350505050565b613723806200053183390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff811182821017156200013a576200013a620000ff565b60405290565b6001600160a01b038116811462000155575f80fd5b50565b8035620001658162000140565b919050565b5f608082840312156200017b575f80fd5b6040516080810181811067ffffffffffffffff82111715620001a157620001a1620000ff565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f82601f830112620001e2575f80fd5b813567ffffffffffffffff80821115620002005762000200620000ff565b604051601f8301601f19908116603f011681019082821181831017156200022b576200022b620000ff565b8160405283815286602085880101111562000244575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f808486036102c081121562000279575f80fd5b6102608082121562000289575f80fd5b6200029362000113565b9150620002a08762000158565b8252620002b06020880162000158565b6020830152620002c36040880162000158565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606200032e81890162000158565b908301526101806200034288820162000158565b908301526101a06200035688820162000158565b908301526101c06200036a88820162000158565b908301526101e06200037f898983016200016a565b81840152508195506200039481880162000158565b9450505061028085013567ffffffffffffffff811115620003b3575f80fd5b620003c187828801620001d2565b949793965093946102a0013593505050565b5f60208284031215620003e4575f80fd5b8151620003f18162000140565b9392505050565b83516001600160a01b031681526102a0810160208501516200042560208401826001600160a01b03169052565b5060408501516200044160408401826001600160a01b03169052565b50606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e083015261010080860151818401525061012080860151818401525061014080860151818401525061016080860151620004b4828501826001600160a01b03169052565b5050610180858101516001600160a01b03908116918401919091526101a0808701518216908401526101c0808701518216908401526101e08087015180519185019190915260208101516102008501526040810151610220850152606001516102408401528481166102608401528316610280830152620000e956fe6102a060405234801562000011575f80fd5b5060405162003723380380620037238339810160408190526200003491620004ef565b60015f81905583516001600160a01b039081166080818152602080880151841660a0908152918801516101a052908701516101c05260c0808801516101e090815260e0808a015161020052610120808b0151909352610100808b0151909152610140808b0151909152908901805151909252815190920151909152805160409081015161016052905160609081015161018052908701518316610240528601516102605281851661022052908316610280528291620000f69190839062000100565b505050506200068a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200015a9085908390620001cb16565b620001c557604080516001600160a01b03851660248201525f6044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001b99186916200027516565b620001c5848262000275565b50505050565b5f805f846001600160a01b031684604051620001e891906200063b565b5f604051808303815f865af19150503d805f811462000223576040519150601f19603f3d011682016040523d82523d5f602084013e62000228565b606091505b5091509150818015620002565750805115806200025657508080602001905181019062000256919062000669565b80156200026c57505f856001600160a01b03163b115b95945050505050565b5f6200028b6001600160a01b03841683620002e6565b905080515f14158015620002b2575080806020019051810190620002b0919062000669565b155b15620002e157604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b6060620002f583835f620002fc565b9392505050565b606081471015620003235760405163cd78605960e01b8152306004820152602401620002d8565b5f80856001600160a01b031684866040516200034091906200063b565b5f6040518083038185875af1925050503d805f81146200037c576040519150601f19603f3d011682016040523d82523d5f602084013e62000381565b606091505b509092509050620003948683836200039e565b9695505050505050565b606082620003b757620003b18262000402565b620002f5565b8151158015620003cf57506001600160a01b0384163b155b15620003fa57604051639996b31560e01b81526001600160a01b0385166004820152602401620002d8565b5080620002f5565b805115620004135780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405161020081016001600160401b03811182821017156200045c57634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b038116811462000479575f80fd5b919050565b5f608082840312156200048f575f80fd5b604051608081016001600160401b0381118282101715620004be57634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f805f8385036102a081121562000504575f80fd5b6102608082121562000514575f80fd5b6200051e6200042c565b91506200052b8662000462565b82526200053b6020870162000462565b60208301526200054e6040870162000462565b6040830152606086015160608301526080860151608083015260a086015160a083015260c086015160c083015260e086015160e0830152610100808701518184015250610120808701518184015250610140808701518184015250610160620005b981880162000462565b90830152610180620005cd87820162000462565b908301526101a0620005e187820162000462565b908301526101c0620005f587820162000462565b908301526101e06200060a888883016200047e565b81840152508194506200061f81870162000462565b9350505062000632610280850162000462565b90509250925092565b5f82515f5b818110156200065c576020818601810151858301520162000640565b505f920191825250919050565b5f602082840312156200067a575f80fd5b81518015158114620002f5575f80fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e0516102005161022051610240516102605161028051612f896200079a5f395f61227401525f50505f50505f61099201525f50505f818161025f0152611f4801525f81816117a80152818161180b01528181611b3801528181611b7401528181611d650152611f2201525f81816105500152611efc01525f61138a01525f6114df01525f818161070d01526114b301525f50505f81816105710152611f6e01525f818161064b015261239701525f81816101e2015281816104160152818161048d01528181610501015281816105cc015261060401525f50505f6122eb0152612f895ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063074a6de914610043578063414f826d1461006f578063cbc1343414610084575b5f80fd5b610056610051366004612a18565b610097565b6040805192835260208301919091520160405180910390f35b61008261007d366004612a6a565b6100b1565b005b610056610092366004612a18565b6100bf565b5f806100a48585856100cc565b915091505b935093915050565b6100bb828261018e565b5050565b5f806100a485858561024a565b5f806100d6610398565b6100df836103c0565b5f6100e86103f8565b90506100ff6100f561040f565b826004600161043a565b5061010d3387838888610a9e565b909350915061011f6020850185612a9e565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561015d60408b0160208c01612ac6565b61016a60408c018c612ae1565b60405161017c96959493929190612b4c565b60405180910390a3506100a960015f55565b610196610398565b5f61019f6103f8565b5f848152600860205260409020600101549091506001600160801b0316156101d2576101cb8183610bdd565b5050610241565b5f6101db61040f565b90506102077f000000000000000000000000000000000000000000000000000000000000000085612b99565b15158061021357508381105b156102315760405163ecd29e8160e01b815260040160405180910390fd5b61023d8483855f61043a565b5050505b6100bb60015f55565b5f80610254610398565b61025d836103c0565b7f000000000000000000000000000000000000000000000000000000000000000085101561029e5760405163211ddda360e11b815260040160405180910390fd5b5f6102a76103f8565b90506102b46100f561040f565b506102c05f3388610dcd565b6102db600360f81b6102d56020870187612a9e565b88610ea4565b5f6102f56102ec6020870187612a9e565b88848989610a9e565b90945090506103048188612bc0565b92505f61031083610f41565b5090506103206020870187612a9e565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761035e60408d0160208e01612ac6565b8a888e80604001906103709190612ae1565b604051610384989796959493929190612bd3565b60405180910390a35050506100a960015f55565b60025f54036103ba57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f6103ce6020830183612a9e565b6001600160a01b0316036103f55760405163f0dd15fd60e01b815260040160405180910390fd5b50565b5f61040a670de0b6b3a7640000611083565b905090565b5f61040a427f00000000000000000000000000000000000000000000000000000000000000006110f8565b5f84815260086020526040812060018101546001600160801b031615158061046157504286115b1561047a57600101546001600160801b03169050610a96565b5f805f61048561040f565b90505f6104b27f00000000000000000000000000000000000000000000000000000000000000008b612c1a565b90505b81811015610526575f818152600860205260409020600101546001600160801b031680156104fe575f828152600860205260409020549094506001600160801b03169250610526565b507f0000000000000000000000000000000000000000000000000000000000000000016104b5565b835f036105985788935061059561053b611114565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611134565b92505b506105a283611153565b6001850180546001600160801b0319166001600160801b03929092169190911790556105f86105f17f00000000000000000000000000000000000000000000000000000000000000008b612bc0565b8a84611180565b610636896106306106297f000000000000000000000000000000000000000000000000000000000000000083612c1a565b42906112b9565b84611180565b61063f886112cd565b505f90506008816106707f00000000000000000000000000000000000000000000000000000000000000008d612bc0565b815260208101919091526040015f908120600101546001600160801b0316915061069b60028c61146a565b5f818152600b60205260408120549192508c8c83156107dc57600192505f806106c786898d865f61149e565b915091508060095f8282546106dc9190612c1a565b909155506106f79050865f846106f18161156b565b88611594565b6107018183612c1a565b915061073186838a8e877f000000000000000000000000000000000000000000000000000000000000000061170b565b91506107456107408385611754565b611768565b600680546002906107669084906201000090046001600160701b0316612c2d565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061079382611153565b600680546010906107b5908490600160801b90046001600160801b0316612c4d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f6107e860018461146a565b5f818152600b602052604090205490915080156108f357600194505f80610813838b8f88600161149e565b915091508060095f8282546108289190612c1a565b909155506108439050835f8461083d8161156b565b8a611791565b61084d8183612bc0565b915061085c6107408387611754565b6006805460029061087d9084906201000090046001600160701b0316612c2d565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108aa82611153565b600680546010906108cc908490600160801b90046001600160801b0316612c4d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b841561092c5761091e6109058761156b565b61090e8361156b565b6109189190612c6d565b5f611981565b8e6109298482610bdd565b50505b5f61093684610f41565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ec573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a109190612c8c565b90506001600160a01b03811615610a8457610a815a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906119c0565b50505b509b9d50505050505050505050505050505b949350505050565b5f80610aa985611a46565b505060075485906001600160801b031680821115610ace57806001600160801b031691505b815f03610ae1575f809250925050610bd3565b610af0600360f81b8984610dcd565b6007545f90610b159084906001600160801b03600160801b9091048116908516611a52565b9050610b2083611153565b610b2a9083612ca7565b600780546001600160801b0319166001600160801b0392909216919091179055610b5381611153565b60078054601090610b75908490600160801b90046001600160801b0316612ca7565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610ba4818887611a6d565b9350610bb08684611b03565b841015610bd05760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c27916001600160801b031690612bc0565b9050805f03610c3a576001915050610dc7565b5f610c4485611b17565b9050805f03610c5857600192505050610dc7565b5f80610c65838589611bb2565b9150915080610c7a575f945050505050610dc7565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cb5929190612d45565b6040805180830381865af4158015610ccf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf39190612dba565b91509150610d11610d038261156b565b610d0c90612ddc565b611d1f565b925082610d26575f9650505050505050610dc7565b610d2f82611153565b600780545f90610d499084906001600160801b0316612c4d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610d7681611153565b60078054601090610d98908490600160801b90046001600160801b0316612c4d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b5f838152600a602090815260408083206001600160a01b0386168452909152902054811115610e0f57604051631e9acf1760e31b815260040160405180910390fd5b5f838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e51908490612bc0565b909155505060408051848152602081018390525f916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b5f838152600a602090815260408083206001600160a01b038616845290915281208054839290610ed5908490612c1a565b90915550505f838152600b602052604081208054839290610ef7908490612c1a565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610e97565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610f6887611eb3565b6040518263ffffffff1660e01b8152600401610f849190612df6565b6040805180830381865af4158015610f9e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc29190612e05565b9150915080610fd757505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161103c91612c1a565b6110469190612bc0565b9050805f0361105c57505f958695509350505050565b5f80871161106a575f611075565b611075848884611a52565b976001975095505050505050565b60405163b88fed9f60e01b8152600481018290525f9073__$27b302b103d10b9a6b3339aabd1a10a718$__9063b88fed9f906024015b602060405180830381865af41580156110d4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dc79190612e33565b5f6111038284612b99565b61110d9084612bc0565b9392505050565b6002546004545f9161040a916001600160801b0390911690600f0b611fed565b5f61114a82611144858888611a52565b90612012565b95945050505050565b5f6001600160801b0382111561117c57604051630f0af95160e11b815260040160405180910390fd5b5090565b5f83815260086020526040902054600160801b90046001600160801b03168083036111ab5750505050565b5f848152600860205260408120546001600160801b031690819003611203576111d383611153565b5f86815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611280565b61125461124f670de0b6b3a764000061121c8886612bc0565b6112269190612e4a565b85670de0b6b3a764000061123a878a612bc0565b6112449190612e4a565b859291906001612081565b611153565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61128984611153565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b5f8183116112c7578261110d565b50919050565b6006545f9081906112ef908490600160801b90046001600160801b0316611754565b6006546201000090046001600160701b03169250905081811115611465575f6113188383612bc0565b905061132761124f828661211b565b60068054601090611349908490600160801b90046001600160801b0316612ca7565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611381858361212f90919063ffffffff16565b90505f6113ae827f0000000000000000000000000000000000000000000000000000000000000000611754565b90508060095f8282546113c19190612c1a565b909155506113d190508183612bc0565b91506113dc82611153565b600280545f906113f69084906001600160801b0316612c4d565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061142382612143565b600480545f90611437908490600f0b612e61565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f6001600160f81b038211156114935760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f806114aa878561212f565b91505f6114d7837f0000000000000000000000000000000000000000000000000000000000000000611754565b9050611503817f0000000000000000000000000000000000000000000000000000000000000000611754565b91508315611526576115158282612bc0565b61151f9084612bc0565b925061153d565b6115308282612bc0565b61153a9084612c1a565b92505b8686101561156057611550838789611a52565b925061155d828789611a52565b91505b509550959350505050565b5f6001600160ff1b0382111561117c5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166115dc61124f826115c0670de0b6b3a764000086612e4a565b600554600160801b90046001600160801b031691908a5f612081565b600580546001600160801b03928316600160801b02921691909117905561160286611153565b61160c9082612ca7565b600480546001600160801b03928316600160801b02921691909117905561163284611153565b600280545f9061164c9084906001600160801b0316612c4d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506116798361216c565b600480545f9061168d908490600f0b612e61565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506116bd85611153565b600280546010906116df908490600160801b90046001600160801b0316612ca7565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f806117228461171c8a888a611a52565b9061212f565b905061172f888486611a52565b6117399082612c1a565b9050868111156117495786810391505b509695505050505050565b5f61110d8383670de0b6b3a7640000611a52565b5f6001600160701b0382111561117c5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806117d357507f00000000000000000000000000000000000000000000000000000000000000006117d18583612bc0565b105b156117e0576117e06121a7565b6004549084900390600f0b6117f58482612c6d565b9050836118018661156b565b13801561183657507f00000000000000000000000000000000000000000000000000000000000000006118348383611fed565b105b15611843576118436121a7565b600354600160801b90046001600160801b031661188461124f8261186f670de0b6b3a764000088612e4a565b6005546001600160801b031691908c5f612081565b600580546001600160801b0319166001600160801b03929092169190911790556118ae8882612bc0565b90506118b981611153565b600380546001600160801b03928316600160801b0292169190911790556118df83611153565b600280546001600160801b0319166001600160801b03929092169190911790556119088261216c565b600480546001600160801b0319166001600160801b039290921691909117905561193187611153565b60028054601090611953908490600160801b90046001600160801b0316612c4d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461199c9061124f906001600160801b031684846121c0565b600380546001600160801b0319166001600160801b03929092169190911790555050565b5f60605f805f8661ffff1667ffffffffffffffff8111156119e3576119e3612e8e565b6040519080825280601f01601f191660200182016040528015611a0d576020820181803683370190505b5090505f808751602089018b8e8ef191503d925086831115611a2d578692505b828152825f602083013e90999098509650505050505050565b5f610dc7826004610bdd565b5f825f190484118302158202611a66575f80fd5b5091020490565b5f80611a798585611754565b9050611a8481612222565b9450845f03611a96575f91505061110d565b849150611aa96040840160208501612ac6565b15611ad857611ad185611abf6020860186612a9e565b611acc6040870187612ae1565b61225c565b9150611afb565b611afb85611ae96020860186612a9e565b611af66040870187612ae1565b612312565b509392505050565b5f61110d8383670de0b6b3a764000061232b565b6003545f908190611b31906001600160801b03168461211b565b9050611b5d7f000000000000000000000000000000000000000000000000000000000000000082612c1a565b6002546001600160801b031611156112c7576002547f000000000000000000000000000000000000000000000000000000000000000090611ba89083906001600160801b0316612bc0565b61110d9190612bc0565b611bba612979565b5f80611bc584611eb3565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611bff9190612df6565b6040805180830381865af4158015611c19573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c3d9190612e05565b9350905082611c5157505f91506100a99050565b5f611c77611c7284610160015185610140015161175490919063ffffffff16565b61156b565b611c97611c72856101200151866101000151611b0390919063ffffffff16565b611ca19190612c6d565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611dd5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611df99190612ea2565b935093509350935080611e1457505f98975050505050505050565b868414611e4557611e2484611153565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611e7657611e558361216c565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611ea457611e8682611153565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b611ebb6129c3565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191611fb3911661234e565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192611fe59290041661234e565b905292915050565b5f80611ff984846123c2565b90925090508061200b5761200b6121a7565b5092915050565b5f815f036120295750670de0b6b3a7640000610dc7565b825f0361203757505f610dc7565b5f6120418361156b565b90505f6120556120508661156b565b6123fd565b905081810261206c670de0b6b3a764000082612ee0565b905061207781612622565b9695505050505050565b5f825f0361209057508461114a565b81156120e2576120c16120a38487612c1a565b6120ad8587611754565b6120b7888a611754565b61171c9190612c1a565b90505f6120ce85886112b9565b9050808210156120dc578091505b5061114a565b8285036120f057505f61114a565b6120776120fd8487612bc0565b6121078587611b03565b612111888a611754565b61171c9190612bc0565b5f61110d83670de0b6b3a76400008461232b565b5f61110d83670de0b6b3a764000084611a52565b5f60016001607f1b0382111561117c5760405163a5353be560e01b815260040160405180910390fd5b5f60016001607f1b0319821280612189575060016001607f1b0382135b1561117c5760405163a5353be560e01b815260040160405180910390fd5b60405163bb55fd2760e01b815260040160405180910390fd5b5f806121cc845f6127b4565b6121d6845f6127b4565b6121e09190612c6d565b90505f8113156121fb576121f48186612c1a565b9450612219565b5f8112156122195761220c81612ddc565b6122169086612bc0565b94505b50929392505050565b6040516363737ac960e11b8152600481018290525f9073__$27b302b103d10b9a6b3339aabd1a10a718$__9063c6e6f592906024016110b9565b604051632e1a7d4d60e01b8152600481018590525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b1580156122bd575f80fd5b505af11580156122cf573d5f803e3d5ffd5b505050506122dc85611083565b9050610a966001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001685836127c9565b60405163350b944160e11b815260040160405180910390fd5b5f825f19048411830215820261233f575f80fd5b50910281810615159190040190565b5f80670de0b6b3a764000061236161040f565b61236b9190612e4a565b905080831161237a575f612384565b6123848184612bc0565b915061110d6123bb670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000612e4a565b839061212f565b5f805f836123cf8661156b565b6123d99190612c6d565b90505f8112156123ef575f8092509250506123f6565b9150600190505b9250929050565b5f80821361241e5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906124a19084901c61156b565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e19821361263b57505f919050565b680755bf798b4a1bf1e58212612664576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061207774029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c61156b565b5f8183136127c2578161110d565b5090919050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261281b908490612820565b505050565b5f6128346001600160a01b03841683612886565b905080515f141580156128585750808060200190518101906128569190612f0c565b155b1561281b57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b606061110d83835f845f80856001600160a01b031684866040516128aa9190612f27565b5f6040518083038185875af1925050503d805f81146128e4576040519150601f19603f3d011682016040523d82523d5f602084013e6128e9565b606091505b50915091506120778683836060826129095761290482612950565b61110d565b815115801561292057506001600160a01b0384163b155b1561294957604051639996b31560e01b81526001600160a01b038516600482015260240161287d565b508061110d565b8051156129605780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610120016040528061298d6129c3565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f60608486031215612a2a575f80fd5b8335925060208401359150604084013567ffffffffffffffff811115612a4e575f80fd5b840160608187031215612a5f575f80fd5b809150509250925092565b5f8060408385031215612a7b575f80fd5b50508035926020909101359150565b6001600160a01b03811681146103f5575f80fd5b5f60208284031215612aae575f80fd5b813561110d81612a8a565b80151581146103f5575f80fd5b5f60208284031215612ad6575f80fd5b813561110d81612ab9565b5f808335601e19843603018112612af6575f80fd5b83018035915067ffffffffffffffff821115612b10575f80fd5b6020019150368190038213156123f6575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b868152856020820152846040820152831515606082015260a060808201525f612b7960a083018486612b24565b98975050505050505050565b634e487b7160e01b5f52601260045260245ffd5b5f82612ba757612ba7612b85565b500690565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610dc757610dc7612bac565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f612c0c60e083018486612b24565b9a9950505050505050505050565b80820180821115610dc757610dc7612bac565b6001600160701b0381811683821601908082111561200b5761200b612bac565b6001600160801b0381811683821601908082111561200b5761200b612bac565b8181035f83128015838313168383128216171561200b5761200b612bac565b5f60208284031215612c9c575f80fd5b815161110d81612a8a565b6001600160801b0382811682821603908082111561200b5761200b612bac565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a082019050612d58828551612cc7565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215612dcb575f80fd5b505080516020909101519092909150565b5f600160ff1b8201612df057612df0612bac565b505f0390565b6101808101610dc78284612cc7565b5f8060408385031215612e16575f80fd5b825191506020830151612e2881612ab9565b809150509250929050565b5f60208284031215612e43575f80fd5b5051919050565b8082028115828204841417610dc757610dc7612bac565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715610dc757610dc7612bac565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215612eb5575f80fd5b8451935060208501519250604085015191506060850151612ed581612ab9565b939692955090935050565b5f82612eee57612eee612b85565b600160ff1b82145f1984141615612f0757612f07612bac565b500590565b5f60208284031215612f1c575f80fd5b815161110d81612ab9565b5f82515f5b81811015612f465760208186018101518583015201612f2c565b505f92019182525091905056fea2646970667358221220300bfe451659674edb7510f2f9e64ebac4262768e0fb1f8466952b5def24ce3e64736f6c63430008180033a264697066735822122015f81cf654f8347907d5c693013674ef571e4a89c63b1b2e0df29206e301d8c564736f6c6343000818003361016060405234801562000011575f80fd5b5060405162002a7b38038062002a7b8339810160408190526200003491620000bb565b87878787878787875f62000049898262000293565b506001600160a01b0396871660805294861660a05292851660c05290841660e0528316610100528216610120521661014052506200035f975050505050505050565b634e487b7160e01b5f52604160045260245ffd5b80516001600160a01b0381168114620000b6575f80fd5b919050565b5f805f805f805f80610100898b031215620000d4575f80fd5b88516001600160401b0380821115620000eb575f80fd5b818b0191508b601f830112620000ff575f80fd5b8151818111156200011457620001146200008b565b604051601f8201601f19908116603f011681019083821181831017156200013f576200013f6200008b565b81604052828152602093508e848487010111156200015b575f80fd5b5f91505b828210156200017e57848201840151818301850152908301906200015f565b5f848483010152809c5050505062000198818c016200009f565b98505050620001aa60408a016200009f565b9550620001ba60608a016200009f565b9450620001ca60808a016200009f565b9350620001da60a08a016200009f565b9250620001ea60c08a016200009f565b9150620001fa60e08a016200009f565b90509295985092959890939650565b600181811c908216806200021e57607f821691505b6020821081036200023d57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200028e57805f5260205f20601f840160051c810160208510156200026a5750805b601f840160051c820191505b818110156200028b575f815560010162000276565b50505b505050565b81516001600160401b03811115620002af57620002af6200008b565b620002c781620002c0845462000209565b8462000243565b602080601f831160018114620002fd575f8415620002e55750858301515b5f19600386901b1c1916600185901b17855562000357565b5f85815260208120601f198616915b828110156200032d578886015182559484019460019091019084016200030c565b50858210156200034b57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60805160a05160c05160e0516101005161012051610140516126616200041a5f395f81816102990152610dd001525f81816103170152610c9d01525f818161037d0152610b6a01525f81816102e40152610a3701525f818161034a015261082e01525f8181610440015261115901525f81816103ee01528181610547015281816107570152818161085e01528181610a6701528181610b9a01528181610ccd01528181610e0001528181610f2d015261118a01526126615ff3fe6080604052600436106100fa575f3560e01c8063ab71905f11610092578063c45a015511610062578063c45a0155146103dd578063c6e6f59214610410578063c83e1f511461042f578063e990eba814610462578063e99be39614610481575f80fd5b8063ab71905f14610339578063b6cb11181461036c578063b88fed9f1461039f578063c1510618146103be575f80fd5b806354fd4d50116100cd57806354fd4d5014610259578063966ecd1c14610288578063a085fa30146102d3578063aa8cd6c414610306575f80fd5b806304baa00b146100fe57806306fdde031461012857806316abfc701461013c578063374040171461015d575b5f80fd5b348015610109575f80fd5b50610112610494565b60405161011f9190611bb5565b60405180910390f35b348015610133575f80fd5b506101126104b0565b61014f61014a366004611cea565b61053b565b60405190815260200161011f565b348015610168575f80fd5b5061024c610177366004611da8565b60408051610120810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152505f9081526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b0390811660608301526004830154811660808301526005830154811660a08301526006830154811660c08301526007830154811660e083015260089092015490911661010082015290565b60405161011f9190611dbf565b348015610264575f80fd5b50604080518082019091526007815266076312e302e32360cc1b6020820152610112565b348015610293575f80fd5b506102bb7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161011f565b3480156102de575f80fd5b506102bb7f000000000000000000000000000000000000000000000000000000000000000081565b348015610311575f80fd5b506102bb7f000000000000000000000000000000000000000000000000000000000000000081565b348015610344575f80fd5b506102bb7f000000000000000000000000000000000000000000000000000000000000000081565b348015610377575f80fd5b506102bb7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103aa575f80fd5b5061014f6103b9366004611da8565b6106d0565b3480156103c9575f80fd5b506102bb6103d8366004611f93565b61074b565b3480156103e8575f80fd5b506102bb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561041b575f80fd5b5061014f61042a366004611da8565b610ee7565b34801561043a575f80fd5b506102bb7f000000000000000000000000000000000000000000000000000000000000000081565b34801561046d575f80fd5b506102bb61047c366004611ffc565b610f21565b34801561048c575f80fd5b50600561014f565b6040518060600160405280602881526020016126046028913981565b5f80546104bc90612096565b80601f01602080910402602001604051908101604052809291908181526020018280546104e890612096565b80156105335780601f1061050a57610100808354040283529160200191610533565b820191905f5260205f20905b81548152906001019060200180831161051657829003601f168201915b505050505081565b5f336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461058557604051634084351160e01b815260040160405180910390fd5b61058d611294565b5f868152600160205260409020600301546001600160a01b0316806105c55760405163952b05cb60e01b815260040160405180910390fd5b5f6105d2828888876112b5565b9050816001600160a01b03166377d05ff4828888886040518563ffffffff1660e01b8152600401610605939291906120ce565b60206040518083038185885af1158015610621573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906106469190612113565b92505f610653823461213e565b905080156106c3576040515f90339083908381818185875af1925050503d805f811461069a576040519150601f19603f3d011682016040523d82523d5f602084013e61069f565b606091505b50509050806106c1576040516312171d8360e31b815260040160405180910390fd5b505b5050505b95945050505050565b60405163b88fed9f60e01b8152600481018290525f9073__$27b302b103d10b9a6b3339aabd1a10a718$__9063b88fed9f906024015b602060405180830381865af4158015610721573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107459190612113565b92915050565b5f336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461079557604051634084351160e01b815260040160405180910390fd5b5f86815260016020526040812090849003610945578054156107ca57604051633be1b34d60e11b815260040160405180910390fd5b6107d4868661136f565b5f6107df8787611591565b90505f876040516020016107f39190612151565b6040516020818303038152906040528051906020012090505f878051906020012090505f6108208a6115aa565b9050838160800181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008c8f8c60405160200161089a929190918252602082015260400190565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b81526004016108cf9493929190612384565b6020604051808303815f875af11580156108eb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061090f91906123c9565b9285555060018401556002830191909155600490910180546001600160a01b0319166001600160a01b03831617905590506106c7565b5f87815260016020526040902054806109715760405163398b1c0960e21b815260040160405180910390fd5b80876040516020016109839190612151565b60405160208183030381529060405280519060200120146109b75760405163332ee11f60e01b815260040160405180910390fd5b600182015486516020880120146109e157604051631a3272d160e31b815260040160405180910390fd5b6109eb878761136f565b5f6109f5886115aa565b6002840154608082015290506001869003610b355760058301546001600160a01b031615610a355760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610a9c939291906123e4565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610ad19493929190612384565b6020604051808303815f875af1158015610aed573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610b1191906123c9565b6005840180546001600160a01b0319166001600160a01b03831617905593506106c3565b85600203610c685760068301546001600160a01b031615610b685760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610bcf939291906123e4565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610c049493929190612384565b6020604051808303815f875af1158015610c20573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c4491906123c9565b6006840180546001600160a01b0319166001600160a01b03831617905593506106c3565b85600303610d9b5760078301546001600160a01b031615610c9b5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610d02939291906123e4565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610d379493929190612384565b6020604051808303815f875af1158015610d53573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d7791906123c9565b6007840180546001600160a01b0319166001600160a01b03831617905593506106c3565b85600403610ece5760088301546001600160a01b031615610dce5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610e35939291906123e4565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610e6a9493929190612384565b6020604051808303815f875af1158015610e86573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610eaa91906123c9565b6008840180546001600160a01b0319166001600160a01b03831617905593506106c3565b604051631d9f815960e11b815260040160405180910390fd5b6040516363737ac960e11b8152600481018290525f9073__$27b302b103d10b9a6b3339aabd1a10a718$$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611c61573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c859190612bf3565b935093509350935080611ca057505f98975050505050505050565b868414611cd157611cb084611f1a565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611d0257611ce183611f43565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611d3057611d1282611f1a565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b5f611d4a8284612c26565b6114679084612b83565b6002546004545f91610f2e916001600160801b0390911690600f0b611f90565b5f611d94878787611d8d88670de0b6b3a7640000612b83565b8787611fb5565b979650505050505050565b5f611db582611daf858888611ed2565b90611fe2565b95945050505050565b5f611e28611dfe611dd784670de0b6b3a7640000612b83565b6110fa670de0b6b3a7640000611ded818a611b97565b611df79190612b83565b87906119a0565b611e1090670de0b6b3a7640000612b96565b611e2284670de0b6b3a7640000612b83565b906119e7565b949350505050565b5f80611e6685611e3e611d54565b611e489190612b96565b600254611764908790600160801b90046001600160801b0316612b83565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f805f805f611e9a89878961146e565b9092509050611ea98289612b83565b97505f611eb782888a611ed2565b9050611ec3818b612b83565b9a989950979650505050505050565b5f825f190484118302158202611ee6575f80fd5b5091020490565b5f6001600160ff1b03821115611f165760405163396ea70160e11b815260040160405180910390fd5b5090565b5f6001600160801b03821115611f1657604051630f0af95160e11b815260040160405180910390fd5b5f6f7fffffffffffffffffffffffffffffff19821280611f7257506f7fffffffffffffffffffffffffffffff82135b15611f165760405163a5353be560e01b815260040160405180910390fd5b5f80611f9c8484612047565b909250905080611fae57611fae611e71565b5092915050565b5f80611fc5888888888888612082565b909250905080611fd757611fd7611e71565b509695505050505050565b5f815f03611ff95750670de0b6b3a7640000610d5e565b825f0361200757505f610d5e565b5f61201183611eed565b90505f61202561202086611eed565b612146565b905081810261203c670de0b6b3a764000082612c39565b9050611b8d816119fb565b5f805f8361205486611eed565b61205e9190612ba9565b90505f811215612074575f80925092505061207b565b9150600190505b9250929050565b5f805f612092898988888861236b565b90506120ac86611daf6120a58a8d612b96565b87906119d3565b98506120b9858a86611ed2565b9850888110156120cf575f80925092505061213b565b888103670de0b6b3a76400008110612104576120fd6120f6670de0b6b3a764000089611b97565b8290611fe2565b905061211c565b6121196120f6670de0b6b3a7640000896119e7565b90505b80891015612131575f8093509350505061213b565b8803925060019150505b965096945050505050565b5f8082136121675760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906121ea9084901c611eed565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f6123768585611fe2565b61238f61238786611daf868b6119a0565b8590856119b0565b611b8d9190612b96565b818382375f9101908152919050565b805160208201516001600160e01b031980821692919060048310156123d75780818460040360031b1b83161693505b505050919050565b634e487b7160e01b5f52604160045260245ffd5b604051610180810167ffffffffffffffff81118282101715612417576124176123df565b60405290565b5f5b8381101561243757818101518382015260200161241f565b50505f910152565b5f6020828403121561244f575f80fd5b815167ffffffffffffffff80821115612466575f80fd5b818401915084601f830112612479575f80fd5b81518181111561248b5761248b6123df565b604051601f8201601f19908116603f011681019083821181831017156124b3576124b36123df565b816040528281528760208487010111156124cb575f80fd5b611d9483602083016020880161241d565b6001600160a01b0381168114610de3575f80fd5b5f60208284031215612500575f80fd5b8135611467816124dc565b8015158114610de3575f80fd5b80356125238161250b565b919050565b5f60208284031215612538575f80fd5b81356114678161250b565b5f60608284031215610b57575f80fd5b5f805f60608486031215612565575f80fd5b8335925060208401359150604084013567ffffffffffffffff811115612589575f80fd5b61259586828701612543565b9150509250925092565b5f8083601f8401126125af575f80fd5b50813567ffffffffffffffff8111156125c6575f80fd5b6020830191508360208260051b850101111561207b575f80fd5b5f805f805f80608087890312156125f5575f80fd5b8635612600816124dc565b95506020870135612610816124dc565b9450604087013567ffffffffffffffff8082111561262c575f80fd5b6126388a838b0161259f565b90965094506060890135915080821115612650575f80fd5b5061265d89828a0161259f565b979a9699509497509295939492505050565b5f805f8060808587031215612682575f80fd5b843593506020850135612694816124dc565b925060408501356126a4816124dc565b9396929550929360600135925050565b5f805f80608085870312156126c7575f80fd5b5050823594602084013594506040840135936060013592509050565b5f805f80608085870312156126f6575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115612721575f80fd5b61272d87828801612543565b91505092959194509250565b5f60208284031215612749575f80fd5b813567ffffffffffffffff81111561275f575f80fd5b611e2884828501612543565b5f806040838503121561277c575f80fd5b50508035926020909101359150565b5f805f805f60a0868803121561279f575f80fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156127d1575f80fd5b6127dd88828901612543565b9150509295509295909350565b5f805f80608085870312156127fd575f80fd5b84359350602085013561280f816124dc565b9250604085013591506060850135612826816124dc565b939692955090935050565b5f805f805f60a08688031215612845575f80fd5b853594506020860135612857816124dc565b93506040860135612867816124dc565b925060608601359150608086013561287e816124dc565b809150509295509295909350565b5f6020828403121561289c575f80fd5b5035919050565b80356001600160801b0381168114612523575f80fd5b5f80604083850312156128ca575f80fd5b6128d3836128a3565b91506128e1602084016128a3565b90509250929050565b5f80604083850312156128fb575f80fd5b8235612906816124dc565b915060208301356129168161250b565b809150509250929050565b5f805f60608486031215612933575f80fd5b505081359360208301359350604090920135919050565b5f805f6060848603121561295c575f80fd5b83359250602084013561296e816124dc565b929592945050506040919091013590565b5f805f805f805f60e0888a031215612995575f80fd5b87356129a0816124dc565b965060208801356129b0816124dc565b955060408801356129c08161250b565b945060608801359350608088013560ff811681146129dc575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f60208284031215612a09575f80fd5b611467826128a3565b8035600f81900b8114612523575f80fd5b80356001600160701b0381168114612523575f80fd5b5f6101808284031215612a4a575f80fd5b612a526123f3565b612a5b836128a3565b8152612a69602084016128a3565b6020820152612a7a604084016128a3565b6040820152612a8b606084016128a3565b6060820152612a9c60808401612a12565b6080820152612aad60a084016128a3565b60a0820152612abe60c084016128a3565b60c0820152612acf60e084016128a3565b60e0820152610100612ae2818501612518565b90820152610120612af4848201612518565b90820152610140612b06848201612a23565b90820152610160612b188482016128a3565b908201529392505050565b5f60208284031215612b33575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b5f600160ff1b8201612b6257612b62612b3a565b505f0390565b5f8251612b7981846020870161241d565b9190910192915050565b81810381811115610d5e57610d5e612b3a565b80820180821115610d5e57610d5e612b3a565b8181035f831280158383131683831282161715611fae57611fae612b3a565b8082028115828204841417610d5e57610d5e612b3a565b634e487b7160e01b5f52601260045260245ffd5b5f805f8060808587031215612c06575f80fd5b84519350602085015192506040850151915060608501516128268161250b565b5f82612c3457612c34612bdf565b500690565b5f82612c4757612c47612bdf565b600160ff1b82145f1984141615612c6057612c60612b3a565b50059056fea26469706673582212203b78f2df977c3c38113e9b9fa25072a8db23d1a5851c6c747ff02c2a13b1a40864736f6c6343000818003361028060405234801562000011575f80fd5b50604051620040d7380380620040d78339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613c73620004645f395f8181610d7b015261233401525f8181610d4c01526122f701525f8181610c2801528181610eab01528181610f3901528181610fc70152818161105501528181611645015281816116db0152818161189d01528181611ebe01528181611f9201526120e301525f610e1301525f8181610ded01526124d901525f8181610dc701526124b301525f8181610da1015261248d01525f61116001525f61113a01525f61111401525f6110ee01525f8181610e8501526124ff01525f8181610e39015281816112d20152612a0201525f8181610e5f0152612e2601525f81816106110152610d1d01525f818161073b01528181610cee0152818161128801528181611e36015281816125c001528181612609015281816126b6015281816126ff01528181612b5c01528181612c0501528181612ceb0152612d940152613c735ff3fe608060405234801561000f575f80fd5b5060043610610233575f3560e01c806360246c8811610135578063bd85b039116100b4578063cf210e6511610079578063cf210e65146104e7578063d8165743146104fa578063e44808bc1461050f578063e985e9c514610522578063fba5600814610535575f80fd5b8063bd85b03914610499578063becee9c3146104ac578063c55dae63146104cc578063c69e16ad1461042a578063c6e6f592146104d4575f80fd5b80639cd241af116100fa5780639cd241af1461043a578063a22cb4651461044d578063ab033ea914610460578063b0d9658014610471578063b88fed9f14610486575f80fd5b806360246c88146103f05780637180c8ca146104055780637ecebe00146104175780638e67f87e1461042a578063950c5d0314610432575f80fd5b806320fc4881116101c15780633e691db9116101865780633e691db91461038c57806346fbf68e1461039f5780634e41a1fb146103c25780634ed2d6ac146103d557806354fd4d50146103e8575f80fd5b806320fc4881146102f157806321ff32a914610336578063313ce567146103575780633656eec2146103715780633a98ef3914610384575f80fd5b806306fdde031161020757806306fdde03146102905780630a4e14931461029857806314e5f07b146102b857806317fad7fc146102cb5780631c0f12b6146102de575f80fd5b8062ad800c1461023757806301681a621461026057806302329a291461027557806304baa00b14610288575b5f80fd5b61024a61024536600461305e565b610564565b60405161025791906130c2565b60405180910390f35b61027361026e3660046130e8565b61059b565b005b610273610283366004613110565b6105a4565b61024a6105ad565b61024a6105ec565b6102a0610603565b6040516001600160a01b039091168152602001610257565b6102736102c6366004613139565b610642565b6102736102d936600461320a565b61065e565b6102736102ec366004613299565b610674565b6103046102ff36600461305e565b610687565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610257565b6103496103443660046132de565b6106f0565b604051908152602001610257565b61035f610735565b60405160ff9091168152602001610257565b61034961037f36600461331d565b6107cd565b610349610805565b61034961039a36600461334b565b610823565b6103b26103ad3660046130e8565b61082d565b6040519015158152602001610257565b61024a6103d036600461305e565b61084c565b6102736103e3366004613382565b61085a565b61024a6108a8565b6103f86108dd565b60405161025791906133c9565b61027361041336600461346a565b5050565b6103496104253660046130e8565b610bd6565b610349610c01565b6102a0610c1a565b610273610448366004613496565b610c59565b61027361045b36600461346a565b610c6a565b61027361046e3660046130e8565b50565b610479610cd5565b60405161025791906134cb565b61034961049436600461305e565b611195565b6103496104a736600461305e565b6111a2565b6104bf6104ba3660046135f1565b6111c3565b6040516102579190613630565b6102a061127a565b6103496104e236600461305e565b6112b9565b6103496104f536600461305e565b6112c6565b6105026112fc565b6040516102579190613673565b61027361051d366004613784565b611407565b6103b26105303660046137df565b61144f565b61053d611492565b6040805182516001600160801b039081168252602093840151169281019290925201610257565b6060610596610572836114f0565b60405160200161058291906130c2565b604051602081830303815290604052611616565b919050565b61046e8161163a565b61046e8161189b565b60606105e96040518060400160405280600e81526020016d4d6f636b4879706572647269766560901b81525060405160200161058291906130c2565b90565b60606105e96001604051602001610582919061380b565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201525f916105e99101610582565b6106538989898989898989896119b3565b505050505050505050565b61066c868686868686611ba5565b505050505050565b6106818484848433611c58565b50505050565b604080516060810182525f808252602082018190529181019190915261059660085f8481526020019081526020015f20604051602001610582919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b5f838152600d602090815260408083206001600160a01b038681168552908352818420908516845282528083205481519283015261072e9101610582565b9392505050565b5f6105e97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610795573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107b991906138b8565b6040805160ff909216602083015201610582565b5f828152600a602090815260408083206001600160a01b03851684528252808320548151928301526107ff9101610582565b92915050565b5f6105e9610811611e13565b60405160200161058291815260200190565b5f6107ff82611ea9565b5f61059661083a836120df565b60408051911515602083015201610582565b6060610596610572836121bd565b83610864816122b9565b6001600160a01b0316336001600160a01b03161461089557604051632aab8bd360e01b815260040160405180910390fd5b6108a185858585612376565b5050505050565b60606105e960405180604001604052806007815260200166076312e302e32360cc1b81525060405160200161058291906130c2565b610947604051806101e001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f6109506123e2565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109ba91906138fb565b6109c4919061390e565b90505f8215610ad35773__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611e9c929190613ab4565b6040805180830381865af4158015611eb6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611eda9190613b29565b91509150611ef8611eea82611321565b611ef390613b4b565b612d13565b925082611f0d575f965050505050505061131b565b611f1682611aab565b600780545f90611f309084906001600160801b0316613959565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f5d81611aab565b60078054601090611f7f908490600160801b90046001600160801b0316613959565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611fda87612ea7565b6040518263ffffffff1660e01b8152600401611ff69190613b65565b6040805180830381865af4158015612010573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120349190613b74565b915091508061204957505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916120ae91613784565b6120b89190613926565b9050805f036120ce57505f958695509350505050565b5f8087116120dc575f6120e7565b6120e78488846125ae565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff81111561211857612118613ba2565b6040519080825280601f01601f191660200182016040528015612142576020820181803683370190505b5090505f808751602089018b8e8ef191503d925086831115612162578692505b828152825f602083013e90999098509650505050505050565b5f806121856105ab565b9050808311612194575f61219e565b61219e8184613926565b915061157d827f0000000000000000000000000000000000000000000000000000000000000000612ac7565b5f80806121ea6121e288670de0b6b3a7640000613926565b899087612fe1565b9050861561222c576121fc888861259a565b915061221d8a8a846122168a670de0b6b3a7640000613926565b8989613004565b92506122298382613784565b90505b9750975097945050505050565b5f61225661224f84670de0b6b3a7640000613926565b839061259a565b61157d90670de0b6b3a7640000613926565b5f8061229e85612276611a75565b6122809190613784565b600254610fa9908790600160801b90046001600160801b0316613926565b909210949350505050565b5f8080806122ff87866122f88b6122f26122cb8c670de0b6b3a7640000613926565b7f00000000000000000000000000000000000000000000000000000000000000009061259a565b9061259a565b9190612fe1565b935061232b847f0000000000000000000000000000000000000000000000000000000000000000611584565b91505f61234b61234389670de0b6b3a7640000613926565b8a9088612fe1565b9050612377817f000000000000000000000000000000000000000000000000000000000000000061259a565b93506123a3847f0000000000000000000000000000000000000000000000000000000000000000611584565b6123ad9084613784565b915050945094509450949050565b5f805f805f80888810156124275786156123dd576123da8d898b6125ae565b9c505b6123e88c898b6125ae565b9b506123f38b611321565b6123fc8d611321565b6124069190613797565b90506124138b898b6125ae565b9a506124208a898b6125ae565b9950612446565b6124308b611321565b6124398d611321565b6124439190613797565b90505b9b9c9a9b999a975050505050505050565b5f825f036124665750846124f4565b81156124b8576124976124798487613784565b6124838587611584565b61248d888a611584565b611d639190613784565b90505f6124a48588611ad4565b9050808210156124b2578091505b506124f4565b8285036124c657505f6124f4565b6124f16124d38487613926565b6124dd858761259a565b6124e7888a611584565b611d639190613926565b90505b95945050505050565b5f60016001607f1b031982128061251a575060016001607f1b0382135b1561134a5760405163a5353be560e01b815260040160405180910390fd5b5f80612544845f613026565b61254e845f613026565b6125589190613797565b90505f8113156125735761256c8186613784565b9450612591565b5f8112156125915761258481613b4b565b61258e9086613926565b94505b50929392505050565b5f61157d8383670de0b6b3a7640000612fe1565b5f825f1904841183021582026125c2575f80fd5b5091020490565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016126175750476126a0565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612679573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061269d91906139f8565b90505b600f5461157d908490836125ae565b5f600f5485116126bf57846126c3565b600f545b94505f6126cf8661196a565b905085600f5f8282546126e29190613926565b909155505f905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612784576040516001600160a01b0387169083905f81818185875af1925050503d805f8114612774576040519150601f19603f3d011682016040523d82523d5f602084013e612779565b606091505b505080915050612817565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af11580156127f0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128149190613bb6565b90505b80612835576040516312171d8360e31b815260040160405180910390fd5b5095945050505050565b600f54841161284e5783612852565b600f545b93505f61285e8561196a565b905084600f5f8282546128719190613926565b909155505f905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612913576040516001600160a01b0386169083905f81818185875af1925050503d805f8114612903576040519150601f19603f3d011682016040523d82523d5f602084013e612908565b606091505b5050809150506129a6565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af115801561297f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129a39190613bb6565b90505b806129c4576040516312171d8360e31b815260040160405180910390fd5b505050505050565b5f80806129ec6129e488670de0b6b3a7640000613926565b8990876125ae565b9050861561222c576129fe8888611584565b915061221d8a8a84612a188a670de0b6b3a7640000613926565b898961303b565b5f80612a2b848461304b565b909250905080612a3d57612a3d6113ec565b5092915050565b5f815f03612a5b5750670de0b6b3a764000061131b565b825f03612a6957505f61131b565b5f612a7383611321565b90505f612a87612a8286611321565b613086565b9050818102612a9e670de0b6b3a764000082613bd1565b9050612aa9816132ab565b9695505050505050565b5f61157d83670de0b6b3a764000084612fe1565b5f61157d83670de0b6b3a7640000846125ae565b5f60016001607f1b0382111561134a5760405163a5353be560e01b815260040160405180910390fd5b6003545f908190612b1e906001600160801b031684612ab3565b9050612b4a7f000000000000000000000000000000000000000000000000000000000000000082613784565b6002546001600160801b03161115611ae2576002547f000000000000000000000000000000000000000000000000000000000000000090612b959083906001600160801b0316613926565b61157d9190613926565b612ba7613677565b5f80612bb284612ea7565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612bec9190613b65565b6040805180830381865af4158015612c06573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c2a9190613b74565b9350905082612c3e57505f9150612d0b9050565b5f612c64612c5f84610160015185610140015161158490919063ffffffff16565b611321565b612c84612c5f85610120015186610100015161259a90919063ffffffff16565b612c8e9190613797565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612dc9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ded9190613bfd565b935093509350935080612e0857505f98975050505050505050565b868414612e3957612e1884611aab565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612e6a57612e49836124fd565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612e9857612e7a82611aab565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612eaf6136c1565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612fa7911661343d565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612fd99290041661343d565b905292915050565b5f825f190484118302158202612ff5575f80fd5b50910281810615159190040190565b5f806130148888888888886134b1565b909250905080611d9057611d906113ec565b5f818313613034578161157d565b5090919050565b5f8061301488888888888861358d565b5f805f8361305886611321565b6130629190613797565b90505f811215613078575f80925092505061307f565b9150600190505b9250929050565b5f8082136130a75760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f1982019061312a9084901c611321565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e1982136132c457505f919050565b680755bf798b4a1bf1e582126132ed576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612aa974029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611321565b5f80670de0b6b3a76400006134506105ab565b61345a9190613994565b9050808311613469575f613473565b6134738184613926565b915061157d6134aa670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613994565b8390612ac7565b5f805f6134c18989888888613649565b9050868810156134d7575f809250925050613582565b96869003966134e68887612a44565b9750878110156134fc575f809250925050613582565b87810361350a818688612fe1565b9050670de0b6b3a7640000811061353e57613537613530670de0b6b3a764000089612ab3565b8290612a44565b9050613556565b613553613530670de0b6b3a764000089612ac7565b90505b6135608186612ab3565b905089811015613577575f80935093505050613582565b899003925060019150505b965096945050505050565b5f805f61359d8989888888613649565b90506135ad86611aa5898b613784565b9750878110156135c3575f809250925050613582565b8781036135d1818688612fe1565b9050670de0b6b3a764000081106135fe576135f7613530670de0b6b3a764000089612ab3565b9050613616565b613613613530670de0b6b3a764000089612ac7565b90505b6136208186612ab3565b9050808a1015613637575f80935093505050613582565b90980398600198509650505050505050565b5f6136548585612a44565b61366d61366586611aa5868b61259a565b859085612fe1565b6124f19190613784565b60405180610120016040528061368b6136c1565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f8060808587031215613729575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613754575f80fd5b850160608188031215613765575f80fd5b939692955090935050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561131b5761131b613770565b8181035f831280158383131683831282161715612a3d57612a3d613770565b6001600160a01b0381168114610591575f80fd5b5f602082840312156137da575f80fd5b813561157d816137b6565b8015158114610591575f80fd5b5f60208284031215613802575f80fd5b813561157d816137e5565b5f808335601e19843603018112613822575f80fd5b83018035915067ffffffffffffffff82111561383c575f80fd5b60200191503681900382131561307f575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f6138b160e083018486613850565b9a9950505050505050505050565b8082018281125f8312801582168215821617156138de576138de613770565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a08201525f61391960c083018486613850565b9998505050505050505050565b8181038181111561131b5761131b613770565b6001600160701b03818116838216019080821115612a3d57612a3d613770565b6001600160801b03818116838216019080821115612a3d57612a3d613770565b5f60208284031215613989575f80fd5b815161157d816137b6565b808202811582820484141761131b5761131b613770565b6001600160801b03828116828216039080821115612a3d57612a3d613770565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561131b5761131b613770565b5f60208284031215613a08575f80fd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b5f82613a3157613a31613a0f565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a082019050613ac7828551613a36565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613b3a575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613b5f57613b5f613770565b505f0390565b610180810161131b8284613a36565b5f8060408385031215613b85575f80fd5b825191506020830151613b97816137e5565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215613bc6575f80fd5b815161157d816137e5565b5f82613bdf57613bdf613a0f565b600160ff1b82145f1984141615613bf857613bf8613770565b500590565b5f805f8060808587031215613c10575f80fd5b8451935060208501519250604085015191506060850151613765816137e556fea26469706673582212204687a893f4512dc9963600e3da7589301ac62d4975762443dff7c8ffe077be1964736f6c6343000818003361028060405234801562000011575f80fd5b5060405162004390380380620043908339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613ebb620004d55f395f50505f50505f610c7301525f50505f818160f901528181610302015261315701525f81816115f9015281816120f501528181612158015281816128df01528181612d4701528181612d8301528181612f74015261313101525f818161083101528181610dcd01528181610e0f01528181610f0101528181611367015281816113c50152818161199c01528181611a2b015261310b01525f611d1f01525f8181611e40015281816129d001528181612a48015261326f01525f81816109ee01528181610e820152818161146001528181611e140152612a1c01525f8181610e610152818161299c015261322b01525f818161085201528181610dab01528181610e3001528181610f2201528181611345015281816113e6015261317d01525f81816101d3015281816103960152818161092c01526136f301525f81816106f20152818161076e015281816107e2015281816108ad01526108e501525f50505f818161055b015281816114c901528181611512015281816117a1015281816117ea01528181611879015281816118fa01528181611a9601528181611b1701528181612b2f0152612b780152613ebb5ff3fe608060405260043610610028575f3560e01c8063cba2e58d1461002c578063dbbe807014610058575b5f80fd5b61003f61003a36600461396b565b61006b565b6040805192835260208301919091520160405180910390f35b61003f61006636600461396b565b610087565b5f8061007986868686610095565b915091505b94509492505050565b5f80610079868686866102bc565b5f8061009f610531565b600654610100900460ff16156100c8576040516321081abf60e01b815260040160405180910390fd5b6100d0610559565b6100d9836105c5565b5f806100e588866105fd565b90925090505f6100f583836106ce565b90507f00000000000000000000000000000000000000000000000000000000000000008110156101385760405163211ddda360e11b815260040160405180910390fd5b86821015610159576040516342af972b60e01b815260040160405180910390fd5b5f6101626106eb565b905061017281846004600161071b565b505f805f6101808787610d7f565b919a5091945090925090508b8810156101ac5760405163c972651760e01b815260040160405180910390fd5b8160095f8282546101bd91906139d9565b909155506101ce9050844283610f5e565b6101f87f0000000000000000000000000000000000000000000000000000000000000000856139d9565b98506102068389888c611097565b5f61021260018b61122e565b905061022b8161022560208e018e613a00565b8b611262565b8d8a8a898e8561023e6020830183613a00565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a86888661027b6040880160208901613a28565b8961028960408a018a613a43565b60405161029c9796959493929190613aae565b60405180910390a350909b50505050505050505050505061007e60015f55565b5f806102c6610531565b600654610100900460ff16156102ef576040516321081abf60e01b815260040160405180910390fd5b6102f7610559565b610300836105c5565b7f00000000000000000000000000000000000000000000000000000000000000008610156103415760405163211ddda360e11b815260040160405180910390fd5b5f61034a611307565b90508481101561036d576040516342af972b60e01b815260040160405180910390fd5b5f6103766106eb565b90505f61038e6103846106eb565b846004600161071b565b90505f6103bb7f0000000000000000000000000000000000000000000000000000000000000000846139d9565b90505f805f806103cc8e8988611319565b60098054949850929650909450925083915f906103ea9084906139d9565b909155506103fb9050874283610f5e565b61040d610408858a61149b565b6114af565b6104189060016139d9565b9350505f61042784898d6115ac565b9050808d101561044a5760405163c972651760e01b815260040160405180910390fd5b610454818c6105fd565b508e905061046481858b896115d3565b5f61047060028861122e565b90508c61048a826104846020840184613a00565b85611262565b858b868461049b6020860186613a00565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104d860408b0160208c01613a28565b6104ec896104e68a8d613aee565b906106ce565b8d6104fa60408e018e613a43565b60405161050e989796959493929190613b01565b60405180910390a350989d50939b50505050505050505050505061007e60015f55565b60025f540361055357604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015906105a557503415155b156105c357604051631574f9f360e01b815260040160405180910390fd5b565b5f6105d36020830183613a00565b6001600160a01b0316036105fa5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b815f806106106040850160208601613a28565b156106355761062b856106266040870187613a43565b611786565b909350905061064d565b503461064d856106486040870187613a43565b611a10565b610655611307565b915080156106c5576040515f90339083908381818185875af1925050503d805f811461069c576040519150601f19603f3d011682016040523d82523d5f602084013e6106a1565b606091505b50509050806106c3576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b5f6106e28383670de0b6b3a7640000611bb2565b90505b92915050565b5f610716427f0000000000000000000000000000000000000000000000000000000000000000611bcd565b905090565b5f84815260086020526040812060018101546001600160801b031615158061074257504286115b1561075b57600101546001600160801b03169050610d77565b5f805f6107666106eb565b90505f6107937f00000000000000000000000000000000000000000000000000000000000000008b6139d9565b90505b81811015610807575f818152600860205260409020600101546001600160801b031680156107df575f828152600860205260409020549094506001600160801b03169250610807565b507f000000000000000000000000000000000000000000000000000000000000000001610796565b835f036108795788935061087661081c611be2565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c02565b92505b5061088383611c21565b6001850180546001600160801b0319166001600160801b03929092169190911790556108d96108d27f00000000000000000000000000000000000000000000000000000000000000008b613aee565b8a84610f5e565b6109178961091161090a7f0000000000000000000000000000000000000000000000000000000000000000836139d9565b4290611c4e565b84610f5e565b61092088611c62565b505f90506008816109517f00000000000000000000000000000000000000000000000000000000000000008d613aee565b815260208101919091526040015f908120600101546001600160801b0316915061097c60028c61122e565b5f818152600b60205260408120549192508c8c8315610abd57600192505f806109a886898d865f611dff565b915091508060095f8282546109bd91906139d9565b909155506109d89050865f846109d281611ecc565b88611ef5565b6109e281836139d9565b9150610a1286838a8e877f000000000000000000000000000000000000000000000000000000000000000061206c565b9150610a26610a2183856106ce565b6120b5565b60068054600290610a479084906201000090046001600160701b0316613b48565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a7482611c21565b60068054601090610a96908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f610ac960018461122e565b5f818152600b60205260409020549091508015610bd457600194505f80610af4838b8f886001611dff565b915091508060095f828254610b0991906139d9565b90915550610b249050835f84610b1e81611ecc565b8a6120de565b610b2e8183613aee565b9150610b3d610a2183876106ce565b60068054600290610b5e9084906201000090046001600160701b0316613b48565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610b8b82611c21565b60068054601090610bad908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610c0d57610bff610be687611ecc565b610bef83611ecc565b610bf99190613b88565b5f6122ce565b8e610c0a848261230d565b50505b5f610c17846124fc565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ccd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf19190613ba7565b90506001600160a01b03811615610d6557610d625a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b0386169392919061263e565b50505b509b9d50505050505050505050505050505b949350505050565b5f805f805f610d8c611be2565b600254909150610df1908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f00000000000000000000000000000000000000000000000000000000000000006126c4565b600254909450610e54908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c02565b9150610eab8785610ea6857f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006126ef565b612753565b15610eb857610eb8612794565b610ec4878588856127ad565b91965094509250670de0b6b3a7640000610f46610ee187846139d9565b600254610eff908890600160801b90046001600160801b0316613aee565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c02565b1115610f5457610f54612794565b5092959194509250565b5f83815260086020526040902054600160801b90046001600160801b0316808303610f895750505050565b5f848152600860205260408120546001600160801b031690819003610fe157610fb183611c21565b5f86815260086020526040902080546001600160801b0319166001600160801b039290921691909117905561105e565b61103261102d670de0b6b3a7640000610ffa8886613aee565b6110049190613bc2565b85670de0b6b3a7640000611018878a613aee565b6110229190613bc2565b8592919060016127f5565b611c21565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61106784611c21565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b03166110d961102d826110c3670de0b6b3a764000086613bc2565b6005546001600160801b031691908860016127f5565b600580546001600160801b0319166001600160801b039290921691909117905561110285611c21565b600280545f9061111c9084906001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061114984611c21565b6002805460109061116b908490600160801b90046001600160801b0316613bd9565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061119884611c21565b6111a29082613b68565b600380546001600160801b03808416600160801b02911617905590505f6111c883612899565b90506111e6816111d787611ecc565b6111e19084613bf9565b6122ce565b6111ef846128d9565b6111fb576111fb612794565b5f61120585612938565b90508061122557604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b5f6001600160f81b038211156112575760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f838152600a602090815260408083206001600160a01b0386168452909152812080548392906112939084906139d9565b90915550505f838152600b6020526040812080548392906112b59084906139d9565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b5f610716670de0b6b3a76400006114af565b5f805f805f611326611be2565b60025490915061138b908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f0000000000000000000000000000000000000000000000000000000000000000612944565b9350876113988589612964565b11156113a6576113a6612794565b6002545f90819061140a908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c02565b93506114208a670de0b6b3a7640000868c612978565b5091935090915061143390508183613aee565b61143d9087613aee565b95508861148a816114848d611452868c613aee565b8d61145d8782612a84565b877f0000000000000000000000000000000000000000000000000000000000000000612a99565b90612964565b975090945050505093509350935093565b5f6106e283670de0b6b3a764000084612ab9565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016114fd575047611586565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561155f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115839190613c20565b90505b600f545f03611595575f6115a5565b600f546115a59084908390611bb2565b9392505050565b5f6115bd6040830160208401613a28565b156115c95750826115a5565b610d778484612adc565b6002546001600160801b0316838110156115ef576115ef612794565b60045490849003907f000000000000000000000000000000000000000000000000000000000000000090611627908390600f0b612af0565b101561163557611635612794565b60045461167f9061102d90600160801b90046001600160801b0316611662670de0b6b3a764000086613bc2565b600554600160801b90046001600160801b031691908960016127f5565b600580546001600160801b03928316600160801b0292169190911790556116a581611c21565b600280546001600160801b0319166001600160801b03929092169190911790556116ce85611c21565b600280546010906116f0908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061171d85611c21565b6004805460109061173f908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f61176d83612899565b90506111e68161177c88611ecc565b6111e19084613b88565b5f808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016117d557504761185e565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611837573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061185b9190613c20565b90505b60015f73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016118d857873410156118c7576040516312171d8360e31b815260040160405180910390fd5b6118d18834613aee565b905061196f565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af1158015611948573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061196c9190613c37565b91505b8161198d576040516312171d8360e31b815260040160405180910390fd5b600f545f036119d1576119c0887f0000000000000000000000000000000000000000000000000000000000000000612adc565b600f81905594509250611a08915050565b600f545f906119e2908a9086611bb2565b905080600f5f8282546119f591906139d9565b90915550909550909350611a0892505050565b935093915050565b5f611a1a846114af565b9050600f545f03611a5757611a4f817f0000000000000000000000000000000000000000000000000000000000000000612adc565b600f55611a7b565b5f611a6182612b15565b905080600f5f828254611a7491906139d9565b9091555050505b60015f73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611af55782341015611ae4576040516312171d8360e31b815260040160405180910390fd5b611aee8334613aee565b9050611b8c565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af1158015611b65573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b899190613c37565b91505b81611baa576040516312171d8360e31b815260040160405180910390fd5b505050505050565b5f825f190484118302158202611bc6575f80fd5b5091020490565b5f611bd88284613c66565b6106e29084613aee565b6002546004545f91610716916001600160801b0390911690600f0b612af0565b5f611c1882611c12858888611bb2565b90612bfb565b95945050505050565b5f6001600160801b03821115611c4a57604051630f0af95160e11b815260040160405180910390fd5b5090565b5f818311611c5c57826106e2565b50919050565b6006545f908190611c84908490600160801b90046001600160801b03166106ce565b6006546201000090046001600160701b03169250905081811115611dfa575f611cad8383613aee565b9050611cbc61102d828661149b565b60068054601090611cde908490600160801b90046001600160801b0316613bd9565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611d168583612adc90919063ffffffff16565b90505f611d43827f00000000000000000000000000000000000000000000000000000000000000006106ce565b90508060095f828254611d5691906139d9565b90915550611d6690508183613aee565b9150611d7182611c21565b600280545f90611d8b9084906001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611db882612c60565b600480545f90611dcc908490600f0b613c79565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f80611e0b8785612adc565b91505f611e38837f00000000000000000000000000000000000000000000000000000000000000006106ce565b9050611e64817f00000000000000000000000000000000000000000000000000000000000000006106ce565b91508315611e8757611e768282613aee565b611e809084613aee565b9250611e9e565b611e918282613aee565b611e9b90846139d9565b92505b86861015611ec157611eb1838789611bb2565b9250611ebe828789611bb2565b91505b509550959350505050565b5f6001600160ff1b03821115611c4a5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611f3d61102d82611f21670de0b6b3a764000086613bc2565b600554600160801b90046001600160801b031691908a5f6127f5565b600580546001600160801b03928316600160801b029216919091179055611f6386611c21565b611f6d9082613bd9565b600480546001600160801b03928316600160801b029216919091179055611f9384611c21565b600280545f90611fad9084906001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611fda83612c89565b600480545f90611fee908490600f0b613c79565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061201e85611c21565b60028054601090612040908490600160801b90046001600160801b0316613bd9565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f806120838461207d8a888a611bb2565b90612adc565b9050612090888486611bb2565b61209a90826139d9565b9050868111156120aa5786810391505b509695505050505050565b5f6001600160701b03821115611c4a5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061212057507f000000000000000000000000000000000000000000000000000000000000000061211e8583613aee565b105b1561212d5761212d612794565b6004549084900390600f0b6121428482613b88565b90508361214e86611ecc565b13801561218357507f00000000000000000000000000000000000000000000000000000000000000006121818383612af0565b105b1561219057612190612794565b600354600160801b90046001600160801b03166121d161102d826121bc670de0b6b3a764000088613bc2565b6005546001600160801b031691908c5f6127f5565b600580546001600160801b0319166001600160801b03929092169190911790556121fb8882613aee565b905061220681611c21565b600380546001600160801b03928316600160801b02921691909117905561222c83611c21565b600280546001600160801b0319166001600160801b039290921691909117905561225582612c89565b600480546001600160801b0319166001600160801b039290921691909117905561227e87611c21565b600280546010906122a0908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b6003546122e99061102d906001600160801b03168484612cc4565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291612357916001600160801b031690613aee565b9050805f0361236a5760019150506106e5565b5f61237485612d26565b9050805f03612388576001925050506106e5565b5f80612395838589612dc1565b91509150806123aa575f9450505050506106e5565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016123e5929190613d24565b6040805180830381865af41580156123ff573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124239190613d99565b9150915061244161243382611ecc565b61243c90613dbb565b612f2e565b925082612456575f96505050505050506106e5565b61245f82611c21565b600780545f906124799084906001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506124a681611c21565b600780546010906124c8908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e612523876130c2565b6040518263ffffffff1660e01b815260040161253f9190613dd5565b6040805180830381865af4158015612559573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061257d9190613de4565b915091508061259257505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916125f7916139d9565b6126019190613aee565b9050805f0361261757505f958695509350505050565b5f808711612625575f612630565b612630848884611bb2565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff81111561266157612661613e12565b6040519080825280601f01601f19166020018201604052801561268b576020820181803683370190505b5090505f808751602089018b8e8ef191503d9250868311156126ab578692505b828152825f602083013e90999098509650505050505050565b5f6126e48787876126dd88670de0b6b3a7640000613aee565b87876131fc565b979650505050505050565b5f610d7761272f61270884670de0b6b3a7640000613aee565b611484670de0b6b3a764000061271e818a61149b565b6127289190613aee565b8790612964565b61274190670de0b6b3a76400006139d9565b61207d84670de0b6b3a7640000613aee565b5f8061278985612761611be2565b61276b91906139d9565b600254610eff908790600160801b90046001600160801b0316613aee565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f805f805f6127bd89878961321e565b90925090506127cc8289613aee565b97505f6127da82888a611bb2565b90506127e6818b613aee565b9a989950979650505050505050565b5f825f03612804575084611c18565b81156128565761283561281784876139d9565b61282185876106ce565b61282b888a6106ce565b61207d91906139d9565b90505f6128428588611c4e565b905080821015612850578091505b50611c18565b82850361286457505f611c18565b61288f6128718487613aee565b61287b8587612964565b612885888a6106ce565b61207d9190613aee565b9695505050505050565b5f6128be600b5f6128ab60028661122e565b81526020019081526020015f2054611ecc565b6128cf600b5f6128ab60018761122e565b6106e59190613b88565b5f6129047f000000000000000000000000000000000000000000000000000000000000000083612964565b60035461291a91906001600160801b03166139d9565b600254612930906001600160801b0316846106ce565b101592915050565b5f6106e582600461230d565b5f6126e487878761295d88670de0b6b3a7640000613aee565b878761329d565b5f6106e28383670de0b6b3a7640000612ab9565b5f8080806129c887866129c18b61148461299a8c670de0b6b3a7640000613aee565b7f000000000000000000000000000000000000000000000000000000000000000090612964565b9190612ab9565b93506129f4847f00000000000000000000000000000000000000000000000000000000000000006106ce565b91505f612a14612a0c89670de0b6b3a7640000613aee565b8a9088612ab9565b9050612a40817f0000000000000000000000000000000000000000000000000000000000000000612964565b9350612a6c847f00000000000000000000000000000000000000000000000000000000000000006106ce565b612a7690846139d9565b915050945094509450949050565b5f818311612a9257816106e2565b5090919050565b5f80612ab084612aaa8a888a612ab9565b9061149b565b90506120908884865b5f825f190484118302158202612acd575f80fd5b50910281810615159190040190565b5f6106e283670de0b6b3a764000084611bb2565b5f80612afc84846132ad565b909250905080612b0e57612b0e612794565b5092915050565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612b63575047612bec565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612bc5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612be99190613c20565b90505b600f546115a590849083611bb2565b5f815f03612c125750670de0b6b3a76400006106e5565b825f03612c2057505f6106e5565b5f612c2a83611ecc565b90505f612c3e612c3986611ecc565b6132e5565b9050818102612c55670de0b6b3a764000082613e26565b905061288f8161350a565b5f60016001607f1b03821115611c4a5760405163a5353be560e01b815260040160405180910390fd5b5f60016001607f1b0319821280612ca6575060016001607f1b0382135b15611c4a5760405163a5353be560e01b815260040160405180910390fd5b5f80612cd0845f61369c565b612cda845f61369c565b612ce49190613b88565b90505f811315612cff57612cf881866139d9565b9450612d1d565b5f811215612d1d57612d1081613dbb565b612d1a9086613aee565b94505b50929392505050565b6003545f908190612d40906001600160801b03168461149b565b9050612d6c7f0000000000000000000000000000000000000000000000000000000000000000826139d9565b6002546001600160801b03161115611c5c576002547f000000000000000000000000000000000000000000000000000000000000000090612db79083906001600160801b0316613aee565b6115a59190613aee565b612dc96138cc565b5f80612dd4846130c2565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612e0e9190613dd5565b6040805180830381865af4158015612e28573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612e4c9190613de4565b9350905082612e6057505f9150611a089050565b5f612e86612e818461016001518561014001516106ce90919063ffffffff16565b611ecc565b612ea6612e8185610120015186610100015161296490919063ffffffff16565b612eb09190613b88565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612fe4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906130089190613e52565b93509350935093508061302357505f98975050505050505050565b8684146130545761303384611c21565b600280546001600160801b0319166001600160801b03929092169190911790555b8583146130855761306483612c89565b600480546001600160801b0319166001600160801b03929092169190911790555b8482146130b35761309582611c21565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b6130ca613916565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916131c291166136aa565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926131f4929004166136aa565b905292915050565b5f8061320c88888888888861371e565b9092509050806120aa576120aa612794565b5f806132678561148485817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000061325d818c61149b565b6114849190613aee565b9150613293827f00000000000000000000000000000000000000000000000000000000000000006106ce565b9050935093915050565b5f8061320c8888888888886137e2565b5f805f836132ba86611ecc565b6132c49190613b88565b90505f8112156132da575f8092509250506106c7565b946001945092505050565b5f8082136133065760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906133899084901c611ecc565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e19821361352357505f919050565b680755bf798b4a1bf1e5821261354c576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061288f74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611ecc565b5f818313612a9257816106e2565b5f80670de0b6b3a76400006136bd6106eb565b6136c79190613bc2565b90508083116136d6575f6136e0565b6136e08184613aee565b91506115a5613717670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613bc2565b8390612adc565b5f805f61372e898988888861389e565b905061374886611c126137418a8d6139d9565b87906106ce565b9850613755858a86611bb2565b98508881101561376b575f8092509250506137d7565b888103670de0b6b3a764000081106137a057613799613792670de0b6b3a76400008961149b565b8290612bfb565b90506137b8565b6137b5613792670de0b6b3a764000089612adc565b90505b808910156137cd575f809350935050506137d7565b8803925060019150505b965096945050505050565b5f805f6137f2898988888861389e565b905061380286611c12898b6139d9565b975087811015613818575f8092509250506137d7565b878103613826818688612ab9565b9050670de0b6b3a764000081106138535761384c613792670de0b6b3a76400008961149b565b905061386b565b613868613792670de0b6b3a764000089612adc565b90505b613875818661149b565b9050808a101561388c575f809350935050506137d7565b90980398600198509650505050505050565b5f6138a98585612bfb565b6138c26138ba86611c12868b612964565b859085612ab9565b61288f91906139d9565b6040518061012001604052806138e0613916565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f806080858703121561397e575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156139a9575f80fd5b8501606081880312156139ba575f80fd5b939692955090935050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156106e5576106e56139c5565b6001600160a01b03811681146105fa575f80fd5b5f60208284031215613a10575f80fd5b81356115a5816139ec565b80151581146105fa575f80fd5b5f60208284031215613a38575f80fd5b81356115a581613a1b565b5f808335601e19843603018112613a58575f80fd5b83018035915067ffffffffffffffff821115613a72575f80fd5b6020019150368190038213156106c7575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201525f613ae160c083018486613a86565b9998505050505050505050565b818103818111156106e5576106e56139c5565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f613b3a60e083018486613a86565b9a9950505050505050505050565b6001600160701b03818116838216019080821115612b0e57612b0e6139c5565b6001600160801b03818116838216019080821115612b0e57612b0e6139c5565b8181035f831280158383131683831282161715612b0e57612b0e6139c5565b5f60208284031215613bb7575f80fd5b81516115a5816139ec565b80820281158282048414176106e5576106e56139c5565b6001600160801b03828116828216039080821115612b0e57612b0e6139c5565b8082018281125f831280158216821582161715613c1857613c186139c5565b505092915050565b5f60208284031215613c30575f80fd5b5051919050565b5f60208284031215613c47575f80fd5b81516115a581613a1b565b634e487b7160e01b5f52601260045260245ffd5b5f82613c7457613c74613c52565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156106e5576106e56139c5565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a082019050613d37828551613ca6565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613daa575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613dcf57613dcf6139c5565b505f0390565b61018081016106e58284613ca6565b5f8060408385031215613df5575f80fd5b825191506020830151613e0781613a1b565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f82613e3457613e34613c52565b600160ff1b82145f1984141615613e4d57613e4d6139c5565b500590565b5f805f8060808587031215613e65575f80fd5b84519350602085015192506040850151915060608501516139ba81613a1b56fea2646970667358221220595f82fa6e2c922399de6b50996b486c871cdc75a2e73781a8bd4b816067170b64736f6c6343000818003361028060405234801562000011575f80fd5b5060405162004328380380620043288339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613e42620004e65f395f50505f50505f6112f601525f81816102f801528181610327015261035401525f818160d901528181610596015261170c01525f81816108320152818161091d015281816109ad01528181610ab2015281816115de015281816116e6015281816123dd0152818161244001528181612ce90152818161319301526131cf01525f8181610139015281816108a201528181610eb4015281816114a70152818161150a0152818161154f015281816116c001528181611bad0152611c3c01525f611fee01525f8181612143015261341e01525f8181611071015261211701525f6133d401525f818161017b015281816108f501528181610ed501528181611477015281816114da01528181611570015261173201525f818161015a0152818161022f015281816102cd015281816106d5015281816108cf01528181610faf0152612c7f01525f818161028d01528181610d7a01528181610df101528181610e6501528181610f300152610f6801525f50505f8181610bb6015281816119b2015281816119fb01528181611a8a01528181611b0b01528181611ca701528181611d2801528181612ed901528181612f2201528181612fcf01526130180152613e425ff3fe608060405260043610610028575f3560e01c80634c2ac1d91461002c57806377d05ff414610051575b5f80fd5b61003f61003a3660046138c7565b610064565b60405190815260200160405180910390f35b61003f61005f366004613926565b61007e565b5f6100728686868686610094565b90505b95945050505050565b5f61008a8484846107de565b90505b9392505050565b5f61009d610b8c565b600654610100900460ff16156100c6576040516321081abf60e01b815260040160405180910390fd5b6100ce610bb4565b6100d782610c20565b7f00000000000000000000000000000000000000000000000000000000000000008610156101185760405163211ddda360e11b815260040160405180910390fd5b5f61019f610124610c58565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c7d565b9050848110806101ae57508381115b156101cc57604051633b61151160e11b815260040160405180910390fd5b5f806101d88986610ca2565b915091505f6101e5610d73565b90506101f5818360046001610d9e565b506002546004546003545f92839261025e926001600160801b0380841693600f9390930b92600160801b90048116918991166102596102547f00000000000000000000000000000000000000000000000000000000000000008b613986565b611402565b611448565b915091508061028057604051630552b01360e31b815260040160405180910390fd5b8b5f6102f16008826102b27f000000000000000000000000000000000000000000000000000000000000000089613999565b815260208101919091526040015f20546001600160801b03167f000000000000000000000000000000000000000000000000000000000000000061164c565b905061031d7f000000000000000000000000000000000000000000000000000000000000000082613986565b88118061037c57507f00000000000000000000000000000000000000000000000000000000000000008111801561037c57506103797f000000000000000000000000000000000000000000000000000000000000000082613999565b88105b1561039a57604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103e5916001600160801b0390911690613999565b5f808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061041f908390613986565b90505f805f61042d8a611677565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa15690610467908490600401613a2a565b602060405180830381865af4158015610482573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104a69190613a39565b91506104b96104b48c6117b1565b6117de565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161051a91859101613a2a565b602060405180830381865af4158015610535573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105599190613a39565b92508183101561057c5760405163184d952160e11b815260040160405180910390fd5b610592848361058b8187613999565b9190611804565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105d55760405163211ddda360e11b815260040160405180910390fd5b508f6105e1868e61181f565b10156106005760405163c972651760e01b815260040160405180910390fd5b61061c5f8e5f0160208101906106169190613a64565b8e611833565b610625896118d8565b95508561064557604051638bdf918d60e01b815260040160405180910390fd5b5f8890505f8d9050368f90505f8c90505f6106ff60025f015f9054906101000a90046001600160801b03166001600160801b0316600280015f9054906101000a9004600f0b600f0b60025f0160109054906101000a90046001600160801b03166001600160801b03168560026001015f9054906101000a90046001600160801b03166001600160801b03166102597f00000000000000000000000000000000000000000000000000000000000000008c6102549190613986565b9b5090508a158061071857506107158c5f6118e4565b81125b1561073657604051630552b01360e31b815260040160405180910390fd5b5f881561074d5761074887848b611804565b61074f565b5f5b905061075e6020850185613a64565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d8661079b60408a0160208b01613a8c565b866107a960408c018c613aa7565b6040516107bc9796959493929190613aea565b60405180910390a2505050505050505050505050505050505061007560015f55565b5f6107e7610b8c565b6107ef610bb4565b6107f882610c20565b60065460ff161561081c57604051637983c05160e01b815260040160405180910390fd5b5f806108288685610ca2565b90925090506108587f00000000000000000000000000000000000000000000000000000000000000006002613b3d565b82101561087857604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393505f908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016126cd929190613caf565b6040805180830381865af41580156126e7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061270b9190613d24565b9150915061272961271b826117b1565b61272490613d46565b612ca3565b92508261273e575f9650505050505050611442565b6127478261191d565b600780545f906127619084906001600160801b0316613b9f565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061278e8161191d565b600780546010906127b0908490600160801b90046001600160801b0316613b9f565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61280b87611677565b6040518263ffffffff1660e01b81526004016128279190613a2a565b6040805180830381865af4158015612841573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128659190613d60565b915091508061287a57505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916128df91613986565b6128e99190613999565b9050805f036128ff57505f958695509350505050565b5f80871161290d575f612918565b612918848884611804565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff81111561294957612949613d8e565b6040519080825280601f01601f191660200182016040528015612973576020820181803683370190505b5090505f808751602089018b8e8ef191503d925086831115612993578692505b828152825f602083013e9093509150505b9550959350505050565b5f805f836129bb866117b1565b6129c59190613bbf565b90505f8112156129db575f809250925050610d6c565b946001945092505050565b5f805f6129f68888888888613375565b90505f612a20670de0b6b3a7640000612a0f8888613135565b612a199190613986565b839061181f565b9050670de0b6b3a76400008110612a5457612a4d612a46670de0b6b3a76400008961181f565b8290612e50565b9050612a6c565b612a69612a46670de0b6b3a764000089613135565b90505b612a76818661181f565b905088811015612a8d575f809350935050506129a4565b97909703976001975095505050505050565b5f805f612aaf89898888886133a3565b9050612ac986611991612ac28a8d613986565b8790612389565b9850612ad6858a86611804565b985088811015612aec575f809250925050611641565b888103670de0b6b3a76400008110612b1a57612b13612a46670de0b6b3a764000089613135565b9050612b32565b612b2f612a46670de0b6b3a76400008961181f565b90505b80891015612b47575f80935093505050611641565b90970398600198509650505050505050565b5f805f805f612b698987896133c7565b9092509050612b788289613999565b97505f612b8682888a611804565b9050612b92818b613999565b9a989950979650505050505050565b5f80612bad845f61344c565b612bb7845f61344c565b612bc19190613bbf565b90505f811315612bdc57612bd58186613986565b9450612bfa565b5f811215612bfa57612bed81613d46565b612bf79086613999565b94505b50929392505050565b5f61008d8383670de0b6b3a76400005b5f825f190484118302158202612c27575f80fd5b50910281810615159190040190565b5f80670de0b6b3a7640000612c49610d73565b612c539190613b3d565b9050808311612c62575f612c6c565b612c6c8184613999565b915061008d612a19670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b3d565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612d59573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d7d9190613da2565b935093509350935080612d9857505f98975050505050505050565b868414612dc957612da88461191d565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612dfa57612dd983611946565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612e2857612e0a8261191d565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f815f03612e675750670de0b6b3a7640000611442565b825f03612e7557505f611442565b5f612e7f836117b1565b90505f612e93612e8e866117b1565b613461565b9050818102612eaa670de0b6b3a764000082613de0565b9050612eb581613686565b9695505050505050565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612f0d575047612f96565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612f6f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f939190613a39565b90505b600f545f03612fa5575f61008d565b600f5461008d9084908390611804565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161300357504761308c565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613065573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906130899190613a39565b90505b600f5461008d90849083611804565b5f825f036130aa575084610075565b81156130fc576130db6130bd8487613986565b6130c78587612389565b6130d1888a612389565b6116719190613986565b90505f6130e88588611f23565b9050808210156130f6578091505b50610075565b82850361310a57505f610075565b6100726131178487613999565b6131218587612c03565b61312b888a612389565b6116719190613999565b5f61008d83670de0b6b3a764000084612c13565b5f60016001607f1b038211156117da5760405163a5353be560e01b815260040160405180910390fd5b6003545f90819061318c906001600160801b031684613135565b90506131b87f000000000000000000000000000000000000000000000000000000000000000082613986565b6002546001600160801b031611156118f2576002547f0000000000000000000000000000000000000000000000000000000000000000906132039083906001600160801b0316613999565b61008d9190613999565b61321561386d565b5f8061322084611677565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b815260040161325a9190613a2a565b6040805180830381865af4158015613274573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906132989190613d60565b93509050826132ac57505f9150611c199050565b5f6132cd61160384610160015185610140015161238990919063ffffffff16565b6132ed611603856101200151866101000151612c0390919063ffffffff16565b6132f79190613bbf565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b5f6133808585612e50565b61339961339186611991868b612389565b859085611804565b6100729190613986565b5f6133ae8585612e50565b6133996133bf86611991868b612c03565b859085612c13565b5f806134168561341085817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613406818c613135565b6134109190613999565b90612c03565b9150613442827f0000000000000000000000000000000000000000000000000000000000000000612389565b9050935093915050565b5f81831361345a578161008d565b5090919050565b5f8082136134825760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906135059084901c6117b1565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e19821361369f57505f919050565b680755bf798b4a1bf1e582126136c8576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612eb574029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6117b1565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b604051806101200160405280613881613818565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f606082840312156118f2575f80fd5b5f805f805f60a086880312156138db575f80fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561390d575f80fd5b613919888289016138b7565b9150509295509295909350565b5f805f60608486031215613938575f80fd5b8335925060208401359150604084013567ffffffffffffffff81111561395c575f80fd5b613968868287016138b7565b9150509250925092565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561144257611442613972565b8181038181111561144257611442613972565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161144282846139ac565b5f60208284031215613a49575f80fd5b5051919050565b6001600160a01b0381168114610c55575f80fd5b5f60208284031215613a74575f80fd5b813561008d81613a50565b8015158114610c55575f80fd5b5f60208284031215613a9c575f80fd5b813561008d81613a7f565b5f808335601e19843603018112613abc575f80fd5b83018035915067ffffffffffffffff821115613ad6575f80fd5b602001915036819003821315610d6c575f80fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e08301375f81830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761144257611442613972565b5f805f60608486031215613b66575f80fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561191657611916613972565b6001600160801b0381811683821601908082111561191657611916613972565b8181035f83128015838313168383128216171561191657611916613972565b5f60208284031215613bee575f80fd5b815161008d81613a50565b8082018281125f831280158216821582161715613c1857613c18613972565b505092915050565b5f60208284031215613c30575f80fd5b815161008d81613a7f565b634e487b7160e01b5f52601260045260245ffd5b5f82613c5d57613c5d613c3b565b500690565b6001600160801b0382811682821603908082111561191657611916613972565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561144257611442613972565b5f6102a082019050613cc28285516139ac565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613d35575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613d5a57613d5a613972565b505f0390565b5f8060408385031215613d71575f80fd5b825191506020830151613d8381613a7f565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215613db5575f80fd5b8451935060208501519250604085015191506060850151613dd581613a7f565b939692955090935050565b5f82613dee57613dee613c3b565b600160ff1b82145f1984141615613e0757613e07613972565b50059056fea264697066735822122021c8720cb2ce8fb992cc0fa9f251aa713e00db47f62726a645ba4417ef83036d64736f6c6343000818003361028060405234801562000011575f80fd5b506040516200353e3803806200353e8339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613128620004165f395f50505f50505f61099201525f50505f818161025f0152611fc901525f81816118290152818161188c01528181611bb901528181611bf501528181611de60152611fa301525f81816105500152611f7d01525f61140b01525f61156001525f818161070d015261153401525f50505f81816105710152611fef01525f818161064b015261271201525f81816101e2015281816104160152818161048d01528181610501015281816105cc015261060401525f50505f818161109d015281816110e6015281816122bd01528181612306015281816123db015281816124840152818161256a015261261301526131285ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063074a6de914610043578063414f826d1461006f578063cbc1343414610084575b5f80fd5b610056610051366004612be3565b610097565b6040805192835260208301919091520160405180910390f35b61008261007d366004612c35565b6100b1565b005b610056610092366004612be3565b6100bf565b5f806100a48585856100cc565b915091505b935093915050565b6100bb828261018e565b5050565b5f806100a485858561024a565b5f806100d6610398565b6100df836103c0565b5f6100e86103f8565b90506100ff6100f561040f565b826004600161043a565b5061010d3387838888610a9e565b909350915061011f6020850185612c69565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561015d60408b0160208c01612c91565b61016a60408c018c612cac565b60405161017c96959493929190612d17565b60405180910390a3506100a960015f55565b610196610398565b5f61019f6103f8565b5f848152600860205260409020600101549091506001600160801b0316156101d2576101cb8183610bdd565b5050610241565b5f6101db61040f565b90506102077f000000000000000000000000000000000000000000000000000000000000000085612d64565b15158061021357508381105b156102315760405163ecd29e8160e01b815260040160405180910390fd5b61023d8483855f61043a565b5050505b6100bb60015f55565b5f80610254610398565b61025d836103c0565b7f000000000000000000000000000000000000000000000000000000000000000085101561029e5760405163211ddda360e11b815260040160405180910390fd5b5f6102a76103f8565b90506102b46100f561040f565b506102c05f3388610dcd565b6102db600360f81b6102d56020870187612c69565b88610ea4565b5f6102f56102ec6020870187612c69565b88848989610a9e565b90945090506103048188612d8b565b92505f61031083610f41565b5090506103206020870187612c69565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761035e60408d0160208e01612c91565b8a888e80604001906103709190612cac565b604051610384989796959493929190612d9e565b60405180910390a35050506100a960015f55565b60025f54036103ba57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f6103ce6020830183612c69565b6001600160a01b0316036103f55760405163f0dd15fd60e01b815260040160405180910390fd5b50565b5f61040a670de0b6b3a7640000611083565b905090565b5f61040a427f0000000000000000000000000000000000000000000000000000000000000000611180565b5f84815260086020526040812060018101546001600160801b031615158061046157504286115b1561047a57600101546001600160801b03169050610a96565b5f805f61048561040f565b90505f6104b27f00000000000000000000000000000000000000000000000000000000000000008b612de5565b90505b81811015610526575f818152600860205260409020600101546001600160801b031680156104fe575f828152600860205260409020549094506001600160801b03169250610526565b507f0000000000000000000000000000000000000000000000000000000000000000016104b5565b835f036105985788935061059561053b611195565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006111b5565b92505b506105a2836111d4565b6001850180546001600160801b0319166001600160801b03929092169190911790556105f86105f17f00000000000000000000000000000000000000000000000000000000000000008b612d8b565b8a84611201565b610636896106306106297f000000000000000000000000000000000000000000000000000000000000000083612de5565b429061133a565b84611201565b61063f8861134e565b505f90506008816106707f00000000000000000000000000000000000000000000000000000000000000008d612d8b565b815260208101919091526040015f908120600101546001600160801b0316915061069b60028c6114eb565b5f818152600b60205260408120549192508c8c83156107dc57600192505f806106c786898d865f61151f565b915091508060095f8282546106dc9190612de5565b909155506106f79050865f846106f1816115ec565b88611615565b6107018183612de5565b915061073186838a8e877f000000000000000000000000000000000000000000000000000000000000000061178c565b915061074561074083856117d5565b6117e9565b600680546002906107669084906201000090046001600160701b0316612df8565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610793826111d4565b600680546010906107b5908490600160801b90046001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f6107e86001846114eb565b5f818152600b602052604090205490915080156108f357600194505f80610813838b8f88600161151f565b915091508060095f8282546108289190612de5565b909155506108439050835f8461083d816115ec565b8a611812565b61084d8183612d8b565b915061085c61074083876117d5565b6006805460029061087d9084906201000090046001600160701b0316612df8565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108aa826111d4565b600680546010906108cc908490600160801b90046001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b841561092c5761091e610905876115ec565b61090e836115ec565b6109189190612e38565b5f611a02565b8e6109298482610bdd565b50505b5f61093684610f41565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ec573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a109190612e57565b90506001600160a01b03811615610a8457610a815a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611a41565b50505b509b9d50505050505050505050505050505b949350505050565b5f80610aa985611ac7565b505060075485906001600160801b031680821115610ace57806001600160801b031691505b815f03610ae1575f809250925050610bd3565b610af0600360f81b8984610dcd565b6007545f90610b159084906001600160801b03600160801b9091048116908516611ad3565b9050610b20836111d4565b610b2a9083612e72565b600780546001600160801b0319166001600160801b0392909216919091179055610b53816111d4565b60078054601090610b75908490600160801b90046001600160801b0316612e72565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610ba4818887611aee565b9350610bb08684611b84565b841015610bd05760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c27916001600160801b031690612d8b565b9050805f03610c3a576001915050610dc7565b5f610c4485611b98565b9050805f03610c5857600192505050610dc7565b5f80610c65838589611c33565b9150915080610c7a575f945050505050610dc7565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cb5929190612f10565b6040805180830381865af4158015610ccf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf39190612f85565b91509150610d11610d03826115ec565b610d0c90612fa7565b611da0565b925082610d26575f9650505050505050610dc7565b610d2f826111d4565b600780545f90610d499084906001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610d76816111d4565b60078054601090610d98908490600160801b90046001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b5f838152600a602090815260408083206001600160a01b0386168452909152902054811115610e0f57604051631e9acf1760e31b815260040160405180910390fd5b5f838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e51908490612d8b565b909155505060408051848152602081018390525f916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b5f838152600a602090815260408083206001600160a01b038616845290915281208054839290610ed5908490612de5565b90915550505f838152600b602052604081208054839290610ef7908490612de5565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610e97565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610f6887611f34565b6040518263ffffffff1660e01b8152600401610f849190612fc1565b6040805180830381865af4158015610f9e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc29190612fd0565b9150915080610fd757505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161103c91612de5565b6110469190612d8b565b9050805f0361105c57505f958695509350505050565b5f80871161106a575f611075565b611075848884611ad3565b976001975095505050505050565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016110d157504761115a565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611133573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111579190612ffe565b90505b600f545f03611169575f611179565b600f546111799084908390611ad3565b9392505050565b5f61118b8284612d64565b6111799084612d8b565b6002546004545f9161040a916001600160801b0390911690600f0b61206e565b5f6111cb826111c5858888611ad3565b90612093565b95945050505050565b5f6001600160801b038211156111fd57604051630f0af95160e11b815260040160405180910390fd5b5090565b5f83815260086020526040902054600160801b90046001600160801b031680830361122c5750505050565b5f848152600860205260408120546001600160801b03169081900361128457611254836111d4565b5f86815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611301565b6112d56112d0670de0b6b3a764000061129d8886612d8b565b6112a79190613015565b85670de0b6b3a76400006112bb878a612d8b565b6112c59190613015565b859291906001612102565b6111d4565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61130a846111d4565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b5f8183116113485782611179565b50919050565b6006545f908190611370908490600160801b90046001600160801b03166117d5565b6006546201000090046001600160701b031692509050818111156114e6575f6113998383612d8b565b90506113a86112d0828661219c565b600680546010906113ca908490600160801b90046001600160801b0316612e72565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f61140285836121b090919063ffffffff16565b90505f61142f827f00000000000000000000000000000000000000000000000000000000000000006117d5565b90508060095f8282546114429190612de5565b9091555061145290508183612d8b565b915061145d826111d4565b600280545f906114779084906001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506114a4826121c4565b600480545f906114b8908490600f0b61302c565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f6001600160f81b038211156115145760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f8061152b87856121b0565b91505f611558837f00000000000000000000000000000000000000000000000000000000000000006117d5565b9050611584817f00000000000000000000000000000000000000000000000000000000000000006117d5565b915083156115a7576115968282612d8b565b6115a09084612d8b565b92506115be565b6115b18282612d8b565b6115bb9084612de5565b92505b868610156115e1576115d1838789611ad3565b92506115de828789611ad3565b91505b509550959350505050565b5f6001600160ff1b038211156111fd5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b031661165d6112d082611641670de0b6b3a764000086613015565b600554600160801b90046001600160801b031691908a5f612102565b600580546001600160801b03928316600160801b029216919091179055611683866111d4565b61168d9082612e72565b600480546001600160801b03928316600160801b0292169190911790556116b3846111d4565b600280545f906116cd9084906001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506116fa836121ed565b600480545f9061170e908490600f0b61302c565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061173e856111d4565b60028054601090611760908490600160801b90046001600160801b0316612e72565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f806117a38461179d8a888a611ad3565b906121b0565b90506117b0888486611ad3565b6117ba9082612de5565b9050868111156117ca5786810391505b509695505050505050565b5f6111798383670de0b6b3a7640000611ad3565b5f6001600160701b038211156111fd5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061185457507f00000000000000000000000000000000000000000000000000000000000000006118528583612d8b565b105b1561186157611861612228565b6004549084900390600f0b6118768482612e38565b905083611882866115ec565b1380156118b757507f00000000000000000000000000000000000000000000000000000000000000006118b5838361206e565b105b156118c4576118c4612228565b600354600160801b90046001600160801b03166119056112d0826118f0670de0b6b3a764000088613015565b6005546001600160801b031691908c5f612102565b600580546001600160801b0319166001600160801b039290921691909117905561192f8882612d8b565b905061193a816111d4565b600380546001600160801b03928316600160801b029216919091179055611960836111d4565b600280546001600160801b0319166001600160801b0392909216919091179055611989826121ed565b600480546001600160801b0319166001600160801b03929092169190911790556119b2876111d4565b600280546010906119d4908490600160801b90046001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611a1d906112d0906001600160801b03168484612241565b600380546001600160801b0319166001600160801b03929092169190911790555050565b5f60605f805f8661ffff1667ffffffffffffffff811115611a6457611a64613059565b6040519080825280601f01601f191660200182016040528015611a8e576020820181803683370190505b5090505f808751602089018b8e8ef191503d925086831115611aae578692505b828152825f602083013e90999098509650505050505050565b5f610dc7826004610bdd565b5f825f190484118302158202611ae7575f80fd5b5091020490565b5f80611afa85856117d5565b9050611b05816122a3565b9450845f03611b17575f915050611179565b849150611b2a6040840160208501612c91565b15611b5957611b5285611b406020860186612c69565b611b4d6040870187612cac565b612389565b9150611b7c565b611b7c85611b6a6020860186612c69565b611b776040870187612cac565b612519565b509392505050565b5f6111798383670de0b6b3a76400006126a6565b6003545f908190611bb2906001600160801b03168461219c565b9050611bde7f000000000000000000000000000000000000000000000000000000000000000082612de5565b6002546001600160801b03161115611348576002547f000000000000000000000000000000000000000000000000000000000000000090611c299083906001600160801b0316612d8b565b6111799190612d8b565b611c3b612b44565b5f80611c4684611f34565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c809190612fc1565b6040805180830381865af4158015611c9a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cbe9190612fd0565b9350905082611cd257505f91506100a99050565b5f611cf8611cf38461016001518561014001516117d590919063ffffffff16565b6115ec565b611d18611cf3856101200151866101000151611b8490919063ffffffff16565b611d229190612e38565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = StakingUSDSHyperdriveInstanceTestContractFunctions(stakingusdshyperdriveinstancetest_abi, self.w3, address)  # type: ignore
        self.events = StakingUSDSHyperdriveInstanceTestContractEvents(stakingusdshyperdriveinstancetest_abi, self.w3, address)  # type: ignore
        self.errors = StakingUSDSHyperdriveInstanceTestContractErrors()

    events: StakingUSDSHyperdriveInstanceTestContractEvents

    errors: StakingUSDSHyperdriveInstanceTestContractErrors = (
        StakingUSDSHyperdriveInstanceTestContractErrors()
    )

    functions: StakingUSDSHyperdriveInstanceTestContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        config: InstanceTest.InstanceTestConfig

        stakingUSDS: str

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        StakingUSDSConversions: StakingUSDSConversionsContract

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "StakingUSDSConversions": "__$27b302b103d10b9a6b3339aabd1a10a718$__",
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, config: InstanceTest.InstanceTestConfig, stakingUSDS: str, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup[
                    "StakingUSDSConversions"
                ],
                link_references.StakingUSDSConversions.address[2:].lower(),
            )

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(config), dataclass_to_tuple(stakingUSDS)
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args, link_references
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = StakingUSDSHyperdriveInstanceTestContractFunctions(
            stakingusdshyperdriveinstancetest_abi, w3, None
        )
        contract.errors = StakingUSDSHyperdriveInstanceTestContractErrors()

        return contract
