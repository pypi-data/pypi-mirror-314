"""Dataclasses for all structs in the Debug contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs, ErrorInfo


@dataclass(kw_only=True)
class LogEvent(BaseEvent):
    """The event type for event log"""

    @dataclass(kw_only=True)
    class LogEventArgs(BaseEventArgs):
        """The args to the event log"""

        arg1: str

    # We redefine the args field with the specific event arg type.
    args: LogEventArgs  # type: ignore[override]

    __name__: str = "log"


@dataclass(kw_only=True)
class Log_addressEvent(BaseEvent):
    """The event type for event log_address"""

    @dataclass(kw_only=True)
    class Log_addressEventArgs(BaseEventArgs):
        """The args to the event log_address"""

        arg1: str

    # We redefine the args field with the specific event arg type.
    args: Log_addressEventArgs  # type: ignore[override]

    __name__: str = "log_address"


@dataclass(kw_only=True)
class Log_arrayEvent(BaseEvent):
    """The event type for event log_array"""

    @dataclass(kw_only=True)
    class Log_arrayEventArgs(BaseEventArgs):
        """The args to the event log_array"""

        val: list[str]

    # We redefine the args field with the specific event arg type.
    args: Log_arrayEventArgs  # type: ignore[override]

    __name__: str = "log_array"


@dataclass(kw_only=True)
class Log_bytesEvent(BaseEvent):
    """The event type for event log_bytes"""

    @dataclass(kw_only=True)
    class Log_bytesEventArgs(BaseEventArgs):
        """The args to the event log_bytes"""

        arg1: bytes

    # We redefine the args field with the specific event arg type.
    args: Log_bytesEventArgs  # type: ignore[override]

    __name__: str = "log_bytes"


@dataclass(kw_only=True)
class Log_bytes32Event(BaseEvent):
    """The event type for event log_bytes32"""

    @dataclass(kw_only=True)
    class Log_bytes32EventArgs(BaseEventArgs):
        """The args to the event log_bytes32"""

        arg1: bytes

    # We redefine the args field with the specific event arg type.
    args: Log_bytes32EventArgs  # type: ignore[override]

    __name__: str = "log_bytes32"


@dataclass(kw_only=True)
class Log_intEvent(BaseEvent):
    """The event type for event log_int"""

    @dataclass(kw_only=True)
    class Log_intEventArgs(BaseEventArgs):
        """The args to the event log_int"""

        arg1: int

    # We redefine the args field with the specific event arg type.
    args: Log_intEventArgs  # type: ignore[override]

    __name__: str = "log_int"


@dataclass(kw_only=True)
class Log_named_addressEvent(BaseEvent):
    """The event type for event log_named_address"""

    @dataclass(kw_only=True)
    class Log_named_addressEventArgs(BaseEventArgs):
        """The args to the event log_named_address"""

        key: str
        val: str

    # We redefine the args field with the specific event arg type.
    args: Log_named_addressEventArgs  # type: ignore[override]

    __name__: str = "log_named_address"


@dataclass(kw_only=True)
class Log_named_arrayEvent(BaseEvent):
    """The event type for event log_named_array"""

    @dataclass(kw_only=True)
    class Log_named_arrayEventArgs(BaseEventArgs):
        """The args to the event log_named_array"""

        key: str
        val: list[str]

    # We redefine the args field with the specific event arg type.
    args: Log_named_arrayEventArgs  # type: ignore[override]

    __name__: str = "log_named_array"


@dataclass(kw_only=True)
class Log_named_bytesEvent(BaseEvent):
    """The event type for event log_named_bytes"""

    @dataclass(kw_only=True)
    class Log_named_bytesEventArgs(BaseEventArgs):
        """The args to the event log_named_bytes"""

        key: str
        val: bytes

    # We redefine the args field with the specific event arg type.
    args: Log_named_bytesEventArgs  # type: ignore[override]

    __name__: str = "log_named_bytes"


@dataclass(kw_only=True)
class Log_named_bytes32Event(BaseEvent):
    """The event type for event log_named_bytes32"""

    @dataclass(kw_only=True)
    class Log_named_bytes32EventArgs(BaseEventArgs):
        """The args to the event log_named_bytes32"""

        key: str
        val: bytes

    # We redefine the args field with the specific event arg type.
    args: Log_named_bytes32EventArgs  # type: ignore[override]

    __name__: str = "log_named_bytes32"


@dataclass(kw_only=True)
class Log_named_decimal_intEvent(BaseEvent):
    """The event type for event log_named_decimal_int"""

    @dataclass(kw_only=True)
    class Log_named_decimal_intEventArgs(BaseEventArgs):
        """The args to the event log_named_decimal_int"""

        key: str
        val: int
        decimals: int

    # We redefine the args field with the specific event arg type.
    args: Log_named_decimal_intEventArgs  # type: ignore[override]

    __name__: str = "log_named_decimal_int"


@dataclass(kw_only=True)
class Log_named_decimal_uintEvent(BaseEvent):
    """The event type for event log_named_decimal_uint"""

    @dataclass(kw_only=True)
    class Log_named_decimal_uintEventArgs(BaseEventArgs):
        """The args to the event log_named_decimal_uint"""

        key: str
        val: int
        decimals: int

    # We redefine the args field with the specific event arg type.
    args: Log_named_decimal_uintEventArgs  # type: ignore[override]

    __name__: str = "log_named_decimal_uint"


@dataclass(kw_only=True)
class Log_named_intEvent(BaseEvent):
    """The event type for event log_named_int"""

    @dataclass(kw_only=True)
    class Log_named_intEventArgs(BaseEventArgs):
        """The args to the event log_named_int"""

        key: str
        val: int

    # We redefine the args field with the specific event arg type.
    args: Log_named_intEventArgs  # type: ignore[override]

    __name__: str = "log_named_int"


@dataclass(kw_only=True)
class Log_named_stringEvent(BaseEvent):
    """The event type for event log_named_string"""

    @dataclass(kw_only=True)
    class Log_named_stringEventArgs(BaseEventArgs):
        """The args to the event log_named_string"""

        key: str
        val: str

    # We redefine the args field with the specific event arg type.
    args: Log_named_stringEventArgs  # type: ignore[override]

    __name__: str = "log_named_string"


@dataclass(kw_only=True)
class Log_named_uintEvent(BaseEvent):
    """The event type for event log_named_uint"""

    @dataclass(kw_only=True)
    class Log_named_uintEventArgs(BaseEventArgs):
        """The args to the event log_named_uint"""

        key: str
        val: int

    # We redefine the args field with the specific event arg type.
    args: Log_named_uintEventArgs  # type: ignore[override]

    __name__: str = "log_named_uint"


@dataclass(kw_only=True)
class Log_stringEvent(BaseEvent):
    """The event type for event log_string"""

    @dataclass(kw_only=True)
    class Log_stringEventArgs(BaseEventArgs):
        """The args to the event log_string"""

        arg1: str

    # We redefine the args field with the specific event arg type.
    args: Log_stringEventArgs  # type: ignore[override]

    __name__: str = "log_string"


@dataclass(kw_only=True)
class Log_uintEvent(BaseEvent):
    """The event type for event log_uint"""

    @dataclass(kw_only=True)
    class Log_uintEventArgs(BaseEventArgs):
        """The args to the event log_uint"""

        arg1: int

    # We redefine the args field with the specific event arg type.
    args: Log_uintEventArgs  # type: ignore[override]

    __name__: str = "log_uint"


@dataclass(kw_only=True)
class LogsEvent(BaseEvent):
    """The event type for event logs"""

    @dataclass(kw_only=True)
    class LogsEventArgs(BaseEventArgs):
        """The args to the event logs"""

        arg1: bytes

    # We redefine the args field with the specific event arg type.
    args: LogsEventArgs  # type: ignore[override]

    __name__: str = "logs"


WhaleBalanceExceededError = ErrorInfo(
    inputs=[],
    name="WhaleBalanceExceeded",
    selector="0xc4649d28",
    signature="WhaleBalanceExceeded()",
)

WhaleIsContractError = ErrorInfo(
    inputs=[],
    name="WhaleIsContract",
    selector="0x98d85a67",
    signature="WhaleIsContract()",
)
