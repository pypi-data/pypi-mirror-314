"""A web3.py Contract class for the Lib contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

lib_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "eq",
            "inputs": [
                {"name": "b1", "type": "string", "internalType": "string"},
                {"name": "b2", "type": "string", "internalType": "string"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "eq",
            "inputs": [
                {
                    "name": "b1",
                    "type": "address[]",
                    "internalType": "address[]",
                },
                {
                    "name": "b2",
                    "type": "address[]",
                    "internalType": "address[]",
                },
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "eq",
            "inputs": [
                {"name": "b1", "type": "bytes", "internalType": "bytes"},
                {"name": "b2", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "neq",
            "inputs": [
                {"name": "b1", "type": "bytes", "internalType": "bytes"},
                {"name": "b2", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "pure",
        },
    ],
)


class LibContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the Lib contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class LibEqContractFunction0(PypechainContractFunction):
    """ContractFunction for the eq(str,str) method."""

    _function_name = "eq"
    _type_signature = expand_struct_type_str(tuple(["str", "str"]), structs)
    _error_class = LibContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class LibEqContractFunction1(PypechainContractFunction):
    """ContractFunction for the eq(list[str],list[str]) method."""

    _function_name = "eq"
    _type_signature = expand_struct_type_str(
        tuple(["list[str]", "list[str]"]), structs
    )
    _error_class = LibContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class LibEqContractFunction2(PypechainContractFunction):
    """ContractFunction for the eq(bytes,bytes) method."""

    _function_name = "eq"
    _type_signature = expand_struct_type_str(tuple(["bytes", "bytes"]), structs)
    _error_class = LibContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class LibEqContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the eq method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "eq"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, b1: str, b2: str) -> LibEqContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, b1: list[str], b2: list[str]) -> LibEqContractFunction1:  # type: ignore
        ...

    @overload
    def __call__(self, b1: bytes, b2: bytes) -> LibEqContractFunction2:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> LibEqContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            LibEqContractFunction0._type_signature: LibEqContractFunction0,
            LibEqContractFunction1._type_signature: LibEqContractFunction1,
            LibEqContractFunction2._type_signature: LibEqContractFunction2,
        }
        return out


class LibNeqContractFunction0(PypechainContractFunction):
    """ContractFunction for the neq(bytes,bytes) method."""

    _function_name = "neq"
    _type_signature = expand_struct_type_str(tuple(["bytes", "bytes"]), structs)
    _error_class = LibContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class LibNeqContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the neq method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "neq"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, b1: bytes, b2: bytes) -> LibNeqContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> LibNeqContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            LibNeqContractFunction0._type_signature: LibNeqContractFunction0,
        }
        return out


class LibContractFunctions(ContractFunctions):
    """ContractFunctions for the Lib contract."""

    eq: LibEqContractFunction

    neq: LibNeqContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.eq = LibEqContractFunction.factory(
            "eq",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="eq",
        )
        self.neq = LibNeqContractFunction.factory(
            "neq",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="neq",
        )


class LibContract(Contract):
    """A web3.py Contract class for the Lib contract."""

    abi: ABI = lib_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x61045d610035600b8282823980515f1a60731461002957634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe7300000000000000000000000000000000000000003014608060405260043610610055575f3560e01c806321a4964214610059578063a63c847814610080578063cdb1684014610059578063d37a20ba14610093575b5f80fd5b61006c610067366004610265565b6100a6565b604051901515815260200160405180910390f35b61006c61008e366004610356565b61010a565b61006c6100a1366004610265565b61014f565b5f815183511480156101035750816040516020016100c491906103ce565b60405160208183030381529060405280519060200120836040516020016100eb91906103ce565b60405160208183030381529060405280519060200120145b9392505050565b5f8151835114801561010357508160405160200161012891906103e9565b60405160208183030381529060405280519060200120836040516020016100eb91906103e9565b5f8151835114158061010357508160405160200161016d91906103ce565b604051602081830303815290604052805190602001208360405160200161019491906103ce565b604051602081830303815290604052805190602001201415905092915050565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f1916810167ffffffffffffffff811182821017156101f1576101f16101b4565b604052919050565b5f82601f830112610208575f80fd5b813567ffffffffffffffff811115610222576102226101b4565b610235601f8201601f19166020016101c8565b818152846020838601011115610249575f80fd5b816020850160208301375f918101602001919091529392505050565b5f8060408385031215610276575f80fd5b823567ffffffffffffffff8082111561028d575f80fd5b610299868387016101f9565b935060208501359150808211156102ae575f80fd5b506102bb858286016101f9565b9150509250929050565b5f82601f8301126102d4575f80fd5b8135602067ffffffffffffffff8211156102f0576102f06101b4565b8160051b6102ff8282016101c8565b9283528481018201928281019087851115610318575f80fd5b83870192505b8483101561034b5782356001600160a01b038116811461033c575f80fd5b8252918301919083019061031e565b979650505050505050565b5f8060408385031215610367575f80fd5b823567ffffffffffffffff8082111561037e575f80fd5b61038a868387016102c5565b9350602085013591508082111561039f575f80fd5b506102bb858286016102c5565b5f5b838110156103c65781810151838201526020016103ae565b50505f910152565b5f82516103df8184602087016103ac565b9190910192915050565b81515f9082906020808601845b8381101561041b5781516001600160a01b0316855293820193908201906001016103f6565b5092969550505050505056fea26469706673582212208c6bbbb391b7aafbe1f455b672a5b96d3b8ae0604d763b40b451089f19e6f8f464736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = LibContractFunctions(lib_abi, self.w3, address)  # type: ignore

    functions: LibContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = LibContractFunctions(lib_abi, w3, None)

        return contract
