"""Dataclasses for all structs in the IUniV3Zap contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import ErrorInfo

from ..ISwapRouter import ISwapRouterTypes as ISwapRouter


@dataclass
class ZapInOptions:
    """ZapInOptions struct."""

    swapParams: ISwapRouter.ExactInputParams
    sourceAsset: str
    sourceAmount: int
    shouldWrap: bool
    isRebasing: bool


InvalidInputTokenError = ErrorInfo(
    inputs=[],
    name="InvalidInputToken",
    selector="0x2df9739b",
    signature="InvalidInputToken()",
)

InvalidOutputTokenError = ErrorInfo(
    inputs=[],
    name="InvalidOutputToken",
    selector="0x06202020",
    signature="InvalidOutputToken()",
)

InvalidRecipientError = ErrorInfo(
    inputs=[],
    name="InvalidRecipient",
    selector="0x9c8d2cd2",
    signature="InvalidRecipient()",
)

InvalidSourceAmountError = ErrorInfo(
    inputs=[],
    name="InvalidSourceAmount",
    selector="0x97e0deb1",
    signature="InvalidSourceAmount()",
)

InvalidSourceAssetError = ErrorInfo(
    inputs=[],
    name="InvalidSourceAsset",
    selector="0x005605b7",
    signature="InvalidSourceAsset()",
)

InvalidSwapError = ErrorInfo(
    inputs=[],
    name="InvalidSwap",
    selector="0x11157667",
    signature="InvalidSwap()",
)

InvalidTransferError = ErrorInfo(
    inputs=[],
    name="InvalidTransfer",
    selector="0x2f352531",
    signature="InvalidTransfer()",
)

NotPayableError = ErrorInfo(
    inputs=[],
    name="NotPayable",
    selector="0x1574f9f3",
    signature="NotPayable()",
)

ShouldWrapAssetsError = ErrorInfo(
    inputs=[],
    name="ShouldWrapAssets",
    selector="0x7e4e2a42",
    signature="ShouldWrapAssets()",
)

TransferFailedError = ErrorInfo(
    inputs=[],
    name="TransferFailed",
    selector="0x90b8ec18",
    signature="TransferFailed()",
)
