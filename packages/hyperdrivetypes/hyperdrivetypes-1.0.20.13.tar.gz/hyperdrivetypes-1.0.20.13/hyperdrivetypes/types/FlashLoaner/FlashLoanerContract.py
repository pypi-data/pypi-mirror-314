"""A web3.py Contract class for the FlashLoaner contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

flashloaner_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "flashLoan",
            "inputs": [
                {
                    "name": "_token",
                    "type": "address",
                    "internalType": "contract ERC20",
                },
                {
                    "name": "_assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
    ],
)


class FlashLoanerAddressEmptyCodeContractError(PypechainBaseError):
    """ContractError for AddressEmptyCode."""

    # Error name
    name: str = "AddressEmptyCode"
    # 4 byte error selector
    selector: str = "0x9996b315"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressEmptyCode(address)"
    # Error input types
    abi: ABI = flashloaner_abi


class FlashLoanerAddressInsufficientBalanceContractError(PypechainBaseError):
    """ContractError for AddressInsufficientBalance."""

    # Error name
    name: str = "AddressInsufficientBalance"
    # 4 byte error selector
    selector: str = "0xcd786059"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressInsufficientBalance(address)"
    # Error input types
    abi: ABI = flashloaner_abi


class FlashLoanerFailedInnerCallContractError(PypechainBaseError):
    """ContractError for FailedInnerCall."""

    # Error name
    name: str = "FailedInnerCall"
    # 4 byte error selector
    selector: str = "0x1425ea42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "FailedInnerCall()"
    # Error input types
    abi: ABI = flashloaner_abi


class FlashLoanerSafeERC20FailedOperationContractError(PypechainBaseError):
    """ContractError for SafeERC20FailedOperation."""

    # Error name
    name: str = "SafeERC20FailedOperation"
    # 4 byte error selector
    selector: str = "0x5274afe7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SafeERC20FailedOperation(address)"
    # Error input types
    abi: ABI = flashloaner_abi


class FlashLoanerContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the FlashLoaner contract."""

    AddressEmptyCode: FlashLoanerAddressEmptyCodeContractError

    AddressInsufficientBalance: (
        FlashLoanerAddressInsufficientBalanceContractError
    )

    FailedInnerCall: FlashLoanerFailedInnerCallContractError

    SafeERC20FailedOperation: FlashLoanerSafeERC20FailedOperationContractError

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = FlashLoanerAddressEmptyCodeContractError()
        self.AddressInsufficientBalance = (
            FlashLoanerAddressInsufficientBalanceContractError()
        )
        self.FailedInnerCall = FlashLoanerFailedInnerCallContractError()
        self.SafeERC20FailedOperation = (
            FlashLoanerSafeERC20FailedOperationContractError()
        )

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.FailedInnerCall,
            self.SafeERC20FailedOperation,
        ]


class FlashLoanerFlashLoanContractFunction0(PypechainContractFunction):
    """ContractFunction for the flashLoan(str,int,bytes) method."""

    _function_name = "flashLoan"
    _type_signature = expand_struct_type_str(
        tuple(["str", "int", "bytes"]), structs
    )
    _error_class = FlashLoanerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class FlashLoanerFlashLoanContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the flashLoan method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "flashLoan"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _token: str, _assets: int, _data: bytes) -> FlashLoanerFlashLoanContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> FlashLoanerFlashLoanContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            FlashLoanerFlashLoanContractFunction0._type_signature: FlashLoanerFlashLoanContractFunction0,
        }
        return out


class FlashLoanerContractFunctions(ContractFunctions):
    """ContractFunctions for the FlashLoaner contract."""

    flashLoan: FlashLoanerFlashLoanContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.flashLoan = FlashLoanerFlashLoanContractFunction.factory(
            "flashLoan",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="flashLoan",
        )


class FlashLoanerContract(Contract):
    """A web3.py Contract class for the FlashLoaner contract."""

    abi: ABI = flashloaner_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561000f575f80fd5b5061043e8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063e0232b421461002d575b5f80fd5b61004061003b3660046102fb565b610042565b005b6100566001600160a01b03851633856100c6565b6040516318fab83960e11b815233906331f570729061007d90869086908690600401610388565b5f604051808303815f87803b158015610094575f80fd5b505af11580156100a6573d5f803e3d5ffd5b506100c0925050506001600160a01b03851633308661012a565b50505050565b6040516001600160a01b0383811660248301526044820183905261012591859182169063a9059cbb906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050610163565b505050565b6040516001600160a01b0384811660248301528381166044830152606482018390526100c09186918216906323b872dd906084016100f3565b5f6101776001600160a01b038416836101c9565b905080515f1415801561019b57508080602001905181019061019991906103bd565b155b1561012557604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b60606101d683835f6101dd565b9392505050565b6060814710156102025760405163cd78605960e01b81523060048201526024016101c0565b5f80856001600160a01b0316848660405161021d91906103dc565b5f6040518083038185875af1925050503d805f8114610257576040519150601f19603f3d011682016040523d82523d5f602084013e61025c565b606091505b509150915061026c868383610276565b9695505050505050565b60608261028b57610286826102d2565b6101d6565b81511580156102a257506001600160a01b0384163b155b156102cb57604051639996b31560e01b81526001600160a01b03851660048201526024016101c0565b50806101d6565b8051156102e25780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b5f805f806060858703121561030e575f80fd5b84356001600160a01b0381168114610324575f80fd5b935060208501359250604085013567ffffffffffffffff80821115610347575f80fd5b818701915087601f83011261035a575f80fd5b813581811115610368575f80fd5b886020828501011115610379575f80fd5b95989497505060200194505050565b83815260406020820152816040820152818360608301375f818301606090810191909152601f909201601f1916010192915050565b5f602082840312156103cd575f80fd5b815180151581146101d6575f80fd5b5f82515f5b818110156103fb57602081860181015185830152016103e1565b505f92019182525091905056fea2646970667358221220041608546b10f191ff0fece0c416b65d646feffefa6d740506f0de1b1bbbb03764736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = FlashLoanerContractFunctions(flashloaner_abi, self.w3, address)  # type: ignore

        self.errors = FlashLoanerContractErrors()

    errors: FlashLoanerContractErrors = FlashLoanerContractErrors()

    functions: FlashLoanerContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = FlashLoanerContractFunctions(
            flashloaner_abi, w3, None
        )
        contract.errors = FlashLoanerContractErrors()

        return contract
