"""A web3.py Contract class for the MockSafeCast contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

mocksafecast_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "toInt128",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "y", "type": "int128", "internalType": "int128"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toInt128",
            "inputs": [
                {"name": "x", "type": "int256", "internalType": "int256"}
            ],
            "outputs": [
                {"name": "y", "type": "int128", "internalType": "int128"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toInt256",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "y", "type": "int256", "internalType": "int256"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toUint112",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "y", "type": "uint112", "internalType": "uint112"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toUint128",
            "inputs": [
                {"name": "x", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "y", "type": "uint128", "internalType": "uint128"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "toUint256",
            "inputs": [
                {"name": "x", "type": "int256", "internalType": "int256"}
            ],
            "outputs": [
                {"name": "y", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {"type": "error", "name": "UnsafeCastToInt128", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint112", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint128", "inputs": []},
        {"type": "error", "name": "UnsafeCastToUint256", "inputs": []},
    ],
)


class MockSafeCastUnsafeCastToInt128ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToInt128."""

    # Error name
    name: str = "UnsafeCastToInt128"
    # 4 byte error selector
    selector: str = "0xa5353be5"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt128()"
    # Error input types
    abi: ABI = mocksafecast_abi


class MockSafeCastUnsafeCastToInt256ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = mocksafecast_abi


class MockSafeCastUnsafeCastToUint112ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToUint112."""

    # Error name
    name: str = "UnsafeCastToUint112"
    # 4 byte error selector
    selector: str = "0x10d62a2e"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToUint112()"
    # Error input types
    abi: ABI = mocksafecast_abi


class MockSafeCastUnsafeCastToUint128ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToUint128."""

    # Error name
    name: str = "UnsafeCastToUint128"
    # 4 byte error selector
    selector: str = "0x1e15f2a2"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToUint128()"
    # Error input types
    abi: ABI = mocksafecast_abi


class MockSafeCastUnsafeCastToUint256ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToUint256."""

    # Error name
    name: str = "UnsafeCastToUint256"
    # 4 byte error selector
    selector: str = "0xe3a26e20"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToUint256()"
    # Error input types
    abi: ABI = mocksafecast_abi


class MockSafeCastContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the MockSafeCast contract."""

    UnsafeCastToInt128: MockSafeCastUnsafeCastToInt128ContractError

    UnsafeCastToInt256: MockSafeCastUnsafeCastToInt256ContractError

    UnsafeCastToUint112: MockSafeCastUnsafeCastToUint112ContractError

    UnsafeCastToUint128: MockSafeCastUnsafeCastToUint128ContractError

    UnsafeCastToUint256: MockSafeCastUnsafeCastToUint256ContractError

    def __init__(
        self,
    ) -> None:
        self.UnsafeCastToInt128 = MockSafeCastUnsafeCastToInt128ContractError()
        self.UnsafeCastToInt256 = MockSafeCastUnsafeCastToInt256ContractError()
        self.UnsafeCastToUint112 = (
            MockSafeCastUnsafeCastToUint112ContractError()
        )
        self.UnsafeCastToUint128 = (
            MockSafeCastUnsafeCastToUint128ContractError()
        )
        self.UnsafeCastToUint256 = (
            MockSafeCastUnsafeCastToUint256ContractError()
        )

        self._all = [
            self.UnsafeCastToInt128,
            self.UnsafeCastToInt256,
            self.UnsafeCastToUint112,
            self.UnsafeCastToUint128,
            self.UnsafeCastToUint256,
        ]


class MockSafeCastToInt128ContractFunction0(PypechainContractFunction):
    """ContractFunction for the toInt128(int) method."""

    _function_name = "toInt128"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockSafeCastContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToInt128ContractFunction1(PypechainContractFunction):
    """ContractFunction for the toInt128(int) method."""

    _function_name = "toInt128"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockSafeCastContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToInt128ContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the toInt128 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "toInt128"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, x: int) -> MockSafeCastToInt128ContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, x: int) -> MockSafeCastToInt128ContractFunction1:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockSafeCastToInt128ContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockSafeCastToInt128ContractFunction0._type_signature: MockSafeCastToInt128ContractFunction0,
            MockSafeCastToInt128ContractFunction1._type_signature: MockSafeCastToInt128ContractFunction1,
        }
        return out


class MockSafeCastToInt256ContractFunction0(PypechainContractFunction):
    """ContractFunction for the toInt256(int) method."""

    _function_name = "toInt256"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockSafeCastContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToInt256ContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the toInt256 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "toInt256"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, x: int) -> MockSafeCastToInt256ContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockSafeCastToInt256ContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockSafeCastToInt256ContractFunction0._type_signature: MockSafeCastToInt256ContractFunction0,
        }
        return out


class MockSafeCastToUint112ContractFunction0(PypechainContractFunction):
    """ContractFunction for the toUint112(int) method."""

    _function_name = "toUint112"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockSafeCastContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToUint112ContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the toUint112 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "toUint112"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, x: int) -> MockSafeCastToUint112ContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockSafeCastToUint112ContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockSafeCastToUint112ContractFunction0._type_signature: MockSafeCastToUint112ContractFunction0,
        }
        return out


class MockSafeCastToUint128ContractFunction0(PypechainContractFunction):
    """ContractFunction for the toUint128(int) method."""

    _function_name = "toUint128"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockSafeCastContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToUint128ContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the toUint128 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "toUint128"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, x: int) -> MockSafeCastToUint128ContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockSafeCastToUint128ContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockSafeCastToUint128ContractFunction0._type_signature: MockSafeCastToUint128ContractFunction0,
        }
        return out


class MockSafeCastToUint256ContractFunction0(PypechainContractFunction):
    """ContractFunction for the toUint256(int) method."""

    _function_name = "toUint256"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockSafeCastContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockSafeCastToUint256ContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the toUint256 method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "toUint256"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, x: int) -> MockSafeCastToUint256ContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockSafeCastToUint256ContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockSafeCastToUint256ContractFunction0._type_signature: MockSafeCastToUint256ContractFunction0,
        }
        return out


class MockSafeCastContractFunctions(ContractFunctions):
    """ContractFunctions for the MockSafeCast contract."""

    toInt128: MockSafeCastToInt128ContractFunction

    toInt256: MockSafeCastToInt256ContractFunction

    toUint112: MockSafeCastToUint112ContractFunction

    toUint128: MockSafeCastToUint128ContractFunction

    toUint256: MockSafeCastToUint256ContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.toInt128 = MockSafeCastToInt128ContractFunction.factory(
            "toInt128",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toInt128",
        )
        self.toInt256 = MockSafeCastToInt256ContractFunction.factory(
            "toInt256",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toInt256",
        )
        self.toUint112 = MockSafeCastToUint112ContractFunction.factory(
            "toUint112",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toUint112",
        )
        self.toUint128 = MockSafeCastToUint128ContractFunction.factory(
            "toUint128",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toUint128",
        )
        self.toUint256 = MockSafeCastToUint256ContractFunction.factory(
            "toUint256",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="toUint256",
        )


class MockSafeCastContract(Contract):
    """A web3.py Contract class for the MockSafeCast contract."""

    abi: ABI = mocksafecast_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561000f575f80fd5b506102c98061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610060575f3560e01c80630f2422d11461006457806341d2aa641461008f578063809fdd33146100ba578063dd2a0316146100e5578063dfbe873b146100f8578063fdcf791b14610119575b5f80fd5b61007761007236600461027c565b61012c565b604051600f9190910b81526020015b60405180910390f35b6100a261009d36600461027c565b61013c565b6040516001600160701b039091168152602001610086565b6100cd6100c836600461027c565b610146565b6040516001600160801b039091168152602001610086565b6100776100f336600461027c565b610150565b61010b61010636600461027c565b61015a565b604051908152602001610086565b61010b61012736600461027c565b610164565b5f6101368261016e565b92915050565b5f6101368261019b565b5f610136826101c4565b5f610136826101ed565b5f61013682610231565b5f6101368261025a565b5f60016001607f1b038211156101975760405163a5353be560e01b815260040160405180910390fd5b5090565b5f6001600160701b038211156101975760405163086b151760e11b815260040160405180910390fd5b5f6001600160801b0382111561019757604051630f0af95160e11b815260040160405180910390fd5b5f6f7fffffffffffffffffffffffffffffff19821280610213575060016001607f1b0382135b156101975760405163a5353be560e01b815260040160405180910390fd5b5f6001600160ff1b038211156101975760405163396ea70160e11b815260040160405180910390fd5b5f808212156101975760405163071d137160e51b815260040160405180910390fd5b5f6020828403121561028c575f80fd5b503591905056fea26469706673582212206a154817b7a45adbfa43575335f59c08f65793d0898c435b382d628f4dac85e464736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MockSafeCastContractFunctions(mocksafecast_abi, self.w3, address)  # type: ignore

        self.errors = MockSafeCastContractErrors()

    errors: MockSafeCastContractErrors = MockSafeCastContractErrors()

    functions: MockSafeCastContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MockSafeCastContractFunctions(
            mocksafecast_abi, w3, None
        )
        contract.errors = MockSafeCastContractErrors()

        return contract
