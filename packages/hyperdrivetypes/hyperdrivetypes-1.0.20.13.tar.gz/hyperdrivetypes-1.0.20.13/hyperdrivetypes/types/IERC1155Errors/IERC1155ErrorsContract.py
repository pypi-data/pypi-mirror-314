"""A web3.py Contract class for the IERC1155Errors contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Type, cast

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import PypechainBaseContractErrors, PypechainBaseError
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)

structs = {}

ierc1155errors_abi: ABI = cast(
    ABI,
    [
        {
            "type": "error",
            "name": "ERC1155InsufficientBalance",
            "inputs": [
                {
                    "name": "sender",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "balance",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "needed",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "tokenId",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
        },
        {
            "type": "error",
            "name": "ERC1155InvalidApprover",
            "inputs": [
                {
                    "name": "approver",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {
            "type": "error",
            "name": "ERC1155InvalidArrayLength",
            "inputs": [
                {
                    "name": "idsLength",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "valuesLength",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
        },
        {
            "type": "error",
            "name": "ERC1155InvalidOperator",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {
            "type": "error",
            "name": "ERC1155InvalidReceiver",
            "inputs": [
                {
                    "name": "receiver",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {
            "type": "error",
            "name": "ERC1155InvalidSender",
            "inputs": [
                {"name": "sender", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "ERC1155MissingApprovalForAll",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "owner", "type": "address", "internalType": "address"},
            ],
        },
    ],
)


class IERC1155ErrorsERC1155InsufficientBalanceContractError(PypechainBaseError):
    """ContractError for ERC1155InsufficientBalance."""

    # Error name
    name: str = "ERC1155InsufficientBalance"
    # 4 byte error selector
    selector: str = "0x03dee4c5"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = (
        "ERC1155InsufficientBalance(address,uint256,uint256,uint256)"
    )
    # Error input types
    abi: ABI = ierc1155errors_abi


class IERC1155ErrorsERC1155InvalidApproverContractError(PypechainBaseError):
    """ContractError for ERC1155InvalidApprover."""

    # Error name
    name: str = "ERC1155InvalidApprover"
    # 4 byte error selector
    selector: str = "0x3e31884e"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ERC1155InvalidApprover(address)"
    # Error input types
    abi: ABI = ierc1155errors_abi


class IERC1155ErrorsERC1155InvalidArrayLengthContractError(PypechainBaseError):
    """ContractError for ERC1155InvalidArrayLength."""

    # Error name
    name: str = "ERC1155InvalidArrayLength"
    # 4 byte error selector
    selector: str = "0x5b059991"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ERC1155InvalidArrayLength(uint256,uint256)"
    # Error input types
    abi: ABI = ierc1155errors_abi


class IERC1155ErrorsERC1155InvalidOperatorContractError(PypechainBaseError):
    """ContractError for ERC1155InvalidOperator."""

    # Error name
    name: str = "ERC1155InvalidOperator"
    # 4 byte error selector
    selector: str = "0xced3e100"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ERC1155InvalidOperator(address)"
    # Error input types
    abi: ABI = ierc1155errors_abi


class IERC1155ErrorsERC1155InvalidReceiverContractError(PypechainBaseError):
    """ContractError for ERC1155InvalidReceiver."""

    # Error name
    name: str = "ERC1155InvalidReceiver"
    # 4 byte error selector
    selector: str = "0x57f447ce"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ERC1155InvalidReceiver(address)"
    # Error input types
    abi: ABI = ierc1155errors_abi


class IERC1155ErrorsERC1155InvalidSenderContractError(PypechainBaseError):
    """ContractError for ERC1155InvalidSender."""

    # Error name
    name: str = "ERC1155InvalidSender"
    # 4 byte error selector
    selector: str = "0x01a83514"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ERC1155InvalidSender(address)"
    # Error input types
    abi: ABI = ierc1155errors_abi


class IERC1155ErrorsERC1155MissingApprovalForAllContractError(
    PypechainBaseError
):
    """ContractError for ERC1155MissingApprovalForAll."""

    # Error name
    name: str = "ERC1155MissingApprovalForAll"
    # 4 byte error selector
    selector: str = "0xe237d922"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ERC1155MissingApprovalForAll(address,address)"
    # Error input types
    abi: ABI = ierc1155errors_abi


class IERC1155ErrorsContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the IERC1155Errors contract."""

    ERC1155InsufficientBalance: (
        IERC1155ErrorsERC1155InsufficientBalanceContractError
    )

    ERC1155InvalidApprover: IERC1155ErrorsERC1155InvalidApproverContractError

    ERC1155InvalidArrayLength: (
        IERC1155ErrorsERC1155InvalidArrayLengthContractError
    )

    ERC1155InvalidOperator: IERC1155ErrorsERC1155InvalidOperatorContractError

    ERC1155InvalidReceiver: IERC1155ErrorsERC1155InvalidReceiverContractError

    ERC1155InvalidSender: IERC1155ErrorsERC1155InvalidSenderContractError

    ERC1155MissingApprovalForAll: (
        IERC1155ErrorsERC1155MissingApprovalForAllContractError
    )

    def __init__(
        self,
    ) -> None:
        self.ERC1155InsufficientBalance = (
            IERC1155ErrorsERC1155InsufficientBalanceContractError()
        )
        self.ERC1155InvalidApprover = (
            IERC1155ErrorsERC1155InvalidApproverContractError()
        )
        self.ERC1155InvalidArrayLength = (
            IERC1155ErrorsERC1155InvalidArrayLengthContractError()
        )
        self.ERC1155InvalidOperator = (
            IERC1155ErrorsERC1155InvalidOperatorContractError()
        )
        self.ERC1155InvalidReceiver = (
            IERC1155ErrorsERC1155InvalidReceiverContractError()
        )
        self.ERC1155InvalidSender = (
            IERC1155ErrorsERC1155InvalidSenderContractError()
        )
        self.ERC1155MissingApprovalForAll = (
            IERC1155ErrorsERC1155MissingApprovalForAllContractError()
        )

        self._all = [
            self.ERC1155InsufficientBalance,
            self.ERC1155InvalidApprover,
            self.ERC1155InvalidArrayLength,
            self.ERC1155InvalidOperator,
            self.ERC1155InvalidReceiver,
            self.ERC1155InvalidSender,
            self.ERC1155MissingApprovalForAll,
        ]


class IERC1155ErrorsContractFunctions(ContractFunctions):
    """ContractFunctions for the IERC1155Errors contract."""

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)


class IERC1155ErrorsContract(Contract):
    """A web3.py Contract class for the IERC1155Errors contract."""

    abi: ABI = ierc1155errors_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IERC1155ErrorsContractFunctions(ierc1155errors_abi, self.w3, address)  # type: ignore

        self.errors = IERC1155ErrorsContractErrors()

    errors: IERC1155ErrorsContractErrors = IERC1155ErrorsContractErrors()

    functions: IERC1155ErrorsContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IERC1155ErrorsContractFunctions(
            ierc1155errors_abi, w3, None
        )
        contract.errors = IERC1155ErrorsContractErrors()

        return contract
