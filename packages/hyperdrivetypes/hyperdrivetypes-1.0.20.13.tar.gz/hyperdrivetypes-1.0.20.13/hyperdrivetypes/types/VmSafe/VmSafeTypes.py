"""Dataclasses for all structs in the VmSafe contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from ..VmSafe import VmSafeTypes as VmSafe


@dataclass
class Wallet:
    """Wallet struct."""

    addr: str
    publicKeyX: int
    publicKeyY: int
    privateKey: int


@dataclass
class EthGetLogs:
    """EthGetLogs struct."""

    emitter: str
    topics: list[bytes]
    data: bytes
    blockHash: bytes
    blockNumber: int
    transactionHash: bytes
    transactionIndex: int
    logIndex: int
    removed: bool


@dataclass
class FsMetadata:
    """FsMetadata struct."""

    isDir: bool
    isSymlink: bool
    length: int
    readOnly: bool
    modified: int
    accessed: int
    created: int


@dataclass
class Log:
    """Log struct."""

    topics: list[bytes]
    data: bytes
    emitter: str


@dataclass
class DirEntry:
    """DirEntry struct."""

    errorMessage: str
    path: str
    depth: int
    isDir: bool
    isSymlink: bool


@dataclass
class Rpc:
    """Rpc struct."""

    key: str
    url: str


@dataclass
class ChainInfo:
    """ChainInfo struct."""

    forkId: int
    chainId: int


@dataclass
class StorageAccess:
    """StorageAccess struct."""

    account: str
    slot: bytes
    isWrite: bool
    previousValue: bytes
    newValue: bytes
    reverted: bool


@dataclass
class AccountAccess:
    """AccountAccess struct."""

    chainInfo: VmSafe.ChainInfo
    kind: int
    account: str
    accessor: str
    initialized: bool
    oldBalance: int
    newBalance: int
    deployedCode: bytes
    value: int
    data: bytes
    reverted: bool
    storageAccesses: list[VmSafe.StorageAccess]
    depth: int


@dataclass
class FfiResult:
    """FfiResult struct."""

    exitCode: int
    stdout: bytes
    stderr: bytes
