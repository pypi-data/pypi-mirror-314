"""A web3.py Contract class for the HyperdriveFactory contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..HyperdriveFactory import HyperdriveFactoryTypes as HyperdriveFactory
from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from .HyperdriveFactoryTypes import (
    CheckpointDurationResolutionUpdatedEvent,
    CheckpointRewarderUpdatedEvent,
    DefaultPausersUpdatedEvent,
    DeployedEvent,
    DeployerCoordinatorAddedEvent,
    DeployerCoordinatorManagerUpdatedEvent,
    DeployerCoordinatorRemovedEvent,
    FeeCollectorUpdatedEvent,
    GovernanceUpdatedEvent,
    HyperdriveGovernanceUpdatedEvent,
    LinkerCodeHashUpdatedEvent,
    LinkerFactoryUpdatedEvent,
    MaxCheckpointDurationUpdatedEvent,
    MaxCircuitBreakerDeltaUpdatedEvent,
    MaxFeesUpdatedEvent,
    MaxFixedAPRUpdatedEvent,
    MaxPositionDurationUpdatedEvent,
    MaxTimeStretchAPRUpdatedEvent,
    MinCheckpointDurationUpdatedEvent,
    MinCircuitBreakerDeltaUpdatedEvent,
    MinFeesUpdatedEvent,
    MinFixedAPRUpdatedEvent,
    MinPositionDurationUpdatedEvent,
    MinTimeStretchAPRUpdatedEvent,
    SweepCollectorUpdatedEvent,
)

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "HyperdriveFactory.FactoryConfig": HyperdriveFactory.FactoryConfig,
    "IHyperdrive.PoolDeployConfig": IHyperdrive.PoolDeployConfig,
    "IHyperdrive.Options": IHyperdrive.Options,
}

hyperdrivefactory_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {
                    "name": "_factoryConfig",
                    "type": "tuple",
                    "internalType": "struct HyperdriveFactory.FactoryConfig",
                    "components": [
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deployerCoordinatorManager",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "hyperdriveGovernance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "defaultPausers",
                            "type": "address[]",
                            "internalType": "address[]",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointDurationResolution",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minCheckpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "maxCheckpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minPositionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "maxPositionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minCircuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "maxCircuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minFixedAPR",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "maxFixedAPR",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minTimeStretchAPR",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "maxTimeStretchAPR",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minFees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "maxFees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                    ],
                },
                {"name": "_name", "type": "string", "internalType": "string"},
            ],
            "stateMutability": "nonpayable",
        },
        {"type": "receive", "stateMutability": "payable"},
        {
            "type": "function",
            "name": "_instancesToDeployerCoordinators",
            "inputs": [
                {
                    "name": "instance",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [
                {
                    "name": "deployCoordinator",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "addDeployerCoordinator",
            "inputs": [
                {
                    "name": "_deployerCoordinator",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "checkpointDurationResolution",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "checkpointRewarder",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "defaultPausers",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address[]", "internalType": "address[]"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "deployAndInitialize",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "_deployerCoordinator",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_contribution",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_fixedAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_timeStretchAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "deployTarget",
            "inputs": [
                {
                    "name": "_deploymentId",
                    "type": "bytes32",
                    "internalType": "bytes32",
                },
                {
                    "name": "_deployerCoordinator",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_fixedAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_timeStretchAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_targetIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "deployerCoordinatorManager",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "feeCollector",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployerCoordinatorAtIndex",
            "inputs": [
                {"name": "_index", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployerCoordinatorByInstances",
            "inputs": [
                {
                    "name": "__instances",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "outputs": [
                {
                    "name": "coordinators",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getDeployerCoordinatorsInRange",
            "inputs": [
                {
                    "name": "_startIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_endIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {
                    "name": "range",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstanceAtIndex",
            "inputs": [
                {"name": "_index", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getInstancesInRange",
            "inputs": [
                {
                    "name": "_startIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_endIndex",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {
                    "name": "range",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfDeployerCoordinators",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "getNumberOfInstances",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "governance",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "hyperdriveGovernance",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isDeployerCoordinator",
            "inputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isInstance",
            "inputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerCodeHash",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "linkerFactory",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxCheckpointDuration",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxCircuitBreakerDelta",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxFees",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {
                            "name": "curve",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "flat",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceLP",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceZombie",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxFixedAPR",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxPositionDuration",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "maxTimeStretchAPR",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minCheckpointDuration",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minCircuitBreakerDelta",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minFees",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {
                            "name": "curve",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "flat",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceLP",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceZombie",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minFixedAPR",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minPositionDuration",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "minTimeStretchAPR",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "removeDeployerCoordinator",
            "inputs": [
                {
                    "name": "_deployerCoordinator",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_index",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "sweepCollector",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "updateCheckpointDurationResolution",
            "inputs": [
                {
                    "name": "_checkpointDurationResolution",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateCheckpointRewarder",
            "inputs": [
                {
                    "name": "_checkpointRewarder",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateDefaultPausers",
            "inputs": [
                {
                    "name": "_defaultPausers_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateDeployerCoordinatorManager",
            "inputs": [
                {
                    "name": "_deployerCoordinatorManager",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateFeeCollector",
            "inputs": [
                {
                    "name": "_feeCollector",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateGovernance",
            "inputs": [
                {
                    "name": "_governance",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateHyperdriveGovernance",
            "inputs": [
                {
                    "name": "_hyperdriveGovernance",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerCodeHash",
            "inputs": [
                {
                    "name": "_linkerCodeHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateLinkerFactory",
            "inputs": [
                {
                    "name": "_linkerFactory",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxCheckpointDuration",
            "inputs": [
                {
                    "name": "_maxCheckpointDuration",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxCircuitBreakerDelta",
            "inputs": [
                {
                    "name": "_maxCircuitBreakerDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxFees",
            "inputs": [
                {
                    "name": "__maxFees",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {
                            "name": "curve",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "flat",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceLP",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceZombie",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxFixedAPR",
            "inputs": [
                {
                    "name": "_maxFixedAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxPositionDuration",
            "inputs": [
                {
                    "name": "_maxPositionDuration",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMaxTimeStretchAPR",
            "inputs": [
                {
                    "name": "_maxTimeStretchAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinCheckpointDuration",
            "inputs": [
                {
                    "name": "_minCheckpointDuration",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinCircuitBreakerDelta",
            "inputs": [
                {
                    "name": "_minCircuitBreakerDelta",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinFees",
            "inputs": [
                {
                    "name": "__minFees",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {
                            "name": "curve",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "flat",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceLP",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceZombie",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinFixedAPR",
            "inputs": [
                {
                    "name": "_minFixedAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinPositionDuration",
            "inputs": [
                {
                    "name": "_minPositionDuration",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateMinTimeStretchAPR",
            "inputs": [
                {
                    "name": "_minTimeStretchAPR",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "updateSweepCollector",
            "inputs": [
                {
                    "name": "_sweepCollector",
                    "type": "address",
                    "internalType": "address",
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "event",
            "name": "CheckpointDurationResolutionUpdated",
            "inputs": [
                {
                    "name": "newCheckpointDurationResolution",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CheckpointRewarderUpdated",
            "inputs": [
                {
                    "name": "newCheckpointRewarder",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DefaultPausersUpdated",
            "inputs": [
                {
                    "name": "newDefaultPausers",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "name",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorAdded",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorManagerUpdated",
            "inputs": [
                {
                    "name": "deployerCoordinatorManager",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorRemoved",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "FeeCollectorUpdated",
            "inputs": [
                {
                    "name": "newFeeCollector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "GovernanceUpdated",
            "inputs": [
                {
                    "name": "governance",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "HyperdriveGovernanceUpdated",
            "inputs": [
                {
                    "name": "hyperdriveGovernance",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerCodeHashUpdated",
            "inputs": [
                {
                    "name": "newLinkerCodeHash",
                    "type": "bytes32",
                    "indexed": True,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerFactoryUpdated",
            "inputs": [
                {
                    "name": "newLinkerFactory",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxCheckpointDurationUpdated",
            "inputs": [
                {
                    "name": "newMaxCheckpointDuration",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxCircuitBreakerDeltaUpdated",
            "inputs": [
                {
                    "name": "newMaxCircuitBreakerDelta",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxFeesUpdated",
            "inputs": [
                {
                    "name": "newMaxFees",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {
                            "name": "curve",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "flat",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceLP",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceZombie",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxFixedAPRUpdated",
            "inputs": [
                {
                    "name": "newMaxFixedAPR",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxPositionDurationUpdated",
            "inputs": [
                {
                    "name": "newMaxPositionDuration",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxTimeStretchAPRUpdated",
            "inputs": [
                {
                    "name": "newMaxTimeStretchAPR",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinCheckpointDurationUpdated",
            "inputs": [
                {
                    "name": "newMinCheckpointDuration",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinCircuitBreakerDeltaUpdated",
            "inputs": [
                {
                    "name": "newMinCircuitBreakerDelta",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinFeesUpdated",
            "inputs": [
                {
                    "name": "newMinFees",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {
                            "name": "curve",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "flat",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceLP",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceZombie",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinFixedAPRUpdated",
            "inputs": [
                {
                    "name": "newMinFixedAPR",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinPositionDurationUpdated",
            "inputs": [
                {
                    "name": "newMinPositionDuration",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinTimeStretchAPRUpdated",
            "inputs": [
                {
                    "name": "newMinTimeStretchAPR",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "SweepCollectorUpdated",
            "inputs": [
                {
                    "name": "newSweepCollector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "error",
            "name": "DeployerCoordinatorAlreadyAdded",
            "inputs": [],
        },
        {
            "type": "error",
            "name": "DeployerCoordinatorIndexMismatch",
            "inputs": [],
        },
        {"type": "error", "name": "DeployerCoordinatorNotAdded", "inputs": []},
        {"type": "error", "name": "EndIndexTooLarge", "inputs": []},
        {"type": "error", "name": "InvalidCheckpointDuration", "inputs": []},
        {
            "type": "error",
            "name": "InvalidCheckpointDurationResolution",
            "inputs": [],
        },
        {"type": "error", "name": "InvalidCircuitBreakerDelta", "inputs": []},
        {"type": "error", "name": "InvalidDeployConfig", "inputs": []},
        {"type": "error", "name": "InvalidDeployerCoordinator", "inputs": []},
        {"type": "error", "name": "InvalidFees", "inputs": []},
        {"type": "error", "name": "InvalidFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidIndexes", "inputs": []},
        {"type": "error", "name": "InvalidMaxCheckpointDuration", "inputs": []},
        {
            "type": "error",
            "name": "InvalidMaxCircuitBreakerDelta",
            "inputs": [],
        },
        {"type": "error", "name": "InvalidMaxFees", "inputs": []},
        {"type": "error", "name": "InvalidMaxFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidMaxPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidMaxTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "InvalidMinCheckpointDuration", "inputs": []},
        {
            "type": "error",
            "name": "InvalidMinCircuitBreakerDelta",
            "inputs": [],
        },
        {"type": "error", "name": "InvalidMinFees", "inputs": []},
        {"type": "error", "name": "InvalidMinFixedAPR", "inputs": []},
        {"type": "error", "name": "InvalidMinPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidMinTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "InvalidPositionDuration", "inputs": []},
        {"type": "error", "name": "InvalidTimeStretchAPR", "inputs": []},
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "ReceiveLocked", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
        {"type": "error", "name": "Unauthorized", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
    ],
)


class HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError(
    PypechainBaseError
):
    """ContractError for DeployerCoordinatorAlreadyAdded."""

    # Error name
    name: str = "DeployerCoordinatorAlreadyAdded"
    # 4 byte error selector
    selector: str = "0xbd34634f"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeployerCoordinatorAlreadyAdded()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError(
    PypechainBaseError
):
    """ContractError for DeployerCoordinatorIndexMismatch."""

    # Error name
    name: str = "DeployerCoordinatorIndexMismatch"
    # 4 byte error selector
    selector: str = "0x3c9c032c"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeployerCoordinatorIndexMismatch()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryDeployerCoordinatorNotAddedContractError(
    PypechainBaseError
):
    """ContractError for DeployerCoordinatorNotAdded."""

    # Error name
    name: str = "DeployerCoordinatorNotAdded"
    # 4 byte error selector
    selector: str = "0x4bf121ab"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "DeployerCoordinatorNotAdded()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryEndIndexTooLargeContractError(PypechainBaseError):
    """ContractError for EndIndexTooLarge."""

    # Error name
    name: str = "EndIndexTooLarge"
    # 4 byte error selector
    selector: str = "0xe0f7becb"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "EndIndexTooLarge()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidCheckpointDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidCheckpointDuration."""

    # Error name
    name: str = "InvalidCheckpointDuration"
    # 4 byte error selector
    selector: str = "0x5428734d"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidCheckpointDuration()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidCheckpointDurationResolutionContractError(
    PypechainBaseError
):
    """ContractError for InvalidCheckpointDurationResolution."""

    # Error name
    name: str = "InvalidCheckpointDurationResolution"
    # 4 byte error selector
    selector: str = "0x8dbae0a8"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidCheckpointDurationResolution()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidCircuitBreakerDeltaContractError(
    PypechainBaseError
):
    """ContractError for InvalidCircuitBreakerDelta."""

    # Error name
    name: str = "InvalidCircuitBreakerDelta"
    # 4 byte error selector
    selector: str = "0xef9bc65f"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidCircuitBreakerDelta()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidDeployConfigContractError(PypechainBaseError):
    """ContractError for InvalidDeployConfig."""

    # Error name
    name: str = "InvalidDeployConfig"
    # 4 byte error selector
    selector: str = "0xe8c02dd7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidDeployConfig()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidDeployerCoordinatorContractError(
    PypechainBaseError
):
    """ContractError for InvalidDeployerCoordinator."""

    # Error name
    name: str = "InvalidDeployerCoordinator"
    # 4 byte error selector
    selector: str = "0x6e623f0f"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidDeployerCoordinator()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidFeesContractError(PypechainBaseError):
    """ContractError for InvalidFees."""

    # Error name
    name: str = "InvalidFees"
    # 4 byte error selector
    selector: str = "0x2d8768f9"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidFees()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidFixedAPRContractError(PypechainBaseError):
    """ContractError for InvalidFixedAPR."""

    # Error name
    name: str = "InvalidFixedAPR"
    # 4 byte error selector
    selector: str = "0x30554de1"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidFixedAPR()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidIndexesContractError(PypechainBaseError):
    """ContractError for InvalidIndexes."""

    # Error name
    name: str = "InvalidIndexes"
    # 4 byte error selector
    selector: str = "0x764e6b56"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidIndexes()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMaxCheckpointDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidMaxCheckpointDuration."""

    # Error name
    name: str = "InvalidMaxCheckpointDuration"
    # 4 byte error selector
    selector: str = "0xf9c0959d"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMaxCheckpointDuration()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMaxCircuitBreakerDeltaContractError(
    PypechainBaseError
):
    """ContractError for InvalidMaxCircuitBreakerDelta."""

    # Error name
    name: str = "InvalidMaxCircuitBreakerDelta"
    # 4 byte error selector
    selector: str = "0xfdb80c26"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMaxCircuitBreakerDelta()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMaxFeesContractError(PypechainBaseError):
    """ContractError for InvalidMaxFees."""

    # Error name
    name: str = "InvalidMaxFees"
    # 4 byte error selector
    selector: str = "0x2c20e3f6"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMaxFees()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMaxFixedAPRContractError(PypechainBaseError):
    """ContractError for InvalidMaxFixedAPR."""

    # Error name
    name: str = "InvalidMaxFixedAPR"
    # 4 byte error selector
    selector: str = "0x673edec0"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMaxFixedAPR()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMaxPositionDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidMaxPositionDuration."""

    # Error name
    name: str = "InvalidMaxPositionDuration"
    # 4 byte error selector
    selector: str = "0xcfb699cb"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMaxPositionDuration()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMaxTimeStretchAPRContractError(
    PypechainBaseError
):
    """ContractError for InvalidMaxTimeStretchAPR."""

    # Error name
    name: str = "InvalidMaxTimeStretchAPR"
    # 4 byte error selector
    selector: str = "0xa35539d0"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMaxTimeStretchAPR()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMinCheckpointDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinCheckpointDuration."""

    # Error name
    name: str = "InvalidMinCheckpointDuration"
    # 4 byte error selector
    selector: str = "0x0433acc6"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinCheckpointDuration()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMinCircuitBreakerDeltaContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinCircuitBreakerDelta."""

    # Error name
    name: str = "InvalidMinCircuitBreakerDelta"
    # 4 byte error selector
    selector: str = "0x28a2d9a9"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinCircuitBreakerDelta()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMinFeesContractError(PypechainBaseError):
    """ContractError for InvalidMinFees."""

    # Error name
    name: str = "InvalidMinFees"
    # 4 byte error selector
    selector: str = "0x15b05a8f"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinFees()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMinFixedAPRContractError(PypechainBaseError):
    """ContractError for InvalidMinFixedAPR."""

    # Error name
    name: str = "InvalidMinFixedAPR"
    # 4 byte error selector
    selector: str = "0x1670f797"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinFixedAPR()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMinPositionDurationContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinPositionDuration."""

    # Error name
    name: str = "InvalidMinPositionDuration"
    # 4 byte error selector
    selector: str = "0x600f5a02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinPositionDuration()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidMinTimeStretchAPRContractError(
    PypechainBaseError
):
    """ContractError for InvalidMinTimeStretchAPR."""

    # Error name
    name: str = "InvalidMinTimeStretchAPR"
    # 4 byte error selector
    selector: str = "0x5a8f6557"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMinTimeStretchAPR()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidPositionDurationContractError(PypechainBaseError):
    """ContractError for InvalidPositionDuration."""

    # Error name
    name: str = "InvalidPositionDuration"
    # 4 byte error selector
    selector: str = "0x4a7fff9e"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidPositionDuration()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryInvalidTimeStretchAPRContractError(PypechainBaseError):
    """ContractError for InvalidTimeStretchAPR."""

    # Error name
    name: str = "InvalidTimeStretchAPR"
    # 4 byte error selector
    selector: str = "0x83ebdfb7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTimeStretchAPR()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryLnInvalidInputContractError(PypechainBaseError):
    """ContractError for LnInvalidInput."""

    # Error name
    name: str = "LnInvalidInput"
    # 4 byte error selector
    selector: str = "0xe61b4975"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "LnInvalidInput()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryReceiveLockedContractError(PypechainBaseError):
    """ContractError for ReceiveLocked."""

    # Error name
    name: str = "ReceiveLocked"
    # 4 byte error selector
    selector: str = "0x5563ada8"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ReceiveLocked()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryTransferFailedContractError(PypechainBaseError):
    """ContractError for TransferFailed."""

    # Error name
    name: str = "TransferFailed"
    # 4 byte error selector
    selector: str = "0x90b8ec18"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TransferFailed()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryUnauthorizedContractError(PypechainBaseError):
    """ContractError for Unauthorized."""

    # Error name
    name: str = "Unauthorized"
    # 4 byte error selector
    selector: str = "0x82b42900"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "Unauthorized()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryUnsafeCastToInt256ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = hyperdrivefactory_abi


class HyperdriveFactoryContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the HyperdriveFactory contract."""

    DeployerCoordinatorAlreadyAdded: (
        HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError
    )

    DeployerCoordinatorIndexMismatch: (
        HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError
    )

    DeployerCoordinatorNotAdded: (
        HyperdriveFactoryDeployerCoordinatorNotAddedContractError
    )

    EndIndexTooLarge: HyperdriveFactoryEndIndexTooLargeContractError

    InvalidCheckpointDuration: (
        HyperdriveFactoryInvalidCheckpointDurationContractError
    )

    InvalidCheckpointDurationResolution: (
        HyperdriveFactoryInvalidCheckpointDurationResolutionContractError
    )

    InvalidCircuitBreakerDelta: (
        HyperdriveFactoryInvalidCircuitBreakerDeltaContractError
    )

    InvalidDeployConfig: HyperdriveFactoryInvalidDeployConfigContractError

    InvalidDeployerCoordinator: (
        HyperdriveFactoryInvalidDeployerCoordinatorContractError
    )

    InvalidFees: HyperdriveFactoryInvalidFeesContractError

    InvalidFixedAPR: HyperdriveFactoryInvalidFixedAPRContractError

    InvalidIndexes: HyperdriveFactoryInvalidIndexesContractError

    InvalidMaxCheckpointDuration: (
        HyperdriveFactoryInvalidMaxCheckpointDurationContractError
    )

    InvalidMaxCircuitBreakerDelta: (
        HyperdriveFactoryInvalidMaxCircuitBreakerDeltaContractError
    )

    InvalidMaxFees: HyperdriveFactoryInvalidMaxFeesContractError

    InvalidMaxFixedAPR: HyperdriveFactoryInvalidMaxFixedAPRContractError

    InvalidMaxPositionDuration: (
        HyperdriveFactoryInvalidMaxPositionDurationContractError
    )

    InvalidMaxTimeStretchAPR: (
        HyperdriveFactoryInvalidMaxTimeStretchAPRContractError
    )

    InvalidMinCheckpointDuration: (
        HyperdriveFactoryInvalidMinCheckpointDurationContractError
    )

    InvalidMinCircuitBreakerDelta: (
        HyperdriveFactoryInvalidMinCircuitBreakerDeltaContractError
    )

    InvalidMinFees: HyperdriveFactoryInvalidMinFeesContractError

    InvalidMinFixedAPR: HyperdriveFactoryInvalidMinFixedAPRContractError

    InvalidMinPositionDuration: (
        HyperdriveFactoryInvalidMinPositionDurationContractError
    )

    InvalidMinTimeStretchAPR: (
        HyperdriveFactoryInvalidMinTimeStretchAPRContractError
    )

    InvalidPositionDuration: (
        HyperdriveFactoryInvalidPositionDurationContractError
    )

    InvalidTimeStretchAPR: HyperdriveFactoryInvalidTimeStretchAPRContractError

    LnInvalidInput: HyperdriveFactoryLnInvalidInputContractError

    ReceiveLocked: HyperdriveFactoryReceiveLockedContractError

    TransferFailed: HyperdriveFactoryTransferFailedContractError

    Unauthorized: HyperdriveFactoryUnauthorizedContractError

    UnsafeCastToInt256: HyperdriveFactoryUnsafeCastToInt256ContractError

    def __init__(
        self,
    ) -> None:
        self.DeployerCoordinatorAlreadyAdded = (
            HyperdriveFactoryDeployerCoordinatorAlreadyAddedContractError()
        )
        self.DeployerCoordinatorIndexMismatch = (
            HyperdriveFactoryDeployerCoordinatorIndexMismatchContractError()
        )
        self.DeployerCoordinatorNotAdded = (
            HyperdriveFactoryDeployerCoordinatorNotAddedContractError()
        )
        self.EndIndexTooLarge = HyperdriveFactoryEndIndexTooLargeContractError()
        self.InvalidCheckpointDuration = (
            HyperdriveFactoryInvalidCheckpointDurationContractError()
        )
        self.InvalidCheckpointDurationResolution = (
            HyperdriveFactoryInvalidCheckpointDurationResolutionContractError()
        )
        self.InvalidCircuitBreakerDelta = (
            HyperdriveFactoryInvalidCircuitBreakerDeltaContractError()
        )
        self.InvalidDeployConfig = (
            HyperdriveFactoryInvalidDeployConfigContractError()
        )
        self.InvalidDeployerCoordinator = (
            HyperdriveFactoryInvalidDeployerCoordinatorContractError()
        )
        self.InvalidFees = HyperdriveFactoryInvalidFeesContractError()
        self.InvalidFixedAPR = HyperdriveFactoryInvalidFixedAPRContractError()
        self.InvalidIndexes = HyperdriveFactoryInvalidIndexesContractError()
        self.InvalidMaxCheckpointDuration = (
            HyperdriveFactoryInvalidMaxCheckpointDurationContractError()
        )
        self.InvalidMaxCircuitBreakerDelta = (
            HyperdriveFactoryInvalidMaxCircuitBreakerDeltaContractError()
        )
        self.InvalidMaxFees = HyperdriveFactoryInvalidMaxFeesContractError()
        self.InvalidMaxFixedAPR = (
            HyperdriveFactoryInvalidMaxFixedAPRContractError()
        )
        self.InvalidMaxPositionDuration = (
            HyperdriveFactoryInvalidMaxPositionDurationContractError()
        )
        self.InvalidMaxTimeStretchAPR = (
            HyperdriveFactoryInvalidMaxTimeStretchAPRContractError()
        )
        self.InvalidMinCheckpointDuration = (
            HyperdriveFactoryInvalidMinCheckpointDurationContractError()
        )
        self.InvalidMinCircuitBreakerDelta = (
            HyperdriveFactoryInvalidMinCircuitBreakerDeltaContractError()
        )
        self.InvalidMinFees = HyperdriveFactoryInvalidMinFeesContractError()
        self.InvalidMinFixedAPR = (
            HyperdriveFactoryInvalidMinFixedAPRContractError()
        )
        self.InvalidMinPositionDuration = (
            HyperdriveFactoryInvalidMinPositionDurationContractError()
        )
        self.InvalidMinTimeStretchAPR = (
            HyperdriveFactoryInvalidMinTimeStretchAPRContractError()
        )
        self.InvalidPositionDuration = (
            HyperdriveFactoryInvalidPositionDurationContractError()
        )
        self.InvalidTimeStretchAPR = (
            HyperdriveFactoryInvalidTimeStretchAPRContractError()
        )
        self.LnInvalidInput = HyperdriveFactoryLnInvalidInputContractError()
        self.ReceiveLocked = HyperdriveFactoryReceiveLockedContractError()
        self.TransferFailed = HyperdriveFactoryTransferFailedContractError()
        self.Unauthorized = HyperdriveFactoryUnauthorizedContractError()
        self.UnsafeCastToInt256 = (
            HyperdriveFactoryUnsafeCastToInt256ContractError()
        )

        self._all = [
            self.DeployerCoordinatorAlreadyAdded,
            self.DeployerCoordinatorIndexMismatch,
            self.DeployerCoordinatorNotAdded,
            self.EndIndexTooLarge,
            self.InvalidCheckpointDuration,
            self.InvalidCheckpointDurationResolution,
            self.InvalidCircuitBreakerDelta,
            self.InvalidDeployConfig,
            self.InvalidDeployerCoordinator,
            self.InvalidFees,
            self.InvalidFixedAPR,
            self.InvalidIndexes,
            self.InvalidMaxCheckpointDuration,
            self.InvalidMaxCircuitBreakerDelta,
            self.InvalidMaxFees,
            self.InvalidMaxFixedAPR,
            self.InvalidMaxPositionDuration,
            self.InvalidMaxTimeStretchAPR,
            self.InvalidMinCheckpointDuration,
            self.InvalidMinCircuitBreakerDelta,
            self.InvalidMinFees,
            self.InvalidMinFixedAPR,
            self.InvalidMinPositionDuration,
            self.InvalidMinTimeStretchAPR,
            self.InvalidPositionDuration,
            self.InvalidTimeStretchAPR,
            self.LnInvalidInput,
            self.ReceiveLocked,
            self.TransferFailed,
            self.Unauthorized,
            self.UnsafeCastToInt256,
        ]


class HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the _instancesToDeployerCoordinators(str) method."""

    _function_name = "_instancesToDeployerCoordinators"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the _instancesToDeployerCoordinators method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "_instancesToDeployerCoordinators"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, instance: str) -> HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction0._type_signature: HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction0,
        }
        return out


class HyperdriveFactoryAddDeployerCoordinatorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the addDeployerCoordinator(str) method."""

    _function_name = "addDeployerCoordinator"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryAddDeployerCoordinatorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the addDeployerCoordinator method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "addDeployerCoordinator"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deployerCoordinator: str) -> HyperdriveFactoryAddDeployerCoordinatorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryAddDeployerCoordinatorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryAddDeployerCoordinatorContractFunction0._type_signature: HyperdriveFactoryAddDeployerCoordinatorContractFunction0,
        }
        return out


class HyperdriveFactoryCheckpointDurationResolutionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the checkpointDurationResolution() method."""

    _function_name = "checkpointDurationResolution"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryCheckpointDurationResolutionContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the checkpointDurationResolution method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "checkpointDurationResolution"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryCheckpointDurationResolutionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryCheckpointDurationResolutionContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryCheckpointDurationResolutionContractFunction0._type_signature: HyperdriveFactoryCheckpointDurationResolutionContractFunction0,
        }
        return out


class HyperdriveFactoryCheckpointRewarderContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the checkpointRewarder() method."""

    _function_name = "checkpointRewarder"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryCheckpointRewarderContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the checkpointRewarder method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "checkpointRewarder"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryCheckpointRewarderContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryCheckpointRewarderContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryCheckpointRewarderContractFunction0._type_signature: HyperdriveFactoryCheckpointRewarderContractFunction0,
        }
        return out


class HyperdriveFactoryDefaultPausersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the defaultPausers() method."""

    _function_name = "defaultPausers"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryDefaultPausersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the defaultPausers method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "defaultPausers"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryDefaultPausersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryDefaultPausersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryDefaultPausersContractFunction0._type_signature: HyperdriveFactoryDefaultPausersContractFunction0,
        }
        return out


class HyperdriveFactoryDeployAndInitializeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployAndInitialize(bytes,str,str,IHyperdrive.PoolDeployConfig,bytes,int,int,int,IHyperdrive.Options,bytes) method."""

    _function_name = "deployAndInitialize"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "bytes",
                "str",
                "str",
                "IHyperdrive.PoolDeployConfig",
                "bytes",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "bytes",
            ]
        ),
        structs,
    )
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryDeployAndInitializeContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the deployAndInitialize method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployAndInitialize"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, _deployerCoordinator: str, __name: str, _config: IHyperdrive.PoolDeployConfig, _extraData: bytes, _contribution: int, _fixedAPR: int, _timeStretchAPR: int, _options: IHyperdrive.Options, _salt: bytes) -> HyperdriveFactoryDeployAndInitializeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryDeployAndInitializeContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryDeployAndInitializeContractFunction0._type_signature: HyperdriveFactoryDeployAndInitializeContractFunction0,
        }
        return out


class HyperdriveFactoryDeployTargetContractFunction0(PypechainContractFunction):
    """ContractFunction for the deployTarget(bytes,str,IHyperdrive.PoolDeployConfig,bytes,int,int,int,bytes) method."""

    _function_name = "deployTarget"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "bytes",
                "str",
                "IHyperdrive.PoolDeployConfig",
                "bytes",
                "int",
                "int",
                "int",
                "bytes",
            ]
        ),
        structs,
    )
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryDeployTargetContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the deployTarget method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployTarget"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deploymentId: bytes, _deployerCoordinator: str, _config: IHyperdrive.PoolDeployConfig, _extraData: bytes, _fixedAPR: int, _timeStretchAPR: int, _targetIndex: int, _salt: bytes) -> HyperdriveFactoryDeployTargetContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryDeployTargetContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryDeployTargetContractFunction0._type_signature: HyperdriveFactoryDeployTargetContractFunction0,
        }
        return out


class HyperdriveFactoryDeployerCoordinatorManagerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployerCoordinatorManager() method."""

    _function_name = "deployerCoordinatorManager"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryDeployerCoordinatorManagerContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the deployerCoordinatorManager method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployerCoordinatorManager"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryDeployerCoordinatorManagerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryDeployerCoordinatorManagerContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryDeployerCoordinatorManagerContractFunction0._type_signature: HyperdriveFactoryDeployerCoordinatorManagerContractFunction0,
        }
        return out


class HyperdriveFactoryFeeCollectorContractFunction0(PypechainContractFunction):
    """ContractFunction for the feeCollector() method."""

    _function_name = "feeCollector"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryFeeCollectorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the feeCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "feeCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryFeeCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryFeeCollectorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryFeeCollectorContractFunction0._type_signature: HyperdriveFactoryFeeCollectorContractFunction0,
        }
        return out


class HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getDeployerCoordinatorAtIndex(int) method."""

    _function_name = "getDeployerCoordinatorAtIndex"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the getDeployerCoordinatorAtIndex method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getDeployerCoordinatorAtIndex"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _index: int) -> HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction0._type_signature: HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction0,
        }
        return out


class HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getDeployerCoordinatorByInstances(list[str]) method."""

    _function_name = "getDeployerCoordinatorByInstances"
    _type_signature = expand_struct_type_str(tuple(["list[str]"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the getDeployerCoordinatorByInstances method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getDeployerCoordinatorByInstances"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, __instances: list[str]) -> HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction0._type_signature: HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction0,
        }
        return out


class HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getDeployerCoordinatorsInRange(int,int) method."""

    _function_name = "getDeployerCoordinatorsInRange"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the getDeployerCoordinatorsInRange method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getDeployerCoordinatorsInRange"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _startIndex: int, _endIndex: int) -> HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction0._type_signature: HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction0,
        }
        return out


class HyperdriveFactoryGetInstanceAtIndexContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getInstanceAtIndex(int) method."""

    _function_name = "getInstanceAtIndex"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryGetInstanceAtIndexContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the getInstanceAtIndex method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getInstanceAtIndex"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _index: int) -> HyperdriveFactoryGetInstanceAtIndexContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryGetInstanceAtIndexContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryGetInstanceAtIndexContractFunction0._type_signature: HyperdriveFactoryGetInstanceAtIndexContractFunction0,
        }
        return out


class HyperdriveFactoryGetInstancesInRangeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getInstancesInRange(int,int) method."""

    _function_name = "getInstancesInRange"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryGetInstancesInRangeContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the getInstancesInRange method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getInstancesInRange"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _startIndex: int, _endIndex: int) -> HyperdriveFactoryGetInstancesInRangeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryGetInstancesInRangeContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryGetInstancesInRangeContractFunction0._type_signature: HyperdriveFactoryGetInstancesInRangeContractFunction0,
        }
        return out


class HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getNumberOfDeployerCoordinators() method."""

    _function_name = "getNumberOfDeployerCoordinators"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the getNumberOfDeployerCoordinators method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getNumberOfDeployerCoordinators"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction0._type_signature: HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction0,
        }
        return out


class HyperdriveFactoryGetNumberOfInstancesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the getNumberOfInstances() method."""

    _function_name = "getNumberOfInstances"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryGetNumberOfInstancesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the getNumberOfInstances method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "getNumberOfInstances"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryGetNumberOfInstancesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryGetNumberOfInstancesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryGetNumberOfInstancesContractFunction0._type_signature: HyperdriveFactoryGetNumberOfInstancesContractFunction0,
        }
        return out


class HyperdriveFactoryGovernanceContractFunction0(PypechainContractFunction):
    """ContractFunction for the governance() method."""

    _function_name = "governance"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryGovernanceContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the governance method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "governance"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryGovernanceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryGovernanceContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryGovernanceContractFunction0._type_signature: HyperdriveFactoryGovernanceContractFunction0,
        }
        return out


class HyperdriveFactoryHyperdriveGovernanceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the hyperdriveGovernance() method."""

    _function_name = "hyperdriveGovernance"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryHyperdriveGovernanceContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the hyperdriveGovernance method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "hyperdriveGovernance"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryHyperdriveGovernanceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryHyperdriveGovernanceContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryHyperdriveGovernanceContractFunction0._type_signature: HyperdriveFactoryHyperdriveGovernanceContractFunction0,
        }
        return out


class HyperdriveFactoryIsDeployerCoordinatorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the isDeployerCoordinator(str) method."""

    _function_name = "isDeployerCoordinator"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryIsDeployerCoordinatorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the isDeployerCoordinator method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isDeployerCoordinator"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, arg1: str) -> HyperdriveFactoryIsDeployerCoordinatorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryIsDeployerCoordinatorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryIsDeployerCoordinatorContractFunction0._type_signature: HyperdriveFactoryIsDeployerCoordinatorContractFunction0,
        }
        return out


class HyperdriveFactoryIsInstanceContractFunction0(PypechainContractFunction):
    """ContractFunction for the isInstance(str) method."""

    _function_name = "isInstance"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryIsInstanceContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the isInstance method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isInstance"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, arg1: str) -> HyperdriveFactoryIsInstanceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryIsInstanceContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryIsInstanceContractFunction0._type_signature: HyperdriveFactoryIsInstanceContractFunction0,
        }
        return out


class HyperdriveFactoryKindContractFunction0(PypechainContractFunction):
    """ContractFunction for the kind() method."""

    _function_name = "kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryKindContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryKindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryKindContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryKindContractFunction0._type_signature: HyperdriveFactoryKindContractFunction0,
        }
        return out


class HyperdriveFactoryLinkerCodeHashContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the linkerCodeHash() method."""

    _function_name = "linkerCodeHash"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryLinkerCodeHashContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the linkerCodeHash method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "linkerCodeHash"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryLinkerCodeHashContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryLinkerCodeHashContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryLinkerCodeHashContractFunction0._type_signature: HyperdriveFactoryLinkerCodeHashContractFunction0,
        }
        return out


class HyperdriveFactoryLinkerFactoryContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the linkerFactory() method."""

    _function_name = "linkerFactory"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryLinkerFactoryContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the linkerFactory method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "linkerFactory"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryLinkerFactoryContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryLinkerFactoryContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryLinkerFactoryContractFunction0._type_signature: HyperdriveFactoryLinkerFactoryContractFunction0,
        }
        return out


class HyperdriveFactoryMaxCheckpointDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the maxCheckpointDuration() method."""

    _function_name = "maxCheckpointDuration"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryMaxCheckpointDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the maxCheckpointDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "maxCheckpointDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMaxCheckpointDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMaxCheckpointDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMaxCheckpointDurationContractFunction0._type_signature: HyperdriveFactoryMaxCheckpointDurationContractFunction0,
        }
        return out


class HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the maxCircuitBreakerDelta() method."""

    _function_name = "maxCircuitBreakerDelta"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the maxCircuitBreakerDelta method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "maxCircuitBreakerDelta"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction0._type_signature: HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction0,
        }
        return out


class HyperdriveFactoryMaxFeesContractFunction0(PypechainContractFunction):
    """ContractFunction for the maxFees() method."""

    _function_name = "maxFees"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> IHyperdrive.Fees:
        """returns IHyperdrive.Fees."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = IHyperdrive.Fees

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            IHyperdrive.Fees,
            rename_returned_types(structs, return_types, raw_values),
        )


class HyperdriveFactoryMaxFeesContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the maxFees method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "maxFees"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMaxFeesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMaxFeesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMaxFeesContractFunction0._type_signature: HyperdriveFactoryMaxFeesContractFunction0,
        }
        return out


class HyperdriveFactoryMaxFixedAPRContractFunction0(PypechainContractFunction):
    """ContractFunction for the maxFixedAPR() method."""

    _function_name = "maxFixedAPR"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryMaxFixedAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the maxFixedAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "maxFixedAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMaxFixedAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMaxFixedAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMaxFixedAPRContractFunction0._type_signature: HyperdriveFactoryMaxFixedAPRContractFunction0,
        }
        return out


class HyperdriveFactoryMaxPositionDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the maxPositionDuration() method."""

    _function_name = "maxPositionDuration"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryMaxPositionDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the maxPositionDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "maxPositionDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMaxPositionDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMaxPositionDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMaxPositionDurationContractFunction0._type_signature: HyperdriveFactoryMaxPositionDurationContractFunction0,
        }
        return out


class HyperdriveFactoryMaxTimeStretchAPRContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the maxTimeStretchAPR() method."""

    _function_name = "maxTimeStretchAPR"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryMaxTimeStretchAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the maxTimeStretchAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "maxTimeStretchAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMaxTimeStretchAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMaxTimeStretchAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMaxTimeStretchAPRContractFunction0._type_signature: HyperdriveFactoryMaxTimeStretchAPRContractFunction0,
        }
        return out


class HyperdriveFactoryMinCheckpointDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the minCheckpointDuration() method."""

    _function_name = "minCheckpointDuration"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryMinCheckpointDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the minCheckpointDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "minCheckpointDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMinCheckpointDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMinCheckpointDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMinCheckpointDurationContractFunction0._type_signature: HyperdriveFactoryMinCheckpointDurationContractFunction0,
        }
        return out


class HyperdriveFactoryMinCircuitBreakerDeltaContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the minCircuitBreakerDelta() method."""

    _function_name = "minCircuitBreakerDelta"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryMinCircuitBreakerDeltaContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the minCircuitBreakerDelta method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "minCircuitBreakerDelta"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMinCircuitBreakerDeltaContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMinCircuitBreakerDeltaContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMinCircuitBreakerDeltaContractFunction0._type_signature: HyperdriveFactoryMinCircuitBreakerDeltaContractFunction0,
        }
        return out


class HyperdriveFactoryMinFeesContractFunction0(PypechainContractFunction):
    """ContractFunction for the minFees() method."""

    _function_name = "minFees"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> IHyperdrive.Fees:
        """returns IHyperdrive.Fees."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = IHyperdrive.Fees

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            IHyperdrive.Fees,
            rename_returned_types(structs, return_types, raw_values),
        )


class HyperdriveFactoryMinFeesContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the minFees method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "minFees"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMinFeesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMinFeesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMinFeesContractFunction0._type_signature: HyperdriveFactoryMinFeesContractFunction0,
        }
        return out


class HyperdriveFactoryMinFixedAPRContractFunction0(PypechainContractFunction):
    """ContractFunction for the minFixedAPR() method."""

    _function_name = "minFixedAPR"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryMinFixedAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the minFixedAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "minFixedAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMinFixedAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMinFixedAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMinFixedAPRContractFunction0._type_signature: HyperdriveFactoryMinFixedAPRContractFunction0,
        }
        return out


class HyperdriveFactoryMinPositionDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the minPositionDuration() method."""

    _function_name = "minPositionDuration"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryMinPositionDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the minPositionDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "minPositionDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMinPositionDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMinPositionDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMinPositionDurationContractFunction0._type_signature: HyperdriveFactoryMinPositionDurationContractFunction0,
        }
        return out


class HyperdriveFactoryMinTimeStretchAPRContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the minTimeStretchAPR() method."""

    _function_name = "minTimeStretchAPR"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryMinTimeStretchAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the minTimeStretchAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "minTimeStretchAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryMinTimeStretchAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryMinTimeStretchAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryMinTimeStretchAPRContractFunction0._type_signature: HyperdriveFactoryMinTimeStretchAPRContractFunction0,
        }
        return out


class HyperdriveFactoryNameContractFunction0(PypechainContractFunction):
    """ContractFunction for the name() method."""

    _function_name = "name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryNameContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryNameContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryNameContractFunction0._type_signature: HyperdriveFactoryNameContractFunction0,
        }
        return out


class HyperdriveFactoryRemoveDeployerCoordinatorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the removeDeployerCoordinator(str,int) method."""

    _function_name = "removeDeployerCoordinator"
    _type_signature = expand_struct_type_str(tuple(["str", "int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryRemoveDeployerCoordinatorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the removeDeployerCoordinator method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "removeDeployerCoordinator"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deployerCoordinator: str, _index: int) -> HyperdriveFactoryRemoveDeployerCoordinatorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryRemoveDeployerCoordinatorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryRemoveDeployerCoordinatorContractFunction0._type_signature: HyperdriveFactoryRemoveDeployerCoordinatorContractFunction0,
        }
        return out


class HyperdriveFactorySweepCollectorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the sweepCollector() method."""

    _function_name = "sweepCollector"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactorySweepCollectorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the sweepCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "sweepCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactorySweepCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactorySweepCollectorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactorySweepCollectorContractFunction0._type_signature: HyperdriveFactorySweepCollectorContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateCheckpointDurationResolution(int) method."""

    _function_name = "updateCheckpointDurationResolution"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateCheckpointDurationResolution method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateCheckpointDurationResolution"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _checkpointDurationResolution: int) -> HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction0._type_signature: HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateCheckpointRewarderContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateCheckpointRewarder(str) method."""

    _function_name = "updateCheckpointRewarder"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateCheckpointRewarderContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateCheckpointRewarder method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateCheckpointRewarder"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _checkpointRewarder: str) -> HyperdriveFactoryUpdateCheckpointRewarderContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateCheckpointRewarderContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateCheckpointRewarderContractFunction0._type_signature: HyperdriveFactoryUpdateCheckpointRewarderContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateDefaultPausersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateDefaultPausers(list[str]) method."""

    _function_name = "updateDefaultPausers"
    _type_signature = expand_struct_type_str(tuple(["list[str]"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateDefaultPausersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateDefaultPausers method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateDefaultPausers"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _defaultPausers_: list[str]) -> HyperdriveFactoryUpdateDefaultPausersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateDefaultPausersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateDefaultPausersContractFunction0._type_signature: HyperdriveFactoryUpdateDefaultPausersContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateDeployerCoordinatorManager(str) method."""

    _function_name = "updateDeployerCoordinatorManager"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateDeployerCoordinatorManager method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateDeployerCoordinatorManager"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _deployerCoordinatorManager: str) -> HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction0._type_signature: HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateFeeCollectorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateFeeCollector(str) method."""

    _function_name = "updateFeeCollector"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateFeeCollectorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateFeeCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateFeeCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _feeCollector: str) -> HyperdriveFactoryUpdateFeeCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateFeeCollectorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateFeeCollectorContractFunction0._type_signature: HyperdriveFactoryUpdateFeeCollectorContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateGovernanceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateGovernance(str) method."""

    _function_name = "updateGovernance"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateGovernanceContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateGovernance method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateGovernance"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _governance: str) -> HyperdriveFactoryUpdateGovernanceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateGovernanceContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateGovernanceContractFunction0._type_signature: HyperdriveFactoryUpdateGovernanceContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateHyperdriveGovernance(str) method."""

    _function_name = "updateHyperdriveGovernance"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateHyperdriveGovernance method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateHyperdriveGovernance"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdriveGovernance: str) -> HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction0._type_signature: HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateLinkerCodeHashContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateLinkerCodeHash(bytes) method."""

    _function_name = "updateLinkerCodeHash"
    _type_signature = expand_struct_type_str(tuple(["bytes"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateLinkerCodeHashContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateLinkerCodeHash method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateLinkerCodeHash"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _linkerCodeHash: bytes) -> HyperdriveFactoryUpdateLinkerCodeHashContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateLinkerCodeHashContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateLinkerCodeHashContractFunction0._type_signature: HyperdriveFactoryUpdateLinkerCodeHashContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateLinkerFactoryContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateLinkerFactory(str) method."""

    _function_name = "updateLinkerFactory"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateLinkerFactoryContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateLinkerFactory method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateLinkerFactory"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _linkerFactory: str) -> HyperdriveFactoryUpdateLinkerFactoryContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateLinkerFactoryContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateLinkerFactoryContractFunction0._type_signature: HyperdriveFactoryUpdateLinkerFactoryContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMaxCheckpointDuration(int) method."""

    _function_name = "updateMaxCheckpointDuration"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMaxCheckpointDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMaxCheckpointDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _maxCheckpointDuration: int) -> HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction0._type_signature: HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMaxCircuitBreakerDelta(int) method."""

    _function_name = "updateMaxCircuitBreakerDelta"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMaxCircuitBreakerDelta method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMaxCircuitBreakerDelta"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _maxCircuitBreakerDelta: int) -> HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction0._type_signature: HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMaxFeesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMaxFees(IHyperdrive.Fees) method."""

    _function_name = "updateMaxFees"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.Fees"]), structs
    )
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMaxFeesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMaxFees method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMaxFees"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, __maxFees: IHyperdrive.Fees) -> HyperdriveFactoryUpdateMaxFeesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMaxFeesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMaxFeesContractFunction0._type_signature: HyperdriveFactoryUpdateMaxFeesContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMaxFixedAPRContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMaxFixedAPR(int) method."""

    _function_name = "updateMaxFixedAPR"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMaxFixedAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMaxFixedAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMaxFixedAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _maxFixedAPR: int) -> HyperdriveFactoryUpdateMaxFixedAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMaxFixedAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMaxFixedAPRContractFunction0._type_signature: HyperdriveFactoryUpdateMaxFixedAPRContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMaxPositionDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMaxPositionDuration(int) method."""

    _function_name = "updateMaxPositionDuration"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMaxPositionDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMaxPositionDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMaxPositionDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _maxPositionDuration: int) -> HyperdriveFactoryUpdateMaxPositionDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMaxPositionDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMaxPositionDurationContractFunction0._type_signature: HyperdriveFactoryUpdateMaxPositionDurationContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMaxTimeStretchAPR(int) method."""

    _function_name = "updateMaxTimeStretchAPR"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMaxTimeStretchAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMaxTimeStretchAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _maxTimeStretchAPR: int) -> HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction0._type_signature: HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMinCheckpointDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMinCheckpointDuration(int) method."""

    _function_name = "updateMinCheckpointDuration"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMinCheckpointDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMinCheckpointDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMinCheckpointDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _minCheckpointDuration: int) -> HyperdriveFactoryUpdateMinCheckpointDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMinCheckpointDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMinCheckpointDurationContractFunction0._type_signature: HyperdriveFactoryUpdateMinCheckpointDurationContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMinCircuitBreakerDelta(int) method."""

    _function_name = "updateMinCircuitBreakerDelta"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMinCircuitBreakerDelta method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMinCircuitBreakerDelta"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _minCircuitBreakerDelta: int) -> HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction0._type_signature: HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMinFeesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMinFees(IHyperdrive.Fees) method."""

    _function_name = "updateMinFees"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdrive.Fees"]), structs
    )
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMinFeesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMinFees method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMinFees"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, __minFees: IHyperdrive.Fees) -> HyperdriveFactoryUpdateMinFeesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMinFeesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMinFeesContractFunction0._type_signature: HyperdriveFactoryUpdateMinFeesContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMinFixedAPRContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMinFixedAPR(int) method."""

    _function_name = "updateMinFixedAPR"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMinFixedAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMinFixedAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMinFixedAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _minFixedAPR: int) -> HyperdriveFactoryUpdateMinFixedAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMinFixedAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMinFixedAPRContractFunction0._type_signature: HyperdriveFactoryUpdateMinFixedAPRContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMinPositionDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMinPositionDuration(int) method."""

    _function_name = "updateMinPositionDuration"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMinPositionDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMinPositionDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMinPositionDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _minPositionDuration: int) -> HyperdriveFactoryUpdateMinPositionDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMinPositionDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMinPositionDurationContractFunction0._type_signature: HyperdriveFactoryUpdateMinPositionDurationContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateMinTimeStretchAPR(int) method."""

    _function_name = "updateMinTimeStretchAPR"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateMinTimeStretchAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateMinTimeStretchAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _minTimeStretchAPR: int) -> HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction0._type_signature: HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction0,
        }
        return out


class HyperdriveFactoryUpdateSweepCollectorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the updateSweepCollector(str) method."""

    _function_name = "updateSweepCollector"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryUpdateSweepCollectorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the updateSweepCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "updateSweepCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _sweepCollector: str) -> HyperdriveFactoryUpdateSweepCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryUpdateSweepCollectorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryUpdateSweepCollectorContractFunction0._type_signature: HyperdriveFactoryUpdateSweepCollectorContractFunction0,
        }
        return out


class HyperdriveFactoryVersionContractFunction0(PypechainContractFunction):
    """ContractFunction for the version() method."""

    _function_name = "version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryVersionContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryVersionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryVersionContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryVersionContractFunction0._type_signature: HyperdriveFactoryVersionContractFunction0,
        }
        return out


class HyperdriveFactoryContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveFactory contract."""

    _instancesToDeployerCoordinators: (
        HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction
    )

    addDeployerCoordinator: (
        HyperdriveFactoryAddDeployerCoordinatorContractFunction
    )

    checkpointDurationResolution: (
        HyperdriveFactoryCheckpointDurationResolutionContractFunction
    )

    checkpointRewarder: HyperdriveFactoryCheckpointRewarderContractFunction

    defaultPausers: HyperdriveFactoryDefaultPausersContractFunction

    deployAndInitialize: HyperdriveFactoryDeployAndInitializeContractFunction

    deployTarget: HyperdriveFactoryDeployTargetContractFunction

    deployerCoordinatorManager: (
        HyperdriveFactoryDeployerCoordinatorManagerContractFunction
    )

    feeCollector: HyperdriveFactoryFeeCollectorContractFunction

    getDeployerCoordinatorAtIndex: (
        HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction
    )

    getDeployerCoordinatorByInstances: (
        HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction
    )

    getDeployerCoordinatorsInRange: (
        HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction
    )

    getInstanceAtIndex: HyperdriveFactoryGetInstanceAtIndexContractFunction

    getInstancesInRange: HyperdriveFactoryGetInstancesInRangeContractFunction

    getNumberOfDeployerCoordinators: (
        HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction
    )

    getNumberOfInstances: HyperdriveFactoryGetNumberOfInstancesContractFunction

    governance: HyperdriveFactoryGovernanceContractFunction

    hyperdriveGovernance: HyperdriveFactoryHyperdriveGovernanceContractFunction

    isDeployerCoordinator: (
        HyperdriveFactoryIsDeployerCoordinatorContractFunction
    )

    isInstance: HyperdriveFactoryIsInstanceContractFunction

    kind: HyperdriveFactoryKindContractFunction

    linkerCodeHash: HyperdriveFactoryLinkerCodeHashContractFunction

    linkerFactory: HyperdriveFactoryLinkerFactoryContractFunction

    maxCheckpointDuration: (
        HyperdriveFactoryMaxCheckpointDurationContractFunction
    )

    maxCircuitBreakerDelta: (
        HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction
    )

    maxFees: HyperdriveFactoryMaxFeesContractFunction

    maxFixedAPR: HyperdriveFactoryMaxFixedAPRContractFunction

    maxPositionDuration: HyperdriveFactoryMaxPositionDurationContractFunction

    maxTimeStretchAPR: HyperdriveFactoryMaxTimeStretchAPRContractFunction

    minCheckpointDuration: (
        HyperdriveFactoryMinCheckpointDurationContractFunction
    )

    minCircuitBreakerDelta: (
        HyperdriveFactoryMinCircuitBreakerDeltaContractFunction
    )

    minFees: HyperdriveFactoryMinFeesContractFunction

    minFixedAPR: HyperdriveFactoryMinFixedAPRContractFunction

    minPositionDuration: HyperdriveFactoryMinPositionDurationContractFunction

    minTimeStretchAPR: HyperdriveFactoryMinTimeStretchAPRContractFunction

    name: HyperdriveFactoryNameContractFunction

    removeDeployerCoordinator: (
        HyperdriveFactoryRemoveDeployerCoordinatorContractFunction
    )

    sweepCollector: HyperdriveFactorySweepCollectorContractFunction

    updateCheckpointDurationResolution: (
        HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction
    )

    updateCheckpointRewarder: (
        HyperdriveFactoryUpdateCheckpointRewarderContractFunction
    )

    updateDefaultPausers: HyperdriveFactoryUpdateDefaultPausersContractFunction

    updateDeployerCoordinatorManager: (
        HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction
    )

    updateFeeCollector: HyperdriveFactoryUpdateFeeCollectorContractFunction

    updateGovernance: HyperdriveFactoryUpdateGovernanceContractFunction

    updateHyperdriveGovernance: (
        HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction
    )

    updateLinkerCodeHash: HyperdriveFactoryUpdateLinkerCodeHashContractFunction

    updateLinkerFactory: HyperdriveFactoryUpdateLinkerFactoryContractFunction

    updateMaxCheckpointDuration: (
        HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction
    )

    updateMaxCircuitBreakerDelta: (
        HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction
    )

    updateMaxFees: HyperdriveFactoryUpdateMaxFeesContractFunction

    updateMaxFixedAPR: HyperdriveFactoryUpdateMaxFixedAPRContractFunction

    updateMaxPositionDuration: (
        HyperdriveFactoryUpdateMaxPositionDurationContractFunction
    )

    updateMaxTimeStretchAPR: (
        HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction
    )

    updateMinCheckpointDuration: (
        HyperdriveFactoryUpdateMinCheckpointDurationContractFunction
    )

    updateMinCircuitBreakerDelta: (
        HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction
    )

    updateMinFees: HyperdriveFactoryUpdateMinFeesContractFunction

    updateMinFixedAPR: HyperdriveFactoryUpdateMinFixedAPRContractFunction

    updateMinPositionDuration: (
        HyperdriveFactoryUpdateMinPositionDurationContractFunction
    )

    updateMinTimeStretchAPR: (
        HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction
    )

    updateSweepCollector: HyperdriveFactoryUpdateSweepCollectorContractFunction

    version: HyperdriveFactoryVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self._instancesToDeployerCoordinators = HyperdriveFactory_instancesToDeployerCoordinatorsContractFunction.factory(
            "_instancesToDeployerCoordinators",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="_instancesToDeployerCoordinators",
        )
        self.addDeployerCoordinator = (
            HyperdriveFactoryAddDeployerCoordinatorContractFunction.factory(
                "addDeployerCoordinator",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="addDeployerCoordinator",
            )
        )
        self.checkpointDurationResolution = HyperdriveFactoryCheckpointDurationResolutionContractFunction.factory(
            "checkpointDurationResolution",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="checkpointDurationResolution",
        )
        self.checkpointRewarder = (
            HyperdriveFactoryCheckpointRewarderContractFunction.factory(
                "checkpointRewarder",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="checkpointRewarder",
            )
        )
        self.defaultPausers = (
            HyperdriveFactoryDefaultPausersContractFunction.factory(
                "defaultPausers",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="defaultPausers",
            )
        )
        self.deployAndInitialize = (
            HyperdriveFactoryDeployAndInitializeContractFunction.factory(
                "deployAndInitialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployAndInitialize",
            )
        )
        self.deployTarget = (
            HyperdriveFactoryDeployTargetContractFunction.factory(
                "deployTarget",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployTarget",
            )
        )
        self.deployerCoordinatorManager = (
            HyperdriveFactoryDeployerCoordinatorManagerContractFunction.factory(
                "deployerCoordinatorManager",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="deployerCoordinatorManager",
            )
        )
        self.feeCollector = (
            HyperdriveFactoryFeeCollectorContractFunction.factory(
                "feeCollector",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="feeCollector",
            )
        )
        self.getDeployerCoordinatorAtIndex = HyperdriveFactoryGetDeployerCoordinatorAtIndexContractFunction.factory(
            "getDeployerCoordinatorAtIndex",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getDeployerCoordinatorAtIndex",
        )
        self.getDeployerCoordinatorByInstances = HyperdriveFactoryGetDeployerCoordinatorByInstancesContractFunction.factory(
            "getDeployerCoordinatorByInstances",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getDeployerCoordinatorByInstances",
        )
        self.getDeployerCoordinatorsInRange = HyperdriveFactoryGetDeployerCoordinatorsInRangeContractFunction.factory(
            "getDeployerCoordinatorsInRange",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getDeployerCoordinatorsInRange",
        )
        self.getInstanceAtIndex = (
            HyperdriveFactoryGetInstanceAtIndexContractFunction.factory(
                "getInstanceAtIndex",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getInstanceAtIndex",
            )
        )
        self.getInstancesInRange = (
            HyperdriveFactoryGetInstancesInRangeContractFunction.factory(
                "getInstancesInRange",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getInstancesInRange",
            )
        )
        self.getNumberOfDeployerCoordinators = HyperdriveFactoryGetNumberOfDeployerCoordinatorsContractFunction.factory(
            "getNumberOfDeployerCoordinators",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="getNumberOfDeployerCoordinators",
        )
        self.getNumberOfInstances = (
            HyperdriveFactoryGetNumberOfInstancesContractFunction.factory(
                "getNumberOfInstances",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="getNumberOfInstances",
            )
        )
        self.governance = HyperdriveFactoryGovernanceContractFunction.factory(
            "governance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="governance",
        )
        self.hyperdriveGovernance = (
            HyperdriveFactoryHyperdriveGovernanceContractFunction.factory(
                "hyperdriveGovernance",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="hyperdriveGovernance",
            )
        )
        self.isDeployerCoordinator = (
            HyperdriveFactoryIsDeployerCoordinatorContractFunction.factory(
                "isDeployerCoordinator",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="isDeployerCoordinator",
            )
        )
        self.isInstance = HyperdriveFactoryIsInstanceContractFunction.factory(
            "isInstance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="isInstance",
        )
        self.kind = HyperdriveFactoryKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="kind",
        )
        self.linkerCodeHash = (
            HyperdriveFactoryLinkerCodeHashContractFunction.factory(
                "linkerCodeHash",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="linkerCodeHash",
            )
        )
        self.linkerFactory = (
            HyperdriveFactoryLinkerFactoryContractFunction.factory(
                "linkerFactory",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="linkerFactory",
            )
        )
        self.maxCheckpointDuration = (
            HyperdriveFactoryMaxCheckpointDurationContractFunction.factory(
                "maxCheckpointDuration",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="maxCheckpointDuration",
            )
        )
        self.maxCircuitBreakerDelta = (
            HyperdriveFactoryMaxCircuitBreakerDeltaContractFunction.factory(
                "maxCircuitBreakerDelta",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="maxCircuitBreakerDelta",
            )
        )
        self.maxFees = HyperdriveFactoryMaxFeesContractFunction.factory(
            "maxFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="maxFees",
        )
        self.maxFixedAPR = HyperdriveFactoryMaxFixedAPRContractFunction.factory(
            "maxFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="maxFixedAPR",
        )
        self.maxPositionDuration = (
            HyperdriveFactoryMaxPositionDurationContractFunction.factory(
                "maxPositionDuration",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="maxPositionDuration",
            )
        )
        self.maxTimeStretchAPR = (
            HyperdriveFactoryMaxTimeStretchAPRContractFunction.factory(
                "maxTimeStretchAPR",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="maxTimeStretchAPR",
            )
        )
        self.minCheckpointDuration = (
            HyperdriveFactoryMinCheckpointDurationContractFunction.factory(
                "minCheckpointDuration",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="minCheckpointDuration",
            )
        )
        self.minCircuitBreakerDelta = (
            HyperdriveFactoryMinCircuitBreakerDeltaContractFunction.factory(
                "minCircuitBreakerDelta",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="minCircuitBreakerDelta",
            )
        )
        self.minFees = HyperdriveFactoryMinFeesContractFunction.factory(
            "minFees",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="minFees",
        )
        self.minFixedAPR = HyperdriveFactoryMinFixedAPRContractFunction.factory(
            "minFixedAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="minFixedAPR",
        )
        self.minPositionDuration = (
            HyperdriveFactoryMinPositionDurationContractFunction.factory(
                "minPositionDuration",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="minPositionDuration",
            )
        )
        self.minTimeStretchAPR = (
            HyperdriveFactoryMinTimeStretchAPRContractFunction.factory(
                "minTimeStretchAPR",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="minTimeStretchAPR",
            )
        )
        self.name = HyperdriveFactoryNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="name",
        )
        self.removeDeployerCoordinator = (
            HyperdriveFactoryRemoveDeployerCoordinatorContractFunction.factory(
                "removeDeployerCoordinator",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="removeDeployerCoordinator",
            )
        )
        self.sweepCollector = (
            HyperdriveFactorySweepCollectorContractFunction.factory(
                "sweepCollector",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="sweepCollector",
            )
        )
        self.updateCheckpointDurationResolution = HyperdriveFactoryUpdateCheckpointDurationResolutionContractFunction.factory(
            "updateCheckpointDurationResolution",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateCheckpointDurationResolution",
        )
        self.updateCheckpointRewarder = (
            HyperdriveFactoryUpdateCheckpointRewarderContractFunction.factory(
                "updateCheckpointRewarder",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateCheckpointRewarder",
            )
        )
        self.updateDefaultPausers = (
            HyperdriveFactoryUpdateDefaultPausersContractFunction.factory(
                "updateDefaultPausers",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateDefaultPausers",
            )
        )
        self.updateDeployerCoordinatorManager = HyperdriveFactoryUpdateDeployerCoordinatorManagerContractFunction.factory(
            "updateDeployerCoordinatorManager",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateDeployerCoordinatorManager",
        )
        self.updateFeeCollector = (
            HyperdriveFactoryUpdateFeeCollectorContractFunction.factory(
                "updateFeeCollector",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateFeeCollector",
            )
        )
        self.updateGovernance = (
            HyperdriveFactoryUpdateGovernanceContractFunction.factory(
                "updateGovernance",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateGovernance",
            )
        )
        self.updateHyperdriveGovernance = (
            HyperdriveFactoryUpdateHyperdriveGovernanceContractFunction.factory(
                "updateHyperdriveGovernance",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateHyperdriveGovernance",
            )
        )
        self.updateLinkerCodeHash = (
            HyperdriveFactoryUpdateLinkerCodeHashContractFunction.factory(
                "updateLinkerCodeHash",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateLinkerCodeHash",
            )
        )
        self.updateLinkerFactory = (
            HyperdriveFactoryUpdateLinkerFactoryContractFunction.factory(
                "updateLinkerFactory",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateLinkerFactory",
            )
        )
        self.updateMaxCheckpointDuration = HyperdriveFactoryUpdateMaxCheckpointDurationContractFunction.factory(
            "updateMaxCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateMaxCheckpointDuration",
        )
        self.updateMaxCircuitBreakerDelta = HyperdriveFactoryUpdateMaxCircuitBreakerDeltaContractFunction.factory(
            "updateMaxCircuitBreakerDelta",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateMaxCircuitBreakerDelta",
        )
        self.updateMaxFees = (
            HyperdriveFactoryUpdateMaxFeesContractFunction.factory(
                "updateMaxFees",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateMaxFees",
            )
        )
        self.updateMaxFixedAPR = (
            HyperdriveFactoryUpdateMaxFixedAPRContractFunction.factory(
                "updateMaxFixedAPR",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateMaxFixedAPR",
            )
        )
        self.updateMaxPositionDuration = (
            HyperdriveFactoryUpdateMaxPositionDurationContractFunction.factory(
                "updateMaxPositionDuration",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateMaxPositionDuration",
            )
        )
        self.updateMaxTimeStretchAPR = (
            HyperdriveFactoryUpdateMaxTimeStretchAPRContractFunction.factory(
                "updateMaxTimeStretchAPR",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateMaxTimeStretchAPR",
            )
        )
        self.updateMinCheckpointDuration = HyperdriveFactoryUpdateMinCheckpointDurationContractFunction.factory(
            "updateMinCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateMinCheckpointDuration",
        )
        self.updateMinCircuitBreakerDelta = HyperdriveFactoryUpdateMinCircuitBreakerDeltaContractFunction.factory(
            "updateMinCircuitBreakerDelta",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="updateMinCircuitBreakerDelta",
        )
        self.updateMinFees = (
            HyperdriveFactoryUpdateMinFeesContractFunction.factory(
                "updateMinFees",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateMinFees",
            )
        )
        self.updateMinFixedAPR = (
            HyperdriveFactoryUpdateMinFixedAPRContractFunction.factory(
                "updateMinFixedAPR",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateMinFixedAPR",
            )
        )
        self.updateMinPositionDuration = (
            HyperdriveFactoryUpdateMinPositionDurationContractFunction.factory(
                "updateMinPositionDuration",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateMinPositionDuration",
            )
        )
        self.updateMinTimeStretchAPR = (
            HyperdriveFactoryUpdateMinTimeStretchAPRContractFunction.factory(
                "updateMinTimeStretchAPR",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateMinTimeStretchAPR",
            )
        )
        self.updateSweepCollector = (
            HyperdriveFactoryUpdateSweepCollectorContractFunction.factory(
                "updateSweepCollector",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="updateSweepCollector",
            )
        )
        self.version = HyperdriveFactoryVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="version",
        )


class HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for CheckpointDurationResolutionUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CheckpointDurationResolutionUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CheckpointDurationResolutionUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CheckpointDurationResolutionUpdatedEvent.CheckpointDurationResolutionUpdatedEventArgs(
                    newCheckpointDurationResolution=abi_event.args[
                        "newCheckpointDurationResolution"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CheckpointDurationResolutionUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CheckpointDurationResolutionUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CheckpointDurationResolutionUpdatedEvent.CheckpointDurationResolutionUpdatedEventArgs(
                    newCheckpointDurationResolution=abi_event.args[
                        "newCheckpointDurationResolution"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryCheckpointRewarderUpdatedContractEvent(ContractEvent):
    """ContractEvent for CheckpointRewarderUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CheckpointRewarderUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CheckpointRewarderUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CheckpointRewarderUpdatedEvent.CheckpointRewarderUpdatedEventArgs(
                    newCheckpointRewarder=abi_event.args[
                        "newCheckpointRewarder"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CheckpointRewarderUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CheckpointRewarderUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CheckpointRewarderUpdatedEvent.CheckpointRewarderUpdatedEventArgs(
                    newCheckpointRewarder=abi_event.args[
                        "newCheckpointRewarder"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryDefaultPausersUpdatedContractEvent(ContractEvent):
    """ContractEvent for DefaultPausersUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DefaultPausersUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DefaultPausersUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DefaultPausersUpdatedEvent.DefaultPausersUpdatedEventArgs(
                    newDefaultPausers=abi_event.args["newDefaultPausers"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DefaultPausersUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DefaultPausersUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DefaultPausersUpdatedEvent.DefaultPausersUpdatedEventArgs(
                    newDefaultPausers=abi_event.args["newDefaultPausers"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryDeployerCoordinatorAddedContractEvent(ContractEvent):
    """ContractEvent for DeployerCoordinatorAdded."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployerCoordinatorAddedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorAddedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorAddedEvent.DeployerCoordinatorAddedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployerCoordinatorAddedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorAddedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorAddedEvent.DeployerCoordinatorAddedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for DeployerCoordinatorManagerUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployerCoordinatorManagerUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorManagerUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorManagerUpdatedEvent.DeployerCoordinatorManagerUpdatedEventArgs(
                    deployerCoordinatorManager=abi_event.args[
                        "deployerCoordinatorManager"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployerCoordinatorManagerUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorManagerUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorManagerUpdatedEvent.DeployerCoordinatorManagerUpdatedEventArgs(
                    deployerCoordinatorManager=abi_event.args[
                        "deployerCoordinatorManager"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryDeployerCoordinatorRemovedContractEvent(ContractEvent):
    """ContractEvent for DeployerCoordinatorRemoved."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployerCoordinatorRemovedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorRemovedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorRemovedEvent.DeployerCoordinatorRemovedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployerCoordinatorRemovedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorRemovedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorRemovedEvent.DeployerCoordinatorRemovedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryFeeCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for FeeCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[FeeCollectorUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            FeeCollectorUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=FeeCollectorUpdatedEvent.FeeCollectorUpdatedEventArgs(
                    newFeeCollector=abi_event.args["newFeeCollector"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[FeeCollectorUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            FeeCollectorUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=FeeCollectorUpdatedEvent.FeeCollectorUpdatedEventArgs(
                    newFeeCollector=abi_event.args["newFeeCollector"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for GovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[GovernanceUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            GovernanceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=GovernanceUpdatedEvent.GovernanceUpdatedEventArgs(
                    governance=abi_event.args["governance"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[GovernanceUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            GovernanceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=GovernanceUpdatedEvent.GovernanceUpdatedEventArgs(
                    governance=abi_event.args["governance"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for HyperdriveGovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[HyperdriveGovernanceUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            HyperdriveGovernanceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=HyperdriveGovernanceUpdatedEvent.HyperdriveGovernanceUpdatedEventArgs(
                    hyperdriveGovernance=abi_event.args["hyperdriveGovernance"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[HyperdriveGovernanceUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            HyperdriveGovernanceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=HyperdriveGovernanceUpdatedEvent.HyperdriveGovernanceUpdatedEventArgs(
                    hyperdriveGovernance=abi_event.args["hyperdriveGovernance"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryLinkerCodeHashUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerCodeHashUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LinkerCodeHashUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LinkerCodeHashUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LinkerCodeHashUpdatedEvent.LinkerCodeHashUpdatedEventArgs(
                    newLinkerCodeHash=abi_event.args["newLinkerCodeHash"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LinkerCodeHashUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LinkerCodeHashUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LinkerCodeHashUpdatedEvent.LinkerCodeHashUpdatedEventArgs(
                    newLinkerCodeHash=abi_event.args["newLinkerCodeHash"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryLinkerFactoryUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerFactoryUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LinkerFactoryUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LinkerFactoryUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LinkerFactoryUpdatedEvent.LinkerFactoryUpdatedEventArgs(
                    newLinkerFactory=abi_event.args["newLinkerFactory"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LinkerFactoryUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LinkerFactoryUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LinkerFactoryUpdatedEvent.LinkerFactoryUpdatedEventArgs(
                    newLinkerFactory=abi_event.args["newLinkerFactory"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxCheckpointDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxCheckpointDurationUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxCheckpointDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxCheckpointDurationUpdatedEvent.MaxCheckpointDurationUpdatedEventArgs(
                    newMaxCheckpointDuration=abi_event.args[
                        "newMaxCheckpointDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxCheckpointDurationUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxCheckpointDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxCheckpointDurationUpdatedEvent.MaxCheckpointDurationUpdatedEventArgs(
                    newMaxCheckpointDuration=abi_event.args[
                        "newMaxCheckpointDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for MaxCircuitBreakerDeltaUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxCircuitBreakerDeltaUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxCircuitBreakerDeltaUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxCircuitBreakerDeltaUpdatedEvent.MaxCircuitBreakerDeltaUpdatedEventArgs(
                    newMaxCircuitBreakerDelta=abi_event.args[
                        "newMaxCircuitBreakerDelta"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxCircuitBreakerDeltaUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxCircuitBreakerDeltaUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxCircuitBreakerDeltaUpdatedEvent.MaxCircuitBreakerDeltaUpdatedEventArgs(
                    newMaxCircuitBreakerDelta=abi_event.args[
                        "newMaxCircuitBreakerDelta"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMaxFeesUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxFeesUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxFeesUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxFeesUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxFeesUpdatedEvent.MaxFeesUpdatedEventArgs(
                    newMaxFees=abi_event.args["newMaxFees"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxFeesUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxFeesUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxFeesUpdatedEvent.MaxFeesUpdatedEventArgs(
                    newMaxFees=abi_event.args["newMaxFees"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMaxFixedAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxFixedAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxFixedAPRUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxFixedAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxFixedAPRUpdatedEvent.MaxFixedAPRUpdatedEventArgs(
                    newMaxFixedAPR=abi_event.args["newMaxFixedAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxFixedAPRUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxFixedAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxFixedAPRUpdatedEvent.MaxFixedAPRUpdatedEventArgs(
                    newMaxFixedAPR=abi_event.args["newMaxFixedAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMaxPositionDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxPositionDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxPositionDurationUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxPositionDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxPositionDurationUpdatedEvent.MaxPositionDurationUpdatedEventArgs(
                    newMaxPositionDuration=abi_event.args[
                        "newMaxPositionDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxPositionDurationUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxPositionDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxPositionDurationUpdatedEvent.MaxPositionDurationUpdatedEventArgs(
                    newMaxPositionDuration=abi_event.args[
                        "newMaxPositionDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxTimeStretchAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxTimeStretchAPRUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxTimeStretchAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxTimeStretchAPRUpdatedEvent.MaxTimeStretchAPRUpdatedEventArgs(
                    newMaxTimeStretchAPR=abi_event.args["newMaxTimeStretchAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxTimeStretchAPRUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxTimeStretchAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxTimeStretchAPRUpdatedEvent.MaxTimeStretchAPRUpdatedEventArgs(
                    newMaxTimeStretchAPR=abi_event.args["newMaxTimeStretchAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinCheckpointDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinCheckpointDurationUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinCheckpointDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinCheckpointDurationUpdatedEvent.MinCheckpointDurationUpdatedEventArgs(
                    newMinCheckpointDuration=abi_event.args[
                        "newMinCheckpointDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinCheckpointDurationUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinCheckpointDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinCheckpointDurationUpdatedEvent.MinCheckpointDurationUpdatedEventArgs(
                    newMinCheckpointDuration=abi_event.args[
                        "newMinCheckpointDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for MinCircuitBreakerDeltaUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinCircuitBreakerDeltaUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinCircuitBreakerDeltaUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinCircuitBreakerDeltaUpdatedEvent.MinCircuitBreakerDeltaUpdatedEventArgs(
                    newMinCircuitBreakerDelta=abi_event.args[
                        "newMinCircuitBreakerDelta"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinCircuitBreakerDeltaUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinCircuitBreakerDeltaUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinCircuitBreakerDeltaUpdatedEvent.MinCircuitBreakerDeltaUpdatedEventArgs(
                    newMinCircuitBreakerDelta=abi_event.args[
                        "newMinCircuitBreakerDelta"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMinFeesUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinFeesUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinFeesUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinFeesUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinFeesUpdatedEvent.MinFeesUpdatedEventArgs(
                    newMinFees=abi_event.args["newMinFees"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinFeesUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinFeesUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinFeesUpdatedEvent.MinFeesUpdatedEventArgs(
                    newMinFees=abi_event.args["newMinFees"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMinFixedAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinFixedAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinFixedAPRUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinFixedAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinFixedAPRUpdatedEvent.MinFixedAPRUpdatedEventArgs(
                    newMinFixedAPR=abi_event.args["newMinFixedAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinFixedAPRUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinFixedAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinFixedAPRUpdatedEvent.MinFixedAPRUpdatedEventArgs(
                    newMinFixedAPR=abi_event.args["newMinFixedAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMinPositionDurationUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinPositionDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinPositionDurationUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinPositionDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinPositionDurationUpdatedEvent.MinPositionDurationUpdatedEventArgs(
                    newMinPositionDuration=abi_event.args[
                        "newMinPositionDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinPositionDurationUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinPositionDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinPositionDurationUpdatedEvent.MinPositionDurationUpdatedEventArgs(
                    newMinPositionDuration=abi_event.args[
                        "newMinPositionDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinTimeStretchAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinTimeStretchAPRUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinTimeStretchAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinTimeStretchAPRUpdatedEvent.MinTimeStretchAPRUpdatedEventArgs(
                    newMinTimeStretchAPR=abi_event.args["newMinTimeStretchAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinTimeStretchAPRUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinTimeStretchAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinTimeStretchAPRUpdatedEvent.MinTimeStretchAPRUpdatedEventArgs(
                    newMinTimeStretchAPR=abi_event.args["newMinTimeStretchAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactorySweepCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for SweepCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepCollectorUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepCollectorUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepCollectorUpdatedEvent.SweepCollectorUpdatedEventArgs(
                    newSweepCollector=abi_event.args["newSweepCollector"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepCollectorUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepCollectorUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepCollectorUpdatedEvent.SweepCollectorUpdatedEventArgs(
                    newSweepCollector=abi_event.args["newSweepCollector"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveFactory contract."""

    CheckpointDurationResolutionUpdated: (
        HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent
    )

    CheckpointRewarderUpdated: (
        HyperdriveFactoryCheckpointRewarderUpdatedContractEvent
    )

    DefaultPausersUpdated: HyperdriveFactoryDefaultPausersUpdatedContractEvent

    Deployed: HyperdriveFactoryDeployedContractEvent

    DeployerCoordinatorAdded: (
        HyperdriveFactoryDeployerCoordinatorAddedContractEvent
    )

    DeployerCoordinatorManagerUpdated: (
        HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent
    )

    DeployerCoordinatorRemoved: (
        HyperdriveFactoryDeployerCoordinatorRemovedContractEvent
    )

    FeeCollectorUpdated: HyperdriveFactoryFeeCollectorUpdatedContractEvent

    GovernanceUpdated: HyperdriveFactoryGovernanceUpdatedContractEvent

    HyperdriveGovernanceUpdated: (
        HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent
    )

    LinkerCodeHashUpdated: HyperdriveFactoryLinkerCodeHashUpdatedContractEvent

    LinkerFactoryUpdated: HyperdriveFactoryLinkerFactoryUpdatedContractEvent

    MaxCheckpointDurationUpdated: (
        HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent
    )

    MaxCircuitBreakerDeltaUpdated: (
        HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent
    )

    MaxFeesUpdated: HyperdriveFactoryMaxFeesUpdatedContractEvent

    MaxFixedAPRUpdated: HyperdriveFactoryMaxFixedAPRUpdatedContractEvent

    MaxPositionDurationUpdated: (
        HyperdriveFactoryMaxPositionDurationUpdatedContractEvent
    )

    MaxTimeStretchAPRUpdated: (
        HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent
    )

    MinCheckpointDurationUpdated: (
        HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent
    )

    MinCircuitBreakerDeltaUpdated: (
        HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent
    )

    MinFeesUpdated: HyperdriveFactoryMinFeesUpdatedContractEvent

    MinFixedAPRUpdated: HyperdriveFactoryMinFixedAPRUpdatedContractEvent

    MinPositionDurationUpdated: (
        HyperdriveFactoryMinPositionDurationUpdatedContractEvent
    )

    MinTimeStretchAPRUpdated: (
        HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent
    )

    SweepCollectorUpdated: HyperdriveFactorySweepCollectorUpdatedContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.CheckpointDurationResolutionUpdated = HyperdriveFactoryCheckpointDurationResolutionUpdatedContractEvent.factory(
            "CheckpointDurationResolutionUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="CheckpointDurationResolutionUpdated",
        )
        self.CheckpointRewarderUpdated = (
            HyperdriveFactoryCheckpointRewarderUpdatedContractEvent.factory(
                "CheckpointRewarderUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CheckpointRewarderUpdated",
            )
        )
        self.DefaultPausersUpdated = (
            HyperdriveFactoryDefaultPausersUpdatedContractEvent.factory(
                "DefaultPausersUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DefaultPausersUpdated",
            )
        )
        self.Deployed = HyperdriveFactoryDeployedContractEvent.factory(
            "Deployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="Deployed",
        )
        self.DeployerCoordinatorAdded = (
            HyperdriveFactoryDeployerCoordinatorAddedContractEvent.factory(
                "DeployerCoordinatorAdded",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DeployerCoordinatorAdded",
            )
        )
        self.DeployerCoordinatorManagerUpdated = HyperdriveFactoryDeployerCoordinatorManagerUpdatedContractEvent.factory(
            "DeployerCoordinatorManagerUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="DeployerCoordinatorManagerUpdated",
        )
        self.DeployerCoordinatorRemoved = (
            HyperdriveFactoryDeployerCoordinatorRemovedContractEvent.factory(
                "DeployerCoordinatorRemoved",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DeployerCoordinatorRemoved",
            )
        )
        self.FeeCollectorUpdated = (
            HyperdriveFactoryFeeCollectorUpdatedContractEvent.factory(
                "FeeCollectorUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="FeeCollectorUpdated",
            )
        )
        self.GovernanceUpdated = (
            HyperdriveFactoryGovernanceUpdatedContractEvent.factory(
                "GovernanceUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="GovernanceUpdated",
            )
        )
        self.HyperdriveGovernanceUpdated = (
            HyperdriveFactoryHyperdriveGovernanceUpdatedContractEvent.factory(
                "HyperdriveGovernanceUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="HyperdriveGovernanceUpdated",
            )
        )
        self.LinkerCodeHashUpdated = (
            HyperdriveFactoryLinkerCodeHashUpdatedContractEvent.factory(
                "LinkerCodeHashUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="LinkerCodeHashUpdated",
            )
        )
        self.LinkerFactoryUpdated = (
            HyperdriveFactoryLinkerFactoryUpdatedContractEvent.factory(
                "LinkerFactoryUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="LinkerFactoryUpdated",
            )
        )
        self.MaxCheckpointDurationUpdated = (
            HyperdriveFactoryMaxCheckpointDurationUpdatedContractEvent.factory(
                "MaxCheckpointDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxCheckpointDurationUpdated",
            )
        )
        self.MaxCircuitBreakerDeltaUpdated = (
            HyperdriveFactoryMaxCircuitBreakerDeltaUpdatedContractEvent.factory(
                "MaxCircuitBreakerDeltaUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxCircuitBreakerDeltaUpdated",
            )
        )
        self.MaxFeesUpdated = (
            HyperdriveFactoryMaxFeesUpdatedContractEvent.factory(
                "MaxFeesUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxFeesUpdated",
            )
        )
        self.MaxFixedAPRUpdated = (
            HyperdriveFactoryMaxFixedAPRUpdatedContractEvent.factory(
                "MaxFixedAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxFixedAPRUpdated",
            )
        )
        self.MaxPositionDurationUpdated = (
            HyperdriveFactoryMaxPositionDurationUpdatedContractEvent.factory(
                "MaxPositionDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxPositionDurationUpdated",
            )
        )
        self.MaxTimeStretchAPRUpdated = (
            HyperdriveFactoryMaxTimeStretchAPRUpdatedContractEvent.factory(
                "MaxTimeStretchAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxTimeStretchAPRUpdated",
            )
        )
        self.MinCheckpointDurationUpdated = (
            HyperdriveFactoryMinCheckpointDurationUpdatedContractEvent.factory(
                "MinCheckpointDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinCheckpointDurationUpdated",
            )
        )
        self.MinCircuitBreakerDeltaUpdated = (
            HyperdriveFactoryMinCircuitBreakerDeltaUpdatedContractEvent.factory(
                "MinCircuitBreakerDeltaUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinCircuitBreakerDeltaUpdated",
            )
        )
        self.MinFeesUpdated = (
            HyperdriveFactoryMinFeesUpdatedContractEvent.factory(
                "MinFeesUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinFeesUpdated",
            )
        )
        self.MinFixedAPRUpdated = (
            HyperdriveFactoryMinFixedAPRUpdatedContractEvent.factory(
                "MinFixedAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinFixedAPRUpdated",
            )
        )
        self.MinPositionDurationUpdated = (
            HyperdriveFactoryMinPositionDurationUpdatedContractEvent.factory(
                "MinPositionDurationUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinPositionDurationUpdated",
            )
        )
        self.MinTimeStretchAPRUpdated = (
            HyperdriveFactoryMinTimeStretchAPRUpdatedContractEvent.factory(
                "MinTimeStretchAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinTimeStretchAPRUpdated",
            )
        )
        self.SweepCollectorUpdated = (
            HyperdriveFactorySweepCollectorUpdatedContractEvent.factory(
                "SweepCollectorUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="SweepCollectorUpdated",
            )
        )


class HyperdriveFactoryContract(Contract):
    """A web3.py Contract class for the HyperdriveFactory contract."""

    abi: ABI = hyperdrivefactory_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x6080604052600260015534801562000015575f80fd5b5060405162004012380380620040128339810160408190526200003891620006f6565b5f6200004582826200094e565b508160e0015182610100015110806200007357508160e0015182610100015162000070919062000a1a565b15155b156200009257604051630219d66360e11b815260040160405180910390fd5b610100820151600b8190556101208301511080620000c557508160e00151826101200151620000c2919062000a1a565b15155b15620000e45760405163f9c0959d60e01b815260040160405180910390fd5b610120820151600c81905561014083015110806200011757508160e0015182610140015162000114919062000a1a565b15155b156200013657604051633007ad0160e11b815260040160405180910390fd5b610140820151600d81905561016083015110806200016957508160e0015182610160015162000166919062000a1a565b15155b15620001885760405163cfb699cb60e01b815260040160405180910390fd5b610160820151600e556101a08201516101808301511115620001bd5760405163ef9bc65f60e01b815260040160405180910390fd5b610180820151600f556101a08201516010556101e08201516101c08301511115620001fb576040516330554de160e01b815260040160405180910390fd5b6101c08201516011556101e0820151601255610220820151610200830151111562000239576040516383ebdfb760e01b815260040160405180910390fd5b61020082015160135561022082015160145561026082015151670de0b6b3a76400001080620002785750670de0b6b3a764000082610260015160200151115b80620002945750670de0b6b3a764000082610260015160400151115b80620002b05750670de0b6b3a764000082610260015160600151115b15620002cf5760405163161071fb60e11b815260040160405180910390fd5b610260820151805160198190556020820151601a556040820151601b55606090910151601c556102408301515111806200031a57508161026001516020015182610240015160200151115b806200033757508161026001516040015182610240015160400151115b806200035457508161026001516060015182610240015160600151115b1562000373576040516315b05a8f60e01b815260040160405180910390fd5b61024082015180516015556020808201516016556040808301516017556060928301516018558451600280546001600160a01b03199081166001600160a01b03938416179091558387015160038054831691841691909117905591860151600480548416918316919091179055608086015160078054841691831691909117905560a086015160088054841691831691909117905560c08601516009805490931691161790559083015180516200042f92601d9201906200046c565b5050610280810151600580546001600160a01b0319166001600160a01b039092169190911790556102a081015160065560e00151600a5562000a3a565b828054828255905f5260205f20908101928215620004c2579160200282015b82811115620004c257825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906200048b565b50620004d0929150620004d4565b5090565b5b80821115620004d0575f8155600101620004d5565b634e487b7160e01b5f52604160045260245ffd5b6040516102c081016001600160401b0381118282101715620005245762000524620004ea565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620005555762000555620004ea565b604052919050565b80516001600160a01b038116811462000574575f80fd5b919050565b5f82601f83011262000589575f80fd5b815160206001600160401b03821115620005a757620005a7620004ea565b8160051b620005b88282016200052a565b9283528481018201928281019087851115620005d2575f80fd5b83870192505b84831015620005fc57620005ec836200055d565b82529183019190830190620005d8565b979650505050505050565b5f6080828403121562000618575f80fd5b604051608081016001600160401b03811182821017156200063d576200063d620004ea565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f82601f8301126200067e575f80fd5b81516001600160401b038111156200069a576200069a620004ea565b6020620006b0601f8301601f191682016200052a565b8281528582848701011115620006c4575f80fd5b5f5b83811015620006e3578581018301518282018401528201620006c6565b505f928101909101919091529392505050565b5f806040838503121562000708575f80fd5b82516001600160401b03808211156200071f575f80fd5b90840190610380828703121562000734575f80fd5b6200073e620004fe565b62000749836200055d565b815262000759602084016200055d565b60208201526200076c604084016200055d565b604082015260608301518281111562000783575f80fd5b620007918882860162000579565b606083015250620007a5608084016200055d565b6080820152620007b860a084016200055d565b60a0820152620007cb60c084016200055d565b60c082015260e08381015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e0808401519082015261020080840151908201526102208084015190820152610240620008598882860162000607565b908201526200086d876102c0850162000607565b6102608201526200088261034084016200055d565b61028082015261036092909201516102a0830152602085015191935080821115620008ab575f80fd5b50620008ba858286016200066e565b9150509250929050565b600181811c90821680620008d957607f821691505b602082108103620008f857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200094957805f5260205f20601f840160051c81016020851015620009255750805b601f840160051c820191505b8181101562000946575f815560010162000931565b50505b505050565b81516001600160401b038111156200096a576200096a620004ea565b62000982816200097b8454620008c4565b84620008fe565b602080601f831160018114620009b8575f8415620009a05750858301515b5f19600386901b1c1916600185901b17855562000a12565b5f85815260208120601f198616915b82811015620009e857888601518255948401946001909101908401620009c7565b508582101562000a0657878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f8262000a3557634e487b7160e01b5f52601260045260245ffd5b500690565b6135ca8062000a485f395ff3fe608060405260043610610395575f3560e01c80638e127cf5116101de578063d2c35ce811610108578063e4e7148f1161009d578063ec895f111161006d578063ec895f1114610a9d578063f259645814610abc578063f8c09e5914610adb578063fe3d5aeb14610b09575f80fd5b8063e4e7148f14610a2c578063e71f34b314610a4b578063e83e34b114610a6a578063eb71f66c14610a7e575f80fd5b8063dd2b8fbb116100d8578063dd2b8fbb146109c5578063e0e2daaa146109e4578063e1b39c80146109f9578063e333155514610a0d575f80fd5b8063d2c35ce81461095d578063d6f501691461097c578063daac24da14610991578063daf012e6146109b0575f80fd5b8063b25612631161017e578063c415b95c1161014e578063c415b95c146108ff578063c905a4b51461091e578063d0f96b9214610933578063d23d7ea314610948575f80fd5b8063b25612631461088b578063bc30e7a1146108aa578063bf9bd5cd146108c9578063c1722563146108de575f80fd5b806399623bb1116101b957806399623bb11461081a5780639af2526214610839578063a64c90bf14610858578063a98a46db1461086c575f80fd5b80638e127cf5146107c75780638efc0986146107e657806397b0e8ce146107fb575f80fd5b80634554f9a9116102bf578063628027a31161025f57806383b361e81161022f57806383b361e81461074b57806384c19aab1461076a57806385229785146107895780638627a4f0146107a8575f80fd5b8063628027a3146106bb5780636b44e6be146106da5780636e95d67c146107185780636f6d5c4a1461072c575f80fd5b80634fbfee771161029a5780634fbfee771461063657806354fd4d50146106555780635720c9d5146106875780635aa6e6751461069c575f80fd5b80634554f9a9146105ed578063488007601461060257806349f13de714610617575f80fd5b80631ecda0fe116103355780632e7cd971116103055780632e7cd9711461057d5780633e2d201414610590578063411c3035146105af578063421caba8146105ce575f80fd5b80631ecda0fe146104e95780632885e3ac1461050c5780632907d3dd1461052b5780632b58f4181461054a575f80fd5b806310d1dc3e1161037057806310d1dc3e1461046057806311e77bfe1461047f5780631978ebcf1461049e5780631b59be0c146104bd575f80fd5b806304baa00b146103c357806306fdde031461041557806310780f7314610429575f80fd5b366103bf576002600154036103bd57604051630aac75b560e31b815260040160405180910390fd5b005b5f80fd5b3480156103ce575f80fd5b506103ff6040518060400160405280601181526020017048797065726472697665466163746f727960781b81525081565b60405161040c9190612c3a565b60405180910390f35b348015610420575f80fd5b506103ff610b28565b348015610434575f80fd5b50600854610448906001600160a01b031681565b6040516001600160a01b03909116815260200161040c565b34801561046b575f80fd5b506103bd61047a366004612c4c565b610bb3565b34801561048a575f80fd5b506103bd610499366004612c5c565b610ccc565b3480156104a9575f80fd5b506103bd6104b8366004612c5c565b610da5565b3480156104c8575f80fd5b506104dc6104d7366004612c73565b610e27565b60405161040c9190612ce2565b3480156104f4575f80fd5b506104fe600f5481565b60405190815260200161040c565b348015610517575f80fd5b506103bd610526366004612c4c565b610eff565b348015610536575f80fd5b506103bd610545366004612c5c565b611065565b348015610555575f80fd5b50610448610564366004612d55565b602080525f90815260409020546001600160a01b031681565b61044861058b36600461301f565b6110e7565b34801561059b575f80fd5b506103bd6105aa366004612d55565b61150e565b3480156105ba575f80fd5b506103bd6105c93660046130f7565b611581565b3480156105d9575f80fd5b506103bd6105e8366004612d55565b611749565b3480156105f8575f80fd5b506104fe60105481565b34801561060d575f80fd5b506104fe60145481565b348015610622575f80fd5b50610448610631366004613121565b611850565b348015610641575f80fd5b506103bd610650366004612c5c565b61193d565b348015610660575f80fd5b506103ff60405180604001604052806007815260200166076312e302e32360cc1b81525081565b348015610692575f80fd5b506104fe600b5481565b3480156106a7575f80fd5b50600254610448906001600160a01b031681565b3480156106c6575f80fd5b506103bd6106d5366004612c5c565b611999565b3480156106e5575f80fd5b506107086106f4366004612d55565b60226020525f908152604090205460ff1681565b604051901515815260200161040c565b348015610723575f80fd5b506021546104fe565b348015610737575f80fd5b506103bd610746366004612c5c565b611a1b565b348015610756575f80fd5b506103bd610765366004612c5c565b611abf565b348015610775575f80fd5b506103bd610784366004612c5c565b611b41565b348015610794575f80fd5b506103bd6107a3366004612d55565b611bc3565b3480156107b3575f80fd5b506103bd6107c2366004612d55565b611c36565b3480156107d2575f80fd5b506103bd6107e1366004612c5c565b611ca9565b3480156107f1575f80fd5b506104fe600e5481565b348015610806575f80fd5b506103bd610815366004612c5c565b611d4d565b348015610825575f80fd5b50600554610448906001600160a01b031681565b348015610844575f80fd5b506103bd610853366004612c73565b611dcf565b348015610863575f80fd5b506104dc611e37565b348015610877575f80fd5b506103bd610886366004612d55565b611e97565b348015610896575f80fd5b506103bd6108a5366004612d55565b611f0a565b3480156108b5575f80fd5b506104dc6108c43660046131af565b611f7d565b3480156108d4575f80fd5b506104fe60125481565b3480156108e9575f80fd5b506108f261207c565b60405161040c91906131cf565b34801561090a575f80fd5b50600754610448906001600160a01b031681565b348015610929575f80fd5b506104fe60065481565b34801561093e575f80fd5b506104fe600a5481565b348015610953575f80fd5b506104fe60115481565b348015610968575f80fd5b506103bd610977366004612d55565b6120d0565b348015610987575f80fd5b506104fe60135481565b34801561099c575f80fd5b506104486109ab366004612c5c565b612143565b3480156109bb575f80fd5b506104fe600d5481565b3480156109d0575f80fd5b506103bd6109df366004612d55565b612171565b3480156109ef575f80fd5b506104fe600c5481565b348015610a04575f80fd5b50601e546104fe565b348015610a18575f80fd5b50600454610448906001600160a01b031681565b348015610a37575f80fd5b50600354610448906001600160a01b031681565b348015610a56575f80fd5b506103bd610a65366004612c5c565b6121e4565b348015610a75575f80fd5b506108f2612288565b348015610a89575f80fd5b506103bd610a98366004612c5c565b6122dc565b348015610aa8575f80fd5b506104dc610ab73660046131af565b612374565b348015610ac7575f80fd5b50600954610448906001600160a01b031681565b348015610ae6575f80fd5b50610708610af5366004612d55565b601f6020525f908152604090205460ff1681565b348015610b14575f80fd5b50610448610b23366004612c5c565b612473565b5f8054610b34906131fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610b60906131fa565b8015610bab5780601f10610b8257610100808354040283529160200191610bab565b820191905f5260205f20905b815481529060010190602001808311610b8e57829003601f168201915b505050505081565b6002546001600160a01b03163314610bdd576040516282b42960e81b815260040160405180910390fd5b60408051608081018252601954808252601a546020830152601b5492820192909252601c5460608201529082351180610c1d575080602001518260200135115b80610c2f575080604001518260400135115b80610c41575080606001518260600135115b15610c5f576040516315b05a8f60e01b815260040160405180910390fd5b81356015819055602080840135601681905560408086013560178190556060808801356018819055835196875294860193909352908401528201527fe1c45f8aeb543f30b37cc2fccfbac0f32cc8f234284df921d71cff04e51ef421906080015b60405180910390a15050565b6002546001600160a01b03163314610cf6576040516282b42960e81b815260040160405180910390fd5b80600b54610d04919061322c565b151580610d1d575080600c54610d1a919061322c565b15155b80610d34575080600d54610d31919061322c565b15155b80610d4b575080600e54610d48919061322c565b15155b15610d69576040516311b75c1560e31b815260040160405180910390fd5b600a8190556040518181527f04ed835b488b4fcf0a212a46ed67cbbffc2fc81b5cb6a12c546572cbf7b7e06a906020015b60405180910390a150565b6002546001600160a01b03163314610dcf576040516282b42960e81b815260040160405180910390fd5b601254811115610df257604051631670f79760e01b815260040160405180910390fd5b60118190556040518181527faab0ee9100629c405a4d75336e1640cc81e0608fb0d7f17389c06ee8d4f0219190602001610d9a565b60215460609067ffffffffffffffff811115610e4557610e45612d70565b604051908082528060200260200182016040528015610e6e578160200160208202803683370190505b5090505f5b82811015610ef75760205f858584818110610e9057610e9061324b565b9050602002016020810190610ea59190612d55565b6001600160a01b03908116825260208201929092526040015f20548351911690839083908110610ed757610ed761324b565b6001600160a01b0390921660209283029190910190910152600101610e73565b505b92915050565b6002546001600160a01b03163314610f29576040516282b42960e81b815260040160405180910390fd5b6040805160808101825260155481526016546020820152601754918101919091526018546060820152670de0b6b3a764000082351180610f745750670de0b6b3a76400008260200135115b80610f8a5750670de0b6b3a76400008260400135115b80610fa05750670de0b6b3a76400008260600135115b80610fac575080518235105b80610fbe575080602001518260200135105b80610fd0575080604001518260400135105b80610fe2575080606001518260600135105b156110005760405163161071fb60e11b815260040160405180910390fd5b81356019819055602080840135601a819055604080860135601b819055606080880135601c819055835196875294860193909352908401528201527f8c6093c7e65dd862e88162770c4e156e8a0da57d25d961e0fb6f28cfb7ff89a790608001610cc0565b6002546001600160a01b0316331461108f576040516282b42960e81b815260040160405180910390fd5b6010548111156110b2576040516328a2d9a960e01b815260040160405180910390fd5b600f8190556040518181527f41f729b931ad8e33d697fff6bc6736a1ac6ee09e8265efae2794ac1635c217a690602001610d9a565b6001600160a01b0389165f908152601f602052604081205460ff1661111f57604051636e623f0f60e01b815260040160405180910390fd5b61112a888686612487565b60408051336020808301919091528183018e905282518083038401815260608301938490528051910120631d321d7560e31b9092525f916001600160a01b038d169163e990eba891611186918e908e908e908a90606401613370565b6020604051808303815f875af11580156111a2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111c691906133bf565b90508a60205f836001600160a01b03166001600160a01b031681526020019081526020015f205f6101000a8154816001600160a01b0302191690836001600160a01b0316021790555060045f9054906101000a90046001600160a01b03168961014001906001600160a01b031690816001600160a01b0316815250508a6001600160a01b03167fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed234465828c8c8c60405161128194939291906133da565b60405180910390a26021805460018082019092557f3a6357012c1a3ae0a17d304c9920310382d968ebcc4b1771f41c6b304205b5700180546001600160a01b0319166001600160a01b038481169182179092555f90815260226020908152604091829020805460ff1916851790559280558051339381019390935282018e90528c16906316abfc7090349060600160405160208183030381529060405280519060200120338b8b8a6040518763ffffffff1660e01b815260040161134995949392919061342b565b60206040518083038185885af1158015611365573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061138a919061348d565b5060026001555f5b601d5481101561143057816001600160a01b0316637180c8ca601d83815481106113be576113be61324b565b5f9182526020909120015460405160e083901b6001600160e01b03191681526001600160a01b039091166004820152600160248201526044015f604051808303815f87803b15801561140e575f80fd5b505af1158015611420573d5f803e3d5ffd5b5050600190920191506113929050565b506004805460405163ab033ea960e01b81526001600160a01b039182169281019290925282169063ab033ea9906024015f604051808303815f87803b158015611477575f80fd5b505af1158015611489573d5f803e3d5ffd5b5047925050811590506114fe576040515f90339083908381818185875af1925050503d805f81146114d5576040519150601f19603f3d011682016040523d82523d5f602084013e6114da565b606091505b50509050806114fc576040516312171d8360e31b815260040160405180910390fd5b505b509b9a5050505050505050505050565b6002546001600160a01b03163314611538576040516282b42960e81b815260040160405180910390fd5b600980546001600160a01b0319166001600160a01b0383169081179091556040517fae062fb82c932c653cd44617343ecda1d13e375e0d6f20d969c944fbda1963d3905f90a250565b6002546001600160a01b031633148015906115a757506003546001600160a01b03163314155b156115c4576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0382165f908152601f602052604090205460ff166115fc57604051634bf121ab60e01b815260040160405180910390fd5b816001600160a01b0316601e82815481106116195761161961324b565b5f918252602090912001546001600160a01b03161461164b57604051630f2700cb60e21b815260040160405180910390fd5b6001600160a01b0382165f908152601f60205260409020805460ff19169055601e805461167a906001906134b8565b8154811061168a5761168a61324b565b5f91825260209091200154601e80546001600160a01b0390921691839081106116b5576116b561324b565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550601e8054806116f1576116f16134cb565b5f8281526020812082015f1990810180546001600160a01b03191690559091019091556040516001600160a01b038416917f709b7450bfafda93efd91d29149870a794637ac9d696ca61625fd2f53548afe091a25050565b6002546001600160a01b0316331480159061176f57506003546001600160a01b03163314155b1561178c576040516282b42960e81b815260040160405180910390fd5b6001600160a01b0381165f908152601f602052604090205460ff16156117c55760405163bd34634f60e01b815260040160405180910390fd5b6001600160a01b0381165f818152601f6020526040808220805460ff19166001908117909155601e8054918201815583527f50bb669a95c7b50b7e8a6f09454034b2b14cf2b85c730dca9a539ca82cb6e3500180546001600160a01b03191684179055517f16ce88285cfd59829a5aa04370a5ec8090a18c14e7e7fb9d4b12a42291c098e39190a250565b6001600160a01b0387165f908152601f602052604081205460ff1661188857604051636e623f0f60e01b815260040160405180910390fd5b611893878686612487565b60408051336020808301919091528183018c90528251808303840181526060830193849052805191012063182a20c360e31b9092525f916001600160a01b038b169163c1510618916118ef918c908c908a908a906064016134df565b6020604051808303815f875af115801561190b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061192f91906133bf565b9a9950505050505050505050565b6002546001600160a01b03163314611967576040516282b42960e81b815260040160405180910390fd5b600681905560405181907f395a61259037298d1c4cd4bf177b64ad5995d38a9394573fcd9060d649314ad0905f90a250565b6002546001600160a01b031633146119c3576040516282b42960e81b815260040160405180910390fd5b6013548110156119e657604051630a35539d60e41b815260040160405180910390fd5b60148190556040518181527fa9e7961bb3342715dbecc208087a6a9df8986d524b3a0a829fd90f5a2f5ba53e90602001610d9a565b6002546001600160a01b03163314611a45576040516282b42960e81b815260040160405180910390fd5b600b54811080611a605750600a54611a5d908261322c565b15155b80611a6c5750600d5481115b15611a8a5760405163f9c0959d60e01b815260040160405180910390fd5b600c8190556040518181527f31407ddd1722f500b8aa2c18e112398626dd7c2869a5f80731ec30b244d9b5f290602001610d9a565b6002546001600160a01b03163314611ae9576040516282b42960e81b815260040160405180910390fd5b601454811115611b0c57604051635a8f655760e01b815260040160405180910390fd5b60138190556040518181527f490eb2a91746aa933c9ffe2f7939aa06498f3259139f8805f008b12c8c697a4690602001610d9a565b6002546001600160a01b03163314611b6b576040516282b42960e81b815260040160405180910390fd5b600f54811015611b8e57604051637edc061360e11b815260040160405180910390fd5b60108190556040518181527f0e56d83f54e6f5b08716a54b3abdb59b3025bf12c1875c87ab98ab081d6f838190602001610d9a565b6002546001600160a01b03163314611bed576040516282b42960e81b815260040160405180910390fd5b600580546001600160a01b0319166001600160a01b0383169081179091556040517f03aa5b0fb65014eea89fda04a7bc11742014881f3c078f2c75b7226ce10d9418905f90a250565b6002546001600160a01b03163314611c60576040516282b42960e81b815260040160405180910390fd5b600880546001600160a01b0319166001600160a01b0383169081179091556040517fc049058b1df2dd8902739ceb78992df12fa8369c06c450b3c6787137b452fdd2905f90a250565b6002546001600160a01b03163314611cd3576040516282b42960e81b815260040160405180910390fd5b600a54811080611cee5750600a54611ceb908261322c565b15155b80611cfa5750600c5481115b15611d1857604051630219d66360e11b815260040160405180910390fd5b600b8190556040518181527f6f8175cdbac1b4d238abba24a17d2554d7b9750bbeda6414e191c478384b763190602001610d9a565b6002546001600160a01b03163314611d77576040516282b42960e81b815260040160405180910390fd5b601154811015611d9a5760405163019cfb7b60e61b815260040160405180910390fd5b60128190556040518181527f4fa35c11ce9a45ae882c154ecb53ab5cac52a74a5b9b0373be36deb30c78297890602001610d9a565b6002546001600160a01b03163314611df9576040516282b42960e81b815260040160405180910390fd5b611e05601d8383612b8b565b507f2a85276cf604a3822e19b29a3e97aebfbc47a19025c2e8f6e80b3af774dcbc388282604051610cc092919061351d565b6060601d805480602002602001604051908101604052809291908181526020018280548015611e8d57602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311611e6f575b5050505050905090565b6002546001600160a01b03163314611ec1576040516282b42960e81b815260040160405180910390fd5b600380546001600160a01b0319166001600160a01b0383169081179091556040517f6f717fb0ab51206dea4064a35c94c2784f8714b012fbde820e0ddee36265eb6a905f90a250565b6002546001600160a01b03163314611f34576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f9d3e522e1e47a2f6009739342b9cc7b252a1888154e843ab55ee1c81745795ab905f90a250565b6060818310611f9f57604051633b2735ab60e11b815260040160405180910390fd5b602154821115611fc25760405163e0f7becb60e01b815260040160405180910390fd5b611fcc83836134b8565b67ffffffffffffffff811115611fe457611fe4612d70565b60405190808252806020026020018201604052801561200d578160200160208202803683370190505b509050825b82811015610ef7576021818154811061202d5761202d61324b565b905f5260205f20015f9054906101000a90046001600160a01b0316828583038151811061205c5761205c61324b565b6001600160a01b0390921660209283029190910190910152600101612012565b6120a360405180608001604052805f81526020015f81526020015f81526020015f81525090565b50604080516080810182526015548152601654602082015260175491810191909152601854606082015290565b6002546001600160a01b031633146120fa576040516282b42960e81b815260040160405180910390fd5b600780546001600160a01b0319166001600160a01b0383169081179091556040517fe5693914d19c789bdee50a362998c0bc8d035a835f9871da5d51152f0582c34f905f90a250565b5f602182815481106121575761215761324b565b5f918252602090912001546001600160a01b031692915050565b6002546001600160a01b0316331461219b576040516282b42960e81b815260040160405180910390fd5b600480546001600160a01b0319166001600160a01b0383169081179091556040517ff3e07b4bb4394f2ff320bd1dd151551dff304d5e948b401d8558b228482c97d8905f90a250565b6002546001600160a01b0316331461220e576040516282b42960e81b815260040160405180910390fd5b600c548110806122295750600a54612226908261322c565b15155b806122355750600e5481115b1561225357604051633007ad0160e11b815260040160405180910390fd5b600d8190556040518181527fe9ef3e93dff799d4db8a12ff79e0918a5a78d75b10527864f4b1c920f6f4f17890602001610d9a565b6122af60405180608001604052805f81526020015f81526020015f81526020015f81525090565b50604080516080810182526019548152601a546020820152601b5491810191909152601c54606082015290565b6002546001600160a01b03163314612306576040516282b42960e81b815260040160405180910390fd5b600d548110806123215750600a5461231e908261322c565b15155b1561233f5760405163cfb699cb60e01b815260040160405180910390fd5b600e8190556040518181527f866fe9485f9983afceaa1385307b6eb0fd3df5a250ae2b0bf76dc9ddd316926b90602001610d9a565b606081831061239657604051633b2735ab60e11b815260040160405180910390fd5b601e548211156123b95760405163e0f7becb60e01b815260040160405180910390fd5b6123c383836134b8565b67ffffffffffffffff8111156123db576123db612d70565b604051908082528060200260200182016040528015612404578160200160208202803683370190505b509050825b82811015610ef757601e81815481106124245761242461324b565b905f5260205f20015f9054906101000a90046001600160a01b031682858303815181106124535761245361324b565b6001600160a01b0390921660209283029190910190910152600101612409565b5f601e82815481106121575761215761324b565b600b5483610100015110806124a25750600c54836101000151115b806124be5750600a548361010001516124bb919061322c565b15155b156124dc57604051635428734d60e01b815260040160405180910390fd5b600d548360e0015110806124f55750600e548360e00151115b8061251357508261010001518360e00151612510919061322c565b15155b156125315760405163253fffcf60e11b815260040160405180910390fd5b600f548360c00151108061254a57506010548360c00151115b156125685760405163ef9bc65f60e01b815260040160405180910390fd5b6019546101c084015151118061259c5750601a5460e08401516101c08501516020015161259a916301e13380906127f6565b115b806125b15750601b546101c084015160400151115b806125c65750601c546101c084015160600151115b806125d857506015546101c084015151105b80612601575060165460e08401516101c0850151602001516125ff916301e1338090612819565b105b8061261657506017546101c084015160400151105b8061262b57506018546101c084015160600151105b1561264957604051632d8768f960e01b815260040160405180910390fd5b60115482108061265a575060125482115b15612678576040516330554de160e01b815260040160405180910390fd5b5f61269c6611c37937e0800061269685671bc16d674ec80000612834565b9061284f565b6013549091506126ac908261284f565b8210806126df57506126dc6126d3671bc16d674ec800006126cd868561284f565b90612864565b60145490612878565b82115b156126fd576040516383ebdfb760e01b815260040160405180910390fd5b5f61270c838660e0015161288c565b60055460408701519192506001600160a01b0391821691161415806127375750600654856060015114155b8061275657506007546101608601516001600160a01b03908116911614155b8061277557506008546101808601516001600160a01b03908116911614155b8061279457506009546101a08601516001600160a01b03908116911614155b806127b357506004546101408601516001600160a01b03908116911614155b806127c2575061012085015115155b156127e05760405163e8c02dd760e01b815260040160405180910390fd5b3061014086015261012090940193909352505050565b5f825f19048411830215820261280a575f80fd5b50910281810615159190040190565b5f825f19048411830215820261282d575f80fd5b5091020490565b5f61284883670de0b6b3a764000084612819565b9392505050565b5f81831161285d5781612848565b5090919050565b5f6128488383670de0b6b3a7640000612819565b5f8183116128865782612848565b50919050565b5f806128bc6128ad61289f86606461356a565b66a5bbed86c5a00090612864565b6748cd4072281e000090612834565b90506128d0670de0b6b3a764000082612834565b9050612928816126cd6128fb6128f66128f189670de0b6b3a7640000613581565b612930565b61295d565b6129226128f66129108a8a6301e13380612819565b6128f190670de0b6b3a7640000613581565b90612834565b949350505050565b5f6001600160ff1b038211156129595760405163396ea70160e11b815260040160405180910390fd5b5090565b5f80821361297e5760405163e61b497560e01b815260040160405180910390fd5b506fffffffffffffffffffffffffffffffff811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612a0a9084901c612930565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b828054828255905f5260205f20908101928215612bdc579160200282015b82811115612bdc5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190612ba9565b506129599291505b80821115612959575f8155600101612be4565b5f81518084525f5b81811015612c1b57602081850181015186830182015201612bff565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f6128486020830184612bf7565b5f60808284031215612886575f80fd5b5f60208284031215612c6c575f80fd5b5035919050565b5f8060208385031215612c84575f80fd5b823567ffffffffffffffff80821115612c9b575f80fd5b818501915085601f830112612cae575f80fd5b813581811115612cbc575f80fd5b8660208260051b8501011115612cd0575f80fd5b60209290920196919550909350505050565b602080825282518282018190525f9190848201906040850190845b81811015612d225783516001600160a01b031683529284019291840191600101612cfd565b50909695505050505050565b6001600160a01b0381168114612d42575f80fd5b50565b8035612d5081612d2e565b919050565b5f60208284031215612d65575f80fd5b813561284881612d2e565b634e487b7160e01b5f52604160045260245ffd5b6040516101e0810167ffffffffffffffff81118282101715612da857612da8612d70565b60405290565b5f82601f830112612dbd575f80fd5b813567ffffffffffffffff80821115612dd857612dd8612d70565b604051601f8301601f19908116603f01168101908282118183101715612e0057612e00612d70565b81604052838152866020858801011115612e18575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f60808284031215612e47575f80fd5b6040516080810181811067ffffffffffffffff82111715612e6a57612e6a612d70565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f6102408284031215612eac575f80fd5b612eb4612d84565b9050612ebf82612d45565b8152612ecd60208301612d45565b6020820152612ede60408301612d45565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140612f3b818401612d45565b90820152610160612f4d838201612d45565b90820152610180612f5f838201612d45565b908201526101a0612f71838201612d45565b908201526101c0612f8484848301612e37565b9082015292915050565b5f60608284031215612f9e575f80fd5b6040516060810167ffffffffffffffff8282108183111715612fc257612fc2612d70565b8160405282935084359150612fd682612d2e565b9082526020840135908115158214612fec575f80fd5b8160208401526040850135915080821115613005575f80fd5b5061301285828601612dae565b6040830152505092915050565b5f805f805f805f805f806103608b8d031215613039575f80fd5b8a35995061304960208c01612d45565b985060408b013567ffffffffffffffff80821115613065575f80fd5b6130718e838f01612dae565b99506130808e60608f01612e9b565b98506102a08d0135915080821115613096575f80fd5b6130a28e838f01612dae565b97506102c08d013596506102e08d013595506103008d013594506103208d01359150808211156130d0575f80fd5b506130dd8d828e01612f8e565b9250506103408b013590509295989b9194979a5092959850565b5f8060408385031215613108575f80fd5b823561311381612d2e565b946020939093013593505050565b5f805f805f805f80610320898b031215613139575f80fd5b88359750602089013561314b81612d2e565b965061315a8a60408b01612e9b565b955061028089013567ffffffffffffffff811115613176575f80fd5b6131828b828c01612dae565b989b979a5095986102a0810135976102c082013597506102e0820135965061030090910135945092505050565b5f80604083850312156131c0575f80fd5b50508035926020909101359150565b8151815260208083015190820152604080830151908201526060808301519082015260808101610ef9565b600181811c9082168061320e57607f821691505b60208210810361288657634e487b7160e01b5f52602260045260245ffd5b5f8261324657634e487b7160e01b5f52601260045260245ffd5b500690565b634e487b7160e01b5f52603260045260245ffd5b80516001600160a01b03168252602081015161328660208401826001600160a01b03169052565b5060408101516132a160408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151818401525061012080820151818401525061014080820151613307828501826001600160a01b03169052565b5050610160818101516001600160a01b0390811691840191909152610180808301518216908401526101a080830151909116908301526101c09081015180519183019190915260208101516101e083015260408101516102008301526060015161022090910152565b5f6102c087835280602084015261338981840188612bf7565b9050613398604084018761325f565b8281036102808401526133ab8186612bf7565b915050826102a08301529695505050505050565b5f602082840312156133cf575f80fd5b815161284881612d2e565b6001600160a01b03851681526102a0602082018190525f906133fe83820187612bf7565b905061340d604084018661325f565b8281036102808401526134208185612bf7565b979650505050505050565b8581525f60018060a01b03808716602084015285604084015284606084015260a060808401528084511660a0840152506020830151151560c08301526040830151606060e0840152613481610100840182612bf7565b98975050505050505050565b5f6020828403121561349d575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610ef957610ef96134a4565b634e487b7160e01b5f52603160045260245ffd5b5f6102c08783526134f3602084018861325f565b8061026084015261350681840187612bf7565b61028084019590955250506102a001529392505050565b60208082528181018390525f908460408401835b8681101561355f57823561354481612d2e565b6001600160a01b031682529183019190830190600101613531565b509695505050505050565b8082028115828204841417610ef957610ef96134a4565b80820180821115610ef957610ef96134a456fea26469706673582212201de16ebd2212942ade42814a71fc7c86d3c2001a955760bd5218602cad6c2bb664736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = HyperdriveFactoryContractFunctions(hyperdrivefactory_abi, self.w3, address)  # type: ignore
        self.events = HyperdriveFactoryContractEvents(hyperdrivefactory_abi, self.w3, address)  # type: ignore
        self.errors = HyperdriveFactoryContractErrors()

    events: HyperdriveFactoryContractEvents

    errors: HyperdriveFactoryContractErrors = HyperdriveFactoryContractErrors()

    functions: HyperdriveFactoryContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        factoryConfig: HyperdriveFactory.FactoryConfig

        name: str

    @classmethod
    def constructor(cls, factoryConfig: HyperdriveFactory.FactoryConfig, name: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(factoryConfig), dataclass_to_tuple(name)
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args,
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveFactoryContractFunctions(
            hyperdrivefactory_abi, w3, None
        )
        contract.errors = HyperdriveFactoryContractErrors()

        return contract
