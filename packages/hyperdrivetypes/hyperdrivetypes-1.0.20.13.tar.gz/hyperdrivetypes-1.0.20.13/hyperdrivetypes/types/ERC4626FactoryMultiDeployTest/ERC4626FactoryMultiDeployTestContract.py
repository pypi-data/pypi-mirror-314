"""A web3.py Contract class for the ERC4626FactoryMultiDeployTest contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..LPMath import LPMathContract
from ..StdInvariant import StdInvariantTypes as StdInvariant
from .ERC4626FactoryMultiDeployTestTypes import (
    AddLiquidityEvent,
    ApprovalEvent,
    ApprovalForAllEvent,
    CloseLongEvent,
    CloseShortEvent,
    CollectGovernanceFeeEvent,
    CreateCheckpointEvent,
    DeployedEvent,
    InitializeEvent,
    Log_addressEvent,
    Log_arrayEvent,
    Log_bytes32Event,
    Log_bytesEvent,
    Log_intEvent,
    Log_named_addressEvent,
    Log_named_arrayEvent,
    Log_named_bytes32Event,
    Log_named_bytesEvent,
    Log_named_decimal_intEvent,
    Log_named_decimal_uintEvent,
    Log_named_intEvent,
    Log_named_stringEvent,
    Log_named_uintEvent,
    Log_stringEvent,
    Log_uintEvent,
    LogEvent,
    LogsEvent,
    OpenLongEvent,
    OpenShortEvent,
    PauseStatusUpdatedEvent,
    RedeemWithdrawalSharesEvent,
    RemoveLiquidityEvent,
    SlotFoundEvent,
    SweepEvent,
    TransferSingleEvent,
    WARNING_UninitedSlotEvent,
)

structs = {
    "StdInvariant.FuzzSelector": StdInvariant.FuzzSelector,
    "StdInvariant.FuzzInterface": StdInvariant.FuzzInterface,
}

erc4626factorymultideploytest_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "user", "type": "address", "internalType": "address"},
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_deployTargetInvalidDeployerCoordinator",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_hyperdriveFactoryDeploy_multiDeploy_multiPool",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "name",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "SlotFound",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "fsig",
                    "type": "bytes4",
                    "indexed": False,
                    "internalType": "bytes4",
                },
                {
                    "name": "keysHash",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
                {
                    "name": "slot",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "WARNING_UninitedSlot",
            "inputs": [
                {
                    "name": "who",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "slot",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)


class ERC4626FactoryMultiDeployTestWhaleBalanceExceededContractError(
    PypechainBaseError
):
    """ContractError for WhaleBalanceExceeded."""

    # Error name
    name: str = "WhaleBalanceExceeded"
    # 4 byte error selector
    selector: str = "0xc4649d28"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleBalanceExceeded()"
    # Error input types
    abi: ABI = erc4626factorymultideploytest_abi


class ERC4626FactoryMultiDeployTestWhaleIsContractContractError(
    PypechainBaseError
):
    """ContractError for WhaleIsContract."""

    # Error name
    name: str = "WhaleIsContract"
    # 4 byte error selector
    selector: str = "0x98d85a67"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleIsContract()"
    # Error input types
    abi: ABI = erc4626factorymultideploytest_abi


class ERC4626FactoryMultiDeployTestContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the ERC4626FactoryMultiDeployTest contract."""

    WhaleBalanceExceeded: (
        ERC4626FactoryMultiDeployTestWhaleBalanceExceededContractError
    )

    WhaleIsContract: ERC4626FactoryMultiDeployTestWhaleIsContractContractError

    def __init__(
        self,
    ) -> None:
        self.WhaleBalanceExceeded = (
            ERC4626FactoryMultiDeployTestWhaleBalanceExceededContractError()
        )
        self.WhaleIsContract = (
            ERC4626FactoryMultiDeployTestWhaleIsContractContractError()
        )

        self._all = [
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]


class ERC4626FactoryMultiDeployTestIS_TESTContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the IS_TEST() method."""

    _function_name = "IS_TEST"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestIS_TESTContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the IS_TEST method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "IS_TEST"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestIS_TESTContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestIS_TESTContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestIS_TESTContractFunction0._type_signature: ERC4626FactoryMultiDeployTestIS_TESTContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestCreateUserContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the createUser(str) method."""

    _function_name = "createUser"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for CreateUser."""

        user: str
        privateKey: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [str, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestCreateUserContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the createUser method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "createUser"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _name: str) -> ERC4626FactoryMultiDeployTestCreateUserContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestCreateUserContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestCreateUserContractFunction0._type_signature: ERC4626FactoryMultiDeployTestCreateUserContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestExcludeArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts() method."""

    _function_name = "excludeArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestExcludeArtifactsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the excludeArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestExcludeArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestExcludeArtifactsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestExcludeArtifactsContractFunction0._type_signature: ERC4626FactoryMultiDeployTestExcludeArtifactsContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestExcludeContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts() method."""

    _function_name = "excludeContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestExcludeContractsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the excludeContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestExcludeContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestExcludeContractsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestExcludeContractsContractFunction0._type_signature: ERC4626FactoryMultiDeployTestExcludeContractsContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestExcludeSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders() method."""

    _function_name = "excludeSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestExcludeSendersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the excludeSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestExcludeSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestExcludeSendersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestExcludeSendersContractFunction0._type_signature: ERC4626FactoryMultiDeployTestExcludeSendersContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestFailedContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the failed() method."""

    _function_name = "failed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestFailedContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the failed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "failed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestFailedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestFailedContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestFailedContractFunction0._type_signature: ERC4626FactoryMultiDeployTestFailedContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestSetUpContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the setUp() method."""

    _function_name = "setUp"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626FactoryMultiDeployTestSetUpContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the setUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestSetUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestSetUpContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestSetUpContractFunction0._type_signature: ERC4626FactoryMultiDeployTestSetUpContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestTargetArtifactSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors() method."""

    _function_name = "targetArtifactSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class ERC4626FactoryMultiDeployTestTargetArtifactSelectorsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetArtifactSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifactSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestTargetArtifactSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestTargetArtifactSelectorsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestTargetArtifactSelectorsContractFunction0._type_signature: ERC4626FactoryMultiDeployTestTargetArtifactSelectorsContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestTargetArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts() method."""

    _function_name = "targetArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestTargetArtifactsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestTargetArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestTargetArtifactsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestTargetArtifactsContractFunction0._type_signature: ERC4626FactoryMultiDeployTestTargetArtifactsContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestTargetContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts() method."""

    _function_name = "targetContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestTargetContractsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestTargetContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestTargetContractsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestTargetContractsContractFunction0._type_signature: ERC4626FactoryMultiDeployTestTargetContractsContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestTargetInterfacesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces() method."""

    _function_name = "targetInterfaces"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzInterface]:
        """returns list[StdInvariant.FuzzInterface]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzInterface]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )


class ERC4626FactoryMultiDeployTestTargetInterfacesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetInterfaces method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetInterfaces"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestTargetInterfacesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestTargetInterfacesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestTargetInterfacesContractFunction0._type_signature: ERC4626FactoryMultiDeployTestTargetInterfacesContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestTargetSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors() method."""

    _function_name = "targetSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class ERC4626FactoryMultiDeployTestTargetSelectorsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestTargetSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestTargetSelectorsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestTargetSelectorsContractFunction0._type_signature: ERC4626FactoryMultiDeployTestTargetSelectorsContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestTargetSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders() method."""

    _function_name = "targetSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestTargetSendersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestTargetSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestTargetSendersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestTargetSendersContractFunction0._type_signature: ERC4626FactoryMultiDeployTestTargetSendersContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestTest_deployTargetInvalidDeployerCoordinatorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployTargetInvalidDeployerCoordinator() method."""

    _function_name = "test_deployTargetInvalidDeployerCoordinator"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626FactoryMultiDeployTestTest_deployTargetInvalidDeployerCoordinatorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_deployTargetInvalidDeployerCoordinator method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployTargetInvalidDeployerCoordinator"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestTest_deployTargetInvalidDeployerCoordinatorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestTest_deployTargetInvalidDeployerCoordinatorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestTest_deployTargetInvalidDeployerCoordinatorContractFunction0._type_signature: ERC4626FactoryMultiDeployTestTest_deployTargetInvalidDeployerCoordinatorContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestTest_hyperdriveFactoryDeploy_multiDeploy_multiPoolContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_hyperdriveFactoryDeploy_multiDeploy_multiPool() method."""

    _function_name = "test_hyperdriveFactoryDeploy_multiDeploy_multiPool"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class ERC4626FactoryMultiDeployTestTest_hyperdriveFactoryDeploy_multiDeploy_multiPoolContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_hyperdriveFactoryDeploy_multiDeploy_multiPool method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_hyperdriveFactoryDeploy_multiDeploy_multiPool"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> ERC4626FactoryMultiDeployTestTest_hyperdriveFactoryDeploy_multiDeploy_multiPoolContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestTest_hyperdriveFactoryDeploy_multiDeploy_multiPoolContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestTest_hyperdriveFactoryDeploy_multiDeploy_multiPoolContractFunction0._type_signature: ERC4626FactoryMultiDeployTestTest_hyperdriveFactoryDeploy_multiDeploy_multiPoolContractFunction0,
        }
        return out


class ERC4626FactoryMultiDeployTestWhaleTransferContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "str"]), structs
    )
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestWhaleTransferContractFunction1(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,int,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int", "str"]), structs
    )
    _error_class = ERC4626FactoryMultiDeployTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class ERC4626FactoryMultiDeployTestWhaleTransferContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "whaleTransfer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, whale: str, token: str, to: str) -> ERC4626FactoryMultiDeployTestWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> ERC4626FactoryMultiDeployTestWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> ERC4626FactoryMultiDeployTestWhaleTransferContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            ERC4626FactoryMultiDeployTestWhaleTransferContractFunction0._type_signature: ERC4626FactoryMultiDeployTestWhaleTransferContractFunction0,
            ERC4626FactoryMultiDeployTestWhaleTransferContractFunction1._type_signature: ERC4626FactoryMultiDeployTestWhaleTransferContractFunction1,
        }
        return out


class ERC4626FactoryMultiDeployTestContractFunctions(ContractFunctions):
    """ContractFunctions for the ERC4626FactoryMultiDeployTest contract."""

    IS_TEST: ERC4626FactoryMultiDeployTestIS_TESTContractFunction

    createUser: ERC4626FactoryMultiDeployTestCreateUserContractFunction

    excludeArtifacts: (
        ERC4626FactoryMultiDeployTestExcludeArtifactsContractFunction
    )

    excludeContracts: (
        ERC4626FactoryMultiDeployTestExcludeContractsContractFunction
    )

    excludeSenders: ERC4626FactoryMultiDeployTestExcludeSendersContractFunction

    failed: ERC4626FactoryMultiDeployTestFailedContractFunction

    setUp: ERC4626FactoryMultiDeployTestSetUpContractFunction

    targetArtifactSelectors: (
        ERC4626FactoryMultiDeployTestTargetArtifactSelectorsContractFunction
    )

    targetArtifacts: (
        ERC4626FactoryMultiDeployTestTargetArtifactsContractFunction
    )

    targetContracts: (
        ERC4626FactoryMultiDeployTestTargetContractsContractFunction
    )

    targetInterfaces: (
        ERC4626FactoryMultiDeployTestTargetInterfacesContractFunction
    )

    targetSelectors: (
        ERC4626FactoryMultiDeployTestTargetSelectorsContractFunction
    )

    targetSenders: ERC4626FactoryMultiDeployTestTargetSendersContractFunction

    test_deployTargetInvalidDeployerCoordinator: ERC4626FactoryMultiDeployTestTest_deployTargetInvalidDeployerCoordinatorContractFunction

    test_hyperdriveFactoryDeploy_multiDeploy_multiPool: ERC4626FactoryMultiDeployTestTest_hyperdriveFactoryDeploy_multiDeploy_multiPoolContractFunction

    whaleTransfer: ERC4626FactoryMultiDeployTestWhaleTransferContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = (
            ERC4626FactoryMultiDeployTestIS_TESTContractFunction.factory(
                "IS_TEST",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="IS_TEST",
            )
        )
        self.createUser = (
            ERC4626FactoryMultiDeployTestCreateUserContractFunction.factory(
                "createUser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="createUser",
            )
        )
        self.excludeArtifacts = ERC4626FactoryMultiDeployTestExcludeArtifactsContractFunction.factory(
            "excludeArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeArtifacts",
        )
        self.excludeContracts = ERC4626FactoryMultiDeployTestExcludeContractsContractFunction.factory(
            "excludeContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="excludeContracts",
        )
        self.excludeSenders = (
            ERC4626FactoryMultiDeployTestExcludeSendersContractFunction.factory(
                "excludeSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeSenders",
            )
        )
        self.failed = (
            ERC4626FactoryMultiDeployTestFailedContractFunction.factory(
                "failed",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="failed",
            )
        )
        self.setUp = ERC4626FactoryMultiDeployTestSetUpContractFunction.factory(
            "setUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setUp",
        )
        self.targetArtifactSelectors = ERC4626FactoryMultiDeployTestTargetArtifactSelectorsContractFunction.factory(
            "targetArtifactSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifactSelectors",
        )
        self.targetArtifacts = ERC4626FactoryMultiDeployTestTargetArtifactsContractFunction.factory(
            "targetArtifacts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifacts",
        )
        self.targetContracts = ERC4626FactoryMultiDeployTestTargetContractsContractFunction.factory(
            "targetContracts",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetContracts",
        )
        self.targetInterfaces = ERC4626FactoryMultiDeployTestTargetInterfacesContractFunction.factory(
            "targetInterfaces",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetInterfaces",
        )
        self.targetSelectors = ERC4626FactoryMultiDeployTestTargetSelectorsContractFunction.factory(
            "targetSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetSelectors",
        )
        self.targetSenders = (
            ERC4626FactoryMultiDeployTestTargetSendersContractFunction.factory(
                "targetSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetSenders",
            )
        )
        self.test_deployTargetInvalidDeployerCoordinator = ERC4626FactoryMultiDeployTestTest_deployTargetInvalidDeployerCoordinatorContractFunction.factory(
            "test_deployTargetInvalidDeployerCoordinator",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployTargetInvalidDeployerCoordinator",
        )
        self.test_hyperdriveFactoryDeploy_multiDeploy_multiPool = ERC4626FactoryMultiDeployTestTest_hyperdriveFactoryDeploy_multiDeploy_multiPoolContractFunction.factory(
            "test_hyperdriveFactoryDeploy_multiDeploy_multiPool",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_hyperdriveFactoryDeploy_multiDeploy_multiPool",
        )
        self.whaleTransfer = (
            ERC4626FactoryMultiDeployTestWhaleTransferContractFunction.factory(
                "whaleTransfer",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="whaleTransfer",
            )
        )


class ERC4626FactoryMultiDeployTestAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestCollectGovernanceFeeContractEvent(
    ContractEvent
):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestCreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[InitializeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[InitializeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestPauseStatusUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestRedeemWithdrawalSharesContractEvent(
    ContractEvent
):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestSlotFoundContractEvent(ContractEvent):
    """ContractEvent for SlotFound."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SlotFoundEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SlotFoundEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SlotFoundEvent.SlotFoundEventArgs(
                    who=abi_event.args["who"],
                    fsig=abi_event.args["fsig"],
                    keysHash=abi_event.args["keysHash"],
                    slot=abi_event.args["slot"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SlotFoundEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SlotFoundEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SlotFoundEvent.SlotFoundEventArgs(
                    who=abi_event.args["who"],
                    fsig=abi_event.args["fsig"],
                    keysHash=abi_event.args["keysHash"],
                    slot=abi_event.args["slot"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestWARNING_UninitedSlotContractEvent(
    ContractEvent
):
    """ContractEvent for WARNING_UninitedSlot."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[WARNING_UninitedSlotEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            WARNING_UninitedSlotEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=WARNING_UninitedSlotEvent.WARNING_UninitedSlotEventArgs(
                    who=abi_event.args["who"],
                    slot=abi_event.args["slot"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[WARNING_UninitedSlotEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            WARNING_UninitedSlotEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=WARNING_UninitedSlotEvent.WARNING_UninitedSlotEventArgs(
                    who=abi_event.args["who"],
                    slot=abi_event.args["slot"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_named_addressContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_named_arrayContractEvent(ContractEvent):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_named_bytesContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_named_bytes32ContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_named_decimal_intContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_named_decimal_uintContractEvent(
    ContractEvent
):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_named_intContractEvent(ContractEvent):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_named_stringContractEvent(ContractEvent):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_named_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogsEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogsEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class ERC4626FactoryMultiDeployTestContractEvents(ContractEvents):
    """ContractEvents for the ERC4626FactoryMultiDeployTest contract."""

    AddLiquidity: ERC4626FactoryMultiDeployTestAddLiquidityContractEvent

    Approval: ERC4626FactoryMultiDeployTestApprovalContractEvent

    ApprovalForAll: ERC4626FactoryMultiDeployTestApprovalForAllContractEvent

    CloseLong: ERC4626FactoryMultiDeployTestCloseLongContractEvent

    CloseShort: ERC4626FactoryMultiDeployTestCloseShortContractEvent

    CollectGovernanceFee: (
        ERC4626FactoryMultiDeployTestCollectGovernanceFeeContractEvent
    )

    CreateCheckpoint: ERC4626FactoryMultiDeployTestCreateCheckpointContractEvent

    Deployed: ERC4626FactoryMultiDeployTestDeployedContractEvent

    Initialize: ERC4626FactoryMultiDeployTestInitializeContractEvent

    OpenLong: ERC4626FactoryMultiDeployTestOpenLongContractEvent

    OpenShort: ERC4626FactoryMultiDeployTestOpenShortContractEvent

    PauseStatusUpdated: (
        ERC4626FactoryMultiDeployTestPauseStatusUpdatedContractEvent
    )

    RedeemWithdrawalShares: (
        ERC4626FactoryMultiDeployTestRedeemWithdrawalSharesContractEvent
    )

    RemoveLiquidity: ERC4626FactoryMultiDeployTestRemoveLiquidityContractEvent

    SlotFound: ERC4626FactoryMultiDeployTestSlotFoundContractEvent

    Sweep: ERC4626FactoryMultiDeployTestSweepContractEvent

    TransferSingle: ERC4626FactoryMultiDeployTestTransferSingleContractEvent

    WARNING_UninitedSlot: (
        ERC4626FactoryMultiDeployTestWARNING_UninitedSlotContractEvent
    )

    log: ERC4626FactoryMultiDeployTestLogContractEvent

    log_address: ERC4626FactoryMultiDeployTestLog_addressContractEvent

    log_array: ERC4626FactoryMultiDeployTestLog_arrayContractEvent

    log_bytes: ERC4626FactoryMultiDeployTestLog_bytesContractEvent

    log_bytes32: ERC4626FactoryMultiDeployTestLog_bytes32ContractEvent

    log_int: ERC4626FactoryMultiDeployTestLog_intContractEvent

    log_named_address: (
        ERC4626FactoryMultiDeployTestLog_named_addressContractEvent
    )

    log_named_array: ERC4626FactoryMultiDeployTestLog_named_arrayContractEvent

    log_named_bytes: ERC4626FactoryMultiDeployTestLog_named_bytesContractEvent

    log_named_bytes32: (
        ERC4626FactoryMultiDeployTestLog_named_bytes32ContractEvent
    )

    log_named_decimal_int: (
        ERC4626FactoryMultiDeployTestLog_named_decimal_intContractEvent
    )

    log_named_decimal_uint: (
        ERC4626FactoryMultiDeployTestLog_named_decimal_uintContractEvent
    )

    log_named_int: ERC4626FactoryMultiDeployTestLog_named_intContractEvent

    log_named_string: ERC4626FactoryMultiDeployTestLog_named_stringContractEvent

    log_named_uint: ERC4626FactoryMultiDeployTestLog_named_uintContractEvent

    log_string: ERC4626FactoryMultiDeployTestLog_stringContractEvent

    log_uint: ERC4626FactoryMultiDeployTestLog_uintContractEvent

    logs: ERC4626FactoryMultiDeployTestLogsContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = (
            ERC4626FactoryMultiDeployTestAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            )
        )
        self.Approval = (
            ERC4626FactoryMultiDeployTestApprovalContractEvent.factory(
                "Approval",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Approval",
            )
        )
        self.ApprovalForAll = (
            ERC4626FactoryMultiDeployTestApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            )
        )
        self.CloseLong = (
            ERC4626FactoryMultiDeployTestCloseLongContractEvent.factory(
                "CloseLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseLong",
            )
        )
        self.CloseShort = (
            ERC4626FactoryMultiDeployTestCloseShortContractEvent.factory(
                "CloseShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CloseShort",
            )
        )
        self.CollectGovernanceFee = ERC4626FactoryMultiDeployTestCollectGovernanceFeeContractEvent.factory(
            "CollectGovernanceFee",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="CollectGovernanceFee",
        )
        self.CreateCheckpoint = (
            ERC4626FactoryMultiDeployTestCreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            )
        )
        self.Deployed = (
            ERC4626FactoryMultiDeployTestDeployedContractEvent.factory(
                "Deployed",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Deployed",
            )
        )
        self.Initialize = (
            ERC4626FactoryMultiDeployTestInitializeContractEvent.factory(
                "Initialize",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="Initialize",
            )
        )
        self.OpenLong = (
            ERC4626FactoryMultiDeployTestOpenLongContractEvent.factory(
                "OpenLong",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenLong",
            )
        )
        self.OpenShort = (
            ERC4626FactoryMultiDeployTestOpenShortContractEvent.factory(
                "OpenShort",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OpenShort",
            )
        )
        self.PauseStatusUpdated = ERC4626FactoryMultiDeployTestPauseStatusUpdatedContractEvent.factory(
            "PauseStatusUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="PauseStatusUpdated",
        )
        self.RedeemWithdrawalShares = ERC4626FactoryMultiDeployTestRedeemWithdrawalSharesContractEvent.factory(
            "RedeemWithdrawalShares",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="RedeemWithdrawalShares",
        )
        self.RemoveLiquidity = (
            ERC4626FactoryMultiDeployTestRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            )
        )
        self.SlotFound = (
            ERC4626FactoryMultiDeployTestSlotFoundContractEvent.factory(
                "SlotFound",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="SlotFound",
            )
        )
        self.Sweep = ERC4626FactoryMultiDeployTestSweepContractEvent.factory(
            "Sweep",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="Sweep",
        )
        self.TransferSingle = (
            ERC4626FactoryMultiDeployTestTransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            )
        )
        self.WARNING_UninitedSlot = ERC4626FactoryMultiDeployTestWARNING_UninitedSlotContractEvent.factory(
            "WARNING_UninitedSlot",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="WARNING_UninitedSlot",
        )
        self.log = ERC4626FactoryMultiDeployTestLogContractEvent.factory(
            "log", w3=w3, contract_abi=abi, address=address, event_name="log"
        )
        self.log_address = (
            ERC4626FactoryMultiDeployTestLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            )
        )
        self.log_array = (
            ERC4626FactoryMultiDeployTestLog_arrayContractEvent.factory(
                "log_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_array",
            )
        )
        self.log_bytes = (
            ERC4626FactoryMultiDeployTestLog_bytesContractEvent.factory(
                "log_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes",
            )
        )
        self.log_bytes32 = (
            ERC4626FactoryMultiDeployTestLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            )
        )
        self.log_int = (
            ERC4626FactoryMultiDeployTestLog_intContractEvent.factory(
                "log_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_int",
            )
        )
        self.log_named_address = (
            ERC4626FactoryMultiDeployTestLog_named_addressContractEvent.factory(
                "log_named_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_address",
            )
        )
        self.log_named_array = (
            ERC4626FactoryMultiDeployTestLog_named_arrayContractEvent.factory(
                "log_named_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_array",
            )
        )
        self.log_named_bytes = (
            ERC4626FactoryMultiDeployTestLog_named_bytesContractEvent.factory(
                "log_named_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes",
            )
        )
        self.log_named_bytes32 = (
            ERC4626FactoryMultiDeployTestLog_named_bytes32ContractEvent.factory(
                "log_named_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes32",
            )
        )
        self.log_named_decimal_int = ERC4626FactoryMultiDeployTestLog_named_decimal_intContractEvent.factory(
            "log_named_decimal_int",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_named_decimal_int",
        )
        self.log_named_decimal_uint = ERC4626FactoryMultiDeployTestLog_named_decimal_uintContractEvent.factory(
            "log_named_decimal_uint",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_named_decimal_uint",
        )
        self.log_named_int = (
            ERC4626FactoryMultiDeployTestLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            )
        )
        self.log_named_string = (
            ERC4626FactoryMultiDeployTestLog_named_stringContractEvent.factory(
                "log_named_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_string",
            )
        )
        self.log_named_uint = (
            ERC4626FactoryMultiDeployTestLog_named_uintContractEvent.factory(
                "log_named_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_uint",
            )
        )
        self.log_string = (
            ERC4626FactoryMultiDeployTestLog_stringContractEvent.factory(
                "log_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_string",
            )
        )
        self.log_uint = (
            ERC4626FactoryMultiDeployTestLog_uintContractEvent.factory(
                "log_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_uint",
            )
        )
        self.logs = ERC4626FactoryMultiDeployTestLogsContractEvent.factory(
            "logs", w3=w3, contract_abi=abi, address=address, event_name="logs"
        )


class ERC4626FactoryMultiDeployTestContract(Contract):
    """A web3.py Contract class for the ERC4626FactoryMultiDeployTest contract."""

    abi: ABI = erc4626factorymultideploytest_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60806040819052600c8054600160ff199182168117909255601e8054909116909117905563f877cb1960e01b90526020608452601060a4526f105490925514955357d49410d7d5549360821b60c4525f805160206202962383398151915263f877cb1960e45f60405180830381865afa1580156200007f573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052620000a891908101906200043a565b603990620000b7908262000592565b5060405163f877cb1960e01b815260206004820152600c60248201526b109054d157d49410d7d5549360a21b60448201525f80516020620296238339815191529063f877cb19906064015f60405180830381865afa1580156200011c573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526200014591908101906200043a565b603a9062000154908262000592565b5060405163f877cb1960e01b815260206004820152601460248201527f474e4f5349535f434841494e5f5250435f55524c00000000000000000000000060448201525f80516020620296238339815191529063f877cb19906064015f60405180830381865afa158015620001ca573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052620001f391908101906200043a565b603b9062000202908262000592565b5060405163f877cb1960e01b815260206004820152600d60248201526c131253915057d49410d7d55493609a1b60448201525f80516020620296238339815191529063f877cb19906064015f60405180830381865afa15801562000268573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526200029191908101906200043a565b603c90620002a0908262000592565b5060405163f877cb1960e01b815260206004820152600f60248201526e1350525393915517d49410d7d55493608a1b60448201525f80516020620296238339815191529063f877cb19906064015f60405180830381865afa15801562000308573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526200033191908101906200043a565b603d9062000340908262000592565b5060405163f877cb1960e01b815260206004820152600f60248201526e14d15413d3125057d49410d7d55493608a1b60448201525f80516020620296238339815191529063f877cb19906064015f60405180830381865afa158015620003a8573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052620003d191908101906200043a565b603e90620003e0908262000592565b50604280546001600160a01b0319908116909155604d8054909116736b175474e89094c44da98b954eedeac495271d0f1790553480156200041f575f80fd5b506200065e565b634e487b7160e01b5f52604160045260245ffd5b5f60208083850312156200044c575f80fd5b82516001600160401b038082111562000463575f80fd5b818501915085601f83011262000477575f80fd5b8151818111156200048c576200048c62000426565b604051601f8201601f19908116603f01168101908382118183101715620004b757620004b762000426565b816040528281528886848701011115620004cf575f80fd5b5f93505b82841015620004f25784840186015181850187015292850192620004d3565b5f86848301015280965050505050505092915050565b600181811c908216806200051d57607f821691505b6020821081036200053c57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200058d57805f5260205f20601f840160051c81016020851015620005695750805b601f840160051c820191505b818110156200058a575f815560010162000575565b50505b505050565b81516001600160401b03811115620005ae57620005ae62000426565b620005c681620005bf845462000508565b8462000542565b602080601f831160018114620005fc575f8415620005e45750858301515b5f19600386901b1c1916600185901b17855562000656565b5f85815260208120601f198616915b828110156200062c578886015182559484019460019091019084016200060b565b50858210156200064a57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b62028fb6806200066d5f395ff3fe608060405234801562000010575f80fd5b50600436106200011c575f3560e01c8063507ffba511620000ab578063916a17c61162000077578063916a17c61462000220578063b5508aa9146200022a578063ba414fa61462000234578063e20c9f71146200024f578063fa7626d41462000259575f80fd5b8063507ffba514620001bd57806366d9a9a014620001e457806377c0740e14620001fd57806385226c811462000207575f80fd5b80633e5e0d2611620000eb5780633e5e0d2614620001885780633e5e3c23146200019f5780633f7286f414620001a95780634de6e9fd14620001b3575f80fd5b80630a9254e4146200012057806310716760146200012c5780631ed7831c14620001565780632ade3880146200016f575b5f80fd5b6200012a62000267565b005b620001436200013d366004620055bf565b62000535565b6040519081526020015b60405180910390f35b62000160620005ba565b6040516200014d91906200560e565b620001796200061c565b6040516200014d9190620056ad565b620001436200019936600462005770565b62000764565b62000160620009a5565b6200016062000a05565b6200012a62000a65565b620001d4620001ce366004620058ae565b62001f2a565b6040516200014d9291906200592f565b620001ee62001faf565b6040516200014d919062005948565b6200012a62002094565b6200021162002312565b6040516200014d9190620059fd565b620001ee620023e7565b62000211620024cc565b6200023e620025a1565b60405190151581526020016200014d565b6200016062002650565b601e546200023e9060ff1681565b62000271620026b0565b604080518082018252601d81527f487970657264726976654465706c6f796572436f6f7264696e61746f720000006020820152606554915190916001600160a01b031690620002c090620054b0565b604051809103905ff080158015620002da573d5f803e3d5ffd5b50604051620002e990620054be565b604051809103905ff08015801562000303573d5f803e3d5ffd5b506040516200031290620054cc565b604051809103905ff0801580156200032c573d5f803e3d5ffd5b506040516200033b90620054da565b604051809103905ff08015801562000355573d5f803e3d5ffd5b506040516200036490620054e8565b604051809103905ff0801580156200037e573d5f803e3d5ffd5b506040516200038d90620054f6565b604051809103905ff080158015620003a7573d5f803e3d5ffd5b50604051620003b69062005504565b620003c998979695949392919062005a63565b604051809103905ff080158015620003e3573d5f803e3d5ffd5b5060665f6101000a8154816001600160a01b0302191690836001600160a01b031602179055505f8051602062028f618339815191525f1c6001600160a01b03166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801562000452575f80fd5b505af115801562000465573d5f803e3d5ffd5b5050601e5460405163ca669fa760e01b81526101009091046001600160a01b031660048201525f8051602062028f41833981519152925063ca669fa791506024015f604051808303815f87803b158015620004be575f80fd5b505af1158015620004d1573d5f803e3d5ffd5b5050606554606654604051630843957560e31b81526001600160a01b0391821660048201529116925063421caba891506024015f604051808303815f87803b1580156200051c575f80fd5b505af11580156200052f573d5f803e3d5ffd5b50505050565b6040516370a0823160e01b81526001600160a01b0380851660048301525f91620005b291869186918216906370a0823190602401602060405180830381865afa15801562000585573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620005ab919062005ac2565b8562000764565b949350505050565b606060168054806020026020016040519081016040528092919081815260200182805480156200061257602002820191905f5260205f20905b81546001600160a01b03168152600190910190602001808311620005f3575b5050505050905090565b6060601d805480602002602001604051908101604052809291908181526020015f905b828210156200075b575f84815260208082206040805180820182526002870290920180546001600160a01b03168352600181018054835181870281018701909452808452939591948681019491929084015b8282101562000743578382905f5260205f20018054620006b19062005ada565b80601f0160208091040260200160405190810160405280929190818152602001828054620006df9062005ada565b80156200072e5780601f1062000704576101008083540402835291602001916200072e565b820191905f5260205f20905b8154815290600101906020018083116200071057829003601f168201915b50505050508152602001906001019062000691565b5050505081525050815260200190600101906200063f565b50505050905090565b6040516370a0823160e01b81526001600160a01b0385811660048301525f9182918616906370a0823190602401602060405180830381865afa158015620007ad573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620007d3919062005ac2565b905080841115620007f75760405163188c93a560e31b815260040160405180910390fd5b5f8051602062028f618339815191525f1c6001600160a01b03166390c5013b6040518163ffffffff1660e01b81526004015f604051808303815f87803b15801562000840575f80fd5b505af115801562000853573d5f803e3d5ffd5b50506040516303223eab60e11b81526001600160a01b03891660048201525f8051602062028f4183398151915292506306447d5691506024015f604051808303815f87803b158015620008a4575f80fd5b505af1158015620008b7573d5f803e3d5ffd5b505060405163c88a5e6d60e01b81525f8051602062028f41833981519152925063c88a5e6d9150620008f8908990670de0b6b3a7640000906004016200592f565b5f604051808303815f87803b15801562000910575f80fd5b505af115801562000923573d5f803e3d5ffd5b505060405163a9059cbb60e01b81526001600160a01b038816925063a9059cbb91506200095790869088906004016200592f565b6020604051808303815f875af115801562000974573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200099a919062005b24565b509295945050505050565b606060188054806020026020016040519081016040528092919081815260200182805480156200061257602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311620005f3575050505050905090565b606060178054806020026020016040519081016040528092919081815260200182805480156200061257602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311620005f3575050505050905090565b5f62000a9060405180604001604052806007815260200166636861726c696560c81b81525062001f2a565b5090505f62000aba604051806040016040528060038152602001623230b760e91b81525062001f2a565b506040516303223eab60e11b81526001600160a01b03841660048201529091505f8051602062028f41833981519152906306447d56906024015f604051808303815f87803b15801562000b0b575f80fd5b505af115801562000b1e573d5f803e3d5ffd5b5050604d5462000b4592506001600160a01b031690508368878678326eac9000006200348e565b604d5460455460405163095ea7b360e01b81526001600160a01b039283169263095ea7b39262000b869291169068878678326eac900000906004016200592f565b6020604051808303815f875af115801562000ba3573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000bc9919062005b24565b50604d546040516370a0823160e01b81526001600160a01b03848116600483015262000c4d9216906370a08231906024015b602060405180830381865afa15801562000c17573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000c3d919062005ac2565b68878678326eac9000006200349c565b604d54604e546040516370a0823160e01b81526001600160a01b03918216600482015262000ccd9291909116906370a08231906024015b602060405180830381865afa15801562000ca0573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000cc6919062005ac2565b5f6200349c565b604e54605480546001600160a01b0319166001600160a01b03928316179055604080516060810182529184168252600160208084019190915281515f808252918101835290929182015290505f5b60455f9054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000d6c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000d92919062005ac2565b81101562000e4457606554604554604080515f815260208101918290526349f13de760e01b9091526001600160a01b03928316926349f13de79262000df79263deadbeef9290911690605390662386f26fc10000808963deadbabe6024850162005c2e565b6020604051808303815f875af115801562000e14573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000e3a919062005ca1565b5060010162000d1b565b50606554604554604080518082018252600a8152694879706572647269766560b01b60208083019190915282515f80825291810193849052632e7cd97160e01b909352936001600160a01b0390811693632e7cd9719362000ed09363deadbeef93909216919060539068878678326eac900000662386f26fc10000808c63deadbabe6024860162005cbf565b6020604051808303815f875af115801562000eed573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062000f13919062005ca1565b604d546040516370a0823160e01b81526001600160a01b03878116600483015292935062000f4e92909116906370a082319060240162000c84565b604d54604e546040516370a0823160e01b81526001600160a01b03918216600482015262000f8a9291909116906370a082319060240162000bfb565b604051631b2b776160e11b81525f60048201526001600160a01b0385811660248301526200102d9190831690633656eec2906044015b602060405180830381865afa15801562000fdc573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001002919062005ac2565b6057546200101290600262005d8e565b620010279068878678326eac90000062005da8565b6200349c565b60455460575462001092916001600160a01b0316908390879068878678326eac90000090662386f26fc10000906001905f5b6040519080825280601f01601f1916602001820160405280156200108a576020820181803683370190505b505f62003503565b60655460408051631ba5759f60e21b815290516200110b926001600160a01b031691636e95d67c9160048083019260209291908290030181865afa158015620010dd573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001103919062005ac2565b60016200349c565b606554604051636d56126d60e11b81525f600482015262001183916001600160a01b03169063daac24da906024015b602060405180830381865afa15801562001156573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200117c919062005ca1565b8262003bf2565b60655460405163bc30e7a160e01b81525f6004820181905260016024830152916001600160a01b03169063bc30e7a1906044015f60405180830381865afa158015620011d1573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052620011fa919081019062005de3565b90506200120a815160016200349c565b62001232815f8151811062001223576200122362005e82565b60200260200101518362003bf2565b604d5462001254906001600160a01b03168668878678326eac9000006200348e565b604d5460665460405163095ea7b360e01b81526001600160a01b039283169263095ea7b392620012959291169068878678326eac900000906004016200592f565b6020604051808303815f875af1158015620012b2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620012d8919062005b24565b50604f54605480546001600160a01b0319166001600160a01b039092169190911790555f5b60665f9054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200134e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001374919062005ac2565b8110156200142257606554606654604080515f815260208101918290526349f13de760e01b9091526001600160a01b03928316926349f13de792620013d59261dead9290911690605390662386f26fc10000808961babe6024850162005c2e565b6020604051808303815f875af1158015620013f2573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001418919062005ca1565b50600101620012fd565b50606554606654604080518082018252600a8152694879706572647269766560b01b60208083019190915282515f80825291810193849052632e7cd97160e01b909352936001600160a01b0390811693632e7cd97193620014aa9361dead93909216919060539068878678326eac900000662386f26fc10000808e61babe6024860162005cbf565b6020604051808303815f875af1158015620014c7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620014ed919062005ca1565b604d546040516370a0823160e01b81526001600160a01b0389811660048301529293506200152892909116906370a082319060240162000c84565b604d54604f546040516370a0823160e01b81526001600160a01b039182166004820152620015649291909116906370a082319060240162000bfb565b604051631b2b776160e11b81525f60048201526001600160a01b0387811660248301526200159f9190831690633656eec29060440162000fc0565b606654605754620015d6916001600160a01b0316908390899068878678326eac90000090662386f26fc10000906001905f6200105f565b60655460408051631ba5759f60e21b815290516200164f926001600160a01b031691636e95d67c9160048083019260209291908290030181865afa15801562001621573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001647919062005ac2565b60026200349c565b606554604051636d56126d60e11b81525f6004820152620016c6916001600160a01b03169063daac24da90602401602060405180830381865afa15801562001699573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620016bf919062005ca1565b8462003bf2565b606554604051636d56126d60e11b815260016004820152620016fb916001600160a01b03169063daac24da906024016200113a565b60655460405163bc30e7a160e01b81525f6004820152600260248201526001600160a01b039091169063bc30e7a1906044015f60405180830381865afa15801562001748573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405262001771919081019062005de3565b915062001781825160026200349c565b620017a9825f815181106200179a576200179a62005e82565b60200260200101518462003bf2565b620017d282600181518110620017c357620017c362005e82565b60200260200101518262003bf2565b604d54620017f4906001600160a01b03168668878678326eac9000006200348e565b6040516303223eab60e11b81526001600160a01b03861660048201525f8051602062028f41833981519152906306447d56906024015f604051808303815f87803b15801562001841575f80fd5b505af115801562001854573d5f803e3d5ffd5b5050604d5460455460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b393506200189a929091169068878678326eac900000906004016200592f565b6020604051808303815f875af1158015620018b7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620018dd919062005b24565b50604d546040516370a0823160e01b81526001600160a01b038781166004830152620019149216906370a082319060240162000bfb565b604d54604f546040516370a0823160e01b81526001600160a01b039182166004820152620019509291909116906370a082319060240162000bfb565b6001600160a01b038086168552604f54605480546001600160a01b031916919092161790555f5b60455f9054906101000a90046001600160a01b03166001600160a01b031663e99be3966040518163ffffffff1660e01b8152600401602060405180830381865afa158015620019c8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620019ee919062005ac2565b81101562001a9c57606554604554604080515f815260208101918290526349f13de760e01b9091526001600160a01b03928316926349f13de79262001a4f9261beef9290911690605390662386f26fc10000808961dead6024850162005c2e565b6020604051808303815f875af115801562001a6c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001a92919062005ca1565b5060010162001977565b50606554604554604080518082018252600a8152694879706572647269766560b01b60208083019190915282515f80825291810193849052632e7cd97160e01b909352936001600160a01b0390811693632e7cd9719362001b249361beef93909216919060539068878678326eac900000662386f26fc10000808f61dead6024860162005cbf565b6020604051808303815f875af115801562001b41573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001b67919062005ca1565b604d546040516370a0823160e01b81526001600160a01b03898116600483015292935062001ba292909116906370a082319060240162000c84565b604d54604f546040516370a0823160e01b81526001600160a01b03918216600482015262001c309291909116906370a0823190602401602060405180830381865afa15801562001bf4573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001c1a919062005ac2565b6200102768878678326eac900000600262005d8e565b604051631b2b776160e11b81525f60048201526001600160a01b03878116602483015262001c6b9190831690633656eec29060440162000fc0565b60455460575462001ca2916001600160a01b0316908390899068878678326eac90000090662386f26fc10000906001905f6200105f565b60655460408051631ba5759f60e21b8152905162001d1b926001600160a01b031691636e95d67c9160048083019260209291908290030181865afa15801562001ced573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001d13919062005ac2565b60036200349c565b606554604051636d56126d60e11b81525f600482015262001d92916001600160a01b03169063daac24da90602401602060405180830381865afa15801562001d65573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001d8b919062005ca1565b8562003bf2565b606554604051636d56126d60e11b81526001600482015262001e0a916001600160a01b03169063daac24da90602401602060405180830381865afa15801562001ddd573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062001e03919062005ca1565b8362003bf2565b606554604051636d56126d60e11b81526002600482015262001e3f916001600160a01b03169063daac24da906024016200113a565b60655460405163bc30e7a160e01b81525f6004820152600360248201526001600160a01b039091169063bc30e7a1906044015f60405180830381865afa15801562001e8c573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405262001eb5919081019062005de3565b925062001ec5835160036200349c565b62001eed835f8151811062001ede5762001ede62005e82565b60200260200101518562003bf2565b62001f078360018151811062001223576200122362005e82565b62001f2183600281518110620017c357620017c362005e82565b50505050505050565b5f8062001f378362003c35565b60405163c88a5e6d60e01b815291935091505f8051602062028f418339815191529063c88a5e6d9062001f7b90859069021e19e0c9bab2400000906004016200592f565b5f604051808303815f87803b15801562001f93575f80fd5b505af115801562001fa6573d5f803e3d5ffd5b50505050915091565b6060601b805480602002602001604051908101604052809291908181526020015f905b828210156200075b575f8481526020908190206040805180820182526002860290920180546001600160a01b031683526001810180548351818702810187019094528084529394919385830193928301828280156200207b57602002820191905f5260205f20905f905b82829054906101000a900460e01b6001600160e01b031916815260200190600401906020826003010492830192600103820291508084116200203c5790505b5050505050815250508152602001906001019062001fd2565b604d545f908190620020ba906001600160a01b03168268878678326eac9000006200348e565b6040516303223eab60e11b81526001600160a01b03831660048201525f8051602062028f41833981519152906306447d56906024015f604051808303815f87803b15801562002107575f80fd5b505af11580156200211a573d5f803e3d5ffd5b5050604d5460455460405163095ea7b360e01b81526001600160a01b03928316945063095ea7b3935062002160929091169068878678326eac900000906004016200592f565b6020604051808303815f875af11580156200217d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620021a3919062005b24565b50605154604051602001620021ba91815260200190565b60408051808303601f190181528282528051602091820120605155605254908301520160408051808303601f19018152908290528051602090910120605255605480546001600160a01b0319166001600160a01b038416179055630618f58760e51b8152636e623f0f60e01b60048201525f8051602062028f418339815191529063c31eb0e0906024015f604051808303815f87803b1580156200225c575f80fd5b505af11580156200226f573d5f803e3d5ffd5b5050606554605154604080515f80825260208201928390526052546349f13de760e01b9093526001600160a01b0390941695506349f13de79450620022ca939160539190662386f26fc1000090819085906024850162005c2e565b6020604051808303815f875af1158015620022e7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200230d919062005ca1565b505050565b6060601a805480602002602001604051908101604052809291908181526020015f905b828210156200075b578382905f5260205f20018054620023559062005ada565b80601f0160208091040260200160405190810160405280929190818152602001828054620023839062005ada565b8015620023d25780601f10620023a857610100808354040283529160200191620023d2565b820191905f5260205f20905b815481529060010190602001808311620023b457829003601f168201915b50505050508152602001906001019062002335565b6060601c805480602002602001604051908101604052809291908181526020015f905b828210156200075b575f8481526020908190206040805180820182526002860290920180546001600160a01b03168352600181018054835181870281018701909452808452939491938583019392830182828015620024b357602002820191905f5260205f20905f905b82829054906101000a900460e01b6001600160e01b03191681526020019060040190602082600301049283019260010382029150808411620024745790505b505050505081525050815260200190600101906200240a565b60606019805480602002602001604051908101604052809291908181526020015f905b828210156200075b578382905f5260205f200180546200250f9062005ada565b80601f01602080910402602001604051908101604052809291908181526020018280546200253d9062005ada565b80156200258c5780601f1062002562576101008083540402835291602001916200258c565b820191905f5260205f20905b8154815290600101906020018083116200256e57829003601f168201915b505050505081526020019060010190620024ef565b6008545f9060ff1615620025b9575060085460ff1690565b604051630667f9d760e41b81525f905f8051602062028f418339815191529063667f9d709062002607905f8051602062028f61833981519152906519985a5b195960d21b906004016200592f565b602060405180830381865afa15801562002623573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062002649919062005ac2565b1415905090565b606060158054806020026020016040519081016040528092919081815260200182805480156200061257602002820191905f5260205f209081546001600160a01b03168152600190910190602001808311620005f3575050505050905090565b604051630637469360e31b815262fe9b94905f905f8051602062028f41833981519152906331ba349890620026eb90603d9060040162005e96565b6020604051808303815f875af115801562002708573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906200272e919062005ac2565b604051639ebf682760e01b8152600481018290529091505f8051602062028f4183398151915290639ebf6827906024015f604051808303815f87803b15801562002776575f80fd5b505af115801562002789573d5f803e3d5ffd5b505060405163d9bbf3a160e01b8152600481018590525f8051602062028f41833981519152925063d9bbf3a191506024015f604051808303815f87803b158015620027d2575f80fd5b505af1158015620027e5573d5f803e3d5ffd5b5050603f805460ff191660011790555050604080518082019091526005815264616c69636560d81b60208201526200281d9062001f2a565b50601e80546001600160a01b0390921661010002610100600160a81b03199092169190911790556040805180820190915260038152623137b160e91b6020820152620028699062001f2a565b50602080546001600160a01b0319166001600160a01b03928316179055602a546040516303223eab60e11b8152911660048201525f8051602062028f41833981519152906306447d56906024015f604051808303815f87803b158015620028ce575f80fd5b505af1158015620028e1573d5f803e3d5ffd5b505f925060019150620028f19050565b6040519080825280602002602001820160405280156200291b578160200160208202803683370190505b5060205481519192506001600160a01b03169082905f9062002941576200294162005e82565b60200260200101906001600160a01b031690816001600160a01b0316815250506040516200296f9062005512565b60208082526010908201526f466f72776172646572466163746f727960801b6040820152606001604051809103905ff080158015620029b0573d5f803e3d5ffd5b50603f8054610100600160a81b0319166101006001600160a01b03938416810291909117909155604080516102c081018252601e5483900484168152602254841660208083019190915280548516828401526060808301879052602c548616608080850191909152602e5490961660a08401525f60c0840152610e1060e0840152617080948301949094526201518061012083015262093a806101408301526312cc0300610160830152670214e8348c4f00006101808301819052670853a0d2313c00006101a084015266038d7ea4c680006101c084018190526706f05b59d3b200006101e08501819052662386f26fc10000610200860181905261022086019190915285518089018752918252655af3107a400082850152818601839052666a94d74f4300008288018190526102408601929092528551978801865267016345785d8a0000885287840152868501919091529385019390935261026081019390935263deadbeef61028084015263deadbabe6102a084015280518082018252601181527048797065726472697665466163746f727960781b928101929092525162002b5c9062005520565b62002b6992919062005f90565b604051809103905ff08015801562002b83573d5f803e3d5ffd5b50606580546001600160a01b0319166001600160a01b039290921691909117905560405162002bb290620054b0565b604051809103905ff08015801562002bcc573d5f803e3d5ffd5b50604680546001600160a01b0319166001600160a01b039290921691909117905560405162002bfb90620054be565b604051809103905ff08015801562002c15573d5f803e3d5ffd5b50604780546001600160a01b0319166001600160a01b039290921691909117905560405162002c4490620054cc565b604051809103905ff08015801562002c5e573d5f803e3d5ffd5b50604880546001600160a01b0319166001600160a01b039290921691909117905560405162002c8d90620054da565b604051809103905ff08015801562002ca7573d5f803e3d5ffd5b50604980546001600160a01b0319166001600160a01b039290921691909117905560405162002cd690620054e8565b604051809103905ff08015801562002cf0573d5f803e3d5ffd5b50604a80546001600160a01b0319166001600160a01b039290921691909117905560405162002d1f90620054f6565b604051809103905ff08015801562002d39573d5f803e3d5ffd5b50604b80546001600160a01b0319166001600160a01b03928316908117909155604080518082018252601d81527f487970657264726976654465706c6f796572436f6f7264696e61746f720000006020820152606554604654604754604854604954604a549651959894851697938516969285169591851694908116939216919062002dc59062005504565b62002dd898979695949392919062005a63565b604051809103905ff08015801562002df2573d5f803e3d5ffd5b50604580546001600160a01b0319166001600160a01b03928316179055604080516101e081018252604d54831681525f60208083019190915260655483516399623bb160e01b8152845193959486019491909116926399623bb1926004808401939192918290030181865afa15801562002e6e573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062002e94919062005ca1565b6001600160a01b0316815260200160655f9054906101000a90046001600160a01b03166001600160a01b031663c905a4b56040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002ef3573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062002f19919062005ac2565b8152602001670de0b6b3a7640000815260200166038d7ea4c68000815260200167063eb89da4ed000081526020016301e1338081526020016201518081526020015f815260200160655f9054906101000a90046001600160a01b03166001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa15801562002fb1573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062002fd7919062005ca1565b6001600160a01b039081168252602c548116602080840191909152602e5482166040808501919091525f6060808601829052825160808082018552662386f26fc10000825266038d7ea4c6800082870152670214e8348c4f000082860152666a94d74f43000082840152968701528651605380546001600160a01b03199081169288169290921790558785015160548054831691881691909117905587840151605580548316918816919091179055878201516056559587015160575560a087015160585560c087015160595560e0870151605a55610100870151605b55610120870151605c55610140870151605d80548816918716919091179055610160870151605e80548816918716919091179055610180870151605f805488169187169190911790556101a08701518154909616959094169490941783556101c09094015180516061559081015160625580840151606355015160645581516390c5013b60e01b815291515f8051602062028f41833981519152926390c5013b92600480830193919282900301818387803b15801562003172575f80fd5b505af115801562003185573d5f803e3d5ffd5b5050601e5460405163ca669fa760e01b81526101009091046001600160a01b031660048201525f8051602062028f41833981519152925063ca669fa791506024015f604051808303815f87803b158015620031de575f80fd5b505af1158015620031f1573d5f803e3d5ffd5b5050606554604554604051630843957560e31b81526001600160a01b0391821660048201529116925063421caba891506024015f604051808303815f87803b1580156200323c575f80fd5b505af11580156200324f573d5f803e3d5ffd5b50505050604d5f9054906101000a90046001600160a01b03165f805f5f196040516200327b906200552e565b6001600160a01b03958616815260e06020820181905260099082015268796561726e2064616960b81b61010082015261012060408201819052600490820152637944616960e01b6101408201526060810194909452939091166080830152151560a082015260c081019190915261016001604051809103905ff08015801562003306573d5f803e3d5ffd5b50604e80546001600160a01b0319166001600160a01b03928316179055604d546040519116905f90819081905f199062003340906200552e565b6001600160a01b03958616815260e060208201819052600b908201526a736176696e67732064616960a81b61010082015261012060408201819052600490820152637344616960e01b6101408201526060810194909452939091166080830152151560a082015260c081019190915261016001604051809103905ff080158015620033cd573d5f803e3d5ffd5b50604f80546001600160a01b0319166001600160a01b03929092169190911790557fa37c6d309c0d49be6d853949cb7413a2b65659a0cbc8a7889b50865014380cf96051557fa05e334153147e75f3f416139b5109d1179cb56fef6a4ecb4c4cbc92a7c37b70605255604080516320d797a960e11b815290515f8051602062028f41833981519152916341af2f52916004808301925f92919082900301818387803b1580156200347b575f80fd5b505af115801562001f21573d5f803e3d5ffd5b6200230d8383835f62003d0c565b60405163260a5b1560e21b815260048101839052602481018290525f8051602062028f41833981519152906398296c54906044015b5f6040518083038186803b158015620034e8575f80fd5b505afa158015620034fb573d5f803e3d5ffd5b505050505050565b5f5f8051602062028f618339815191525f1c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004015f604051808303815f875af115801562003551573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526200357a919081019062006240565b90505f620035a9827fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed23446562003f07565b9050620035b9815160016200349c565b62003620815f81518110620035d257620035d262005e82565b60200260200101515f01515f81518110620035f157620035f162005e82565b60200260200101517fb25b0f0f93209be08152122f1321f6b0ef559a93a67695fff5fea3e5ed23446562004025565b62003673815f8151811062003639576200363962005e82565b60200260200101515f015160018151811062003659576200365962005e82565b60200260200101515f1c8c6001600160a01b03166200349c565b5f805f80845f815181106200368c576200368c62005e82565b602002602001015160200151806020019051810190620036ad9190620063cf565b9350935093509350620036c1848f62003bf2565b62003731838f6001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa15801562003702573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526200372b91908101906200655e565b6200405f565b5f8e6001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562003770573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062003796919062006593565b83518151919250620037a89162003bf2565b620037bc8360200151826020015162003bf2565b620037d08360400151826040015162003bf2565b620037e48360600151826060015162004025565b620037f883608001518260a001516200349c565b6200380c8360a001518260c001516200349c565b620038218360e001518261010001516200349c565b620038378361010001518261012001516200349c565b6200384d8361012001518261014001516200349c565b6200386383610140015182610160015162003bf2565b6200387983610160015182610180015162003bf2565b6101c0830151516101e0820151516200389391906200349c565b620038b1836101c0015160200151826101e00151602001516200349c565b620038cf836101c0015160400151826101e00151604001516200349c565b620038ed836101c0015160600151826101e00151606001516200349c565b6200394982604051602001620039049190620066a4565b604051602081830303815290604052805190602001208a6040516020016200392d9190620066a4565b6040516020818303038152906040528051906020012062004025565b5050505050505f6200397c827f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af362003f07565b90506200398c815160016200349c565b620039f3815f81518110620039a557620039a562005e82565b60200260200101515f01515f81518110620039c457620039c462005e82565b60200260200101517f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af362004025565b62003a3d815f8151811062003a0c5762003a0c62005e82565b60200260200101515f015160018151811062003a2c5762003a2c62005e82565b60200260200101515f1c8a62003bf2565b5f8a90505f805f805f865f8151811062003a5b5762003a5b62005e82565b60200260200101516020015180602001905181019062003a7c9190620066b8565b9398509196509450925090508d8c1562003b255762003b1f8662003aa28e600262005d8e565b6040516363737ac960e11b8152600481018590526001600160a01b038b169063c6e6f59290602401602060405180830381865afa15801562003ae6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062003b0c919062005ac2565b62003b18919062005da8565b8c62004094565b62003b43565b62003b438662003b378e600262005d8e565b62003b18908462005da8565b62003b4f85826200349c565b62003bc684886001600160a01b031663b0d965806040518163ffffffff1660e01b815260040161026060405180830381865afa15801562003b92573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062003bb8919062006593565b60800151620186a062004094565b62003bd2838e620040f9565b62003bde828f6200349c565b505050505050505050505050505050505050565b6040516328a9b0fb60e11b81526001600160a01b038084166004830152821660248201525f8051602062028f418339815191529063515361f690604401620034d1565b5f808260405160200162003c4a919062006700565b60408051808303601f190181529082905280516020909101206001625e79b760e01b031982526004820181905291505f8051602062028f418339815191529063ffa1864990602401602060405180830381865afa15801562003cae573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062003cd4919062005ca1565b6040516318caf8e360e31b81529092505f8051602062028f418339815191529063c657c7189062001f7b90859087906004016200671d565b604080516001600160a01b0385811660248084019190915283518084039091018152604490920183526020820180516001600160e01b03166370a0823160e01b17905291515f9287169162003d619162006700565b5f60405180830381855afa9150503d805f811462003d9b576040519150601f19603f3d011682016040523d82523d5f602084013e62003da0565b606091505b509150505f8180602001905181019062003dbb919062005ac2565b905062003df58462003dee8762003de76370a0823160e01b62003de0600d8d62004135565b906200415c565b9062004179565b90620041a4565b8215620034fb5760408051600481526024810182526020810180516001600160e01b03166318160ddd60e01b17905290515f916001600160a01b0389169162003e3f919062006700565b5f60405180830381855afa9150503d805f811462003e79576040519150601f19603f3d011682016040523d82523d5f602084013e62003e7e565b606091505b509150505f8180602001905181019062003e99919062005ac2565b90508286101562003ec45762003eb0868462005da8565b62003ebc908262005da8565b905062003edf565b62003ed0838762005da8565b62003edc908262006742565b90505b62003efd8162003dee6318160ddd60e01b62003de0600d8d62004135565b5050505050505050565b60605f83516001600160401b0381111562003f265762003f26620057c7565b60405190808252806020026020018201604052801562003f7457816020015b604080516060808201835280825260208201525f9181019190915281526020019060019003908162003f455790505b5091505f5b84518110156200401b578385828151811062003f995762003f9962005e82565b60200260200101515f01515f8151811062003fb85762003fb862005e82565b602002602001015103620040125784818151811062003fdb5762003fdb62005e82565b602002602001015183838062003ff19062006758565b94508151811062004006576200400662005e82565b60200260200101819052505b60010162003f79565b5081525b92915050565b604051637c84c69b60e01b815260048101839052602481018290525f8051602062028f4183398151915290637c84c69b90604401620034d1565b60405163f320d96360e01b81525f8051602062028f418339815191529063f320d96390620034d1908590859060040162006773565b604051630b6903e360e11b81526004810184905260248101839052604481018290525f8051602062028f41833981519152906316d207c6906064015f6040518083038186803b158015620040e6575f80fd5b505afa15801562001f21573d5f803e3d5ffd5b60405163f7fe347760e01b8152821515600482015281151560248201525f8051602062028f418339815191529063f7fe347790604401620034d1565b6004820180546001600160a01b0319166001600160a01b0383161790555f825b9392505050565b60028201805463ffffffff191660e083901c1790555f8262004155565b6001808301805491820181555f908152602081206001600160a01b0384169201919091558262004155565b620041b08282620041b4565b5050565b6004820154600283015460038401546001600160a01b039092169160e09190911b905f620041e286620045f1565b6001600160a01b0385165f908152602088815260408083206001600160e01b0319881684528252808320905193945092620042229185918791016200679b565b60408051601f198184030181529181528151602092830120835290820192909252015f206003015460ff1662004260576200425e865f62004709565b505b6001600160a01b0384165f908152602087815260408083206001600160e01b0319871684528252808320905190918391620042a09186918891016200679b565b6040516020818303038152906040528051906020012081526020019081526020015f2090505f81600201548260010154620042dc919062006742565b1115620043db575f81600201548260010154620042fa919062006742565b620043089061010062005da8565b62004315906002620068b7565b60405163348051d760e11b815260048101829052909150818810905f8051602062028f4183398151915290636900a3ae906024015f60405180830381865afa15801562004364573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526200438d91908101906200655e565b6040516020016200439f9190620068c4565b60405160208183030381529060405290620043d85760405162461bcd60e51b8152600401620043cf9190620066a4565b60405180910390fd5b50505b8054604051630667f9d760e41b81525f915f8051602062028f418339815191529163667f9d709162004413918a91906004016200592f565b602060405180830381865afa1580156200442f573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062004455919062005ac2565b60018381015460028501549293505f92908101610100039190911b5f1901811b1983169089901b1783546040516370ca10bb60e01b81529192505f8051602062028f41833981519152916370ca10bb91620044b8918b9190869060040162006943565b5f604051808303815f87803b158015620044d0575f80fd5b505af1158015620044e3573d5f803e3d5ffd5b505050505f80620044f48b6200471e565b91509150811580620045065750898114155b15620045d95784546040516370ca10bb60e01b81525f8051602062028f41833981519152916370ca10bb9162004543918d91899060040162006943565b5f604051808303815f87803b1580156200455b575f80fd5b505af11580156200456e573d5f803e3d5ffd5b505060405162461bcd60e51b815260206004820152603360248201527f73746453746f726167652066696e642853746453746f72616765293a204661696044820152723632b2103a37903bb934ba32903b30b63ab29760691b60648201526084019150620043cf9050565b620045e48b620047ef565b5050505050505050505050565b6060816007018054620046049062005ada565b90505f036200466a576200401f826001018054806020026020016040519081016040528092919081815260200182805480156200465f57602002820191905f5260205f20905b8154815260200190600101908083116200464a575b5050505050620047fd565b8160070180546200467b9062005ada565b80601f0160208091040260200160405190810160405280929190818152602001828054620046a99062005ada565b8015620046f85780601f10620046ce57610100808354040283529160200191620046f8565b820191905f5260205f20905b815481529060010190602001808311620046da57829003601f168201915b50505050509050919050565b919050565b5f620047168383620048a0565b549392505050565b60028101545f908190819060e01b6200473785620045f1565b6040516020016200474a92919062006964565b60408051601f198184030181529082905260048601549092505f9182916001600160a01b0316906200477e90859062006700565b5f60405180830381855afa9150503d805f8114620047b8576040519150601f19603f3d011682016040523d82523d5f602084013e620047bd565b606091505b50915091505f620047e18288600301546020620047db919062005d8e565b62004fe2565b929792965091945050505050565b620047fa816200505d565b50565b60605f8251602062004810919062005d8e565b6001600160401b038111156200482a576200482a620057c7565b6040519080825280601f01601f19166020018201604052801562004855576020820181803683370190505b5090505f5b835181101562004899575f8482815181106200487a576200487a62005e82565b602090810291909101810151838202850190910152506001016200485a565b5092915050565b6004820154600283015460038401545f926001600160a01b03169160e01b9083620048cb87620045f1565b6001600160a01b0385165f908152602089815260408083206001600160e01b03198816845282528083209051939450926200490b9185918791016200679b565b60408051601f198184030181529181528151602092830120835290820192909252015f206003015460ff1615620049bc5785156200494e576200494e876200505d565b6001600160a01b0384165f908152602088815260408083206001600160e01b031987168452825280832090519092916200498d9185918791016200679b565b6040516020818303038152906040528051906020012081526020019081526020015f209450505050506200401f565b5f8051602062028f618339815191525f1c6001600160a01b031663266cf1096040518163ffffffff1660e01b81526004015f604051808303815f87803b15801562004a05575f80fd5b505af115801562004a18573d5f803e3d5ffd5b505050505f62004a28886200471e565b6040516365bc948160e01b81526001600160a01b03881660048201529092505f91505f8051602062028f41833981519152906365bc9481906024015f604051808303815f875af115801562004a7f573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405262004aa8919081019062006996565b50905080515f0362004b25576040805162461bcd60e51b81526020600482015260248101919091527f73746453746f726167652066696e642853746453746f72616765293a204e6f2060448201527f73746f726167652075736520646574656374656420666f72207461726765742e6064820152608401620043cf565b5f5b815181101562004e8f575f5f8051602062028f618339815191525f1c6001600160a01b031663667f9d708985858151811062004b675762004b6762005e82565b60200260200101516040518363ffffffff1660e01b815260040162004b8e9291906200592f565b602060405180830381865afa15801562004baa573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062004bd0919062005ac2565b90508062004c32577f080fc4a96620c4462e705b23f346413fe3796bb63c6f8d8591baec0e231577a58884848151811062004c0f5762004c0f62005e82565b60200260200101515f1c60405162004c299291906200592f565b60405180910390a15b62004c5a8b84848151811062004c4c5762004c4c62005e82565b6020026020010151620050b1565b62004c66575062004e86565b60068b01545f90819060ff161562004cba575f62004ca18e87878151811062004c935762004c9362005e82565b602002602001015162005271565b909450925090508062004cb8575050505062004e86565b505b6001828201610100031b5f1901811b8316811c86811462004cdf575050505062004e86565b7f9c9555b1e3102e3cf48f427d79cb678f5d9bd1ed0ad574389461e255f95170ed8b8b8a8c60405160200162004d179291906200679b565b6040516020818303038152906040528051906020012089898151811062004d425762004d4262005e82565b602090810291909101810151604080516001600160a01b0390961686526001600160e01b03199094169185019190915291830152606082015260800160405180910390a1604051806080016040528087878151811062004da65762004da662005e82565b60200260200101515f1c8152602001848152602001838152602001600115158152508e5f015f8d6001600160a01b03166001600160a01b031681526020019081526020015f205f8c6001600160e01b0319166001600160e01b03191681526020019081526020015f205f8a8c60405160200162004e259291906200679b565b60408051808303601f1901815291815281516020928301208352828201939093529082015f20835181559083015160018201559082015160028201556060909101516003909101805460ff19169115159190911790555062004e8f92505050565b60010162004b27565b506001600160a01b0386165f90815260208a815260408083206001600160e01b0319891684528252808320905190929162004ecf9187918991016200679b565b60408051601f198184030181529181528151602092830120835290820192909252015f206003015460ff1662004f605760405162461bcd60e51b815260206004820152602f60248201527f73746453746f726167652066696e642853746453746f72616765293a20536c6f60448201526e3a143994903737ba103337bab7321760891b6064820152608401620043cf565b871562004f725762004f72896200505d565b6001600160a01b0386165f90815260208a815260408083206001600160e01b0319891684528252808320905190929162004fb19187918991016200679b565b6040516020818303038152906040528051906020012081526020019081526020015f20965050505050505092915050565b5f805f602085511162004ff757845162004ffa565b60205b90505f5b8181101562005053576200501481600862005d8e565b8662005021838862006742565b8151811062005034576200503462005e82565b01602001516001600160f81b031916901c929092179160010162004ffe565b5090949350505050565b6004810180546001600160a01b031916905560028101805463ffffffff191690556200508d600182015f6200553c565b5f6003820181905560068201805460ff19169055620047fa90600783019062005559565b600480830154604051630667f9d760e41b81525f9283925f8051602062028f418339815191529263667f9d7092620050f6926001600160a01b0316918891016200592f565b602060405180830381865afa15801562005112573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019062005138919062005ac2565b90505f8062005147866200471e565b90925090505f81156200515b575f6200515e565b5f195b6004808901546040516370ca10bb60e01b81529293505f8051602062028f41833981519152926370ca10bb92620051a4926001600160a01b0316918b9187910162006943565b5f604051808303815f87803b158015620051bc575f80fd5b505af1158015620051cf573d5f803e3d5ffd5b505050505f620051df886200471e565b60048a8101546040516370ca10bb60e01b81529294505f8051602062028f4183398151915293506370ca10bb9262005228926001600160a01b03909216918c918b910162006943565b5f604051808303815f87803b15801562005240575f80fd5b505af115801562005253573d5f803e3d5ffd5b50505050838015620052655750808314155b98975050505050505050565b600482810154604051630667f9d760e41b81525f928392839283925f8051602062028f418339815191529263667f9d7092620052bc926001600160a01b03909216918a91016200592f565b602060405180830381865afa158015620052d8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190620052fe919062005ac2565b90505f806200531088886001620053b8565b915091505f80620053238a8a5f620053b8565b60048c8101546040516370ca10bb60e01b81529395509193505f8051602062028f41833981519152926370ca10bb926200536e926001600160a01b03909116918e918b910162006943565b5f604051808303815f87803b15801562005386575f80fd5b505af115801562005399573d5f803e3d5ffd5b50505050838015620053a85750815b9a92995097509095505050505050565b5f805f5b610100811015620054a0575f84620053d8576001821b620053ea565b620053e58260ff62005da8565b6001901b5b6004808901546040516370ca10bb60e01b81529293505f8051602062028f41833981519152926370ca10bb9262005430926001600160a01b0316918b9187910162006943565b5f604051808303815f87803b15801562005448575f80fd5b505af11580156200545b573d5f803e3d5ffd5b505050505f806200546c896200471e565b915091508180156200547d57508015155b1562005494576001849550955050505050620054a8565b505050600101620053bc565b505f80915091505b935093915050565b61212380620069fd83390190565b6143c18062008b2083390190565b6145d4806200cee183390190565b61474b80620114b583390190565b6146b78062015c0083390190565b613a0f806201a2b783390190565b612aea806201dcc683390190565b61186e80620207b083390190565b614012806202201e83390190565b612f11806202603083390190565b5080545f8255905f5260205f2090810190620047fa919062005590565b508054620055679062005ada565b5f825580601f1062005577575050565b601f0160209004905f5260205f2090810190620047fa91905b5b80821115620055a6575f815560010162005591565b5090565b6001600160a01b0381168114620047fa575f80fd5b5f805f60608486031215620055d2575f80fd5b8335620055df81620055aa565b92506020840135620055f181620055aa565b915060408401356200560381620055aa565b809150509250925092565b602080825282518282018190525f9190848201906040850190845b81811015620056505783516001600160a01b03168352928401929184019160010162005629565b50909695505050505050565b5f5b83811015620056785781810151838201526020016200565e565b50505f910152565b5f8151808452620056998160208601602086016200565c565b601f01601f19169290920160200192915050565b602080825282518282018190525f919060409081850190600581811b87018401888601875b848110156200576157603f198a8403018652815180516001600160a01b03168452880151888401889052805188850181905290890190606081871b8601810191908601905f5b818110156200574a57605f198885030183526200573784865162005680565b948d01949350918c019160010162005718565b5050509689019693505090870190600101620056d2565b50909998505050505050505050565b5f805f806080858703121562005784575f80fd5b84356200579181620055aa565b93506020850135620057a381620055aa565b9250604085013591506060850135620057bc81620055aa565b939692955090935050565b634e487b7160e01b5f52604160045260245ffd5b604051606081016001600160401b0381118282101715620058005762005800620057c7565b60405290565b6040516101e081016001600160401b0381118282101715620058005762005800620057c7565b60405161020081016001600160401b0381118282101715620058005762005800620057c7565b604051601f8201601f191681016001600160401b03811182821017156200587d576200587d620057c7565b604052919050565b5f6001600160401b03821115620058a057620058a0620057c7565b50601f01601f191660200190565b5f60208284031215620058bf575f80fd5b81356001600160401b03811115620058d5575f80fd5b8201601f81018413620058e6575f80fd5b8035620058fd620058f78262005885565b62005852565b81815285602083850101111562005912575f80fd5b816020840160208301375f91810160200191909152949350505050565b6001600160a01b03929092168252602082015260400190565b5f60208083018184528085518083526040925060408601915060408160051b8701018488015f5b83811015620059ef57888303603f19018552815180516001600160a01b031684528701518784018790528051878501819052908801905f9060608601905b80831015620059d95783516001600160e01b0319168252928a019260019290920191908a0190620059ad565b509689019694505050908601906001016200596f565b509098975050505050505050565b5f60208083016020845280855180835260408601915060408160051b8701019250602087015f5b8281101562005a5657603f1988860301845262005a4385835162005680565b9450928501929085019060010162005a24565b5092979650505050505050565b5f61010080835262005a788184018c62005680565b6001600160a01b039a8b166020850152988a16604084015250509487166060860152928616608085015290851660a0840152841660c083015290921660e090920191909152919050565b5f6020828403121562005ad3575f80fd5b5051919050565b600181811c9082168062005aef57607f821691505b60208210810362005b0e57634e487b7160e01b5f52602260045260245ffd5b50919050565b8051801515811462004704575f80fd5b5f6020828403121562005b35575f80fd5b620041558262005b14565b62005b648262005b5783546001600160a01b031690565b6001600160a01b03169052565b60018101546001600160a01b0390811660208401526002820154811660408401526003820154606084015260048201546080840152600582015460a0840152600682015460c0840152600782015460e084015260088201546101008401526009820154610120840152600a8201548116610140840152600b8201548116610160840152600c8201548116610180840152600d820154166101a0830152600e8101546101c0830152600f8101546101e083015260108101546102008301526011015461022090910152565b8881526001600160a01b03881660208201525f61032062005c53604084018a62005b40565b8061028084015262005c688184018962005680565b915050856102a0830152846102c0830152836102e0830152826103008301529998505050505050505050565b80516200470481620055aa565b5f6020828403121562005cb2575f80fd5b81516200415581620055aa565b8a81526001600160a01b038a81166020830152610360604083018190525f9162005cec8483018d62005680565b915062005cfd606085018c62005b40565b8382036102a085015262005d12828b62005680565b9150886102c0850152876102e0850152866103008501528382036103208501528086511682525060208501511515602082015260408501516060604083015262005d60606083018262005680565b92505050826103408301529b9a5050505050505050505050565b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176200401f576200401f62005d7a565b818103818111156200401f576200401f62005d7a565b5f6001600160401b0382111562005dd95762005dd9620057c7565b5060051b60200190565b5f602080838503121562005df5575f80fd5b82516001600160401b0381111562005e0b575f80fd5b8301601f8101851362005e1c575f80fd5b805162005e2d620058f78262005dbe565b81815260059190911b8201830190838101908783111562005e4c575f80fd5b928401925b8284101562005e7757835162005e6781620055aa565b8252928401929084019062005e51565b979650505050505050565b634e487b7160e01b5f52603260045260245ffd5b5f60208083525f84545f60018260011c9150600183168062005eb957607f831692505b60208310810362005ed857634e487b7160e01b5f52602260045260245ffd5b602088018390526040880181801562005efa576001811462005f115762005f3c565b60ff198616825284151560051b8201965062005f3c565b5f8b8152602090205f5b8681101562005f365781548482015290850190890162005f1b565b83019750505b50949998505050505050505050565b5f815180845260208085019450602084015f5b8381101562005f855781516001600160a01b03168752958201959082019060010162005f5e565b509495945050505050565b6040815262005fab6040820184516001600160a01b03169052565b5f602084015162005fc760608401826001600160a01b03169052565b5060408401516001600160a01b03166080830152606084015161038060a0840181905262005ffa6103c085018362005f4b565b915060808601516200601760c08601826001600160a01b03169052565b5060a08601516001600160a01b03811660e08601525060c08601516101006200604a818701836001600160a01b03169052565b60e088015161012087810191909152908801516101408088019190915290880151610160808801919091529088015161018080880191909152908801516101a080880191909152908801516101c080880191909152908801516101e0808801919091529088015161020080880191909152908801516102208088019190915290880151610240808801919091529088015161026080880191909152908801519150610280906200611d82880184805182526020810151602083015260408101516040830152606081015160608301525050565b880151805161030088015260208101516103208801526040810151610340880152606081015161036088015291508701516001600160a01b03811683870152905050506102a08501516103a0840152828103602084015262006180818562005680565b95945050505050565b5f82601f83011262006199575f80fd5b81516020620061ac620058f78362005dbe565b8083825260208201915060208460051b870101935086841115620061ce575f80fd5b602086015b84811015620061ec5780518352918301918301620061d3565b509695505050505050565b5f82601f83011262006207575f80fd5b815162006218620058f78262005885565b8181528460208386010111156200622d575f80fd5b620005b28260208301602087016200565c565b5f602080838503121562006252575f80fd5b82516001600160401b038082111562006269575f80fd5b818501915085601f8301126200627d575f80fd5b81516200628e620058f78262005dbe565b81815260059190911b83018401908481019088831115620062ad575f80fd5b8585015b838110156200635b57805185811115620062c9575f80fd5b86016060818c03601f1901811315620062e0575f80fd5b620062ea620057db565b8983015188811115620062fb575f80fd5b6200630b8e8c8387010162006189565b8252506040808401518981111562006321575f80fd5b620063318f8d83880101620061f7565b838d01525092820151926200634684620055aa565b810192909252508352918601918601620062b1565b5098975050505050505050565b5f6080828403121562006379575f80fd5b604051608081018181106001600160401b03821117156200639e576200639e620057c7565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f805f808486036102a0811215620063e5575f80fd5b8551620063f281620055aa565b60208701519095506001600160401b03808211156200640f575f80fd5b6200641d89838a01620061f7565b9550610240603f198401121562006432575f80fd5b6200643c62005806565b92506200644c6040890162005c94565b83526200645c6060890162005c94565b60208401526200646f6080890162005c94565b604084015260a0880151606084015260c0880151608084015260e088015160a084015261010091508188015160c08401526101208089015160e0850152610140808a0151848601526101609350838a0151828601526101809150620064d6828b0162005c94565b908501526101a0620064ea8a820162005c94565b848601526101c0935062006500848b0162005c94565b82860152620065136101e08b0162005c94565b908501525062006528896102008a0162006368565b838301526102808801519294508083111562006542575f80fd5b50506200655287828801620061f7565b91505092959194509250565b5f602082840312156200656f575f80fd5b81516001600160401b0381111562006585575f80fd5b620005b284828501620061f7565b5f6102608284031215620065a5575f80fd5b620065af6200582c565b620065ba8362005c94565b8152620065ca6020840162005c94565b6020820152620065dd6040840162005c94565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152506101208084015181830152506101408084015181830152506101606200664881850162005c94565b908201526101806200665c84820162005c94565b908201526101a06200667084820162005c94565b908201526101c06200668484820162005c94565b908201526101e0620066998585830162006368565b908201529392505050565b602081525f62004155602083018462005680565b5f805f805f60a08688031215620066cd575f80fd5b855194506020860151935060408601519250620066ed6060870162005b14565b9150608086015190509295509295909350565b5f8251620067138184602087016200565c565b9190910192915050565b6001600160a01b03831681526040602082018190525f90620005b29083018462005680565b808201808211156200401f576200401f62005d7a565b5f600182016200676c576200676c62005d7a565b5060010190565b604081525f62006787604083018562005680565b828103602084015262006180818562005680565b5f8351620067ae8184602088016200565c565b9190910191825250602001919050565b600181815b80851115620067fe57815f1904821115620067e257620067e262005d7a565b80851615620067f057918102915b93841c9390800290620067c3565b509250929050565b5f8262006816575060016200401f565b816200682457505f6200401f565b81600181146200683d5760028114620068485762006868565b60019150506200401f565b60ff8411156200685c576200685c62005d7a565b50506001821b6200401f565b5060208310610133831016604e8410600b84101617156200688d575081810a6200401f565b620068998383620067be565b805f1904821115620068af57620068af62005d7a565b029392505050565b5f62004155838362006806565b7f73746453746f726167652066696e642853746453746f72616765293a2050616381527f6b656420736c6f742e2057652063616e2774206669742076616c756520677265602082015269030ba32b9103a3430b7160b51b60408201525f82516200693681604a8501602087016200565c565b91909101604a0192915050565b6001600160a01b039390931683526020830191909152604082015260600190565b6001600160e01b03198316815281515f90620069888160048501602087016200565c565b919091016004019392505050565b5f8060408385031215620069a8575f80fd5b82516001600160401b0380821115620069bf575f80fd5b620069cd8683870162006189565b93506020850151915080821115620069e3575f80fd5b50620069f28582860162006189565b915050925092905056fe608060405234801561000f575f80fd5b506121068061001d5f395ff3fe608060405234801562000010575f80fd5b50600436106200002c575f3560e01c80638cc23ce01462000030575b5f80fd5b62000047620000413660046200035e565b62000063565b6040516001600160a01b03909116815260200160405180910390f35b604080513360208201529081018290525f908190606001604051602081830303815290604052805190602001208c8c8c8b8b8b8b8b604051620000a690620000e8565b620000b998979695949392919062000576565b8190604051809103905ff5905080158015620000d7573d5f803e3d5ffd5b509c9b505050505050505050505050565b611ab2806200061f83390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff81118282101715620001315762000131620000f6565b60405290565b5f82601f83011262000147575f80fd5b813567ffffffffffffffff80821115620001655762000165620000f6565b604051601f8301601f19908116603f01168101908282118183101715620001905762000190620000f6565b81604052838152866020858801011115620001a9575f80fd5b836020870160208301375f602085830101528094505050505092915050565b80356001600160a01b0381168114620001df575f80fd5b919050565b5f60808284031215620001f5575f80fd5b6040516080810181811067ffffffffffffffff821117156200021b576200021b620000f6565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f61026082840312156200025e575f80fd5b620002686200010a565b90506200027582620001c8565b81526200028560208301620001c8565b60208201526200029860408301620001c8565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e082015261010080830135818301525061012080830135818301525061014080830135818301525061016062000303818401620001c8565b9082015261018062000317838201620001c8565b908201526101a06200032b838201620001c8565b908201526101c06200033f838201620001c8565b908201526101e06200035484848301620001e4565b9082015292915050565b5f805f805f805f805f806103808b8d03121562000379575f80fd5b8a3567ffffffffffffffff8082111562000391575f80fd5b6200039f8e838f0162000137565b9b50620003b08e60208f016200024c565b9a50620003c16102808e01620001c8565b99506102a08d0135915080821115620003d8575f80fd5b50620003e78d828e0162000137565b975050620003f96102c08c01620001c8565b95506200040a6102e08c01620001c8565b94506200041b6103008c01620001c8565b93506200042c6103208c01620001c8565b92506200043d6103408c01620001c8565b91506103608b013590509295989b9194979a5092959850565b80516001600160a01b0316825260208101516200047e60208401826001600160a01b03169052565b5060408101516200049a60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201518184015250610120808201518184015250610140808201518184015250610160808201516200050d828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e090810151805191830191909152602081015161020083015260408101516102208301526060015161024090910152565b5f6103408083528a5180828501525f91505b80821015620005ac576020828d010151610360838601015260208201915062000588565b61036091505f82828601015281601f19601f83011685010192505050620005d7602083018a62000456565b6001600160a01b039788166102808301529587166102a08201529386166102c08501529185166102e08401528416610300830152909216610320909201919091529291505056fe61032060405234801562000011575f80fd5b5060405162001ab238038062001ab28339810160408190526200003491620006a6565b60015f81905587516001600160a01b0390811660809081526020808b0151831660a0908152918b01516101a052908a01516101c05260c0808b01516101e090815260e0808d015161020052610120808e0151909352610100808e0151909152610140808e0151909152908c01805151909252815190920151909152805160409081015161016052905160609081015161018052908a01518216610240528901516102605287166102205288908890889088908890889088908890620000fa898262000850565b506001600160a01b03948516610280529284166102a0529083166102c05282166102e05281166103005260208b01518b516200014095509091169250905060016200014e565b50505050505050506200095a565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001a890859083906200021916565b6200021357604080516001600160a01b03851660248201525f6044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b1790915262000207918691620002c316565b620002138482620002c3565b50505050565b5f805f846001600160a01b0316846040516200023691906200091c565b5f604051808303815f865af19150503d805f811462000271576040519150601f19603f3d011682016040523d82523d5f602084013e62000276565b606091505b5091509150818015620002a4575080511580620002a4575080806020019051810190620002a4919062000939565b8015620002ba57505f856001600160a01b03163b115b95945050505050565b5f620002d96001600160a01b0384168362000334565b905080515f1415801562000300575080806020019051810190620002fe919062000939565b155b156200032f57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b60606200034383835f6200034a565b9392505050565b606081471015620003715760405163cd78605960e01b815230600482015260240162000326565b5f80856001600160a01b031684866040516200038e91906200091c565b5f6040518083038185875af1925050503d805f8114620003ca576040519150601f19603f3d011682016040523d82523d5f602084013e620003cf565b606091505b509092509050620003e2868383620003ec565b9695505050505050565b6060826200040557620003ff8262000450565b62000343565b81511580156200041d57506001600160a01b0384163b155b156200044857604051639996b31560e01b81526001600160a01b038516600482015260240162000326565b508062000343565b805115620004615780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b5f52604160045260245ffd5b60405161020081016001600160401b0381118282101715620004b457620004b46200047a565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620004e557620004e56200047a565b604052919050565b5f5b8381101562000509578181015183820152602001620004ef565b50505f910152565b80516001600160a01b038116811462000528575f80fd5b919050565b5f608082840312156200053e575f80fd5b604051608081016001600160401b03811182821017156200056357620005636200047a565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f6102608284031215620005a6575f80fd5b620005b06200048e565b9050620005bd8262000511565b8152620005cd6020830162000511565b6020820152620005e06040830162000511565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101606200064b81840162000511565b908201526101806200065f83820162000511565b908201526101a06200067383820162000511565b908201526101c06200068783820162000511565b908201526101e06200069c848483016200052d565b9082015292915050565b5f805f805f805f80610340898b031215620006bf575f80fd5b88516001600160401b0380821115620006d6575f80fd5b818b0191508b601f830112620006ea575f80fd5b815181811115620006ff57620006ff6200047a565b62000714601f8201601f1916602001620004ba565b91508082528c60208285010111156200072b575f80fd5b6200073e816020840160208601620004ed565b5098506200075290508a60208b0162000594565b9650620007636102808a0162000511565b9550620007746102a08a0162000511565b9450620007856102c08a0162000511565b9350620007966102e08a0162000511565b9250620007a76103008a0162000511565b9150620007b86103208a0162000511565b90509295985092959890939650565b600181811c90821680620007dc57607f821691505b602082108103620007fb57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200032f57805f5260205f20601f840160051c81016020851015620008285750805b601f840160051c820191505b8181101562000849575f815560010162000834565b5050505050565b81516001600160401b038111156200086c576200086c6200047a565b62000884816200087d8454620007c7565b8462000801565b602080601f831160018114620008ba575f8415620008a25750858301515b5f19600386901b1c1916600185901b17855562000914565b5f85815260208120601f198616915b82811015620008ea57888601518255948401946001909101908401620008c9565b50858210156200090857878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f82516200092f818460208701620004ed565b9190910192915050565b5f602082840312156200094a575f80fd5b8151801515811462000343575f80fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e0516103005161104162000a715f395f81816105d30152818161063d015261073401525f818161054e0152818161076301526107c001525f8181610508015261095601525f81816105a001526106d201525f81816101ca015281816103820152818161060e0152818161066f015281816106a10152818161070501528181610796015281816107f001528181610925015261098901525f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50506110415ff3fe6080604052600436106101b6575f3560e01c80639032c726116100eb578063d899e11211610089578063e44808bc11610063578063e44808bc14610570578063eac3e7991461058f578063f3f70707146105c2578063f698da25146105f5576101b6565b8063d899e1121461053d578063dbbe80701461052a578063ded06231146103bc576101b6565b8063a6e8a859116100c5578063a6e8a859146104f7578063ab033ea9146102bf578063cba2e58d1461052a578063cbc13434146102fa576101b6565b80639032c726146104b95780639cd241af146104d8578063a22cb46514610487576101b6565b806330adf81f116101585780634c2ac1d9116101325780634c2ac1d91461045a5780634ed2d6ac1461046d5780637180c8ca1461048757806377d05ff4146104a6576101b6565b806330adf81f146103e95780633e691db91461041c578063414f826d1461043b576101b6565b806317fad7fc1161019457806317fad7fc146103335780631c0f12b61461035257806321b57d531461037157806329b23fc1146103bc576101b6565b806301681a62146102bf57806302329a29146102e0578063074a6de9146102fa575b3480156101c1575f80fd5b505f3660605f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051610202929190610a5d565b5f60405180830381855af49150503d805f811461023a576040519150601f19603f3d011682016040523d82523d5f602084013e61023f565b606091505b5091509150811561026357604051638bb0a34b60e01b815260040160405180910390fd5b5f61026d82610a6c565b90506001600160e01b03198116636e64089360e11b1461028f57815160208301fd5b8151600319810160048401908152926102b091810160200190602401610ad9565b80519650602001945050505050f35b3480156102ca575f80fd5b506102de6102d9366004610b98565b610609565b005b3480156102eb575f80fd5b506102de6102d9366004610bce565b348015610305575f80fd5b50610319610314366004610bf7565b610636565b604080519283526020830191909152015b60405180910390f35b34801561033e575f80fd5b506102de61034d366004610c8b565b61066a565b34801561035d575f80fd5b506102de61036c366004610d1a565b61069c565b34801561037c575f80fd5b506103a47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161032a565b3480156103c7575f80fd5b506103db6103d6366004610d5f565b6106cc565b60405190815260200161032a565b3480156103f4575f80fd5b506103db7f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367381565b348015610427575f80fd5b506103db610436366004610db5565b6106ff565b348015610446575f80fd5b506102de610455366004610def565b61072f565b6103db610468366004610e0f565b61075d565b348015610478575f80fd5b506102de61036c366004610e6e565b348015610492575f80fd5b506102de6104a1366004610eb5565b610791565b6103db6104b4366004610bf7565b6107ba565b3480156104c4575f80fd5b506102de6104d3366004610ee8565b6107ec565b3480156104e3575f80fd5b506102de6104f2366004610f60565b610920565b348015610502575f80fd5b506103a47f000000000000000000000000000000000000000000000000000000000000000081565b610319610538366004610d5f565b61094f565b348015610548575f80fd5b506103a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561057b575f80fd5b506102de61058a366004610f95565b610984565b34801561059a575f80fd5b506103a47f000000000000000000000000000000000000000000000000000000000000000081565b3480156105cd575f80fd5b506103a47f000000000000000000000000000000000000000000000000000000000000000081565b348015610600575f80fd5b506103db6109b5565b6106327f0000000000000000000000000000000000000000000000000000000000000000610a43565b5050565b5f806106617f0000000000000000000000000000000000000000000000000000000000000000610a43565b50935093915050565b6106937f0000000000000000000000000000000000000000000000000000000000000000610a43565b50505050505050565b6106c57f0000000000000000000000000000000000000000000000000000000000000000610a43565b5050505050565b5f6106f67f0000000000000000000000000000000000000000000000000000000000000000610a43565b50949350505050565b5f6107297f0000000000000000000000000000000000000000000000000000000000000000610a43565b50919050565b6107587f0000000000000000000000000000000000000000000000000000000000000000610a43565b505050565b5f6107877f0000000000000000000000000000000000000000000000000000000000000000610a43565b5095945050505050565b6107587f0000000000000000000000000000000000000000000000000000000000000000610a43565b5f6107e47f0000000000000000000000000000000000000000000000000000000000000000610a43565b509392505050565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108206109b5565b60405160248101919091527f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367360448201526001600160a01b03808c1660648301528a16608482015288151560a482015260c4810188905260ff871660e4820152610104810186905261012481018590526101440160408051601f198184030181529181526020820180516001600160e01b03166314e5f07b60e01b179052516108c99190610ff0565b5f60405180830381855af49150503d805f8114610901576040519150601f19603f3d011682016040523d82523d5f602084013e610906565b606091505b50915091508161091857805160208201fd5b805160208201f35b6109497f0000000000000000000000000000000000000000000000000000000000000000610a43565b50505050565b5f8061097a7f0000000000000000000000000000000000000000000000000000000000000000610a43565b5094509492505050565b6109ad7f0000000000000000000000000000000000000000000000000000000000000000610a43565b505050505050565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b60605f80836001600160a01b03165f366040516108c99291905b818382375f9101908152919050565b805160208201516001600160e01b03198082169291906004831015610a9b5780818460040360031b1b83161693505b505050919050565b634e487b7160e01b5f52604160045260245ffd5b5f5b83811015610ad1578181015183820152602001610ab9565b50505f910152565b5f60208284031215610ae9575f80fd5b815167ffffffffffffffff80821115610b00575f80fd5b818401915084601f830112610b13575f80fd5b815181811115610b2557610b25610aa3565b604051601f8201601f19908116603f01168101908382118183101715610b4d57610b4d610aa3565b81604052828152876020848701011115610b65575f80fd5b610b76836020830160208801610ab7565b979650505050505050565b6001600160a01b0381168114610b95575f80fd5b50565b5f60208284031215610ba8575f80fd5b8135610bb381610b81565b9392505050565b80358015158114610bc9575f80fd5b919050565b5f60208284031215610bde575f80fd5b610bb382610bba565b5f60608284031215610729575f80fd5b5f805f60608486031215610c09575f80fd5b8335925060208401359150604084013567ffffffffffffffff811115610c2d575f80fd5b610c3986828701610be7565b9150509250925092565b5f8083601f840112610c53575f80fd5b50813567ffffffffffffffff811115610c6a575f80fd5b6020830191508360208260051b8501011115610c84575f80fd5b9250929050565b5f805f805f8060808789031215610ca0575f80fd5b8635610cab81610b81565b95506020870135610cbb81610b81565b9450604087013567ffffffffffffffff80821115610cd7575f80fd5b610ce38a838b01610c43565b90965094506060890135915080821115610cfb575f80fd5b50610d0889828a01610c43565b979a9699509497509295939492505050565b5f805f8060808587031215610d2d575f80fd5b843593506020850135610d3f81610b81565b92506040850135610d4f81610b81565b9396929550929360600135925050565b5f805f8060808587031215610d72575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115610d9d575f80fd5b610da987828801610be7565b91505092959194509250565b5f60208284031215610dc5575f80fd5b813567ffffffffffffffff811115610ddb575f80fd5b610de784828501610be7565b949350505050565b5f8060408385031215610e00575f80fd5b50508035926020909101359150565b5f805f805f60a08688031215610e23575f80fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115610e55575f80fd5b610e6188828901610be7565b9150509295509295909350565b5f805f8060808587031215610e81575f80fd5b843593506020850135610e9381610b81565b9250604085013591506060850135610eaa81610b81565b939692955090935050565b5f8060408385031215610ec6575f80fd5b8235610ed181610b81565b9150610edf60208401610bba565b90509250929050565b5f805f805f805f60e0888a031215610efe575f80fd5b8735610f0981610b81565b96506020880135610f1981610b81565b9550610f2760408901610bba565b945060608801359350608088013560ff81168114610f43575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f805f60608486031215610f72575f80fd5b833592506020840135610f8481610b81565b929592945050506040919091013590565b5f805f805f60a08688031215610fa9575f80fd5b853594506020860135610fbb81610b81565b93506040860135610fcb81610b81565b9250606086013591506080860135610fe281610b81565b809150509295509295909350565b5f8251611001818460208701610ab7565b919091019291505056fea2646970667358221220ec1717feb1d7fa9fe63d37daa8799942bbaae8b13f0677002eb8e4ccf59d6cfd64736f6c63430008180033a2646970667358221220de8c3587fb4247dd173ae51067309f418232bc3b8b8988d3c5dd21ea8b0a0a0064736f6c63430008180033608060405234801561000f575f80fd5b506143a48061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80638c98b3c61461002d575b5f80fd5b61004061003b36600461021a565b61005c565b6040516001600160a01b03909116815260200160405180910390f35b604080513360208201529081018290525f90606001604051602081830303815290604052805190602001208585604051610095906100c7565b6100a0929190610371565b8190604051809103905ff59050801580156100bd573d5f803e3d5ffd5b5095945050505050565b613ecc806104a383390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff8111828210171561010c5761010c6100d4565b60405290565b80356001600160a01b0381168114610128575f80fd5b919050565b5f6080828403121561013d575f80fd5b6040516080810181811067ffffffffffffffff82111715610160576101606100d4565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f82601f8301126101a0575f80fd5b813567ffffffffffffffff808211156101bb576101bb6100d4565b604051601f8301601f19908116603f011681019082821181831017156101e3576101e36100d4565b816040528381528660208588010111156101fb575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f808486036102c081121561022f575f80fd5b6102608082121561023e575f80fd5b6102466100e8565b915061025187610112565b825261025f60208801610112565b602083015261027060408801610112565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102d9818901610112565b908301526101806102eb888201610112565b908301526101a06102fd888201610112565b908301526101c061030f888201610112565b908301526101e06103228989830161012d565b8184015250819550610335818801610112565b9450505061028085013567ffffffffffffffff811115610353575f80fd5b61035f87828801610191565b949793965093946102a0013593505050565b82516001600160a01b031681526102808101602084015161039d60208401826001600160a01b03169052565b5060408401516103b860408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161042a828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe61028060405234801562000011575f80fd5b5060405162003ecc38038062003ecc8339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613a76620004565f395f8181610d5a015261232301525f8181610d2b01526122e601525f8181610c0701528181610e8a01528181610f1801528181610fa6015281816110340152818161163d015281816116d30152818161189501528181611ead01528181611f8101526120d201525f610df201525f8181610dcc01526124c801525f8181610da601526124a201525f8181610d80015261247c01525f61113f01525f61111901525f6110f301525f6110cd01525f8181610e6401526124ee01525f8181610e18015281816112ca015261286b01525f8181610e3e0152612c2901525f818161060901528181610cfc01528181611e220152818161259b015281816125c601528181612ac70152612bfb01525f818161073301528181610ccd0152818161126701528181612a2f0152612b5e0152613a765ff3fe608060405234801561000f575f80fd5b5060043610610228575f3560e01c806360246c881161012a578063bd85b039116100b4578063cf210e6511610079578063cf210e65146104dc578063d8165743146104ef578063e44808bc14610504578063e985e9c514610517578063fba560081461052a575f80fd5b8063bd85b03914610486578063becee9c314610499578063c55dae63146104b9578063c69e16ad146104c1578063c6e6f592146104c9575f80fd5b80639cd241af116100fa5780639cd241af14610427578063a22cb4651461043a578063ab033ea91461044d578063b0d965801461045e578063b88fed9f14610473575f80fd5b806360246c88146103e55780637180c8ca146103fa5780637ecebe001461040c578063950c5d031461041f575f80fd5b806320fc4881116101b65780633e691db91161017b5780633e691db91461038157806346fbf68e146103945780634e41a1fb146103b75780634ed2d6ac146103ca57806354fd4d50146103dd575f80fd5b806320fc4881146102e657806321ff32a91461032b578063313ce5671461034c5780633656eec2146103665780633a98ef3914610379575f80fd5b806306fdde03116101fc57806306fdde03146102855780630a4e14931461028d57806314e5f07b146102ad57806317fad7fc146102c05780631c0f12b6146102d3575f80fd5b8062ad800c1461022c57806301681a621461025557806302329a291461026a57806304baa00b1461027d575b5f80fd5b61023f61023a366004612e61565b610559565b60405161024c9190612ec5565b60405180910390f35b610268610263366004612eeb565b610590565b005b610268610278366004612f13565b610599565b61023f6105a2565b61023f6105e4565b6102956105fb565b6040516001600160a01b03909116815260200161024c565b6102686102bb366004612f3c565b61063a565b6102686102ce36600461300d565b610656565b6102686102e136600461309c565b61066c565b6102f96102f4366004612e61565b61067f565b6040805182516001600160801b039081168252602080850151821690830152928201519092169082015260600161024c565b61033e6103393660046130e1565b6106e8565b60405190815260200161024c565b61035461072d565b60405160ff909116815260200161024c565b61033e610374366004613120565b6107c5565b61033e6107fd565b61033e61038f36600461314e565b61081b565b6103a76103a2366004612eeb565b610825565b604051901515815260200161024c565b61023f6103c5366004612e61565b610844565b6102686103d8366004613185565b610852565b61023f6108a0565b6103ed6108d5565b60405161024c91906131cc565b61026861040836600461326d565b5050565b61033e61041a366004612eeb565b610bce565b610295610bf9565b610268610435366004613299565b610c38565b61026861044836600461326d565b610c49565b61026861045b366004612eeb565b50565b610466610cb4565b60405161024c91906132ce565b61033e610481366004612e61565b611174565b61033e610494366004612e61565b611181565b6104ac6104a73660046133f4565b6111a2565b60405161024c9190613433565b610295611259565b61033e611298565b61033e6104d7366004612e61565b6112b1565b61033e6104ea366004612e61565b6112be565b6104f76112f4565b60405161024c9190613476565b610268610512366004613587565b6113ff565b6103a76105253660046135e2565b611447565b61053261148a565b6040805182516001600160801b03908116825260209384015116928101929092520161024c565b606061058b610567836114e8565b6040516020016105779190612ec5565b60405160208183030381529060405261160e565b919050565b61045b81611632565b61045b81611893565b60606105e160405180604001604052806011815260200170455243343632364879706572647269766560781b8152506040516020016105779190612ec5565b90565b60606105e16001604051602001610577919061360e565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201525f916105e19101610577565b61064b8989898989898989896119ab565b505050505050505050565b610664868686868686611b9d565b505050505050565b6106798484848433611c50565b50505050565b604080516060810182525f808252602082018190529181019190915261058b60085f8481526020019081526020015f20604051602001610577919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b5f838152600d602090815260408083206001600160a01b03868116855290835281842090851684528252808320548151928301526107269101610577565b9392505050565b5f6105e17f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561078d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107b191906136bb565b6040805160ff909216602083015201610577565b5f828152600a602090815260408083206001600160a01b03851684528252808320548151928301526107f79101610577565b92915050565b5f6105e1610809611e0b565b60405160200161057791815260200190565b5f6107f782611e98565b5f61058b610832836120ce565b60408051911515602083015201610577565b606061058b610567836121ac565b8361085c816122a8565b6001600160a01b0316336001600160a01b03161461088d57604051632aab8bd360e01b815260040160405180910390fd5b61089985858585612365565b5050505050565b60606105e160405180604001604052806007815260200166076312e302e32360cc1b8152506040516020016105779190612ec5565b61093f604051806101e001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f6109486123d1565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109b291906136fe565b6109bc9190613711565b90505f8215610acb5773__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6109e8856123e3565b6040805160e084811b6001600160e01b03191682528351600483015260208401516024830152918301516044820152606083015160648201526080830151608482015260a083015160a482015260c083015160c48201529082015160e482015261010082015161010482015261012082015161012482015261014082015161014482015261016090910151610164820152610184016040805180830381865af4158015610a97573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610abb9190613724565b509050610ac8818461256d565b90505b604080516101e0810182526002546001600160801b038082168352600454600f81900b60208501526006546001600160701b036201000082041695850195909552600160801b9485900482166060850152918490048116608084015260a0830186905260c08301879052600354849004811660e0840152600554808216610100850152918490048116610120840152908390048116610140830152600754808216610160840152929092049091166101808201525f906101a081018415610b9b57610b968486612581565b610b9d565b5f5b81526003546001600160801b0316602091820152604051919250610bc791610577918491016131cc565b5050505090565b6001600160a01b0381165f908152600e602090815260408083205481519283015261058b9101610577565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201525f916105e19101610577565b610c4483838333612365565b505050565b335f818152600c602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b610cbc612d8d565b6105e16040518061020001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ee4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f089190613752565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f72573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f969190613752565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611000573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110249190613752565b6001600160a01b031681526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa15801561108e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906110b29190613752565b6001600160a01b0316815260200160405180608001604052807f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081525081525060405160200161057791906132ce565b5f61058b61080983612595565b5f818152600b602090815260408083205481519283015261058b9101610577565b60605f8267ffffffffffffffff8111156111be576111be61376d565b6040519080825280602002602001820160405280156111e7578160200160208202803683370190505b5090505f5b8381101561123d575f85858381811061120757611207613781565b9050602002013590505f815490508084848151811061122857611228613781565b602090810291909101015250506001016111ec565b50611252816040516020016105779190613433565b5092915050565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201525f916105e19101610577565b5f6105e160095460405160200161057791815260200190565b5f61058b610809836125c0565b5f61058b6108096112ef7f0000000000000000000000000000000000000000000000000000000000000000856136fe565b6125eb565b60408051610180810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e081018290526101008101829052610120810182905261014081018290526101608101919091526105e16002604051602001610577919081546001600160801b038082168352608091821c602084015260018401548082166040850152821c60608401526002840154600f81900b83850152821c60a0840152600384015490811660c0840152811c60e083015260049092015460ff8082161515610100840152600882901c1615156101208301526001600160701b03601082901c1661014083015290911c6101608201526101800190565b84611409816122a8565b6001600160a01b0316336001600160a01b03161461143a57604051632aab8bd360e01b815260040160405180910390fd5b6106648686868686611c50565b6001600160a01b038281165f908152600c60209081526040808320938516835292815282822054835160ff90911615159181019190915290916107f79101610577565b604080518082019091525f80825260208201526040805180820182526007546001600160801b03808216808452600160801b90920481166020938401908152845193840192909252905116918101919091526105e190606001610577565b606060f882901c6001600160f81b0383165f6115038261262b565b90505f836003811115611518576115186136d6565b0361154a576040518060400160405280600d81526020016c048797065726472697665204c5609c1b8152509350611606565b600183600381111561155e5761155e6136d6565b0361158a57806040516020016115749190613795565b6040516020818303038152906040529350611606565b600283600381111561159e5761159e6136d6565b036115b4578060405160200161157491906137cd565b60038360038111156115c8576115c86136d6565b03611606576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b80604051636e64089360e11b81526004016116299190612ec5565b60405180910390fd5b61163a6126dd565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166310780f736040518163ffffffff1660e01b8152600401602060405180830381865afa158015611697573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116bb9190613752565b9050336001600160a01b0382161480159061176757507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa15801561172d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906117519190613752565b6001600160a01b0316336001600160a01b031614155b80156117795750611777336120ce565b155b15611796576040516282b42960e81b815260040160405180910390fd5b5f61179f611e0b565b6040516370a0823160e01b81523060048201529091505f906001600160a01b038516906370a0823190602401602060405180830381865afa1580156117e6573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061180a9190613806565b90506118206001600160a01b0385168483612705565b81611829611e0b565b14611847576040516313dd85ff60e31b815260040160405180910390fd5b836001600160a01b0316836001600160a01b03167f951f51ee88c8e42633698bba90d1e53c0954470938036879e691c0232b47e09660405160405180910390a350505061045b60015f55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118ef573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119139190613752565b6001600160a01b0316336001600160a01b03161415801561193a5750611938336120ce565b155b15611957576040516282b42960e81b815260040160405180910390fd5b600680548215156101000261ff00199091161790556040517f7c4d1fe30fdbfda9e9c4c43e759ef32e4db5128d4cb58ff3ae9583b89b6242a5906119a090831515815260200190565b60405180910390a150565b834211156119cc5760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b0387166119f35760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b038781165f818152600e602090815260408083205481518084018f905280830195909552948b166060850152891515608085015260a084019490945260c08084018990528451808503909101815260e08401909452835193019290922061190160f01b61010083015261010282018c90526101228201526101420160408051601f1981840301815282825280516020918201205f80855291840180845281905260ff88169284019290925260608301869052608083018590529092509060019060a0016020604051602081039080840390855afa158015611add573d5f803e3d5ffd5b505050602060405103519050886001600160a01b0316816001600160a01b031614611b1b57604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b038981165f818152600e6020908152604080832080546001019055600c8252808320948d1680845294825291829020805460ff19168c151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050505050505050505050565b6001600160a01b0386161580611bba57506001600160a01b038516155b15611bd85760405163f0dd15fd60e01b815260040160405180910390fd5b828114611bf85760405163174861a760e31b815260040160405180910390fd5b5f5b83811015611c4757611c3f858583818110611c1757611c17613781565b905060200201358888868686818110611c3257611c32613781565b9050602002013533611c50565b600101611bfa565b50505050505050565b6001600160a01b0384161580611c6d57506001600160a01b038316155b15611c8b5760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b031614611d4b576001600160a01b038085165f908152600c602090815260408083209385168352929052205460ff16611d4b575f858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020545f198114611d49575f868152600d602090815260408083206001600160a01b03808a168552908352818420908616845290915281208054859290611d43908490613711565b90915550505b505b5f858152600a602090815260408083206001600160a01b038816845290915281208054849290611d7c908490613711565b90915550505f858152600a602090815260408083206001600160a01b038716845290915281208054849290611db29084906136fe565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b6040516370a0823160e01b81523060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611e6f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e939190613806565b905090565b5f611ea16126dd565b611eaa82612757565b5f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f07573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f2b9190613752565b90506001600160a01b038116611f446020850185612eeb565b6001600160a01b031614611f6b57604051630ad13b3360e21b815260040160405180910390fd5b336001600160a01b0382161480159061201557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e33315556040518163ffffffff1660e01b8152600401602060405180830381865afa158015611fdb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fff9190613752565b6001600160a01b0316336001600160a01b031614155b80156120275750612025336120ce565b155b15612044576040516282b42960e81b815260040160405180910390fd5b5f61204d6123d1565b600980545f90915590915061206381838761278c565b93506001600160a01b0383167f3e5eb8642141e29a1b4e5c28b467396f814c1698e1adfc3ff327ddb9a603836185846120a260408a0160208b01612f13565b60408051938452602084019290925215159082015260600160405180910390a250505061058b60015f55565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a64c90bf6040518163ffffffff1660e01b81526004015f60405180830381865afa15801561212b573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052612152919081019061381d565b90505f5b81518110156121a357836001600160a01b031682828151811061217b5761217b613781565b60200260200101516001600160a01b03160361219b575060019392505050565b600101612156565b505f9392505050565b606060f882901c6001600160f81b0383165f6121c78261262b565b90505f8360038111156121dc576121dc6136d6565b0361220e576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b8152509350611606565b6001836003811115612222576122226136d6565b03612238578060405160200161157491906138dd565b600283600381111561224c5761224c6136d6565b0361226257806040516020016115749190613914565b6003836003811115612276576122766136d6565b0361160657505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b604080513060208083019190915281830193909352815180820383018152606080830184528151918501919091206001600160f81b031960808401527f000000000000000000000000000000000000000000000000000000000000000090911b6bffffffffffffffffffffffff1916608183015260958201527f000000000000000000000000000000000000000000000000000000000000000060b5808301919091528251808303909101815260d5909101909152805191012090565b5f848152600d602090815260408083206001600160a01b0385811680865291845282852090881680865290845293829020869055905185815290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050565b5f611e93670de0b6b3a7640000612595565b61243b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916125339116612822565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261256592900416612822565b905292915050565b5f6107268383670de0b6b3a7640000612896565b5f61072683670de0b6b3a764000084612896565b5f6107f77f0000000000000000000000000000000000000000000000000000000000000000836128b1565b5f6107f77f00000000000000000000000000000000000000000000000000000000000000008361291b565b5f612610600b5f6125fd60028661294a565b81526020019081526020015f205461297e565b612621600b5f6125fd60018761294a565b6107f7919061393f565b60408051604e80825260808201909252606091905f90826020820181803683370190505090505f5b84156126cf57612664600a86613972565b61266f9060306136fe565b60f81b82600161267f8487613711565b6126899190613711565b8151811061269957612699613781565b60200101906001600160f81b03191690815f1a905350806126b981613985565b91506126c89050600a8661399d565b9450612653565b918290030190815292915050565b60025f54036126ff57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052610c449084906129ab565b5f6127656020830183612eeb565b6001600160a01b03160361045b5760405163f0dd15fd60e01b815260040160405180910390fd5b5f80612798858561256d565b90506127a3816125c0565b9450845f036127b5575f915050610726565b8491506127c86040840160208501612f13565b156127f7576127f0856127de6020860186612eeb565b6127eb60408701876139b0565b612a0c565b915061281a565b61281a856128086020860186612eeb565b61281560408701876139b0565b612bee565b509392505050565b5f80670de0b6b3a7640000612835612c22565b61283f91906139f3565b905080831161284e575f612858565b6128588184613711565b915061072661288f670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006139f3565b8390612581565b5f825f1904841183021582026128aa575f80fd5b5091020490565b6040516303d1689d60e11b8152600481018290525f906001600160a01b038416906307a2d13a906024015b602060405180830381865afa1580156128f7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107269190613806565b6040516363737ac960e11b8152600481018290525f906001600160a01b0384169063c6e6f592906024016128dc565b5f6001600160f81b038211156129735760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f6001600160ff1b038211156129a75760405163396ea70160e11b815260040160405180910390fd5b5090565b5f6129bf6001600160a01b03841683612c4d565b905080515f141580156129e35750808060200190518101906129e19190613a0a565b155b15610c4457604051635274afe760e01b81526001600160a01b0384166004820152602401611629565b6040516370a0823160e01b81526001600160a01b0384811660048301525f9182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612a74573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a989190613806565b604051635d043b2960e11b8152600481018890526001600160a01b0387811660248301523060448301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063ba087652906064016020604051808303815f875af1158015612b0f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612b339190613806565b9150612b3f82826136fe565b6040516370a0823160e01b81526001600160a01b0387811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612ba3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612bc79190613806565b14612be55760405163350b944160e11b815260040160405180910390fd5b50949350505050565b6106796001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612705565b5f611e93427f0000000000000000000000000000000000000000000000000000000000000000612c5a565b606061072683835f612c6f565b5f612c658284613972565b6107269084613711565b606081471015612c945760405163cd78605960e01b8152306004820152602401611629565b5f80856001600160a01b03168486604051612caf9190613a25565b5f6040518083038185875af1925050503d805f8114612ce9576040519150601f19603f3d011682016040523d82523d5f602084013e612cee565b606091505b5091509150612cfe868383612d08565b9695505050505050565b606082612d1d57612d1882612d64565b610726565b8151158015612d3457506001600160a01b0384163b155b15612d5d57604051639996b31560e01b81526001600160a01b0385166004820152602401611629565b5080610726565b805115612d745780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061020001604052805f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f80191681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b03168152602001612e5c60405180608001604052805f81526020015f81526020015f81526020015f81525090565b905290565b5f60208284031215612e71575f80fd5b5035919050565b5f5b83811015612e92578181015183820152602001612e7a565b50505f910152565b5f8151808452612eb1816020860160208601612e78565b601f01601f19169290920160200192915050565b602081525f6107266020830184612e9a565b6001600160a01b038116811461045b575f80fd5b5f60208284031215612efb575f80fd5b813561072681612ed7565b801515811461045b575f80fd5b5f60208284031215612f23575f80fd5b813561072681612f06565b60ff8116811461045b575f80fd5b5f805f805f805f805f6101208a8c031215612f55575f80fd5b8935985060208a0135975060408a0135612f6e81612ed7565b965060608a0135612f7e81612ed7565b955060808a0135612f8e81612f06565b945060a08a0135935060c08a0135612fa581612f2e565b8093505060e08a013591506101008a013590509295985092959850929598565b5f8083601f840112612fd5575f80fd5b50813567ffffffffffffffff811115612fec575f80fd5b6020830191508360208260051b8501011115613006575f80fd5b9250929050565b5f805f805f8060808789031215613022575f80fd5b863561302d81612ed7565b9550602087013561303d81612ed7565b9450604087013567ffffffffffffffff80821115613059575f80fd5b6130658a838b01612fc5565b9096509450606089013591508082111561307d575f80fd5b5061308a89828a01612fc5565b979a9699509497509295939492505050565b5f805f80608085870312156130af575f80fd5b8435935060208501356130c181612ed7565b925060408501356130d181612ed7565b9396929550929360600135925050565b5f805f606084860312156130f3575f80fd5b83359250602084013561310581612ed7565b9150604084013561311581612ed7565b809150509250925092565b5f8060408385031215613131575f80fd5b82359150602083013561314381612ed7565b809150509250929050565b5f6020828403121561315e575f80fd5b813567ffffffffffffffff811115613174575f80fd5b820160608185031215610726575f80fd5b5f805f8060808587031215613198575f80fd5b8435935060208501356131aa81612ed7565b92506040850135915060608501356131c181612ed7565b939692955090935050565b815181526020808301519082015260408083015190820152606080830151908201526080808301519082015260a0808301519082015260c0808301519082015260e08083015190820152610100808301519082015261012080830151908201526101408083015190820152610160808301519082015261018080830151908201526101a080830151908201526101c091820151918101919091526101e00190565b5f806040838503121561327e575f80fd5b823561328981612ed7565b9150602083013561314381612f06565b5f805f606084860312156132ab575f80fd5b8335925060208401356132bd81612ed7565b929592945050506040919091013590565b81516001600160a01b03168152610260810160208301516132fa60208401826001600160a01b03169052565b50604083015161331560408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151818401525061016080840151613387828501826001600160a01b03169052565b5050610180838101516001600160a01b03908116918401919091526101a0808501518216908401526101c080850151909116908301526101e0808401518051828501526020810151610200850152604081015161022085015260608101516102408501525b505092915050565b5f8060208385031215613405575f80fd5b823567ffffffffffffffff81111561341b575f80fd5b61342785828601612fc5565b90969095509350505050565b602080825282518282018190525f9190848201906040850190845b8181101561346a5783518352928401929184019160010161344e565b50909695505050505050565b81516001600160801b03168152610180810160208301516134a260208401826001600160801b03169052565b5060408301516134bd60408401826001600160801b03169052565b5060608301516134d860608401826001600160801b03169052565b5060808301516134ed6080840182600f0b9052565b5060a083015161350860a08401826001600160801b03169052565b5060c083015161352360c08401826001600160801b03169052565b5060e083015161353e60e08401826001600160801b03169052565b506101008381015115159083015261012080840151151590830152610140808401516001600160701b031690830152610160808401516001600160801b038116828501526133ec565b5f805f805f60a0868803121561359b575f80fd5b8535945060208601356135ad81612ed7565b935060408601356135bd81612ed7565b92506060860135915060808601356135d481612ed7565b809150509295509295909350565b5f80604083850312156135f3575f80fd5b82356135fe81612ed7565b9150602083013561314381612ed7565b5f60208083525f84545f60018260011c9150600183168061363057607f831692505b60208310810361364e57634e487b7160e01b5f52602260045260245ffd5b602088018390526040880181801561366d5760018114613683576136ac565b60ff198616825284151560051b820196506136ac565b5f8b8152602090205f5b868110156136a65781548482015290850190890161368d565b83019750505b50949998505050505050505050565b5f602082840312156136cb575f80fd5b815161072681612f2e565b634e487b7160e01b5f52602160045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b808201808211156107f7576107f76136ea565b818103818111156107f7576107f76136ea565b5f8060408385031215613735575f80fd5b82519150602083015161314381612f06565b805161058b81612ed7565b5f60208284031215613762575f80fd5b815161072681612ed7565b634e487b7160e01b5f52604160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b700243cb832b9323934bb32902637b7339d1607d1b81525f82516137c0816011850160208701612e78565b9190910160110192915050565b710243cb832b9323934bb329029b437b93a1d160751b81525f82516137f9816012850160208701612e78565b9190910160120192915050565b5f60208284031215613816575f80fd5b5051919050565b5f602080838503121561382e575f80fd5b825167ffffffffffffffff80821115613845575f80fd5b818501915085601f830112613858575f80fd5b81518181111561386a5761386a61376d565b8060051b604051601f19603f8301168101818110858211171561388f5761388f61376d565b6040529182528482019250838101850191888311156138ac575f80fd5b938501935b828510156138d1576138c285613747565b845293850193928501926138b1565b98975050505050505050565b6f242ca822a9222924ab2296a627a7239d60811b81525f8251613907816010850160208701612e78565b9190910160100192915050565b70242ca822a9222924ab2296a9a427a92a1d60791b81525f82516137c0816011850160208701612e78565b8181035f831280158383131683831282161715611252576112526136ea565b634e487b7160e01b5f52601260045260245ffd5b5f826139805761398061395e565b500690565b5f60018201613996576139966136ea565b5060010190565b5f826139ab576139ab61395e565b500490565b5f808335601e198436030181126139c5575f80fd5b83018035915067ffffffffffffffff8211156139df575f80fd5b602001915036819003821315613006575f80fd5b80820281158282048414176107f7576107f76136ea565b5f60208284031215613a1a575f80fd5b815161072681612f06565b5f8251613a36818460208701612e78565b919091019291505056fea26469706673582212201e40678e67bc98033cf59a6833fb4872fc136e26ec5862cfe0b8da04004dbb5164736f6c63430008180033a26469706673582212203ed0d8869b534b81d5dc5d60e9e2fc3b7b2a5113967a54811b2ee2be94a928b464736f6c63430008180033608060405234801561000f575f80fd5b506145b78061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80638c98b3c61461002d575b5f80fd5b61004061003b36600461021a565b61005c565b6040516001600160a01b03909116815260200160405180910390f35b604080513360208201529081018290525f90606001604051602081830303815290604052805190602001208585604051610095906100c7565b6100a0929190610371565b8190604051809103905ff59050801580156100bd573d5f803e3d5ffd5b5095945050505050565b6140df806104a383390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff8111828210171561010c5761010c6100d4565b60405290565b80356001600160a01b0381168114610128575f80fd5b919050565b5f6080828403121561013d575f80fd5b6040516080810181811067ffffffffffffffff82111715610160576101606100d4565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f82601f8301126101a0575f80fd5b813567ffffffffffffffff808211156101bb576101bb6100d4565b604051601f8301601f19908116603f011681019082821181831017156101e3576101e36100d4565b816040528381528660208588010111156101fb575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f808486036102c081121561022f575f80fd5b6102608082121561023e575f80fd5b6102466100e8565b915061025187610112565b825261025f60208801610112565b602083015261027060408801610112565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102d9818901610112565b908301526101806102eb888201610112565b908301526101a06102fd888201610112565b908301526101c061030f888201610112565b908301526101e06103228989830161012d565b8184015250819550610335818801610112565b9450505061028085013567ffffffffffffffff811115610353575f80fd5b61035f87828801610191565b949793965093946102a0013593505050565b82516001600160a01b031681526102808101602084015161039d60208401826001600160a01b03169052565b5060408401516103b860408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161042a828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe61028060405234801562000011575f80fd5b50604051620040df380380620040df8339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613c546200048b5f395f50505f50505f610b2e01525f50505f818160a9015281816103140152612d1f01525f818161139301528181611791015281816117f4015281816129080152818161294401528181612b3c0152612cf901525f81816106ec01528181610da501528181610dec01528181610fab015281816115fa015281816116470152612cd301525f611ada01525f8181611bfb0152818161223c01526122b401525f81816108a901528181610f4301528181611bcf015261228801525f8181610e3e015261220201525f818161070d01528181610d8301528181610e0d01528181610fcc015281816115d8015281816116680152612d4501525f81816107e701528181610ec4015281816116ef015281816120db01526132ef01525f81816105b2015281816106290152818161069d0152818161076801526107a001525f818161197001528181612504015281816125e4015261271801525f818161254c015261267b0152613c545ff3fe608060405234801561000f575f80fd5b5060043610610034575f3560e01c806329b23fc114610038578063ded062311461005d575b5f80fd5b61004b6100463660046136d8565b610070565b60405190815260200160405180910390f35b61004b61006b3660046136d8565b610088565b5f61007d85858585610095565b90505b949350505050565b5f61007d85858585610300565b5f61009e610534565b6100a78261055c565b7f00000000000000000000000000000000000000000000000000000000000000008410156100e85760405163211ddda360e11b815260040160405180910390fd5b5f6100f1610594565b905085421015610116576101106101066105ab565b82600460016105d6565b50610126565b6101248682600460016105d6565b505b61013b610134600288610c39565b3387610c6d565b5f805f805f8061014c8b888e610d43565b9550955095509550955095505f8c90508c421015610208578260095f8282546101759190613746565b9091555061018d90506101866105ab565b428461102b565b61019a8c88878785611164565b5f6101a48e6112db565b90506101c26101b28e611321565b6101bc9083613759565b8261134e565b6101cb8961138d565b6101d7576101d76113ec565b5f6101e18a611405565b90508061020157604051638bdf918d60e01b815260040160405180910390fd5b505061021f565b6102128689611411565b955061021d88611405565b505b5f61022b878a8d6114ed565b90508b81101561024e5760405163c972651760e01b815260040160405180910390fd5b8c86858b8e61025e600288610c39565b61026b602083018361378c565b6001600160a01b0316337ff87a3de08b9fe89d655d6731088496cf5f5da0abd455e9f7cdc5f0c717f209e58a8a876102a96040890160208a016137b4565b6102bd8a6102b78d8f613746565b90611584565b8d6102cb60408c018c6137cf565b6040516102df98979695949392919061383a565b60405180910390a450939c5050505050505050505050505061008060015f55565b5f610309610534565b6103128261055c565b7f00000000000000000000000000000000000000000000000000000000000000008410156103535760405163211ddda360e11b815260040160405180910390fd5b5f61035c610594565b905085421015610377576103716101066105ab565b50610387565b6103858682600460016105d6565b505b610395610134600188610c39565b5f805f805f806103a68b888e611598565b9550955095509550955095505f8c90508c421015610455578260095f8282546103cf9190613746565b909155506103e090506101866105ab565b6103ed8c8887878561177a565b5f6103f7826112db565b905061040f6104058e611321565b6101bc9083613881565b6104188961138d565b610424576104246113ec565b5f61042e8a611405565b90508061044e57604051638bdf918d60e01b815260040160405180910390fd5b505061046c565b61045f8689611411565b955061046a88611405565b505b5f610478878a8d6114ed565b90508b81101561049b5760405163c972651760e01b815260040160405180910390fd5b8c898c6104a9600186610c39565b6104b6602083018361378c565b6001600160a01b0316337f3b2c44173852b22d1ecf7784963c2bab6d4dd07e64ed560f818f144d72ee52678888876104f46040890160208a016137b4565b8a61050260408b018b6137cf565b60405161051597969594939291906138a8565b60405180910390a450919a505050505050505050505061008060015f55565b60025f540361055657604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f61056a602083018361378c565b6001600160a01b0316036105915760405163f0dd15fd60e01b815260040160405180910390fd5b50565b5f6105a6670de0b6b3a764000061196a565b905090565b5f6105a6427f0000000000000000000000000000000000000000000000000000000000000000611995565b5f84815260086020526040812060018101546001600160801b03161515806105fd57504286115b1561061657600101546001600160801b03169050610080565b5f805f6106216105ab565b90505f61064e7f00000000000000000000000000000000000000000000000000000000000000008b613746565b90505b818110156106c2575f818152600860205260409020600101546001600160801b0316801561069a575f828152600860205260409020549094506001600160801b031692506106c2565b507f000000000000000000000000000000000000000000000000000000000000000001610651565b835f03610734578893506107316106d76119aa565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ca565b92505b5061073e836119e0565b6001850180546001600160801b0319166001600160801b039290921691909117905561079461078d7f00000000000000000000000000000000000000000000000000000000000000008b6138e8565b8a8461102b565b6107d2896107cc6107c57f000000000000000000000000000000000000000000000000000000000000000083613746565b4290611a09565b8461102b565b6107db88611a1d565b505f905060088161080c7f00000000000000000000000000000000000000000000000000000000000000008d6138e8565b815260208101919091526040015f908120600101546001600160801b0316915061083760028c610c39565b5f818152600b60205260408120549192508c8c831561097857600192505f8061086386898d865f611bba565b915091508060095f8282546108789190613746565b909155506108939050865f8461088d81611321565b88611164565b61089d8183613746565b91506108cd86838a8e877f0000000000000000000000000000000000000000000000000000000000000000611c87565b91506108e16108dc8385611584565b611cd0565b600680546002906109029084906201000090046001600160701b03166138fb565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061092f826119e0565b60068054601090610951908490600160801b90046001600160801b031661391b565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f610984600184610c39565b5f818152600b60205260409020549091508015610a8f57600194505f806109af838b8f886001611bba565b915091508060095f8282546109c49190613746565b909155506109df9050835f846109d981611321565b8a61177a565b6109e981836138e8565b91506109f86108dc8387611584565b60068054600290610a199084906201000090046001600160701b03166138fb565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a46826119e0565b60068054601090610a68908490600160801b90046001600160801b031661391b565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610ac857610aba610aa187611321565b610aaa83611321565b610ab49190613759565b5f61134e565b8e610ac58482611cf9565b50505b5f610ad284611ee8565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b88573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610bac919061393b565b90506001600160a01b03811615610c2057610c1d5a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b0386169392919061202a565b50505b509b9d5050505050505050505050505050949350505050565b5f6001600160f81b03821115610c625760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f838152600a602090815260408083206001600160a01b0386168452909152902054811115610caf57604051631e9acf1760e31b815260040160405180910390fd5b5f838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610cf19084906138e8565b909155505060408051848152602081018390525f916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b5f805f805f805f80610d536119aa565b90505f610d5f8a6120b0565b6002549091508c908c90610dc9908590600160801b90046001600160801b031684867f0000000000000000000000000000000000000000000000000000000000000000867f00000000000000000000000000000000000000000000000000000000000000006120ff565b600254919d509a50909550610e31908590600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ca565b9550610e67858c610e62897f000000000000000000000000000000000000000000000000000000000000000061216e565b61219d565b15610e7457610e746113ec565b5f805f610e8385878b876121de565b9c5091945092509050610e9681846138e8565b610ea09089613746565b9750610eac8284613746565b610eb6908d613746565b9b505050505050505f60085f7f00000000000000000000000000000000000000000000000000000000000000008c610eee91906138e8565b815260208101919091526040015f908120600101546001600160801b03169150428b11610f34575f8b8152600860205260409020600101546001600160801b0316610f36565b8b5b90508b610f678e8a8585857f0000000000000000000000000000000000000000000000000000000000000000611c87565b9950610f73878a6138e8565b9850670de0b6b3a7640000610ff0610f8b8787613746565b600254610fa9908f90600160801b90046001600160801b03166138e8565b7f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ca565b1115610ffe57610ffe6113ec565b61100d8a8a878a87875f6122f0565b939d50919b5090995090975050505050505093975093979195509350565b5f83815260086020526040902054600160801b90046001600160801b03168083036110565750505050565b5f848152600860205260408120546001600160801b0316908190036110ae5761107e836119e0565b5f86815260086020526040902080546001600160801b0319166001600160801b039290921691909117905561112b565b6110ff6110fa670de0b6b3a76400006110c788866138e8565b6110d19190613956565b85670de0b6b3a76400006110e5878a6138e8565b6110ef9190613956565b85929190600161238c565b6119e0565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b611134846119e0565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600454600160801b90046001600160801b03166111ac6110fa82611190670de0b6b3a764000086613956565b600554600160801b90046001600160801b031691908a5f61238c565b600580546001600160801b03928316600160801b0292169190911790556111d2866119e0565b6111dc908261396d565b600480546001600160801b03928316600160801b029216919091179055611202846119e0565b600280545f9061121c9084906001600160801b031661391b565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061124983612432565b600480545f9061125d908490600f0b61398d565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061128d856119e0565b600280546010906112af908490600160801b90046001600160801b031661396d565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f611300600b5f6112ed600286610c39565b81526020019081526020015f2054611321565b611311600b5f6112ed600187610c39565b61131b9190613759565b92915050565b5f6001600160ff1b0382111561134a5760405163396ea70160e11b815260040160405180910390fd5b5090565b600354611369906110fa906001600160801b0316848461246d565b600380546001600160801b0319166001600160801b03929092169190911790555050565b5f6113b87f0000000000000000000000000000000000000000000000000000000000000000836124cf565b6003546113ce91906001600160801b0316613746565b6002546113e4906001600160801b031684611584565b101592915050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f61131b826004611cf9565b5f805f61141d84611a1d565b90925090505f61142d8686611584565b905081831115611445576114428683856124e3565b95505b8281101561145757808303925061145b565b5f92505b61146483611cd0565b600680546001600160701b039290921662010000026fffffffffffffffffffffffffffff00001990921691909117908190556001600160801b03600160801b90910416808710156114b7578690036114ba565b505f5b6114c3816119e0565b600680546001600160801b03928316600160801b0292169190911790555085935050505092915050565b5f806114f98585611584565b9050611504816124fe565b9450845f03611516575f91505061157d565b84915061152960408401602085016137b4565b15611558576115518561153f602086018661378c565b61154c60408701876137cf565b612529565b915061157b565b61157b85611569602086018661378c565b61157660408701876137cf565b61270b565b505b9392505050565b5f61157d8383670de0b6b3a76400006124e3565b5f805f805f805f806115a86119aa565b90505f6115b48a6120b0565b6002549091508b908d9061161e908590600160801b90046001600160801b031683867f0000000000000000000000000000000000000000000000000000000000000000877f0000000000000000000000000000000000000000000000000000000000000000612745565b600254919d509b509095505f908190819061168c908890600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006119ca565b985061169a84878b886121de565b9c5091945090925090506116ae82846138e8565b6116b890896138e8565b97506116c48184613746565b6116ce908e6138e8565b9c506116da8a8e613746565b9b50505050505050506117648686838660085f7f00000000000000000000000000000000000000000000000000000000000000008f61171991906138e8565b815260208101919091526040015f20600101546001600160801b0316428e1161175b575f8e8152600860205260409020600101546001600160801b031661175d565b8e5b60016122f0565b9a9e939d50919b50909950929650945050505050565b6002546001600160801b0316838110806117bc57507f00000000000000000000000000000000000000000000000000000000000000006117ba85836138e8565b105b156117c9576117c96113ec565b6004549084900390600f0b6117de8482613759565b9050836117ea86611321565b13801561181f57507f000000000000000000000000000000000000000000000000000000000000000061181d8383612798565b105b1561182c5761182c6113ec565b600354600160801b90046001600160801b031661186d6110fa82611858670de0b6b3a764000088613956565b6005546001600160801b031691908c5f61238c565b600580546001600160801b0319166001600160801b039290921691909117905561189788826138e8565b90506118a2816119e0565b600380546001600160801b03928316600160801b0292169190911790556118c8836119e0565b600280546001600160801b0319166001600160801b03929092169190911790556118f182612432565b600480546001600160801b0319166001600160801b039290921691909117905561191a876119e0565b6002805460109061193c908490600160801b90046001600160801b031661391b565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b5f61131b7f0000000000000000000000000000000000000000000000000000000000000000836127bd565b5f6119a082846139ce565b61157d90846138e8565b6002546004545f916105a6916001600160801b0390911690600f0b612798565b5f61007d826119da8588886124e3565b90612827565b5f6001600160801b0382111561134a57604051630f0af95160e11b815260040160405180910390fd5b5f818311611a17578261157d565b50919050565b6006545f908190611a3f908490600160801b90046001600160801b0316611584565b6006546201000090046001600160701b03169250905081811115611bb5575f611a6883836138e8565b9050611a776110fa8286612896565b60068054601090611a99908490600160801b90046001600160801b031661396d565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611ad185836128aa90919063ffffffff16565b90505f611afe827f0000000000000000000000000000000000000000000000000000000000000000611584565b90508060095f828254611b119190613746565b90915550611b21905081836138e8565b9150611b2c826119e0565b600280545f90611b469084906001600160801b031661391b565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611b73826128be565b600480545f90611b87908490600f0b61398d565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f80611bc687856128aa565b91505f611bf3837f0000000000000000000000000000000000000000000000000000000000000000611584565b9050611c1f817f0000000000000000000000000000000000000000000000000000000000000000611584565b91508315611c4257611c3182826138e8565b611c3b90846138e8565b9250611c59565b611c4c82826138e8565b611c569084613746565b92505b86861015611c7c57611c6c8387896124e3565b9250611c798287896124e3565b91505b509550959350505050565b5f80611c9e84611c988a888a6124e3565b906128aa565b9050611cab8884866124e3565b611cb59082613746565b905086811115611cc55786810391505b509695505050505050565b5f6001600160701b0382111561134a5760405163086b151760e11b815260040160405180910390fd5b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611d43916001600160801b0316906138e8565b9050805f03611d5657600191505061131b565b5f611d60856128e7565b9050805f03611d745760019250505061131b565b5f80611d81838589612982565b9150915080611d96575f94505050505061131b565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611dd1929190613a5f565b6040805180830381865af4158015611deb573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e0f9190613ad4565b91509150611e2d611e1f82611321565b611e2890613af6565b612af6565b925082611e42575f965050505050505061131b565b611e4b826119e0565b600780545f90611e659084906001600160801b031661391b565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611e92816119e0565b60078054601090611eb4908490600160801b90046001600160801b031661391b565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611f0f87612c8a565b6040518263ffffffff1660e01b8152600401611f2b9190613b10565b6040805180830381865af4158015611f45573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f699190613b1f565b9150915080611f7e57505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b031691611fe391613746565b611fed91906138e8565b9050805f0361200357505f958695509350505050565b5f808711612011575f61201c565b61201c8488846124e3565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff81111561204d5761204d613b4d565b6040519080825280601f01601f191660200182016040528015612077576020820181803683370190505b5090505f808751602089018b8e8ef191503d925086831115612097578692505b828152825f602083013e90999098509650505050505050565b5f806120ba6105ab565b90508083116120c9575f6120d3565b6120d381846138e8565b915061157d827f00000000000000000000000000000000000000000000000000000000000000006128aa565b5f808061211f61211788670de0b6b3a76400006138e8565b899087612dc4565b905086156121615761213188886124cf565b91506121528a8a8461214b8a670de0b6b3a76400006138e8565b8989612de7565b925061215e8382613746565b90505b9750975097945050505050565b5f61218b61218484670de0b6b3a76400006138e8565b83906124cf565b61157d90670de0b6b3a76400006138e8565b5f806121d3856121ab6119aa565b6121b59190613746565b600254610fa9908790600160801b90046001600160801b03166138e8565b909210949350505050565b5f808080612234878661222d8b6122276122008c670de0b6b3a76400006138e8565b7f0000000000000000000000000000000000000000000000000000000000000000906124cf565b906124cf565b9190612dc4565b9350612260847f0000000000000000000000000000000000000000000000000000000000000000611584565b91505f61228061227889670de0b6b3a76400006138e8565b8a9088612dc4565b90506122ac817f00000000000000000000000000000000000000000000000000000000000000006124cf565b93506122d8847f0000000000000000000000000000000000000000000000000000000000000000611584565b6122e29084613746565b915050945094509450949050565b5f805f805f808888101561235c5786156123125761230f8d898b6124e3565b9c505b61231d8c898b6124e3565b9b506123288b611321565b6123318d611321565b61233b9190613759565b90506123488b898b6124e3565b9a506123558a898b6124e3565b995061237b565b6123658b611321565b61236e8d611321565b6123789190613759565b90505b9b9c9a9b999a975050505050505050565b5f825f0361239b575084612429565b81156123ed576123cc6123ae8487613746565b6123b88587611584565b6123c2888a611584565b611c989190613746565b90505f6123d98588611a09565b9050808210156123e7578091505b50612429565b8285036123fb57505f612429565b61242661240884876138e8565b61241285876124cf565b61241c888a611584565b611c9891906138e8565b90505b95945050505050565b5f60016001607f1b031982128061244f575060016001607f1b0382135b1561134a5760405163a5353be560e01b815260040160405180910390fd5b5f80612479845f612e09565b612483845f612e09565b61248d9190613759565b90505f8113156124a8576124a18186613746565b94506124c6565b5f8112156124c6576124b981613af6565b6124c390866138e8565b94505b50929392505050565b5f61157d8383670de0b6b3a7640000612dc4565b5f825f1904841183021582026124f7575f80fd5b5091020490565b5f61131b7f000000000000000000000000000000000000000000000000000000000000000083612e1e565b6040516370a0823160e01b81526001600160a01b0384811660048301525f9182917f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015612591573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125b59190613b61565b604051635d043b2960e11b8152600481018890526001600160a01b0387811660248301523060448301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063ba087652906064016020604051808303815f875af115801561262c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126509190613b61565b915061265c8282613746565b6040516370a0823160e01b81526001600160a01b0387811660048301527f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa1580156126c0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126e49190613b61565b146127025760405163350b944160e11b815260040160405180910390fd5b50949350505050565b61273f6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168486612e4d565b50505050565b5f808061276561275d88670de0b6b3a76400006138e8565b8990876124e3565b90508615612161576127778888611584565b91506121528a8a846127918a670de0b6b3a76400006138e8565b8989612ea4565b5f806127a48484612eb4565b9092509050806127b6576127b66113ec565b5092915050565b6040516303d1689d60e11b8152600481018290525f906001600160a01b038416906307a2d13a906024015b602060405180830381865afa158015612803573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061157d9190613b61565b5f815f0361283e5750670de0b6b3a764000061131b565b825f0361284c57505f61131b565b5f61285683611321565b90505f61286a61286586611321565b612eef565b9050818102612881670de0b6b3a764000082613b78565b905061288c81613114565b9695505050505050565b5f61157d83670de0b6b3a764000084612dc4565b5f61157d83670de0b6b3a7640000846124e3565b5f60016001607f1b0382111561134a5760405163a5353be560e01b815260040160405180910390fd5b6003545f908190612901906001600160801b031684612896565b905061292d7f000000000000000000000000000000000000000000000000000000000000000082613746565b6002546001600160801b03161115611a17576002547f0000000000000000000000000000000000000000000000000000000000000000906129789083906001600160801b03166138e8565b61157d91906138e8565b61298a613639565b5f8061299584612c8a565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b81526004016129cf9190613b10565b6040805180830381865af41580156129e9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a0d9190613b1f565b9350905082612a2157505f9150612aee9050565b5f612a47612a4284610160015185610140015161158490919063ffffffff16565b611321565b612a67612a428561012001518661010001516124cf90919063ffffffff16565b612a719190613759565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612bac573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612bd09190613ba4565b935093509350935080612beb57505f98975050505050505050565b868414612c1c57612bfb846119e0565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612c4d57612c2c83612432565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612c7b57612c5d826119e0565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612c92613683565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612d8a91166132a6565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612dbc929004166132a6565b905292915050565b5f825f190484118302158202612dd8575f80fd5b50910281810615159190040190565b5f80612df788888888888861331a565b909250905080611cc557611cc56113ec565b5f818313612e17578161157d565b5090919050565b6040516363737ac960e11b8152600481018290525f906001600160a01b0384169063c6e6f592906024016127e8565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b179052612e9f9084906133f6565b505050565b5f80612df788888888888861345c565b5f805f83612ec186611321565b612ecb9190613759565b90505f811215612ee1575f809250925050612ee8565b9150600190505b9250929050565b5f808213612f105760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612f939084901c611321565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e19821361312d57505f919050565b680755bf798b4a1bf1e58212613156576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061288c74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611321565b5f80670de0b6b3a76400006132b96105ab565b6132c39190613956565b90508083116132d2575f6132dc565b6132dc81846138e8565b915061157d613313670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613956565b83906128aa565b5f805f61332a8989888888613518565b905086881015613340575f8092509250506133eb565b968690039661334f8887612827565b975087811015613365575f8092509250506133eb565b878103613373818688612dc4565b9050670de0b6b3a764000081106133a7576133a0613399670de0b6b3a764000089612896565b8290612827565b90506133bf565b6133bc613399670de0b6b3a7640000896128aa565b90505b6133c98186612896565b9050898110156133e0575f809350935050506133eb565b899003925060019150505b965096945050505050565b5f61340a6001600160a01b03841683613546565b905080515f1415801561342e57508080602001905181019061342c9190613bd7565b155b15612e9f57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b5f805f61346c8989888888613518565b905061347c866119da898b613746565b975087811015613492575f8092509250506133eb565b8781036134a0818688612dc4565b9050670de0b6b3a764000081106134cd576134c6613399670de0b6b3a764000089612896565b90506134e5565b6134e2613399670de0b6b3a7640000896128aa565b90505b6134ef8186612896565b9050808a1015613506575f809350935050506133eb565b90980398600198509650505050505050565b5f6135238585612827565b61353c613534866119da868b6124cf565b859085612dc4565b6124269190613746565b606061157d83835f845f80856001600160a01b0316848660405161356a9190613bf2565b5f6040518083038185875af1925050503d805f81146135a4576040519150601f19603f3d011682016040523d82523d5f602084013e6135a9565b606091505b509150915061288c8683836060826135c9576135c482613610565b61157d565b81511580156135e057506001600160a01b0384163b155b1561360957604051639996b31560e01b81526001600160a01b0385166004820152602401613453565b508061157d565b8051156136205780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b60405180610120016040528061364d613683565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f80608085870312156136eb575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613716575f80fd5b850160608188031215613727575f80fd5b939692955090935050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561131b5761131b613732565b8181035f8312801583831316838312821617156127b6576127b6613732565b6001600160a01b0381168114610591575f80fd5b5f6020828403121561379c575f80fd5b813561157d81613778565b8015158114610591575f80fd5b5f602082840312156137c4575f80fd5b813561157d816137a7565b5f808335601e198436030181126137e4575f80fd5b83018035915067ffffffffffffffff8211156137fe575f80fd5b602001915036819003821315612ee8575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f61387360e083018486613812565b9a9950505050505050505050565b8082018281125f8312801582168215821617156138a0576138a0613732565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a08201525f6138db60c083018486613812565b9998505050505050505050565b8181038181111561131b5761131b613732565b6001600160701b038181168382160190808211156127b6576127b6613732565b6001600160801b038181168382160190808211156127b6576127b6613732565b5f6020828403121561394b575f80fd5b815161157d81613778565b808202811582820484141761131b5761131b613732565b6001600160801b038281168282160390808211156127b6576127b6613732565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561131b5761131b613732565b634e487b7160e01b5f52601260045260245ffd5b5f826139dc576139dc6139ba565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a082019050613a728285516139e1565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613ae5575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613b0a57613b0a613732565b505f0390565b610180810161131b82846139e1565b5f8060408385031215613b30575f80fd5b825191506020830151613b42816137a7565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215613b71575f80fd5b5051919050565b5f82613b8657613b866139ba565b600160ff1b82145f1984141615613b9f57613b9f613732565b500590565b5f805f8060808587031215613bb7575f80fd5b8451935060208501519250604085015191506060850151613727816137a7565b5f60208284031215613be7575f80fd5b815161157d816137a7565b5f82515f5b81811015613c115760208186018101518583015201613bf7565b505f92019182525091905056fea26469706673582212204b42bb65523e9f46d81375fff4a890ebf73cd6d3c92e482e4a85b6236f26d4a364736f6c63430008180033a2646970667358221220428bb1270314f763bd32a938a30451d73b250635ff9b5352dfed5f9fa8655f9364736f6c63430008180033608060405234801561000f575f80fd5b5061472e8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80638c98b3c61461002d575b5f80fd5b61004061003b36600461021a565b61005c565b6040516001600160a01b03909116815260200160405180910390f35b604080513360208201529081018290525f90606001604051602081830303815290604052805190602001208585604051610095906100c7565b6100a0929190610371565b8190604051809103905ff59050801580156100bd573d5f803e3d5ffd5b5095945050505050565b614256806104a383390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff8111828210171561010c5761010c6100d4565b60405290565b80356001600160a01b0381168114610128575f80fd5b919050565b5f6080828403121561013d575f80fd5b6040516080810181811067ffffffffffffffff82111715610160576101606100d4565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f82601f8301126101a0575f80fd5b813567ffffffffffffffff808211156101bb576101bb6100d4565b604051601f8301601f19908116603f011681019082821181831017156101e3576101e36100d4565b816040528381528660208588010111156101fb575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f808486036102c081121561022f575f80fd5b6102608082121561023e575f80fd5b6102466100e8565b915061025187610112565b825261025f60208801610112565b602083015261027060408801610112565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102d9818901610112565b908301526101806102eb888201610112565b908301526101a06102fd888201610112565b908301526101c061030f888201610112565b908301526101e06103228989830161012d565b8184015250819550610335818801610112565b9450505061028085013567ffffffffffffffff811115610353575f80fd5b61035f87828801610191565b949793965093946102a0013593505050565b82516001600160a01b031681526102808101602084015161039d60208401826001600160a01b03169052565b5060408401516103b860408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161042a828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe61028060405234801562000011575f80fd5b5060405162004256380380620042568339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613db6620004a05f395f50505f50505f610c2801525f50505f818160f9015281816103020152612e0701525f81816114e601528181611d2601528181611d8901528181612510015281816129f701528181612a3301528181612c240152612de101525f81816107e601528181610d8201528181610dc401528181610eb60152818161131c0152818161137a0152612dbb01525f61195001525f8181611a7101528181612601015281816126790152612f1f01525f81816109a301528181610e370152818161141501528181611a45015261264d01525f8181610e16015281816125cd0152612edb01525f818161080701528181610d6001528181610de501528181610ed7015281816112fa0152818161139b0152612e2d01525f81816101d301528181610396015281816108e101526134a601525f81816106a7015281816107230152818161079701528181610862015261089a01525f818161146a015281816116af0152818161172801526117b601525f818161168201526116e30152613db65ff3fe608060405260043610610028575f3560e01c8063cba2e58d1461002c578063dbbe807014610058575b5f80fd5b61003f61003a36600461383a565b61006b565b6040805192835260208301919091520160405180910390f35b61003f61006636600461383a565b610087565b5f8061007986868686610095565b915091505b94509492505050565b5f80610079868686866102bc565b5f8061009f610531565b600654610100900460ff16156100c8576040516321081abf60e01b815260040160405180910390fd5b6100d0610559565b6100d98361057a565b5f806100e588866105b2565b90925090505f6100f58383610683565b90507f00000000000000000000000000000000000000000000000000000000000000008110156101385760405163211ddda360e11b815260040160405180910390fd5b86821015610159576040516342af972b60e01b815260040160405180910390fd5b5f6101626106a0565b90506101728184600460016106d0565b505f805f6101808787610d34565b919a5091945090925090508b8810156101ac5760405163c972651760e01b815260040160405180910390fd5b8160095f8282546101bd91906138a8565b909155506101ce9050844283610f13565b6101f87f0000000000000000000000000000000000000000000000000000000000000000856138a8565b98506102068389888c61104c565b5f61021260018b6111e3565b905061022b8161022560208e018e6138cf565b8b611217565b8d8a8a898e8561023e60208301836138cf565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a86888661027b60408801602089016138f7565b8961028960408a018a613912565b60405161029c979695949392919061397d565b60405180910390a350909b50505050505050505050505061007e60015f55565b5f806102c6610531565b600654610100900460ff16156102ef576040516321081abf60e01b815260040160405180910390fd5b6102f7610559565b6103008361057a565b7f00000000000000000000000000000000000000000000000000000000000000008610156103415760405163211ddda360e11b815260040160405180910390fd5b5f61034a6112bc565b90508481101561036d576040516342af972b60e01b815260040160405180910390fd5b5f6103766106a0565b90505f61038e6103846106a0565b84600460016106d0565b90505f6103bb7f0000000000000000000000000000000000000000000000000000000000000000846138a8565b90505f805f806103cc8e89886112ce565b60098054949850929650909450925083915f906103ea9084906138a8565b909155506103fb9050874283610f13565b61040d610408858a611450565b611464565b6104189060016138a8565b9350505f61042784898d61148f565b9050808d101561044a5760405163c972651760e01b815260040160405180910390fd5b610454818c6105b2565b508e905061046481858b896114c0565b5f6104706002886111e3565b90508c61048a8261048460208401846138cf565b85611217565b858b868461049b60208601866138cf565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104d860408b0160208c016138f7565b6104ec896104e68a8d6139bd565b90610683565b8d6104fa60408e018e613912565b60405161050e9897969594939291906139d0565b60405180910390a350989d50939b50505050505050505050505061007e60015f55565b60025f540361055357604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b341561057857604051631574f9f360e01b815260040160405180910390fd5b565b5f61058860208301836138cf565b6001600160a01b0316036105af5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b815f806105c560408501602086016138f7565b156105ea576105e0856105db6040870187613912565b611673565b9093509050610602565b5034610602856105fd6040870187613912565b6117a9565b61060a6112bc565b9150801561067a576040515f90339083908381818185875af1925050503d805f8114610651576040519150601f19603f3d011682016040523d82523d5f602084013e610656565b606091505b5050905080610678576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b5f6106978383670de0b6b3a76400006117e3565b90505b92915050565b5f6106cb427f00000000000000000000000000000000000000000000000000000000000000006117fe565b905090565b5f84815260086020526040812060018101546001600160801b03161515806106f757504286115b1561071057600101546001600160801b03169050610d2c565b5f805f61071b6106a0565b90505f6107487f00000000000000000000000000000000000000000000000000000000000000008b6138a8565b90505b818110156107bc575f818152600860205260409020600101546001600160801b03168015610794575f828152600860205260409020549094506001600160801b031692506107bc565b507f00000000000000000000000000000000000000000000000000000000000000000161074b565b835f0361082e5788935061082b6107d1611813565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611833565b92505b5061083883611852565b6001850180546001600160801b0319166001600160801b039290921691909117905561088e6108877f00000000000000000000000000000000000000000000000000000000000000008b6139bd565b8a84610f13565b6108cc896108c66108bf7f0000000000000000000000000000000000000000000000000000000000000000836138a8565b429061187f565b84610f13565b6108d588611893565b505f90506008816109067f00000000000000000000000000000000000000000000000000000000000000008d6139bd565b815260208101919091526040015f908120600101546001600160801b0316915061093160028c6111e3565b5f818152600b60205260408120549192508c8c8315610a7257600192505f8061095d86898d865f611a30565b915091508060095f82825461097291906138a8565b9091555061098d9050865f8461098781611afd565b88611b26565b61099781836138a8565b91506109c786838a8e877f0000000000000000000000000000000000000000000000000000000000000000611c9d565b91506109db6109d68385610683565b611ce6565b600680546002906109fc9084906201000090046001600160701b0316613a17565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a2982611852565b60068054601090610a4b908490600160801b90046001600160801b0316613a37565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f610a7e6001846111e3565b5f818152600b60205260409020549091508015610b8957600194505f80610aa9838b8f886001611a30565b915091508060095f828254610abe91906138a8565b90915550610ad99050835f84610ad381611afd565b8a611d0f565b610ae381836139bd565b9150610af26109d68387610683565b60068054600290610b139084906201000090046001600160701b0316613a17565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610b4082611852565b60068054601090610b62908490600160801b90046001600160801b0316613a37565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610bc257610bb4610b9b87611afd565b610ba483611afd565b610bae9190613a57565b5f611eff565b8e610bbf8482611f3e565b50505b5f610bcc8461212d565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c82573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ca69190613a76565b90506001600160a01b03811615610d1a57610d175a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b0386169392919061226f565b50505b509b9d50505050505050505050505050505b949350505050565b5f805f805f610d41611813565b600254909150610da6908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f00000000000000000000000000000000000000000000000000000000000000006122f5565b600254909450610e09908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611833565b9150610e608785610e5b857f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000612320565b612384565b15610e6d57610e6d6123c5565b610e79878588856123de565b91965094509250670de0b6b3a7640000610efb610e9687846138a8565b600254610eb4908890600160801b90046001600160801b03166139bd565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611833565b1115610f0957610f096123c5565b5092959194509250565b5f83815260086020526040902054600160801b90046001600160801b0316808303610f3e5750505050565b5f848152600860205260408120546001600160801b031690819003610f9657610f6683611852565b5f86815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611013565b610fe7610fe2670de0b6b3a7640000610faf88866139bd565b610fb99190613a91565b85670de0b6b3a7640000610fcd878a6139bd565b610fd79190613a91565b859291906001612426565b611852565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61101c84611852565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b031661108e610fe282611078670de0b6b3a764000086613a91565b6005546001600160801b03169190886001612426565b600580546001600160801b0319166001600160801b03929092169190911790556110b785611852565b600280545f906110d19084906001600160801b0316613a37565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506110fe84611852565b60028054601090611120908490600160801b90046001600160801b0316613aa8565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061114d84611852565b6111579082613a37565b600380546001600160801b03808416600160801b02911617905590505f61117d836124ca565b905061119b8161118c87611afd565b6111969084613ac8565b611eff565b6111a48461250a565b6111b0576111b06123c5565b5f6111ba85612569565b9050806111da57604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b5f6001600160f81b0382111561120c5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f838152600a602090815260408083206001600160a01b0386168452909152812080548392906112489084906138a8565b90915550505f838152600b60205260408120805483929061126a9084906138a8565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b5f6106cb670de0b6b3a7640000611464565b5f805f805f6112db611813565b600254909150611340908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f0000000000000000000000000000000000000000000000000000000000000000612575565b93508761134d8589612595565b111561135b5761135b6123c5565b6002545f9081906113bf908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611833565b93506113d58a670de0b6b3a7640000868c6125a9565b509193509091506113e8905081836139bd565b6113f290876139bd565b95508861143f816114398d611407868c6139bd565b8d61141287826126b5565b877f00000000000000000000000000000000000000000000000000000000000000006126ca565b90612595565b975090945050505093509350935093565b5f61069783670de0b6b3a7640000846126ea565b5f61069a7f00000000000000000000000000000000000000000000000000000000000000008361270d565b5f6114a060408301602084016138f7565b156114ac5750826114b9565b6114b68484612776565b90505b9392505050565b6002546001600160801b0316838110156114dc576114dc6123c5565b60045490849003907f000000000000000000000000000000000000000000000000000000000000000090611514908390600f0b61278a565b1015611522576115226123c5565b60045461156c90610fe290600160801b90046001600160801b031661154f670de0b6b3a764000086613a91565b600554600160801b90046001600160801b03169190896001612426565b600580546001600160801b03928316600160801b02921691909117905561159281611852565b600280546001600160801b0319166001600160801b03929092169190911790556115bb85611852565b600280546010906115dd908490600160801b90046001600160801b0316613a37565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061160a85611852565b6004805460109061162c908490600160801b90046001600160801b0316613a37565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f61165a836124ca565b905061119b8161166988611afd565b6111969084613a57565b5f806116aa6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330886127af565b61170a7f00000000000000000000000000000000000000000000000000000000000000006116d98760016138a8565b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016919061281c565b604051636e553f6560e01b8152600481018690523060248201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303815f875af1158015611776573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061179a9190613aef565b92505f9150505b935093915050565b6117de6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000163330866127af565b505050565b5f825f1904841183021582026117f7575f80fd5b5091020490565b5f6118098284613b1a565b61069790846139bd565b6002546004545f916106cb916001600160801b0390911690600f0b61278a565b5f611849826118438588886117e3565b906128ab565b95945050505050565b5f6001600160801b0382111561187b57604051630f0af95160e11b815260040160405180910390fd5b5090565b5f81831161188d5782610697565b50919050565b6006545f9081906118b5908490600160801b90046001600160801b0316610683565b6006546201000090046001600160701b03169250905081811115611a2b575f6118de83836139bd565b90506118ed610fe28286611450565b6006805460109061190f908490600160801b90046001600160801b0316613aa8565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611947858361277690919063ffffffff16565b90505f611974827f0000000000000000000000000000000000000000000000000000000000000000610683565b90508060095f82825461198791906138a8565b90915550611997905081836139bd565b91506119a282611852565b600280545f906119bc9084906001600160801b0316613a37565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506119e982612910565b600480545f906119fd908490600f0b613b2d565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f80611a3c8785612776565b91505f611a69837f0000000000000000000000000000000000000000000000000000000000000000610683565b9050611a95817f0000000000000000000000000000000000000000000000000000000000000000610683565b91508315611ab857611aa782826139bd565b611ab190846139bd565b9250611acf565b611ac282826139bd565b611acc90846138a8565b92505b86861015611af257611ae28387896117e3565b9250611aef8287896117e3565b91505b509550959350505050565b5f6001600160ff1b0382111561187b5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611b6e610fe282611b52670de0b6b3a764000086613a91565b600554600160801b90046001600160801b031691908a5f612426565b600580546001600160801b03928316600160801b029216919091179055611b9486611852565b611b9e9082613aa8565b600480546001600160801b03928316600160801b029216919091179055611bc484611852565b600280545f90611bde9084906001600160801b0316613a37565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611c0b83612939565b600480545f90611c1f908490600f0b613b2d565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611c4f85611852565b60028054601090611c71908490600160801b90046001600160801b0316613aa8565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f80611cb484611cae8a888a6117e3565b90612776565b9050611cc18884866117e3565b611ccb90826138a8565b905086811115611cdb5786810391505b509695505050505050565b5f6001600160701b0382111561187b5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b031683811080611d5157507f0000000000000000000000000000000000000000000000000000000000000000611d4f85836139bd565b105b15611d5e57611d5e6123c5565b6004549084900390600f0b611d738482613a57565b905083611d7f86611afd565b138015611db457507f0000000000000000000000000000000000000000000000000000000000000000611db2838361278a565b105b15611dc157611dc16123c5565b600354600160801b90046001600160801b0316611e02610fe282611ded670de0b6b3a764000088613a91565b6005546001600160801b031691908c5f612426565b600580546001600160801b0319166001600160801b0392909216919091179055611e2c88826139bd565b9050611e3781611852565b600380546001600160801b03928316600160801b029216919091179055611e5d83611852565b600280546001600160801b0319166001600160801b0392909216919091179055611e8682612939565b600480546001600160801b0319166001600160801b0392909216919091179055611eaf87611852565b60028054601090611ed1908490600160801b90046001600160801b0316613a37565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611f1a90610fe2906001600160801b03168484612974565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291611f88916001600160801b0316906139bd565b9050805f03611f9b57600191505061069a565b5f611fa5856129d6565b9050805f03611fb95760019250505061069a565b5f80611fc6838589612a71565b9150915080611fdb575f94505050505061069a565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401612016929190613bd8565b6040805180830381865af4158015612030573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120549190613c4d565b9150915061207261206482611afd565b61206d90613c6f565b612bde565b925082612087575f965050505050505061069a565b61209082611852565b600780545f906120aa9084906001600160801b0316613a37565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506120d781611852565b600780546010906120f9908490600160801b90046001600160801b0316613a37565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61215487612d72565b6040518263ffffffff1660e01b81526004016121709190613c89565b6040805180830381865af415801561218a573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906121ae9190613c98565b91509150806121c357505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b031691612228916138a8565b61223291906139bd565b9050805f0361224857505f958695509350505050565b5f808711612256575f612261565b6122618488846117e3565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff81111561229257612292613cc6565b6040519080825280601f01601f1916602001820160405280156122bc576020820181803683370190505b5090505f808751602089018b8e8ef191503d9250868311156122dc578692505b828152825f602083013e90999098509650505050505050565b5f61231587878761230e88670de0b6b3a76400006139bd565b8787612eac565b979650505050505050565b5f6114b661236061233984670de0b6b3a76400006139bd565b611439670de0b6b3a764000061234f818a611450565b61235991906139bd565b8790612595565b61237290670de0b6b3a76400006138a8565b611cae84670de0b6b3a76400006139bd565b5f806123ba85612392611813565b61239c91906138a8565b600254610eb4908790600160801b90046001600160801b03166139bd565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f805f805f6123ee898789612ece565b90925090506123fd82896139bd565b97505f61240b82888a6117e3565b9050612417818b6139bd565b9a989950979650505050505050565b5f825f03612435575084611849565b81156124875761246661244884876138a8565b6124528587610683565b61245c888a610683565b611cae91906138a8565b90505f612473858861187f565b905080821015612481578091505b50611849565b82850361249557505f611849565b6124c06124a284876139bd565b6124ac8587612595565b6124b6888a610683565b611cae91906139bd565b9695505050505050565b5f6124ef600b5f6124dc6002866111e3565b81526020019081526020015f2054611afd565b612500600b5f6124dc6001876111e3565b61069a9190613a57565b5f6125357f000000000000000000000000000000000000000000000000000000000000000083612595565b60035461254b91906001600160801b03166138a8565b600254612561906001600160801b031684610683565b101592915050565b5f61069a826004611f3e565b5f61231587878761258e88670de0b6b3a76400006139bd565b8787612f4d565b5f6106978383670de0b6b3a76400006126ea565b5f8080806125f987866125f28b6114396125cb8c670de0b6b3a76400006139bd565b7f000000000000000000000000000000000000000000000000000000000000000090612595565b91906126ea565b9350612625847f0000000000000000000000000000000000000000000000000000000000000000610683565b91505f61264561263d89670de0b6b3a76400006139bd565b8a90886126ea565b9050612671817f0000000000000000000000000000000000000000000000000000000000000000612595565b935061269d847f0000000000000000000000000000000000000000000000000000000000000000610683565b6126a790846138a8565b915050945094509450949050565b5f8183116126c35781610697565b5090919050565b5f806126e1846126db8a888a6126ea565b90611450565b9050611cc18884865b5f825f1904841183021582026126fe575f80fd5b50910281810615159190040190565b6040516303d1689d60e11b8152600481018290525f906001600160a01b038416906307a2d13a90602401602060405180830381865afa158015612752573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106979190613aef565b5f61069783670de0b6b3a7640000846117e3565b5f806127968484612f5d565b9092509050806127a8576127a86123c5565b5092915050565b6040516001600160a01b0384811660248301528381166044830152606482018390526128169186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612f95565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261286d8482612ffb565b612816576040516001600160a01b0384811660248301525f60448301526128a191869182169063095ea7b3906064016127e4565b6128168482612f95565b5f815f036128c25750670de0b6b3a764000061069a565b825f036128d057505f61069a565b5f6128da83611afd565b90505f6128ee6128e986611afd565b613098565b9050818102612905670de0b6b3a764000082613cda565b90506124c0816132bd565b5f60016001607f1b0382111561187b5760405163a5353be560e01b815260040160405180910390fd5b5f60016001607f1b0319821280612956575060016001607f1b0382135b1561187b5760405163a5353be560e01b815260040160405180910390fd5b5f80612980845f61344f565b61298a845f61344f565b6129949190613a57565b90505f8113156129af576129a881866138a8565b94506129cd565b5f8112156129cd576129c081613c6f565b6129ca90866139bd565b94505b50929392505050565b6003545f9081906129f0906001600160801b031684611450565b9050612a1c7f0000000000000000000000000000000000000000000000000000000000000000826138a8565b6002546001600160801b0316111561188d576002547f000000000000000000000000000000000000000000000000000000000000000090612a679083906001600160801b03166139bd565b6114b991906139bd565b612a7961379b565b5f80612a8484612d72565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612abe9190613c89565b6040805180830381865af4158015612ad8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612afc9190613c98565b9350905082612b1057505f91506117a19050565b5f612b36612b3184610160015185610140015161068390919063ffffffff16565b611afd565b612b56612b3185610120015186610100015161259590919063ffffffff16565b612b609190613a57565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612c94573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612cb89190613d06565b935093509350935080612cd357505f98975050505050505050565b868414612d0457612ce384611852565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612d3557612d1483612939565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612d6357612d4582611852565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612d7a6137e5565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612e72911661345d565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612ea49290041661345d565b905292915050565b5f80612ebc8888888888886134d1565b909250905080611cdb57611cdb6123c5565b5f80612f178561143985817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612f0d818c611450565b61143991906139bd565b9150612f43827f0000000000000000000000000000000000000000000000000000000000000000610683565b9050935093915050565b5f80612ebc888888888888613595565b5f805f83612f6a86611afd565b612f749190613a57565b90505f811215612f8a575f80925092505061067c565b946001945092505050565b5f612fa96001600160a01b03841683613651565b905080515f14158015612fcd575080806020019051810190612fcb9190613d39565b155b156117de57604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b5f805f846001600160a01b0316846040516130169190613d54565b5f604051808303815f865af19150503d805f811461304f576040519150601f19603f3d011682016040523d82523d5f602084013e613054565b606091505b509150915081801561307e57508051158061307e57508080602001905181019061307e9190613d39565b80156118495750505050506001600160a01b03163b151590565b5f8082136130b95760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f1982019061313c9084901c611afd565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e1982136132d657505f919050565b680755bf798b4a1bf1e582126132ff576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b0181810595509293509091906124c074029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611afd565b5f8183136126c35781610697565b5f80670de0b6b3a76400006134706106a0565b61347a9190613a91565b9050808311613489575f613493565b61349381846139bd565b91506114b96134ca670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613a91565b8390612776565b5f805f6134e1898988888861365e565b90506134fb866118436134f48a8d6138a8565b8790610683565b9850613508858a866117e3565b98508881101561351e575f80925092505061358a565b888103670de0b6b3a764000081106135535761354c613545670de0b6b3a764000089611450565b82906128ab565b905061356b565b613568613545670de0b6b3a764000089612776565b90505b80891015613580575f8093509350505061358a565b8803925060019150505b965096945050505050565b5f805f6135a5898988888861365e565b90506135b586611843898b6138a8565b9750878110156135cb575f80925092505061358a565b8781036135d98186886126ea565b9050670de0b6b3a76400008110613606576135ff613545670de0b6b3a764000089611450565b905061361e565b61361b613545670de0b6b3a764000089612776565b90505b6136288186611450565b9050808a101561363f575f8093509350505061358a565b90980398600198509650505050505050565b606061069783835f61368c565b5f61366985856128ab565b61368261367a86611843868b612595565b8590856126ea565b6124c091906138a8565b6060814710156136b15760405163cd78605960e01b8152306004820152602401612ff2565b5f80856001600160a01b031684866040516136cc9190613d54565b5f6040518083038185875af1925050503d805f8114613706576040519150601f19603f3d011682016040523d82523d5f602084013e61370b565b606091505b50915091506124c086838360608261372b5761372682613772565b6114b9565b815115801561374257506001600160a01b0384163b155b1561376b57604051639996b31560e01b81526001600160a01b0385166004820152602401612ff2565b50806114b9565b8051156137825780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061012001604052806137af6137e5565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f806080858703121561384d575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613878575f80fd5b850160608188031215613889575f80fd5b939692955090935050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561069a5761069a613894565b6001600160a01b03811681146105af575f80fd5b5f602082840312156138df575f80fd5b81356114b9816138bb565b80151581146105af575f80fd5b5f60208284031215613907575f80fd5b81356114b9816138ea565b5f808335601e19843603018112613927575f80fd5b83018035915067ffffffffffffffff821115613941575f80fd5b60200191503681900382131561067c575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201525f6139b060c083018486613955565b9998505050505050505050565b8181038181111561069a5761069a613894565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f613a0960e083018486613955565b9a9950505050505050505050565b6001600160701b038181168382160190808211156127a8576127a8613894565b6001600160801b038181168382160190808211156127a8576127a8613894565b8181035f8312801583831316838312821617156127a8576127a8613894565b5f60208284031215613a86575f80fd5b81516114b9816138bb565b808202811582820484141761069a5761069a613894565b6001600160801b038281168282160390808211156127a8576127a8613894565b8082018281125f831280158216821582161715613ae757613ae7613894565b505092915050565b5f60208284031215613aff575f80fd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b5f82613b2857613b28613b06565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561069a5761069a613894565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a082019050613beb828551613b5a565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613c5e575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613c8357613c83613894565b505f0390565b610180810161069a8284613b5a565b5f8060408385031215613ca9575f80fd5b825191506020830151613cbb816138ea565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f82613ce857613ce8613b06565b600160ff1b82145f1984141615613d0157613d01613894565b500590565b5f805f8060808587031215613d19575f80fd5b8451935060208501519250604085015191506060850151613889816138ea565b5f60208284031215613d49575f80fd5b81516114b9816138ea565b5f82515f5b81811015613d735760208186018101518583015201613d59565b505f92019182525091905056fea26469706673582212206685f8e477038a8fc338b88a63cb02cdccc83dff3a6261394174443c6700e86b64736f6c63430008180033a2646970667358221220996d1a61daaaf933d024712235e89eb9dd3b8178a4ec01bec5d61c74b22a0a0664736f6c63430008180033608060405234801561000f575f80fd5b5061469a8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80638c98b3c61461002d575b5f80fd5b61004061003b36600461021a565b61005c565b6040516001600160a01b03909116815260200160405180910390f35b604080513360208201529081018290525f90606001604051602081830303815290604052805190602001208585604051610095906100c7565b6100a0929190610371565b8190604051809103905ff59050801580156100bd573d5f803e3d5ffd5b5095945050505050565b6141c2806104a383390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff8111828210171561010c5761010c6100d4565b60405290565b80356001600160a01b0381168114610128575f80fd5b919050565b5f6080828403121561013d575f80fd5b6040516080810181811067ffffffffffffffff82111715610160576101606100d4565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f82601f8301126101a0575f80fd5b813567ffffffffffffffff808211156101bb576101bb6100d4565b604051601f8301601f19908116603f011681019082821181831017156101e3576101e36100d4565b816040528381528660208588010111156101fb575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f808486036102c081121561022f575f80fd5b6102608082121561023e575f80fd5b6102466100e8565b915061025187610112565b825261025f60208801610112565b602083015261027060408801610112565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102d9818901610112565b908301526101806102eb888201610112565b908301526101a06102fd888201610112565b908301526101c061030f888201610112565b908301526101e06103228989830161012d565b8184015250819550610335818801610112565b9450505061028085013567ffffffffffffffff811115610353575f80fd5b61035f87828801610191565b949793965093946102a0013593505050565b82516001600160a01b031681526102808101602084015161039d60208401826001600160a01b03169052565b5060408401516103b860408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161042a828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe61028060405234801562000011575f80fd5b50604051620041c2380380620041c28339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613d11620004b15f395f50505f50505f6112ab01525f81816102f801528181610327015261035401525f818160d90152818161059601526116c101525f81816108320152818161091d015281816109ad01528181610ab2015281816115930152818161169b015281816120d601528181612139015281816129e201528181612dd70152612e1301525f8181610139015281816108a201528181610e690152818161145c015281816114bf01528181611504015261167501525f611ce701525f8181611e3c015261306201525f81816110260152611e1001525f61301801525f818161017b015281816108f501528181610e8a0152818161142c0152818161148f0152818161152501526116e701525f818161015a0152818161022f015281816102cd015281816106d5015281816108cf01528181610f64015261297801525f818161028d01528181610d2f01528181610da601528181610e1a01528181610ee50152610f1d01525f818161198801528181611a0101528181611a8f0152612cba01525f818161195b01526119bc0152613d115ff3fe608060405260043610610028575f3560e01c80634c2ac1d91461002c57806377d05ff414610051575b5f80fd5b61003f61003a36600461376a565b610064565b60405190815260200160405180910390f35b61003f61005f3660046137c9565b61007e565b5f6100728686868686610094565b90505b95945050505050565b5f61008a8484846107de565b90505b9392505050565b5f61009d610b8c565b600654610100900460ff16156100c6576040516321081abf60e01b815260040160405180910390fd5b6100ce610bb4565b6100d782610bd5565b7f00000000000000000000000000000000000000000000000000000000000000008610156101185760405163211ddda360e11b815260040160405180910390fd5b5f61019f610124610c0d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c32565b9050848110806101ae57508381115b156101cc57604051633b61151160e11b815260040160405180910390fd5b5f806101d88986610c57565b915091505f6101e5610d28565b90506101f5818360046001610d53565b506002546004546003545f92839261025e926001600160801b0380841693600f9390930b92600160801b90048116918991166102596102547f00000000000000000000000000000000000000000000000000000000000000008b613829565b6113b7565b6113fd565b915091508061028057604051630552b01360e31b815260040160405180910390fd5b8b5f6102f16008826102b27f00000000000000000000000000000000000000000000000000000000000000008961383c565b815260208101919091526040015f20546001600160801b03167f0000000000000000000000000000000000000000000000000000000000000000611601565b905061031d7f000000000000000000000000000000000000000000000000000000000000000082613829565b88118061037c57507f00000000000000000000000000000000000000000000000000000000000000008111801561037c57506103797f00000000000000000000000000000000000000000000000000000000000000008261383c565b88105b1561039a57604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103e5916001600160801b039091169061383c565b5f808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061041f908390613829565b90505f805f61042d8a61162c565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa156906104679084906004016138cd565b602060405180830381865af4158015610482573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104a691906138dc565b91506104b96104b48c611766565b611793565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161051a918591016138cd565b602060405180830381865af4158015610535573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061055991906138dc565b92508183101561057c5760405163184d952160e11b815260040160405180910390fd5b610592848361058b818761383c565b91906117b9565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105d55760405163211ddda360e11b815260040160405180910390fd5b508f6105e1868e6117d4565b10156106005760405163c972651760e01b815260040160405180910390fd5b61061c5f8e5f0160208101906106169190613907565b8e6117e8565b6106258961188d565b95508561064557604051638bdf918d60e01b815260040160405180910390fd5b5f8890505f8d9050368f90505f8c90505f6106ff60025f015f9054906101000a90046001600160801b03166001600160801b0316600280015f9054906101000a9004600f0b600f0b60025f0160109054906101000a90046001600160801b03166001600160801b03168560026001015f9054906101000a90046001600160801b03166001600160801b03166102597f00000000000000000000000000000000000000000000000000000000000000008c6102549190613829565b9b5090508a158061071857506107158c5f611899565b81125b1561073657604051630552b01360e31b815260040160405180910390fd5b5f881561074d5761074887848b6117b9565b61074f565b5f5b905061075e6020850185613907565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d8661079b60408a0160208b0161392f565b866107a960408c018c61394a565b6040516107bc979695949392919061398d565b60405180910390a2505050505050505050505050505050505061007560015f55565b5f6107e7610b8c565b6107ef610bb4565b6107f882610bd5565b60065460ff161561081c57604051637983c05160e01b815260040160405180910390fd5b5f806108288685610c57565b90925090506108587f000000000000000000000000000000000000000000000000000000000000000060026139e0565b82101561087857604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393505f908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063b29e1d1e9060c401606060405180830381865af4158015610981573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a591906139f7565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006109d684846118ad565b10156109f55760405163216f4ab160e21b815260040160405180910390fd5b5f80610a05858585895f806113fd565b91509150801580610a1557505f82125b15610a3357604051630552b01360e31b815260040160405180910390fd5b610a3c856118d2565b600280546001600160801b0319166001600160801b0392909216919091179055610a65846118fb565b600480546001600160801b0319166001600160801b0392909216919091179055610a8e836118d2565b600280546001600160801b03928316600160801b029216919091179055610ad65f807f00000000000000000000000000000000000000000000000000000000000000006117e8565b610aed5f610ae760208c018c613907565b8a6117e8565b610b02610af8610d28565b8760046001610d53565b508a8a8a610b136020820182613907565b6001600160a01b03167f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af38c858c610b50604087016020880161392f565b87610b5e604089018961394a565b604051610b71979695949392919061398d565b60405180910390a25050505050505050505061008d60015f55565b60025f5403610bae57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b3415610bd357604051631574f9f360e01b815260040160405180910390fd5b565b5f610be36020830183613907565b6001600160a01b031603610c0a5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6002546004545f91610c2d916001600160801b0390911690600f0b6118ad565b905090565b5f80610c4087878786611936565b9050610c4c8185611601565b979650505050505050565b815f80610c6a604085016020860161392f565b15610c8f57610c8585610c80604087018761394a565b61194c565b9093509050610ca7565b5034610ca785610ca2604087018761394a565b611a82565b610caf611abc565b91508015610d1f576040515f90339083908381818185875af1925050503d805f8114610cf6576040519150601f19603f3d011682016040523d82523d5f602084013e610cfb565b606091505b5050905080610d1d576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b5f610c2d427f0000000000000000000000000000000000000000000000000000000000000000611ace565b5f84815260086020526040812060018101546001600160801b0316151580610d7a57504286115b15610d9357600101546001600160801b031690506113af565b5f805f610d9e610d28565b90505f610dcb7f00000000000000000000000000000000000000000000000000000000000000008b613829565b90505b81811015610e3f575f818152600860205260409020600101546001600160801b03168015610e17575f828152600860205260409020549094506001600160801b03169250610e3f565b507f000000000000000000000000000000000000000000000000000000000000000001610dce565b835f03610eb157889350610eae610e54610c0d565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611936565b92505b50610ebb836118d2565b6001850180546001600160801b0319166001600160801b0392909216919091179055610f11610f0a7f00000000000000000000000000000000000000000000000000000000000000008b61383c565b8a84611ae3565b610f4f89610f49610f427f000000000000000000000000000000000000000000000000000000000000000083613829565b4290611c1c565b84611ae3565b610f5888611c2a565b505f9050600881610f897f00000000000000000000000000000000000000000000000000000000000000008d61383c565b815260208101919091526040015f908120600101546001600160801b03169150610fb460028c611dc7565b5f818152600b60205260408120549192508c8c83156110f557600192505f80610fe086898d865f611dfb565b915091508060095f828254610ff59190613829565b909155506110109050865f8461100a81611766565b88611ec8565b61101a8183613829565b915061104a86838a8e877f000000000000000000000000000000000000000000000000000000000000000061203f565b915061105e6110598385612082565b612096565b6006805460029061107f9084906201000090046001600160701b0316613a22565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506110ac826118d2565b600680546010906110ce908490600160801b90046001600160801b0316613a42565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f611101600184611dc7565b5f818152600b6020526040902054909150801561120c57600194505f8061112c838b8f886001611dfb565b915091508060095f8282546111419190613829565b9091555061115c9050835f8461115681611766565b8a6120bf565b611166818361383c565b91506111756110598387612082565b600680546002906111969084906201000090046001600160701b0316613a22565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506111c3826118d2565b600680546010906111e5908490600160801b90046001600160801b0316613a42565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b84156112455761123761121e87611766565b61122783611766565b6112319190613a62565b5f6122af565b8e61124284826122ee565b50505b5f61124f846124dd565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611305573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113299190613a81565b90506001600160a01b0381161561139d5761139a5a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b0386169392919061261f565b50505b509b9d50505050505050505050505050505b949350505050565b5f6113dc600b5f6113c9600286611dc7565b81526020019081526020015f2054611766565b6113ed600b5f6113c9600187611dc7565b6113f79190613a62565b92915050565b5f805f8061140b8a8a6126a7565b9150915080611421575f809350935050506115f6565b5f611480838a6114597f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000061383c565b8b7f00000000000000000000000000000000000000000000000000000000000000006126df565b5090505f6114e3848b846114bc7f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000061383c565b8d7f0000000000000000000000000000000000000000000000000000000000000000612798565b5090508115806114f1575080155b156114fc57505f9050805b5f611549858c7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611936565b905061155783838c84612852565b509093505f9050611568848f613829565b90505f6115888b8b61157987611766565b611583908e613a9c565b61289a565b90508b6115bd6115b87f0000000000000000000000000000000000000000000000000000000000000000836128fc565b611766565b6115c683611766565b6115d36115b88685612082565b6115dd9190613a62565b6115e79190613a62565b60019950995050505050505050505b965096945050505050565b5f61008d61161484846301e1338061290c565b61162685670de0b6b3a764000061383c565b906117d4565b6116346136bb565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e0830152600354048216610100820152600554909161012083019161172c911661292f565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261175e9290041661292f565b905292915050565b5f6001600160ff1b0382111561178f5760405163396ea70160e11b815260040160405180910390fd5b5090565b61179c8161299c565b610c0a57604051635044b7f560e01b815260040160405180910390fd5b5f825f1904841183021582026117cd575f80fd5b5091020490565b5f61008d83670de0b6b3a7640000846117b9565b5f838152600a602090815260408083206001600160a01b038616845290915281208054839290611819908490613829565b90915550505f838152600b60205260408120805483929061183b908490613829565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b5f6113f78260046122ee565b5f8183136118a7578261008d565b50919050565b5f806118b984846126a7565b9092509050806118cb576118cb612b30565b5092915050565b5f6001600160801b0382111561178f57604051630f0af95160e11b815260040160405180910390fd5b5f60016001607f1b0319821280611918575060016001607f1b0382135b1561178f5760405163a5353be560e01b815260040160405180910390fd5b5f610075826119468588886117b9565b90612b49565b5f806119836001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333088612bb8565b6119e37f00000000000000000000000000000000000000000000000000000000000000006119b2876001613829565b6001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169190612c25565b604051636e553f6560e01b8152600481018690523060248201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636e553f65906044016020604051808303815f875af1158015611a4f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a7391906138dc565b92505f9150505b935093915050565b611ab76001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016333086612bb8565b505050565b5f610c2d670de0b6b3a7640000612cb4565b5f611ad98284613ad7565b61008d908461383c565b5f83815260086020526040902054600160801b90046001600160801b0316808303611b0e5750505050565b5f848152600860205260408120546001600160801b031690819003611b6657611b36836118d2565b5f86815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611be3565b611bb7611bb2670de0b6b3a7640000611b7f888661383c565b611b8991906139e0565b85670de0b6b3a7640000611b9d878a61383c565b611ba791906139e0565b859291906001612cdf565b6118d2565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b611bec846118d2565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b5f8183116118a7578261008d565b6006545f908190611c4c908490600160801b90046001600160801b0316612082565b6006546201000090046001600160701b03169250905081811115611dc2575f611c75838361383c565b9050611c84611bb28286612d79565b60068054601090611ca6908490600160801b90046001600160801b0316613aea565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611cde85836117d490919063ffffffff16565b90505f611d0b827f0000000000000000000000000000000000000000000000000000000000000000612082565b90508060095f828254611d1e9190613829565b90915550611d2e9050818361383c565b9150611d39826118d2565b600280545f90611d539084906001600160801b0316613a42565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611d8082612d8d565b600480545f90611d94908490600f0b613b0a565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f6001600160f81b03821115611df05760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f80611e0787856117d4565b91505f611e34837f0000000000000000000000000000000000000000000000000000000000000000612082565b9050611e60817f0000000000000000000000000000000000000000000000000000000000000000612082565b91508315611e8357611e72828261383c565b611e7c908461383c565b9250611e9a565b611e8d828261383c565b611e979084613829565b92505b86861015611ebd57611ead8387896117b9565b9250611eba8287896117b9565b91505b509550959350505050565b600454600160801b90046001600160801b0316611f10611bb282611ef4670de0b6b3a7640000866139e0565b600554600160801b90046001600160801b031691908a5f612cdf565b600580546001600160801b03928316600160801b029216919091179055611f36866118d2565b611f409082613aea565b600480546001600160801b03928316600160801b029216919091179055611f66846118d2565b600280545f90611f809084906001600160801b0316613a42565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611fad836118fb565b600480545f90611fc1908490600f0b613b0a565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550611ff1856118d2565b60028054601090612013908490600160801b90046001600160801b0316613aea565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f80612050846116268a888a6117b9565b905061205d8884866117b9565b6120679082613829565b9050868111156120775786810391505b509695505050505050565b5f61008d8383670de0b6b3a76400006117b9565b5f6001600160701b0382111561178f5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061210157507f00000000000000000000000000000000000000000000000000000000000000006120ff858361383c565b105b1561210e5761210e612b30565b6004549084900390600f0b6121238482613a62565b90508361212f86611766565b13801561216457507f000000000000000000000000000000000000000000000000000000000000000061216283836118ad565b105b1561217157612171612b30565b600354600160801b90046001600160801b03166121b2611bb28261219d670de0b6b3a7640000886139e0565b6005546001600160801b031691908c5f612cdf565b600580546001600160801b0319166001600160801b03929092169190911790556121dc888261383c565b90506121e7816118d2565b600380546001600160801b03928316600160801b02921691909117905561220d836118d2565b600280546001600160801b0319166001600160801b0392909216919091179055612236826118fb565b600480546001600160801b0319166001600160801b039290921691909117905561225f876118d2565b60028054601090612281908490600160801b90046001600160801b0316613a42565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b6003546122ca90611bb2906001600160801b0316848461289a565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291612338916001600160801b03169061383c565b9050805f0361234b5760019150506113f7565b5f61235585612db6565b9050805f03612369576001925050506113f7565b5f80612376838589612e51565b915091508061238b575f9450505050506113f7565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016123c6929190613b37565b6040805180830381865af41580156123e0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124049190613bac565b9150915061242261241482611766565b61241d90613bce565b61299c565b925082612437575f96505050505050506113f7565b612440826118d2565b600780545f9061245a9084906001600160801b0316613a42565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612487816118d2565b600780546010906124a9908490600160801b90046001600160801b0316613a42565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6125048761162c565b6040518263ffffffff1660e01b815260040161252091906138cd565b6040805180830381865af415801561253a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061255e9190613be8565b915091508061257357505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916125d891613829565b6125e2919061383c565b9050805f036125f857505f958695509350505050565b5f808711612606575f612611565b6126118488846117b9565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff81111561264257612642613c16565b6040519080825280601f01601f19166020018201604052801561266c576020820181803683370190505b5090505f808751602089018b8e8ef191503d92508683111561268c578692505b828152825f602083013e9093509150505b9550959350505050565b5f805f836126b486611766565b6126be9190613a62565b90505f8112156126d4575f809250925050610d21565b946001945092505050565b5f805f6126ef8888888888612fb9565b90505f612719670de0b6b3a76400006127088888612d79565b6127129190613829565b83906117d4565b9050670de0b6b3a7640000811061274d5761274661273f670de0b6b3a7640000896117d4565b8290612b49565b9050612765565b61276261273f670de0b6b3a764000089612d79565b90505b61276f81866117d4565b905088811015612786575f8093509350505061269d565b97909703976001975095505050505050565b5f805f6127a88989888888612fe7565b90506127c2866119466127bb8a8d613829565b8790612082565b98506127cf858a866117b9565b9850888110156127e5575f8092509250506115f6565b888103670de0b6b3a764000081106128135761280c61273f670de0b6b3a764000089612d79565b905061282b565b61282861273f670de0b6b3a7640000896117d4565b90505b80891015612840575f809350935050506115f6565b90970398600198509650505050505050565b5f805f805f61286289878961300b565b9092509050612871828961383c565b97505f61287f82888a6117b9565b905061288b818b61383c565b9a989950979650505050505050565b5f806128a6845f613090565b6128b0845f613090565b6128ba9190613a62565b90505f8113156128d5576128ce8186613829565b94506128f3565b5f8112156128f3576128e681613bce565b6128f0908661383c565b94505b50929392505050565b5f61008d8383670de0b6b3a76400005b5f825f190484118302158202612920575f80fd5b50910281810615159190040190565b5f80670de0b6b3a7640000612942610d28565b61294c91906139e0565b905080831161295b575f612965565b612965818461383c565b915061008d612712670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006139e0565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612a52573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a769190613c2a565b935093509350935080612a9157505f98975050505050505050565b868414612ac257612aa1846118d2565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612af357612ad2836118fb565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612b2157612b03826118d2565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f815f03612b605750670de0b6b3a76400006113f7565b825f03612b6e57505f6113f7565b5f612b7883611766565b90505f612b8c612b8786611766565b6130a5565b9050818102612ba3670de0b6b3a764000082613c68565b9050612bae816132ca565b9695505050505050565b6040516001600160a01b038481166024830152838116604483015260648201839052612c1f9186918216906323b872dd906084015b604051602081830303815290604052915060e01b6020820180516001600160e01b03838183161783525050505061345c565b50505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052612c7684826134c2565b612c1f576040516001600160a01b0384811660248301525f6044830152612caa91869182169063095ea7b390606401612bed565b612c1f848261345c565b5f6113f77f00000000000000000000000000000000000000000000000000000000000000008361355f565b5f825f03612cee575084610075565b8115612d4057612d1f612d018487613829565b612d0b8587612082565b612d15888a612082565b6116269190613829565b90505f612d2c8588611c1c565b905080821015612d3a578091505b50610075565b828503612d4e57505f610075565b610072612d5b848761383c565b612d6585876128fc565b612d6f888a612082565b611626919061383c565b5f61008d83670de0b6b3a76400008461290c565b5f60016001607f1b0382111561178f5760405163a5353be560e01b815260040160405180910390fd5b6003545f908190612dd0906001600160801b031684612d79565b9050612dfc7f000000000000000000000000000000000000000000000000000000000000000082613829565b6002546001600160801b031611156118a7576002547f000000000000000000000000000000000000000000000000000000000000000090612e479083906001600160801b031661383c565b61008d919061383c565b612e59613710565b5f80612e648461162c565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612e9e91906138cd565b6040805180830381865af4158015612eb8573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612edc9190613be8565b9350905082612ef057505f9150611a7a9050565b5f612f116115b884610160015185610140015161208290919063ffffffff16565b612f316115b88561012001518661010001516128fc90919063ffffffff16565b612f3b9190613a62565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b5f612fc48585612b49565b612fdd612fd586611946868b612082565b8590856117b9565b6100729190613829565b5f612ff28585612b49565b612fdd61300386611946868b6128fc565b85908561290c565b5f8061305a8561305485817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000061304a818c612d79565b613054919061383c565b906128fc565b9150613086827f0000000000000000000000000000000000000000000000000000000000000000612082565b9050935093915050565b5f81831361309e578161008d565b5090919050565b5f8082136130c65760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906131499084901c611766565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e1982136132e357505f919050565b680755bf798b4a1bf1e5821261330c576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612bae74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611766565b5f6134706001600160a01b038416836135c8565b905080515f141580156134945750808060200190518101906134929190613c94565b155b15611ab757604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b5f805f846001600160a01b0316846040516134dd9190613caf565b5f604051808303815f865af19150503d805f8114613516576040519150601f19603f3d011682016040523d82523d5f602084013e61351b565b606091505b50915091508180156135455750805115806135455750808060200190518101906135459190613c94565b80156100755750505050506001600160a01b03163b151590565b6040516303d1689d60e11b8152600481018290525f906001600160a01b038416906307a2d13a90602401602060405180830381865afa1580156135a4573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061008d91906138dc565b606061008d83835f845f80856001600160a01b031684866040516135ec9190613caf565b5f6040518083038185875af1925050503d805f8114613626576040519150601f19603f3d011682016040523d82523d5f602084013e61362b565b606091505b5091509150612bae86838360608261364b5761364682613692565b61008d565b815115801561366257506001600160a01b0384163b155b1561368b57604051639996b31560e01b81526001600160a01b03851660048201526024016134b9565b508061008d565b8051156136a25780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061012001604052806137246136bb565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f606082840312156118a7575f80fd5b5f805f805f60a0868803121561377e575f80fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156137b0575f80fd5b6137bc8882890161375a565b9150509295509295909350565b5f805f606084860312156137db575f80fd5b8335925060208401359150604084013567ffffffffffffffff8111156137ff575f80fd5b61380b8682870161375a565b9150509250925092565b634e487b7160e01b5f52601160045260245ffd5b808201808211156113f7576113f7613815565b818103818111156113f7576113f7613815565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b61018081016113f7828461384f565b5f602082840312156138ec575f80fd5b5051919050565b6001600160a01b0381168114610c0a575f80fd5b5f60208284031215613917575f80fd5b813561008d816138f3565b8015158114610c0a575f80fd5b5f6020828403121561393f575f80fd5b813561008d81613922565b5f808335601e1984360301811261395f575f80fd5b83018035915067ffffffffffffffff821115613979575f80fd5b602001915036819003821315610d21575f80fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e08301375f81830160e090810191909152601f909201601f191601019695505050505050565b80820281158282048414176113f7576113f7613815565b5f805f60608486031215613a09575f80fd5b8351925060208401519150604084015190509250925092565b6001600160701b038181168382160190808211156118cb576118cb613815565b6001600160801b038181168382160190808211156118cb576118cb613815565b8181035f8312801583831316838312821617156118cb576118cb613815565b5f60208284031215613a91575f80fd5b815161008d816138f3565b8082018281125f831280158216821582161715613abb57613abb613815565b505092915050565b634e487b7160e01b5f52601260045260245ffd5b5f82613ae557613ae5613ac3565b500690565b6001600160801b038281168282160390808211156118cb576118cb613815565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156113f7576113f7613815565b5f6102a082019050613b4a82855161384f565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613bbd575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613be257613be2613815565b505f0390565b5f8060408385031215613bf9575f80fd5b825191506020830151613c0b81613922565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215613c3d575f80fd5b8451935060208501519250604085015191506060850151613c5d81613922565b939692955090935050565b5f82613c7657613c76613ac3565b600160ff1b82145f1984141615613c8f57613c8f613815565b500590565b5f60208284031215613ca4575f80fd5b815161008d81613922565b5f82515f5b81811015613cce5760208186018101518583015201613cb4565b505f92019182525091905056fea264697066735822122011fd1a77dfc89ee510a8b67db012b7bca38ae2f283acda726de0efaddfe80dd664736f6c63430008180033a26469706673582212208eef5e281d0b5b9462f6946988518c20261838d8e2b7a545862e933fd4344c8c64736f6c63430008180033608060405234801561000f575f80fd5b506139f28061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80638c98b3c61461002d575b5f80fd5b61004061003b36600461021a565b61005c565b6040516001600160a01b03909116815260200160405180910390f35b604080513360208201529081018290525f90606001604051602081830303815290604052805190602001208585604051610095906100c7565b6100a0929190610371565b8190604051809103905ff59050801580156100bd573d5f803e3d5ffd5b5095945050505050565b61351a806104a383390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff8111828210171561010c5761010c6100d4565b60405290565b80356001600160a01b0381168114610128575f80fd5b919050565b5f6080828403121561013d575f80fd5b6040516080810181811067ffffffffffffffff82111715610160576101606100d4565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f82601f8301126101a0575f80fd5b813567ffffffffffffffff808211156101bb576101bb6100d4565b604051601f8301601f19908116603f011681019082821181831017156101e3576101e36100d4565b816040528381528660208588010111156101fb575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f808486036102c081121561022f575f80fd5b6102608082121561023e575f80fd5b6102466100e8565b915061025187610112565b825261025f60208801610112565b602083015261027060408801610112565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102d9818901610112565b908301526101806102eb888201610112565b908301526101a06102fd888201610112565b908301526101c061030f888201610112565b908301526101e06103228989830161012d565b8184015250819550610335818801610112565b9450505061028085013567ffffffffffffffff811115610353575f80fd5b61035f87828801610191565b949793965093946102a0013593505050565b82516001600160a01b031681526102808101602084015161039d60208401826001600160a01b03169052565b5060408401516103b860408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161042a828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe61028060405234801562000011575f80fd5b506040516200351a3803806200351a8339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613116620004045f395f50505f50505f61099201525f50505f818161025f0152611efe01525f818161175e015281816117c101528181611aee01528181611b2a01528181611d1b0152611ed801525f81816105500152611eb201525f61134001525f61149501525f818161070d015261146901525f50505f81816105710152611f2401525f818161064b01526124f501525f81816101e2015281816104160152818161048d01528181610501015281816105cc015261060401525f81816110890152818161224801528181612328015261245c01525f818161229001526123bf01526131165ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063074a6de914610043578063414f826d1461006f578063cbc1343414610084575b5f80fd5b610056610051366004612ba5565b610097565b6040805192835260208301919091520160405180910390f35b61008261007d366004612bf7565b6100b1565b005b610056610092366004612ba5565b6100bf565b5f806100a48585856100cc565b915091505b935093915050565b6100bb828261018e565b5050565b5f806100a485858561024a565b5f806100d6610398565b6100df836103c0565b5f6100e86103f8565b90506100ff6100f561040f565b826004600161043a565b5061010d3387838888610a9e565b909350915061011f6020850185612c2b565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561015d60408b0160208c01612c53565b61016a60408c018c612c6e565b60405161017c96959493929190612cd9565b60405180910390a3506100a960015f55565b610196610398565b5f61019f6103f8565b5f848152600860205260409020600101549091506001600160801b0316156101d2576101cb8183610bdd565b5050610241565b5f6101db61040f565b90506102077f000000000000000000000000000000000000000000000000000000000000000085612d26565b15158061021357508381105b156102315760405163ecd29e8160e01b815260040160405180910390fd5b61023d8483855f61043a565b5050505b6100bb60015f55565b5f80610254610398565b61025d836103c0565b7f000000000000000000000000000000000000000000000000000000000000000085101561029e5760405163211ddda360e11b815260040160405180910390fd5b5f6102a76103f8565b90506102b46100f561040f565b506102c05f3388610dcd565b6102db600360f81b6102d56020870187612c2b565b88610ea4565b5f6102f56102ec6020870187612c2b565b88848989610a9e565b90945090506103048188612d4d565b92505f61031083610f41565b5090506103206020870187612c2b565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761035e60408d0160208e01612c53565b8a888e80604001906103709190612c6e565b604051610384989796959493929190612d60565b60405180910390a35050506100a960015f55565b60025f54036103ba57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f6103ce6020830183612c2b565b6001600160a01b0316036103f55760405163f0dd15fd60e01b815260040160405180910390fd5b50565b5f61040a670de0b6b3a7640000611083565b905090565b5f61040a427f00000000000000000000000000000000000000000000000000000000000000006110ae565b5f84815260086020526040812060018101546001600160801b031615158061046157504286115b1561047a57600101546001600160801b03169050610a96565b5f805f61048561040f565b90505f6104b27f00000000000000000000000000000000000000000000000000000000000000008b612da7565b90505b81811015610526575f818152600860205260409020600101546001600160801b031680156104fe575f828152600860205260409020549094506001600160801b03169250610526565b507f0000000000000000000000000000000000000000000000000000000000000000016104b5565b835f036105985788935061059561053b6110ca565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006110ea565b92505b506105a283611109565b6001850180546001600160801b0319166001600160801b03929092169190911790556105f86105f17f00000000000000000000000000000000000000000000000000000000000000008b612d4d565b8a84611136565b610636896106306106297f000000000000000000000000000000000000000000000000000000000000000083612da7565b429061126f565b84611136565b61063f88611283565b505f90506008816106707f00000000000000000000000000000000000000000000000000000000000000008d612d4d565b815260208101919091526040015f908120600101546001600160801b0316915061069b60028c611420565b5f818152600b60205260408120549192508c8c83156107dc57600192505f806106c786898d865f611454565b915091508060095f8282546106dc9190612da7565b909155506106f79050865f846106f181611521565b8861154a565b6107018183612da7565b915061073186838a8e877f00000000000000000000000000000000000000000000000000000000000000006116c1565b9150610745610740838561170a565b61171e565b600680546002906107669084906201000090046001600160701b0316612dba565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061079382611109565b600680546010906107b5908490600160801b90046001600160801b0316612dda565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f6107e8600184611420565b5f818152600b602052604090205490915080156108f357600194505f80610813838b8f886001611454565b915091508060095f8282546108289190612da7565b909155506108439050835f8461083d81611521565b8a611747565b61084d8183612d4d565b915061085c610740838761170a565b6006805460029061087d9084906201000090046001600160701b0316612dba565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108aa82611109565b600680546010906108cc908490600160801b90046001600160801b0316612dda565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b841561092c5761091e61090587611521565b61090e83611521565b6109189190612dfa565b5f611937565b8e6109298482610bdd565b50505b5f61093684610f41565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ec573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a109190612e19565b90506001600160a01b03811615610a8457610a815a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611976565b50505b509b9d50505050505050505050505050505b949350505050565b5f80610aa9856119fc565b505060075485906001600160801b031680821115610ace57806001600160801b031691505b815f03610ae1575f809250925050610bd3565b610af0600360f81b8984610dcd565b6007545f90610b159084906001600160801b03600160801b9091048116908516611a08565b9050610b2083611109565b610b2a9083612e34565b600780546001600160801b0319166001600160801b0392909216919091179055610b5381611109565b60078054601090610b75908490600160801b90046001600160801b0316612e34565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610ba4818887611a23565b9350610bb08684611ab9565b841015610bd05760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c27916001600160801b031690612d4d565b9050805f03610c3a576001915050610dc7565b5f610c4485611acd565b9050805f03610c5857600192505050610dc7565b5f80610c65838589611b68565b9150915080610c7a575f945050505050610dc7565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cb5929190612ed2565b6040805180830381865af4158015610ccf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf39190612f47565b91509150610d11610d0382611521565b610d0c90612f69565b611cd5565b925082610d26575f9650505050505050610dc7565b610d2f82611109565b600780545f90610d499084906001600160801b0316612dda565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610d7681611109565b60078054601090610d98908490600160801b90046001600160801b0316612dda565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b5f838152600a602090815260408083206001600160a01b0386168452909152902054811115610e0f57604051631e9acf1760e31b815260040160405180910390fd5b5f838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e51908490612d4d565b909155505060408051848152602081018390525f916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b5f838152600a602090815260408083206001600160a01b038616845290915281208054839290610ed5908490612da7565b90915550505f838152600b602052604081208054839290610ef7908490612da7565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610e97565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610f6887611e69565b6040518263ffffffff1660e01b8152600401610f849190612f83565b6040805180830381865af4158015610f9e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc29190612f92565b9150915080610fd757505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161103c91612da7565b6110469190612d4d565b9050805f0361105c57505f958695509350505050565b5f80871161106a575f611075565b611075848884611a08565b976001975095505050505050565b5f610dc77f000000000000000000000000000000000000000000000000000000000000000083611fa3565b5f6110b98284612d26565b6110c39084612d4d565b9392505050565b6002546004545f9161040a916001600160801b0390911690600f0b61200d565b5f611100826110fa858888611a08565b90612032565b95945050505050565b5f6001600160801b0382111561113257604051630f0af95160e11b815260040160405180910390fd5b5090565b5f83815260086020526040902054600160801b90046001600160801b03168083036111615750505050565b5f848152600860205260408120546001600160801b0316908190036111b95761118983611109565b5f86815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611236565b61120a611205670de0b6b3a76400006111d28886612d4d565b6111dc9190612fc0565b85670de0b6b3a76400006111f0878a612d4d565b6111fa9190612fc0565b8592919060016120a1565b611109565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61123f84611109565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b5f81831161127d57826110c3565b50919050565b6006545f9081906112a5908490600160801b90046001600160801b031661170a565b6006546201000090046001600160701b0316925090508181111561141b575f6112ce8383612d4d565b90506112dd611205828661213b565b600680546010906112ff908490600160801b90046001600160801b0316612e34565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611337858361214f90919063ffffffff16565b90505f611364827f000000000000000000000000000000000000000000000000000000000000000061170a565b90508060095f8282546113779190612da7565b9091555061138790508183612d4d565b915061139282611109565b600280545f906113ac9084906001600160801b0316612dda565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506113d982612163565b600480545f906113ed908490600f0b612fd7565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f6001600160f81b038211156114495760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f80611460878561214f565b91505f61148d837f000000000000000000000000000000000000000000000000000000000000000061170a565b90506114b9817f000000000000000000000000000000000000000000000000000000000000000061170a565b915083156114dc576114cb8282612d4d565b6114d59084612d4d565b92506114f3565b6114e68282612d4d565b6114f09084612da7565b92505b8686101561151657611506838789611a08565b9250611513828789611a08565b91505b509550959350505050565b5f6001600160ff1b038211156111325760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b031661159261120582611576670de0b6b3a764000086612fc0565b600554600160801b90046001600160801b031691908a5f6120a1565b600580546001600160801b03928316600160801b0292169190911790556115b886611109565b6115c29082612e34565b600480546001600160801b03928316600160801b0292169190911790556115e884611109565b600280545f906116029084906001600160801b0316612dda565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061162f8361218c565b600480545f90611643908490600f0b612fd7565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061167385611109565b60028054601090611695908490600160801b90046001600160801b0316612e34565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f806116d8846116d28a888a611a08565b9061214f565b90506116e5888486611a08565b6116ef9082612da7565b9050868111156116ff5786810391505b509695505050505050565b5f6110c38383670de0b6b3a7640000611a08565b5f6001600160701b038211156111325760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061178957507f00000000000000000000000000000000000000000000000000000000000000006117878583612d4d565b105b15611796576117966121c7565b6004549084900390600f0b6117ab8482612dfa565b9050836117b786611521565b1380156117ec57507f00000000000000000000000000000000000000000000000000000000000000006117ea838361200d565b105b156117f9576117f96121c7565b600354600160801b90046001600160801b031661183a61120582611825670de0b6b3a764000088612fc0565b6005546001600160801b031691908c5f6120a1565b600580546001600160801b0319166001600160801b03929092169190911790556118648882612d4d565b905061186f81611109565b600380546001600160801b03928316600160801b02921691909117905561189583611109565b600280546001600160801b0319166001600160801b03929092169190911790556118be8261218c565b600480546001600160801b0319166001600160801b03929092169190911790556118e787611109565b60028054601090611909908490600160801b90046001600160801b0316612dda565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461195290611205906001600160801b031684846121e0565b600380546001600160801b0319166001600160801b03929092169190911790555050565b5f60605f805f8661ffff1667ffffffffffffffff81111561199957611999613004565b6040519080825280601f01601f1916602001820160405280156119c3576020820181803683370190505b5090505f808751602089018b8e8ef191503d9250868311156119e3578692505b828152825f602083013e90999098509650505050505050565b5f610dc7826004610bdd565b5f825f190484118302158202611a1c575f80fd5b5091020490565b5f80611a2f858561170a565b9050611a3a81612242565b9450845f03611a4c575f9150506110c3565b849150611a5f6040840160208501612c53565b15611a8e57611a8785611a756020860186612c2b565b611a826040870187612c6e565b61226d565b9150611ab1565b611ab185611a9f6020860186612c2b565b611aac6040870187612c6e565b61244f565b509392505050565b5f6110c38383670de0b6b3a7640000612489565b6003545f908190611ae7906001600160801b03168461213b565b9050611b137f000000000000000000000000000000000000000000000000000000000000000082612da7565b6002546001600160801b0316111561127d576002547f000000000000000000000000000000000000000000000000000000000000000090611b5e9083906001600160801b0316612d4d565b6110c39190612d4d565b611b70612b06565b5f80611b7b84611e69565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611bb59190612f83565b6040805180830381865af4158015611bcf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bf39190612f92565b9350905082611c0757505f91506100a99050565b5f611c2d611c2884610160015185610140015161170a90919063ffffffff16565b611521565b611c4d611c28856101200151866101000151611ab990919063ffffffff16565b611c579190612dfa565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = ERC4626FactoryMultiDeployTestContractFunctions(erc4626factorymultideploytest_abi, self.w3, address)  # type: ignore
        self.events = ERC4626FactoryMultiDeployTestContractEvents(erc4626factorymultideploytest_abi, self.w3, address)  # type: ignore
        self.errors = ERC4626FactoryMultiDeployTestContractErrors()

    events: ERC4626FactoryMultiDeployTestContractEvents

    errors: ERC4626FactoryMultiDeployTestContractErrors = (
        ERC4626FactoryMultiDeployTestContractErrors()
    )

    functions: ERC4626FactoryMultiDeployTestContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = ERC4626FactoryMultiDeployTestContractFunctions(
            erc4626factorymultideploytest_abi, w3, None
        )
        contract.errors = ERC4626FactoryMultiDeployTestContractErrors()

        return contract
