"""Dataclasses for all structs in the ICornSilo contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs, ErrorInfo, ErrorParams


@dataclass(kw_only=True)
class BridgeEnabledEvent(BaseEvent):
    """The event type for event BridgeEnabled"""

    @dataclass(kw_only=True)
    class BridgeEnabledEventArgs(BaseEventArgs):
        """The args to the event BridgeEnabled"""

        gatewayRouter: str
        swapFacilityVault: str

    # We redefine the args field with the specific event arg type.
    args: BridgeEnabledEventArgs  # type: ignore[override]

    __name__: str = "BridgeEnabled"


@dataclass(kw_only=True)
class TokenBridgedEvent(BaseEvent):
    """The event type for event TokenBridged"""

    @dataclass(kw_only=True)
    class TokenBridgedEventArgs(BaseEventArgs):
        """The args to the event TokenBridged"""

        token: str
        user: str
        recipient: str
        amount: int
        maxGas: int
        gasPriceBid: int
        data: bytes

    # We redefine the args field with the specific event arg type.
    args: TokenBridgedEventArgs  # type: ignore[override]

    __name__: str = "TokenBridged"


@dataclass(kw_only=True)
class TokenDepositedEvent(BaseEvent):
    """The event type for event TokenDeposited"""

    @dataclass(kw_only=True)
    class TokenDepositedEventArgs(BaseEventArgs):
        """The args to the event TokenDeposited"""

        user: str
        token: str
        assets: int
        shares: int

    # We redefine the args field with the specific event arg type.
    args: TokenDepositedEventArgs  # type: ignore[override]

    __name__: str = "TokenDeposited"


@dataclass(kw_only=True)
class TokenWithdrawnEvent(BaseEvent):
    """The event type for event TokenWithdrawn"""

    @dataclass(kw_only=True)
    class TokenWithdrawnEventArgs(BaseEventArgs):
        """The args to the event TokenWithdrawn"""

        user: str
        token: str
        assets: int
        shares: int

    # We redefine the args field with the specific event arg type.
    args: TokenWithdrawnEventArgs  # type: ignore[override]

    __name__: str = "TokenWithdrawn"


BelowOneSatoshiOfSharesError = ErrorInfo(
    inputs=[
        ErrorParams(name="shares", python_type="int", solidity_type="uint256"),
        ErrorParams(
            name="oneSatoshiOfBitcornShares",
            python_type="int",
            solidity_type="uint256",
        ),
    ],
    name="BelowOneSatoshiOfShares",
    selector="0x802bcd9a",
    signature="BelowOneSatoshiOfShares(uint256,uint256)",
)

BitcornMinterAssetMustNotBeApprovedTokenError = ErrorInfo(
    inputs=[
        ErrorParams(
            name="bitcornMinterAsset",
            python_type="str",
            solidity_type="address",
        ),
    ],
    name="BitcornMinterAssetMustNotBeApprovedToken",
    selector="0x273a0966",
    signature="BitcornMinterAssetMustNotBeApprovedToken(address)",
)

BitcornMustNotBeApprovedTokenError = ErrorInfo(
    inputs=[
        ErrorParams(name="bitcorn", python_type="str", solidity_type="address"),
    ],
    name="BitcornMustNotBeApprovedToken",
    selector="0x88570826",
    signature="BitcornMustNotBeApprovedToken(address)",
)

BridgeIsEnabledError = ErrorInfo(
    inputs=[],
    name="BridgeIsEnabled",
    selector="0x78a04450",
    signature="BridgeIsEnabled()",
)

BridgeIsNotSetError = ErrorInfo(
    inputs=[],
    name="BridgeIsNotSet",
    selector="0xfb28a663",
    signature="BridgeIsNotSet()",
)

BridgeNotEnabledError = ErrorInfo(
    inputs=[],
    name="BridgeNotEnabled",
    selector="0x2a2faa72",
    signature="BridgeNotEnabled()",
)

InsufficientBitcornSharesToBridgeError = ErrorInfo(
    inputs=[
        ErrorParams(
            name="cachedShares", python_type="int", solidity_type="uint256"
        ),
        ErrorParams(
            name="requiredShares", python_type="int", solidity_type="uint256"
        ),
    ],
    name="InsufficientBitcornSharesToBridge",
    selector="0xba5b1c72",
    signature="InsufficientBitcornSharesToBridge(uint256,uint256)",
)

InsufficientSharesError = ErrorInfo(
    inputs=[
        ErrorParams(name="token", python_type="str", solidity_type="address"),
        ErrorParams(
            name="cachedShares", python_type="int", solidity_type="uint256"
        ),
        ErrorParams(name="shares", python_type="int", solidity_type="uint256"),
    ],
    name="InsufficientShares",
    selector="0x68b65f11",
    signature="InsufficientShares(address,uint256,uint256)",
)

SharesNotMultipleOfOneSatoshiError = ErrorInfo(
    inputs=[
        ErrorParams(
            name="bitcornShares", python_type="int", solidity_type="uint256"
        ),
        ErrorParams(
            name="oneSatoshiOfBitcornShares",
            python_type="int",
            solidity_type="uint256",
        ),
    ],
    name="SharesNotMultipleOfOneSatoshi",
    selector="0x120604e4",
    signature="SharesNotMultipleOfOneSatoshi(uint256,uint256)",
)

TokenAlreadyApprovedError = ErrorInfo(
    inputs=[
        ErrorParams(name="token", python_type="str", solidity_type="address"),
    ],
    name="TokenAlreadyApproved",
    selector="0x76642047",
    signature="TokenAlreadyApproved(address)",
)

TokenNotApprovedError = ErrorInfo(
    inputs=[
        ErrorParams(name="token", python_type="str", solidity_type="address"),
    ],
    name="TokenNotApproved",
    selector="0x87921f5a",
    signature="TokenNotApproved(address)",
)

WithdrawalFeeAboveMaxError = ErrorInfo(
    inputs=[
        ErrorParams(name="fee", python_type="int", solidity_type="uint256"),
    ],
    name="WithdrawalFeeAboveMax",
    selector="0x18d1595e",
    signature="WithdrawalFeeAboveMax(uint256)",
)

ZeroDepositError = ErrorInfo(
    inputs=[
        ErrorParams(name="token", python_type="str", solidity_type="address"),
    ],
    name="ZeroDeposit",
    selector="0xd47ecbef",
    signature="ZeroDeposit(address)",
)

ZeroSharesError = ErrorInfo(
    inputs=[
        ErrorParams(name="token", python_type="str", solidity_type="address"),
    ],
    name="ZeroShares",
    selector="0xe1fee185",
    signature="ZeroShares(address)",
)

ZeroSharesForAnyTokenError = ErrorInfo(
    inputs=[
        ErrorParams(name="account", python_type="str", solidity_type="address"),
    ],
    name="ZeroSharesForAnyToken",
    selector="0x45937bd3",
    signature="ZeroSharesForAnyToken(address)",
)

ZeroWithdrawError = ErrorInfo(
    inputs=[
        ErrorParams(name="token", python_type="str", solidity_type="address"),
    ],
    name="ZeroWithdraw",
    selector="0x9eea3859",
    signature="ZeroWithdraw(address)",
)
