"""Dataclasses for all structs in the IHyperdriveCheckpointSubrewarder contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs, ErrorInfo


@dataclass(kw_only=True)
class AdminUpdatedEvent(BaseEvent):
    """The event type for event AdminUpdated"""

    @dataclass(kw_only=True)
    class AdminUpdatedEventArgs(BaseEventArgs):
        """The args to the event AdminUpdated"""

        admin: str

    # We redefine the args field with the specific event arg type.
    args: AdminUpdatedEventArgs  # type: ignore[override]

    __name__: str = "AdminUpdated"


@dataclass(kw_only=True)
class MinterRewardAmountUpdatedEvent(BaseEvent):
    """The event type for event MinterRewardAmountUpdated"""

    @dataclass(kw_only=True)
    class MinterRewardAmountUpdatedEventArgs(BaseEventArgs):
        """The args to the event MinterRewardAmountUpdated"""

        minterRewardAmount: int

    # We redefine the args field with the specific event arg type.
    args: MinterRewardAmountUpdatedEventArgs  # type: ignore[override]

    __name__: str = "MinterRewardAmountUpdated"


@dataclass(kw_only=True)
class RegistryUpdatedEvent(BaseEvent):
    """The event type for event RegistryUpdated"""

    @dataclass(kw_only=True)
    class RegistryUpdatedEventArgs(BaseEventArgs):
        """The args to the event RegistryUpdated"""

        registry: str

    # We redefine the args field with the specific event arg type.
    args: RegistryUpdatedEventArgs  # type: ignore[override]

    __name__: str = "RegistryUpdated"


@dataclass(kw_only=True)
class RewardTokenUpdatedEvent(BaseEvent):
    """The event type for event RewardTokenUpdated"""

    @dataclass(kw_only=True)
    class RewardTokenUpdatedEventArgs(BaseEventArgs):
        """The args to the event RewardTokenUpdated"""

        rewardToken: str

    # We redefine the args field with the specific event arg type.
    args: RewardTokenUpdatedEventArgs  # type: ignore[override]

    __name__: str = "RewardTokenUpdated"


@dataclass(kw_only=True)
class SourceUpdatedEvent(BaseEvent):
    """The event type for event SourceUpdated"""

    @dataclass(kw_only=True)
    class SourceUpdatedEventArgs(BaseEventArgs):
        """The args to the event SourceUpdated"""

        source: str

    # We redefine the args field with the specific event arg type.
    args: SourceUpdatedEventArgs  # type: ignore[override]

    __name__: str = "SourceUpdated"


@dataclass(kw_only=True)
class TraderRewardAmountUpdatedEvent(BaseEvent):
    """The event type for event TraderRewardAmountUpdated"""

    @dataclass(kw_only=True)
    class TraderRewardAmountUpdatedEventArgs(BaseEventArgs):
        """The args to the event TraderRewardAmountUpdated"""

        traderRewardAmount: int

    # We redefine the args field with the specific event arg type.
    args: TraderRewardAmountUpdatedEventArgs  # type: ignore[override]

    __name__: str = "TraderRewardAmountUpdated"


UnauthorizedError = ErrorInfo(
    inputs=[],
    name="Unauthorized",
    selector="0x82b42900",
    signature="Unauthorized()",
)
