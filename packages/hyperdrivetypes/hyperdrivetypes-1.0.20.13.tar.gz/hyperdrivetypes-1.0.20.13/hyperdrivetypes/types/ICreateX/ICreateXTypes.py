"""Dataclasses for all structs in the ICreateX contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs, ErrorInfo, ErrorParams


@dataclass(kw_only=True)
class ContractCreationEvent(BaseEvent):
    """The event type for event ContractCreation"""

    @dataclass(kw_only=True)
    class ContractCreationEventArgs(BaseEventArgs):
        """The args to the event ContractCreation"""

        newContract: str

    # We redefine the args field with the specific event arg type.
    args: ContractCreationEventArgs  # type: ignore[override]

    __name__: str = "ContractCreation"


@dataclass(kw_only=True)
class Create3ProxyContractCreationEvent(BaseEvent):
    """The event type for event Create3ProxyContractCreation"""

    @dataclass(kw_only=True)
    class Create3ProxyContractCreationEventArgs(BaseEventArgs):
        """The args to the event Create3ProxyContractCreation"""

        newContract: str
        salt: bytes

    # We redefine the args field with the specific event arg type.
    args: Create3ProxyContractCreationEventArgs  # type: ignore[override]

    __name__: str = "Create3ProxyContractCreation"


@dataclass
class Values:
    """Values struct."""

    constructorAmount: int
    initCallAmount: int


FailedContractCreationError = ErrorInfo(
    inputs=[
        ErrorParams(name="emitter", python_type="str", solidity_type="address"),
    ],
    name="FailedContractCreation",
    selector="0xc05cee7a",
    signature="FailedContractCreation(address)",
)

FailedContractInitialisationError = ErrorInfo(
    inputs=[
        ErrorParams(name="emitter", python_type="str", solidity_type="address"),
        ErrorParams(
            name="revertData", python_type="bytes", solidity_type="bytes"
        ),
    ],
    name="FailedContractInitialisation",
    selector="0xa57ca239",
    signature="FailedContractInitialisation(address,bytes)",
)

FailedEtherTransferError = ErrorInfo(
    inputs=[
        ErrorParams(name="emitter", python_type="str", solidity_type="address"),
        ErrorParams(
            name="revertData", python_type="bytes", solidity_type="bytes"
        ),
    ],
    name="FailedEtherTransfer",
    selector="0xc2b3f445",
    signature="FailedEtherTransfer(address,bytes)",
)

InvalidNonceValueError = ErrorInfo(
    inputs=[
        ErrorParams(name="emitter", python_type="str", solidity_type="address"),
    ],
    name="InvalidNonceValue",
    selector="0x3c55ab3b",
    signature="InvalidNonceValue(address)",
)

InvalidSaltError = ErrorInfo(
    inputs=[
        ErrorParams(name="emitter", python_type="str", solidity_type="address"),
    ],
    name="InvalidSalt",
    selector="0x13b3a2a1",
    signature="InvalidSalt(address)",
)
