"""Dataclasses for all structs in the LPMath contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import ErrorInfo

from ..LPMath import LPMathTypes as LPMath


@dataclass
class PresentValueParams:
    """PresentValueParams struct."""

    shareReserves: int
    shareAdjustment: int
    bondReserves: int
    vaultSharePrice: int
    initialVaultSharePrice: int
    minimumShareReserves: int
    minimumTransactionAmount: int
    timeStretch: int
    longsOutstanding: int
    longAverageTimeRemaining: int
    shortsOutstanding: int
    shortAverageTimeRemaining: int


@dataclass
class DistributeExcessIdleParams:
    """DistributeExcessIdleParams struct."""

    presentValueParams: LPMath.PresentValueParams
    startingPresentValue: int
    activeLpTotalSupply: int
    withdrawalSharesTotalSupply: int
    idle: int
    netCurveTrade: int
    originalShareReserves: int
    originalShareAdjustment: int
    originalBondReserves: int


ExpInvalidExponentError = ErrorInfo(
    inputs=[],
    name="ExpInvalidExponent",
    selector="0x73a2d6b1",
    signature="ExpInvalidExponent()",
)

InvalidPresentValueError = ErrorInfo(
    inputs=[],
    name="InvalidPresentValue",
    selector="0xaa2c6516",
    signature="InvalidPresentValue()",
)

LnInvalidInputError = ErrorInfo(
    inputs=[],
    name="LnInvalidInput",
    selector="0xe61b4975",
    signature="LnInvalidInput()",
)

UnsafeCastToInt256Error = ErrorInfo(
    inputs=[],
    name="UnsafeCastToInt256",
    selector="0x72dd4e02",
    signature="UnsafeCastToInt256()",
)
