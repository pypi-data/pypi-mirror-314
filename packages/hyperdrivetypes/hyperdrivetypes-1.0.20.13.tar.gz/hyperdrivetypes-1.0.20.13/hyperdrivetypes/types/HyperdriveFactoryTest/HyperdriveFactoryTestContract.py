"""A web3.py Contract class for the HyperdriveFactoryTest contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Iterable, NamedTuple, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..LPMath import LPMathContract
from ..StdInvariant import StdInvariantTypes as StdInvariant
from .HyperdriveFactoryTestTypes import (
    AddLiquidityEvent,
    ApprovalEvent,
    ApprovalForAllEvent,
    CheckpointDurationResolutionUpdatedEvent,
    CloseLongEvent,
    CloseShortEvent,
    CollectGovernanceFeeEvent,
    CreateCheckpointEvent,
    DefaultPausersUpdatedEvent,
    DeployedEvent,
    DeployerCoordinatorAddedEvent,
    DeployerCoordinatorManagerUpdatedEvent,
    DeployerCoordinatorRemovedEvent,
    FeeCollectorUpdatedEvent,
    GovernanceUpdatedEvent,
    HyperdriveGovernanceUpdatedEvent,
    InitializeEvent,
    LinkerCodeHashUpdatedEvent,
    LinkerFactoryUpdatedEvent,
    Log_addressEvent,
    Log_arrayEvent,
    Log_bytes32Event,
    Log_bytesEvent,
    Log_intEvent,
    Log_named_addressEvent,
    Log_named_arrayEvent,
    Log_named_bytes32Event,
    Log_named_bytesEvent,
    Log_named_decimal_intEvent,
    Log_named_decimal_uintEvent,
    Log_named_intEvent,
    Log_named_stringEvent,
    Log_named_uintEvent,
    Log_stringEvent,
    Log_uintEvent,
    LogEvent,
    LogsEvent,
    MaxCheckpointDurationUpdatedEvent,
    MaxCircuitBreakerDeltaUpdatedEvent,
    MaxFeesUpdatedEvent,
    MaxFixedAPRUpdatedEvent,
    MaxPositionDurationUpdatedEvent,
    MaxTimeStretchAPRUpdatedEvent,
    MinCheckpointDurationUpdatedEvent,
    MinCircuitBreakerDeltaUpdatedEvent,
    MinFeesUpdatedEvent,
    MinFixedAPRUpdatedEvent,
    MinPositionDurationUpdatedEvent,
    MinTimeStretchAPRUpdatedEvent,
    OpenLongEvent,
    OpenShortEvent,
    PauseStatusUpdatedEvent,
    RedeemWithdrawalSharesEvent,
    RemoveLiquidityEvent,
    SweepCollectorUpdatedEvent,
    SweepEvent,
    TransferSingleEvent,
)

structs = {
    "StdInvariant.FuzzSelector": StdInvariant.FuzzSelector,
    "StdInvariant.FuzzInterface": StdInvariant.FuzzInterface,
}

hyperdrivefactorytest_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "IS_TEST",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "createUser",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"}
            ],
            "outputs": [
                {"name": "user", "type": "address", "internalType": "address"},
                {
                    "name": "privateKey",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "excludeArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "excludeSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "excludedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "failed",
            "inputs": [],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "setUp",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "targetArtifactSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifactSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetArtifacts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedArtifacts_",
                    "type": "string[]",
                    "internalType": "string[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetContracts",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedContracts_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetInterfaces",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedInterfaces_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzInterface[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "artifacts",
                            "type": "string[]",
                            "internalType": "string[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSelectors",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSelectors_",
                    "type": "tuple[]",
                    "internalType": "struct StdInvariant.FuzzSelector[]",
                    "components": [
                        {
                            "name": "addr",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "selectors",
                            "type": "bytes4[]",
                            "internalType": "bytes4[]",
                        },
                    ],
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "targetSenders",
            "inputs": [],
            "outputs": [
                {
                    "name": "targetedSenders_",
                    "type": "address[]",
                    "internalType": "address[]",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "test_constructor",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_deployAndInitialize",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateCheckpointDurationResolution",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateDefaultPausers",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateDeployerCoordinatorManager",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateFeeCollector",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateGovernance",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateHyperdriveGovernance",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateLinkerCodeHash",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateLinkerFactory",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMaxCheckpointDuration",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMaxCircuitBreakerDelta",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMaxFees",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMaxFixedAPR",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMaxPositionDuration",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMaxTimeStretchAPR",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMinCheckpointDuration",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMinCircuitBreakerDelta",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMinFees",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMinFixedAPR",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMinPositionDuration",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateMinTimeStretchAPR",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "test_updateSweepCollector",
            "inputs": [],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "whaleTransfer",
            "inputs": [
                {"name": "whale", "type": "address", "internalType": "address"},
                {
                    "name": "token",
                    "type": "address",
                    "internalType": "contract IERC20",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "to", "type": "address", "internalType": "address"},
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "event",
            "name": "AddLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Approval",
            "inputs": [
                {
                    "name": "owner",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "spender",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "ApprovalForAll",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "approved",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CheckpointDurationResolutionUpdated",
            "inputs": [
                {
                    "name": "newCheckpointDurationResolution",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CloseShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "basePayment",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CollectGovernanceFee",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "CreateCheckpoint",
            "inputs": [
                {
                    "name": "checkpointTime",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "checkpointVaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedShorts",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "maturedLongs",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DefaultPausersUpdated",
            "inputs": [
                {
                    "name": "newDefaultPausers",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Deployed",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "name",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "config",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.PoolDeployConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorAdded",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorManagerUpdated",
            "inputs": [
                {
                    "name": "deployerCoordinatorManager",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "DeployerCoordinatorRemoved",
            "inputs": [
                {
                    "name": "deployerCoordinator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "FeeCollectorUpdated",
            "inputs": [
                {
                    "name": "feeCollector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "GovernanceUpdated",
            "inputs": [
                {
                    "name": "governance",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "HyperdriveGovernanceUpdated",
            "inputs": [
                {
                    "name": "hyperdriveGovernance",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Initialize",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "apr",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerCodeHashUpdated",
            "inputs": [
                {
                    "name": "newLinkerCodeHash",
                    "type": "bytes32",
                    "indexed": True,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "LinkerFactoryUpdated",
            "inputs": [
                {
                    "name": "newLinkerFactory",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxCheckpointDurationUpdated",
            "inputs": [
                {
                    "name": "newMaxCheckpointDuration",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxCircuitBreakerDeltaUpdated",
            "inputs": [
                {
                    "name": "newMaxCircuitBreakerDelta",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxFeesUpdated",
            "inputs": [
                {
                    "name": "newMaxFees",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {
                            "name": "curve",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "flat",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceLP",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceZombie",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxFixedAPRUpdated",
            "inputs": [
                {
                    "name": "newMaxFixedAPR",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxPositionDurationUpdated",
            "inputs": [
                {
                    "name": "newMaxPositionDuration",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MaxTimeStretchAPRUpdated",
            "inputs": [
                {
                    "name": "newMaxTimeStretchAPR",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinCheckpointDurationUpdated",
            "inputs": [
                {
                    "name": "newMinCheckpointDuration",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinCircuitBreakerDeltaUpdated",
            "inputs": [
                {
                    "name": "newMinCircuitBreakerDelta",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinFeesUpdated",
            "inputs": [
                {
                    "name": "newMinFees",
                    "type": "tuple",
                    "indexed": False,
                    "internalType": "struct IHyperdrive.Fees",
                    "components": [
                        {
                            "name": "curve",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "flat",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceLP",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governanceZombie",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinFixedAPRUpdated",
            "inputs": [
                {
                    "name": "newMinFixedAPR",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinPositionDurationUpdated",
            "inputs": [
                {
                    "name": "newMinPositionDuration",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "MinTimeStretchAPRUpdated",
            "inputs": [
                {
                    "name": "newMinTimeStretchAPR",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenLong",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OpenShort",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "assetId",
                    "type": "uint256",
                    "indexed": True,
                    "internalType": "uint256",
                },
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "baseProceeds",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "bondAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "PauseStatusUpdated",
            "inputs": [
                {
                    "name": "isPaused",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RedeemWithdrawalShares",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "RemoveLiquidity",
            "inputs": [
                {
                    "name": "provider",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "destination",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "lpAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "amount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "vaultSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "asBase",
                    "type": "bool",
                    "indexed": False,
                    "internalType": "bool",
                },
                {
                    "name": "withdrawalShareAmount",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "lpSharePrice",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "extraData",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "Sweep",
            "inputs": [
                {
                    "name": "collector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "target",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "SweepCollectorUpdated",
            "inputs": [
                {
                    "name": "sweepCollector",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "TransferSingle",
            "inputs": [
                {
                    "name": "operator",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "from",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "to",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "id",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "value",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_address",
            "inputs": [
                {
                    "name": "",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_array",
            "inputs": [
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_bytes32",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_int",
            "inputs": [
                {
                    "name": "",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_address",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256[]",
                    "indexed": False,
                    "internalType": "uint256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256[]",
                    "indexed": False,
                    "internalType": "int256[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_array",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "address[]",
                    "indexed": False,
                    "internalType": "address[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_bytes32",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "bytes32",
                    "indexed": False,
                    "internalType": "bytes32",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_decimal_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
                {
                    "name": "decimals",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_int",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "int256",
                    "indexed": False,
                    "internalType": "int256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_string",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_named_uint",
            "inputs": [
                {
                    "name": "key",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                },
                {
                    "name": "val",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_string",
            "inputs": [
                {
                    "name": "",
                    "type": "string",
                    "indexed": False,
                    "internalType": "string",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "log_uint",
            "inputs": [
                {
                    "name": "",
                    "type": "uint256",
                    "indexed": False,
                    "internalType": "uint256",
                }
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "logs",
            "inputs": [
                {
                    "name": "",
                    "type": "bytes",
                    "indexed": False,
                    "internalType": "bytes",
                }
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "LnInvalidInput", "inputs": []},
        {"type": "error", "name": "UnsafeCastToInt256", "inputs": []},
        {"type": "error", "name": "WhaleBalanceExceeded", "inputs": []},
        {"type": "error", "name": "WhaleIsContract", "inputs": []},
    ],
)


class HyperdriveFactoryTestLnInvalidInputContractError(PypechainBaseError):
    """ContractError for LnInvalidInput."""

    # Error name
    name: str = "LnInvalidInput"
    # 4 byte error selector
    selector: str = "0xe61b4975"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "LnInvalidInput()"
    # Error input types
    abi: ABI = hyperdrivefactorytest_abi


class HyperdriveFactoryTestUnsafeCastToInt256ContractError(PypechainBaseError):
    """ContractError for UnsafeCastToInt256."""

    # Error name
    name: str = "UnsafeCastToInt256"
    # 4 byte error selector
    selector: str = "0x72dd4e02"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "UnsafeCastToInt256()"
    # Error input types
    abi: ABI = hyperdrivefactorytest_abi


class HyperdriveFactoryTestWhaleBalanceExceededContractError(
    PypechainBaseError
):
    """ContractError for WhaleBalanceExceeded."""

    # Error name
    name: str = "WhaleBalanceExceeded"
    # 4 byte error selector
    selector: str = "0xc4649d28"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleBalanceExceeded()"
    # Error input types
    abi: ABI = hyperdrivefactorytest_abi


class HyperdriveFactoryTestWhaleIsContractContractError(PypechainBaseError):
    """ContractError for WhaleIsContract."""

    # Error name
    name: str = "WhaleIsContract"
    # 4 byte error selector
    selector: str = "0x98d85a67"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "WhaleIsContract()"
    # Error input types
    abi: ABI = hyperdrivefactorytest_abi


class HyperdriveFactoryTestContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the HyperdriveFactoryTest contract."""

    LnInvalidInput: HyperdriveFactoryTestLnInvalidInputContractError

    UnsafeCastToInt256: HyperdriveFactoryTestUnsafeCastToInt256ContractError

    WhaleBalanceExceeded: HyperdriveFactoryTestWhaleBalanceExceededContractError

    WhaleIsContract: HyperdriveFactoryTestWhaleIsContractContractError

    def __init__(
        self,
    ) -> None:
        self.LnInvalidInput = HyperdriveFactoryTestLnInvalidInputContractError()
        self.UnsafeCastToInt256 = (
            HyperdriveFactoryTestUnsafeCastToInt256ContractError()
        )
        self.WhaleBalanceExceeded = (
            HyperdriveFactoryTestWhaleBalanceExceededContractError()
        )
        self.WhaleIsContract = (
            HyperdriveFactoryTestWhaleIsContractContractError()
        )

        self._all = [
            self.LnInvalidInput,
            self.UnsafeCastToInt256,
            self.WhaleBalanceExceeded,
            self.WhaleIsContract,
        ]


class HyperdriveFactoryTestIS_TESTContractFunction0(PypechainContractFunction):
    """ContractFunction for the IS_TEST() method."""

    _function_name = "IS_TEST"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestIS_TESTContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the IS_TEST method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "IS_TEST"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestIS_TESTContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestIS_TESTContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestIS_TESTContractFunction0._type_signature: HyperdriveFactoryTestIS_TESTContractFunction0,
        }
        return out


class HyperdriveFactoryTestCreateUserContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the createUser(str) method."""

    _function_name = "createUser"
    _type_signature = expand_struct_type_str(tuple(["str"]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for CreateUser."""

        user: str
        privateKey: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [str, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestCreateUserContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the createUser method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "createUser"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _name: str) -> HyperdriveFactoryTestCreateUserContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestCreateUserContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestCreateUserContractFunction0._type_signature: HyperdriveFactoryTestCreateUserContractFunction0,
        }
        return out


class HyperdriveFactoryTestExcludeArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeArtifacts() method."""

    _function_name = "excludeArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestExcludeArtifactsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the excludeArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestExcludeArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestExcludeArtifactsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestExcludeArtifactsContractFunction0._type_signature: HyperdriveFactoryTestExcludeArtifactsContractFunction0,
        }
        return out


class HyperdriveFactoryTestExcludeContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeContracts() method."""

    _function_name = "excludeContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestExcludeContractsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the excludeContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestExcludeContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestExcludeContractsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestExcludeContractsContractFunction0._type_signature: HyperdriveFactoryTestExcludeContractsContractFunction0,
        }
        return out


class HyperdriveFactoryTestExcludeSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the excludeSenders() method."""

    _function_name = "excludeSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestExcludeSendersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the excludeSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "excludeSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestExcludeSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestExcludeSendersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestExcludeSendersContractFunction0._type_signature: HyperdriveFactoryTestExcludeSendersContractFunction0,
        }
        return out


class HyperdriveFactoryTestFailedContractFunction0(PypechainContractFunction):
    """ContractFunction for the failed() method."""

    _function_name = "failed"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestFailedContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the failed method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "failed"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestFailedContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestFailedContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestFailedContractFunction0._type_signature: HyperdriveFactoryTestFailedContractFunction0,
        }
        return out


class HyperdriveFactoryTestSetUpContractFunction0(PypechainContractFunction):
    """ContractFunction for the setUp() method."""

    _function_name = "setUp"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestSetUpContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the setUp method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "setUp"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestSetUpContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestSetUpContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestSetUpContractFunction0._type_signature: HyperdriveFactoryTestSetUpContractFunction0,
        }
        return out


class HyperdriveFactoryTestTargetArtifactSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifactSelectors() method."""

    _function_name = "targetArtifactSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class HyperdriveFactoryTestTargetArtifactSelectorsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetArtifactSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifactSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTargetArtifactSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTargetArtifactSelectorsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTargetArtifactSelectorsContractFunction0._type_signature: HyperdriveFactoryTestTargetArtifactSelectorsContractFunction0,
        }
        return out


class HyperdriveFactoryTestTargetArtifactsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetArtifacts() method."""

    _function_name = "targetArtifacts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestTargetArtifactsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetArtifacts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetArtifacts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTargetArtifactsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTargetArtifactsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTargetArtifactsContractFunction0._type_signature: HyperdriveFactoryTestTargetArtifactsContractFunction0,
        }
        return out


class HyperdriveFactoryTestTargetContractsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetContracts() method."""

    _function_name = "targetContracts"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestTargetContractsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetContracts method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetContracts"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTargetContractsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTargetContractsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTargetContractsContractFunction0._type_signature: HyperdriveFactoryTestTargetContractsContractFunction0,
        }
        return out


class HyperdriveFactoryTestTargetInterfacesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetInterfaces() method."""

    _function_name = "targetInterfaces"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzInterface]:
        """returns list[StdInvariant.FuzzInterface]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzInterface]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzInterface],
            rename_returned_types(structs, return_types, raw_values),
        )


class HyperdriveFactoryTestTargetInterfacesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetInterfaces method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetInterfaces"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTargetInterfacesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTargetInterfacesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTargetInterfacesContractFunction0._type_signature: HyperdriveFactoryTestTargetInterfacesContractFunction0,
        }
        return out


class HyperdriveFactoryTestTargetSelectorsContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSelectors() method."""

    _function_name = "targetSelectors"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[StdInvariant.FuzzSelector]:
        """returns list[StdInvariant.FuzzSelector]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[StdInvariant.FuzzSelector]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[StdInvariant.FuzzSelector],
            rename_returned_types(structs, return_types, raw_values),
        )


class HyperdriveFactoryTestTargetSelectorsContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetSelectors method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSelectors"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTargetSelectorsContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTargetSelectorsContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTargetSelectorsContractFunction0._type_signature: HyperdriveFactoryTestTargetSelectorsContractFunction0,
        }
        return out


class HyperdriveFactoryTestTargetSendersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the targetSenders() method."""

    _function_name = "targetSenders"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> list[str]:
        """returns list[str]."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = list[str]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            list[str], rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestTargetSendersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the targetSenders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "targetSenders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTargetSendersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTargetSendersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTargetSendersContractFunction0._type_signature: HyperdriveFactoryTestTargetSendersContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_constructorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_constructor() method."""

    _function_name = "test_constructor"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_constructorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_constructor method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_constructor"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_constructorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_constructorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_constructorContractFunction0._type_signature: HyperdriveFactoryTestTest_constructorContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_deployAndInitializeContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_deployAndInitialize() method."""

    _function_name = "test_deployAndInitialize"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_deployAndInitializeContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_deployAndInitialize method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_deployAndInitialize"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_deployAndInitializeContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_deployAndInitializeContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_deployAndInitializeContractFunction0._type_signature: HyperdriveFactoryTestTest_deployAndInitializeContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateCheckpointDurationResolutionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateCheckpointDurationResolution() method."""

    _function_name = "test_updateCheckpointDurationResolution"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateCheckpointDurationResolutionContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateCheckpointDurationResolution method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateCheckpointDurationResolution"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateCheckpointDurationResolutionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateCheckpointDurationResolutionContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateCheckpointDurationResolutionContractFunction0._type_signature: HyperdriveFactoryTestTest_updateCheckpointDurationResolutionContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateDefaultPausersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateDefaultPausers() method."""

    _function_name = "test_updateDefaultPausers"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateDefaultPausersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateDefaultPausers method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateDefaultPausers"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateDefaultPausersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateDefaultPausersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateDefaultPausersContractFunction0._type_signature: HyperdriveFactoryTestTest_updateDefaultPausersContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateDeployerCoordinatorManagerContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateDeployerCoordinatorManager() method."""

    _function_name = "test_updateDeployerCoordinatorManager"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateDeployerCoordinatorManagerContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateDeployerCoordinatorManager method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateDeployerCoordinatorManager"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateDeployerCoordinatorManagerContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateDeployerCoordinatorManagerContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateDeployerCoordinatorManagerContractFunction0._type_signature: HyperdriveFactoryTestTest_updateDeployerCoordinatorManagerContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateFeeCollectorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateFeeCollector() method."""

    _function_name = "test_updateFeeCollector"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateFeeCollectorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateFeeCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateFeeCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateFeeCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateFeeCollectorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateFeeCollectorContractFunction0._type_signature: HyperdriveFactoryTestTest_updateFeeCollectorContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateGovernanceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateGovernance() method."""

    _function_name = "test_updateGovernance"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateGovernanceContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateGovernance method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateGovernance"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateGovernanceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateGovernanceContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateGovernanceContractFunction0._type_signature: HyperdriveFactoryTestTest_updateGovernanceContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateHyperdriveGovernanceContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateHyperdriveGovernance() method."""

    _function_name = "test_updateHyperdriveGovernance"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateHyperdriveGovernanceContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateHyperdriveGovernance method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateHyperdriveGovernance"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateHyperdriveGovernanceContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateHyperdriveGovernanceContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateHyperdriveGovernanceContractFunction0._type_signature: HyperdriveFactoryTestTest_updateHyperdriveGovernanceContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateLinkerCodeHashContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateLinkerCodeHash() method."""

    _function_name = "test_updateLinkerCodeHash"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateLinkerCodeHashContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateLinkerCodeHash method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateLinkerCodeHash"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateLinkerCodeHashContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateLinkerCodeHashContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateLinkerCodeHashContractFunction0._type_signature: HyperdriveFactoryTestTest_updateLinkerCodeHashContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateLinkerFactoryContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateLinkerFactory() method."""

    _function_name = "test_updateLinkerFactory"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateLinkerFactoryContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateLinkerFactory method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateLinkerFactory"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateLinkerFactoryContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateLinkerFactoryContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateLinkerFactoryContractFunction0._type_signature: HyperdriveFactoryTestTest_updateLinkerFactoryContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMaxCheckpointDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMaxCheckpointDuration() method."""

    _function_name = "test_updateMaxCheckpointDuration"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMaxCheckpointDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMaxCheckpointDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMaxCheckpointDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMaxCheckpointDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMaxCheckpointDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMaxCheckpointDurationContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMaxCheckpointDurationContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMaxCircuitBreakerDeltaContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMaxCircuitBreakerDelta() method."""

    _function_name = "test_updateMaxCircuitBreakerDelta"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMaxCircuitBreakerDeltaContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMaxCircuitBreakerDelta method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMaxCircuitBreakerDelta"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMaxCircuitBreakerDeltaContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMaxCircuitBreakerDeltaContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMaxCircuitBreakerDeltaContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMaxCircuitBreakerDeltaContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMaxFeesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMaxFees() method."""

    _function_name = "test_updateMaxFees"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMaxFeesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMaxFees method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMaxFees"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMaxFeesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMaxFeesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMaxFeesContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMaxFeesContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMaxFixedAPRContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMaxFixedAPR() method."""

    _function_name = "test_updateMaxFixedAPR"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMaxFixedAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMaxFixedAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMaxFixedAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMaxFixedAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMaxFixedAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMaxFixedAPRContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMaxFixedAPRContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMaxPositionDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMaxPositionDuration() method."""

    _function_name = "test_updateMaxPositionDuration"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMaxPositionDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMaxPositionDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMaxPositionDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMaxPositionDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMaxPositionDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMaxPositionDurationContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMaxPositionDurationContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMaxTimeStretchAPRContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMaxTimeStretchAPR() method."""

    _function_name = "test_updateMaxTimeStretchAPR"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMaxTimeStretchAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMaxTimeStretchAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMaxTimeStretchAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMaxTimeStretchAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMaxTimeStretchAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMaxTimeStretchAPRContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMaxTimeStretchAPRContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMinCheckpointDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMinCheckpointDuration() method."""

    _function_name = "test_updateMinCheckpointDuration"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMinCheckpointDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMinCheckpointDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMinCheckpointDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMinCheckpointDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMinCheckpointDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMinCheckpointDurationContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMinCheckpointDurationContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMinCircuitBreakerDeltaContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMinCircuitBreakerDelta() method."""

    _function_name = "test_updateMinCircuitBreakerDelta"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMinCircuitBreakerDeltaContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMinCircuitBreakerDelta method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMinCircuitBreakerDelta"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMinCircuitBreakerDeltaContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMinCircuitBreakerDeltaContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMinCircuitBreakerDeltaContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMinCircuitBreakerDeltaContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMinFeesContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMinFees() method."""

    _function_name = "test_updateMinFees"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMinFeesContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMinFees method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMinFees"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMinFeesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMinFeesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMinFeesContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMinFeesContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMinFixedAPRContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMinFixedAPR() method."""

    _function_name = "test_updateMinFixedAPR"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMinFixedAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMinFixedAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMinFixedAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMinFixedAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMinFixedAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMinFixedAPRContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMinFixedAPRContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMinPositionDurationContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMinPositionDuration() method."""

    _function_name = "test_updateMinPositionDuration"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMinPositionDurationContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMinPositionDuration method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMinPositionDuration"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMinPositionDurationContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMinPositionDurationContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMinPositionDurationContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMinPositionDurationContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateMinTimeStretchAPRContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateMinTimeStretchAPR() method."""

    _function_name = "test_updateMinTimeStretchAPR"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateMinTimeStretchAPRContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateMinTimeStretchAPR method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateMinTimeStretchAPR"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateMinTimeStretchAPRContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateMinTimeStretchAPRContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateMinTimeStretchAPRContractFunction0._type_signature: HyperdriveFactoryTestTest_updateMinTimeStretchAPRContractFunction0,
        }
        return out


class HyperdriveFactoryTestTest_updateSweepCollectorContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the test_updateSweepCollector() method."""

    _function_name = "test_updateSweepCollector"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class HyperdriveFactoryTestTest_updateSweepCollectorContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the test_updateSweepCollector method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "test_updateSweepCollector"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> HyperdriveFactoryTestTest_updateSweepCollectorContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestTest_updateSweepCollectorContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestTest_updateSweepCollectorContractFunction0._type_signature: HyperdriveFactoryTestTest_updateSweepCollectorContractFunction0,
        }
        return out


class HyperdriveFactoryTestWhaleTransferContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "str"]), structs
    )
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestWhaleTransferContractFunction1(
    PypechainContractFunction
):
    """ContractFunction for the whaleTransfer(str,str,int,str) method."""

    _function_name = "whaleTransfer"
    _type_signature = expand_struct_type_str(
        tuple(["str", "str", "int", "str"]), structs
    )
    _error_class = HyperdriveFactoryTestContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class HyperdriveFactoryTestWhaleTransferContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the whaleTransfer method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "whaleTransfer"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, whale: str, token: str, to: str) -> HyperdriveFactoryTestWhaleTransferContractFunction0:  # type: ignore
        ...

    @overload
    def __call__(self, whale: str, token: str, amount: int, to: str) -> HyperdriveFactoryTestWhaleTransferContractFunction1:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> HyperdriveFactoryTestWhaleTransferContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            HyperdriveFactoryTestWhaleTransferContractFunction0._type_signature: HyperdriveFactoryTestWhaleTransferContractFunction0,
            HyperdriveFactoryTestWhaleTransferContractFunction1._type_signature: HyperdriveFactoryTestWhaleTransferContractFunction1,
        }
        return out


class HyperdriveFactoryTestContractFunctions(ContractFunctions):
    """ContractFunctions for the HyperdriveFactoryTest contract."""

    IS_TEST: HyperdriveFactoryTestIS_TESTContractFunction

    createUser: HyperdriveFactoryTestCreateUserContractFunction

    excludeArtifacts: HyperdriveFactoryTestExcludeArtifactsContractFunction

    excludeContracts: HyperdriveFactoryTestExcludeContractsContractFunction

    excludeSenders: HyperdriveFactoryTestExcludeSendersContractFunction

    failed: HyperdriveFactoryTestFailedContractFunction

    setUp: HyperdriveFactoryTestSetUpContractFunction

    targetArtifactSelectors: (
        HyperdriveFactoryTestTargetArtifactSelectorsContractFunction
    )

    targetArtifacts: HyperdriveFactoryTestTargetArtifactsContractFunction

    targetContracts: HyperdriveFactoryTestTargetContractsContractFunction

    targetInterfaces: HyperdriveFactoryTestTargetInterfacesContractFunction

    targetSelectors: HyperdriveFactoryTestTargetSelectorsContractFunction

    targetSenders: HyperdriveFactoryTestTargetSendersContractFunction

    test_constructor: HyperdriveFactoryTestTest_constructorContractFunction

    test_deployAndInitialize: (
        HyperdriveFactoryTestTest_deployAndInitializeContractFunction
    )

    test_updateCheckpointDurationResolution: HyperdriveFactoryTestTest_updateCheckpointDurationResolutionContractFunction

    test_updateDefaultPausers: (
        HyperdriveFactoryTestTest_updateDefaultPausersContractFunction
    )

    test_updateDeployerCoordinatorManager: HyperdriveFactoryTestTest_updateDeployerCoordinatorManagerContractFunction

    test_updateFeeCollector: (
        HyperdriveFactoryTestTest_updateFeeCollectorContractFunction
    )

    test_updateGovernance: (
        HyperdriveFactoryTestTest_updateGovernanceContractFunction
    )

    test_updateHyperdriveGovernance: (
        HyperdriveFactoryTestTest_updateHyperdriveGovernanceContractFunction
    )

    test_updateLinkerCodeHash: (
        HyperdriveFactoryTestTest_updateLinkerCodeHashContractFunction
    )

    test_updateLinkerFactory: (
        HyperdriveFactoryTestTest_updateLinkerFactoryContractFunction
    )

    test_updateMaxCheckpointDuration: (
        HyperdriveFactoryTestTest_updateMaxCheckpointDurationContractFunction
    )

    test_updateMaxCircuitBreakerDelta: (
        HyperdriveFactoryTestTest_updateMaxCircuitBreakerDeltaContractFunction
    )

    test_updateMaxFees: HyperdriveFactoryTestTest_updateMaxFeesContractFunction

    test_updateMaxFixedAPR: (
        HyperdriveFactoryTestTest_updateMaxFixedAPRContractFunction
    )

    test_updateMaxPositionDuration: (
        HyperdriveFactoryTestTest_updateMaxPositionDurationContractFunction
    )

    test_updateMaxTimeStretchAPR: (
        HyperdriveFactoryTestTest_updateMaxTimeStretchAPRContractFunction
    )

    test_updateMinCheckpointDuration: (
        HyperdriveFactoryTestTest_updateMinCheckpointDurationContractFunction
    )

    test_updateMinCircuitBreakerDelta: (
        HyperdriveFactoryTestTest_updateMinCircuitBreakerDeltaContractFunction
    )

    test_updateMinFees: HyperdriveFactoryTestTest_updateMinFeesContractFunction

    test_updateMinFixedAPR: (
        HyperdriveFactoryTestTest_updateMinFixedAPRContractFunction
    )

    test_updateMinPositionDuration: (
        HyperdriveFactoryTestTest_updateMinPositionDurationContractFunction
    )

    test_updateMinTimeStretchAPR: (
        HyperdriveFactoryTestTest_updateMinTimeStretchAPRContractFunction
    )

    test_updateSweepCollector: (
        HyperdriveFactoryTestTest_updateSweepCollectorContractFunction
    )

    whaleTransfer: HyperdriveFactoryTestWhaleTransferContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.IS_TEST = HyperdriveFactoryTestIS_TESTContractFunction.factory(
            "IS_TEST",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="IS_TEST",
        )
        self.createUser = (
            HyperdriveFactoryTestCreateUserContractFunction.factory(
                "createUser",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="createUser",
            )
        )
        self.excludeArtifacts = (
            HyperdriveFactoryTestExcludeArtifactsContractFunction.factory(
                "excludeArtifacts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeArtifacts",
            )
        )
        self.excludeContracts = (
            HyperdriveFactoryTestExcludeContractsContractFunction.factory(
                "excludeContracts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeContracts",
            )
        )
        self.excludeSenders = (
            HyperdriveFactoryTestExcludeSendersContractFunction.factory(
                "excludeSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="excludeSenders",
            )
        )
        self.failed = HyperdriveFactoryTestFailedContractFunction.factory(
            "failed",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="failed",
        )
        self.setUp = HyperdriveFactoryTestSetUpContractFunction.factory(
            "setUp",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="setUp",
        )
        self.targetArtifactSelectors = HyperdriveFactoryTestTargetArtifactSelectorsContractFunction.factory(
            "targetArtifactSelectors",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="targetArtifactSelectors",
        )
        self.targetArtifacts = (
            HyperdriveFactoryTestTargetArtifactsContractFunction.factory(
                "targetArtifacts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetArtifacts",
            )
        )
        self.targetContracts = (
            HyperdriveFactoryTestTargetContractsContractFunction.factory(
                "targetContracts",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetContracts",
            )
        )
        self.targetInterfaces = (
            HyperdriveFactoryTestTargetInterfacesContractFunction.factory(
                "targetInterfaces",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetInterfaces",
            )
        )
        self.targetSelectors = (
            HyperdriveFactoryTestTargetSelectorsContractFunction.factory(
                "targetSelectors",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetSelectors",
            )
        )
        self.targetSenders = (
            HyperdriveFactoryTestTargetSendersContractFunction.factory(
                "targetSenders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="targetSenders",
            )
        )
        self.test_constructor = (
            HyperdriveFactoryTestTest_constructorContractFunction.factory(
                "test_constructor",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_constructor",
            )
        )
        self.test_deployAndInitialize = HyperdriveFactoryTestTest_deployAndInitializeContractFunction.factory(
            "test_deployAndInitialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_deployAndInitialize",
        )
        self.test_updateCheckpointDurationResolution = HyperdriveFactoryTestTest_updateCheckpointDurationResolutionContractFunction.factory(
            "test_updateCheckpointDurationResolution",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateCheckpointDurationResolution",
        )
        self.test_updateDefaultPausers = HyperdriveFactoryTestTest_updateDefaultPausersContractFunction.factory(
            "test_updateDefaultPausers",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateDefaultPausers",
        )
        self.test_updateDeployerCoordinatorManager = HyperdriveFactoryTestTest_updateDeployerCoordinatorManagerContractFunction.factory(
            "test_updateDeployerCoordinatorManager",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateDeployerCoordinatorManager",
        )
        self.test_updateFeeCollector = HyperdriveFactoryTestTest_updateFeeCollectorContractFunction.factory(
            "test_updateFeeCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateFeeCollector",
        )
        self.test_updateGovernance = (
            HyperdriveFactoryTestTest_updateGovernanceContractFunction.factory(
                "test_updateGovernance",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_updateGovernance",
            )
        )
        self.test_updateHyperdriveGovernance = HyperdriveFactoryTestTest_updateHyperdriveGovernanceContractFunction.factory(
            "test_updateHyperdriveGovernance",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateHyperdriveGovernance",
        )
        self.test_updateLinkerCodeHash = HyperdriveFactoryTestTest_updateLinkerCodeHashContractFunction.factory(
            "test_updateLinkerCodeHash",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateLinkerCodeHash",
        )
        self.test_updateLinkerFactory = HyperdriveFactoryTestTest_updateLinkerFactoryContractFunction.factory(
            "test_updateLinkerFactory",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateLinkerFactory",
        )
        self.test_updateMaxCheckpointDuration = HyperdriveFactoryTestTest_updateMaxCheckpointDurationContractFunction.factory(
            "test_updateMaxCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateMaxCheckpointDuration",
        )
        self.test_updateMaxCircuitBreakerDelta = HyperdriveFactoryTestTest_updateMaxCircuitBreakerDeltaContractFunction.factory(
            "test_updateMaxCircuitBreakerDelta",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateMaxCircuitBreakerDelta",
        )
        self.test_updateMaxFees = (
            HyperdriveFactoryTestTest_updateMaxFeesContractFunction.factory(
                "test_updateMaxFees",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_updateMaxFees",
            )
        )
        self.test_updateMaxFixedAPR = (
            HyperdriveFactoryTestTest_updateMaxFixedAPRContractFunction.factory(
                "test_updateMaxFixedAPR",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_updateMaxFixedAPR",
            )
        )
        self.test_updateMaxPositionDuration = HyperdriveFactoryTestTest_updateMaxPositionDurationContractFunction.factory(
            "test_updateMaxPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateMaxPositionDuration",
        )
        self.test_updateMaxTimeStretchAPR = HyperdriveFactoryTestTest_updateMaxTimeStretchAPRContractFunction.factory(
            "test_updateMaxTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateMaxTimeStretchAPR",
        )
        self.test_updateMinCheckpointDuration = HyperdriveFactoryTestTest_updateMinCheckpointDurationContractFunction.factory(
            "test_updateMinCheckpointDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateMinCheckpointDuration",
        )
        self.test_updateMinCircuitBreakerDelta = HyperdriveFactoryTestTest_updateMinCircuitBreakerDeltaContractFunction.factory(
            "test_updateMinCircuitBreakerDelta",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateMinCircuitBreakerDelta",
        )
        self.test_updateMinFees = (
            HyperdriveFactoryTestTest_updateMinFeesContractFunction.factory(
                "test_updateMinFees",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_updateMinFees",
            )
        )
        self.test_updateMinFixedAPR = (
            HyperdriveFactoryTestTest_updateMinFixedAPRContractFunction.factory(
                "test_updateMinFixedAPR",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="test_updateMinFixedAPR",
            )
        )
        self.test_updateMinPositionDuration = HyperdriveFactoryTestTest_updateMinPositionDurationContractFunction.factory(
            "test_updateMinPositionDuration",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateMinPositionDuration",
        )
        self.test_updateMinTimeStretchAPR = HyperdriveFactoryTestTest_updateMinTimeStretchAPRContractFunction.factory(
            "test_updateMinTimeStretchAPR",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateMinTimeStretchAPR",
        )
        self.test_updateSweepCollector = HyperdriveFactoryTestTest_updateSweepCollectorContractFunction.factory(
            "test_updateSweepCollector",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="test_updateSweepCollector",
        )
        self.whaleTransfer = (
            HyperdriveFactoryTestWhaleTransferContractFunction.factory(
                "whaleTransfer",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="whaleTransfer",
            )
        )


class HyperdriveFactoryTestAddLiquidityContractEvent(ContractEvent):
    """ContractEvent for AddLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[AddLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            AddLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=AddLiquidityEvent.AddLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestApprovalContractEvent(ContractEvent):
    """ContractEvent for Approval."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalEvent.ApprovalEventArgs(
                    owner=abi_event.args["owner"],
                    spender=abi_event.args["spender"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestApprovalForAllContractEvent(ContractEvent):
    """ContractEvent for ApprovalForAll."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[ApprovalForAllEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            ApprovalForAllEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=ApprovalForAllEvent.ApprovalForAllEventArgs(
                    account=abi_event.args["account"],
                    operator=abi_event.args["operator"],
                    approved=abi_event.args["approved"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestCheckpointDurationResolutionUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for CheckpointDurationResolutionUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CheckpointDurationResolutionUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CheckpointDurationResolutionUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CheckpointDurationResolutionUpdatedEvent.CheckpointDurationResolutionUpdatedEventArgs(
                    newCheckpointDurationResolution=abi_event.args[
                        "newCheckpointDurationResolution"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CheckpointDurationResolutionUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CheckpointDurationResolutionUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CheckpointDurationResolutionUpdatedEvent.CheckpointDurationResolutionUpdatedEventArgs(
                    newCheckpointDurationResolution=abi_event.args[
                        "newCheckpointDurationResolution"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestCloseLongContractEvent(ContractEvent):
    """ContractEvent for CloseLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseLongEvent.CloseLongEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestCloseShortContractEvent(ContractEvent):
    """ContractEvent for CloseShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CloseShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CloseShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CloseShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CloseShortEvent.CloseShortEventArgs(
                    trader=abi_event.args["trader"],
                    destination=abi_event.args["destination"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    basePayment=abi_event.args["basePayment"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestCollectGovernanceFeeContractEvent(ContractEvent):
    """ContractEvent for CollectGovernanceFee."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CollectGovernanceFeeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CollectGovernanceFeeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CollectGovernanceFeeEvent.CollectGovernanceFeeEventArgs(
                    collector=abi_event.args["collector"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestCreateCheckpointContractEvent(ContractEvent):
    """ContractEvent for CreateCheckpoint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[CreateCheckpointEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            CreateCheckpointEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=CreateCheckpointEvent.CreateCheckpointEventArgs(
                    checkpointTime=abi_event.args["checkpointTime"],
                    checkpointVaultSharePrice=abi_event.args[
                        "checkpointVaultSharePrice"
                    ],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    maturedShorts=abi_event.args["maturedShorts"],
                    maturedLongs=abi_event.args["maturedLongs"],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestDefaultPausersUpdatedContractEvent(ContractEvent):
    """ContractEvent for DefaultPausersUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DefaultPausersUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DefaultPausersUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DefaultPausersUpdatedEvent.DefaultPausersUpdatedEventArgs(
                    newDefaultPausers=abi_event.args["newDefaultPausers"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DefaultPausersUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DefaultPausersUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DefaultPausersUpdatedEvent.DefaultPausersUpdatedEventArgs(
                    newDefaultPausers=abi_event.args["newDefaultPausers"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestDeployedContractEvent(ContractEvent):
    """ContractEvent for Deployed."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployedEvent.DeployedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                    hyperdrive=abi_event.args["hyperdrive"],
                    name=abi_event.args["name"],
                    config=abi_event.args["config"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestDeployerCoordinatorAddedContractEvent(ContractEvent):
    """ContractEvent for DeployerCoordinatorAdded."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployerCoordinatorAddedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorAddedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorAddedEvent.DeployerCoordinatorAddedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployerCoordinatorAddedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorAddedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorAddedEvent.DeployerCoordinatorAddedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestDeployerCoordinatorManagerUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for DeployerCoordinatorManagerUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployerCoordinatorManagerUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorManagerUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorManagerUpdatedEvent.DeployerCoordinatorManagerUpdatedEventArgs(
                    deployerCoordinatorManager=abi_event.args[
                        "deployerCoordinatorManager"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployerCoordinatorManagerUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorManagerUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorManagerUpdatedEvent.DeployerCoordinatorManagerUpdatedEventArgs(
                    deployerCoordinatorManager=abi_event.args[
                        "deployerCoordinatorManager"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestDeployerCoordinatorRemovedContractEvent(
    ContractEvent
):
    """ContractEvent for DeployerCoordinatorRemoved."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[DeployerCoordinatorRemovedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorRemovedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorRemovedEvent.DeployerCoordinatorRemovedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[DeployerCoordinatorRemovedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            DeployerCoordinatorRemovedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=DeployerCoordinatorRemovedEvent.DeployerCoordinatorRemovedEventArgs(
                    deployerCoordinator=abi_event.args["deployerCoordinator"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestFeeCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for FeeCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[FeeCollectorUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            FeeCollectorUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=FeeCollectorUpdatedEvent.FeeCollectorUpdatedEventArgs(
                    feeCollector=abi_event.args["feeCollector"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[FeeCollectorUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            FeeCollectorUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=FeeCollectorUpdatedEvent.FeeCollectorUpdatedEventArgs(
                    feeCollector=abi_event.args["feeCollector"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestGovernanceUpdatedContractEvent(ContractEvent):
    """ContractEvent for GovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[GovernanceUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            GovernanceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=GovernanceUpdatedEvent.GovernanceUpdatedEventArgs(
                    governance=abi_event.args["governance"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[GovernanceUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            GovernanceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=GovernanceUpdatedEvent.GovernanceUpdatedEventArgs(
                    governance=abi_event.args["governance"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestHyperdriveGovernanceUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for HyperdriveGovernanceUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[HyperdriveGovernanceUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            HyperdriveGovernanceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=HyperdriveGovernanceUpdatedEvent.HyperdriveGovernanceUpdatedEventArgs(
                    hyperdriveGovernance=abi_event.args["hyperdriveGovernance"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[HyperdriveGovernanceUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            HyperdriveGovernanceUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=HyperdriveGovernanceUpdatedEvent.HyperdriveGovernanceUpdatedEventArgs(
                    hyperdriveGovernance=abi_event.args["hyperdriveGovernance"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestInitializeContractEvent(ContractEvent):
    """ContractEvent for Initialize."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[InitializeEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[InitializeEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            InitializeEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=InitializeEvent.InitializeEventArgs(
                    provider=abi_event.args["provider"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    apr=abi_event.args["apr"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLinkerCodeHashUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerCodeHashUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LinkerCodeHashUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LinkerCodeHashUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LinkerCodeHashUpdatedEvent.LinkerCodeHashUpdatedEventArgs(
                    newLinkerCodeHash=abi_event.args["newLinkerCodeHash"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LinkerCodeHashUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LinkerCodeHashUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LinkerCodeHashUpdatedEvent.LinkerCodeHashUpdatedEventArgs(
                    newLinkerCodeHash=abi_event.args["newLinkerCodeHash"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLinkerFactoryUpdatedContractEvent(ContractEvent):
    """ContractEvent for LinkerFactoryUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LinkerFactoryUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LinkerFactoryUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LinkerFactoryUpdatedEvent.LinkerFactoryUpdatedEventArgs(
                    newLinkerFactory=abi_event.args["newLinkerFactory"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LinkerFactoryUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LinkerFactoryUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LinkerFactoryUpdatedEvent.LinkerFactoryUpdatedEventArgs(
                    newLinkerFactory=abi_event.args["newLinkerFactory"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMaxCheckpointDurationUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for MaxCheckpointDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxCheckpointDurationUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxCheckpointDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxCheckpointDurationUpdatedEvent.MaxCheckpointDurationUpdatedEventArgs(
                    newMaxCheckpointDuration=abi_event.args[
                        "newMaxCheckpointDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxCheckpointDurationUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxCheckpointDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxCheckpointDurationUpdatedEvent.MaxCheckpointDurationUpdatedEventArgs(
                    newMaxCheckpointDuration=abi_event.args[
                        "newMaxCheckpointDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMaxCircuitBreakerDeltaUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for MaxCircuitBreakerDeltaUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxCircuitBreakerDeltaUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxCircuitBreakerDeltaUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxCircuitBreakerDeltaUpdatedEvent.MaxCircuitBreakerDeltaUpdatedEventArgs(
                    newMaxCircuitBreakerDelta=abi_event.args[
                        "newMaxCircuitBreakerDelta"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxCircuitBreakerDeltaUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxCircuitBreakerDeltaUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxCircuitBreakerDeltaUpdatedEvent.MaxCircuitBreakerDeltaUpdatedEventArgs(
                    newMaxCircuitBreakerDelta=abi_event.args[
                        "newMaxCircuitBreakerDelta"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMaxFeesUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxFeesUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxFeesUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxFeesUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxFeesUpdatedEvent.MaxFeesUpdatedEventArgs(
                    newMaxFees=abi_event.args["newMaxFees"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxFeesUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxFeesUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxFeesUpdatedEvent.MaxFeesUpdatedEventArgs(
                    newMaxFees=abi_event.args["newMaxFees"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMaxFixedAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxFixedAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxFixedAPRUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxFixedAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxFixedAPRUpdatedEvent.MaxFixedAPRUpdatedEventArgs(
                    newMaxFixedAPR=abi_event.args["newMaxFixedAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxFixedAPRUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxFixedAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxFixedAPRUpdatedEvent.MaxFixedAPRUpdatedEventArgs(
                    newMaxFixedAPR=abi_event.args["newMaxFixedAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMaxPositionDurationUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for MaxPositionDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxPositionDurationUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxPositionDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxPositionDurationUpdatedEvent.MaxPositionDurationUpdatedEventArgs(
                    newMaxPositionDuration=abi_event.args[
                        "newMaxPositionDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxPositionDurationUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxPositionDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxPositionDurationUpdatedEvent.MaxPositionDurationUpdatedEventArgs(
                    newMaxPositionDuration=abi_event.args[
                        "newMaxPositionDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMaxTimeStretchAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MaxTimeStretchAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MaxTimeStretchAPRUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxTimeStretchAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxTimeStretchAPRUpdatedEvent.MaxTimeStretchAPRUpdatedEventArgs(
                    newMaxTimeStretchAPR=abi_event.args["newMaxTimeStretchAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MaxTimeStretchAPRUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MaxTimeStretchAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MaxTimeStretchAPRUpdatedEvent.MaxTimeStretchAPRUpdatedEventArgs(
                    newMaxTimeStretchAPR=abi_event.args["newMaxTimeStretchAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMinCheckpointDurationUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for MinCheckpointDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinCheckpointDurationUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinCheckpointDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinCheckpointDurationUpdatedEvent.MinCheckpointDurationUpdatedEventArgs(
                    newMinCheckpointDuration=abi_event.args[
                        "newMinCheckpointDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinCheckpointDurationUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinCheckpointDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinCheckpointDurationUpdatedEvent.MinCheckpointDurationUpdatedEventArgs(
                    newMinCheckpointDuration=abi_event.args[
                        "newMinCheckpointDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMinCircuitBreakerDeltaUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for MinCircuitBreakerDeltaUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinCircuitBreakerDeltaUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinCircuitBreakerDeltaUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinCircuitBreakerDeltaUpdatedEvent.MinCircuitBreakerDeltaUpdatedEventArgs(
                    newMinCircuitBreakerDelta=abi_event.args[
                        "newMinCircuitBreakerDelta"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinCircuitBreakerDeltaUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinCircuitBreakerDeltaUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinCircuitBreakerDeltaUpdatedEvent.MinCircuitBreakerDeltaUpdatedEventArgs(
                    newMinCircuitBreakerDelta=abi_event.args[
                        "newMinCircuitBreakerDelta"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMinFeesUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinFeesUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinFeesUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinFeesUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinFeesUpdatedEvent.MinFeesUpdatedEventArgs(
                    newMinFees=abi_event.args["newMinFees"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinFeesUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinFeesUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinFeesUpdatedEvent.MinFeesUpdatedEventArgs(
                    newMinFees=abi_event.args["newMinFees"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMinFixedAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinFixedAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinFixedAPRUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinFixedAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinFixedAPRUpdatedEvent.MinFixedAPRUpdatedEventArgs(
                    newMinFixedAPR=abi_event.args["newMinFixedAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinFixedAPRUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinFixedAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinFixedAPRUpdatedEvent.MinFixedAPRUpdatedEventArgs(
                    newMinFixedAPR=abi_event.args["newMinFixedAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMinPositionDurationUpdatedContractEvent(
    ContractEvent
):
    """ContractEvent for MinPositionDurationUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinPositionDurationUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinPositionDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinPositionDurationUpdatedEvent.MinPositionDurationUpdatedEventArgs(
                    newMinPositionDuration=abi_event.args[
                        "newMinPositionDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinPositionDurationUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinPositionDurationUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinPositionDurationUpdatedEvent.MinPositionDurationUpdatedEventArgs(
                    newMinPositionDuration=abi_event.args[
                        "newMinPositionDuration"
                    ],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestMinTimeStretchAPRUpdatedContractEvent(ContractEvent):
    """ContractEvent for MinTimeStretchAPRUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[MinTimeStretchAPRUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinTimeStretchAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinTimeStretchAPRUpdatedEvent.MinTimeStretchAPRUpdatedEventArgs(
                    newMinTimeStretchAPR=abi_event.args["newMinTimeStretchAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[MinTimeStretchAPRUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            MinTimeStretchAPRUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=MinTimeStretchAPRUpdatedEvent.MinTimeStretchAPRUpdatedEventArgs(
                    newMinTimeStretchAPR=abi_event.args["newMinTimeStretchAPR"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestOpenLongContractEvent(ContractEvent):
    """ContractEvent for OpenLong."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenLongEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenLongEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenLongEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenLongEvent.OpenLongEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestOpenShortContractEvent(ContractEvent):
    """ContractEvent for OpenShort."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OpenShortEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OpenShortEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OpenShortEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OpenShortEvent.OpenShortEventArgs(
                    trader=abi_event.args["trader"],
                    assetId=abi_event.args["assetId"],
                    maturityTime=abi_event.args["maturityTime"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    baseProceeds=abi_event.args["baseProceeds"],
                    bondAmount=abi_event.args["bondAmount"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestPauseStatusUpdatedContractEvent(ContractEvent):
    """ContractEvent for PauseStatusUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[PauseStatusUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            PauseStatusUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=PauseStatusUpdatedEvent.PauseStatusUpdatedEventArgs(
                    isPaused=abi_event.args["isPaused"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestRedeemWithdrawalSharesContractEvent(ContractEvent):
    """ContractEvent for RedeemWithdrawalShares."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RedeemWithdrawalSharesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RedeemWithdrawalSharesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RedeemWithdrawalSharesEvent.RedeemWithdrawalSharesEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestRemoveLiquidityContractEvent(ContractEvent):
    """ContractEvent for RemoveLiquidity."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[RemoveLiquidityEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            RemoveLiquidityEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=RemoveLiquidityEvent.RemoveLiquidityEventArgs(
                    provider=abi_event.args["provider"],
                    destination=abi_event.args["destination"],
                    lpAmount=abi_event.args["lpAmount"],
                    amount=abi_event.args["amount"],
                    vaultSharePrice=abi_event.args["vaultSharePrice"],
                    asBase=abi_event.args["asBase"],
                    withdrawalShareAmount=abi_event.args[
                        "withdrawalShareAmount"
                    ],
                    lpSharePrice=abi_event.args["lpSharePrice"],
                    extraData=abi_event.args["extraData"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestSweepContractEvent(ContractEvent):
    """ContractEvent for Sweep."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepEvent.SweepEventArgs(
                    collector=abi_event.args["collector"],
                    target=abi_event.args["target"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestSweepCollectorUpdatedContractEvent(ContractEvent):
    """ContractEvent for SweepCollectorUpdated."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[SweepCollectorUpdatedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepCollectorUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepCollectorUpdatedEvent.SweepCollectorUpdatedEventArgs(
                    sweepCollector=abi_event.args["sweepCollector"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[SweepCollectorUpdatedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            SweepCollectorUpdatedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=SweepCollectorUpdatedEvent.SweepCollectorUpdatedEventArgs(
                    sweepCollector=abi_event.args["sweepCollector"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestTransferSingleContractEvent(ContractEvent):
    """ContractEvent for TransferSingle."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[TransferSingleEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            TransferSingleEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=TransferSingleEvent.TransferSingleEventArgs(
                    operator=abi_event.args["operator"],
                    _from=abi_event.args["_from"],
                    to=abi_event.args["to"],
                    _id=abi_event.args["_id"],
                    value=abi_event.args["value"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLogContractEvent(ContractEvent):
    """ContractEvent for log."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogEvent.LogEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_addressContractEvent(ContractEvent):
    """ContractEvent for log_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_addressEvent.Log_addressEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_arrayContractEvent(ContractEvent):
    """ContractEvent for log_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_arrayEvent.Log_arrayEventArgs(
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_bytesContractEvent(ContractEvent):
    """ContractEvent for log_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytesEvent.Log_bytesEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_bytes32Event.Log_bytes32EventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_intContractEvent(ContractEvent):
    """ContractEvent for log_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_intEvent.Log_intEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_named_addressContractEvent(ContractEvent):
    """ContractEvent for log_named_address."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_addressEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_addressEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_addressEvent.Log_named_addressEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_named_arrayContractEvent(ContractEvent):
    """ContractEvent for log_named_array."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_arrayEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_arrayEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_arrayEvent.Log_named_arrayEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_named_bytesContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytesEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytesEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytesEvent.Log_named_bytesEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_named_bytes32ContractEvent(ContractEvent):
    """ContractEvent for log_named_bytes32."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_bytes32Event]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_bytes32Event(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_bytes32Event.Log_named_bytes32EventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_named_decimal_intContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_intEvent.Log_named_decimal_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_named_decimal_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_decimal_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_decimal_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_decimal_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_decimal_uintEvent.Log_named_decimal_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                    decimals=abi_event.args["decimals"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_named_intContractEvent(ContractEvent):
    """ContractEvent for log_named_int."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_intEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_intEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_intEvent.Log_named_intEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_named_stringContractEvent(ContractEvent):
    """ContractEvent for log_named_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_stringEvent.Log_named_stringEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_named_uintContractEvent(ContractEvent):
    """ContractEvent for log_named_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_named_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_named_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_named_uintEvent.Log_named_uintEventArgs(
                    key=abi_event.args["key"],
                    val=abi_event.args["val"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_stringContractEvent(ContractEvent):
    """ContractEvent for log_string."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_stringEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_stringEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_stringEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_stringEvent.Log_stringEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLog_uintContractEvent(ContractEvent):
    """ContractEvent for log_uint."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[Log_uintEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[Log_uintEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            Log_uintEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=Log_uintEvent.Log_uintEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestLogsContractEvent(ContractEvent):
    """ContractEvent for logs."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[LogsEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[LogsEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            LogsEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=LogsEvent.LogsEventArgs(
                    arg1=abi_event.args["arg1"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class HyperdriveFactoryTestContractEvents(ContractEvents):
    """ContractEvents for the HyperdriveFactoryTest contract."""

    AddLiquidity: HyperdriveFactoryTestAddLiquidityContractEvent

    Approval: HyperdriveFactoryTestApprovalContractEvent

    ApprovalForAll: HyperdriveFactoryTestApprovalForAllContractEvent

    CheckpointDurationResolutionUpdated: (
        HyperdriveFactoryTestCheckpointDurationResolutionUpdatedContractEvent
    )

    CloseLong: HyperdriveFactoryTestCloseLongContractEvent

    CloseShort: HyperdriveFactoryTestCloseShortContractEvent

    CollectGovernanceFee: HyperdriveFactoryTestCollectGovernanceFeeContractEvent

    CreateCheckpoint: HyperdriveFactoryTestCreateCheckpointContractEvent

    DefaultPausersUpdated: (
        HyperdriveFactoryTestDefaultPausersUpdatedContractEvent
    )

    Deployed: HyperdriveFactoryTestDeployedContractEvent

    DeployerCoordinatorAdded: (
        HyperdriveFactoryTestDeployerCoordinatorAddedContractEvent
    )

    DeployerCoordinatorManagerUpdated: (
        HyperdriveFactoryTestDeployerCoordinatorManagerUpdatedContractEvent
    )

    DeployerCoordinatorRemoved: (
        HyperdriveFactoryTestDeployerCoordinatorRemovedContractEvent
    )

    FeeCollectorUpdated: HyperdriveFactoryTestFeeCollectorUpdatedContractEvent

    GovernanceUpdated: HyperdriveFactoryTestGovernanceUpdatedContractEvent

    HyperdriveGovernanceUpdated: (
        HyperdriveFactoryTestHyperdriveGovernanceUpdatedContractEvent
    )

    Initialize: HyperdriveFactoryTestInitializeContractEvent

    LinkerCodeHashUpdated: (
        HyperdriveFactoryTestLinkerCodeHashUpdatedContractEvent
    )

    LinkerFactoryUpdated: HyperdriveFactoryTestLinkerFactoryUpdatedContractEvent

    MaxCheckpointDurationUpdated: (
        HyperdriveFactoryTestMaxCheckpointDurationUpdatedContractEvent
    )

    MaxCircuitBreakerDeltaUpdated: (
        HyperdriveFactoryTestMaxCircuitBreakerDeltaUpdatedContractEvent
    )

    MaxFeesUpdated: HyperdriveFactoryTestMaxFeesUpdatedContractEvent

    MaxFixedAPRUpdated: HyperdriveFactoryTestMaxFixedAPRUpdatedContractEvent

    MaxPositionDurationUpdated: (
        HyperdriveFactoryTestMaxPositionDurationUpdatedContractEvent
    )

    MaxTimeStretchAPRUpdated: (
        HyperdriveFactoryTestMaxTimeStretchAPRUpdatedContractEvent
    )

    MinCheckpointDurationUpdated: (
        HyperdriveFactoryTestMinCheckpointDurationUpdatedContractEvent
    )

    MinCircuitBreakerDeltaUpdated: (
        HyperdriveFactoryTestMinCircuitBreakerDeltaUpdatedContractEvent
    )

    MinFeesUpdated: HyperdriveFactoryTestMinFeesUpdatedContractEvent

    MinFixedAPRUpdated: HyperdriveFactoryTestMinFixedAPRUpdatedContractEvent

    MinPositionDurationUpdated: (
        HyperdriveFactoryTestMinPositionDurationUpdatedContractEvent
    )

    MinTimeStretchAPRUpdated: (
        HyperdriveFactoryTestMinTimeStretchAPRUpdatedContractEvent
    )

    OpenLong: HyperdriveFactoryTestOpenLongContractEvent

    OpenShort: HyperdriveFactoryTestOpenShortContractEvent

    PauseStatusUpdated: HyperdriveFactoryTestPauseStatusUpdatedContractEvent

    RedeemWithdrawalShares: (
        HyperdriveFactoryTestRedeemWithdrawalSharesContractEvent
    )

    RemoveLiquidity: HyperdriveFactoryTestRemoveLiquidityContractEvent

    Sweep: HyperdriveFactoryTestSweepContractEvent

    SweepCollectorUpdated: (
        HyperdriveFactoryTestSweepCollectorUpdatedContractEvent
    )

    TransferSingle: HyperdriveFactoryTestTransferSingleContractEvent

    log: HyperdriveFactoryTestLogContractEvent

    log_address: HyperdriveFactoryTestLog_addressContractEvent

    log_array: HyperdriveFactoryTestLog_arrayContractEvent

    log_bytes: HyperdriveFactoryTestLog_bytesContractEvent

    log_bytes32: HyperdriveFactoryTestLog_bytes32ContractEvent

    log_int: HyperdriveFactoryTestLog_intContractEvent

    log_named_address: HyperdriveFactoryTestLog_named_addressContractEvent

    log_named_array: HyperdriveFactoryTestLog_named_arrayContractEvent

    log_named_bytes: HyperdriveFactoryTestLog_named_bytesContractEvent

    log_named_bytes32: HyperdriveFactoryTestLog_named_bytes32ContractEvent

    log_named_decimal_int: (
        HyperdriveFactoryTestLog_named_decimal_intContractEvent
    )

    log_named_decimal_uint: (
        HyperdriveFactoryTestLog_named_decimal_uintContractEvent
    )

    log_named_int: HyperdriveFactoryTestLog_named_intContractEvent

    log_named_string: HyperdriveFactoryTestLog_named_stringContractEvent

    log_named_uint: HyperdriveFactoryTestLog_named_uintContractEvent

    log_string: HyperdriveFactoryTestLog_stringContractEvent

    log_uint: HyperdriveFactoryTestLog_uintContractEvent

    logs: HyperdriveFactoryTestLogsContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.AddLiquidity = (
            HyperdriveFactoryTestAddLiquidityContractEvent.factory(
                "AddLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="AddLiquidity",
            )
        )
        self.Approval = HyperdriveFactoryTestApprovalContractEvent.factory(
            "Approval",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="Approval",
        )
        self.ApprovalForAll = (
            HyperdriveFactoryTestApprovalForAllContractEvent.factory(
                "ApprovalForAll",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="ApprovalForAll",
            )
        )
        self.CheckpointDurationResolutionUpdated = HyperdriveFactoryTestCheckpointDurationResolutionUpdatedContractEvent.factory(
            "CheckpointDurationResolutionUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="CheckpointDurationResolutionUpdated",
        )
        self.CloseLong = HyperdriveFactoryTestCloseLongContractEvent.factory(
            "CloseLong",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="CloseLong",
        )
        self.CloseShort = HyperdriveFactoryTestCloseShortContractEvent.factory(
            "CloseShort",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="CloseShort",
        )
        self.CollectGovernanceFee = (
            HyperdriveFactoryTestCollectGovernanceFeeContractEvent.factory(
                "CollectGovernanceFee",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CollectGovernanceFee",
            )
        )
        self.CreateCheckpoint = (
            HyperdriveFactoryTestCreateCheckpointContractEvent.factory(
                "CreateCheckpoint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="CreateCheckpoint",
            )
        )
        self.DefaultPausersUpdated = (
            HyperdriveFactoryTestDefaultPausersUpdatedContractEvent.factory(
                "DefaultPausersUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DefaultPausersUpdated",
            )
        )
        self.Deployed = HyperdriveFactoryTestDeployedContractEvent.factory(
            "Deployed",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="Deployed",
        )
        self.DeployerCoordinatorAdded = (
            HyperdriveFactoryTestDeployerCoordinatorAddedContractEvent.factory(
                "DeployerCoordinatorAdded",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="DeployerCoordinatorAdded",
            )
        )
        self.DeployerCoordinatorManagerUpdated = HyperdriveFactoryTestDeployerCoordinatorManagerUpdatedContractEvent.factory(
            "DeployerCoordinatorManagerUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="DeployerCoordinatorManagerUpdated",
        )
        self.DeployerCoordinatorRemoved = HyperdriveFactoryTestDeployerCoordinatorRemovedContractEvent.factory(
            "DeployerCoordinatorRemoved",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="DeployerCoordinatorRemoved",
        )
        self.FeeCollectorUpdated = (
            HyperdriveFactoryTestFeeCollectorUpdatedContractEvent.factory(
                "FeeCollectorUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="FeeCollectorUpdated",
            )
        )
        self.GovernanceUpdated = (
            HyperdriveFactoryTestGovernanceUpdatedContractEvent.factory(
                "GovernanceUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="GovernanceUpdated",
            )
        )
        self.HyperdriveGovernanceUpdated = HyperdriveFactoryTestHyperdriveGovernanceUpdatedContractEvent.factory(
            "HyperdriveGovernanceUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="HyperdriveGovernanceUpdated",
        )
        self.Initialize = HyperdriveFactoryTestInitializeContractEvent.factory(
            "Initialize",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="Initialize",
        )
        self.LinkerCodeHashUpdated = (
            HyperdriveFactoryTestLinkerCodeHashUpdatedContractEvent.factory(
                "LinkerCodeHashUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="LinkerCodeHashUpdated",
            )
        )
        self.LinkerFactoryUpdated = (
            HyperdriveFactoryTestLinkerFactoryUpdatedContractEvent.factory(
                "LinkerFactoryUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="LinkerFactoryUpdated",
            )
        )
        self.MaxCheckpointDurationUpdated = HyperdriveFactoryTestMaxCheckpointDurationUpdatedContractEvent.factory(
            "MaxCheckpointDurationUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="MaxCheckpointDurationUpdated",
        )
        self.MaxCircuitBreakerDeltaUpdated = HyperdriveFactoryTestMaxCircuitBreakerDeltaUpdatedContractEvent.factory(
            "MaxCircuitBreakerDeltaUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="MaxCircuitBreakerDeltaUpdated",
        )
        self.MaxFeesUpdated = (
            HyperdriveFactoryTestMaxFeesUpdatedContractEvent.factory(
                "MaxFeesUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxFeesUpdated",
            )
        )
        self.MaxFixedAPRUpdated = (
            HyperdriveFactoryTestMaxFixedAPRUpdatedContractEvent.factory(
                "MaxFixedAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxFixedAPRUpdated",
            )
        )
        self.MaxPositionDurationUpdated = HyperdriveFactoryTestMaxPositionDurationUpdatedContractEvent.factory(
            "MaxPositionDurationUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="MaxPositionDurationUpdated",
        )
        self.MaxTimeStretchAPRUpdated = (
            HyperdriveFactoryTestMaxTimeStretchAPRUpdatedContractEvent.factory(
                "MaxTimeStretchAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MaxTimeStretchAPRUpdated",
            )
        )
        self.MinCheckpointDurationUpdated = HyperdriveFactoryTestMinCheckpointDurationUpdatedContractEvent.factory(
            "MinCheckpointDurationUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="MinCheckpointDurationUpdated",
        )
        self.MinCircuitBreakerDeltaUpdated = HyperdriveFactoryTestMinCircuitBreakerDeltaUpdatedContractEvent.factory(
            "MinCircuitBreakerDeltaUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="MinCircuitBreakerDeltaUpdated",
        )
        self.MinFeesUpdated = (
            HyperdriveFactoryTestMinFeesUpdatedContractEvent.factory(
                "MinFeesUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinFeesUpdated",
            )
        )
        self.MinFixedAPRUpdated = (
            HyperdriveFactoryTestMinFixedAPRUpdatedContractEvent.factory(
                "MinFixedAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinFixedAPRUpdated",
            )
        )
        self.MinPositionDurationUpdated = HyperdriveFactoryTestMinPositionDurationUpdatedContractEvent.factory(
            "MinPositionDurationUpdated",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="MinPositionDurationUpdated",
        )
        self.MinTimeStretchAPRUpdated = (
            HyperdriveFactoryTestMinTimeStretchAPRUpdatedContractEvent.factory(
                "MinTimeStretchAPRUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="MinTimeStretchAPRUpdated",
            )
        )
        self.OpenLong = HyperdriveFactoryTestOpenLongContractEvent.factory(
            "OpenLong",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="OpenLong",
        )
        self.OpenShort = HyperdriveFactoryTestOpenShortContractEvent.factory(
            "OpenShort",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="OpenShort",
        )
        self.PauseStatusUpdated = (
            HyperdriveFactoryTestPauseStatusUpdatedContractEvent.factory(
                "PauseStatusUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="PauseStatusUpdated",
            )
        )
        self.RedeemWithdrawalShares = (
            HyperdriveFactoryTestRedeemWithdrawalSharesContractEvent.factory(
                "RedeemWithdrawalShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RedeemWithdrawalShares",
            )
        )
        self.RemoveLiquidity = (
            HyperdriveFactoryTestRemoveLiquidityContractEvent.factory(
                "RemoveLiquidity",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="RemoveLiquidity",
            )
        )
        self.Sweep = HyperdriveFactoryTestSweepContractEvent.factory(
            "Sweep",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="Sweep",
        )
        self.SweepCollectorUpdated = (
            HyperdriveFactoryTestSweepCollectorUpdatedContractEvent.factory(
                "SweepCollectorUpdated",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="SweepCollectorUpdated",
            )
        )
        self.TransferSingle = (
            HyperdriveFactoryTestTransferSingleContractEvent.factory(
                "TransferSingle",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="TransferSingle",
            )
        )
        self.log = HyperdriveFactoryTestLogContractEvent.factory(
            "log", w3=w3, contract_abi=abi, address=address, event_name="log"
        )
        self.log_address = (
            HyperdriveFactoryTestLog_addressContractEvent.factory(
                "log_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_address",
            )
        )
        self.log_array = HyperdriveFactoryTestLog_arrayContractEvent.factory(
            "log_array",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_array",
        )
        self.log_bytes = HyperdriveFactoryTestLog_bytesContractEvent.factory(
            "log_bytes",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_bytes",
        )
        self.log_bytes32 = (
            HyperdriveFactoryTestLog_bytes32ContractEvent.factory(
                "log_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_bytes32",
            )
        )
        self.log_int = HyperdriveFactoryTestLog_intContractEvent.factory(
            "log_int",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_int",
        )
        self.log_named_address = (
            HyperdriveFactoryTestLog_named_addressContractEvent.factory(
                "log_named_address",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_address",
            )
        )
        self.log_named_array = (
            HyperdriveFactoryTestLog_named_arrayContractEvent.factory(
                "log_named_array",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_array",
            )
        )
        self.log_named_bytes = (
            HyperdriveFactoryTestLog_named_bytesContractEvent.factory(
                "log_named_bytes",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes",
            )
        )
        self.log_named_bytes32 = (
            HyperdriveFactoryTestLog_named_bytes32ContractEvent.factory(
                "log_named_bytes32",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_bytes32",
            )
        )
        self.log_named_decimal_int = (
            HyperdriveFactoryTestLog_named_decimal_intContractEvent.factory(
                "log_named_decimal_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_int",
            )
        )
        self.log_named_decimal_uint = (
            HyperdriveFactoryTestLog_named_decimal_uintContractEvent.factory(
                "log_named_decimal_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_decimal_uint",
            )
        )
        self.log_named_int = (
            HyperdriveFactoryTestLog_named_intContractEvent.factory(
                "log_named_int",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_int",
            )
        )
        self.log_named_string = (
            HyperdriveFactoryTestLog_named_stringContractEvent.factory(
                "log_named_string",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_string",
            )
        )
        self.log_named_uint = (
            HyperdriveFactoryTestLog_named_uintContractEvent.factory(
                "log_named_uint",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="log_named_uint",
            )
        )
        self.log_string = HyperdriveFactoryTestLog_stringContractEvent.factory(
            "log_string",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_string",
        )
        self.log_uint = HyperdriveFactoryTestLog_uintContractEvent.factory(
            "log_uint",
            w3=w3,
            contract_abi=abi,
            address=address,
            event_name="log_uint",
        )
        self.logs = HyperdriveFactoryTestLogsContractEvent.factory(
            "logs", w3=w3, contract_abi=abi, address=address, event_name="logs"
        )


class HyperdriveFactoryTestContract(Contract):
    """A web3.py Contract class for the HyperdriveFactoryTest contract."""

    abi: ABI = hyperdrivefactorytest_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611e30929190613745565b6040805180830381865af4158015611e4a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e6e91906137ba565b91509150611e8c611e7e82611321565b611e87906137dc565b6129a4565b925082611ea1575f965050505050505061131b565b611eaa82611a3f565b600780545f90611ec49084906001600160801b03166135ea565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611ef181611a3f565b60078054601090611f13908490600160801b90046001600160801b03166135ea565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611f6e87612b38565b6040518263ffffffff1660e01b8152600401611f8a91906137f6565b6040805180830381865af4158015611fa4573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611fc89190613805565b9150915080611fdd57505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161204291613415565b61204c91906135b7565b9050805f0361206257505f958695509350505050565b5f808711612070575f61207b565b61207b848884612542565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff8111156120ac576120ac613833565b6040519080825280601f01601f1916602001820160405280156120d6576020820181803683370190505b5090505f808751602089018b8e8ef191503d9250868311156120f6578692505b828152825f602083013e90999098509650505050505050565b5f806121196105ab565b9050808311612128575f612132565b61213281846135b7565b915061157d827f0000000000000000000000000000000000000000000000000000000000000000612758565b5f808061217e61217688670de0b6b3a76400006135b7565b899087612c72565b905086156121c057612190888861252e565b91506121b18a8a846121aa8a670de0b6b3a76400006135b7565b8989612c95565b92506121bd8382613415565b90505b9750975097945050505050565b5f6121ea6121e384670de0b6b3a76400006135b7565b839061252e565b61157d90670de0b6b3a76400006135b7565b5f806122328561220a611a09565b6122149190613415565b600254610fa9908790600160801b90046001600160801b03166135b7565b909210949350505050565b5f808080612293878661228c8b61228661225f8c670de0b6b3a76400006135b7565b7f00000000000000000000000000000000000000000000000000000000000000009061252e565b9061252e565b9190612c72565b93506122bf847f0000000000000000000000000000000000000000000000000000000000000000611584565b91505f6122df6122d789670de0b6b3a76400006135b7565b8a9088612c72565b905061230b817f000000000000000000000000000000000000000000000000000000000000000061252e565b9350612337847f0000000000000000000000000000000000000000000000000000000000000000611584565b6123419084613415565b915050945094509450949050565b5f805f805f80888810156123bb5786156123715761236e8d898b612542565b9c505b61237c8c898b612542565b9b506123878b611321565b6123908d611321565b61239a9190613428565b90506123a78b898b612542565b9a506123b48a898b612542565b99506123da565b6123c48b611321565b6123cd8d611321565b6123d79190613428565b90505b9b9c9a9b999a975050505050505050565b5f825f036123fa575084612488565b811561244c5761242b61240d8487613415565b6124178587611584565b612421888a611584565b611cf79190613415565b90505f6124388588611a68565b905080821015612446578091505b50612488565b82850361245a57505f612488565b61248561246784876135b7565b612471858761252e565b61247b888a611584565b611cf791906135b7565b90505b95945050505050565b5f60016001607f1b03198212806124ae575060016001607f1b0382135b1561134a5760405163a5353be560e01b815260040160405180910390fd5b5f806124d8845f612cb7565b6124e2845f612cb7565b6124ec9190613428565b90505f811315612507576125008186613415565b9450612525565b5f81121561252557612518816137dc565b61252290866135b7565b94505b50929392505050565b5f61157d8383670de0b6b3a7640000612c72565b5f825f190484118302158202612556575f80fd5b5091020490565b604051631920845160e01b8152600481018290525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906319208451906024016119b5565b5f60405163350b944160e11b815260040160405180910390fd5b604051638fcb4e5b60e01b81526001600160a01b038481166004830152602482018690527f00000000000000000000000000000000000000000000000000000000000000001690638fcb4e5b906044016020604051808303815f875af1158015612632573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906126569190613689565b5050505050565b5f808061267d61267588670de0b6b3a76400006135b7565b899087612542565b905086156121c05761268f8888611584565b91506121b18a8a846126a98a670de0b6b3a76400006135b7565b8989612ccc565b5f806126bc8484612cdc565b9092509050806126ce576126ce6113ec565b5092915050565b5f815f036126ec5750670de0b6b3a764000061131b565b825f036126fa57505f61131b565b5f61270483611321565b90505f61271861271386611321565b612d17565b905081810261272f670de0b6b3a764000082613847565b905061273a81612f3c565b9695505050505050565b5f61157d83670de0b6b3a764000084612c72565b5f61157d83670de0b6b3a764000084612542565b5f60016001607f1b0382111561134a5760405163a5353be560e01b815260040160405180910390fd5b6003545f9081906127af906001600160801b031684612744565b90506127db7f000000000000000000000000000000000000000000000000000000000000000082613415565b6002546001600160801b03161115611a76576002547f0000000000000000000000000000000000000000000000000000000000000000906128269083906001600160801b03166135b7565b61157d91906135b7565b612838613308565b5f8061284384612b38565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b815260040161287d91906137f6565b6040805180830381865af4158015612897573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128bb9190613805565b93509050826128cf57505f915061299c9050565b5f6128f56128f084610160015185610140015161158490919063ffffffff16565b611321565b6129156128f085610120015186610100015161252e90919063ffffffff16565b61291f9190613428565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016120b89291906138f6565b6040805180830381865af41580156120d2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120f6919061396b565b9150915061211461210682611b9f565b61210f9061398d565b612b1b565b925082612129575f9650505050505050610669565b612132826118f4565b600780545f9061214c9084906001600160801b0316613755565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550612179816118f4565b6007805460109061219b908490600160801b90046001600160801b0316613755565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e6121f687612caf565b6040518263ffffffff1660e01b815260040161221291906139a7565b6040805180830381865af415801561222c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061225091906139b6565b915091508061226557505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916122ca916135c6565b6122d491906136db565b9050805f036122ea57505f958695509350505050565b5f8087116122f8575f612303565b612303848884611885565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff811115612334576123346139e4565b6040519080825280601f01601f19166020018201604052801561235e576020820181803683370190505b5090505f808751602089018b8e8ef191503d92508683111561237e578692505b828152825f602083013e90999098509650505050505050565b5f6123b78787876123b088670de0b6b3a76400006136db565b8787612de9565b979650505050505050565b5f6114e36124026123db84670de0b6b3a76400006136db565b611408670de0b6b3a76400006123f1818a61141f565b6123fb91906136db565b8790612637565b61241490670de0b6b3a76400006135c6565b611d5084670de0b6b3a76400006136db565b5f8061245c856124346118b5565b61243e91906135c6565b600254610e83908790600160801b90046001600160801b03166136db565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f805f805f612490898789612e0b565b909250905061249f82896136db565b97505f6124ad82888a611885565b90506124b9818b6136db565b9a989950979650505050505050565b5f825f036124d75750846118eb565b8115612529576125086124ea84876135c6565b6124f48587610652565b6124fe888a610652565b611d5091906135c6565b90505f6125158588611921565b905080821015612523578091505b506118eb565b82850361253757505f6118eb565b61256261254484876136db565b61254e8587612637565b612558888a610652565b611d5091906136db565b9695505050505050565b5f612591600b5f61257e6002866111b2565b81526020019081526020015f2054611b9f565b6125a2600b5f61257e6001876111b2565b6106699190613775565b5f6125d77f000000000000000000000000000000000000000000000000000000000000000083612637565b6003546125ed91906001600160801b03166135c6565b600254612603906001600160801b031684610652565b101592915050565b5f610669826004611fe0565b5f6123b787878761263088670de0b6b3a76400006136db565b8787612e8a565b5f6106668383670de0b6b3a764000061278c565b5f80808061269b87866126948b61140861266d8c670de0b6b3a76400006136db565b7f000000000000000000000000000000000000000000000000000000000000000090612637565b919061278c565b93506126c7847f0000000000000000000000000000000000000000000000000000000000000000610652565b91505f6126e76126df89670de0b6b3a76400006136db565b8a908861278c565b9050612713817f0000000000000000000000000000000000000000000000000000000000000000612637565b935061273f847f0000000000000000000000000000000000000000000000000000000000000000610652565b61274990846135c6565b915050945094509450949050565b5f8183116127655781610666565b5090919050565b5f806127838461277d8a888a61278c565b9061141f565b9050611d638884865b5f825f1904841183021582026127a0575f80fd5b50910281810615159190040190565b5f61066683670de0b6b3a764000084611885565b5f806127cf8484612e9a565b9092509050806127e1576127e1612467565b5092915050565b5f815f036127ff5750670de0b6b3a7640000610669565b825f0361280d57505f610669565b5f61281783611b9f565b90505f61282b61282686611b9f565b612ed2565b9050818102612842670de0b6b3a7640000826139f8565b9050612562816130f7565b5f60016001607f1b0382111561191d5760405163a5353be560e01b815260040160405180910390fd5b5f60016001607f1b0319821280612893575060016001607f1b0382135b1561191d5760405163a5353be560e01b815260040160405180910390fd5b5f806128bd845f613289565b6128c7845f613289565b6128d19190613775565b90505f8113156128ec576128e581866135c6565b945061290a565b5f81121561290a576128fd8161398d565b61290790866136db565b94505b50929392505050565b6003545f90819061292d906001600160801b03168461141f565b90506129597f0000000000000000000000000000000000000000000000000000000000000000826135c6565b6002546001600160801b0316111561192f576002547f0000000000000000000000000000000000000000000000000000000000000000906129a49083906001600160801b03166136db565b6114e691906136db565b6129b66134b9565b5f806129c184612caf565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b81526004016129fb91906139a7565b6040805180830381865af4158015612a15573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612a3991906139b6565b9350905082612a4d57505f91506117e39050565b5f612a73612a6e84610160015185610140015161065290919063ffffffff16565b611b9f565b612a93612a6e85610120015186610100015161263790919063ffffffff16565b612a9d9190613775565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612bd1573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612bf59190613a24565b935093509350935080612c1057505f98975050505050505050565b868414612c4157612c20846118f4565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612c7257612c5183612876565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612ca057612c82826118f4565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612cb7613503565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612daf9116613297565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612de192900416613297565b905292915050565b5f80612df988888888888861330b565b909250905080611d7d57611d7d612467565b5f80612e548561140885817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612e4a818c61141f565b61140891906136db565b9150612e80827f0000000000000000000000000000000000000000000000000000000000000000610652565b9050935093915050565b5f80612df98888888888886133cf565b5f805f83612ea786611b9f565b612eb19190613775565b90505f811215612ec7575f80925092505061064b565b946001945092505050565b5f808213612ef35760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f19820190612f769084901c611b9f565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e19821361311057505f919050565b680755bf798b4a1bf1e58212613139576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061256274029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611b9f565b5f8183136127655781610666565b5f80670de0b6b3a76400006132aa61066f565b6132b491906137af565b90508083116132c3575f6132cd565b6132cd81846136db565b91506114e6613304670de0b6b3a76400007f00000000000000000000000000000000000000000000000000000000000000006137af565b83906127af565b5f805f61331b898988888861348b565b9050613335866118e561332e8a8d6135c6565b8790610652565b9850613342858a86611885565b985088811015613358575f8092509250506133c4565b888103670de0b6b3a7640000811061338d5761338661337f670de0b6b3a76400008961141f565b82906127e8565b90506133a5565b6133a261337f670de0b6b3a7640000896127af565b90505b808910156133ba575f809350935050506133c4565b8803925060019150505b965096945050505050565b5f805f6133df898988888861348b565b90506133ef866118e5898b6135c6565b975087811015613405575f8092509250506133c4565b87810361341381868861278c565b9050670de0b6b3a764000081106134405761343961337f670de0b6b3a76400008961141f565b9050613458565b61345561337f670de0b6b3a7640000896127af565b90505b613462818661141f565b9050808a1015613479575f809350935050506133c4565b90980398600198509650505050505050565b5f61349685856127e8565b6134af6134a7866118e5868b612637565b85908561278c565b61256291906135c6565b6040518061012001604052806134cd613503565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f806080858703121561356b575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613596575f80fd5b8501606081880312156135a7575f80fd5b939692955090935050565b634e487b7160e01b5f52601160045260245ffd5b80820180821115610669576106696135b2565b6001600160a01b038116811461057e575f80fd5b5f602082840312156135fd575f80fd5b81356114e6816135d9565b801515811461057e575f80fd5b5f60208284031215613625575f80fd5b81356114e681613608565b5f808335601e19843603018112613645575f80fd5b83018035915067ffffffffffffffff82111561365f575f80fd5b60200191503681900382131561064b575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201525f6136ce60c083018486613673565b9998505050505050505050565b81810381811115610669576106696135b2565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f61372760e083018486613673565b9a9950505050505050505050565b6001600160701b038181168382160190808211156127e1576127e16135b2565b6001600160801b038181168382160190808211156127e1576127e16135b2565b8181035f8312801583831316838312821617156127e1576127e16135b2565b5f602082840312156137a4575f80fd5b81516114e6816135d9565b8082028115828204841417610669576106696135b2565b6001600160801b038281168282160390808211156127e1576127e16135b2565b8082018281125f831280158216821582161715613805576138056135b2565b505092915050565b5f6020828403121561381d575f80fd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b5f8261384657613846613824565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715610669576106696135b2565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a082019050613909828551613878565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f806040838503121561397c575f80fd5b505080516020909101519092909150565b5f600160ff1b82016139a1576139a16135b2565b505f0390565b61018081016106698284613878565b5f80604083850312156139c7575f80fd5b8251915060208301516139d981613608565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f82613a0657613a06613824565b600160ff1b82145f1984141615613a1f57613a1f6135b2565b500590565b5f805f8060808587031215613a37575f80fd5b84519350602085015192506040850151915060608501516135a78161360856fea2646970667358221220db3e636850c83c075b0dd044807f8eb7400dfb8be26dd0301fddde0249321e0364736f6c63430008180033a2646970667358221220cdb40b383d31e1c79af53b164da86aff8a7a024db6efd963a2a9299e703c697964736f6c63430008180033608060405234801561000f575f80fd5b506143908061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80638c98b3c61461002d575b5f80fd5b61004061003b36600461021a565b61005c565b6040516001600160a01b03909116815260200160405180910390f35b604080513360208201529081018290525f90606001604051602081830303815290604052805190602001208585604051610095906100c7565b6100a0929190610371565b8190604051809103905ff59050801580156100bd573d5f803e3d5ffd5b5095945050505050565b613eb8806104a383390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff8111828210171561010c5761010c6100d4565b60405290565b80356001600160a01b0381168114610128575f80fd5b919050565b5f6080828403121561013d575f80fd5b6040516080810181811067ffffffffffffffff82111715610160576101606100d4565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f82601f8301126101a0575f80fd5b813567ffffffffffffffff808211156101bb576101bb6100d4565b604051601f8301601f19908116603f011681019082821181831017156101e3576101e36100d4565b816040528381528660208588010111156101fb575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f808486036102c081121561022f575f80fd5b6102608082121561023e575f80fd5b6102466100e8565b915061025187610112565b825261025f60208801610112565b602083015261027060408801610112565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102d9818901610112565b908301526101806102eb888201610112565b908301526101a06102fd888201610112565b908301526101c061030f888201610112565b908301526101e06103228989830161012d565b8184015250819550610335818801610112565b9450505061028085013567ffffffffffffffff811115610353575f80fd5b61035f87828801610191565b949793965093946102a0013593505050565b82516001600160a01b031681526102808101602084015161039d60208401826001600160a01b03169052565b5060408401516103b860408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161042a828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe61028060405234801562000011575f80fd5b5060405162003eb838038062003eb88339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613a11620004a75f395f50505f50505f818161127a015261197501525f81816102f00152818161031f015261034c01525f818160d10152818161058e015261169001525f81816108220152818161090d0152818161099d01528181610aa2015281816115620152818161166a0152818161211a0152818161217d01528181612a2601528181612d7d0152612db901525f81816101310152818161089201528181610e380152818161142b0152818161148e015281816114d3015261164401525f611d2b01525f8181611e80015261300801525f8181610ff50152611e5401525f612fbe01525f8181610173015281816108e501528181610e59015281816113fb0152818161145e015281816114f401526116b601525f818161015201528181610227015281816102c5015281816106cd015281816108bf01528181610f3301526129bc01525f818161028501528181610cfe01528181610d7501528181610de901528181610eb40152610eec01525f818161194501528181611a880152612c1401525f5050613a115ff3fe608060405260043610610028575f3560e01c80634c2ac1d91461002c57806377d05ff414610051575b5f80fd5b61003f61003a3660046134b1565b610064565b60405190815260200160405180910390f35b61003f61005f366004613510565b61007e565b5f6100728686868686610094565b90505b95945050505050565b5f61008a8484846107d6565b90505b9392505050565b5f61009d610b7c565b600654610100900460ff16156100c6576040516321081abf60e01b815260040160405180910390fd5b6100cf82610ba4565b7f00000000000000000000000000000000000000000000000000000000000000008610156101105760405163211ddda360e11b815260040160405180910390fd5b5f61019761011c610bdc565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c01565b9050848110806101a657508381115b156101c457604051633b61151160e11b815260040160405180910390fd5b5f806101d08986610c26565b915091505f6101dd610cf7565b90506101ed818360046001610d22565b506002546004546003545f928392610256926001600160801b0380841693600f9390930b92600160801b900481169189911661025161024c7f00000000000000000000000000000000000000000000000000000000000000008b613570565b611386565b6113cc565b915091508061027857604051630552b01360e31b815260040160405180910390fd5b8b5f6102e96008826102aa7f000000000000000000000000000000000000000000000000000000000000000089613583565b815260208101919091526040015f20546001600160801b03167f00000000000000000000000000000000000000000000000000000000000000006115d0565b90506103157f000000000000000000000000000000000000000000000000000000000000000082613570565b88118061037457507f00000000000000000000000000000000000000000000000000000000000000008111801561037457506103717f000000000000000000000000000000000000000000000000000000000000000082613583565b88105b1561039257604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103dd916001600160801b0390911690613583565b5f808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765491925090610417908390613570565b90505f805f6104258a6115fb565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa1569061045f908490600401613614565b602060405180830381865af415801561047a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061049e9190613623565b91506104b16104ac8c611735565b611762565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161051291859101613614565b602060405180830381865af415801561052d573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105519190613623565b9250818310156105745760405163184d952160e11b815260040160405180910390fd5b61058a84836105838187613583565b9190611788565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105cd5760405163211ddda360e11b815260040160405180910390fd5b508f6105d9868e6117a3565b10156105f85760405163c972651760e01b815260040160405180910390fd5b6106145f8e5f01602081019061060e919061364e565b8e6117b7565b61061d8961185c565b95508561063d57604051638bdf918d60e01b815260040160405180910390fd5b5f8890505f8d9050368f90505f8c90505f6106f760025f015f9054906101000a90046001600160801b03166001600160801b0316600280015f9054906101000a9004600f0b600f0b60025f0160109054906101000a90046001600160801b03166001600160801b03168560026001015f9054906101000a90046001600160801b03166001600160801b03166102517f00000000000000000000000000000000000000000000000000000000000000008c61024c9190613570565b9b5090508a1580610710575061070d8c5f611868565b81125b1561072e57604051630552b01360e31b815260040160405180910390fd5b5f88156107455761074087848b611788565b610747565b5f5b9050610756602085018561364e565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d8661079360408a0160208b01613676565b866107a160408c018c613691565b6040516107b497969594939291906136d4565b60405180910390a2505050505050505050505050505050505061007560015f55565b5f6107df610b7c565b6107e882610ba4565b60065460ff161561080c57604051637983c05160e01b815260040160405180910390fd5b5f806108188685610c26565b90925090506108487f00000000000000000000000000000000000000000000000000000000000000006002613727565b82101561086857604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393505f908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063b29e1d1e9060c401606060405180830381865af4158015610971573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610995919061373e565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006109c6848461187c565b10156109e55760405163216f4ab160e21b815260040160405180910390fd5b5f806109f5858585895f806113cc565b91509150801580610a0557505f82125b15610a2357604051630552b01360e31b815260040160405180910390fd5b610a2c856118a1565b600280546001600160801b0319166001600160801b0392909216919091179055610a55846118ca565b600480546001600160801b0319166001600160801b0392909216919091179055610a7e836118a1565b600280546001600160801b03928316600160801b029216919091179055610ac65f807f00000000000000000000000000000000000000000000000000000000000000006117b7565b610add5f610ad760208c018c61364e565b8a6117b7565b610af2610ae8610cf7565b8760046001610d22565b508a8a8a610b03602082018261364e565b6001600160a01b03167f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af38c858c610b406040870160208801613676565b87610b4e6040890189613691565b604051610b6197969594939291906136d4565b60405180910390a25050505050505050505061008d60015f55565b60025f5403610b9e57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f610bb2602083018361364e565b6001600160a01b031603610bd95760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6002546004545f91610bfc916001600160801b0390911690600f0b61187c565b905090565b5f80610c0f87878786611905565b9050610c1b81856115d0565b979650505050505050565b815f80610c396040850160208601613676565b15610c5e57610c5485610c4f6040870187613691565b61191b565b9093509050610c76565b5034610c7685610c716040870187613691565b611a66565b610c7e611b00565b91508015610cee576040515f90339083908381818185875af1925050503d805f8114610cc5576040519150601f19603f3d011682016040523d82523d5f602084013e610cca565b606091505b5050905080610cec576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b5f610bfc427f0000000000000000000000000000000000000000000000000000000000000000611b12565b5f84815260086020526040812060018101546001600160801b0316151580610d4957504286115b15610d6257600101546001600160801b0316905061137e565b5f805f610d6d610cf7565b90505f610d9a7f00000000000000000000000000000000000000000000000000000000000000008b613570565b90505b81811015610e0e575f818152600860205260409020600101546001600160801b03168015610de6575f828152600860205260409020549094506001600160801b03169250610e0e565b507f000000000000000000000000000000000000000000000000000000000000000001610d9d565b835f03610e8057889350610e7d610e23610bdc565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611905565b92505b50610e8a836118a1565b6001850180546001600160801b0319166001600160801b0392909216919091179055610ee0610ed97f00000000000000000000000000000000000000000000000000000000000000008b613583565b8a84611b27565b610f1e89610f18610f117f000000000000000000000000000000000000000000000000000000000000000083613570565b4290611c60565b84611b27565b610f2788611c6e565b505f9050600881610f587f00000000000000000000000000000000000000000000000000000000000000008d613583565b815260208101919091526040015f908120600101546001600160801b03169150610f8360028c611e0b565b5f818152600b60205260408120549192508c8c83156110c457600192505f80610faf86898d865f611e3f565b915091508060095f828254610fc49190613570565b90915550610fdf9050865f84610fd981611735565b88611f0c565b610fe98183613570565b915061101986838a8e877f0000000000000000000000000000000000000000000000000000000000000000612083565b915061102d61102883856120c6565b6120da565b6006805460029061104e9084906201000090046001600160701b0316613769565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061107b826118a1565b6006805460109061109d908490600160801b90046001600160801b0316613789565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f6110d0600184611e0b565b5f818152600b602052604090205490915080156111db57600194505f806110fb838b8f886001611e3f565b915091508060095f8282546111109190613570565b9091555061112b9050835f8461112581611735565b8a612103565b6111358183613583565b915061114461102883876120c6565b600680546002906111659084906201000090046001600160701b0316613769565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550611192826118a1565b600680546010906111b4908490600160801b90046001600160801b0316613789565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415611214576112066111ed87611735565b6111f683611735565b61120091906137a9565b5f6122f3565b8e6112118482612332565b50505b5f61121e84612521565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112d4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112f891906137c8565b90506001600160a01b0381161561136c576113695a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190612663565b50505b509b9d50505050505050505050505050505b949350505050565b5f6113ab600b5f611398600286611e0b565b81526020019081526020015f2054611735565b6113bc600b5f611398600187611e0b565b6113c691906137a9565b92915050565b5f805f806113da8a8a6126eb565b91509150806113f0575f809350935050506115c5565b5f61144f838a6114287f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613583565b8b7f0000000000000000000000000000000000000000000000000000000000000000612723565b5090505f6114b2848b8461148b7f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613583565b8d7f00000000000000000000000000000000000000000000000000000000000000006127dc565b5090508115806114c0575080155b156114cb57505f9050805b5f611518858c7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611905565b905061152683838c84612896565b509093505f9050611537848f613570565b90505f6115578b8b61154887611735565b611552908e6137e3565b6128de565b90508b61158c6115877f000000000000000000000000000000000000000000000000000000000000000083612940565b611735565b61159583611735565b6115a261158786856120c6565b6115ac91906137a9565b6115b691906137a9565b60019950995050505050505050505b965096945050505050565b5f61008d6115e384846301e13380612950565b6115f585670de0b6b3a7640000613583565b906117a3565b611603613402565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916116fb9116612973565b81526004546001600160801b03600160801b918290048116602084015260055460409093019261172d92900416612973565b905292915050565b5f6001600160ff1b0382111561175e5760405163396ea70160e11b815260040160405180910390fd5b5090565b61176b816129e0565b610bd957604051635044b7f560e01b815260040160405180910390fd5b5f825f19048411830215820261179c575f80fd5b5091020490565b5f61008d83670de0b6b3a764000084611788565b5f838152600a602090815260408083206001600160a01b0386168452909152812080548392906117e8908490613570565b90915550505f838152600b60205260408120805483929061180a908490613570565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b5f6113c6826004612332565b5f818313611876578261008d565b50919050565b5f8061188884846126eb565b90925090508061189a5761189a612b74565b5092915050565b5f6001600160801b0382111561175e57604051630f0af95160e11b815260040160405180910390fd5b5f60016001607f1b03198212806118e7575060016001607f1b0382135b1561175e5760405163a5353be560e01b815260040160405180910390fd5b5f61007582611915858888611788565b90612b8d565b5f808434101561193e576040516312171d8360e31b815260040160405180910390fd5b84340390507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a1903eab867f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c415b95c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119cf573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906119f391906137c8565b6040516001600160e01b031960e085901b1681526001600160a01b03909116600482015260240160206040518083038185885af1158015611a36573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190611a5b9190613623565b91505b935093915050565b604051636d78045960e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690636d780459906064016020604051808303815f875af1158015611ad6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611afa9190613623565b50505050565b5f610bfc670de0b6b3a7640000612bfc565b5f611b1d828461381e565b61008d9084613583565b5f83815260086020526040902054600160801b90046001600160801b0316808303611b525750505050565b5f848152600860205260408120546001600160801b031690819003611baa57611b7a836118a1565b5f86815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611c27565b611bfb611bf6670de0b6b3a7640000611bc38886613583565b611bcd9190613727565b85670de0b6b3a7640000611be1878a613583565b611beb9190613727565b859291906001612c85565b6118a1565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b611c30846118a1565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b5f818311611876578261008d565b6006545f908190611c90908490600160801b90046001600160801b03166120c6565b6006546201000090046001600160701b03169250905081811115611e06575f611cb98383613583565b9050611cc8611bf68286612d1f565b60068054601090611cea908490600160801b90046001600160801b0316613831565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611d2285836117a390919063ffffffff16565b90505f611d4f827f00000000000000000000000000000000000000000000000000000000000000006120c6565b90508060095f828254611d629190613570565b90915550611d7290508183613583565b9150611d7d826118a1565b600280545f90611d979084906001600160801b0316613789565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611dc482612d33565b600480545f90611dd8908490600f0b613851565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f6001600160f81b03821115611e345760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f80611e4b87856117a3565b91505f611e78837f00000000000000000000000000000000000000000000000000000000000000006120c6565b9050611ea4817f00000000000000000000000000000000000000000000000000000000000000006120c6565b91508315611ec757611eb68282613583565b611ec09084613583565b9250611ede565b611ed18282613583565b611edb9084613570565b92505b86861015611f0157611ef1838789611788565b9250611efe828789611788565b91505b509550959350505050565b600454600160801b90046001600160801b0316611f54611bf682611f38670de0b6b3a764000086613727565b600554600160801b90046001600160801b031691908a5f612c85565b600580546001600160801b03928316600160801b029216919091179055611f7a866118a1565b611f849082613831565b600480546001600160801b03928316600160801b029216919091179055611faa846118a1565b600280545f90611fc49084906001600160801b0316613789565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611ff1836118ca565b600480545f90612005908490600f0b613851565b92506101000a8154816001600160801b030219169083600f0b6001600160801b03160217905550612035856118a1565b60028054601090612057908490600160801b90046001600160801b0316613831565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f80612094846115f58a888a611788565b90506120a1888486611788565b6120ab9082613570565b9050868111156120bb5786810391505b509695505050505050565b5f61008d8383670de0b6b3a7640000611788565b5f6001600160701b0382111561175e5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061214557507f00000000000000000000000000000000000000000000000000000000000000006121438583613583565b105b1561215257612152612b74565b6004549084900390600f0b61216784826137a9565b90508361217386611735565b1380156121a857507f00000000000000000000000000000000000000000000000000000000000000006121a6838361187c565b105b156121b5576121b5612b74565b600354600160801b90046001600160801b03166121f6611bf6826121e1670de0b6b3a764000088613727565b6005546001600160801b031691908c5f612c85565b600580546001600160801b0319166001600160801b03929092169190911790556122208882613583565b905061222b816118a1565b600380546001600160801b03928316600160801b029216919091179055612251836118a1565b600280546001600160801b0319166001600160801b039290921691909117905561227a826118ca565b600480546001600160801b0319166001600160801b03929092169190911790556122a3876118a1565b600280546010906122c5908490600160801b90046001600160801b0316613789565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b60035461230e90611bf6906001600160801b031684846128de565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543549091829161237c916001600160801b031690613583565b9050805f0361238f5760019150506113c6565b5f61239985612d5c565b9050805f036123ad576001925050506113c6565b5f806123ba838589612df7565b91509150806123cf575f9450505050506113c6565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b815260040161240a92919061387e565b6040805180830381865af4158015612424573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061244891906138f3565b9150915061246661245882611735565b61246190613915565b6129e0565b92508261247b575f96505050505050506113c6565b612484826118a1565b600780545f9061249e9084906001600160801b0316613789565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506124cb816118a1565b600780546010906124ed908490600160801b90046001600160801b0316613789565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e612548876115fb565b6040518263ffffffff1660e01b81526004016125649190613614565b6040805180830381865af415801561257e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906125a2919061392f565b91509150806125b757505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161261c91613570565b6126269190613583565b9050805f0361263c57505f958695509350505050565b5f80871161264a575f612655565b612655848884611788565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff8111156126865761268661395d565b6040519080825280601f01601f1916602001820160405280156126b0576020820181803683370190505b5090505f808751602089018b8e8ef191503d9250868311156126d0578692505b828152825f602083013e9093509150505b9550959350505050565b5f805f836126f886611735565b61270291906137a9565b90505f811215612718575f809250925050610cf0565b946001945092505050565b5f805f6127338888888888612f5f565b90505f61275d670de0b6b3a764000061274c8888612d1f565b6127569190613570565b83906117a3565b9050670de0b6b3a764000081106127915761278a612783670de0b6b3a7640000896117a3565b8290612b8d565b90506127a9565b6127a6612783670de0b6b3a764000089612d1f565b90505b6127b381866117a3565b9050888110156127ca575f809350935050506126e1565b97909703976001975095505050505050565b5f805f6127ec8989888888612f8d565b9050612806866119156127ff8a8d613570565b87906120c6565b9850612813858a86611788565b985088811015612829575f8092509250506115c5565b888103670de0b6b3a7640000811061285757612850612783670de0b6b3a764000089612d1f565b905061286f565b61286c612783670de0b6b3a7640000896117a3565b90505b80891015612884575f809350935050506115c5565b90970398600198509650505050505050565b5f805f805f6128a6898789612fb1565b90925090506128b58289613583565b97505f6128c382888a611788565b90506128cf818b613583565b9a989950979650505050505050565b5f806128ea845f613036565b6128f4845f613036565b6128fe91906137a9565b90505f811315612919576129128186613570565b9450612937565b5f8112156129375761292a81613915565b6129349086613583565b94505b50929392505050565b5f61008d8383670de0b6b3a76400005b5f825f190484118302158202612964575f80fd5b50910281810615159190040190565b5f80670de0b6b3a7640000612986610cf7565b6129909190613727565b905080831161299f575f6129a9565b6129a98184613583565b915061008d612756670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613727565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612a96573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612aba9190613971565b935093509350935080612ad557505f98975050505050505050565b868414612b0657612ae5846118a1565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612b3757612b16836118ca565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612b6557612b47826118a1565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f815f03612ba45750670de0b6b3a76400006113c6565b825f03612bb257505f6113c6565b5f612bbc83611735565b90505f612bd0612bcb86611735565b61304b565b9050818102612be7670de0b6b3a7640000826139af565b9050612bf281613270565b9695505050505050565b604051630f451f7160e31b8152600481018290525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a28fb8890602401602060405180830381865afa158015612c61573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113c69190613623565b5f825f03612c94575084610075565b8115612ce657612cc5612ca78487613570565b612cb185876120c6565b612cbb888a6120c6565b6115f59190613570565b90505f612cd28588611c60565b905080821015612ce0578091505b50610075565b828503612cf457505f610075565b610072612d018487613583565b612d0b8587612940565b612d15888a6120c6565b6115f59190613583565b5f61008d83670de0b6b3a764000084612950565b5f60016001607f1b0382111561175e5760405163a5353be560e01b815260040160405180910390fd5b6003545f908190612d76906001600160801b031684612d1f565b9050612da27f000000000000000000000000000000000000000000000000000000000000000082613570565b6002546001600160801b03161115611876576002547f000000000000000000000000000000000000000000000000000000000000000090612ded9083906001600160801b0316613583565b61008d9190613583565b612dff613457565b5f80612e0a846115fb565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612e449190613614565b6040805180830381865af4158015612e5e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612e82919061392f565b9350905082612e9657505f9150611a5e9050565b5f612eb76115878461016001518561014001516120c690919063ffffffff16565b612ed761158785610120015186610100015161294090919063ffffffff16565b612ee191906137a9565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b5f612f6a8585612b8d565b612f83612f7b86611915868b6120c6565b859085611788565b6100729190613570565b5f612f988585612b8d565b612f83612fa986611915868b612940565b859085612950565b5f8061300085612ffa85817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000612ff0818c612d1f565b612ffa9190613583565b90612940565b915061302c827f00000000000000000000000000000000000000000000000000000000000000006120c6565b9050935093915050565b5f818313613044578161008d565b5090919050565b5f80821361306c5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906130ef9084901c611735565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e19821361328957505f919050565b680755bf798b4a1bf1e582126132b2576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612bf274029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611735565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b60405180610120016040528061346b613402565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f60608284031215611876575f80fd5b5f805f805f60a086880312156134c5575f80fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156134f7575f80fd5b613503888289016134a1565b9150509295509295909350565b5f805f60608486031215613522575f80fd5b8335925060208401359150604084013567ffffffffffffffff811115613546575f80fd5b613552868287016134a1565b9150509250925092565b634e487b7160e01b5f52601160045260245ffd5b808201808211156113c6576113c661355c565b818103818111156113c6576113c661355c565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b61018081016113c68284613596565b5f60208284031215613633575f80fd5b5051919050565b6001600160a01b0381168114610bd9575f80fd5b5f6020828403121561365e575f80fd5b813561008d8161363a565b8015158114610bd9575f80fd5b5f60208284031215613686575f80fd5b813561008d81613669565b5f808335601e198436030181126136a6575f80fd5b83018035915067ffffffffffffffff8211156136c0575f80fd5b602001915036819003821315610cf0575f80fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e08301375f81830160e090810191909152601f909201601f191601019695505050505050565b80820281158282048414176113c6576113c661355c565b5f805f60608486031215613750575f80fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561189a5761189a61355c565b6001600160801b0381811683821601908082111561189a5761189a61355c565b8181035f83128015838313168383128216171561189a5761189a61355c565b5f602082840312156137d8575f80fd5b815161008d8161363a565b8082018281125f8312801582168215821617156138025761380261355c565b505092915050565b634e487b7160e01b5f52601260045260245ffd5b5f8261382c5761382c61380a565b500690565b6001600160801b0382811682821603908082111561189a5761189a61355c565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156113c6576113c661355c565b5f6102a082019050613891828551613596565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613904575f80fd5b505080516020909101519092909150565b5f600160ff1b82016139295761392961355c565b505f0390565b5f8060408385031215613940575f80fd5b82519150602083015161395281613669565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215613984575f80fd5b84519350602085015192506040850151915060608501516139a481613669565b939692955090935050565b5f826139bd576139bd61380a565b600160ff1b82145f19841416156139d6576139d661355c565b50059056fea2646970667358221220a1ab8167f431c7c0ea43b2ce9ec415bb8b121a0393b1dd06ab02ab4f3c47c97564736f6c63430008180033a264697066735822122002973614016168a93131b9bfd0bde44a95f16296f49edc44d6dd1d54fae85dff64736f6c63430008180033608060405234801561000f575f80fd5b506136698061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c80638c98b3c61461002d575b5f80fd5b61004061003b36600461021a565b61005c565b6040516001600160a01b03909116815260200160405180910390f35b604080513360208201529081018290525f90606001604051602081830303815290604052805190602001208585604051610095906100c7565b6100a0929190610371565b8190604051809103905ff59050801580156100bd573d5f803e3d5ffd5b5095945050505050565b613191806104a383390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff8111828210171561010c5761010c6100d4565b60405290565b80356001600160a01b0381168114610128575f80fd5b919050565b5f6080828403121561013d575f80fd5b6040516080810181811067ffffffffffffffff82111715610160576101606100d4565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f82601f8301126101a0575f80fd5b813567ffffffffffffffff808211156101bb576101bb6100d4565b604051601f8301601f19908116603f011681019082821181831017156101e3576101e36100d4565b816040528381528660208588010111156101fb575f80fd5b836020870160208301375f602085830101528094505050505092915050565b5f805f808486036102c081121561022f575f80fd5b6102608082121561023e575f80fd5b6102466100e8565b915061025187610112565b825261025f60208801610112565b602083015261027060408801610112565b6040830152606087013560608301526080870135608083015260a087013560a083015260c087013560c083015260e087013560e08301526101008088013581840152506101208088013581840152506101408088013581840152506101606102d9818901610112565b908301526101806102eb888201610112565b908301526101a06102fd888201610112565b908301526101c061030f888201610112565b908301526101e06103228989830161012d565b8184015250819550610335818801610112565b9450505061028085013567ffffffffffffffff811115610353575f80fd5b61035f87828801610191565b949793965093946102a0013593505050565b82516001600160a01b031681526102808101602084015161039d60208401826001600160a01b03169052565b5060408401516103b860408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e08301526101008085015181840152506101208085015181840152506101408085015181840152506101608085015161042a828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e0948501518051958401959095526020850151610200840152604085015161022084015260609094015161024083015291909216610260909201919091529056fe61028060405234801562000011575f80fd5b5060405162003191380380620031918339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051612d9e620003f35f395f50505f50505f61099201525f50505f818161025f0152611f5d01525f81816117bd0152818161182001528181611b4d01528181611b8901528181611d7a0152611f3701525f81816105500152611f1101525f61139f01525f6114f401525f818161070d01526114c801525f50505f81816105710152611f8301525f818161064b01526123a301525f81816101e2015281816104160152818161048d01528181610501015281816105cc015261060401525f818161109b0152818161224f01526122c601525f5050612d9e5ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063074a6de914610043578063414f826d1461006f578063cbc1343414610084575b5f80fd5b610056610051366004612874565b610097565b6040805192835260208301919091520160405180910390f35b61008261007d3660046128c6565b6100b1565b005b610056610092366004612874565b6100bf565b5f806100a48585856100cc565b915091505b935093915050565b6100bb828261018e565b5050565b5f806100a485858561024a565b5f806100d6610398565b6100df836103c0565b5f6100e86103f8565b90506100ff6100f561040f565b826004600161043a565b5061010d3387838888610a9e565b909350915061011f60208501856128fa565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561015d60408b0160208c01612922565b61016a60408c018c61293d565b60405161017c969594939291906129a8565b60405180910390a3506100a960015f55565b610196610398565b5f61019f6103f8565b5f848152600860205260409020600101549091506001600160801b0316156101d2576101cb8183610bdd565b5050610241565b5f6101db61040f565b90506102077f0000000000000000000000000000000000000000000000000000000000000000856129f5565b15158061021357508381105b156102315760405163ecd29e8160e01b815260040160405180910390fd5b61023d8483855f61043a565b5050505b6100bb60015f55565b5f80610254610398565b61025d836103c0565b7f000000000000000000000000000000000000000000000000000000000000000085101561029e5760405163211ddda360e11b815260040160405180910390fd5b5f6102a76103f8565b90506102b46100f561040f565b506102c05f3388610dcd565b6102db600360f81b6102d560208701876128fa565b88610ea4565b5f6102f56102ec60208701876128fa565b88848989610a9e565b90945090506103048188612a1c565b92505f61031083610f41565b50905061032060208701876128fa565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761035e60408d0160208e01612922565b8a888e8060400190610370919061293d565b604051610384989796959493929190612a2f565b60405180910390a35050506100a960015f55565b60025f54036103ba57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f6103ce60208301836128fa565b6001600160a01b0316036103f55760405163f0dd15fd60e01b815260040160405180910390fd5b50565b5f61040a670de0b6b3a7640000611083565b905090565b5f61040a427f000000000000000000000000000000000000000000000000000000000000000061110d565b5f84815260086020526040812060018101546001600160801b031615158061046157504286115b1561047a57600101546001600160801b03169050610a96565b5f805f61048561040f565b90505f6104b27f00000000000000000000000000000000000000000000000000000000000000008b612a76565b90505b81811015610526575f818152600860205260409020600101546001600160801b031680156104fe575f828152600860205260409020549094506001600160801b03169250610526565b507f0000000000000000000000000000000000000000000000000000000000000000016104b5565b835f036105985788935061059561053b611129565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611149565b92505b506105a283611168565b6001850180546001600160801b0319166001600160801b03929092169190911790556105f86105f17f00000000000000000000000000000000000000000000000000000000000000008b612a1c565b8a84611195565b610636896106306106297f000000000000000000000000000000000000000000000000000000000000000083612a76565b42906112ce565b84611195565b61063f886112e2565b505f90506008816106707f00000000000000000000000000000000000000000000000000000000000000008d612a1c565b815260208101919091526040015f908120600101546001600160801b0316915061069b60028c61147f565b5f818152600b60205260408120549192508c8c83156107dc57600192505f806106c786898d865f6114b3565b915091508060095f8282546106dc9190612a76565b909155506106f79050865f846106f181611580565b886115a9565b6107018183612a76565b915061073186838a8e877f0000000000000000000000000000000000000000000000000000000000000000611720565b91506107456107408385611769565b61177d565b600680546002906107669084906201000090046001600160701b0316612a89565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061079382611168565b600680546010906107b5908490600160801b90046001600160801b0316612aa9565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f6107e860018461147f565b5f818152600b602052604090205490915080156108f357600194505f80610813838b8f8860016114b3565b915091508060095f8282546108289190612a76565b909155506108439050835f8461083d81611580565b8a6117a6565b61084d8183612a1c565b915061085c6107408387611769565b6006805460029061087d9084906201000090046001600160701b0316612a89565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108aa82611168565b600680546010906108cc908490600160801b90046001600160801b0316612aa9565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b841561092c5761091e61090587611580565b61090e83611580565b6109189190612ac9565b5f611996565b8e6109298482610bdd565b50505b5f61093684610f41565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ec573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a109190612ae8565b90506001600160a01b03811615610a8457610a815a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b038616939291906119d5565b50505b509b9d50505050505050505050505050505b949350505050565b5f80610aa985611a5b565b505060075485906001600160801b031680821115610ace57806001600160801b031691505b815f03610ae1575f809250925050610bd3565b610af0600360f81b8984610dcd565b6007545f90610b159084906001600160801b03600160801b9091048116908516611a67565b9050610b2083611168565b610b2a9083612b03565b600780546001600160801b0319166001600160801b0392909216919091179055610b5381611168565b60078054601090610b75908490600160801b90046001600160801b0316612b03565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610ba4818887611a82565b9350610bb08684611b18565b841015610bd05760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c27916001600160801b031690612a1c565b9050805f03610c3a576001915050610dc7565b5f610c4485611b2c565b9050805f03610c5857600192505050610dc7565b5f80610c65838589611bc7565b9150915080610c7a575f945050505050610dc7565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cb5929190612ba1565b6040805180830381865af4158015610ccf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf39190612c16565b91509150610d11610d0382611580565b610d0c90612c38565b611d34565b925082610d26575f9650505050505050610dc7565b610d2f82611168565b600780545f90610d499084906001600160801b0316612aa9565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610d7681611168565b60078054601090610d98908490600160801b90046001600160801b0316612aa9565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b5f838152600a602090815260408083206001600160a01b0386168452909152902054811115610e0f57604051631e9acf1760e31b815260040160405180910390fd5b5f838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e51908490612a1c565b909155505060408051848152602081018390525f916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b5f838152600a602090815260408083206001600160a01b038616845290915281208054839290610ed5908490612a76565b90915550505f838152600b602052604081208054839290610ef7908490612a76565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610e97565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610f6887611ec8565b6040518263ffffffff1660e01b8152600401610f849190612c52565b6040805180830381865af4158015610f9e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc29190612c61565b9150915080610fd757505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161103c91612a76565b6110469190612a1c565b9050805f0361105c57505f958695509350505050565b5f80871161106a575f611075565b611075848884611a67565b976001975095505050505050565b604051630f451f7160e31b8152600481018290525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690637a28fb88906024015b602060405180830381865afa1580156110e9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610dc79190612c8f565b5f61111882846129f5565b6111229084612a1c565b9392505050565b6002546004545f9161040a916001600160801b0390911690600f0b612002565b5f61115f82611159858888611a67565b90612027565b95945050505050565b5f6001600160801b0382111561119157604051630f0af95160e11b815260040160405180910390fd5b5090565b5f83815260086020526040902054600160801b90046001600160801b03168083036111c05750505050565b5f848152600860205260408120546001600160801b031690819003611218576111e883611168565b5f86815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611295565b611269611264670de0b6b3a76400006112318886612a1c565b61123b9190612ca6565b85670de0b6b3a764000061124f878a612a1c565b6112599190612ca6565b859291906001612096565b611168565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61129e84611168565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b5f8183116112dc5782611122565b50919050565b6006545f908190611304908490600160801b90046001600160801b0316611769565b6006546201000090046001600160701b0316925090508181111561147a575f61132d8383612a1c565b905061133c6112648286612130565b6006805460109061135e908490600160801b90046001600160801b0316612b03565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611396858361214490919063ffffffff16565b90505f6113c3827f0000000000000000000000000000000000000000000000000000000000000000611769565b90508060095f8282546113d69190612a76565b909155506113e690508183612a1c565b91506113f182611168565b600280545f9061140b9084906001600160801b0316612aa9565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061143882612158565b600480545f9061144c908490600f0b612cbd565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f6001600160f81b038211156114a85760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f806114bf8785612144565b91505f6114ec837f0000000000000000000000000000000000000000000000000000000000000000611769565b9050611518817f0000000000000000000000000000000000000000000000000000000000000000611769565b9150831561153b5761152a8282612a1c565b6115349084612a1c565b9250611552565b6115458282612a1c565b61154f9084612a76565b92505b8686101561157557611565838789611a67565b9250611572828789611a67565b91505b509550959350505050565b5f6001600160ff1b038211156111915760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b03166115f1611264826115d5670de0b6b3a764000086612ca6565b600554600160801b90046001600160801b031691908a5f612096565b600580546001600160801b03928316600160801b02921691909117905561161786611168565b6116219082612b03565b600480546001600160801b03928316600160801b02921691909117905561164784611168565b600280545f906116619084906001600160801b0316612aa9565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061168e83612181565b600480545f906116a2908490600f0b612cbd565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506116d285611168565b600280546010906116f4908490600160801b90046001600160801b0316612b03565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f80611737846117318a888a611a67565b90612144565b9050611744888486611a67565b61174e9082612a76565b90508681111561175e5786810391505b509695505050505050565b5f6111228383670de0b6b3a7640000611a67565b5f6001600160701b038211156111915760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b0316838110806117e857507f00000000000000000000000000000000000000000000000000000000000000006117e68583612a1c565b105b156117f5576117f56121bc565b6004549084900390600f0b61180a8482612ac9565b90508361181686611580565b13801561184b57507f00000000000000000000000000000000000000000000000000000000000000006118498383612002565b105b15611858576118586121bc565b600354600160801b90046001600160801b031661189961126482611884670de0b6b3a764000088612ca6565b6005546001600160801b031691908c5f612096565b600580546001600160801b0319166001600160801b03929092169190911790556118c38882612a1c565b90506118ce81611168565b600380546001600160801b03928316600160801b0292169190911790556118f483611168565b600280546001600160801b0319166001600160801b039290921691909117905561191d82612181565b600480546001600160801b0319166001600160801b039290921691909117905561194687611168565b60028054601090611968908490600160801b90046001600160801b0316612aa9565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b6003546119b190611264906001600160801b031684846121d5565b600380546001600160801b0319166001600160801b03929092169190911790555050565b5f60605f805f8661ffff1667ffffffffffffffff8111156119f8576119f8612cea565b6040519080825280601f01601f191660200182016040528015611a22576020820181803683370190505b5090505f808751602089018b8e8ef191503d925086831115611a42578692505b828152825f602083013e90999098509650505050505050565b5f610dc7826004610bdd565b5f825f190484118302158202611a7b575f80fd5b5091020490565b5f80611a8e8585611769565b9050611a9981612237565b9450845f03611aab575f915050611122565b849150611abe6040840160208501612922565b15611aed57611ae685611ad460208601866128fa565b611ae1604087018761293d565b612286565b9150611b10565b611b1085611afe60208601866128fa565b611b0b604087018761293d565b6122a0565b509392505050565b5f6111228383670de0b6b3a7640000612337565b6003545f908190611b46906001600160801b031684612130565b9050611b727f000000000000000000000000000000000000000000000000000000000000000082612a76565b6002546001600160801b031611156112dc576002547f000000000000000000000000000000000000000000000000000000000000000090611bbd9083906001600160801b0316612a1c565b6111229190612a1c565b611bcf6127d5565b5f80611bda84611ec8565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c149190612c52565b6040805180830381865af4158015611c2e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c529190612c61565b9350905082611c6657505f91506100a99050565b5f611c8c611c8784610160015185610140015161176990919063ffffffff16565b611580565b611cac611c87856101200151866101000151611b1890919063ffffffff16565b611cb69190612ac9565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611dea573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e0e9190612cfe565b935093509350935080611e2957505f98975050505050505050565b868414611e5a57611e3984611168565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611e8b57611e6a83612181565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611eb957611e9b82611168565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b611ed061281f565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191611fc8911661235a565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192611ffa9290041661235a565b905292915050565b5f8061200e84846123ce565b909250905080612020576120206121bc565b5092915050565b5f815f0361203e5750670de0b6b3a7640000610dc7565b825f0361204c57505f610dc7565b5f61205683611580565b90505f61206a61206586611580565b612409565b9050818102612081670de0b6b3a764000082612d3c565b905061208c8161262e565b9695505050505050565b5f825f036120a557508461115f565b81156120f7576120d66120b88487612a76565b6120c28587611769565b6120cc888a611769565b6117319190612a76565b90505f6120e385886112ce565b9050808210156120f1578091505b5061115f565b82850361210557505f61115f565b61208c6121128487612a1c565b61211c8587611b18565b612126888a611769565b6117319190612a1c565b5f61112283670de0b6b3a764000084612337565b5f61112283670de0b6b3a764000084611a67565b5f60016001607f1b038211156111915760405163a5353be560e01b815260040160405180910390fd5b5f60016001607f1b031982128061219e575060016001607f1b0382135b156111915760405163a5353be560e01b815260040160405180910390fd5b60405163bb55fd2760e01b815260040160405180910390fd5b5f806121e1845f6127c0565b6121eb845f6127c0565b6121f59190612ac9565b90505f811315612210576122098186612a76565b945061222e565b5f81121561222e5761222181612c38565b61222b9086612a1c565b94505b50929392505050565b604051631920845160e01b8152600481018290525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906319208451906024016110ce565b5f60405163350b944160e11b815260040160405180910390fd5b604051638fcb4e5b60e01b81526001600160a01b038481166004830152602482018690527f00000000000000000000000000000000000000000000000000000000000000001690638fcb4e5b906044016020604051808303815f875af115801561230c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906123309190612c8f565b5050505050565b5f825f19048411830215820261234b575f80fd5b50910281810615159190040190565b5f80670de0b6b3a764000061236d61040f565b6123779190612ca6565b9050808311612386575f612390565b6123908184612a1c565b91506111226123c7670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000612ca6565b8390612144565b5f805f836123db86611580565b6123e59190612ac9565b90505f8112156123fb575f809250925050612402565b9150600190505b9250929050565b5f80821361242a5760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906124ad9084901c611580565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e19821361264757505f919050565b680755bf798b4a1bf1e58212612670576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061208c74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611580565b5f8183136127ce5781611122565b5090919050565b6040518061012001604052806127e961281f565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f60608486031215612886575f80fd5b8335925060208401359150604084013567ffffffffffffffff8111156128aa575f80fd5b8401606081870312156128bb575f80fd5b809150509250925092565b5f80604083850312156128d7575f80fd5b50508035926020909101359150565b6001600160a01b03811681146103f5575f80fd5b5f6020828403121561290a575f80fd5b8135611122816128e6565b80151581146103f5575f80fd5b5f60208284031215612932575f80fd5b813561112281612915565b5f808335601e19843603018112612952575f80fd5b83018035915067ffffffffffffffff82111561296c575f80fd5b602001915036819003821315612402575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b868152856020820152846040820152831515606082015260a060808201525f6129d560a083018486612980565b98975050505050505050565b634e487b7160e01b5f52601260045260245ffd5b5f82612a0357612a036129e1565b500690565b634e487b7160e01b5f52601160045260245ffd5b81810381811115610dc757610dc7612a08565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f612a6860e083018486612980565b9a9950505050505050505050565b80820180821115610dc757610dc7612a08565b6001600160701b0381811683821601908082111561202057612020612a08565b6001600160801b0381811683821601908082111561202057612020612a08565b8181035f83128015838313168383128216171561202057612020612a08565b5f60208284031215612af8575f80fd5b8151611122816128e6565b6001600160801b0382811682821603908082111561202057612020612a08565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a082019050612bb4828551612b23565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215612c27575f80fd5b505080516020909101519092909150565b5f600160ff1b8201612c4c57612c4c612a08565b505f0390565b6101808101610dc78284612b23565b5f8060408385031215612c72575f80fd5b825191506020830151612c8481612915565b809150509250929050565b5f60208284031215612c9f575f80fd5b5051919050565b8082028115828204841417610dc757610dc7612a08565b600f81810b9083900b0160016001607f1b03811360016001607f1b031982121715610dc757610dc7612a08565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215612d11575f80fd5b8451935060208501519250604085015191506060850151612d3181612915565b939692955090935050565b5f82612d4a57612d4a6129e1565b600160ff1b82145f1984141615612d6357612d63612a08565b50059056fea26469706673582212202b1a3e19c2654b3168bb3c046003776e82593b7724d9d6b302f15967a2f2e1e864736f6c63430008180033a26469706673582212206a03964b0fc85c6778251d80a65bfd52d1e485e168b9c85db7d1426939b64eac64736f6c6343000818003361018060405234801562000011575f80fd5b5060405162002630380380620026308339810160408190526200003491620000c4565b88888888888888885f620000498982620002ae565b506001600160a01b0396871660805294861660a05292851660c05290841660e0528316610100528216610120528116610140529190911661016052506200037a975050505050505050565b634e487b7160e01b5f52604160045260245ffd5b80516001600160a01b0381168114620000bf575f80fd5b919050565b5f805f805f805f805f6101208a8c031215620000de575f80fd5b89516001600160401b0380821115620000f5575f80fd5b818c0191508c601f83011262000109575f80fd5b8151818111156200011e576200011e62000094565b604051601f8201601f19908116603f0116810190838211818310171562000149576200014962000094565b81604052828152602093508f8484870101111562000165575f80fd5b5f91505b8282101562000188578482018401518183018501529083019062000169565b5f848483010152809d50505050620001a2818d01620000a8565b99505050620001b460408b01620000a8565b9650620001c460608b01620000a8565b9550620001d460808b01620000a8565b9450620001e460a08b01620000a8565b9350620001f460c08b01620000a8565b92506200020460e08b01620000a8565b9150620002156101008b01620000a8565b90509295985092959850929598565b600181811c908216806200023957607f821691505b6020821081036200025857634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620002a957805f5260205f20601f840160051c81016020851015620002855750805b601f840160051c820191505b81811015620002a6575f815560010162000291565b50505b505050565b81516001600160401b03811115620002ca57620002ca62000094565b620002e281620002db845462000224565b846200025e565b602080601f83116001811462000318575f8415620003005750858301515b5f19600386901b1c1916600185901b17855562000372565b5f85815260208120601f198616915b82811015620003485788860151825594840194600190910190840162000327565b50858210156200036657878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60805160a05160c05160e051610100516101205161014051610160516121dc620004545f395f8181610179015281816112950152818161132a015261148401525f818161032d0152610daa01525f81816103930152610c7701525f81816103f90152610b4401525f81816103600152610a1101525f81816103c6015261080801525f818161047e01526110f901525f818161044b01528181610585015281816107310152818161083801528181610a4101528181610b7401528181610ca701528181610dda01528181610ecd015261112a01526121dc5ff3fe608060405260043610610105575f3560e01c8063a085fa3011610092578063c151061811610062578063c15106181461041b578063c45a01551461043a578063c83e1f511461046d578063e990eba8146104a0578063e99be396146104bf575f80fd5b8063a085fa301461034f578063aa8cd6c414610382578063ab71905f146103b5578063b6cb1118146103e8575f80fd5b8063251f6c42116100d8578063251f6c42146101b357806337404017146101d25780633e5541f1146102ce57806354fd4d50146102ed578063966ecd1c1461031c575f80fd5b806304baa00b1461010957806306fdde031461013357806316abfc701461014757806323509a2d14610168575b5f80fd5b348015610114575f80fd5b5061011d6104d2565b60405161012a9190611842565b60405180910390f35b34801561013e575f80fd5b5061011d6104ee565b61015a61015536600461197a565b610579565b60405190815260200161012a565b348015610173575f80fd5b5061019b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161012a565b3480156101be575f80fd5b5061015a6101cd366004611a38565b610706565b3480156101dd575f80fd5b506102c16101ec366004611a62565b60408051610120810182525f80825260208201819052918101829052606081018290526080810182905260a0810182905260c0810182905260e08101829052610100810191909152505f9081526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b0390811660608301526004830154811660808301526005830154811660a08301526006830154811660c08301526007830154811660e083015260089092015490911661010082015290565b60405161012a9190611a79565b3480156102d9575f80fd5b5061015a6102e8366004611a38565b61071a565b3480156102f8575f80fd5b50604080518082019091526007815266076312e302e32360cc1b602082015261011d565b348015610327575f80fd5b5061019b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561035a575f80fd5b5061019b7f000000000000000000000000000000000000000000000000000000000000000081565b34801561038d575f80fd5b5061019b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103c0575f80fd5b5061019b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156103f3575f80fd5b5061019b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610426575f80fd5b5061019b610435366004611c4d565b610725565b348015610445575f80fd5b5061019b7f000000000000000000000000000000000000000000000000000000000000000081565b348015610478575f80fd5b5061019b7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104ab575f80fd5b5061019b6104ba366004611cb6565b610ec1565b3480156104ca575f80fd5b50600561015a565b6040518060600160405280602281526020016121856022913981565b5f80546104fa90611d50565b80601f016020809104026020016040519081016040528092919081815260200182805461052690611d50565b80156105715780601f1061054857610100808354040283529160200191610571565b820191905f5260205f20905b81548152906001019060200180831161055457829003601f168201915b505050505081565b5f336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105c357604051634084351160e01b815260040160405180910390fd5b5f868152600160205260409020600301546001600160a01b0316806105fb5760405163952b05cb60e01b815260040160405180910390fd5b5f61060882888887611234565b9050816001600160a01b03166377d05ff4828888886040518563ffffffff1660e01b815260040161063b93929190611d88565b60206040518083038185885af1158015610657573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061067c9190611dd7565b92505f6106898234611dee565b905080156106f9576040515f90339083908381818185875af1925050503d805f81146106d0576040519150601f19603f3d011682016040523d82523d5f602084013e6106d5565b606091505b50509050806106f7576040516312171d8360e31b815260040160405180910390fd5b505b5050505b95945050505050565b5f61071183836113a1565b90505b92915050565b5f610711838361140b565b5f336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461076f57604051634084351160e01b815260040160405180910390fd5b5f8681526001602052604081209084900361091f578054156107a457604051633be1b34d60e11b815260040160405180910390fd5b6107ae868661143a565b5f6107b98787611532565b90505f876040516020016107cd9190611e0d565b6040516020818303038152906040528051906020012090505f878051906020012090505f6107fa8a611549565b9050838160800181815250507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008c8f8c604051602001610874929190918252602082015260400190565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b81526004016108a99493929190612040565b6020604051808303815f875af11580156108c5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108e99190612085565b9285555060018401556002830191909155600490910180546001600160a01b0319166001600160a01b03831617905590506106fd565b5f878152600160205260409020548061094b5760405163398b1c0960e21b815260040160405180910390fd5b808760405160200161095d9190611e0d565b60405160208183030381529060405280519060200120146109915760405163332ee11f60e01b815260040160405180910390fd5b600182015486516020880120146109bb57604051631a3272d160e31b815260040160405180910390fd5b6109c5878761143a565b5f6109cf88611549565b6002840154608082015290506001869003610b0f5760058301546001600160a01b031615610a0f5760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610a76939291906120a7565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610aab9493929190612040565b6020604051808303815f875af1158015610ac7573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610aeb9190612085565b6005840180546001600160a01b0319166001600160a01b03831617905593506106f9565b85600203610c425760068301546001600160a01b031615610b425760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610ba9939291906120a7565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610bde9493929190612040565b6020604051808303815f875af1158015610bfa573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c1e9190612085565b6006840180546001600160a01b0319166001600160a01b03831617905593506106f9565b85600303610d755760078301546001600160a01b031615610c755760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610cdc939291906120a7565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610d119493929190612040565b6020604051808303815f875af1158015610d2d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d519190612085565b6007840180546001600160a01b0319166001600160a01b03831617905593506106f9565b85600403610ea85760088301546001600160a01b031615610da85760405162e896af60e31b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638c98b3c6827f00000000000000000000000000000000000000000000000000000000000000008a338e8b604051602001610e0f939291906120a7565b604051602081830303815290604052805190602001206040518563ffffffff1660e01b8152600401610e449493929190612040565b6020604051808303815f875af1158015610e60573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610e849190612085565b6008840180546001600160a01b0319166001600160a01b03831617905593506106f9565b604051631d9f815960e11b815260040160405180910390fd5b5f336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610f0b57604051634084351160e01b815260040160405180910390fd5b5f8681526001602081815260409283902083516101208101855281548152928101549183019190915260028101549282019290925260038201546001600160a01b03908116606083018190526004840154821660808401526005840154821660a08401526006840154821660c08401526007840154821660e0840152600890930154166101008201529015610fb357604051632c95caeb60e01b815260040160405180910390fd5b8051610fd25760405163398b1c0960e21b815260040160405180910390fd5b60808101516001600160a01b03161580610ff7575060a08101516001600160a01b0316155b8061100d575060c08101516001600160a01b0316155b80611023575060e08101516001600160a01b0316155b8061103a57506101008101516001600160a01b0316155b156110585760405163e97cc2bf60e01b815260040160405180910390fd5b805160405161106b908790602001611e0d565b604051602081830303815290604052805190602001201461109f5760405163332ee11f60e01b815260040160405180910390fd5b80602001518480519060200120146110ca57604051631a3272d160e31b815260040160405180910390fd5b6110d4858561143a565b5f6110de86611549565b905081604001518160800181815250505f8890505f8590505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638cc23ce08b867f00000000000000000000000000000000000000000000000000000000000000008c8a608001518b60a001518c60c001518d60e001518e61010001518d8d604051602001611180929190918252602082015260400190565b604051602081830303815290604052805190602001206040518b63ffffffff1660e01b81526004016111bb9a999897969594939291906120c8565b6020604051808303815f875af11580156111d7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111fb9190612085565b5f9b8c5260016020526040909b2060030180546001600160a01b0319166001600160a01b038d1617905550989998505050505050505050565b5f81602001511561126757823410156112605760405163044044a560e21b815260040160405180910390fd5b5081611399565b604051636d78045960e01b81526001600160a01b038581166004830152306024830152604482018590525f917f000000000000000000000000000000000000000000000000000000000000000090911690636d780459906064016020604051808303815f875af11580156112dd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113019190611dd7565b60405163095ea7b360e01b81526001600160a01b038881166004830152602482018390529192507f00000000000000000000000000000000000000000000000000000000000000009091169063095ea7b3906044016020604051808303815f875af1158015611372573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611396919061214a565b50505b949350505050565b604051630f451f7160e31b8152600481018290525f906001600160a01b03841690637a28fb88906024015b602060405180830381865afa1580156113e7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107119190611dd7565b604051631920845160e01b8152600481018290525f906001600160a01b038416906319208451906024016113cc565b6114448282611617565b81516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461148257604051630722152560e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031682602001516001600160a01b0316146114d85760405163073f739d60e51b815260040160405180910390fd5b816080015166038d7ea4c6800014611503576040516349db44f560e01b815260040160405180910390fd5b8160a0015166038d7ea4c680001461152e576040516318c9522360e11b815260040160405180910390fd5b5050565b5f6107118360200151670de0b6b3a7640000610706565b61155161172b565b81516001600160a01b03908116825260208084015182169083015260408084015182169083015260608084015190830152608083015160a08084019190915283015160c08084019190915283015160e08084019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015181166101608084019190915283015181166101808084019190915283015181166101a080840191909152830151166101c080830191909152909101516101e082015290565b6103e88260800151101561163e576040516349db44f560e01b815260040160405180910390fd5b8161010001515f0361166357604051635428734d60e01b815260040160405180910390fd5b8161010001518260e00151108061168d57508161010001518260e0015161168a9190612165565b15155b156116ab5760405163253fffcf60e11b815260040160405180910390fd5b6101c082015151670de0b6b3a764000010806116d75750670de0b6b3a7640000826101c0015160200151115b806116f25750670de0b6b3a7640000826101c0015160400151115b8061170d5750670de0b6b3a7640000826101c0015160600151115b1561152e576040516322f72cc360e11b815260040160405180910390fd5b6040518061020001604052805f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f80191681526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020015f6001600160a01b031681526020016117fa60405180608001604052805f81526020015f81526020015f81526020015f81525090565b905290565b5f81518084525f5b8181101561182357602081850181015186830182015201611807565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f61071160208301846117ff565b6001600160a01b0381168114611868575f80fd5b50565b803561187681611854565b919050565b634e487b7160e01b5f52604160045260245ffd5b6040516060810167ffffffffffffffff811182821017156118b2576118b261187b565b60405290565b6040516101e0810167ffffffffffffffff811182821017156118b2576118b261187b565b8015158114611868575f80fd5b5f67ffffffffffffffff808411156119035761190361187b565b604051601f8501601f19908116603f0116810190828211818310171561192b5761192b61187b565b81604052809350858152868686011115611943575f80fd5b858560208301375f602087830101525050509392505050565b5f82601f83011261196b575f80fd5b610711838335602085016118e9565b5f805f805f60a0868803121561198e575f80fd5b8535945060208601356119a081611854565b93506040860135925060608601359150608086013567ffffffffffffffff808211156119ca575f80fd5b908701906060828a0312156119dd575f80fd5b6119e561188f565b82356119f081611854565b81526020830135611a00816118dc565b6020820152604083013582811115611a16575f80fd5b611a228b82860161195c565b6040830152508093505050509295509295909350565b5f8060408385031215611a49575f80fd5b8235611a5481611854565b946020939093013593505050565b5f60208284031215611a72575f80fd5b5035919050565b8151815260208083015190820152604080830151908201526060808301516001600160a01b039081169183019190915260808084015182169083015260a08084015182169083015260c08084015182169083015260e08084015182169083015261010080840151918216818401526101208301915b505092915050565b5f60808284031215611b06575f80fd5b6040516080810181811067ffffffffffffffff82111715611b2957611b2961187b565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f6102408284031215611b6b575f80fd5b611b736118b8565b9050611b7e8261186b565b8152611b8c6020830161186b565b6020820152611b9d6040830161186b565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e0820152610100808301358183015250610120808301358183015250610140611bfa81840161186b565b90820152610160611c0c83820161186b565b90820152610180611c1e83820161186b565b908201526101a0611c3083820161186b565b908201526101c0611c4384848301611af6565b9082015292915050565b5f805f805f6102c08688031215611c62575f80fd5b85359450611c738760208801611b5a565b935061026086013567ffffffffffffffff811115611c8f575f80fd5b611c9b8882890161195c565b9598949750949561028081013595506102a001359392505050565b5f805f805f6102c08688031215611ccb575f80fd5b85359450602086013567ffffffffffffffff80821115611ce9575f80fd5b818801915088601f830112611cfc575f80fd5b611d0b898335602085016118e9565b9550611d1a8960408a01611b5a565b9450610280880135915080821115611d30575f80fd5b50611d3d8882890161195c565b959894975092956102a001359392505050565b600181811c90821680611d6457607f821691505b602082108103611d8257634e487b7160e01b5f52602260045260245ffd5b50919050565b8381528260208201526060604082015260018060a01b0382511660608201526020820151151560808201525f6040830151606060a0840152611dcd60c08401826117ff565b9695505050505050565b5f60208284031215611de7575f80fd5b5051919050565b8181038181111561071457634e487b7160e01b5f52601160045260245ffd5b81516001600160a01b0316815261024081016020830151611e3960208401826001600160a01b03169052565b506040830151611e5460408401826001600160a01b03169052565b50606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525061012080840151818401525061014080840151611eba828501826001600160a01b03169052565b5050610160838101516001600160a01b0390811691840191909152610180808501518216908401526101a080850151909116908301526101c08084015180518285015260208101516101e085015260408101516102008501526060810151610220850152611aee565b80516001600160a01b031682526020810151611f4a60208401826001600160a01b03169052565b506040810151611f6560408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151818401525061012080820151818401525061014080820151818401525061016080820151611fd7828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e090810151805191830191909152602081015161020083015260408101516102208301526060015161024090910152565b5f6102c061204e8388611f23565b6001600160a01b0386166102608401526102808301819052612072818401866117ff565b915050826102a083015295945050505050565b5f60208284031215612095575f80fd5b81516120a081611854565b9392505050565b6001600160a01b039390931683526020830191909152604082015260600190565b5f6103808083526120db8184018e6117ff565b90506120ea602084018d611f23565b6001600160a01b038b81166102808501528382036102a085015261210e828c6117ff565b9981166102c08501529788166102e084015250509385166103008501529184166103208401529092166103408201526103600152949350505050565b5f6020828403121561215a575f80fd5b81516120a0816118dc565b5f8261217f57634e487b7160e01b5f52601260045260245ffd5b50069056fe5374455448487970657264726976654465706c6f796572436f6f7264696e61746f72a26469706673582212205281a2ad1bc58ab5d42f86785719acf7110a528eb6bd4df3ac2160639d343b8c64736f6c6343000818003361010060405234801562000011575f80fd5b5060405162001f8938038062001f8983398101604081905262000034916200028a565b823081818989895f620000488482620003cb565b506001620000578382620003cb565b5060ff81166080524660a0526200006d6200011a565b60c0525050600680546001600160a01b038086166001600160a01b03199283168117909355600780549186169190921617905560405190915033907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a36040516001600160a01b0382169033907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b76389980198905f90a35050505090151560e052600c55506200051192505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f5f6040516200014c919062000497565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112620001d8575f80fd5b81516001600160401b0380821115620001f557620001f5620001b4565b604051601f8301601f19908116603f01168101908282118183101715620002205762000220620001b4565b81604052838152602092508660208588010111156200023d575f80fd5b5f91505b8382101562000260578582018301518183018401529082019062000241565b5f602085830101528094505050505092915050565b8051801515811462000285575f80fd5b919050565b5f805f805f8060c08789031215620002a0575f80fd5b86516001600160401b0380821115620002b7575f80fd5b620002c58a838b01620001c8565b97506020890151915080821115620002db575f80fd5b50620002ea89828a01620001c8565b955050604087015160ff8116811462000301575f80fd5b60608801519094506001600160a01b03811681146200031e575f80fd5b92506200032e6080880162000275565b915060a087015190509295509295509295565b600181811c908216806200035657607f821691505b6020821081036200037557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620003c657805f5260205f20601f840160051c81016020851015620003a25750805b601f840160051c820191505b81811015620003c3575f8155600101620003ae565b50505b505050565b81516001600160401b03811115620003e757620003e7620001b4565b620003ff81620003f8845462000341565b846200037b565b602080601f83116001811462000435575f84156200041d5750858301515b5f19600386901b1c1916600185901b1785556200048f565b5f85815260208120601f198616915b82811015620004655788860151825594840194600190910190840162000444565b50858210156200048357878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f808354620004a68162000341565b60018281168015620004c15760018114620004d75762000505565b60ff198416875282151583028701945062000505565b875f526020805f205f5b85811015620004fc5781548a820152908401908201620004e1565b50505082870194505b50929695505050505050565b60805160a05160c05160e051611a1a6200056f5f395f81816103c7015281816105d3015281816106e8015281816109bb01528181610a5801528181610d8a0152610deb01525f61099701525f61096201525f6103080152611a1a5ff3fe608060405234801561000f575f80fd5b5060043610610213575f3560e01c80637a8c63b51161011f578063b7009613116100a9578063dd62ed3e11610079578063dd62ed3e1461050a578063e688747b14610534578063ea7ca27614610569578063ed0d0efb1461059f578063f2fde38b146105be575f80fd5b8063b7009613146104a9578063bf7e214f146104bc578063c53a3985146104cf578063d505accf146104f7575f80fd5b806395d89b41116100ef57806395d89b41146104465780639dc29fac1461044e578063a0712d6814610461578063a9059cbb14610474578063aed3077714610487575f80fd5b80637a8c63b5146103c25780637a9e5e4b146103e95780637ecebe00146103fc5780638da5cb5b1461041b575f80fd5b806323b872dd116101a057806342966c681161017057806342966c68146103575780634b5159da1461036a57806367aff4841461037d57806370a0823114610390578063728b952b146103af575f80fd5b806323b872dd146102f0578063313ce567146103035780633644e5151461033c57806340c10f1914610344575f80fd5b8063095ea7b3116101e6578063095ea7b3146102865780630bade8a4146102a95780630ea9b75b146102cb57806318160ddd146102de578063239c70ae146102e7575f80fd5b806305f05a941461021757806306a36aee1461022c57806306fdde031461025e578063088a4ed014610273575b5f80fd5b61022a6102253660046114ae565b6105d1565b005b61024b61023a3660046114e5565b60096020525f908152604090205481565b6040519081526020015b60405180910390f35b61026661065b565b6040516102559190611500565b61022a61028136600461154c565b6106e6565b610299610294366004611563565b610742565b6040519015158152602001610255565b6102996102b73660046115a9565b600a6020525f908152604090205460ff1681565b61022a6102d93660046115d2565b6107ae565b61024b60025481565b61024b600c5481565b6102996102fe366004611616565b610883565b61032a7f000000000000000000000000000000000000000000000000000000000000000081565b60405160ff9091168152602001610255565b61024b61095f565b61022a610352366004611563565b6109b9565b61022a61036536600461154c565b610a56565b61022a610378366004611654565b610aba565b61022a61038b36600461166e565b610b4a565b61024b61039e3660046114e5565b60036020525f908152604090205481565b61022a6103bd366004611699565b610c0f565b6102997f000000000000000000000000000000000000000000000000000000000000000081565b61022a6103f73660046114e5565b610c96565b61024b61040a3660046114e5565b60056020525f908152604090205481565b60065461042e906001600160a01b031681565b6040516001600160a01b039091168152602001610255565b610266610d7b565b61022a61045c366004611563565b610d88565b61022a61046f36600461154c565b610de9565b610299610482366004611563565b610e82565b6102996104953660046114e5565b600d6020525f908152604090205460ff1681565b6102996104b73660046116c5565b610ee5565b60075461042e906001600160a01b031681565b61042e6104dd3660046114e5565b60086020525f90815260409020546001600160a01b031681565b61022a610505366004611709565b610fde565b61024b610518366004611699565b600460209081525f928352604080842090915290825290205481565b610299610542366004611772565b6001600160e01b0319165f908152600b602052604090205460ff919091161c600116151590565b6102996105773660046117a3565b6001600160a01b03919091165f90815260096020526040902054600160ff9092161c16151590565b61024b6105ad3660046115a9565b600b6020525f908152604090205481565b61022a6105cc3660046114e5565b61121c565b7f0000000000000000000000000000000000000000000000000000000000000000156106315761060c335f356001600160e01b031916611298565b6106315760405162461bcd60e51b8152600401610628906117cd565b60405180910390fd5b6001600160a01b03919091165f908152600d60205260409020805460ff1916911515919091179055565b5f805461066790611804565b80601f016020809104026020016040519081016040528092919081815260200182805461069390611804565b80156106de5780601f106106b5576101008083540402835291602001916106de565b820191905f5260205f20905b8154815290600101906020018083116106c157829003601f168201915b505050505081565b7f00000000000000000000000000000000000000000000000000000000000000001561073d57610721335f356001600160e01b031916611298565b61073d5760405162461bcd60e51b8152600401610628906117cd565b600c55565b335f8181526004602090815260408083206001600160a01b038716808552925280832085905551919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259061079c9086815260200190565b60405180910390a35060015b92915050565b6107c3335f356001600160e01b031916611298565b6107df5760405162461bcd60e51b81526004016106289061183c565b801561080e576001600160e01b031982165f908152600b602052604090208054600160ff86161b179055610834565b6001600160e01b031982165f908152600b602052604090208054600160ff86161b191690555b816001600160e01b0319168360ff167fbfe16b2c35ce23dfd1ab0e7b5d086a10060c9b52d1574e1680c881b3b3a2b15183604051610876911515815260200190565b60405180910390a3505050565b6001600160a01b0383165f9081526004602090815260408083203384529091528120545f1981146108dc576108b88382611876565b6001600160a01b0386165f9081526004602090815260408083203384529091529020555b6001600160a01b0385165f9081526003602052604081208054859290610903908490611876565b90915550506001600160a01b038085165f81815260036020526040908190208054870190555190918716905f805160206119c58339815191529061094a9087815260200190565b60405180910390a360019150505b9392505050565b5f7f000000000000000000000000000000000000000000000000000000000000000046146109945761098f61133f565b905090565b507f000000000000000000000000000000000000000000000000000000000000000090565b7f000000000000000000000000000000000000000000000000000000000000000015610a10576109f4335f356001600160e01b031916611298565b610a105760405162461bcd60e51b8152600401610628906117cd565b335f908152600d602052604090205460ff16610a4857600c54811115610a485760405162461bcd60e51b815260040161062890611889565b610a5282826113d7565b5050565b7f000000000000000000000000000000000000000000000000000000000000000015610aad57610a91335f356001600160e01b031916611298565b610aad5760405162461bcd60e51b8152600401610628906117cd565b610ab7338261142e565b50565b610acf335f356001600160e01b031916611298565b610aeb5760405162461bcd60e51b81526004016106289061183c565b6001600160e01b031982165f818152600a6020908152604091829020805460ff191685151590811790915591519182527f36d28126bef21a4f3765d7fcb7c45cead463ae4c41094ef3b771ede598544103910160405180910390a25050565b610b5f335f356001600160e01b031916611298565b610b7b5760405162461bcd60e51b81526004016106289061183c565b8015610ba9576001600160a01b0383165f9081526009602052604090208054600160ff85161b179055610bce565b6001600160a01b0383165f9081526009602052604090208054600160ff85161b191690555b8160ff16836001600160a01b03167f4c9bdd0c8e073eb5eda2250b18d8e5121ff27b62064fbeeeed4869bb99bc5bf283604051610876911515815260200190565b610c24335f356001600160e01b031916611298565b610c405760405162461bcd60e51b81526004016106289061183c565b6001600160a01b038281165f8181526008602052604080822080546001600160a01b0319169486169485179055517fa4908e11a5f895b13d51526c331ac93cdd30e59772361c5d07874eb36bff20659190a35050565b6006546001600160a01b0316331480610d28575060075460405163b700961360e01b81526001600160a01b039091169063b700961390610ce990339030906001600160e01b03195f3516906004016118cb565b602060405180830381865afa158015610d04573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d2891906118f8565b610d30575f80fd5b600780546001600160a01b0319166001600160a01b03831690811790915560405133907fa3396fd7f6e0a21b50e5089d2da70d5ac0a3bbbd1f617a93f134b76389980198905f90a350565b6001805461066790611804565b7f000000000000000000000000000000000000000000000000000000000000000015610ddf57610dc3335f356001600160e01b031916611298565b610ddf5760405162461bcd60e51b8152600401610628906117cd565b610a52828261142e565b7f000000000000000000000000000000000000000000000000000000000000000015610e4057610e24335f356001600160e01b031916611298565b610e405760405162461bcd60e51b8152600401610628906117cd565b335f908152600d602052604090205460ff16610e7857600c54811115610e785760405162461bcd60e51b815260040161062890611889565b610ab733826113d7565b335f90815260036020526040812080548391908390610ea2908490611876565b90915550506001600160a01b0383165f81815260036020526040908190208054850190555133905f805160206119c58339815191529061079c9086815260200190565b6001600160a01b038083165f908152600860205260408120549091168015610f7e5760405163b700961360e01b81526001600160a01b0382169063b700961390610f37908890889088906004016118cb565b602060405180830381865afa158015610f52573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610f7691906118f8565b915050610958565b6001600160e01b031983165f908152600a602052604090205460ff1680610fd557506001600160e01b031983165f908152600b60209081526040808320546001600160a01b03891684526009909252909120541615155b95945050505050565b4284101561102e5760405162461bcd60e51b815260206004820152601760248201527f5045524d49545f444541444c494e455f455850495245440000000000000000006044820152606401610628565b5f600161103961095f565b6001600160a01b038a81165f8181526005602090815260409182902080546001810190915582517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98184015280840194909452938d166060840152608083018c905260a083019390935260c08083018b90528151808403909101815260e08301909152805192019190912061190160f01b6101008301526101028201929092526101228101919091526101420160408051601f1981840301815282825280516020918201205f84529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa158015611141573d5f803e3d5ffd5b5050604051601f1901519150506001600160a01b038116158015906111775750876001600160a01b0316816001600160a01b0316145b6111b45760405162461bcd60e51b815260206004820152600e60248201526d24a72b20a624a22fa9a4a3a722a960911b6044820152606401610628565b6001600160a01b039081165f9081526004602090815260408083208a8516808552908352928190208990555188815291928a16917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a350505050505050565b611231335f356001600160e01b031916611298565b61124d5760405162461bcd60e51b81526004016106289061183c565b600680546001600160a01b0319166001600160a01b03831690811790915560405133907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350565b6007545f906001600160a01b0316801580159061131f575060405163b700961360e01b81526001600160a01b0382169063b7009613906112e0908790309088906004016118cb565b602060405180830381865afa1580156112fb573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061131f91906118f8565b8061133757506006546001600160a01b038581169116145b949350505050565b5f7f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f5f60405161136f9190611913565b6040805191829003822060208301939093528101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160405160208183030381529060405280519060200120905090565b8060025f8282546113e891906119b1565b90915550506001600160a01b0382165f818152600360209081526040808320805486019055518481525f805160206119c583398151915291015b60405180910390a35050565b6001600160a01b0382165f9081526003602052604081208054839290611455908490611876565b90915550506002805482900390556040518181525f906001600160a01b038416905f805160206119c583398151915290602001611422565b6001600160a01b0381168114610ab7575f80fd5b8015158114610ab7575f80fd5b5f80604083850312156114bf575f80fd5b82356114ca8161148d565b915060208301356114da816114a1565b809150509250929050565b5f602082840312156114f5575f80fd5b81356109588161148d565b5f602080835283518060208501525f5b8181101561152c57858101830151858201604001528201611510565b505f604082860101526040601f19601f8301168501019250505092915050565b5f6020828403121561155c575f80fd5b5035919050565b5f8060408385031215611574575f80fd5b823561157f8161148d565b946020939093013593505050565b80356001600160e01b0319811681146115a4575f80fd5b919050565b5f602082840312156115b9575f80fd5b6109588261158d565b803560ff811681146115a4575f80fd5b5f805f606084860312156115e4575f80fd5b6115ed846115c2565b92506115fb6020850161158d565b9150604084013561160b816114a1565b809150509250925092565b5f805f60608486031215611628575f80fd5b83356116338161148d565b925060208401356116438161148d565b929592945050506040919091013590565b5f8060408385031215611665575f80fd5b6114ca8361158d565b5f805f60608486031215611680575f80fd5b833561168b8161148d565b92506115fb602085016115c2565b5f80604083850312156116aa575f80fd5b82356116b58161148d565b915060208301356114da8161148d565b5f805f606084860312156116d7575f80fd5b83356116e28161148d565b925060208401356116f28161148d565b91506117006040850161158d565b90509250925092565b5f805f805f805f60e0888a03121561171f575f80fd5b873561172a8161148d565b9650602088013561173a8161148d565b95506040880135945060608801359350611756608089016115c2565b925060a0880135915060c0880135905092959891949750929550565b5f8060408385031215611783575f80fd5b61178c836115c2565b915061179a6020840161158d565b90509250929050565b5f80604083850312156117b4575f80fd5b82356117bf8161148d565b915061179a602084016115c2565b6020808252601d908201527f45524332304d696e7461626c653a206e6f7420617574686f72697a6564000000604082015260600190565b600181811c9082168061181857607f821691505b60208210810361183657634e487b7160e01b5f52602260045260245ffd5b50919050565b6020808252600c908201526b15539055551213d49256915160a21b604082015260600190565b634e487b7160e01b5f52601160045260245ffd5b818103818111156107a8576107a8611862565b60208082526022908201527f45524332304d696e7461626c653a20496e76616c6964206d696e7420616d6f756040820152611b9d60f21b606082015260800190565b6001600160a01b0393841681529190921660208201526001600160e01b0319909116604082015260600190565b5f60208284031215611908575f80fd5b8151610958816114a1565b5f8083545f60018260011c9150600183168061193057607f831692505b6020808410820361194f57634e487b7160e01b5f52602260045260245ffd5b8180156119635760018114611978576119a3565b60ff19861689528415158502890196506119a3565b5f8a8152602090205f5b8681101561199b5781548b820152908501908301611982565b505084890196505b509498975050505050505050565b808201808211156107a8576107a861186256feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122071d019759a0b7d5e5516a14a130a7dc9966517255e3efb5f5fa0bc4d20fb477c64736f6c634300081800336080604052600180546001600160a01b03191681178155600255348015610024575f80fd5b5060405161186e38038061186e83398101604081905261004391610069565b5f61004e82826101af565b505061026e565b634e487b7160e01b5f52604160045260245ffd5b5f602080838503121561007a575f80fd5b82516001600160401b0380821115610090575f80fd5b818501915085601f8301126100a3575f80fd5b8151818111156100b5576100b5610055565b604051601f8201601f19908116603f011681019083821181831017156100dd576100dd610055565b8160405282815288868487010111156100f4575f80fd5b5f93505b8284101561011557848401860151818501870152928501926100f8565b5f86848301015280965050505050505092915050565b600181811c9082168061013f57607f821691505b60208210810361015d57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156101aa57805f5260205f20601f840160051c810160208510156101885750805b601f840160051c820191505b818110156101a7575f8155600101610194565b50505b505050565b81516001600160401b038111156101c8576101c8610055565b6101dc816101d6845461012b565b84610163565b602080601f83116001811461020f575f84156101f85750858301515b5f19600386901b1c1916600185901b178555610266565b5f85815260208120601f198616915b8281101561023d5788860151825594840194600190910190840161021e565b508582101561025a57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b6115f38061027b5f395ff3fe608060405234801561000f575f80fd5b506004361061007a575f3560e01c80630ecaea73116100585780630ecaea73146100fb57806354fd4d501461010e578063600eb4ba14610134578063d13053bb1461016a575f80fd5b806304baa00b1461007e57806306fdde03146100c85780630710fd58146100d0575b5f80fd5b6100b2604051806040016040528060158152602001744552433230466f72776172646572466163746f727960581b81525081565b6040516100bf91906103f0565b60405180910390f35b6100b2610180565b6100e36100de36600461043c565b61020b565b6040516001600160a01b0390911681526020016100bf565b6100e361010936600461043c565b6102de565b6100b260405180604001604052806007815260200166076312e302e32360cc1b81525081565b61014b6001546002546001600160a01b0390911691565b604080516001600160a01b0390931683526020830191909152016100bf565b6101726103b6565b6040519081526020016100bf565b5f805461018c90610471565b80601f01602080910402602001604051908101604052809291908181526020018280546101b890610471565b80156102035780601f106101da57610100808354040283529160200191610203565b820191905f5260205f20905b8154815290600101906020018083116101e657829003601f168201915b505050505081565b604080516001600160a01b03841660208201529081018290525f9081906060016040516020818303038152906040528051906020012090505f60ff60f81b30836040518060200161025b906103e3565b6020820181038252601f19601f82011660405250805190602001206040516020016102bd94939291906001600160f81b031994909416845260609290921b6bffffffffffffffffffffffff191660018401526015830152603582015260550190565b60408051808303601f19018152919052805160209091012095945050505050565b6002819055600180546001600160a01b0319166001600160a01b03841690811790915560408051602081019290925281018290525f9081906060016040516020818303038152906040528051906020012090505f8160405161033f906103e3565b8190604051809103905ff590508015801561035c573d5f803e3d5ffd5b509050610369858561020b565b6001600160a01b0316816001600160a01b0316146103995760405162e0775560e61b815260040160405180910390fd5b600180546001600160a01b03191681178155600255949350505050565b6040516103c5602082016103e3565b6020820181038252601f19601f820116604052508051906020012081565b611114806104aa83390190565b5f602080835283518060208501525f5b8181101561041c57858101830151858201604001528201610400565b505f604082860101526040601f19601f8301168501019250505092915050565b5f806040838503121561044d575f80fd5b82356001600160a01b0381168114610463575f80fd5b946020939093013593505050565b600181811c9082168061048557607f821691505b6020821081036104a357634e487b7160e01b5f52602260045260245ffd5b5091905056fe60c060405234801561000f575f80fd5b50604080516330075a5d60e11b815281513392839263600eb4ba92600480830193928290030181865afa158015610048573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061006c9190610081565b60a0526001600160a01b0316608052506100b8565b5f8060408385031215610092575f80fd5b82516001600160a01b03811681146100a8575f80fd5b6020939093015192949293505050565b60805160a051610fb661015e5f395f818161017d015281816102ee0152818161039e015281816104960152818161053e0152818161064a015281816106fc0152818161076b01528181610a250152610bc401525f81816102a601528181610317015281816103e3015281816104be0152818161058b0152818161068201528181610725015281816107ba01528181610a6201528181610b3d0152610c020152610fb65ff3fe608060405234801561000f575f80fd5b5060043610610106575f3560e01c806354fd4d501161009e578063a9059cbb1161006e578063a9059cbb1461025e578063d505accf14610271578063dd62ed3e14610286578063f698da2514610299578063fc0c546a146102a1575f80fd5b806354fd4d50146101fe57806370a08231146102245780637ecebe001461023757806395d89b4114610256575f80fd5b806318160ddd116100d957806318160ddd146101ad57806323b872dd146101b557806330adf81f146101c8578063313ce567146101ef575f80fd5b806304baa00b1461010a57806306fdde031461014d578063095ea7b31461015557806317d70f7c14610178575b5f80fd5b6101376040518060400160405280600e81526020016d22a92199182337b93bb0b93232b960911b81525081565b6040516101449190610d22565b60405180910390f35b6101376102e0565b610168610163366004610d6f565b61038f565b6040519015158152602001610144565b61019f7f000000000000000000000000000000000000000000000000000000000000000081565b604051908152602001610144565b61019f610487565b6101686101c3366004610d97565b61052f565b61019f7f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c981565b60405160128152602001610144565b61013760405180604001604052806007815260200166076312e302e32360cc1b81525081565b61019f610232366004610dd0565b61063b565b61019f610245366004610dd0565b5f6020819052908152604090205481565b6101376106ed565b61016861026c366004610d6f565b61075c565b61028461027f366004610df0565b610850565b005b61019f610294366004610e5d565b610b14565b61019f610c72565b6102c87f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610144565b604051622b600360e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169062ad800c906024015b5f60405180830381865afa158015610363573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261038a9190810190610ea2565b905090565b6040516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b038381166024830152604482018390523360648301525f917f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac906084015f604051808303815f87803b158015610426575f80fd5b505af1158015610438573d5f803e3d5ffd5b50506040518481526001600160a01b03861692503391507f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925906020015b60405180910390a35060015b92915050565b60405163bd85b03960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201525f907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063bd85b03990602401602060405180830381865afa15801561050b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061038a9190610f4a565b604051633912022f60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0384811660248301528381166044830152606482018390523360848301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a4015f604051808303815f87803b1580156105ce575f80fd5b505af11580156105e0573d5f803e3d5ffd5b50505050826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161062991815260200190565b60405180910390a35060019392505050565b604051631b2b776160e11b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b0382811660248301525f917f000000000000000000000000000000000000000000000000000000000000000090911690633656eec290604401602060405180830381865afa1580156106c9573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104819190610f4a565b604051634e41a1fb60e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526060907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634e41a1fb90602401610349565b604051633912022f60e21b81527f0000000000000000000000000000000000000000000000000000000000000000600482015233602482018190526001600160a01b0384811660448401526064830184905260848301919091525f917f00000000000000000000000000000000000000000000000000000000000000009091169063e44808bc9060a4015f604051808303815f87803b1580156107fd575f80fd5b505af115801561080f573d5f803e3d5ffd5b50506040518481526001600160a01b03861692503391507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef90602001610475565b834211156108715760405163f87d927160e01b815260040160405180910390fd5b6001600160a01b0387166108985760405163f0dd15fd60e01b815260040160405180910390fd5b6001600160a01b0387165f90815260208190526040812054906108b9610c72565b604080517f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c960208201526001600160a01b03808d1692820192909252908a1660608201526080810189905260a0810184905260c0810188905260e0016040516020818303038152906040528051906020012060405160200161095292919061190160f01b81526002810192909252602282015260420190565b60408051601f1981840301815282825280516020918201205f80855291840180845281905260ff89169284019290925260608301879052608083018690529092509060019060a0016020604051602081039080840390855afa1580156109ba573d5f803e3d5ffd5b505050602060405103519050896001600160a01b0316816001600160a01b0316146109f857604051638baa579f60e01b815260040160405180910390fd5b6001600160a01b03808b165f8181526020819052604090819020600187019055516313b4b5ab60e21b81527f000000000000000000000000000000000000000000000000000000000000000060048201528b83166024820152604481018b905260648101919091527f000000000000000000000000000000000000000000000000000000000000000090911690634ed2d6ac906084015f604051808303815f87803b158015610aa5575f80fd5b505af1158015610ab7573d5f803e3d5ffd5b50505050886001600160a01b03168a6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258a604051610b0091815260200190565b60405180910390a350505050505050505050565b60405163e985e9c560e01b81526001600160a01b03838116600483015282811660248301525f917f00000000000000000000000000000000000000000000000000000000000000009091169063e985e9c590604401602060405180830381865afa158015610b84573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ba89190610f61565b15610bb557505f19610481565b6040516321ff32a960e01b81527f000000000000000000000000000000000000000000000000000000000000000060048201526001600160a01b03848116602483015283811660448301527f000000000000000000000000000000000000000000000000000000000000000016906321ff32a990606401602060405180830381865afa158015610c47573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c6b9190610f4a565b9050610481565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b5f5b83811015610d1a578181015183820152602001610d02565b50505f910152565b602081525f8251806020840152610d40816040850160208701610d00565b601f01601f19169190910160400192915050565b80356001600160a01b0381168114610d6a575f80fd5b919050565b5f8060408385031215610d80575f80fd5b610d8983610d54565b946020939093013593505050565b5f805f60608486031215610da9575f80fd5b610db284610d54565b9250610dc060208501610d54565b9150604084013590509250925092565b5f60208284031215610de0575f80fd5b610de982610d54565b9392505050565b5f805f805f805f60e0888a031215610e06575f80fd5b610e0f88610d54565b9650610e1d60208901610d54565b95506040880135945060608801359350608088013560ff81168114610e40575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f8060408385031215610e6e575f80fd5b610e7783610d54565b9150610e8560208401610d54565b90509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610eb2575f80fd5b815167ffffffffffffffff80821115610ec9575f80fd5b818401915084601f830112610edc575f80fd5b815181811115610eee57610eee610e8e565b604051601f8201601f19908116603f01168101908382118183101715610f1657610f16610e8e565b81604052828152876020848701011115610f2e575f80fd5b610f3f836020830160208801610d00565b979650505050505050565b5f60208284031215610f5a575f80fd5b5051919050565b5f60208284031215610f71575f80fd5b81518015158114610de9575f80fdfea26469706673582212206e7d82b0670603a425e268f73c7e94ab35071872687c940fb8e551dd854e0b5464736f6c63430008180033a26469706673582212205cf8cffaafacdab4b6cbf9d09577a03a4df6264d508516f555432369a4bf289264736f6c63430008180033608060405234801561000f575f80fd5b5061286f8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610153575f3560e01c80639b724ad4116100bf578063e2f273bd11610079578063e2f273bd146103ee578063e967e38814610401578063ea35032114610414578063f32c9e3414610434578063f59d00b914610454578063f851a4401461045c575f80fd5b80639b724ad414610307578063a587bbe11461035d578063b73e3fab14610388578063bc30e7a1146103a8578063d2f72d52146103bb578063daac24da146103db575f80fd5b80634db6c0e0116101105780634db6c0e01461026957806354fd4d50146102895780636e95d67c146102af578063716ba5f6146102c15780637ab4339d146102e157806384da92a7146102f4575f80fd5b806304baa00b1461015757806306fdde031461019e57806318bb3b54146101a65780631ff30ad2146102185780632ad19de81461022d578063392e53cd1461024d575b5f80fd5b6101886040518060400160405280601281526020017148797065726472697665526567697374727960701b81525081565b6040516101959190611f2a565b60405180910390f35b61018861046f565b61020b6101b4366004611f5e565b604080518082019091525f8082526020820152506040805180820182526001600160a01b039283165f8181526006602081815294822080546001600160801b03168552929091528352600101549092169082015290565b6040516101959190611f77565b61022b610226366004611fde565b6104fb565b005b61024061023b366004611f5e565b6108c1565b60405161019591906120dc565b5f546102599060ff1681565b6040519015158152602001610195565b61027c6102773660046120ee565b610a44565b604051610195919061212c565b61018860405180604001604052806007815260200166076312e302e32360cc1b81525081565b6005545b604051908152602001610195565b6102d46102cf36600461218b565b610b88565b60405161019591906121ab565b61022b6102ef3660046121f7565b610c86565b61022b6103023660046122da565b610d26565b61034e610315366004611f5e565b60408051602080820183525f91829052825180820184526001600160a01b039490941682526004905220546001600160801b0316815290565b60405190518152602001610195565b61037061036b366004612353565b610d9d565b6040516001600160a01b039091168152602001610195565b61039b6103963660046120ee565b610dcb565b60405161019591906123bb565b6102d46103b636600461218b565b611047565b6103ce6103c93660046120ee565b611145565b604051610195919061241d565b6103706103e9366004612353565b6113f4565b61022b6103fc366004611f5e565b611408565b61022b61040f366004612472565b61147b565b6104276104223660046120ee565b611821565b60405161019591906124d8565b610447610442366004611f5e565b611907565b6040516101959190612510565b6003546102b3565b600254610370906001600160a01b031681565b6001805461047c90612522565b80601f01602080910402602001604051908101604052809291908181526020018280546104a890612522565b80156104f35780601f106104ca576101008083540402835291602001916104f3565b820191905f5260205f20905b8154815290600101906020018083116104d657829003601f168201915b505050505081565b6002546001600160a01b03163314610525576040516282b42960e81b815260040160405180910390fd5b84831415806105345750848114155b156105525760405163aaad13f760e01b815260040160405180910390fd5b5f5b858110156108b8575f60065f8989858181106105725761057261255a565b90506020020160208101906105879190611f5e565b6001600160a01b0316815260208101919091526040015f20546001600160801b031690508585838181106105bd576105bd61255a565b90506020020160208101906105d2919061256e565b6001600160801b03161580156105e757508015155b1561066f575f8484848181106105ff576105ff61255a565b90506020020160208101906106149190611f5e565b6001600160a01b03161461063b57604051637a44db9560e01b815260040160405180910390fd5b61066a8888848181106106505761065061255a565b90506020020160208101906106659190611f5e565b611998565b6107f2565b8585838181106106815761068161255a565b9050602002016020810190610696919061256e565b6001600160801b0316158015906106ac57508015155b1561072e5761066a8888848181106106c6576106c661255a565b90506020020160208101906106db9190611f5e565b8787858181106106ed576106ed61255a565b9050602002016020810190610702919061256e565b8686868181106107145761071461255a565b90506020020160208101906107299190611f5e565b611ae6565b8585838181106107405761074061255a565b9050602002016020810190610755919061256e565b6001600160801b03161580159061076a575080155b156107ec5761066a8888848181106107845761078461255a565b90506020020160208101906107999190611f5e565b8787858181106107ab576107ab61255a565b90506020020160208101906107c0919061256e565b8686868181106107d2576107d261255a565b90506020020160208101906107e79190611f5e565b611c29565b506108b0565b8383838181106108045761080461255a565b90506020020160208101906108199190611f5e565b6001600160a01b03168686848181106108345761083461255a565b9050602002016020810190610849919061256e565b6001600160801b03168989858181106108645761086461255a565b90506020020160208101906108799190611f5e565b6001600160a01b03167fdcdda2b8267b8fe0ebfeb2cc8f266807b412bec096d16cbbe576d46d122553e060405160405180910390a4505b600101610554565b50505050505050565b6108c9611ea7565b6040805160a0810182526001600160a01b038085165f8181526006602081815286832080546001600160801b031687528484529181526001909101549093169284019290925283516306fdde0360e01b8152845187958501936306fdde0392600480820193918290030181865afa158015610946573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261096d9190810190612594565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b81526004015f60405180830381865afa1580156109ad573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526109d49190810190612594565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b81526004015f60405180830381865afa158015610a14573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610a3b9190810190612594565b90529392505050565b6060816001600160401b03811115610a5e57610a5e612270565b604051908082528060200260200182016040528015610aa257816020015b604080518082019091525f8082526020820152815260200190600190039081610a7c5790505b5090505f5b82811015610b8057604051806040016040528060065f878786818110610acf57610acf61255a565b9050602002016020810190610ae49190611f5e565b6001600160a01b031681526020808201929092526040015f908120546001600160801b03168352910190600690878786818110610b2357610b2361255a565b9050602002016020810190610b389190611f5e565b6001600160a01b03908116825260208201929092526040015f20600101541690528251839083908110610b6d57610b6d61255a565b6020908102919091010152600101610aa7565b505b92915050565b6060818310610baa57604051633b2735ab60e11b815260040160405180910390fd5b600354821115610bcd5760405163e0f7becb60e01b815260040160405180910390fd5b610bd783836125fc565b6001600160401b03811115610bee57610bee612270565b604051908082528060200260200182016040528015610c17578160200160208202803683370190505b509050825b82811015610b805760038181548110610c3757610c3761255a565b5f918252602090912001546001600160a01b031682610c5686846125fc565b81518110610c6657610c6661255a565b6001600160a01b0390921660209283029190910190910152600101610c1c565b5f5460ff1615610ca95760405163722c395b60e11b815260040160405180910390fd5b5f805460ff19166001908117909155610cc3838583612664565b50600280546001600160a01b0319166001600160a01b038316908117909155604051610cf2908590859061271d565b604051908190038120907fe57439d837715589a751e391f73a95929ecc96ae6aa09a16be8ae312d6147157905f90a3505050565b6002546001600160a01b03163314610d50576040516282b42960e81b815260040160405180910390fd5b6001610d5c828261272c565b5080604051610d6b91906127eb565b604051908190038120907f9f7688a97f1ac51fe03bac18af18d6810f9f11f0db08c59b1938a9ac825ef744905f90a250565b5f60038281548110610db157610db161255a565b5f918252602090912001546001600160a01b031692915050565b6060816001600160401b03811115610de557610de5612270565b604051908082528060200260200182016040528015610e4057816020015b610e2d60405180608001604052805f81526020016060815260200160608152602001606081525090565b815260200190600190039081610e035790505b5090505f5b82811015610b80575f848483818110610e6057610e6061255a565b9050602002016020810190610e759190611f5e565b9050604051806080016040528060045f888887818110610e9757610e9761255a565b9050602002016020810190610eac9190611f5e565b6001600160a01b03166001600160a01b031681526020019081526020015f205f015f9054906101000a90046001600160801b03166001600160801b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa158015610f29573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610f509190810190612594565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b81526004015f60405180830381865afa158015610f90573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f19168201604052610fb79190810190612594565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b81526004015f60405180830381865afa158015610ff7573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f1916820160405261101e9190810190612594565b8152508383815181106110335761103361255a565b602090810291909101015250600101610e45565b606081831061106957604051633b2735ab60e11b815260040160405180910390fd5b60055482111561108c5760405163e0f7becb60e01b815260040160405180910390fd5b61109683836125fc565b6001600160401b038111156110ad576110ad612270565b6040519080825280602002602001820160405280156110d6578160200160208202803683370190505b509050825b82811015610b8057600581815481106110f6576110f661255a565b5f918252602090912001546001600160a01b03168261111586846125fc565b815181106111255761112561255a565b6001600160a01b03909216602092830291909101909101526001016110db565b6060816001600160401b0381111561115f5761115f612270565b60405190808252806020026020018201604052801561119857816020015b611185611ea7565b81526020019060019003908161117d5790505b5090505f5b82811015610b80575f8484838181106111b8576111b861255a565b90506020020160208101906111cd9190611f5e565b90506040518060a0016040528060065f8888878181106111ef576111ef61255a565b90506020020160208101906112049190611f5e565b6001600160a01b031681526020808201929092526040015f908120546001600160801b031683529101906006908888878181106112435761124361255a565b90506020020160208101906112589190611f5e565b6001600160a01b03166001600160a01b031681526020019081526020015f206001015f9054906101000a90046001600160a01b03166001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b81526004015f60405180830381865afa1580156112d6573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526112fd9190810190612594565b8152602001826001600160a01b03166304baa00b6040518163ffffffff1660e01b81526004015f60405180830381865afa15801561133d573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526113649190810190612594565b8152602001826001600160a01b03166354fd4d506040518163ffffffff1660e01b81526004015f60405180830381865afa1580156113a4573d5f803e3d5ffd5b505050506040513d5f823e601f3d908101601f191682016040526113cb9190810190612594565b8152508383815181106113e0576113e061255a565b60209081029190910101525060010161119d565b5f60058281548110610db157610db161255a565b6002546001600160a01b03163314611432576040516282b42960e81b815260040160405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f54e4612788f90384e6843298d7854436f3a585b2c3831ab66abf1de63bfa6c2d905f90a250565b6002546001600160a01b031633146114a5576040516282b42960e81b815260040160405180910390fd5b8281146114c55760405163aaad13f760e01b815260040160405180910390fd5b5f5b8381101561181a575f60045f8787858181106114e5576114e561255a565b90506020020160208101906114fa9190611f5e565b6001600160a01b0316815260208101919091526040015f20546001600160801b031690508383838181106115305761153061255a565b9050602002016020810190611545919061256e565b6001600160801b031615801561155a57508015155b156115935761158e8686848181106115745761157461255a565b90506020020160208101906115899190611f5e565b611d6b565b611784565b8383838181106115a5576115a561255a565b90506020020160208101906115ba919061256e565b6001600160801b0316158015906115d057508015155b1561165e5761158e8686848181106115ea576115ea61255a565b90506020020160208101906115ff9190611f5e565b8585858181106116115761161161255a565b9050602002016020810190611626919061256e565b6001600160a01b03919091165f90815260046020526040902080546001600160801b0319166001600160801b03909216919091179055565b8383838181106116705761167061255a565b9050602002016020810190611685919061256e565b6001600160801b03161580159061169a575080155b1561177e5761158e8686848181106116b4576116b461255a565b90506020020160208101906116c99190611f5e565b8585858181106116db576116db61255a565b90506020020160208101906116f0919061256e565b60038054600181019091557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b810180546001600160a01b039094166001600160a01b0319909416841790556040805180820182526001600160801b03938416815291831660208381019182525f958652600490529320905192518216600160801b0292909116919091179055565b50611812565b8383838181106117965761179661255a565b90506020020160208101906117ab919061256e565b6001600160801b03168686848181106117c6576117c661255a565b90506020020160208101906117db9190611f5e565b6001600160a01b03167fd840ea8cb042bc840d3e55a04618ab268434d3d0a218638360a30fdb80de63f660405160405180910390a3505b6001016114c7565b5050505050565b6060816001600160401b0381111561183b5761183b612270565b60405190808252806020026020018201604052801561187a57816020015b60408051602081019091525f81528152602001906001900390816118595790505b5090505f5b82811015610b8057604051806020016040528060045f8787868181106118a7576118a761255a565b90506020020160208101906118bc9190611f5e565b6001600160a01b0316815260208101919091526040015f20546001600160801b0316905282518390839081106118f4576118f461255a565b602090810291909101015260010161187f565b61193160405180608001604052805f81526020016060815260200160608152602001606081525090565b604080516080810182526001600160a01b0384165f81815260046020818152858320546001600160801b0316855285516306fdde0360e01b81529551889691860194936306fdde0393838101939192918290030181865afa158015610946573d5f803e3d5ffd5b6001600160a01b0381165f90815260066020526040902054600554600160801b9091046001600160801b0316906119d06001826125fc565b826001600160801b031614611a83575f60056119ed6001846125fc565b815481106119fd576119fd61255a565b5f9182526020808320909101546001600160a01b03168083526006909152604090912080546001600160801b03808716600160801b810291909216179091556005805492935083929091908110611a5657611a5661255a565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6005805480611a9457611a94612806565b5f828152602080822083015f1990810180546001600160a01b031990811690915593019093556001600160a01b0395909516855260069091526040842093845560019390930180549093169092555050565b6001600160a01b038084165f90815260066020526040902060010154168015801590611b245750816001600160a01b0316816001600160a01b031614155b80611bba57506001600160a01b038116158015611b4957506001600160a01b03821615155b8015611bba57506040516335a2735f60e11b81526001600160a01b038581166004830152831690636b44e6be90602401602060405180830381865afa158015611b94573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bb8919061281a565b155b15611bd857604051637a44db9560e01b815260040160405180910390fd5b506001600160a01b039283165f90815260066020526040902080546001600160801b0319166001600160801b0393909316929092178255600190910180546001600160a01b03191691909216179055565b6001600160a01b03811615801590611ca657506040516335a2735f60e11b81526001600160a01b038481166004830152821690636b44e6be90602401602060405180830381865afa158015611c80573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611ca4919061281a565b155b15611cc457604051637a44db9560e01b815260040160405180910390fd5b6005805460018082019092557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db0810180546001600160a01b039687166001600160a01b03199182168117909255604080516060810182526001600160801b03978816815293871660208581019182529689168583019081525f94855260069097529220925191518616600160801b0291909516178155915191018054919093169116179055565b6001600160a01b0381165f90815260046020526040902054600354600160801b9091046001600160801b031690611da36001826125fc565b826001600160801b031614611e56575f6003611dc06001846125fc565b81548110611dd057611dd061255a565b5f9182526020808320909101546001600160a01b03168083526004909152604090912080546001600160801b03808716600160801b810291909216179091556003805492935083929091908110611e2957611e2961255a565b905f5260205f20015f6101000a8154816001600160a01b0302191690836001600160a01b03160217905550505b6003805480611e6757611e67612806565b5f828152602080822083015f1990810180546001600160a01b03191690559092019092556001600160a01b03949094168152600490935250506040812055565b6040518060a001604052805f81526020015f6001600160a01b031681526020016060815260200160608152602001606081525090565b5f5b83811015611ef7578181015183820152602001611edf565b50505f910152565b5f8151808452611f16816020860160208601611edd565b601f01601f19169290920160200192915050565b602081525f611f3c6020830184611eff565b9392505050565b80356001600160a01b0381168114611f59575f80fd5b919050565b5f60208284031215611f6e575f80fd5b611f3c82611f43565b815181526020808301516001600160a01b03169082015260408101610b82565b5f8083601f840112611fa7575f80fd5b5081356001600160401b03811115611fbd575f80fd5b6020830191508360208260051b8501011115611fd7575f80fd5b9250929050565b5f805f805f8060608789031215611ff3575f80fd5b86356001600160401b0380821115612009575f80fd5b6120158a838b01611f97565b9098509650602089013591508082111561202d575f80fd5b6120398a838b01611f97565b90965094506040890135915080821115612051575f80fd5b5061205e89828a01611f97565b979a9699509497509295939492505050565b8051825260018060a01b0360208201511660208301525f604082015160a060408501526120a060a0850182611eff565b9050606083015184820360608601526120b98282611eff565b915050608083015184820360808601526120d38282611eff565b95945050505050565b602081525f611f3c6020830184612070565b5f80602083850312156120ff575f80fd5b82356001600160401b03811115612114575f80fd5b61212085828601611f97565b90969095509350505050565b602080825282518282018190525f919060409081850190868401855b8281101561217e5761216e848351805182526020908101516001600160a01b0316910152565b9284019290850190600101612148565b5091979650505050505050565b5f806040838503121561219c575f80fd5b50508035926020909101359150565b602080825282518282018190525f9190848201906040850190845b818110156121eb5783516001600160a01b0316835292840192918401916001016121c6565b50909695505050505050565b5f805f60408486031215612209575f80fd5b83356001600160401b038082111561221f575f80fd5b818601915086601f830112612232575f80fd5b813581811115612240575f80fd5b876020828501011115612251575f80fd5b6020928301955093506122679186019050611f43565b90509250925092565b634e487b7160e01b5f52604160045260245ffd5b604051601f8201601f191681016001600160401b03811182821017156122ac576122ac612270565b604052919050565b5f6001600160401b038211156122cc576122cc612270565b50601f01601f191660200190565b5f602082840312156122ea575f80fd5b81356001600160401b038111156122ff575f80fd5b8201601f8101841361230f575f80fd5b803561232261231d826122b4565b612284565b818152856020838501011115612336575f80fd5b816020840160208301375f91810160200191909152949350505050565b5f60208284031215612363575f80fd5b5035919050565b805182525f6020820151608060208501526123886080850182611eff565b9050604083015184820360408601526123a18282611eff565b915050606083015184820360608601526120d38282611eff565b5f60208083016020845280855180835260408601915060408160051b8701019250602087015f5b8281101561241057603f198886030184526123fe85835161236a565b945092850192908501906001016123e2565b5092979650505050505050565b5f60208083016020845280855180835260408601915060408160051b8701019250602087015f5b8281101561241057603f19888603018452612460858351612070565b94509285019290850190600101612444565b5f805f8060408587031215612485575f80fd5b84356001600160401b038082111561249b575f80fd5b6124a788838901611f97565b909650945060208701359150808211156124bf575f80fd5b506124cc87828801611f97565b95989497509550505050565b602080825282518282018190525f9190848201906040850190845b818110156121eb57835151835292840192918401916001016124f3565b602081525f611f3c602083018461236a565b600181811c9082168061253657607f821691505b60208210810361255457634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52603260045260245ffd5b5f6020828403121561257e575f80fd5b81356001600160801b0381168114611f3c575f80fd5b5f602082840312156125a4575f80fd5b81516001600160401b038111156125b9575f80fd5b8201601f810184136125c9575f80fd5b80516125d761231d826122b4565b8181528560208385010111156125eb575f80fd5b6120d3826020830160208601611edd565b81810381811115610b8257634e487b7160e01b5f52601160045260245ffd5b601f82111561265f57805f5260205f20601f840160051c810160208510156126405750805b601f840160051c820191505b8181101561181a575f815560010161264c565b505050565b6001600160401b0383111561267b5761267b612270565b61268f836126898354612522565b8361261b565b5f601f8411600181146126c0575f85156126a95750838201355b5f19600387901b1c1916600186901b17835561181a565b5f83815260208120601f198716915b828110156126ef57868501358255602094850194600190920191016126cf565b508682101561270b575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b818382375f9101908152919050565b81516001600160401b0381111561274557612745612270565b612759816127538454612522565b8461261b565b602080601f83116001811461278c575f84156127755750858301515b5f19600386901b1c1916600185901b1785556127e3565b5f85815260208120601f198616915b828110156127ba5788860151825594840194600190910190840161279b565b50858210156127d757878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f82516127fc818460208701611edd565b9190910192915050565b634e487b7160e01b5f52603160045260245ffd5b5f6020828403121561282a575f80fd5b81518015158114611f3c575f80fdfea2646970667358221220e082bc83e64e13e01035cdf93748feee1558836e331dc9f123cd9b146c3e46b464736f6c63430008180033608060405234801561000f575f80fd5b5060405161052c38038061052c83398101604081905261002e9161013b565b5f80546001600160a01b038088166001600160a01b03199283161790925560018054878416908316179055600280548684169083161790556003805492851692909116919091179055805161008a906004906020840190610095565b50505050505061023e565b828054828255905f5260205f209081019282156100e8579160200282015b828111156100e857825182546001600160a01b0319166001600160a01b039091161782556020909201916001909101906100b3565b506100f49291506100f8565b5090565b5b808211156100f4575f81556001016100f9565b80516001600160a01b0381168114610122575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b5f805f805f60a0868803121561014f575f80fd5b6101588661010c565b9450602061016781880161010c565b94506101756040880161010c565b93506101836060880161010c565b60808801519093506001600160401b038082111561019f575f80fd5b818901915089601f8301126101b2575f80fd5b8151818111156101c4576101c4610127565b8060051b604051601f19603f830116810181811085821117156101e9576101e9610127565b60405291825284820192508381018501918c831115610206575f80fd5b938501935b8285101561022b5761021c8561010c565b8452938501939285019261020b565b8096505050505050509295509295909350565b6102e18061024b5f395ff3fe608060405234801561000f575f80fd5b5060043610610090575f3560e01c8063c415b95c11610063578063c415b95c1461013b578063d2c35ce81461014e578063dd2b8fbb1461017e578063e3331555146101ad578063f2596458146101bf575f80fd5b806310780f73146100945780633e2d2014146100c45780638627a4f0146100f6578063a64c90bf14610126575b5f80fd5b6002546100a7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f46100d2366004610232565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b005b6100f4610104366004610232565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b61012e6101d2565b6040516100bb919061025f565b6001546100a7906001600160a01b031681565b6100f461015c366004610232565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6100f461018c366004610232565b5f80546001600160a01b0319166001600160a01b0392909216919091179055565b5f546100a7906001600160a01b031681565b6003546100a7906001600160a01b031681565b6060600480548060200260200160405190810160405280929190818152602001828054801561022857602002820191905f5260205f20905b81546001600160a01b0316815260019091019060200180831161020a575b5050505050905090565b5f60208284031215610242575f80fd5b81356001600160a01b0381168114610258575f80fd5b9392505050565b602080825282518282018190525f9190848201906040850190845b8181101561029f5783516001600160a01b03168352928401929184019160010161027a565b5090969550505050505056fea2646970667358221220c6e76790ff8a77dc6aeb27639c341df8a7dccaea67e87152f43dc26616c8e5a764736f6c6343000818003361032060405234801562000011575f80fd5b506040516201732c3803806201732c833981016040819052620000349162000369565b6040518060400160405280600e81526020016d4d6f636b4879706572647269766560901b815250828284846040516200006d9062000260565b6200007a929190620004a3565b604051809103905ff08015801562000094573d5f803e3d5ffd5b508585604051620000a5906200026e565b620000b2929190620004a3565b604051809103905ff080158015620000cc573d5f803e3d5ffd5b508686604051620000dd906200027c565b620000ea929190620004a3565b604051809103905ff08015801562000104573d5f803e3d5ffd5b50878760405162000115906200028a565b62000122929190620004a3565b604051809103905ff0801580156200013c573d5f803e3d5ffd5b5088886040516200014d9062000298565b6200015a929190620004a3565b604051809103905ff08015801562000174573d5f803e3d5ffd5b5060015f81905587516001600160a01b0390811660809081526020808b0151831660a0908152918b01516101a052908a01516101c05260c0808b01516101e090815260e0808d015161020052610120808e0151909352610100808e0151909152610140808e0151909152908c01805151909252815190920151909152805160409081015161016052905160609081015161018052908a0151821661024052890151610260528716610220526200022b898262000661565b506001600160a01b03948516610280529284166102a0529083166102c05282166102e0521661030052506200072d9350505050565b6140d7806200355c83390190565b614103806200763383390190565b614390806200b73683390190565b614328806200fac683390190565b61353e8062013dee83390190565b634e487b7160e01b5f52604160045260245ffd5b60405161020081016001600160401b0381118282101715620002e057620002e0620002a6565b60405290565b80516001600160a01b0381168114620002fd575f80fd5b919050565b5f6080828403121562000313575f80fd5b604051608081016001600160401b0381118282101715620003385762000338620002a6565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f808284036102808112156200037d575f80fd5b610260808212156200038d575f80fd5b62000397620002ba565b9150620003a485620002e6565b8252620003b460208601620002e6565b6020830152620003c760408601620002e6565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e083015261010080860151818401525061012080860151818401525061014080860151818401525061016062000432818701620002e6565b9083015261018062000446868201620002e6565b908301526101a06200045a868201620002e6565b908301526101c06200046e868201620002e6565b908301526101e0620004838787830162000302565b818401525081935062000498818601620002e6565b925050509250929050565b82516001600160a01b0316815261028081016020840151620004d060208401826001600160a01b03169052565b506040840151620004ec60408401826001600160a01b03169052565b50606084015160608301526080840151608083015260a084015160a083015260c084015160c083015260e084015160e0830152610100808501518184015250610120808501518184015250610140808501518184015250610160808501516200055f828501826001600160a01b03169052565b5050610180848101516001600160a01b03908116918401919091526101a0808601518216908401526101c0808601518216908401526101e09485015180519584019590955260208501516102008401526040850151610220840152606090940151610240830152919092166102609092019190915290565b600181811c90821680620005ec57607f821691505b6020821081036200060b57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200065c57805f5260205f20601f840160051c81016020851015620006385750805b601f840160051c820191505b8181101562000659575f815560010162000644565b50505b505050565b81516001600160401b038111156200067d576200067d620002a6565b62000695816200068e8454620005d7565b8462000611565b602080601f831160018114620006cb575f8415620006b35750858301515b5f19600386901b1c1916600185901b17855562000725565b5f85815260208120601f198616915b82811015620006fb57888601518255948401946001909101908401620006da565b50858210156200071957878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051612c9b620008c15f395f818161090301528181610a490152610b6201525f818161087e01528181610b910152610dae01525f818161078b0152610fa601525f81816108d00152610b0001525f81816102900152818161044801528181610a1a01528181610a7b01528181610aad01528181610b3301528181610d6901528181610df501528181610f560152610fd901525f50505f50505f50505f50505f50505f81816118b2015281816118ee0152611bf101525f818161163201528181611674015261176601525f50505f818161110f0152818161118701526114bf01525f818161115b01526116e701525f81816110d50152818161147b01526116c601525f818161161001528181611695015261178701525f8181611443015261197501525f6115c001525f50505f8181610bef01528181610c860152610cf40152612c9b5ff3fe60806040526004361061027c575f3560e01c8063907c0f921161014e578063ca6d38f7116100c0578063ded0623111610079578063ded06231146104c1578063e44808bc146108a0578063eac3e799146108bf578063f3f70707146108f2578063f45cf2e014610925578063f698da2514610a015761027c565b8063ca6d38f714610827578063cba2e58d14610846578063cbc13434146103c0578063d5002f2e14610859578063d899e1121461086d578063dbbe8070146108465761027c565b8063a22cb46511610112578063a22cb4651461061c578063a6e8a8591461077a578063a77384c1146107ad578063ab033ea914610385578063b1b4b170146107cc578063b4f8da39146107eb5761027c565b8063907c0f92146106ca57806394a97cdb146106de5780639bd334981461071d5780639cd241af1461073c5780639eea5f661461075b5761027c565b80634c2ac1d9116101f25780637180c8ca116101ab5780637180c8ca1461061c57806371f88b7c1461063b57806377d05ff41461065a5780638120a3e21461066d578063836a10401461068c5780639032c726146106ab5761027c565b80634c2ac1d91461055f5780634ed2d6ac1461057257806358af4a0a1461058c57806368096239146105ab57806368c2ecb8146105ca578063702db0eb146105e95761027c565b806321b57d531161024457806321b57d531461043757806322d5506b1461048257806329b23fc1146104c157806330adf81f146104ee5780633e691db914610521578063414f826d146105405761027c565b806301681a621461038557806302329a29146103a6578063074a6de9146103c057806317fad7fc146103f95780631c0f12b614610418575b348015610287575f80fd5b505f3660605f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685856040516102c8929190612399565b5f60405180830381855af49150503d805f8114610300576040519150601f19603f3d011682016040523d82523d5f602084013e610305565b606091505b5091509150811561032957604051638bb0a34b60e01b815260040160405180910390fd5b5f610333826123a8565b90506001600160e01b03198116636e64089360e11b1461035557815160208301fd5b8151600319810160048401908152926103769181016020019060240161243f565b80519650602001945050505050f35b348015610390575f80fd5b506103a461039f3660046124f0565b610a15565b005b3480156103b1575f80fd5b506103a461039f366004612528565b3480156103cb575f80fd5b506103df6103da366004612553565b610a42565b604080519283526020830191909152015b60405180910390f35b348015610404575f80fd5b506103a46104133660046125e0565b610a76565b348015610423575f80fd5b506103a461043236600461266f565b610aa8565b348015610442575f80fd5b5061046a7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016103f0565b34801561048d575f80fd5b506104a161049c3660046126b4565b610ad8565b6040805194855260208501939093529183015260608201526080016103f0565b3480156104cc575f80fd5b506104e06104db3660046126e3565b610afa565b6040519081526020016103f0565b3480156104f9575f80fd5b506104e07f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367381565b34801561052c575f80fd5b506104e061053b366004612739565b610b2d565b34801561054b575f80fd5b506103a461055a36600461276b565b610b5d565b6104e061056d36600461278b565b610b8b565b34801561057d575f80fd5b506103a46104323660046127ea565b348015610597575f80fd5b506103a46105a6366004612831565b610bbf565b3480156105b6575f80fd5b506103a46105c536600461276b565b610bcc565b3480156105d5575f80fd5b506104e06105e436600461288c565b610d54565b3480156105f4575f80fd5b506103a46106033660046128b9565b6001600160801b03908116600160801b02911617600255565b348015610627575f80fd5b506103a46106363660046128ea565b610d64565b348015610646575f80fd5b506103df610655366004612921565b610d8d565b6104e0610668366004612553565b610da8565b348015610678575f80fd5b506103a461068736600461288c565b610dda565b348015610697575f80fd5b506103a46106a636600461294a565b610de6565b3480156106b6575f80fd5b506103a46106c536600461297f565b610df1565b3480156106d5575f80fd5b506104e0610f25565b3480156106e9575f80fd5b506103a46106f836600461294a565b5f928352600a602090815260408085206001600160a01b039094168552929052912055565b348015610728575f80fd5b506104a161073736600461276b565b610f33565b348015610747575f80fd5b506103a461075636600461294a565b610f51565b348015610766575f80fd5b506103a461077536600461294a565b610f80565b348015610785575f80fd5b5061046a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156107b8575f80fd5b506103a46107c736600461288c565b600f55565b3480156107d7575f80fd5b506104e06107e636600461288c565b610f8b565b3480156107f6575f80fd5b506103a46108053660046129f9565b600380546001600160801b0319166001600160801b0392909216919091179055565b348015610832575f80fd5b506104e061084136600461288c565b610f95565b6103df6108543660046126e3565b610f9f565b348015610864575f80fd5b50600f546104e0565b348015610878575f80fd5b5061046a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156108ab575f80fd5b506103a46108ba366004612831565b610fd4565b3480156108ca575f80fd5b5061046a7f000000000000000000000000000000000000000000000000000000000000000081565b3480156108fd575f80fd5b5061046a7f000000000000000000000000000000000000000000000000000000000000000081565b348015610930575f80fd5b506103a461093f366004612a39565b805160208201516001600160801b03918216600160801b91831682021760025560408301516060840151908316908316820217600355608083015160a084015190831690831682021760045560c083015160e084015190831690831682021760055561010080840151600680546101208701516101408801516101609098015161ffff1990921693151561ff001916939093179215159093029190911761ffff16620100006001600160701b0390961695909502841694909417921602179055565b348015610a0c575f80fd5b506104e0611005565b610a3e7f0000000000000000000000000000000000000000000000000000000000000000611093565b5050565b5f80610a6d7f0000000000000000000000000000000000000000000000000000000000000000611093565b50935093915050565b610a9f7f0000000000000000000000000000000000000000000000000000000000000000611093565b50505050505050565b610ad17f0000000000000000000000000000000000000000000000000000000000000000611093565b5050505050565b5f805f80610ae8888888886110b1565b929b919a509850909650945050505050565b5f610b247f0000000000000000000000000000000000000000000000000000000000000000611093565b50949350505050565b5f610b577f0000000000000000000000000000000000000000000000000000000000000000611093565b50919050565b610b867f0000000000000000000000000000000000000000000000000000000000000000611093565b505050565b5f610bb57f0000000000000000000000000000000000000000000000000000000000000000611093565b5095945050505050565b610ad185858585856111c3565b6040516370a0823160e01b81523060048201525f90610c5f906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610c34573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c589190612b23565b838561137e565b9150505f811315610ce2576040516340c10f1960e01b8152306004820152602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906340c10f19906044015b5f604051808303815f87803b158015610cd0575f80fd5b505af1158015610a9f573d5f803e3d5ffd5b5f811215610b86576001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016639dc29fac30610d2384612b4e565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401610cb9565b5f610d5e82611418565b92915050565b610b867f0000000000000000000000000000000000000000000000000000000000000000611093565b5f80610d9a85858561146e565b90925090505b935093915050565b5f610dd27f0000000000000000000000000000000000000000000000000000000000000000611093565b509392505050565b610de3816114ed565b50565b610b86838383611513565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610e25611005565b60405160248101919091527f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367360448201526001600160a01b03808c1660648301528a16608482015288151560a482015260c4810188905260ff871660e4820152610104810186905261012481018590526101440160408051601f198184030181529181526020820180516001600160e01b03166314e5f07b60e01b17905251610ece9190612b68565b5f60405180830381855af49150503d805f8114610f06576040519150601f19603f3d011682016040523d82523d5f602084013e610f0b565b606091505b509150915081610f1d57805160208201fd5b805160208201f35b5f610f2e6115b9565b905090565b5f805f80610f4186866115e4565b9299919850965090945092505050565b610f7a7f0000000000000000000000000000000000000000000000000000000000000000611093565b50505050565b610b868383836117c3565b5f610d5e82611891565b5f610d5e8261192c565b5f80610fca7f0000000000000000000000000000000000000000000000000000000000000000611093565b5094509492505050565b610ffd7f0000000000000000000000000000000000000000000000000000000000000000611093565b505050505050565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b60605f80836001600160a01b03165f36604051610ece929190612399565b5f80808061110787866111008b6110fa6110d38c670de0b6b3a7640000612b83565b7f0000000000000000000000000000000000000000000000000000000000000000906119a0565b906119a0565b91906119b0565b9350611133847f00000000000000000000000000000000000000000000000000000000000000006119d3565b91505f61115361114b89670de0b6b3a7640000612b83565b8a90886119b0565b905061117f817f00000000000000000000000000000000000000000000000000000000000000006119a0565b93506111ab847f00000000000000000000000000000000000000000000000000000000000000006119d3565b6111b59084612b96565b915050945094509450949050565b6001600160a01b03841615806111e057506001600160a01b038316155b156111fe5760405163f0dd15fd60e01b815260040160405180910390fd5b836001600160a01b0316816001600160a01b0316146112be576001600160a01b038085165f908152600c602090815260408083209385168352929052205460ff166112be575f858152600d602090815260408083206001600160a01b03808916855290835281842090851684529091529020545f1981146112bc575f868152600d602090815260408083206001600160a01b03808a1685529083528184209086168452909152812080548592906112b6908490612b83565b90915550505b505b5f858152600a602090815260408083206001600160a01b0388168452909152812080548492906112ef908490612b83565b90915550505f858152600a602090815260408083206001600160a01b038716845290915281208054849290611325908490612b96565b909155505060408051868152602081018490526001600160a01b038086169287821692918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b5f808061138f846301e133806119e7565b90505f6113b2825f88126113a357876113ac565b6113ac88612b4e565b906119d3565b90505f8613156113e4576113cf6113c8826119fb565b88906119d3565b93506113db8785612b83565b92505050610da0565b5f86121561140b576113ff6113f8826119fb565b88906119e7565b93506113db8785612ba9565b5094955f95509350505050565b5f806114226115b9565b9050808311611431575f61143b565b61143b8184612b83565b9150611467827f00000000000000000000000000000000000000000000000000000000000000006119e7565b9392505050565b5f806114b7856110fa85817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a76400006114ad818c611b97565b6110fa9190612b83565b91506114e3827f00000000000000000000000000000000000000000000000000000000000000006119d3565b9050935093915050565b6114f681611bab565b610de357604051635044b7f560e01b815260040160405180910390fd5b5f838152600a602090815260408083206001600160a01b038616845290915281208054839290611544908490612b96565b90915550505f838152600b602052604081208054839290611566908490612b96565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b5f610f2e427f0000000000000000000000000000000000000000000000000000000000000000611d3f565b5f805f805f6115f1611d54565b600254909150611656908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f0000000000000000000000000000000000000000000000000000000000000000611d74565b6002549094506116b9908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611d9f565b9150611710878561170b857f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611dbe565b611e30565b1561171d5761171d611e71565b61172987858885611e8a565b91965094509250670de0b6b3a76400006117ab6117468784612b96565b600254611764908890600160801b90046001600160801b0316612b83565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611d9f565b11156117b9576117b9611e71565b5092959194509250565b5f838152600a602090815260408083206001600160a01b038616845290915290205481111561180557604051631e9acf1760e31b815260040160405180910390fd5b5f838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290611847908490612b83565b909155505060408051848152602081018390525f916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291016115ac565b6003545f9081906118ab906001600160801b031684611b97565b90506118d77f000000000000000000000000000000000000000000000000000000000000000082612b96565b6002546001600160801b03161115610b57576002547f0000000000000000000000000000000000000000000000000000000000000000906119229083906001600160801b0316612b83565b6114679190612b83565b5f80670de0b6b3a764000061193f6115b9565b6119499190612bc8565b9050808311611958575f611962565b6119628184612b83565b9150611467611999670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000612bc8565b83906119e7565b5f6114678383670de0b6b3a76400005b5f825f1904841183021582026119c4575f80fd5b50910281810615159190040190565b5f6114678383670de0b6b3a7640000611ed2565b5f61146783670de0b6b3a764000084611ed2565b5f680248ce36a70cb26b3e198213611a1457505f919050565b680755bf798b4a1bf1e58212611a3d576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190611b8d74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611eed565b9695505050505050565b5f61146783670de0b6b3a7640000846119b0565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015611c61573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c859190612bf3565b935093509350935080611ca057505f98975050505050505050565b868414611cd157611cb084611f1a565b600280546001600160801b0319166001600160801b03929092169190911790555b858314611d0257611ce183611f43565b600480546001600160801b0319166001600160801b03929092169190911790555b848214611d3057611d1282611f1a565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b5f611d4a8284612c26565b6114679084612b83565b6002546004545f91610f2e916001600160801b0390911690600f0b611f90565b5f611d94878787611d8d88670de0b6b3a7640000612b83565b8787611fb5565b979650505050505050565b5f611db582611daf858888611ed2565b90611fe2565b95945050505050565b5f611e28611dfe611dd784670de0b6b3a7640000612b83565b6110fa670de0b6b3a7640000611ded818a611b97565b611df79190612b83565b87906119a0565b611e1090670de0b6b3a7640000612b96565b611e2284670de0b6b3a7640000612b83565b906119e7565b949350505050565b5f80611e6685611e3e611d54565b611e489190612b96565b600254611764908790600160801b90046001600160801b0316612b83565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f805f805f611e9a89878961146e565b9092509050611ea98289612b83565b97505f611eb782888a611ed2565b9050611ec3818b612b83565b9a989950979650505050505050565b5f825f190484118302158202611ee6575f80fd5b5091020490565b5f6001600160ff1b03821115611f165760405163396ea70160e11b815260040160405180910390fd5b5090565b5f6001600160801b03821115611f1657604051630f0af95160e11b815260040160405180910390fd5b5f6f7fffffffffffffffffffffffffffffff19821280611f7257506f7fffffffffffffffffffffffffffffff82135b15611f165760405163a5353be560e01b815260040160405180910390fd5b5f80611f9c8484612047565b909250905080611fae57611fae611e71565b5092915050565b5f80611fc5888888888888612082565b909250905080611fd757611fd7611e71565b509695505050505050565b5f815f03611ff95750670de0b6b3a7640000610d5e565b825f0361200757505f610d5e565b5f61201183611eed565b90505f61202561202086611eed565b612146565b905081810261203c670de0b6b3a764000082612c39565b9050611b8d816119fb565b5f805f8361205486611eed565b61205e9190612ba9565b90505f811215612074575f80925092505061207b565b9150600190505b9250929050565b5f805f612092898988888861236b565b90506120ac86611daf6120a58a8d612b96565b87906119d3565b98506120b9858a86611ed2565b9850888110156120cf575f80925092505061213b565b888103670de0b6b3a76400008110612104576120fd6120f6670de0b6b3a764000089611b97565b8290611fe2565b905061211c565b6121196120f6670de0b6b3a7640000896119e7565b90505b80891015612131575f8093509350505061213b565b8803925060019150505b965096945050505050565b5f8082136121675760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906121ea9084901c611eed565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f6123768585611fe2565b61238f61238786611daf868b6119a0565b8590856119b0565b611b8d9190612b96565b818382375f9101908152919050565b805160208201516001600160e01b031980821692919060048310156123d75780818460040360031b1b83161693505b505050919050565b634e487b7160e01b5f52604160045260245ffd5b604051610180810167ffffffffffffffff81118282101715612417576124176123df565b60405290565b5f5b8381101561243757818101518382015260200161241f565b50505f910152565b5f6020828403121561244f575f80fd5b815167ffffffffffffffff80821115612466575f80fd5b818401915084601f830112612479575f80fd5b81518181111561248b5761248b6123df565b604051601f8201601f19908116603f011681019083821181831017156124b3576124b36123df565b816040528281528760208487010111156124cb575f80fd5b611d9483602083016020880161241d565b6001600160a01b0381168114610de3575f80fd5b5f60208284031215612500575f80fd5b8135611467816124dc565b8015158114610de3575f80fd5b80356125238161250b565b919050565b5f60208284031215612538575f80fd5b81356114678161250b565b5f60608284031215610b57575f80fd5b5f805f60608486031215612565575f80fd5b8335925060208401359150604084013567ffffffffffffffff811115612589575f80fd5b61259586828701612543565b9150509250925092565b5f8083601f8401126125af575f80fd5b50813567ffffffffffffffff8111156125c6575f80fd5b6020830191508360208260051b850101111561207b575f80fd5b5f805f805f80608087890312156125f5575f80fd5b8635612600816124dc565b95506020870135612610816124dc565b9450604087013567ffffffffffffffff8082111561262c575f80fd5b6126388a838b0161259f565b90965094506060890135915080821115612650575f80fd5b5061265d89828a0161259f565b979a9699509497509295939492505050565b5f805f8060808587031215612682575f80fd5b843593506020850135612694816124dc565b925060408501356126a4816124dc565b9396929550929360600135925050565b5f805f80608085870312156126c7575f80fd5b5050823594602084013594506040840135936060013592509050565b5f805f80608085870312156126f6575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115612721575f80fd5b61272d87828801612543565b91505092959194509250565b5f60208284031215612749575f80fd5b813567ffffffffffffffff81111561275f575f80fd5b611e2884828501612543565b5f806040838503121561277c575f80fd5b50508035926020909101359150565b5f805f805f60a0868803121561279f575f80fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff8111156127d1575f80fd5b6127dd88828901612543565b9150509295509295909350565b5f805f80608085870312156127fd575f80fd5b84359350602085013561280f816124dc565b9250604085013591506060850135612826816124dc565b939692955090935050565b5f805f805f60a08688031215612845575f80fd5b853594506020860135612857816124dc565b93506040860135612867816124dc565b925060608601359150608086013561287e816124dc565b809150509295509295909350565b5f6020828403121561289c575f80fd5b5035919050565b80356001600160801b0381168114612523575f80fd5b5f80604083850312156128ca575f80fd5b6128d3836128a3565b91506128e1602084016128a3565b90509250929050565b5f80604083850312156128fb575f80fd5b8235612906816124dc565b915060208301356129168161250b565b809150509250929050565b5f805f60608486031215612933575f80fd5b505081359360208301359350604090920135919050565b5f805f6060848603121561295c575f80fd5b83359250602084013561296e816124dc565b929592945050506040919091013590565b5f805f805f805f60e0888a031215612995575f80fd5b87356129a0816124dc565b965060208801356129b0816124dc565b955060408801356129c08161250b565b945060608801359350608088013560ff811681146129dc575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f60208284031215612a09575f80fd5b611467826128a3565b8035600f81900b8114612523575f80fd5b80356001600160701b0381168114612523575f80fd5b5f6101808284031215612a4a575f80fd5b612a526123f3565b612a5b836128a3565b8152612a69602084016128a3565b6020820152612a7a604084016128a3565b6040820152612a8b606084016128a3565b6060820152612a9c60808401612a12565b6080820152612aad60a084016128a3565b60a0820152612abe60c084016128a3565b60c0820152612acf60e084016128a3565b60e0820152610100612ae2818501612518565b90820152610120612af4848201612518565b90820152610140612b06848201612a23565b90820152610160612b188482016128a3565b908201529392505050565b5f60208284031215612b33575f80fd5b5051919050565b634e487b7160e01b5f52601160045260245ffd5b5f600160ff1b8201612b6257612b62612b3a565b505f0390565b5f8251612b7981846020870161241d565b9190910192915050565b81810381811115610d5e57610d5e612b3a565b80820180821115610d5e57610d5e612b3a565b8181035f831280158383131683831282161715611fae57611fae612b3a565b8082028115828204841417610d5e57610d5e612b3a565b634e487b7160e01b5f52601260045260245ffd5b5f805f8060808587031215612c06575f80fd5b84519350602085015192506040850151915060608501516128268161250b565b5f82612c3457612c34612bdf565b500690565b5f82612c4757612c47612bdf565b600160ff1b82145f1984141615612c6057612c60612b3a565b50059056fea26469706673582212203b78f2df977c3c38113e9b9fa25072a8db23d1a5851c6c747ff02c2a13b1a40864736f6c6343000818003361028060405234801562000011575f80fd5b50604051620040d7380380620040d78339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613c73620004645f395f8181610d7b015261233401525f8181610d4c01526122f701525f8181610c2801528181610eab01528181610f3901528181610fc70152818161105501528181611645015281816116db0152818161189d01528181611ebe01528181611f9201526120e301525f610e1301525f8181610ded01526124d901525f8181610dc701526124b301525f8181610da1015261248d01525f61116001525f61113a01525f61111401525f6110ee01525f8181610e8501526124ff01525f8181610e39015281816112d20152612a0201525f8181610e5f0152612e2601525f81816106110152610d1d01525f818161073b01528181610cee0152818161128801528181611e36015281816125c001528181612609015281816126b6015281816126ff01528181612b5c01528181612c0501528181612ceb0152612d940152613c735ff3fe608060405234801561000f575f80fd5b5060043610610233575f3560e01c806360246c8811610135578063bd85b039116100b4578063cf210e6511610079578063cf210e65146104e7578063d8165743146104fa578063e44808bc1461050f578063e985e9c514610522578063fba5600814610535575f80fd5b8063bd85b03914610499578063becee9c3146104ac578063c55dae63146104cc578063c69e16ad1461042a578063c6e6f592146104d4575f80fd5b80639cd241af116100fa5780639cd241af1461043a578063a22cb4651461044d578063ab033ea914610460578063b0d9658014610471578063b88fed9f14610486575f80fd5b806360246c88146103f05780637180c8ca146104055780637ecebe00146104175780638e67f87e1461042a578063950c5d0314610432575f80fd5b806320fc4881116101c15780633e691db9116101865780633e691db91461038c57806346fbf68e1461039f5780634e41a1fb146103c25780634ed2d6ac146103d557806354fd4d50146103e8575f80fd5b806320fc4881146102f157806321ff32a914610336578063313ce567146103575780633656eec2146103715780633a98ef3914610384575f80fd5b806306fdde031161020757806306fdde03146102905780630a4e14931461029857806314e5f07b146102b857806317fad7fc146102cb5780631c0f12b6146102de575f80fd5b8062ad800c1461023757806301681a621461026057806302329a291461027557806304baa00b14610288575b5f80fd5b61024a61024536600461305e565b610564565b60405161025791906130c2565b60405180910390f35b61027361026e3660046130e8565b61059b565b005b610273610283366004613110565b6105a4565b61024a6105ad565b61024a6105ec565b6102a0610603565b6040516001600160a01b039091168152602001610257565b6102736102c6366004613139565b610642565b6102736102d936600461320a565b61065e565b6102736102ec366004613299565b610674565b6103046102ff36600461305e565b610687565b6040805182516001600160801b0390811682526020808501518216908301529282015190921690820152606001610257565b6103496103443660046132de565b6106f0565b604051908152602001610257565b61035f610735565b60405160ff9091168152602001610257565b61034961037f36600461331d565b6107cd565b610349610805565b61034961039a36600461334b565b610823565b6103b26103ad3660046130e8565b61082d565b6040519015158152602001610257565b61024a6103d036600461305e565b61084c565b6102736103e3366004613382565b61085a565b61024a6108a8565b6103f86108dd565b60405161025791906133c9565b61027361041336600461346a565b5050565b6103496104253660046130e8565b610bd6565b610349610c01565b6102a0610c1a565b610273610448366004613496565b610c59565b61027361045b36600461346a565b610c6a565b61027361046e3660046130e8565b50565b610479610cd5565b60405161025791906134cb565b61034961049436600461305e565b611195565b6103496104a736600461305e565b6111a2565b6104bf6104ba3660046135f1565b6111c3565b6040516102579190613630565b6102a061127a565b6103496104e236600461305e565b6112b9565b6103496104f536600461305e565b6112c6565b6105026112fc565b6040516102579190613673565b61027361051d366004613784565b611407565b6103b26105303660046137df565b61144f565b61053d611492565b6040805182516001600160801b039081168252602093840151169281019290925201610257565b6060610596610572836114f0565b60405160200161058291906130c2565b604051602081830303815290604052611616565b919050565b61046e8161163a565b61046e8161189b565b60606105e96040518060400160405280600e81526020016d4d6f636b4879706572647269766560901b81525060405160200161058291906130c2565b90565b60606105e96001604051602001610582919061380b565b604080516001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660208201525f916105e99101610582565b6106538989898989898989896119b3565b505050505050505050565b61066c868686868686611ba5565b505050505050565b6106818484848433611c58565b50505050565b604080516060810182525f808252602082018190529181019190915261059660085f8481526020019081526020015f20604051602001610582919081546001600160801b03808216835260809190911c6020830152600190920154909116604082015260600190565b5f838152600d602090815260408083206001600160a01b038681168552908352818420908516845282528083205481519283015261072e9101610582565b9392505050565b5f6105e97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610795573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107b991906138b8565b6040805160ff909216602083015201610582565b5f828152600a602090815260408083206001600160a01b03851684528252808320548151928301526107ff9101610582565b92915050565b5f6105e9610811611e13565b60405160200161058291815260200190565b5f6107ff82611ea9565b5f61059661083a836120df565b60408051911515602083015201610582565b6060610596610572836121bd565b83610864816122b9565b6001600160a01b0316336001600160a01b03161461089557604051632aab8bd360e01b815260040160405180910390fd5b6108a185858585612376565b5050505050565b60606105e960405180604001604052806007815260200166076312e302e32360cc1b81525060405160200161058291906130c2565b610947604051806101e001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f6109506123e2565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654939450926001600160801b03909216916109ba91906138fb565b6109c4919061390e565b90505f8215610ad35773__$2b4fa6f02a36eedfe41c65e8dd342257d3$$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401611e9c929190613ab4565b6040805180830381865af4158015611eb6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611eda9190613b29565b91509150611ef8611eea82611321565b611ef390613b4b565b612d13565b925082611f0d575f965050505050505061131b565b611f1682611aab565b600780545f90611f309084906001600160801b0316613959565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611f5d81611aab565b60078054601090611f7f908490600160801b90046001600160801b0316613959565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e611fda87612ea7565b6040518263ffffffff1660e01b8152600401611ff69190613b65565b6040805180830381865af4158015612010573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120349190613b74565b915091508061204957505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916120ae91613784565b6120b89190613926565b9050805f036120ce57505f958695509350505050565b5f8087116120dc575f6120e7565b6120e78488846125ae565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff81111561211857612118613ba2565b6040519080825280601f01601f191660200182016040528015612142576020820181803683370190505b5090505f808751602089018b8e8ef191503d925086831115612162578692505b828152825f602083013e90999098509650505050505050565b5f806121856105ab565b9050808311612194575f61219e565b61219e8184613926565b915061157d827f0000000000000000000000000000000000000000000000000000000000000000612ac7565b5f80806121ea6121e288670de0b6b3a7640000613926565b899087612fe1565b9050861561222c576121fc888861259a565b915061221d8a8a846122168a670de0b6b3a7640000613926565b8989613004565b92506122298382613784565b90505b9750975097945050505050565b5f61225661224f84670de0b6b3a7640000613926565b839061259a565b61157d90670de0b6b3a7640000613926565b5f8061229e85612276611a75565b6122809190613784565b600254610fa9908790600160801b90046001600160801b0316613926565b909210949350505050565b5f8080806122ff87866122f88b6122f26122cb8c670de0b6b3a7640000613926565b7f00000000000000000000000000000000000000000000000000000000000000009061259a565b9061259a565b9190612fe1565b935061232b847f0000000000000000000000000000000000000000000000000000000000000000611584565b91505f61234b61234389670de0b6b3a7640000613926565b8a9088612fe1565b9050612377817f000000000000000000000000000000000000000000000000000000000000000061259a565b93506123a3847f0000000000000000000000000000000000000000000000000000000000000000611584565b6123ad9084613784565b915050945094509450949050565b5f805f805f80888810156124275786156123dd576123da8d898b6125ae565b9c505b6123e88c898b6125ae565b9b506123f38b611321565b6123fc8d611321565b6124069190613797565b90506124138b898b6125ae565b9a506124208a898b6125ae565b9950612446565b6124308b611321565b6124398d611321565b6124439190613797565b90505b9b9c9a9b999a975050505050505050565b5f825f036124665750846124f4565b81156124b8576124976124798487613784565b6124838587611584565b61248d888a611584565b611d639190613784565b90505f6124a48588611ad4565b9050808210156124b2578091505b506124f4565b8285036124c657505f6124f4565b6124f16124d38487613926565b6124dd858761259a565b6124e7888a611584565b611d639190613926565b90505b95945050505050565b5f60016001607f1b031982128061251a575060016001607f1b0382135b1561134a5760405163a5353be560e01b815260040160405180910390fd5b5f80612544845f613026565b61254e845f613026565b6125589190613797565b90505f8113156125735761256c8186613784565b9450612591565b5f8112156125915761258481613b4b565b61258e9086613926565b94505b50929392505050565b5f61157d8383670de0b6b3a7640000612fe1565b5f825f1904841183021582026125c2575f80fd5b5091020490565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016126175750476126a0565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612679573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061269d91906139f8565b90505b600f5461157d908490836125ae565b5f600f5485116126bf57846126c3565b600f545b94505f6126cf8661196a565b905085600f5f8282546126e29190613926565b909155505f905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612784576040516001600160a01b0387169083905f81818185875af1925050503d805f8114612774576040519150601f19603f3d011682016040523d82523d5f602084013e612779565b606091505b505080915050612817565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af11580156127f0573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128149190613bb6565b90505b80612835576040516312171d8360e31b815260040160405180910390fd5b5095945050505050565b600f54841161284e5783612852565b600f545b93505f61285e8561196a565b905084600f5f8282546128719190613926565b909155505f905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612913576040516001600160a01b0386169083905f81818185875af1925050503d805f8114612903576040519150601f19603f3d011682016040523d82523d5f602084013e612908565b606091505b5050809150506129a6565b60405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af115801561297f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906129a39190613bb6565b90505b806129c4576040516312171d8360e31b815260040160405180910390fd5b505050505050565b5f80806129ec6129e488670de0b6b3a7640000613926565b8990876125ae565b9050861561222c576129fe8888611584565b915061221d8a8a84612a188a670de0b6b3a7640000613926565b898961303b565b5f80612a2b848461304b565b909250905080612a3d57612a3d6113ec565b5092915050565b5f815f03612a5b5750670de0b6b3a764000061131b565b825f03612a6957505f61131b565b5f612a7383611321565b90505f612a87612a8286611321565b613086565b9050818102612a9e670de0b6b3a764000082613bd1565b9050612aa9816132ab565b9695505050505050565b5f61157d83670de0b6b3a764000084612fe1565b5f61157d83670de0b6b3a7640000846125ae565b5f60016001607f1b0382111561134a5760405163a5353be560e01b815260040160405180910390fd5b6003545f908190612b1e906001600160801b031684612ab3565b9050612b4a7f000000000000000000000000000000000000000000000000000000000000000082613784565b6002546001600160801b03161115611ae2576002547f000000000000000000000000000000000000000000000000000000000000000090612b959083906001600160801b0316613926565b61157d9190613926565b612ba7613677565b5f80612bb284612ea7565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612bec9190613b65565b6040805180830381865af4158015612c06573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612c2a9190613b74565b9350905082612c3e57505f9150612d0b9050565b5f612c64612c5f84610160015185610140015161158490919063ffffffff16565b611321565b612c84612c5f85610120015186610100015161259a90919063ffffffff16565b612c8e9190613797565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765481830152606081018a9052608081018b905260a0810192909252845160c08301529284015160e08201529290910151610100830152509150600190505b935093915050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612dc9573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612ded9190613bfd565b935093509350935080612e0857505f98975050505050505050565b868414612e3957612e1884611aab565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612e6a57612e49836124fd565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612e9857612e7a82611aab565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b612eaf6136c1565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e08301526003540482166101008201526005549091610120830191612fa7911661343d565b81526004546001600160801b03600160801b9182900481166020840152600554604090930192612fd99290041661343d565b905292915050565b5f825f190484118302158202612ff5575f80fd5b50910281810615159190040190565b5f806130148888888888886134b1565b909250905080611d9057611d906113ec565b5f818313613034578161157d565b5090919050565b5f8061301488888888888861358d565b5f805f8361305886611321565b6130629190613797565b90505f811215613078575f80925092505061307f565b9150600190505b9250929050565b5f8082136130a75760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f1982019061312a9084901c611321565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e1982136132c457505f919050565b680755bf798b4a1bf1e582126132ed576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612aa974029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611321565b5f80670de0b6b3a76400006134506105ab565b61345a9190613994565b9050808311613469575f613473565b6134738184613926565b915061157d6134aa670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613994565b8390612ac7565b5f805f6134c18989888888613649565b9050868810156134d7575f809250925050613582565b96869003966134e68887612a44565b9750878110156134fc575f809250925050613582565b87810361350a818688612fe1565b9050670de0b6b3a7640000811061353e57613537613530670de0b6b3a764000089612ab3565b8290612a44565b9050613556565b613553613530670de0b6b3a764000089612ac7565b90505b6135608186612ab3565b905089811015613577575f80935093505050613582565b899003925060019150505b965096945050505050565b5f805f61359d8989888888613649565b90506135ad86611aa5898b613784565b9750878110156135c3575f809250925050613582565b8781036135d1818688612fe1565b9050670de0b6b3a764000081106135fe576135f7613530670de0b6b3a764000089612ab3565b9050613616565b613613613530670de0b6b3a764000089612ac7565b90505b6136208186612ab3565b9050808a1015613637575f80935093505050613582565b90980398600198509650505050505050565b5f6136548585612a44565b61366d61366586611aa5868b61259a565b859085612fe1565b6124f19190613784565b60405180610120016040528061368b6136c1565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f8060808587031215613729575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115613754575f80fd5b850160608188031215613765575f80fd5b939692955090935050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561131b5761131b613770565b8181035f831280158383131683831282161715612a3d57612a3d613770565b6001600160a01b0381168114610591575f80fd5b5f602082840312156137da575f80fd5b813561157d816137b6565b8015158114610591575f80fd5b5f60208284031215613802575f80fd5b813561157d816137e5565b5f808335601e19843603018112613822575f80fd5b83018035915067ffffffffffffffff82111561383c575f80fd5b60200191503681900382131561307f575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f6138b160e083018486613850565b9a9950505050505050505050565b8082018281125f8312801582168215821617156138de576138de613770565b505092915050565b878152866020820152856040820152841515606082015283608082015260c060a08201525f61391960c083018486613850565b9998505050505050505050565b8181038181111561131b5761131b613770565b6001600160701b03818116838216019080821115612a3d57612a3d613770565b6001600160801b03818116838216019080821115612a3d57612a3d613770565b5f60208284031215613989575f80fd5b815161157d816137b6565b808202811582820484141761131b5761131b613770565b6001600160801b03828116828216039080821115612a3d57612a3d613770565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561131b5761131b613770565b5f60208284031215613a08575f80fd5b5051919050565b634e487b7160e01b5f52601260045260245ffd5b5f82613a3157613a31613a0f565b500690565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a082019050613ac7828551613a36565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613b3a575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613b5f57613b5f613770565b505f0390565b610180810161131b8284613a36565b5f8060408385031215613b85575f80fd5b825191506020830151613b97816137e5565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215613bc6575f80fd5b815161157d816137e5565b5f82613bdf57613bdf613a0f565b600160ff1b82145f1984141615613bf857613bf8613770565b500590565b5f805f8060808587031215613c10575f80fd5b8451935060208501519250604085015191506060850151613765816137e556fea26469706673582212204687a893f4512dc9963600e3da7589301ac62d4975762443dff7c8ffe077be1964736f6c6343000818003361028060405234801562000011575f80fd5b5060405162004390380380620043908339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613ebb620004d55f395f50505f50505f610c7301525f50505f818160f901528181610302015261315701525f81816115f9015281816120f501528181612158015281816128df01528181612d4701528181612d8301528181612f74015261313101525f818161083101528181610dcd01528181610e0f01528181610f0101528181611367015281816113c50152818161199c01528181611a2b015261310b01525f611d1f01525f8181611e40015281816129d001528181612a48015261326f01525f81816109ee01528181610e820152818161146001528181611e140152612a1c01525f8181610e610152818161299c015261322b01525f818161085201528181610dab01528181610e3001528181610f2201528181611345015281816113e6015261317d01525f81816101d3015281816103960152818161092c01526136f301525f81816106f20152818161076e015281816107e2015281816108ad01526108e501525f50505f818161055b015281816114c901528181611512015281816117a1015281816117ea01528181611879015281816118fa01528181611a9601528181611b1701528181612b2f0152612b780152613ebb5ff3fe608060405260043610610028575f3560e01c8063cba2e58d1461002c578063dbbe807014610058575b5f80fd5b61003f61003a36600461396b565b61006b565b6040805192835260208301919091520160405180910390f35b61003f61006636600461396b565b610087565b5f8061007986868686610095565b915091505b94509492505050565b5f80610079868686866102bc565b5f8061009f610531565b600654610100900460ff16156100c8576040516321081abf60e01b815260040160405180910390fd5b6100d0610559565b6100d9836105c5565b5f806100e588866105fd565b90925090505f6100f583836106ce565b90507f00000000000000000000000000000000000000000000000000000000000000008110156101385760405163211ddda360e11b815260040160405180910390fd5b86821015610159576040516342af972b60e01b815260040160405180910390fd5b5f6101626106eb565b905061017281846004600161071b565b505f805f6101808787610d7f565b919a5091945090925090508b8810156101ac5760405163c972651760e01b815260040160405180910390fd5b8160095f8282546101bd91906139d9565b909155506101ce9050844283610f5e565b6101f87f0000000000000000000000000000000000000000000000000000000000000000856139d9565b98506102068389888c611097565b5f61021260018b61122e565b905061022b8161022560208e018e613a00565b8b611262565b8d8a8a898e8561023e6020830183613a00565b6001600160a01b03167f7fc9757758f4c7f2eb9f011c4500beb349847d2f2acbdd5ffce3e2f01e79903a86888661027b6040880160208901613a28565b8961028960408a018a613a43565b60405161029c9796959493929190613aae565b60405180910390a350909b50505050505050505050505061007e60015f55565b5f806102c6610531565b600654610100900460ff16156102ef576040516321081abf60e01b815260040160405180910390fd5b6102f7610559565b610300836105c5565b7f00000000000000000000000000000000000000000000000000000000000000008610156103415760405163211ddda360e11b815260040160405180910390fd5b5f61034a611307565b90508481101561036d576040516342af972b60e01b815260040160405180910390fd5b5f6103766106eb565b90505f61038e6103846106eb565b846004600161071b565b90505f6103bb7f0000000000000000000000000000000000000000000000000000000000000000846139d9565b90505f805f806103cc8e8988611319565b60098054949850929650909450925083915f906103ea9084906139d9565b909155506103fb9050874283610f5e565b61040d610408858a61149b565b6114af565b6104189060016139d9565b9350505f61042784898d6115ac565b9050808d101561044a5760405163c972651760e01b815260040160405180910390fd5b610454818c6105fd565b508e905061046481858b896115d3565b5f61047060028861122e565b90508c61048a826104846020840184613a00565b85611262565b858b868461049b6020860186613a00565b6001600160a01b03167ffa6dd2e3e152dbc3fe91196c0b8aa871c26fd7a1d07de126ec3159fd4ede2c758d8a866104d860408b0160208c01613a28565b6104ec896104e68a8d613aee565b906106ce565b8d6104fa60408e018e613a43565b60405161050e989796959493929190613b01565b60405180910390a350989d50939b50505050505050505050505061007e60015f55565b60025f540361055357604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee148015906105a557503415155b156105c357604051631574f9f360e01b815260040160405180910390fd5b565b5f6105d36020830183613a00565b6001600160a01b0316036105fa5760405163f0dd15fd60e01b815260040160405180910390fd5b50565b815f806106106040850160208601613a28565b156106355761062b856106266040870187613a43565b611786565b909350905061064d565b503461064d856106486040870187613a43565b611a10565b610655611307565b915080156106c5576040515f90339083908381818185875af1925050503d805f811461069c576040519150601f19603f3d011682016040523d82523d5f602084013e6106a1565b606091505b50509050806106c3576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b5f6106e28383670de0b6b3a7640000611bb2565b90505b92915050565b5f610716427f0000000000000000000000000000000000000000000000000000000000000000611bcd565b905090565b5f84815260086020526040812060018101546001600160801b031615158061074257504286115b1561075b57600101546001600160801b03169050610d77565b5f805f6107666106eb565b90505f6107937f00000000000000000000000000000000000000000000000000000000000000008b6139d9565b90505b81811015610807575f818152600860205260409020600101546001600160801b031680156107df575f828152600860205260409020549094506001600160801b03169250610807565b507f000000000000000000000000000000000000000000000000000000000000000001610796565b835f036108795788935061087661081c611be2565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c02565b92505b5061088383611c21565b6001850180546001600160801b0319166001600160801b03929092169190911790556108d96108d27f00000000000000000000000000000000000000000000000000000000000000008b613aee565b8a84610f5e565b6109178961091161090a7f0000000000000000000000000000000000000000000000000000000000000000836139d9565b4290611c4e565b84610f5e565b61092088611c62565b505f90506008816109517f00000000000000000000000000000000000000000000000000000000000000008d613aee565b815260208101919091526040015f908120600101546001600160801b0316915061097c60028c61122e565b5f818152600b60205260408120549192508c8c8315610abd57600192505f806109a886898d865f611dff565b915091508060095f8282546109bd91906139d9565b909155506109d89050865f846109d281611ecc565b88611ef5565b6109e281836139d9565b9150610a1286838a8e877f000000000000000000000000000000000000000000000000000000000000000061206c565b9150610a26610a2183856106ce565b6120b5565b60068054600290610a479084906201000090046001600160701b0316613b48565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610a7482611c21565b60068054601090610a96908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f610ac960018461122e565b5f818152600b60205260409020549091508015610bd457600194505f80610af4838b8f886001611dff565b915091508060095f828254610b0991906139d9565b90915550610b249050835f84610b1e81611ecc565b8a6120de565b610b2e8183613aee565b9150610b3d610a2183876106ce565b60068054600290610b5e9084906201000090046001600160701b0316613b48565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610b8b82611c21565b60068054601090610bad908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b8415610c0d57610bff610be687611ecc565b610bef83611ecc565b610bf99190613b88565b5f6122ce565b8e610c0a848261230d565b50505b5f610c17846124fc565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ccd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf19190613ba7565b90506001600160a01b03811615610d6557610d625a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b0386169392919061263e565b50505b509b9d50505050505050505050505050505b949350505050565b5f805f805f610d8c611be2565b600254909150610df1908290600160801b90046001600160801b0316897f00000000000000000000000000000000000000000000000000000000000000008a7f00000000000000000000000000000000000000000000000000000000000000006126c4565b600254909450610e54908290600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c02565b9150610eab8785610ea6857f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006126ef565b612753565b15610eb857610eb8612794565b610ec4878588856127ad565b91965094509250670de0b6b3a7640000610f46610ee187846139d9565b600254610eff908890600160801b90046001600160801b0316613aee565b7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c02565b1115610f5457610f54612794565b5092959194509250565b5f83815260086020526040902054600160801b90046001600160801b0316808303610f895750505050565b5f848152600860205260408120546001600160801b031690819003610fe157610fb183611c21565b5f86815260086020526040902080546001600160801b0319166001600160801b039290921691909117905561105e565b61103261102d670de0b6b3a7640000610ffa8886613aee565b6110049190613bc2565b85670de0b6b3a7640000611018878a613aee565b6110229190613bc2565b8592919060016127f5565b611c21565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61106784611c21565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b600354600160801b90046001600160801b03166110d961102d826110c3670de0b6b3a764000086613bc2565b6005546001600160801b031691908860016127f5565b600580546001600160801b0319166001600160801b039290921691909117905561110285611c21565b600280545f9061111c9084906001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061114984611c21565b6002805460109061116b908490600160801b90046001600160801b0316613bd9565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061119884611c21565b6111a29082613b68565b600380546001600160801b03808416600160801b02911617905590505f6111c883612899565b90506111e6816111d787611ecc565b6111e19084613bf9565b6122ce565b6111ef846128d9565b6111fb576111fb612794565b5f61120585612938565b90508061122557604051638bdf918d60e01b815260040160405180910390fd5b50505050505050565b5f6001600160f81b038211156112575760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f838152600a602090815260408083206001600160a01b0386168452909152812080548392906112939084906139d9565b90915550505f838152600b6020526040812080548392906112b59084906139d9565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b5f610716670de0b6b3a76400006114af565b5f805f805f611326611be2565b60025490915061138b908290600160801b90046001600160801b03168a7f00000000000000000000000000000000000000000000000000000000000000008b7f0000000000000000000000000000000000000000000000000000000000000000612944565b9350876113988589612964565b11156113a6576113a6612794565b6002545f90819061140a908490600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611c02565b93506114208a670de0b6b3a7640000868c612978565b5091935090915061143390508183613aee565b61143d9087613aee565b95508861148a816114848d611452868c613aee565b8d61145d8782612a84565b877f0000000000000000000000000000000000000000000000000000000000000000612a99565b90612964565b975090945050505093509350935093565b5f6106e283670de0b6b3a764000084612ab9565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016114fd575047611586565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa15801561155f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906115839190613c20565b90505b600f545f03611595575f6115a5565b600f546115a59084908390611bb2565b9392505050565b5f6115bd6040830160208401613a28565b156115c95750826115a5565b610d778484612adc565b6002546001600160801b0316838110156115ef576115ef612794565b60045490849003907f000000000000000000000000000000000000000000000000000000000000000090611627908390600f0b612af0565b101561163557611635612794565b60045461167f9061102d90600160801b90046001600160801b0316611662670de0b6b3a764000086613bc2565b600554600160801b90046001600160801b031691908960016127f5565b600580546001600160801b03928316600160801b0292169190911790556116a581611c21565b600280546001600160801b0319166001600160801b03929092169190911790556116ce85611c21565b600280546010906116f0908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061171d85611c21565b6004805460109061173f908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f61176d83612899565b90506111e68161177c88611ecc565b6111e19084613b88565b5f808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016117d557504761185e565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611837573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061185b9190613c20565b90505b60015f73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016118d857873410156118c7576040516312171d8360e31b815260040160405180910390fd5b6118d18834613aee565b905061196f565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af1158015611948573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061196c9190613c37565b91505b8161198d576040516312171d8360e31b815260040160405180910390fd5b600f545f036119d1576119c0887f0000000000000000000000000000000000000000000000000000000000000000612adc565b600f81905594509250611a08915050565b600f545f906119e2908a9086611bb2565b905080600f5f8282546119f591906139d9565b90915550909550909350611a0892505050565b935093915050565b5f611a1a846114af565b9050600f545f03611a5757611a4f817f0000000000000000000000000000000000000000000000000000000000000000612adc565b600f55611a7b565b5f611a6182612b15565b905080600f5f828254611a7491906139d9565b9091555050505b60015f73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611af55782341015611ae4576040516312171d8360e31b815260040160405180910390fd5b611aee8334613aee565b9050611b8c565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af1158015611b65573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b899190613c37565b91505b81611baa576040516312171d8360e31b815260040160405180910390fd5b505050505050565b5f825f190484118302158202611bc6575f80fd5b5091020490565b5f611bd88284613c66565b6106e29084613aee565b6002546004545f91610716916001600160801b0390911690600f0b612af0565b5f611c1882611c12858888611bb2565b90612bfb565b95945050505050565b5f6001600160801b03821115611c4a57604051630f0af95160e11b815260040160405180910390fd5b5090565b5f818311611c5c57826106e2565b50919050565b6006545f908190611c84908490600160801b90046001600160801b03166106ce565b6006546201000090046001600160701b03169250905081811115611dfa575f611cad8383613aee565b9050611cbc61102d828661149b565b60068054601090611cde908490600160801b90046001600160801b0316613bd9565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611d168583612adc90919063ffffffff16565b90505f611d43827f00000000000000000000000000000000000000000000000000000000000000006106ce565b90508060095f828254611d5691906139d9565b90915550611d6690508183613aee565b9150611d7182611c21565b600280545f90611d8b9084906001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611db882612c60565b600480545f90611dcc908490600f0b613c79565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f80611e0b8785612adc565b91505f611e38837f00000000000000000000000000000000000000000000000000000000000000006106ce565b9050611e64817f00000000000000000000000000000000000000000000000000000000000000006106ce565b91508315611e8757611e768282613aee565b611e809084613aee565b9250611e9e565b611e918282613aee565b611e9b90846139d9565b92505b86861015611ec157611eb1838789611bb2565b9250611ebe828789611bb2565b91505b509550959350505050565b5f6001600160ff1b03821115611c4a5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b0316611f3d61102d82611f21670de0b6b3a764000086613bc2565b600554600160801b90046001600160801b031691908a5f6127f5565b600580546001600160801b03928316600160801b029216919091179055611f6386611c21565b611f6d9082613bd9565b600480546001600160801b03928316600160801b029216919091179055611f9384611c21565b600280545f90611fad9084906001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550611fda83612c89565b600480545f90611fee908490600f0b613c79565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061201e85611c21565b60028054601090612040908490600160801b90046001600160801b0316613bd9565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f806120838461207d8a888a611bb2565b90612adc565b9050612090888486611bb2565b61209a90826139d9565b9050868111156120aa5786810391505b509695505050505050565b5f6001600160701b03821115611c4a5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061212057507f000000000000000000000000000000000000000000000000000000000000000061211e8583613aee565b105b1561212d5761212d612794565b6004549084900390600f0b6121428482613b88565b90508361214e86611ecc565b13801561218357507f00000000000000000000000000000000000000000000000000000000000000006121818383612af0565b105b1561219057612190612794565b600354600160801b90046001600160801b03166121d161102d826121bc670de0b6b3a764000088613bc2565b6005546001600160801b031691908c5f6127f5565b600580546001600160801b0319166001600160801b03929092169190911790556121fb8882613aee565b905061220681611c21565b600380546001600160801b03928316600160801b02921691909117905561222c83611c21565b600280546001600160801b0319166001600160801b039290921691909117905561225582612c89565b600480546001600160801b0319166001600160801b039290921691909117905561227e87611c21565b600280546010906122a0908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b6003546122e99061102d906001600160801b03168484612cc4565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291612357916001600160801b031690613aee565b9050805f0361236a5760019150506106e5565b5f61237485612d26565b9050805f03612388576001925050506106e5565b5f80612395838589612dc1565b91509150806123aa575f9450505050506106e5565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016123e5929190613d24565b6040805180830381865af41580156123ff573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906124239190613d99565b9150915061244161243382611ecc565b61243c90613dbb565b612f2e565b925082612456575f96505050505050506106e5565b61245f82611c21565b600780545f906124799084906001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506124a681611c21565b600780546010906124c8908490600160801b90046001600160801b0316613b68565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e612523876130c2565b6040518263ffffffff1660e01b815260040161253f9190613dd5565b6040805180830381865af4158015612559573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061257d9190613de4565b915091508061259257505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916125f7916139d9565b6126019190613aee565b9050805f0361261757505f958695509350505050565b5f808711612625575f612630565b612630848884611bb2565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff81111561266157612661613e12565b6040519080825280601f01601f19166020018201604052801561268b576020820181803683370190505b5090505f808751602089018b8e8ef191503d9250868311156126ab578692505b828152825f602083013e90999098509650505050505050565b5f6126e48787876126dd88670de0b6b3a7640000613aee565b87876131fc565b979650505050505050565b5f610d7761272f61270884670de0b6b3a7640000613aee565b611484670de0b6b3a764000061271e818a61149b565b6127289190613aee565b8790612964565b61274190670de0b6b3a76400006139d9565b61207d84670de0b6b3a7640000613aee565b5f8061278985612761611be2565b61276b91906139d9565b600254610eff908790600160801b90046001600160801b0316613aee565b909210949350505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f805f805f6127bd89878961321e565b90925090506127cc8289613aee565b97505f6127da82888a611bb2565b90506127e6818b613aee565b9a989950979650505050505050565b5f825f03612804575084611c18565b81156128565761283561281784876139d9565b61282185876106ce565b61282b888a6106ce565b61207d91906139d9565b90505f6128428588611c4e565b905080821015612850578091505b50611c18565b82850361286457505f611c18565b61288f6128718487613aee565b61287b8587612964565b612885888a6106ce565b61207d9190613aee565b9695505050505050565b5f6128be600b5f6128ab60028661122e565b81526020019081526020015f2054611ecc565b6128cf600b5f6128ab60018761122e565b6106e59190613b88565b5f6129047f000000000000000000000000000000000000000000000000000000000000000083612964565b60035461291a91906001600160801b03166139d9565b600254612930906001600160801b0316846106ce565b101592915050565b5f6106e582600461230d565b5f6126e487878761295d88670de0b6b3a7640000613aee565b878761329d565b5f6106e28383670de0b6b3a7640000612ab9565b5f8080806129c887866129c18b61148461299a8c670de0b6b3a7640000613aee565b7f000000000000000000000000000000000000000000000000000000000000000090612964565b9190612ab9565b93506129f4847f00000000000000000000000000000000000000000000000000000000000000006106ce565b91505f612a14612a0c89670de0b6b3a7640000613aee565b8a9088612ab9565b9050612a40817f0000000000000000000000000000000000000000000000000000000000000000612964565b9350612a6c847f00000000000000000000000000000000000000000000000000000000000000006106ce565b612a7690846139d9565b915050945094509450949050565b5f818311612a9257816106e2565b5090919050565b5f80612ab084612aaa8a888a612ab9565b9061149b565b90506120908884865b5f825f190484118302158202612acd575f80fd5b50910281810615159190040190565b5f6106e283670de0b6b3a764000084611bb2565b5f80612afc84846132ad565b909250905080612b0e57612b0e612794565b5092915050565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612b63575047612bec565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612bc5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612be99190613c20565b90505b600f546115a590849083611bb2565b5f815f03612c125750670de0b6b3a76400006106e5565b825f03612c2057505f6106e5565b5f612c2a83611ecc565b90505f612c3e612c3986611ecc565b6132e5565b9050818102612c55670de0b6b3a764000082613e26565b905061288f8161350a565b5f60016001607f1b03821115611c4a5760405163a5353be560e01b815260040160405180910390fd5b5f60016001607f1b0319821280612ca6575060016001607f1b0382135b15611c4a5760405163a5353be560e01b815260040160405180910390fd5b5f80612cd0845f61369c565b612cda845f61369c565b612ce49190613b88565b90505f811315612cff57612cf881866139d9565b9450612d1d565b5f811215612d1d57612d1081613dbb565b612d1a9086613aee565b94505b50929392505050565b6003545f908190612d40906001600160801b03168461149b565b9050612d6c7f0000000000000000000000000000000000000000000000000000000000000000826139d9565b6002546001600160801b03161115611c5c576002547f000000000000000000000000000000000000000000000000000000000000000090612db79083906001600160801b0316613aee565b6115a59190613aee565b612dc96138cc565b5f80612dd4846130c2565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401612e0e9190613dd5565b6040805180830381865af4158015612e28573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612e4c9190613de4565b9350905082612e6057505f9150611a089050565b5f612e86612e818461016001518561014001516106ce90919063ffffffff16565b611ecc565b612ea6612e8185610120015186610100015161296490919063ffffffff16565b612eb09190613b88565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612fe4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906130089190613e52565b93509350935093508061302357505f98975050505050505050565b8684146130545761303384611c21565b600280546001600160801b0319166001600160801b03929092169190911790555b8583146130855761306483612c89565b600480546001600160801b0319166001600160801b03929092169190911790555b8482146130b35761309582611c21565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b6130ca613916565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916131c291166136aa565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926131f4929004166136aa565b905292915050565b5f8061320c88888888888861371e565b9092509050806120aa576120aa612794565b5f806132678561148485817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a764000061325d818c61149b565b6114849190613aee565b9150613293827f00000000000000000000000000000000000000000000000000000000000000006106ce565b9050935093915050565b5f8061320c8888888888886137e2565b5f805f836132ba86611ecc565b6132c49190613b88565b90505f8112156132da575f8092509250506106c7565b946001945092505050565b5f8082136133065760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906133899084901c611ecc565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e19821361352357505f919050565b680755bf798b4a1bf1e5821261354c576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b01818105955092935090919061288f74029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c611ecc565b5f818313612a9257816106e2565b5f80670de0b6b3a76400006136bd6106eb565b6136c79190613bc2565b90508083116136d6575f6136e0565b6136e08184613aee565b91506115a5613717670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613bc2565b8390612adc565b5f805f61372e898988888861389e565b905061374886611c126137418a8d6139d9565b87906106ce565b9850613755858a86611bb2565b98508881101561376b575f8092509250506137d7565b888103670de0b6b3a764000081106137a057613799613792670de0b6b3a76400008961149b565b8290612bfb565b90506137b8565b6137b5613792670de0b6b3a764000089612adc565b90505b808910156137cd575f809350935050506137d7565b8803925060019150505b965096945050505050565b5f805f6137f2898988888861389e565b905061380286611c12898b6139d9565b975087811015613818575f8092509250506137d7565b878103613826818688612ab9565b9050670de0b6b3a764000081106138535761384c613792670de0b6b3a76400008961149b565b905061386b565b613868613792670de0b6b3a764000089612adc565b90505b613875818661149b565b9050808a101561388c575f809350935050506137d7565b90980398600198509650505050505050565b5f6138a98585612bfb565b6138c26138ba86611c12868b612964565b859085612ab9565b61288f91906139d9565b6040518061012001604052806138e0613916565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f805f806080858703121561397e575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff8111156139a9575f80fd5b8501606081880312156139ba575f80fd5b939692955090935050565b634e487b7160e01b5f52601160045260245ffd5b808201808211156106e5576106e56139c5565b6001600160a01b03811681146105fa575f80fd5b5f60208284031215613a10575f80fd5b81356115a5816139ec565b80151581146105fa575f80fd5b5f60208284031215613a38575f80fd5b81356115a581613a1b565b5f808335601e19843603018112613a58575f80fd5b83018035915067ffffffffffffffff821115613a72575f80fd5b6020019150368190038213156106c7575f80fd5b81835281816020850137505f828201602090810191909152601f909101601f19169091010190565b878152866020820152856040820152841515606082015283608082015260c060a08201525f613ae160c083018486613a86565b9998505050505050505050565b818103818111156106e5576106e56139c5565b88815287602082015286604082015285151560608201528460808201528360a082015260e060c08201525f613b3a60e083018486613a86565b9a9950505050505050505050565b6001600160701b03818116838216019080821115612b0e57612b0e6139c5565b6001600160801b03818116838216019080821115612b0e57612b0e6139c5565b8181035f831280158383131683831282161715612b0e57612b0e6139c5565b5f60208284031215613bb7575f80fd5b81516115a5816139ec565b80820281158282048414176106e5576106e56139c5565b6001600160801b03828116828216039080821115612b0e57612b0e6139c5565b8082018281125f831280158216821582161715613c1857613c186139c5565b505092915050565b5f60208284031215613c30575f80fd5b5051919050565b5f60208284031215613c47575f80fd5b81516115a581613a1b565b634e487b7160e01b5f52601260045260245ffd5b5f82613c7457613c74613c52565b500690565b600f81810b9083900b0160016001607f1b03811360016001607f1b0319821217156106e5576106e56139c5565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b5f6102a082019050613d37828551613ca6565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613daa575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613dcf57613dcf6139c5565b505f0390565b61018081016106e58284613ca6565b5f8060408385031215613df5575f80fd5b825191506020830151613e0781613a1b565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f82613e3457613e34613c52565b600160ff1b82145f1984141615613e4d57613e4d6139c5565b500590565b5f805f8060808587031215613e65575f80fd5b84519350602085015192506040850151915060608501516139ba81613a1b56fea2646970667358221220595f82fa6e2c922399de6b50996b486c871cdc75a2e73781a8bd4b816067170b64736f6c6343000818003361028060405234801562000011575f80fd5b5060405162004328380380620043288339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613e42620004e65f395f50505f50505f6112f601525f81816102f801528181610327015261035401525f818160d901528181610596015261170c01525f81816108320152818161091d015281816109ad01528181610ab2015281816115de015281816116e6015281816123dd0152818161244001528181612ce90152818161319301526131cf01525f8181610139015281816108a201528181610eb4015281816114a70152818161150a0152818161154f015281816116c001528181611bad0152611c3c01525f611fee01525f8181612143015261341e01525f8181611071015261211701525f6133d401525f818161017b015281816108f501528181610ed501528181611477015281816114da01528181611570015261173201525f818161015a0152818161022f015281816102cd015281816106d5015281816108cf01528181610faf0152612c7f01525f818161028d01528181610d7a01528181610df101528181610e6501528181610f300152610f6801525f50505f8181610bb6015281816119b2015281816119fb01528181611a8a01528181611b0b01528181611ca701528181611d2801528181612ed901528181612f2201528181612fcf01526130180152613e425ff3fe608060405260043610610028575f3560e01c80634c2ac1d91461002c57806377d05ff414610051575b5f80fd5b61003f61003a3660046138c7565b610064565b60405190815260200160405180910390f35b61003f61005f366004613926565b61007e565b5f6100728686868686610094565b90505b95945050505050565b5f61008a8484846107de565b90505b9392505050565b5f61009d610b8c565b600654610100900460ff16156100c6576040516321081abf60e01b815260040160405180910390fd5b6100ce610bb4565b6100d782610c20565b7f00000000000000000000000000000000000000000000000000000000000000008610156101185760405163211ddda360e11b815260040160405180910390fd5b5f61019f610124610c58565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610c7d565b9050848110806101ae57508381115b156101cc57604051633b61151160e11b815260040160405180910390fd5b5f806101d88986610ca2565b915091505f6101e5610d73565b90506101f5818360046001610d9e565b506002546004546003545f92839261025e926001600160801b0380841693600f9390930b92600160801b90048116918991166102596102547f00000000000000000000000000000000000000000000000000000000000000008b613986565b611402565b611448565b915091508061028057604051630552b01360e31b815260040160405180910390fd5b8b5f6102f16008826102b27f000000000000000000000000000000000000000000000000000000000000000089613999565b815260208101919091526040015f20546001600160801b03167f000000000000000000000000000000000000000000000000000000000000000061164c565b905061031d7f000000000000000000000000000000000000000000000000000000000000000082613986565b88118061037c57507f00000000000000000000000000000000000000000000000000000000000000008111801561037c57506103797f000000000000000000000000000000000000000000000000000000000000000082613999565b88105b1561039a57604051630552b01360e31b815260040160405180910390fd5b50600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490916103e5916001600160801b0390911690613999565b5f808052600b6020527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f76549192509061041f908390613986565b90505f805f61042d8a611677565b604051635f9d50ab60e11b815290915073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063bf3aa15690610467908490600401613a2a565b602060405180830381865af4158015610482573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104a69190613a39565b91506104b96104b48c6117b1565b6117de565b6002546001600160801b03808216835260048054600f0b6020850152600160801b9092041660408084019190915251635f9d50ab60e11b815273__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9163bf3aa1569161051a91859101613a2a565b602060405180830381865af4158015610535573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105599190613a39565b92508183101561057c5760405163184d952160e11b815260040160405180910390fd5b610592848361058b8187613999565b9190611804565b9c507f00000000000000000000000000000000000000000000000000000000000000008d10156105d55760405163211ddda360e11b815260040160405180910390fd5b508f6105e1868e61181f565b10156106005760405163c972651760e01b815260040160405180910390fd5b61061c5f8e5f0160208101906106169190613a64565b8e611833565b610625896118d8565b95508561064557604051638bdf918d60e01b815260040160405180910390fd5b5f8890505f8d9050368f90505f8c90505f6106ff60025f015f9054906101000a90046001600160801b03166001600160801b0316600280015f9054906101000a9004600f0b600f0b60025f0160109054906101000a90046001600160801b03166001600160801b03168560026001015f9054906101000a90046001600160801b03166001600160801b03166102597f00000000000000000000000000000000000000000000000000000000000000008c6102549190613986565b9b5090508a158061071857506107158c5f6118e4565b81125b1561073657604051630552b01360e31b815260040160405180910390fd5b5f881561074d5761074887848b611804565b61074f565b5f5b905061075e6020850185613a64565b6001600160a01b03167fdcc4a01cea4510bd52201cebc8cd2d47d60429b35d68329abc591a70aa2efabf868d8661079b60408a0160208b01613a8c565b866107a960408c018c613aa7565b6040516107bc9796959493929190613aea565b60405180910390a2505050505050505050505050505050505061007560015f55565b5f6107e7610b8c565b6107ef610bb4565b6107f882610c20565b60065460ff161561081c57604051637983c05160e01b815260040160405180910390fd5b5f806108288685610ca2565b90925090506108587f00000000000000000000000000000000000000000000000000000000000000006002613b3d565b82101561087857604051632afb507160e21b815260040160405180910390fd5b6006805460ff1916600117905560405163594f0e8f60e11b815260048101839052602481018290527f00000000000000000000000000000000000000000000000000000000000000006044820152606481018690527f000000000000000000000000000000000000000000000000000000000000000060848201527f000000000000000000000000000000000000000000000000000000000000000060a482015260027f000000000000000000000000000000000000000000000000000000000000000002830393505f908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063b29e1d1e9060c401606060405180830381865af4158015610981573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109a59190613b54565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006109d684846118f8565b10156109f55760405163216f4ab160e21b815260040160405180910390fd5b5f80610a05858585895f80611448565b91509150801580610a1557505f82125b15610a3357604051630552b01360e31b815260040160405180910390fd5b610a3c8561191d565b600280546001600160801b0319166001600160801b0392909216919091179055610a6584611946565b600480546001600160801b0319166001600160801b0392909216919091179055610a8e8361191d565b600280546001600160801b03928316600160801b029216919091179055610ad65f807f0000000000000000000000000000000000000000000000000000000000000000611833565b610aed5f610ae760208c018c613a64565b8a611833565b610b02610af8610d73565b8760046001610d9e565b508a8a8a610b136020820182613a64565b6001600160a01b03167f4931b9953a65531203c17d9abe77870a3e49d8b13af522ec3321c18b5abb8af38c858c610b506040870160208801613a8c565b87610b5e6040890189613aa7565b604051610b719796959493929190613aea565b60405180910390a25050505050505050505061008d60015f55565b60025f5403610bae57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14801590610c0057503415155b15610c1e57604051631574f9f360e01b815260040160405180910390fd5b565b5f610c2e6020830183613a64565b6001600160a01b031603610c555760405163f0dd15fd60e01b815260040160405180910390fd5b50565b6002546004545f91610c78916001600160801b0390911690600f0b6118f8565b905090565b5f80610c8b87878786611981565b9050610c97818561164c565b979650505050505050565b815f80610cb56040850160208601613a8c565b15610cda57610cd085610ccb6040870187613aa7565b611997565b9093509050610cf2565b5034610cf285610ced6040870187613aa7565b611c21565b610cfa611dc3565b91508015610d6a576040515f90339083908381818185875af1925050503d805f8114610d41576040519150601f19603f3d011682016040523d82523d5f602084013e610d46565b606091505b5050905080610d68576040516312171d8360e31b815260040160405180910390fd5b505b505b9250929050565b5f610c78427f0000000000000000000000000000000000000000000000000000000000000000611dd5565b5f84815260086020526040812060018101546001600160801b0316151580610dc557504286115b15610dde57600101546001600160801b031690506113fa565b5f805f610de9610d73565b90505f610e167f00000000000000000000000000000000000000000000000000000000000000008b613986565b90505b81811015610e8a575f818152600860205260409020600101546001600160801b03168015610e62575f828152600860205260409020549094506001600160801b03169250610e8a565b507f000000000000000000000000000000000000000000000000000000000000000001610e19565b835f03610efc57889350610ef9610e9f610c58565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611981565b92505b50610f068361191d565b6001850180546001600160801b0319166001600160801b0392909216919091179055610f5c610f557f00000000000000000000000000000000000000000000000000000000000000008b613999565b8a84611dea565b610f9a89610f94610f8d7f000000000000000000000000000000000000000000000000000000000000000083613986565b4290611f23565b84611dea565b610fa388611f31565b505f9050600881610fd47f00000000000000000000000000000000000000000000000000000000000000008d613999565b815260208101919091526040015f908120600101546001600160801b03169150610fff60028c6120ce565b5f818152600b60205260408120549192508c8c831561114057600192505f8061102b86898d865f612102565b915091508060095f8282546110409190613986565b9091555061105b9050865f84611055816117b1565b886121cf565b6110658183613986565b915061109586838a8e877f0000000000000000000000000000000000000000000000000000000000000000612346565b91506110a96110a48385612389565b61239d565b600680546002906110ca9084906201000090046001600160701b0316613b7f565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506110f78261191d565b60068054601090611119908490600160801b90046001600160801b0316613b9f565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f61114c6001846120ce565b5f818152600b6020526040902054909150801561125757600194505f80611177838b8f886001612102565b915091508060095f82825461118c9190613986565b909155506111a79050835f846111a1816117b1565b8a6123c6565b6111b18183613999565b91506111c06110a48387612389565b600680546002906111e19084906201000090046001600160701b0316613b7f565b92506101000a8154816001600160701b0302191690836001600160701b0316021790555061120e8261191d565b60068054601090611230908490600160801b90046001600160801b0316613b9f565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b841561129057611282611269876117b1565b611272836117b1565b61127c9190613bbf565b5f6125b6565b8e61128d84826125f5565b50505b5f61129a846127e4565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa158015611350573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113749190613bde565b90506001600160a01b038116156113e8576113e55a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190612926565b50505b509b9d50505050505050505050505050505b949350505050565b5f611427600b5f6114146002866120ce565b81526020019081526020015f20546117b1565b611438600b5f6114146001876120ce565b6114429190613bbf565b92915050565b5f805f806114568a8a6129ae565b915091508061146c575f80935093505050611641565b5f6114cb838a6114a47f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613999565b8b7f00000000000000000000000000000000000000000000000000000000000000006129e6565b5090505f61152e848b846115077f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613999565b8d7f0000000000000000000000000000000000000000000000000000000000000000612a9f565b50905081158061153c575080155b1561154757505f9050805b5f611594858c7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000611981565b90506115a283838c84612b59565b509093505f90506115b3848f613986565b90505f6115d38b8b6115c4876117b1565b6115ce908e613bf9565b612ba1565b90508b6116086116037f000000000000000000000000000000000000000000000000000000000000000083612c03565b6117b1565b611611836117b1565b61161e6116038685612389565b6116289190613bbf565b6116329190613bbf565b60019950995050505050505050505b965096945050505050565b5f61008d61165f84846301e13380612c13565b61167185670de0b6b3a7640000613999565b9061181f565b61167f613818565b60408051610180810182526002546001600160801b038082168352600454600f0b6020840152600160801b91829004811693830193909352606082018590527f000000000000000000000000000000000000000000000000000000000000000060808301527f000000000000000000000000000000000000000000000000000000000000000060a08301527f000000000000000000000000000000000000000000000000000000000000000060c08301527f000000000000000000000000000000000000000000000000000000000000000060e083015260035404821661010082015260055490916101208301916117779116612c36565b81526004546001600160801b03600160801b91829004811660208401526005546040909301926117a992900416612c36565b905292915050565b5f6001600160ff1b038211156117da5760405163396ea70160e11b815260040160405180910390fd5b5090565b6117e781612ca3565b610c5557604051635044b7f560e01b815260040160405180910390fd5b5f825f190484118302158202611818575f80fd5b5091020490565b5f61008d83670de0b6b3a764000084611804565b5f838152600a602090815260408083206001600160a01b038616845290915281208054839290611864908490613986565b90915550505f838152600b602052604081208054839290611886908490613986565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a4505050565b5f6114428260046125f5565b5f8183136118f2578261008d565b50919050565b5f8061190484846129ae565b90925090508061191657611916612e37565b5092915050565b5f6001600160801b038211156117da57604051630f0af95160e11b815260040160405180910390fd5b5f60016001607f1b0319821280611963575060016001607f1b0382135b156117da5760405163a5353be560e01b815260040160405180910390fd5b5f61007582611991858888611804565b90612e50565b5f808073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016119e6575047611a6f565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611a48573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611a6c9190613a39565b90505b60015f73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611ae95787341015611ad8576040516312171d8360e31b815260040160405180910390fd5b611ae28834613999565b9050611b80565b6040516323b872dd60e01b8152336004820152306024820152604481018990527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af1158015611b59573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b7d9190613c20565b91505b81611b9e576040516312171d8360e31b815260040160405180910390fd5b600f545f03611be257611bd1887f000000000000000000000000000000000000000000000000000000000000000061181f565b600f81905594509250611c19915050565b600f545f90611bf3908a9086611804565b905080600f5f828254611c069190613986565b90915550909550909350611c1992505050565b935093915050565b5f611c2b84612ebf565b9050600f545f03611c6857611c60817f000000000000000000000000000000000000000000000000000000000000000061181f565b600f55611c8c565b5f611c7282612fb5565b905080600f5f828254611c859190613986565b9091555050505b60015f73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601611d065782341015611cf5576040516312171d8360e31b815260040160405180910390fd5b611cff8334613999565b9050611d9d565b6040516323b872dd60e01b8152336004820152306024820152604481018490527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd906064016020604051808303815f875af1158015611d76573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611d9a9190613c20565b91505b81611dbb576040516312171d8360e31b815260040160405180910390fd5b505050505050565b5f610c78670de0b6b3a7640000612ebf565b5f611de08284613c4f565b61008d9084613999565b5f83815260086020526040902054600160801b90046001600160801b0316808303611e155750505050565b5f848152600860205260408120546001600160801b031690819003611e6d57611e3d8361191d565b5f86815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611eea565b611ebe611eb9670de0b6b3a7640000611e868886613999565b611e909190613b3d565b85670de0b6b3a7640000611ea4878a613999565b611eae9190613b3d565b85929190600161309b565b61191d565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b611ef38461191d565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b5f8183116118f2578261008d565b6006545f908190611f53908490600160801b90046001600160801b0316612389565b6006546201000090046001600160701b031692509050818111156120c9575f611f7c8383613999565b9050611f8b611eb98286613135565b60068054601090611fad908490600160801b90046001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f611fe5858361181f90919063ffffffff16565b90505f612012827f0000000000000000000000000000000000000000000000000000000000000000612389565b90508060095f8282546120259190613986565b9091555061203590508183613999565b91506120408261191d565b600280545f9061205a9084906001600160801b0316613b9f565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061208782613149565b600480545f9061209b908490600f0b613c82565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f6001600160f81b038211156120f75760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f8061210e878561181f565b91505f61213b837f0000000000000000000000000000000000000000000000000000000000000000612389565b9050612167817f0000000000000000000000000000000000000000000000000000000000000000612389565b9150831561218a576121798282613999565b6121839084613999565b92506121a1565b6121948282613999565b61219e9084613986565b92505b868610156121c4576121b4838789611804565b92506121c1828789611804565b91505b509550959350505050565b600454600160801b90046001600160801b0316612217611eb9826121fb670de0b6b3a764000086613b3d565b600554600160801b90046001600160801b031691908a5f61309b565b600580546001600160801b03928316600160801b02921691909117905561223d8661191d565b6122479082613c62565b600480546001600160801b03928316600160801b02921691909117905561226d8461191d565b600280545f906122879084906001600160801b0316613b9f565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506122b483611946565b600480545f906122c8908490600f0b613c82565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055506122f88561191d565b6002805460109061231a908490600160801b90046001600160801b0316613c62565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f80612357846116718a888a611804565b9050612364888486611804565b61236e9082613986565b90508681111561237e5786810391505b509695505050505050565b5f61008d8383670de0b6b3a7640000611804565b5f6001600160701b038211156117da5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061240857507f00000000000000000000000000000000000000000000000000000000000000006124068583613999565b105b1561241557612415612e37565b6004549084900390600f0b61242a8482613bbf565b905083612436866117b1565b13801561246b57507f000000000000000000000000000000000000000000000000000000000000000061246983836118f8565b105b1561247857612478612e37565b600354600160801b90046001600160801b03166124b9611eb9826124a4670de0b6b3a764000088613b3d565b6005546001600160801b031691908c5f61309b565b600580546001600160801b0319166001600160801b03929092169190911790556124e38882613999565b90506124ee8161191d565b600380546001600160801b03928316600160801b0292169190911790556125148361191d565b600280546001600160801b0319166001600160801b039290921691909117905561253d82611946565b600480546001600160801b0319166001600160801b03929092169190911790556125668761191d565b60028054601090612588908490600160801b90046001600160801b0316613b9f565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b6003546125d190611eb9906001600160801b03168484612ba1565b600380546001600160801b0319166001600160801b03929092169190911790555050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543549091829161263f916001600160801b031690613999565b9050805f03612652576001915050611442565b5f61265c85613172565b9050805f0361267057600192505050611442565b5f8061267d83858961320d565b9150915080612692575f945050505050611442565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b81526004016126cd929190613caf565b6040805180830381865af41580156126e7573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061270b9190613d24565b9150915061272961271b826117b1565b61272490613d46565b612ca3565b92508261273e575f9650505050505050611442565b6127478261191d565b600780545f906127619084906001600160801b0316613b9f565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555061278e8161191d565b600780546010906127b0908490600160801b90046001600160801b0316613b9f565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506001965050505050505092915050565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e61280b87611677565b6040518263ffffffff1660e01b81526004016128279190613a2a565b6040805180830381865af4158015612841573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906128659190613d60565b915091508061287a57505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b0316916128df91613986565b6128e99190613999565b9050805f036128ff57505f958695509350505050565b5f80871161290d575f612918565b612918848884611804565b976001975095505050505050565b5f60605f805f8661ffff1667ffffffffffffffff81111561294957612949613d8e565b6040519080825280601f01601f191660200182016040528015612973576020820181803683370190505b5090505f808751602089018b8e8ef191503d925086831115612993578692505b828152825f602083013e9093509150505b9550959350505050565b5f805f836129bb866117b1565b6129c59190613bbf565b90505f8112156129db575f809250925050610d6c565b946001945092505050565b5f805f6129f68888888888613375565b90505f612a20670de0b6b3a7640000612a0f8888613135565b612a199190613986565b839061181f565b9050670de0b6b3a76400008110612a5457612a4d612a46670de0b6b3a76400008961181f565b8290612e50565b9050612a6c565b612a69612a46670de0b6b3a764000089613135565b90505b612a76818661181f565b905088811015612a8d575f809350935050506129a4565b97909703976001975095505050505050565b5f805f612aaf89898888886133a3565b9050612ac986611991612ac28a8d613986565b8790612389565b9850612ad6858a86611804565b985088811015612aec575f809250925050611641565b888103670de0b6b3a76400008110612b1a57612b13612a46670de0b6b3a764000089613135565b9050612b32565b612b2f612a46670de0b6b3a76400008961181f565b90505b80891015612b47575f80935093505050611641565b90970398600198509650505050505050565b5f805f805f612b698987896133c7565b9092509050612b788289613999565b97505f612b8682888a611804565b9050612b92818b613999565b9a989950979650505050505050565b5f80612bad845f61344c565b612bb7845f61344c565b612bc19190613bbf565b90505f811315612bdc57612bd58186613986565b9450612bfa565b5f811215612bfa57612bed81613d46565b612bf79086613999565b94505b50929392505050565b5f61008d8383670de0b6b3a76400005b5f825f190484118302158202612c27575f80fd5b50910281810615159190040190565b5f80670de0b6b3a7640000612c49610d73565b612c539190613b3d565b9050808311612c62575f612c6c565b612c6c8184613999565b915061008d612a19670de0b6b3a76400007f0000000000000000000000000000000000000000000000000000000000000000613b3d565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__9063d0b457ce9060a401608060405180830381865af4158015612d59573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612d7d9190613da2565b935093509350935080612d9857505f98975050505050505050565b868414612dc957612da88461191d565b600280546001600160801b0319166001600160801b03929092169190911790555b858314612dfa57612dd983611946565b600480546001600160801b0319166001600160801b03929092169190911790555b848214612e2857612e0a8261191d565b600280546001600160801b03928316600160801b0292169190911790555b50600198975050505050505050565b60405163bb55fd2760e01b815260040160405180910390fd5b5f815f03612e675750670de0b6b3a7640000611442565b825f03612e7557505f611442565b5f612e7f836117b1565b90505f612e93612e8e866117b1565b613461565b9050818102612eaa670de0b6b3a764000082613de0565b9050612eb581613686565b9695505050505050565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031601612f0d575047612f96565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015612f6f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190612f939190613a39565b90505b600f545f03612fa5575f61008d565b600f5461008d9084908390611804565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03160161300357504761308c565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015613065573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906130899190613a39565b90505b600f5461008d90849083611804565b5f825f036130aa575084610075565b81156130fc576130db6130bd8487613986565b6130c78587612389565b6130d1888a612389565b6116719190613986565b90505f6130e88588611f23565b9050808210156130f6578091505b50610075565b82850361310a57505f610075565b6100726131178487613999565b6131218587612c03565b61312b888a612389565b6116719190613999565b5f61008d83670de0b6b3a764000084612c13565b5f60016001607f1b038211156117da5760405163a5353be560e01b815260040160405180910390fd5b6003545f90819061318c906001600160801b031684613135565b90506131b87f000000000000000000000000000000000000000000000000000000000000000082613986565b6002546001600160801b031611156118f2576002547f0000000000000000000000000000000000000000000000000000000000000000906132039083906001600160801b0316613999565b61008d9190613999565b61321561386d565b5f8061322084611677565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b815260040161325a9190613a2a565b6040805180830381865af4158015613274573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906132989190613d60565b93509050826132ac57505f9150611c199050565b5f6132cd61160384610160015185610140015161238990919063ffffffff16565b6132ed611603856101200151866101000151612c0390919063ffffffff16565b6132f79190613bbf565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b5f6133808585612e50565b61339961339186611991868b612389565b859085611804565b6100729190613986565b5f6133ae8585612e50565b6133996133bf86611991868b612c03565b859085612c13565b5f806134168561341085817f0000000000000000000000000000000000000000000000000000000000000000670de0b6b3a7640000613406818c613135565b6134109190613999565b90612c03565b9150613442827f0000000000000000000000000000000000000000000000000000000000000000612389565b9050935093915050565b5f81831361345a578161008d565b5090919050565b5f8082136134825760405163e61b497560e01b815260040160405180910390fd5b506001600160801b03811160071b81811c67ffffffffffffffff1060061b1781811c63ffffffff1060051b1781811c61ffff1060041b1781811c60ff10600390811b90911782811c600f1060021b1782811c909110600190811b90911782811c90911017609f8181036060019290921b91605f198201906135059084901c6117b1565b6c465772b2bbbb5f824b15207a3081018102606090811d6d0388eaa27412d5aca026815d636e018202811d6d0df99ac502031bf953eff472fdcc018202811d6d13cdffb29d51d99322bdff5f2211018202811d6d0a0f742023def783a307a986912e018202811d6d01920d8043ca89b5239253284e42018202811d6c0b7a86d7375468fac667a0a527016c29508e458543d8aa4df2abee7883018302821d6d0139601a2efabe717e604cbb4894018302821d6d02247f7a7b6594320649aa03aba1018302821d6c8c3f38e95a6b1ff2ab1c3b343619018302821d6d02384773bdf1ac5676facced60901901830290911d6cb9a025d814b29c212b8b1a07cd1901909102780a09507084cc699bb0e71ea869ffffffffffffffffffffffff190105711340daa0d5f769dba1915cef59f0815a5506027d0267a36c0c95b3975ab3ee5b203a7614a3f75373f047d803ae7b6687f2b391909102017d57115e47018c7177eebf7cd370a3356a1b7863008a5ae8028c72b88642840160ae1d92915050565b5f680248ce36a70cb26b3e19821361369f57505f919050565b680755bf798b4a1bf1e582126136c8576040516373a2d6b160e01b815260040160405180910390fd5b6503782dace9d9604e83901b0591505f60606bb17217f7d1cf79abc9e3b39884821b056001605f1b01901d6bb17217f7d1cf79abc9e3b3988102909303926c240c330e9fb2d9cbaf0fd5aafb1984018402606090811d6d0277594991cfc85f6e2461837cd9018502811d6d1a521255e34f6a5061b25ef1c9c319018502811d6db1bbb201f443cf962f1a1d3db4a5018502811d6e02c72388d9f74f51a9331fed693f1419018502811d6e05180bb14799ab47a8a8cb2a527d57016d02d16720577bd19bf614176fe9ea6c10fe68e7fd37d0007b713f765087018702831d9081019087016d01d3967ed30fc4f89c02bab570811901810290921d6e0587f503bb6ea29d25fcb7401964500186026d360d7aeea093263ecc6e0ecb291760621b018181059550929350909190612eb574029d9dc38563c32e5c2f6dc192ee70ef65f9978af3860260c38690031c6117b1565b6040518061018001604052805f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b604051806101200160405280613881613818565b81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81526020015f81525090565b5f606082840312156118f2575f80fd5b5f805f805f60a086880312156138db575f80fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff81111561390d575f80fd5b613919888289016138b7565b9150509295509295909350565b5f805f60608486031215613938575f80fd5b8335925060208401359150604084013567ffffffffffffffff81111561395c575f80fd5b613968868287016138b7565b9150509250925092565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561144257611442613972565b8181038181111561144257611442613972565b805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e08301526101008082015181840152506101208082015181840152506101408082015181840152506101608082015181840152505050565b610180810161144282846139ac565b5f60208284031215613a49575f80fd5b5051919050565b6001600160a01b0381168114610c55575f80fd5b5f60208284031215613a74575f80fd5b813561008d81613a50565b8015158114610c55575f80fd5b5f60208284031215613a9c575f80fd5b813561008d81613a7f565b5f808335601e19843603018112613abc575f80fd5b83018035915067ffffffffffffffff821115613ad6575f80fd5b602001915036819003821315610d6c575f80fd5b878152866020820152856040820152841515606082015283608082015260c060a08201528160c0820152818360e08301375f81830160e090810191909152601f909201601f191601019695505050505050565b808202811582820484141761144257611442613972565b5f805f60608486031215613b66575f80fd5b8351925060208401519150604084015190509250925092565b6001600160701b0381811683821601908082111561191657611916613972565b6001600160801b0381811683821601908082111561191657611916613972565b8181035f83128015838313168383128216171561191657611916613972565b5f60208284031215613bee575f80fd5b815161008d81613a50565b8082018281125f831280158216821582161715613c1857613c18613972565b505092915050565b5f60208284031215613c30575f80fd5b815161008d81613a7f565b634e487b7160e01b5f52601260045260245ffd5b5f82613c5d57613c5d613c3b565b500690565b6001600160801b0382811682821603908082111561191657611916613972565b600f81810b9083900b0160016001607f1b03811360016001607f1b03198212171561144257611442613972565b5f6102a082019050613cc28285516139ac565b602084015161018083015260408401516101a083015260608401516101c083015260808401516101e083015260a084015161020083015260c084015161022083015260e084015161024083015261010090930151610260820152610280015290565b5f8060408385031215613d35575f80fd5b505080516020909101519092909150565b5f600160ff1b8201613d5a57613d5a613972565b505f0390565b5f8060408385031215613d71575f80fd5b825191506020830151613d8381613a7f565b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215613db5575f80fd5b8451935060208501519250604085015191506060850151613dd581613a7f565b939692955090935050565b5f82613dee57613dee613c3b565b600160ff1b82145f1984141615613e0757613e07613972565b50059056fea264697066735822122021c8720cb2ce8fb992cc0fa9f251aa713e00db47f62726a645ba4417ef83036d64736f6c6343000818003361028060405234801562000011575f80fd5b506040516200353e3803806200353e8339810160408190526200003491620001a5565b60015f5581516001600160a01b039081166080908152602080850151831660a0908152918501516101a052908401516101c05260c0808501516101e090815260e080870151610200526101208088015190935261010080880151909152610140808801519091529086018051519092528151909201519091528051604090810151610160529051606090810151610180529084015182166102405290920151610260521661022052620002df565b60405161020081016001600160401b03811182821017156200011257634e487b7160e01b5f52604160045260245ffd5b60405290565b80516001600160a01b03811681146200012f575f80fd5b919050565b5f6080828403121562000145575f80fd5b604051608081016001600160401b03811182821017156200017457634e487b7160e01b5f52604160045260245ffd5b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f80828403610280811215620001b9575f80fd5b61026080821215620001c9575f80fd5b620001d3620000e2565b9150620001e08562000118565b8252620001f06020860162000118565b6020830152620002036040860162000118565b6040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e08301526101008086015181840152506101208086015181840152506101408086015181840152506101606200026e81870162000118565b908301526101806200028286820162000118565b908301526101a06200029686820162000118565b908301526101c0620002aa86820162000118565b908301526101e0620002bf8787830162000134565b8184015250819350620002d481860162000118565b925050509250929050565b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051613128620004165f395f50505f50505f61099201525f50505f818161025f0152611fc901525f81816118290152818161188c01528181611bb901528181611bf501528181611de60152611fa301525f81816105500152611f7d01525f61140b01525f61156001525f818161070d015261153401525f50505f81816105710152611fef01525f818161064b015261271201525f81816101e2015281816104160152818161048d01528181610501015281816105cc015261060401525f50505f818161109d015281816110e6015281816122bd01528181612306015281816123db015281816124840152818161256a015261261301526131285ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c8063074a6de914610043578063414f826d1461006f578063cbc1343414610084575b5f80fd5b610056610051366004612be3565b610097565b6040805192835260208301919091520160405180910390f35b61008261007d366004612c35565b6100b1565b005b610056610092366004612be3565b6100bf565b5f806100a48585856100cc565b915091505b935093915050565b6100bb828261018e565b5050565b5f806100a485858561024a565b5f806100d6610398565b6100df836103c0565b5f6100e86103f8565b90506100ff6100f561040f565b826004600161043a565b5061010d3387838888610a9e565b909350915061011f6020850185612c69565b6001600160a01b0316337f07210cf9a89fae8012341fdc131255728787856379269f07c2e41c23b3c09b5884868561015d60408b0160208c01612c91565b61016a60408c018c612cac565b60405161017c96959493929190612d17565b60405180910390a3506100a960015f55565b610196610398565b5f61019f6103f8565b5f848152600860205260409020600101549091506001600160801b0316156101d2576101cb8183610bdd565b5050610241565b5f6101db61040f565b90506102077f000000000000000000000000000000000000000000000000000000000000000085612d64565b15158061021357508381105b156102315760405163ecd29e8160e01b815260040160405180910390fd5b61023d8483855f61043a565b5050505b6100bb60015f55565b5f80610254610398565b61025d836103c0565b7f000000000000000000000000000000000000000000000000000000000000000085101561029e5760405163211ddda360e11b815260040160405180910390fd5b5f6102a76103f8565b90506102b46100f561040f565b506102c05f3388610dcd565b6102db600360f81b6102d56020870187612c69565b88610ea4565b5f6102f56102ec6020870187612c69565b88848989610a9e565b90945090506103048188612d8b565b92505f61031083610f41565b5090506103206020870187612c69565b6001600160a01b0316337f1c7999deb68182de77ce89d32f82d0e13eb042921b2bfa9f35aa1c43f62f261e8a888761035e60408d0160208e01612c91565b8a888e80604001906103709190612cac565b604051610384989796959493929190612d9e565b60405180910390a35050506100a960015f55565b60025f54036103ba57604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f6103ce6020830183612c69565b6001600160a01b0316036103f55760405163f0dd15fd60e01b815260040160405180910390fd5b50565b5f61040a670de0b6b3a7640000611083565b905090565b5f61040a427f0000000000000000000000000000000000000000000000000000000000000000611180565b5f84815260086020526040812060018101546001600160801b031615158061046157504286115b1561047a57600101546001600160801b03169050610a96565b5f805f61048561040f565b90505f6104b27f00000000000000000000000000000000000000000000000000000000000000008b612de5565b90505b81811015610526575f818152600860205260409020600101546001600160801b031680156104fe575f828152600860205260409020549094506001600160801b03169250610526565b507f0000000000000000000000000000000000000000000000000000000000000000016104b5565b835f036105985788935061059561053b611195565b600254600160801b90046001600160801b03167f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006111b5565b92505b506105a2836111d4565b6001850180546001600160801b0319166001600160801b03929092169190911790556105f86105f17f00000000000000000000000000000000000000000000000000000000000000008b612d8b565b8a84611201565b610636896106306106297f000000000000000000000000000000000000000000000000000000000000000083612de5565b429061133a565b84611201565b61063f8861134e565b505f90506008816106707f00000000000000000000000000000000000000000000000000000000000000008d612d8b565b815260208101919091526040015f908120600101546001600160801b0316915061069b60028c6114eb565b5f818152600b60205260408120549192508c8c83156107dc57600192505f806106c786898d865f61151f565b915091508060095f8282546106dc9190612de5565b909155506106f79050865f846106f1816115ec565b88611615565b6107018183612de5565b915061073186838a8e877f000000000000000000000000000000000000000000000000000000000000000061178c565b915061074561074083856117d5565b6117e9565b600680546002906107669084906201000090046001600160701b0316612df8565b92506101000a8154816001600160701b0302191690836001600160701b03160217905550610793826111d4565b600680546010906107b5908490600160801b90046001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b5f6107e86001846114eb565b5f818152600b602052604090205490915080156108f357600194505f80610813838b8f88600161151f565b915091508060095f8282546108289190612de5565b909155506108439050835f8461083d816115ec565b8a611812565b61084d8183612d8b565b915061085c61074083876117d5565b6006805460029061087d9084906201000090046001600160701b0316612df8565b92506101000a8154816001600160701b0302191690836001600160701b031602179055506108aa826111d4565b600680546010906108cc908490600160801b90046001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b0316021790555050505b841561092c5761091e610905876115ec565b61090e836115ec565b6109189190612e38565b5f611a02565b8e6109298482610bdd565b50505b5f61093684610f41565b50604080518e815260208101879052908101899052606081018490526080810182905290915085907fff888cf98d2696e95c8c39aa98c9ad55a5378008f7a56614c9353b7137a57ab79060a00160405180910390a25f8f90505f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f25964586040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ec573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a109190612e57565b90506001600160a01b03811615610a8457610a815a604051336024820152604481018a905284151560648201525f90819060840160408051601f198184030181529190526020810180516001600160e01b0316633488a6a760e11b1790526001600160a01b03861693929190611a41565b50505b509b9d50505050505050505050505050505b949350505050565b5f80610aa985611ac7565b505060075485906001600160801b031680821115610ace57806001600160801b031691505b815f03610ae1575f809250925050610bd3565b610af0600360f81b8984610dcd565b6007545f90610b159084906001600160801b03600160801b9091048116908516611ad3565b9050610b20836111d4565b610b2a9083612e72565b600780546001600160801b0319166001600160801b0392909216919091179055610b53816111d4565b60078054601090610b75908490600160801b90046001600160801b0316612e72565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610ba4818887611aee565b9350610bb08684611b84565b841015610bd05760405163c972651760e01b815260040160405180910390fd5b50505b9550959350505050565b600754600360f81b5f908152600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e75435490918291610c27916001600160801b031690612d8b565b9050805f03610c3a576001915050610dc7565b5f610c4485611b98565b9050805f03610c5857600192505050610dc7565b5f80610c65838589611c33565b9150915080610c7a575f945050505050610dc7565b5f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__632c03ef68858a6040518363ffffffff1660e01b8152600401610cb5929190612f10565b6040805180830381865af4158015610ccf573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610cf39190612f85565b91509150610d11610d03826115ec565b610d0c90612fa7565b611da0565b925082610d26575f9650505050505050610dc7565b610d2f826111d4565b600780545f90610d499084906001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550610d76816111d4565b60078054601090610d98908490600160801b90046001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550600196505050505050505b92915050565b5f838152600a602090815260408083206001600160a01b0386168452909152902054811115610e0f57604051631e9acf1760e31b815260040160405180910390fd5b5f838152600a602090815260408083206001600160a01b0386168452825280832080548590039055858352600b90915281208054839290610e51908490612d8b565b909155505060408051848152602081018390525f916001600160a01b0385169133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f6291015b60405180910390a4505050565b5f838152600a602090815260408083206001600160a01b038616845290915281208054839290610ed5908490612de5565b90915550505f838152600b602052604081208054839290610ef7908490612de5565b909155505060408051848152602081018390526001600160a01b038416915f9133917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f629101610e97565b5f805f8073__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e610f6887611f34565b6040518263ffffffff1660e01b8152600401610f849190612fc1565b6040805180830381865af4158015610f9e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610fc29190612fd0565b9150915080610fd757505f9485945092505050565b600754600b6020527f3ae204c42bf80d9df0ca83c69a5573417a7a5570428fcb513b3a0276db3e7543545f8080527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f765490926001600160801b03169161103c91612de5565b6110469190612d8b565b9050805f0361105c57505f958695509350505050565b5f80871161106a575f611075565b611075848884611ad3565b976001975095505050505050565b5f8073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed197f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316016110d157504761115a565b6040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401602060405180830381865afa158015611133573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906111579190612ffe565b90505b600f545f03611169575f611179565b600f546111799084908390611ad3565b9392505050565b5f61118b8284612d64565b6111799084612d8b565b6002546004545f9161040a916001600160801b0390911690600f0b61206e565b5f6111cb826111c5858888611ad3565b90612093565b95945050505050565b5f6001600160801b038211156111fd57604051630f0af95160e11b815260040160405180910390fd5b5090565b5f83815260086020526040902054600160801b90046001600160801b031680830361122c5750505050565b5f848152600860205260408120546001600160801b03169081900361128457611254836111d4565b5f86815260086020526040902080546001600160801b0319166001600160801b0392909216919091179055611301565b6112d56112d0670de0b6b3a764000061129d8886612d8b565b6112a79190613015565b85670de0b6b3a76400006112bb878a612d8b565b6112c59190613015565b859291906001612102565b6111d4565b5f86815260086020526040902080546001600160801b0319166001600160801b03929092169190911790555b61130a846111d4565b5f9586526008602052604090952080546001600160801b03968716600160801b0296169590951790945550505050565b5f8183116113485782611179565b50919050565b6006545f908190611370908490600160801b90046001600160801b03166117d5565b6006546201000090046001600160701b031692509050818111156114e6575f6113998383612d8b565b90506113a86112d0828661219c565b600680546010906113ca908490600160801b90046001600160801b0316612e72565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505f61140285836121b090919063ffffffff16565b90505f61142f827f00000000000000000000000000000000000000000000000000000000000000006117d5565b90508060095f8282546114429190612de5565b9091555061145290508183612d8b565b915061145d826111d4565b600280545f906114779084906001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506114a4826121c4565b600480545f906114b8908490600f0b61302c565b92506101000a8154816001600160801b030219169083600f0b6001600160801b031602179055508493505050505b915091565b5f6001600160f81b038211156115145760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b5f8061152b87856121b0565b91505f611558837f00000000000000000000000000000000000000000000000000000000000000006117d5565b9050611584817f00000000000000000000000000000000000000000000000000000000000000006117d5565b915083156115a7576115968282612d8b565b6115a09084612d8b565b92506115be565b6115b18282612d8b565b6115bb9084612de5565b92505b868610156115e1576115d1838789611ad3565b92506115de828789611ad3565b91505b509550959350505050565b5f6001600160ff1b038211156111fd5760405163396ea70160e11b815260040160405180910390fd5b600454600160801b90046001600160801b031661165d6112d082611641670de0b6b3a764000086613015565b600554600160801b90046001600160801b031691908a5f612102565b600580546001600160801b03928316600160801b029216919091179055611683866111d4565b61168d9082612e72565b600480546001600160801b03928316600160801b0292169190911790556116b3846111d4565b600280545f906116cd9084906001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b031602179055506116fa836121ed565b600480545f9061170e908490600f0b61302c565b92506101000a8154816001600160801b030219169083600f0b6001600160801b0316021790555061173e856111d4565b60028054601090611760908490600160801b90046001600160801b0316612e72565b92506101000a8154816001600160801b0302191690836001600160801b03160217905550505050505050565b5f806117a38461179d8a888a611ad3565b906121b0565b90506117b0888486611ad3565b6117ba9082612de5565b9050868111156117ca5786810391505b509695505050505050565b5f6111798383670de0b6b3a7640000611ad3565b5f6001600160701b038211156111fd5760405163086b151760e11b815260040160405180910390fd5b6002546001600160801b03168381108061185457507f00000000000000000000000000000000000000000000000000000000000000006118528583612d8b565b105b1561186157611861612228565b6004549084900390600f0b6118768482612e38565b905083611882866115ec565b1380156118b757507f00000000000000000000000000000000000000000000000000000000000000006118b5838361206e565b105b156118c4576118c4612228565b600354600160801b90046001600160801b03166119056112d0826118f0670de0b6b3a764000088613015565b6005546001600160801b031691908c5f612102565b600580546001600160801b0319166001600160801b039290921691909117905561192f8882612d8b565b905061193a816111d4565b600380546001600160801b03928316600160801b029216919091179055611960836111d4565b600280546001600160801b0319166001600160801b0392909216919091179055611989826121ed565b600480546001600160801b0319166001600160801b03929092169190911790556119b2876111d4565b600280546010906119d4908490600160801b90046001600160801b0316612e18565b92506101000a8154816001600160801b0302191690836001600160801b031602179055505050505050505050565b600354611a1d906112d0906001600160801b03168484612241565b600380546001600160801b0319166001600160801b03929092169190911790555050565b5f60605f805f8661ffff1667ffffffffffffffff811115611a6457611a64613059565b6040519080825280601f01601f191660200182016040528015611a8e576020820181803683370190505b5090505f808751602089018b8e8ef191503d925086831115611aae578692505b828152825f602083013e90999098509650505050505050565b5f610dc7826004610bdd565b5f825f190484118302158202611ae7575f80fd5b5091020490565b5f80611afa85856117d5565b9050611b05816122a3565b9450845f03611b17575f915050611179565b849150611b2a6040840160208501612c91565b15611b5957611b5285611b406020860186612c69565b611b4d6040870187612cac565b612389565b9150611b7c565b611b7c85611b6a6020860186612c69565b611b776040870187612cac565b612519565b509392505050565b5f6111798383670de0b6b3a76400006126a6565b6003545f908190611bb2906001600160801b03168461219c565b9050611bde7f000000000000000000000000000000000000000000000000000000000000000082612de5565b6002546001600160801b03161115611348576002547f000000000000000000000000000000000000000000000000000000000000000090611c299083906001600160801b0316612d8b565b6111799190612d8b565b611c3b612b44565b5f80611c4684611f34565b90505f73__$2b4fa6f02a36eedfe41c65e8dd342257d3$__635a1b419e836040518263ffffffff1660e01b8152600401611c809190612fc1565b6040805180830381865af4158015611c9a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611cbe9190612fd0565b9350905082611cd257505f91506100a99050565b5f611cf8611cf38461016001518561014001516117d590919063ffffffff16565b6115ec565b611d18611cf3856101200151866101000151611b8490919063ffffffff16565b611d229190612e38565b60408051610120810182528581526020808201959095525f8052600b85527fdf7de25b7f1fd6d0b5205f0e18f1f35bd7b8d84cce336588d184533ce43a6f7654818301526060810199909952608089019990995260a088015250815160c087015281015160e086015290940151610100840152509092600192509050565b6002546004805460405163685a2be760e11b81526001600160801b03808516938201849052600f9290920b60248201819052600160801b909404909116604482018190527f00000000000000000000000000000000000000000000000000000000000000006064830152608482018590525f9391849081908190819073__$2b4fa6f02a36eedfe41c65e8dd342257d3$"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = HyperdriveFactoryTestContractFunctions(hyperdrivefactorytest_abi, self.w3, address)  # type: ignore
        self.events = HyperdriveFactoryTestContractEvents(hyperdrivefactorytest_abi, self.w3, address)  # type: ignore
        self.errors = HyperdriveFactoryTestContractErrors()

    events: HyperdriveFactoryTestContractEvents

    errors: HyperdriveFactoryTestContractErrors = (
        HyperdriveFactoryTestContractErrors()
    )

    functions: HyperdriveFactoryTestContractFunctions

    class LinkReferences(NamedTuple):
        """Link references required when deploying."""

        LPMath: LPMathContract

    link_references_placeholder_lookup: dict[str, str] = {
        "LPMath": "__$2b4fa6f02a36eedfe41c65e8dd342257d3$__",
    }

    @classmethod
    def constructor(cls, link_references: LinkReferences) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            cls.bytecode = cls.bytecode.replace(
                cls.link_references_placeholder_lookup["LPMath"],
                link_references.LPMath.address[2:].lower(),
            )

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        link_references: LinkReferences,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(link_references)

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = HyperdriveFactoryTestContractFunctions(
            hyperdrivefactorytest_abi, w3, None
        )
        contract.errors = HyperdriveFactoryTestContractErrors()

        return contract
