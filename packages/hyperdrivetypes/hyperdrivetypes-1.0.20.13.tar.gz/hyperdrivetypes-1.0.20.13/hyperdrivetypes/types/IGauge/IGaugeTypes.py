"""Dataclasses for all structs in the IGauge contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs, ErrorInfo


@dataclass(kw_only=True)
class ClaimFeesEvent(BaseEvent):
    """The event type for event ClaimFees"""

    @dataclass(kw_only=True)
    class ClaimFeesEventArgs(BaseEventArgs):
        """The args to the event ClaimFees"""

        _from: str
        claimed0: int
        claimed1: int

    # We redefine the args field with the specific event arg type.
    args: ClaimFeesEventArgs  # type: ignore[override]

    __name__: str = "ClaimFees"


@dataclass(kw_only=True)
class ClaimRewardsEvent(BaseEvent):
    """The event type for event ClaimRewards"""

    @dataclass(kw_only=True)
    class ClaimRewardsEventArgs(BaseEventArgs):
        """The args to the event ClaimRewards"""

        _from: str
        amount: int

    # We redefine the args field with the specific event arg type.
    args: ClaimRewardsEventArgs  # type: ignore[override]

    __name__: str = "ClaimRewards"


@dataclass(kw_only=True)
class DepositEvent(BaseEvent):
    """The event type for event Deposit"""

    @dataclass(kw_only=True)
    class DepositEventArgs(BaseEventArgs):
        """The args to the event Deposit"""

        _from: str
        to: str
        amount: int

    # We redefine the args field with the specific event arg type.
    args: DepositEventArgs  # type: ignore[override]

    __name__: str = "Deposit"


@dataclass(kw_only=True)
class NotifyRewardEvent(BaseEvent):
    """The event type for event NotifyReward"""

    @dataclass(kw_only=True)
    class NotifyRewardEventArgs(BaseEventArgs):
        """The args to the event NotifyReward"""

        _from: str
        amount: int

    # We redefine the args field with the specific event arg type.
    args: NotifyRewardEventArgs  # type: ignore[override]

    __name__: str = "NotifyReward"


@dataclass(kw_only=True)
class WithdrawEvent(BaseEvent):
    """The event type for event Withdraw"""

    @dataclass(kw_only=True)
    class WithdrawEventArgs(BaseEventArgs):
        """The args to the event Withdraw"""

        _from: str
        amount: int

    # We redefine the args field with the specific event arg type.
    args: WithdrawEventArgs  # type: ignore[override]

    __name__: str = "Withdraw"


NotAliveError = ErrorInfo(
    inputs=[],
    name="NotAlive",
    selector="0x10f3d9c9",
    signature="NotAlive()",
)

NotAuthorizedError = ErrorInfo(
    inputs=[],
    name="NotAuthorized",
    selector="0xea8e4eb5",
    signature="NotAuthorized()",
)

NotTeamError = ErrorInfo(
    inputs=[],
    name="NotTeam",
    selector="0xe9f3e974",
    signature="NotTeam()",
)

NotVoterError = ErrorInfo(
    inputs=[],
    name="NotVoter",
    selector="0xc18384c1",
    signature="NotVoter()",
)

RewardRateTooHighError = ErrorInfo(
    inputs=[],
    name="RewardRateTooHigh",
    selector="0x3c6be1b3",
    signature="RewardRateTooHigh()",
)

ZeroAmountError = ErrorInfo(
    inputs=[],
    name="ZeroAmount",
    selector="0x1f2a2005",
    signature="ZeroAmount()",
)

ZeroRewardRateError = ErrorInfo(
    inputs=[],
    name="ZeroRewardRate",
    selector="0x07ced7af",
    signature="ZeroRewardRate()",
)
