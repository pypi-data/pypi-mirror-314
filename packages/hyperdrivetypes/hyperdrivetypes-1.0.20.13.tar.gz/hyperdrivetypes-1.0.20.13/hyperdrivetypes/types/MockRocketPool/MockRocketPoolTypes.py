"""Dataclasses for all structs in the MockRocketPool contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs


@dataclass(kw_only=True)
class ApprovalEvent(BaseEvent):
    """The event type for event Approval"""

    @dataclass(kw_only=True)
    class ApprovalEventArgs(BaseEventArgs):
        """The args to the event Approval"""

        owner: str
        spender: str
        amount: int

    # We redefine the args field with the specific event arg type.
    args: ApprovalEventArgs  # type: ignore[override]

    __name__: str = "Approval"


@dataclass(kw_only=True)
class AuthorityUpdatedEvent(BaseEvent):
    """The event type for event AuthorityUpdated"""

    @dataclass(kw_only=True)
    class AuthorityUpdatedEventArgs(BaseEventArgs):
        """The args to the event AuthorityUpdated"""

        user: str
        newAuthority: str

    # We redefine the args field with the specific event arg type.
    args: AuthorityUpdatedEventArgs  # type: ignore[override]

    __name__: str = "AuthorityUpdated"


@dataclass(kw_only=True)
class OwnershipTransferredEvent(BaseEvent):
    """The event type for event OwnershipTransferred"""

    @dataclass(kw_only=True)
    class OwnershipTransferredEventArgs(BaseEventArgs):
        """The args to the event OwnershipTransferred"""

        user: str
        newOwner: str

    # We redefine the args field with the specific event arg type.
    args: OwnershipTransferredEventArgs  # type: ignore[override]

    __name__: str = "OwnershipTransferred"


@dataclass(kw_only=True)
class PublicCapabilityUpdatedEvent(BaseEvent):
    """The event type for event PublicCapabilityUpdated"""

    @dataclass(kw_only=True)
    class PublicCapabilityUpdatedEventArgs(BaseEventArgs):
        """The args to the event PublicCapabilityUpdated"""

        functionSig: bytes
        enabled: bool

    # We redefine the args field with the specific event arg type.
    args: PublicCapabilityUpdatedEventArgs  # type: ignore[override]

    __name__: str = "PublicCapabilityUpdated"


@dataclass(kw_only=True)
class RoleCapabilityUpdatedEvent(BaseEvent):
    """The event type for event RoleCapabilityUpdated"""

    @dataclass(kw_only=True)
    class RoleCapabilityUpdatedEventArgs(BaseEventArgs):
        """The args to the event RoleCapabilityUpdated"""

        role: int
        functionSig: bytes
        enabled: bool

    # We redefine the args field with the specific event arg type.
    args: RoleCapabilityUpdatedEventArgs  # type: ignore[override]

    __name__: str = "RoleCapabilityUpdated"


@dataclass(kw_only=True)
class TargetCustomAuthorityUpdatedEvent(BaseEvent):
    """The event type for event TargetCustomAuthorityUpdated"""

    @dataclass(kw_only=True)
    class TargetCustomAuthorityUpdatedEventArgs(BaseEventArgs):
        """The args to the event TargetCustomAuthorityUpdated"""

        target: str
        authority: str

    # We redefine the args field with the specific event arg type.
    args: TargetCustomAuthorityUpdatedEventArgs  # type: ignore[override]

    __name__: str = "TargetCustomAuthorityUpdated"


@dataclass(kw_only=True)
class TransferEvent(BaseEvent):
    """The event type for event Transfer"""

    @dataclass(kw_only=True)
    class TransferEventArgs(BaseEventArgs):
        """The args to the event Transfer"""

        _from: str
        to: str
        amount: int

    # We redefine the args field with the specific event arg type.
    args: TransferEventArgs  # type: ignore[override]

    __name__: str = "Transfer"


@dataclass(kw_only=True)
class UserRoleUpdatedEvent(BaseEvent):
    """The event type for event UserRoleUpdated"""

    @dataclass(kw_only=True)
    class UserRoleUpdatedEventArgs(BaseEventArgs):
        """The args to the event UserRoleUpdated"""

        user: str
        role: int
        enabled: bool

    # We redefine the args field with the specific event arg type.
    args: UserRoleUpdatedEventArgs  # type: ignore[override]

    __name__: str = "UserRoleUpdated"
