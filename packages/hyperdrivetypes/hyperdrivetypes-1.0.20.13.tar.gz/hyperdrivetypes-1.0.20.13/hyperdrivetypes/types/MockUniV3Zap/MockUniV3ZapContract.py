"""A web3.py Contract class for the MockUniV3Zap contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..ISwapRouter import ISwapRouterTypes as ISwapRouter
from ..IUniV3Zap import IUniV3ZapTypes as IUniV3Zap

structs = {
    "IHyperdrive.Options": IHyperdrive.Options,
    "ISwapRouter.ExactInputParams": ISwapRouter.ExactInputParams,
    "IUniV3Zap.ZapInOptions": IUniV3Zap.ZapInOptions,
}

mockuniv3zap_abi: ABI = cast(
    ABI,
    [
        {
            "type": "constructor",
            "inputs": [
                {"name": "_name", "type": "string", "internalType": "string"},
                {
                    "name": "_swapRouter",
                    "type": "address",
                    "internalType": "contract ISwapRouter",
                },
                {
                    "name": "_weth",
                    "type": "address",
                    "internalType": "contract IWETH",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {"type": "receive", "stateMutability": "payable"},
        {
            "type": "function",
            "name": "addLiquidityZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_minLpSharePrice",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minApr",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_maxApr",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_hyperdriveOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_zapInOptions",
                    "type": "tuple",
                    "internalType": "struct IUniV3Zap.ZapInOptions",
                    "components": [
                        {
                            "name": "swapParams",
                            "type": "tuple",
                            "internalType": "struct ISwapRouter.ExactInputParams",
                            "components": [
                                {
                                    "name": "path",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                                {
                                    "name": "recipient",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "deadline",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountIn",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountOutMinimum",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "sourceAsset",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sourceAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "shouldWrap",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isRebasing",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "closeLongZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_bondAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutput",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "closeShortZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_bondAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutput",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                }
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "convertToShares",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_baseAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "openLongZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_minOutput",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minVaultSharePrice",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_hyperdriveOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_zapInOptions",
                    "type": "tuple",
                    "internalType": "struct IUniV3Zap.ZapInOptions",
                    "components": [
                        {
                            "name": "swapParams",
                            "type": "tuple",
                            "internalType": "struct ISwapRouter.ExactInputParams",
                            "components": [
                                {
                                    "name": "path",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                                {
                                    "name": "recipient",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "deadline",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountIn",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountOutMinimum",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "sourceAsset",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sourceAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "shouldWrap",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isRebasing",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "longAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "openShortZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_bondAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_maxDeposit",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minVaultSharePrice",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_hyperdriveOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_zapInOptions",
                    "type": "tuple",
                    "internalType": "struct IUniV3Zap.ZapInOptions",
                    "components": [
                        {
                            "name": "swapParams",
                            "type": "tuple",
                            "internalType": "struct ISwapRouter.ExactInputParams",
                            "components": [
                                {
                                    "name": "path",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                                {
                                    "name": "recipient",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "deadline",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountIn",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "amountOutMinimum",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                        {
                            "name": "sourceAsset",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sourceAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "shouldWrap",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "isRebasing",
                            "type": "bool",
                            "internalType": "bool",
                        },
                    ],
                },
            ],
            "outputs": [
                {
                    "name": "maturityTime",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "deposit",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "payable",
        },
        {
            "type": "function",
            "name": "redeemWithdrawalSharesZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_withdrawalShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutputPerShare",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "withdrawalSharesRedeemed",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "removeLiquidityZap",
            "inputs": [
                {
                    "name": "_hyperdrive",
                    "type": "address",
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "_lpShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_minOutputPerShare",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_options",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_swapParams",
                    "type": "tuple",
                    "internalType": "struct ISwapRouter.ExactInputParams",
                    "components": [
                        {
                            "name": "path",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "recipient",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "deadline",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountIn",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "amountOutMinimum",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                    ],
                },
                {"name": "_shouldWrap", "type": "bool", "internalType": "bool"},
            ],
            "outputs": [
                {
                    "name": "proceeds",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "withdrawalShares",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "swapRouter",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract ISwapRouter",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "weth",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IWETH",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "error",
            "name": "AddressEmptyCode",
            "inputs": [
                {"name": "target", "type": "address", "internalType": "address"}
            ],
        },
        {
            "type": "error",
            "name": "AddressInsufficientBalance",
            "inputs": [
                {
                    "name": "account",
                    "type": "address",
                    "internalType": "address",
                }
            ],
        },
        {"type": "error", "name": "FailedInnerCall", "inputs": []},
        {"type": "error", "name": "InvalidInputToken", "inputs": []},
        {"type": "error", "name": "InvalidOutputToken", "inputs": []},
        {"type": "error", "name": "InvalidRecipient", "inputs": []},
        {"type": "error", "name": "InvalidSourceAmount", "inputs": []},
        {"type": "error", "name": "InvalidSourceAsset", "inputs": []},
        {"type": "error", "name": "InvalidSwap", "inputs": []},
        {"type": "error", "name": "InvalidTimestamp", "inputs": []},
        {"type": "error", "name": "InvalidTransfer", "inputs": []},
        {"type": "error", "name": "NotPayable", "inputs": []},
        {"type": "error", "name": "ReentrancyGuardReentrantCall", "inputs": []},
        {
            "type": "error",
            "name": "SafeERC20FailedOperation",
            "inputs": [
                {"name": "token", "type": "address", "internalType": "address"}
            ],
        },
        {"type": "error", "name": "ShouldWrapAssets", "inputs": []},
        {"type": "error", "name": "TransferFailed", "inputs": []},
    ],
)


class MockUniV3ZapAddressEmptyCodeContractError(PypechainBaseError):
    """ContractError for AddressEmptyCode."""

    # Error name
    name: str = "AddressEmptyCode"
    # 4 byte error selector
    selector: str = "0x9996b315"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressEmptyCode(address)"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapAddressInsufficientBalanceContractError(PypechainBaseError):
    """ContractError for AddressInsufficientBalance."""

    # Error name
    name: str = "AddressInsufficientBalance"
    # 4 byte error selector
    selector: str = "0xcd786059"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AddressInsufficientBalance(address)"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapFailedInnerCallContractError(PypechainBaseError):
    """ContractError for FailedInnerCall."""

    # Error name
    name: str = "FailedInnerCall"
    # 4 byte error selector
    selector: str = "0x1425ea42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "FailedInnerCall()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidInputTokenContractError(PypechainBaseError):
    """ContractError for InvalidInputToken."""

    # Error name
    name: str = "InvalidInputToken"
    # 4 byte error selector
    selector: str = "0x2df9739b"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidInputToken()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidOutputTokenContractError(PypechainBaseError):
    """ContractError for InvalidOutputToken."""

    # Error name
    name: str = "InvalidOutputToken"
    # 4 byte error selector
    selector: str = "0x06202020"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidOutputToken()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidRecipientContractError(PypechainBaseError):
    """ContractError for InvalidRecipient."""

    # Error name
    name: str = "InvalidRecipient"
    # 4 byte error selector
    selector: str = "0x9c8d2cd2"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidRecipient()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidSourceAmountContractError(PypechainBaseError):
    """ContractError for InvalidSourceAmount."""

    # Error name
    name: str = "InvalidSourceAmount"
    # 4 byte error selector
    selector: str = "0x97e0deb1"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSourceAmount()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidSourceAssetContractError(PypechainBaseError):
    """ContractError for InvalidSourceAsset."""

    # Error name
    name: str = "InvalidSourceAsset"
    # 4 byte error selector
    selector: str = "0x005605b7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSourceAsset()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidSwapContractError(PypechainBaseError):
    """ContractError for InvalidSwap."""

    # Error name
    name: str = "InvalidSwap"
    # 4 byte error selector
    selector: str = "0x11157667"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSwap()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidTimestampContractError(PypechainBaseError):
    """ContractError for InvalidTimestamp."""

    # Error name
    name: str = "InvalidTimestamp"
    # 4 byte error selector
    selector: str = "0xb7d09497"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTimestamp()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapInvalidTransferContractError(PypechainBaseError):
    """ContractError for InvalidTransfer."""

    # Error name
    name: str = "InvalidTransfer"
    # 4 byte error selector
    selector: str = "0x2f352531"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTransfer()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapNotPayableContractError(PypechainBaseError):
    """ContractError for NotPayable."""

    # Error name
    name: str = "NotPayable"
    # 4 byte error selector
    selector: str = "0x1574f9f3"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "NotPayable()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapReentrancyGuardReentrantCallContractError(PypechainBaseError):
    """ContractError for ReentrancyGuardReentrantCall."""

    # Error name
    name: str = "ReentrancyGuardReentrantCall"
    # 4 byte error selector
    selector: str = "0x3ee5aeb5"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ReentrancyGuardReentrantCall()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapSafeERC20FailedOperationContractError(PypechainBaseError):
    """ContractError for SafeERC20FailedOperation."""

    # Error name
    name: str = "SafeERC20FailedOperation"
    # 4 byte error selector
    selector: str = "0x5274afe7"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "SafeERC20FailedOperation(address)"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapShouldWrapAssetsContractError(PypechainBaseError):
    """ContractError for ShouldWrapAssets."""

    # Error name
    name: str = "ShouldWrapAssets"
    # 4 byte error selector
    selector: str = "0x7e4e2a42"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "ShouldWrapAssets()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapTransferFailedContractError(PypechainBaseError):
    """ContractError for TransferFailed."""

    # Error name
    name: str = "TransferFailed"
    # 4 byte error selector
    selector: str = "0x90b8ec18"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "TransferFailed()"
    # Error input types
    abi: ABI = mockuniv3zap_abi


class MockUniV3ZapContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the MockUniV3Zap contract."""

    AddressEmptyCode: MockUniV3ZapAddressEmptyCodeContractError

    AddressInsufficientBalance: (
        MockUniV3ZapAddressInsufficientBalanceContractError
    )

    FailedInnerCall: MockUniV3ZapFailedInnerCallContractError

    InvalidInputToken: MockUniV3ZapInvalidInputTokenContractError

    InvalidOutputToken: MockUniV3ZapInvalidOutputTokenContractError

    InvalidRecipient: MockUniV3ZapInvalidRecipientContractError

    InvalidSourceAmount: MockUniV3ZapInvalidSourceAmountContractError

    InvalidSourceAsset: MockUniV3ZapInvalidSourceAssetContractError

    InvalidSwap: MockUniV3ZapInvalidSwapContractError

    InvalidTimestamp: MockUniV3ZapInvalidTimestampContractError

    InvalidTransfer: MockUniV3ZapInvalidTransferContractError

    NotPayable: MockUniV3ZapNotPayableContractError

    ReentrancyGuardReentrantCall: (
        MockUniV3ZapReentrancyGuardReentrantCallContractError
    )

    SafeERC20FailedOperation: MockUniV3ZapSafeERC20FailedOperationContractError

    ShouldWrapAssets: MockUniV3ZapShouldWrapAssetsContractError

    TransferFailed: MockUniV3ZapTransferFailedContractError

    def __init__(
        self,
    ) -> None:
        self.AddressEmptyCode = MockUniV3ZapAddressEmptyCodeContractError()
        self.AddressInsufficientBalance = (
            MockUniV3ZapAddressInsufficientBalanceContractError()
        )
        self.FailedInnerCall = MockUniV3ZapFailedInnerCallContractError()
        self.InvalidInputToken = MockUniV3ZapInvalidInputTokenContractError()
        self.InvalidOutputToken = MockUniV3ZapInvalidOutputTokenContractError()
        self.InvalidRecipient = MockUniV3ZapInvalidRecipientContractError()
        self.InvalidSourceAmount = (
            MockUniV3ZapInvalidSourceAmountContractError()
        )
        self.InvalidSourceAsset = MockUniV3ZapInvalidSourceAssetContractError()
        self.InvalidSwap = MockUniV3ZapInvalidSwapContractError()
        self.InvalidTimestamp = MockUniV3ZapInvalidTimestampContractError()
        self.InvalidTransfer = MockUniV3ZapInvalidTransferContractError()
        self.NotPayable = MockUniV3ZapNotPayableContractError()
        self.ReentrancyGuardReentrantCall = (
            MockUniV3ZapReentrancyGuardReentrantCallContractError()
        )
        self.SafeERC20FailedOperation = (
            MockUniV3ZapSafeERC20FailedOperationContractError()
        )
        self.ShouldWrapAssets = MockUniV3ZapShouldWrapAssetsContractError()
        self.TransferFailed = MockUniV3ZapTransferFailedContractError()

        self._all = [
            self.AddressEmptyCode,
            self.AddressInsufficientBalance,
            self.FailedInnerCall,
            self.InvalidInputToken,
            self.InvalidOutputToken,
            self.InvalidRecipient,
            self.InvalidSourceAmount,
            self.InvalidSourceAsset,
            self.InvalidSwap,
            self.InvalidTimestamp,
            self.InvalidTransfer,
            self.NotPayable,
            self.ReentrancyGuardReentrantCall,
            self.SafeERC20FailedOperation,
            self.ShouldWrapAssets,
            self.TransferFailed,
        ]


class MockUniV3ZapAddLiquidityZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the addLiquidityZap(str,int,int,int,IHyperdrive.Options,IUniV3Zap.ZapInOptions) method."""

    _function_name = "addLiquidityZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "IUniV3Zap.ZapInOptions",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapAddLiquidityZapContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the addLiquidityZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "addLiquidityZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _minLpSharePrice: int, _minApr: int, _maxApr: int, _hyperdriveOptions: IHyperdrive.Options, _zapInOptions: IUniV3Zap.ZapInOptions) -> MockUniV3ZapAddLiquidityZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapAddLiquidityZapContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapAddLiquidityZapContractFunction0._type_signature: MockUniV3ZapAddLiquidityZapContractFunction0,
        }
        return out


class MockUniV3ZapCloseLongZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the closeLongZap(str,int,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "closeLongZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapCloseLongZapContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the closeLongZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "closeLongZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _maturityTime: int, _bondAmount: int, _minOutput: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> MockUniV3ZapCloseLongZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapCloseLongZapContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapCloseLongZapContractFunction0._type_signature: MockUniV3ZapCloseLongZapContractFunction0,
        }
        return out


class MockUniV3ZapCloseShortZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the closeShortZap(str,int,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "closeShortZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapCloseShortZapContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the closeShortZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "closeShortZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _maturityTime: int, _bondAmount: int, _minOutput: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> MockUniV3ZapCloseShortZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapCloseShortZapContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapCloseShortZapContractFunction0._type_signature: MockUniV3ZapCloseShortZapContractFunction0,
        }
        return out


class MockUniV3ZapConvertToSharesContractFunction0(PypechainContractFunction):
    """ContractFunction for the convertToShares(str,int) method."""

    _function_name = "convertToShares"
    _type_signature = expand_struct_type_str(tuple(["str", "int"]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapConvertToSharesContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the convertToShares method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "convertToShares"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _baseAmount: int) -> MockUniV3ZapConvertToSharesContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapConvertToSharesContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapConvertToSharesContractFunction0._type_signature: MockUniV3ZapConvertToSharesContractFunction0,
        }
        return out


class MockUniV3ZapKindContractFunction0(PypechainContractFunction):
    """ContractFunction for the kind() method."""

    _function_name = "kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapKindContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockUniV3ZapKindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapKindContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapKindContractFunction0._type_signature: MockUniV3ZapKindContractFunction0,
        }
        return out


class MockUniV3ZapNameContractFunction0(PypechainContractFunction):
    """ContractFunction for the name() method."""

    _function_name = "name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapNameContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockUniV3ZapNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapNameContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapNameContractFunction0._type_signature: MockUniV3ZapNameContractFunction0,
        }
        return out


class MockUniV3ZapOpenLongZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the openLongZap(str,int,int,IHyperdrive.Options,IUniV3Zap.ZapInOptions) method."""

    _function_name = "openLongZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "IHyperdrive.Options",
                "IUniV3Zap.ZapInOptions",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for OpenLongZap."""

        maturityTime: int
        longAmount: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapOpenLongZapContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the openLongZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "openLongZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _minOutput: int, _minVaultSharePrice: int, _hyperdriveOptions: IHyperdrive.Options, _zapInOptions: IUniV3Zap.ZapInOptions) -> MockUniV3ZapOpenLongZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapOpenLongZapContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapOpenLongZapContractFunction0._type_signature: MockUniV3ZapOpenLongZapContractFunction0,
        }
        return out


class MockUniV3ZapOpenShortZapContractFunction0(PypechainContractFunction):
    """ContractFunction for the openShortZap(str,int,int,int,IHyperdrive.Options,IUniV3Zap.ZapInOptions) method."""

    _function_name = "openShortZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "int",
                "IHyperdrive.Options",
                "IUniV3Zap.ZapInOptions",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for OpenShortZap."""

        maturityTime: int
        deposit: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapOpenShortZapContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the openShortZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "openShortZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _bondAmount: int, _maxDeposit: int, _minVaultSharePrice: int, _hyperdriveOptions: IHyperdrive.Options, _zapInOptions: IUniV3Zap.ZapInOptions) -> MockUniV3ZapOpenShortZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapOpenShortZapContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapOpenShortZapContractFunction0._type_signature: MockUniV3ZapOpenShortZapContractFunction0,
        }
        return out


class MockUniV3ZapRedeemWithdrawalSharesZapContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the redeemWithdrawalSharesZap(str,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "redeemWithdrawalSharesZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for RedeemWithdrawalSharesZap."""

        proceeds: int
        withdrawalSharesRedeemed: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapRedeemWithdrawalSharesZapContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the redeemWithdrawalSharesZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "redeemWithdrawalSharesZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _withdrawalShares: int, _minOutputPerShare: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> MockUniV3ZapRedeemWithdrawalSharesZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapRedeemWithdrawalSharesZapContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapRedeemWithdrawalSharesZapContractFunction0._type_signature: MockUniV3ZapRedeemWithdrawalSharesZapContractFunction0,
        }
        return out


class MockUniV3ZapRemoveLiquidityZapContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the removeLiquidityZap(str,int,int,IHyperdrive.Options,ISwapRouter.ExactInputParams,bool) method."""

    _function_name = "removeLiquidityZap"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "int",
                "int",
                "IHyperdrive.Options",
                "ISwapRouter.ExactInputParams",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = MockUniV3ZapContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for RemoveLiquidityZap."""

        proceeds: int
        withdrawalShares: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapRemoveLiquidityZapContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the removeLiquidityZap method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "removeLiquidityZap"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hyperdrive: str, _lpShares: int, _minOutputPerShare: int, _options: IHyperdrive.Options, _swapParams: ISwapRouter.ExactInputParams, _shouldWrap: bool) -> MockUniV3ZapRemoveLiquidityZapContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapRemoveLiquidityZapContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapRemoveLiquidityZapContractFunction0._type_signature: MockUniV3ZapRemoveLiquidityZapContractFunction0,
        }
        return out


class MockUniV3ZapSwapRouterContractFunction0(PypechainContractFunction):
    """ContractFunction for the swapRouter() method."""

    _function_name = "swapRouter"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapSwapRouterContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the swapRouter method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "swapRouter"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockUniV3ZapSwapRouterContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapSwapRouterContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapSwapRouterContractFunction0._type_signature: MockUniV3ZapSwapRouterContractFunction0,
        }
        return out


class MockUniV3ZapVersionContractFunction0(PypechainContractFunction):
    """ContractFunction for the version() method."""

    _function_name = "version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapVersionContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockUniV3ZapVersionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapVersionContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapVersionContractFunction0._type_signature: MockUniV3ZapVersionContractFunction0,
        }
        return out


class MockUniV3ZapWethContractFunction0(PypechainContractFunction):
    """ContractFunction for the weth() method."""

    _function_name = "weth"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = MockUniV3ZapContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockUniV3ZapWethContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the weth method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "weth"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> MockUniV3ZapWethContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockUniV3ZapWethContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockUniV3ZapWethContractFunction0._type_signature: MockUniV3ZapWethContractFunction0,
        }
        return out


class MockUniV3ZapContractFunctions(ContractFunctions):
    """ContractFunctions for the MockUniV3Zap contract."""

    addLiquidityZap: MockUniV3ZapAddLiquidityZapContractFunction

    closeLongZap: MockUniV3ZapCloseLongZapContractFunction

    closeShortZap: MockUniV3ZapCloseShortZapContractFunction

    convertToShares: MockUniV3ZapConvertToSharesContractFunction

    kind: MockUniV3ZapKindContractFunction

    name: MockUniV3ZapNameContractFunction

    openLongZap: MockUniV3ZapOpenLongZapContractFunction

    openShortZap: MockUniV3ZapOpenShortZapContractFunction

    redeemWithdrawalSharesZap: (
        MockUniV3ZapRedeemWithdrawalSharesZapContractFunction
    )

    removeLiquidityZap: MockUniV3ZapRemoveLiquidityZapContractFunction

    swapRouter: MockUniV3ZapSwapRouterContractFunction

    version: MockUniV3ZapVersionContractFunction

    weth: MockUniV3ZapWethContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.addLiquidityZap = (
            MockUniV3ZapAddLiquidityZapContractFunction.factory(
                "addLiquidityZap",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="addLiquidityZap",
            )
        )
        self.closeLongZap = MockUniV3ZapCloseLongZapContractFunction.factory(
            "closeLongZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="closeLongZap",
        )
        self.closeShortZap = MockUniV3ZapCloseShortZapContractFunction.factory(
            "closeShortZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="closeShortZap",
        )
        self.convertToShares = (
            MockUniV3ZapConvertToSharesContractFunction.factory(
                "convertToShares",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="convertToShares",
            )
        )
        self.kind = MockUniV3ZapKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="kind",
        )
        self.name = MockUniV3ZapNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="name",
        )
        self.openLongZap = MockUniV3ZapOpenLongZapContractFunction.factory(
            "openLongZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="openLongZap",
        )
        self.openShortZap = MockUniV3ZapOpenShortZapContractFunction.factory(
            "openShortZap",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="openShortZap",
        )
        self.redeemWithdrawalSharesZap = (
            MockUniV3ZapRedeemWithdrawalSharesZapContractFunction.factory(
                "redeemWithdrawalSharesZap",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="redeemWithdrawalSharesZap",
            )
        )
        self.removeLiquidityZap = (
            MockUniV3ZapRemoveLiquidityZapContractFunction.factory(
                "removeLiquidityZap",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="removeLiquidityZap",
            )
        )
        self.swapRouter = MockUniV3ZapSwapRouterContractFunction.factory(
            "swapRouter",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="swapRouter",
        )
        self.version = MockUniV3ZapVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="version",
        )
        self.weth = MockUniV3ZapWethContractFunction.factory(
            "weth",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="weth",
        )


class MockUniV3ZapContract(Contract):
    """A web3.py Contract class for the MockUniV3Zap contract."""

    abi: ABI = mockuniv3zap_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x60c060405234801562000010575f80fd5b5060405162002d9238038062002d92833981016040819052620000339162000099565b60015f8190558390839083906200004b848262000215565b506001600160a01b039182166080521660a05250620002e192505050565b634e487b7160e01b5f52604160045260245ffd5b80516001600160a01b038116811462000094575f80fd5b919050565b5f805f60608486031215620000ac575f80fd5b83516001600160401b0380821115620000c3575f80fd5b818601915086601f830112620000d7575f80fd5b815181811115620000ec57620000ec62000069565b604051601f8201601f19908116603f0116810190838211818310171562000117576200011762000069565b8160405282815260209350898484870101111562000133575f80fd5b5f91505b8282101562000156578482018401518183018501529083019062000137565b5f848483010152809750505050620001708187016200007d565b9350505062000182604085016200007d565b90509250925092565b600181811c90821680620001a057607f821691505b602082108103620001bf57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200021057805f5260205f20601f840160051c81016020851015620001ec5750805b601f840160051c820191505b818110156200020d575f8155600101620001f8565b50505b505050565b81516001600160401b0381111562000231576200023162000069565b62000249816200024284546200018b565b84620001c5565b602080601f8311600181146200027f575f8415620002675750858301515b5f19600386901b1c1916600185901b178555620002d9565b5f85815260208120601f198616915b82811015620002af578886015182559484019460019091019084016200028e565b5085821015620002cd57878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b60805160a051612a346200035e5f395f81816101d101528181610d5301528181610f0d015281816114330152818161197a01528181611a8501528181611ca101528181611da70152611df301525f81816102930152818161128c015281816113570152818161139f01528181611cd60152611d2e0152612a345ff3fe6080604052600436106100c2575f3560e01c80634b22d5861161007c578063ba77fd3d11610057578063ba77fd3d14610263578063c31c9c0714610282578063d4951838146102b5578063dcda7d3d146102d4575f80fd5b80634b22d5861461020b57806354fd4d501461021e5780635bf8404614610250575f80fd5b806304baa00b146100ef57806306fdde03146101385780631fd5fcd61461014c57806323003ba51461016d5780633e5541f1146101a15780633fc8cef3146101c0575f80fd5b366100eb575f546002146100e957604051632f35253160e01b815260040160405180910390fd5b005b5f80fd5b3480156100fa575f80fd5b50610122604051806040016040528060088152602001670556e6956335a61760c41b81525081565b60405161012f919061224a565b60405180910390f35b348015610143575f80fd5b506101226102f3565b61015f61015a366004612296565b61037f565b60405190815260200161012f565b348015610178575f80fd5b5061018c61018736600461232f565b6104f7565b6040805192835260208301919091520161012f565b3480156101ac575f80fd5b5061015f6101bb3660046123c6565b610615565b3480156101cb575f80fd5b506101f37f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161012f565b61018c6102193660046123f0565b610629565b348015610229575f80fd5b5061012260405180604001604052806007815260200166076312e302e32360cc1b81525081565b61018c61025e366004612296565b610749565b34801561026e575f80fd5b5061015f61027d366004612474565b61093b565b34801561028d575f80fd5b506101f37f000000000000000000000000000000000000000000000000000000000000000081565b3480156102c0575f80fd5b5061015f6102cf366004612474565b610a61565b3480156102df575f80fd5b5061018c6102ee36600461232f565b610b16565b6001805461030090612515565b80601f016020809104026020016040519081016040528092919081815260200182805461032c90612515565b80156103775780601f1061034e57610100808354040283529160200191610377565b820191905f5260205f20905b81548152906001019060200180831161035a57829003601f168201915b505050505081565b5f610388610bc5565b5f610394888585610bed565b90505f6103a96103a38561268d565b836110dd565b90508161041f5761041f896103bf836001612727565b61040f6103cc888061273a565b6103d69080612758565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525061150a92505050565b6001600160a01b0316919061151b565b61042f60408601602087016127a2565b158015610447575061044760a08501608086016127a2565b156104595761045689826115de565b90505b5f82610465575f610467565b815b9050896001600160a01b0316634c2ac1d982848c8c8c8c6040518763ffffffff1660e01b815260040161049e95949392919061285d565b60206040518083038185885af11580156104ba573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906104df9190612887565b93505050506104ed60015f55565b9695505050505050565b5f80610501610bc5565b5f61051689876105108861289e565b876117ce565b604051630e07895b60e11b81529091506001600160a01b038a1690631c0f12b69061054b905f90339030908e906004016128a9565b5f604051808303815f87803b158015610562575f80fd5b505af1158015610574573d5f803e3d5ffd5b50506040516332f04d0d60e21b81526001600160a01b038c16925063cbc1343491506105a8908b908b908b906004016128ce565b60408051808303815f875af11580156105c3573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105e791906128ec565b92506105fe90506105f78661289e565b8286611a49565b92505061060a60015f55565b965096945050505050565b5f61062083836115de565b90505b92915050565b5f80610633610bc5565b5f61063f888686610bed565b90505f61064e6103a38661268d565b9050816106715761067189610664836001612727565b61040f6103cc898061273a565b61068160408701602088016127a2565b158015610699575061069960a08601608087016127a2565b156106ab576106a889826115de565b90505b5f826106b7575f6106b9565b815b9050896001600160a01b031663cba2e58d82848c8c8c6040518663ffffffff1660e01b81526004016106ee949392919061290e565b604080518083038185885af1158015610709573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061072e91906128ec565b909550935050505061073f60015f55565b9550959350505050565b5f80610753610bc5565b5f61075f898686610bed565b90505f61076e6103a38661268d565b90505f61077e6103cc878061273a565b9050826107a5576107a58b610794846001612727565b6001600160a01b038416919061151b565b5f836107b1575f6107b3565b825b90508b6001600160a01b031663dbbe8070828d8d8d8d6040518663ffffffff1660e01b81526004016107e8949392919061290e565b604080518083038185885af1158015610803573d5f803e3d5ffd5b50505050506040513d601f19601f8201168201806040525081019061082891906128ec565b909650945083156108a8574780156108a2576040515f90339083908381818185875af1925050503d805f8114610879576040519150601f19603f3d011682016040523d82523d5f602084013e61087e565b606091505b50509050806108a0576040516312171d8360e31b815260040160405180910390fd5b505b5061092e565b6040516370a0823160e01b81523060048201525f906001600160a01b038416906370a0823190602401602060405180830381865afa1580156108ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109109190612887565b9050801561092c5761092c6001600160a01b0384163383611f34565b505b5050505061060a60015f55565b5f610944610bc5565b5f61095989866109538761289e565b866117ce565b9050886001600160a01b0316631c0f12b661097560028b611f6a565b33308b6040518563ffffffff1660e01b815260040161099794939291906128a9565b5f604051808303815f87803b1580156109ae575f80fd5b505af11580156109c0573d5f803e3d5ffd5b50506040516329b23fc160e01b81526001600160a01b038c1692506329b23fc191506109f6908b908b908b908b9060040161290e565b6020604051808303815f875af1158015610a12573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610a369190612887565b50610a4a610a438561289e565b8285611a49565b915050610a5660015f55565b979650505050505050565b5f610a6a610bc5565b5f610a7989866109538761289e565b9050886001600160a01b0316631c0f12b6610a9560018b611f6a565b33308b6040518563ffffffff1660e01b8152600401610ab794939291906128a9565b5f604051808303815f87803b158015610ace575f80fd5b505af1158015610ae0573d5f803e3d5ffd5b505060405163ded0623160e01b81526001600160a01b038c16925063ded0623191506109f6908b908b908b908b9060040161290e565b5f80610b20610bc5565b5f610b2f89876105108861289e565b604051630e07895b60e11b81529091506001600160a01b038a1690631c0f12b690610b6890600360f81b90339030908e906004016128a9565b5f604051808303815f87803b158015610b7f575f80fd5b505af1158015610b91573d5f803e3d5ffd5b505060405163074a6de960e01b81526001600160a01b038c16925063074a6de991506105a8908b908b908b906004016128ce565b60025f5403610be757604051633ee5aeb560e01b815260040160405180910390fd5b60025f55565b5f30610bf9838061273a565b610c0a906040810190602001612932565b6001600160a01b031614610c3157604051634e46966960e11b815260040160405180910390fd5b5f610c82610c3f848061273a565b610c499080612758565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250611f9e92505050565b90505f610c926103cc858061273a565b9050806001600160a01b0316826001600160a01b031603610cc657604051631115766760e01b815260040160405180910390fd5b610cd660808501606086016127a2565b15610e20576001600160a01b038216610cf56040860160208701612932565b6001600160a01b031603610d1b57604051625605b760e01b815260040160405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610d406040860160208701612932565b6001600160a01b0316148015610d8857507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031614155b15610da557604051625605b760e01b815260040160405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee610dca6040860160208701612932565b6001600160a01b0316148015610dfe57508360400135341080610dfe5750610df2848061273a565b60600135846040013514155b15610e1b57604051625605b760e01b815260040160405180910390fd5b610e91565b6001600160a01b038216610e3a6040860160208701612932565b6001600160a01b031614610e6057604051625605b760e01b815260040160405180910390fd5b610e6a848061273a565b60600135846040013514610e91576040516397e0deb160e01b815260040160405180910390fd5b5f866001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ece573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ef2919061294d565b9050610f0460408701602088016127a2565b8015610f4157507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b0316145b8015610f6957506001600160a01b03811673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b15610f7a57600193505050506110d6565b610f8a60408701602088016127a2565b80156110075750866001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fcd573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ff1919061294d565b6001600160a01b0316826001600160a01b031614155b15611024576040516231010160e51b815260040160405180910390fd5b61103460408701602088016127a2565b1580156110b25750866001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611078573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061109c919061294d565b6001600160a01b0316826001600160a01b031614155b156110cf576040516231010160e51b815260040160405180910390fd5b5f93505050505b9392505050565b815151602001515f90819081908190600160601b9004905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031686602001516001600160a01b031603611146578551606001516111369034612968565b8651606001519093509150611386565b8560600151156112bf576111783330886040015189602001516001600160a01b0316611fac909392919063ffffffff16565b6111a2818760400151600161118d9190612727565b60208901516001600160a01b0316919061151b565b6040868101519051630ea598cb60e41b815260048101919091526001600160a01b0382169063ea598cb0906024016020604051808303815f875af11580156111ec573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112109190612887565b506040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa158015611253573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112779190612887565b8651606090810191909152865101516112b7907f000000000000000000000000000000000000000000000000000000000000000090610794906001612727565b349250611386565b60408601516112dc906001600160a01b0383169033903090611fac565b6040516370a0823160e01b81523060048201526001600160a01b038216906370a0823190602401602060405180830381865afa15801561131e573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906113429190612887565b865160609081019190915286510151611382907f000000000000000000000000000000000000000000000000000000000000000090610794906001612727565b3492505b855160405163c04b8d5960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163c04b8d599185916113d49160040161297b565b60206040518083038185885af11580156113f0573d5f803e3d5ffd5b50505050506040513d601f19601f820116820180604052508101906114159190612887565b9350841561149357604051632e1a7d4d60e01b8152600481018590527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d906024015f604051808303815f87803b15801561147c575f80fd5b505af115801561148e573d5f803e3d5ffd5b505050505b8215611501576040515f90339085908381818185875af1925050503d805f81146114d8576040519150601f19603f3d011682016040523d82523d5f602084013e6114dd565b606091505b50509050806114ff576040516312171d8360e31b815260040160405180910390fd5b505b50505092915050565b805101600c0151600160601b900490565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b17905261156c8482611fe5565b6115d8576040516001600160a01b0384811660248301525f60448301526115ce91869182169063095ea7b3906064015b604051602081830303815290604052915060e01b6020820180516001600160e01b038381831617835250505050612086565b6115d88482612086565b50505050565b5f46600114801561160b57506001600160a01b03831673d7e470043241c10970953bd8374ee6238e77d735145b156116e357826001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa15801561164c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611670919061294d565b6001600160a01b03166319208451836040518263ffffffff1660e01b815260040161169d91815260200190565b602060405180830381865afa1580156116b8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906116dc9190612887565b9050610623565b46600114801561170f57506001600160a01b03831673324395d5d835f84a02a75aa26814f6fd22f25698145b156117a157826001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa158015611750573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611774919061294d565b6001600160a01b031663c6e6f592836040518263ffffffff1660e01b815260040161169d91815260200190565b6040516363737ac960e11b8152600481018390526001600160a01b0384169063c6e6f5929060240161169d565b5f306117dd6020860186612932565b6001600160a01b03161461180457604051634e46966960e11b815260040160405180910390fd5b825160208101518151909101600c0151600160601b91829004915f91049050806001600160a01b0316826001600160a01b03160361185557604051631115766760e01b815260040160405180910390fd5b5f61186660408801602089016127a2565b156118d257876001600160a01b031663c55dae636040518163ffffffff1660e01b8152600401602060405180830381865afa1580156118a7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906118cb919061294d565b9050611935565b876001600160a01b0316630a4e14936040518163ffffffff1660e01b8152600401602060405180830381865afa15801561190e573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611932919061294d565b90505b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b038216016119cf578461197857604051633f27152160e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316836001600160a01b0316146119ca57604051632df9739b60e01b815260040160405180910390fd5b610a56565b841580156119ef5750826001600160a01b0316816001600160a01b031614155b15611a0d57604051632df9739b60e01b815260040160405180910390fd5b848015611a2b5750826001600160a01b0316816001600160a01b0316145b15610a5657604051632df9739b60e01b815260040160405180910390fd5b8251602001515f90600160601b90048215611bed5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeed196001600160a01b03851601611af8577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0476040518263ffffffff1660e01b81526004015f604051808303818588803b158015611adc575f80fd5b505af1158015611aee573d5f803e3d5ffd5b5050505050611bed565b6040516370a0823160e01b81523060048201525f906001600160a01b038616906370a0823190602401602060405180830381865afa158015611b3c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611b609190612887565b9050611b8282611b71836001612727565b6001600160a01b038816919061151b565b604051630ea598cb60e41b8152600481018290526001600160a01b0383169063ea598cb0906024016020604051808303815f875af1158015611bc6573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611bea9190612887565b50505b6040516370a0823160e01b81523060048201525f906001600160a01b038316906370a0823190602401602060405180830381865afa158015611c31573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611c559190612887565b9050611c7486608001518760600151836120ec9092919063ffffffff16565b6080870152606086018190528551805101600c01516020870151600160601b909104906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811690831603611cd1573060208901525b611d177f000000000000000000000000000000000000000000000000000000000000000089606001516001611d069190612727565b6001600160a01b038716919061151b565b60405163c04b8d5960e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c04b8d5990611d63908b9060040161297b565b6020604051808303815f875af1158015611d7f573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611da39190612887565b94507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b031603611f29576040516370a0823160e01b81523060048201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690632e1a7d4d9082906370a0823190602401602060405180830381865afa158015611e48573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611e6c9190612887565b6040518263ffffffff1660e01b8152600401611e8a91815260200190565b5f604051808303815f87803b158015611ea1575f80fd5b505af1158015611eb3573d5f803e3d5ffd5b505050505f816001600160a01b0316476040515f6040518083038185875af1925050503d805f8114611f00576040519150601f19603f3d011682016040523d82523d5f602084013e611f05565b606091505b5050905080611f27576040516312171d8360e31b815260040160405180910390fd5b505b505050509392505050565b6040516001600160a01b03838116602483015260448201839052611f6591859182169063a9059cbb9060640161159c565b505050565b5f6001600160f81b03821115611f935760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b60200151600160601b900490565b6040516001600160a01b0384811660248301528381166044830152606482018390526115d89186918216906323b872dd9060840161159c565b5f805f846001600160a01b03168460405161200091906129d2565b5f604051808303815f865af19150503d805f8114612039576040519150601f19603f3d011682016040523d82523d5f602084013e61203e565b606091505b509150915081801561206857508051158061206857508080602001905181019061206891906129e3565b801561207d57505f856001600160a01b03163b115b95945050505050565b5f61209a6001600160a01b03841683612107565b905080515f141580156120be5750808060200190518101906120bc91906129e3565b155b15611f6557604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b5f825f190484118302158202612100575f80fd5b5091020490565b606061062083835f845f80856001600160a01b0316848660405161212b91906129d2565b5f6040518083038185875af1925050503d805f8114612165576040519150601f19603f3d011682016040523d82523d5f602084013e61216a565b606091505b50915091506104ed86838360608261218a57612185826121d1565b6110d6565b81511580156121a157506001600160a01b0384163b155b156121ca57604051639996b31560e01b81526001600160a01b03851660048201526024016120e3565b50806110d6565b8051156121e15780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b5f5b838110156122175781810151838201526020016121ff565b50505f910152565b5f81518084526122368160208601602086016121fd565b601f01601f19169290920160200192915050565b602081525f610620602083018461221f565b6001600160a01b03811681146121fa575f80fd5b5f60608284031215612280575f80fd5b50919050565b5f60a08284031215612280575f80fd5b5f805f805f8060c087890312156122ab575f80fd5b86356122b68161225c565b9550602087013594506040870135935060608701359250608087013567ffffffffffffffff808211156122e7575f80fd5b6122f38a838b01612270565b935060a0890135915080821115612308575f80fd5b5061231589828a01612286565b9150509295509295509295565b80151581146121fa575f80fd5b5f805f805f8060c08789031215612344575f80fd5b863561234f8161225c565b95506020870135945060408701359350606087013567ffffffffffffffff80821115612379575f80fd5b6123858a838b01612270565b9450608089013591508082111561239a575f80fd5b506123a789828a01612286565b92505060a08701356123b881612322565b809150509295509295509295565b5f80604083850312156123d7575f80fd5b82356123e28161225c565b946020939093013593505050565b5f805f805f60a08688031215612404575f80fd5b853561240f8161225c565b94506020860135935060408601359250606086013567ffffffffffffffff80821115612439575f80fd5b61244589838a01612270565b9350608088013591508082111561245a575f80fd5b5061246788828901612286565b9150509295509295909350565b5f805f805f805f60e0888a03121561248a575f80fd5b87356124958161225c565b9650602088013595506040880135945060608801359350608088013567ffffffffffffffff808211156124c6575f80fd5b6124d28b838c01612270565b945060a08a01359150808211156124e7575f80fd5b506124f48a828b01612286565b92505060c088013561250581612322565b8091505092959891949750929550565b600181811c9082168061252957607f821691505b60208210810361228057634e487b7160e01b5f52602260045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b60405160a0810167ffffffffffffffff8111828210171561257e5761257e612547565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156125ad576125ad612547565b604052919050565b80356125c08161225c565b919050565b5f60a082840312156125d5575f80fd5b6125dd61255b565b9050813567ffffffffffffffff808211156125f6575f80fd5b818401915084601f830112612609575f80fd5b813560208282111561261d5761261d612547565b61262f601f8301601f19168201612584565b92508183528681838601011115612644575f80fd5b81818501828501375f8183850101528285526126618187016125b5565b818601525050505060408201356040820152606082013560608201526080820135608082015292915050565b5f60a0823603121561269d575f80fd5b6126a561255b565b823567ffffffffffffffff8111156126bb575f80fd5b6126c7368286016125c5565b82525060208301356126d88161225c565b60208201526040838101359082015260608301356126f581612322565b6060820152608083013561270881612322565b608082015292915050565b634e487b7160e01b5f52601160045260245ffd5b8082018082111561062357610623612713565b5f8235609e1983360301811261274e575f80fd5b9190910192915050565b5f808335601e1984360301811261276d575f80fd5b83018035915067ffffffffffffffff821115612787575f80fd5b60200191503681900382131561279b575f80fd5b9250929050565b5f602082840312156127b2575f80fd5b81356110d681612322565b5f81356127c98161225c565b6001600160a01b0316835260208201356127e281612322565b15156020840152604082013536839003601e19018112612800575f80fd5b820160208101903567ffffffffffffffff81111561281c575f80fd5b80360382131561282a575f80fd5b60606040860152806060860152808260808701375f608082870101526080601f19601f8301168601019250505092915050565b85815284602082015283604082015282606082015260a060808201525f610a5660a08301846127bd565b5f60208284031215612897575f80fd5b5051919050565b5f61062336836125c5565b9384526001600160a01b03928316602085015291166040830152606082015260800190565b838152826020820152606060408201525f61207d60608301846127bd565b5f80604083850312156128fd575f80fd5b505080516020909101519092909150565b848152836020820152826040820152608060608201525f6104ed60808301846127bd565b5f60208284031215612942575f80fd5b81356110d68161225c565b5f6020828403121561295d575f80fd5b81516110d68161225c565b8181038181111561062357610623612713565b602081525f825160a0602084015261299660c084018261221f565b905060018060a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b5f825161274e8184602087016121fd565b5f602082840312156129f3575f80fd5b81516110d68161232256fea264697066735822122068562b3aa49f9904a84ff9be02b1c7cf4c2693dbe24568a34597400f9fd23a8064736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MockUniV3ZapContractFunctions(mockuniv3zap_abi, self.w3, address)  # type: ignore

        self.errors = MockUniV3ZapContractErrors()

    errors: MockUniV3ZapContractErrors = MockUniV3ZapContractErrors()

    functions: MockUniV3ZapContractFunctions

    class ConstructorArgs(NamedTuple):
        """Arguments to pass the contract's constructor function."""

        name: str

        swapRouter: str

        weth: str

    @classmethod
    def constructor(cls, name: str, swapRouter: str, weth: str) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor(
            dataclass_to_tuple(name),
            dataclass_to_tuple(swapRouter),
            dataclass_to_tuple(weth),
        )

    @classmethod
    def deploy(
        cls,
        w3: Web3,
        account: LocalAccount | ChecksumAddress,
        constructor_args: ConstructorArgs,
    ) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor(
            *constructor_args,
        )

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MockUniV3ZapContractFunctions(
            mockuniv3zap_abi, w3, None
        )
        contract.errors = MockUniV3ZapContractErrors()

        return contract
