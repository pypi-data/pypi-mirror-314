"""A web3.py Contract class for the MorphoBlueHyperdriveCoreDeployer contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive

structs = {
    "IHyperdrive.Fees": IHyperdrive.Fees,
    "IHyperdrive.PoolConfig": IHyperdrive.PoolConfig,
}

morphobluehyperdrivecoredeployer_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "deployHyperdrive",
            "inputs": [
                {"name": "__name", "type": "string", "internalType": "string"},
                {
                    "name": "_config",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.PoolConfig",
                    "components": [
                        {
                            "name": "baseToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "vaultSharesToken",
                            "type": "address",
                            "internalType": "contract IERC20",
                        },
                        {
                            "name": "linkerFactory",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "linkerCodeHash",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                        {
                            "name": "initialVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumShareReserves",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minimumTransactionAmount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "circuitBreakerDelta",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "positionDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "checkpointDuration",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "timeStretch",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "governance",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "feeCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "sweepCollector",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "checkpointRewarder",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "fees",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Fees",
                            "components": [
                                {
                                    "name": "curve",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "flat",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceLP",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                                {
                                    "name": "governanceZombie",
                                    "type": "uint256",
                                    "internalType": "uint256",
                                },
                            ],
                        },
                    ],
                },
                {
                    "name": "_adminController",
                    "type": "address",
                    "internalType": "contract IHyperdriveAdminController",
                },
                {
                    "name": "_extraData",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_target0",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target1",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target2",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target3",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_target4",
                    "type": "address",
                    "internalType": "address",
                },
                {"name": "_salt", "type": "bytes32", "internalType": "bytes32"},
            ],
            "outputs": [
                {"name": "", "type": "address", "internalType": "address"}
            ],
            "stateMutability": "nonpayable",
        }
    ],
)


class MorphoBlueHyperdriveCoreDeployerContractErrors(
    PypechainBaseContractErrors
):
    """ContractErrors for the MorphoBlueHyperdriveCoreDeployer contract."""

    def __init__(
        self,
    ) -> None:

        self._all = []


class MorphoBlueHyperdriveCoreDeployerDeployHyperdriveContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the deployHyperdrive(str,IHyperdrive.PoolConfig,str,bytes,str,str,str,str,str,bytes) method."""

    _function_name = "deployHyperdrive"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "str",
                "IHyperdrive.PoolConfig",
                "str",
                "bytes",
                "str",
                "str",
                "str",
                "str",
                "str",
                "bytes",
            ]
        ),
        structs,
    )
    _error_class = MorphoBlueHyperdriveCoreDeployerContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MorphoBlueHyperdriveCoreDeployerDeployHyperdriveContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the deployHyperdrive method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "deployHyperdrive"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, __name: str, _config: IHyperdrive.PoolConfig, _adminController: str, _extraData: bytes, _target0: str, _target1: str, _target2: str, _target3: str, _target4: str, _salt: bytes) -> MorphoBlueHyperdriveCoreDeployerDeployHyperdriveContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MorphoBlueHyperdriveCoreDeployerDeployHyperdriveContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MorphoBlueHyperdriveCoreDeployerDeployHyperdriveContractFunction0._type_signature: MorphoBlueHyperdriveCoreDeployerDeployHyperdriveContractFunction0,
        }
        return out


class MorphoBlueHyperdriveCoreDeployerContractFunctions(ContractFunctions):
    """ContractFunctions for the MorphoBlueHyperdriveCoreDeployer contract."""

    deployHyperdrive: (
        MorphoBlueHyperdriveCoreDeployerDeployHyperdriveContractFunction
    )

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.deployHyperdrive = MorphoBlueHyperdriveCoreDeployerDeployHyperdriveContractFunction.factory(
            "deployHyperdrive",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="deployHyperdrive",
        )


class MorphoBlueHyperdriveCoreDeployerContract(Contract):
    """A web3.py Contract class for the MorphoBlueHyperdriveCoreDeployer contract."""

    abi: ABI = morphobluehyperdrivecoredeployer_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561000f575f80fd5b506123168061001d5f395ff3fe608060405234801562000010575f80fd5b50600436106200002c575f3560e01c80638cc23ce01462000030575b5f80fd5b620000476200004136600462000387565b62000063565b6040516001600160a01b03909116815260200160405180910390f35b5f80888060200190518101906200007b91906200047f565b60408051336020820152908101859052909150606001604051602081830303815290604052805190602001208c8c8c8b8b8b8b8b89604051620000be9062000103565b620000d2999897969594939291906200063a565b8190604051809103905ff5905080158015620000f0573d5f803e3d5ffd5b509150505b9a9950505050505050505050565b611bc6806200071b83390190565b634e487b7160e01b5f52604160045260245ffd5b604051610200810167ffffffffffffffff811182821017156200014c576200014c62000111565b60405290565b5f82601f83011262000162575f80fd5b813567ffffffffffffffff8082111562000180576200018062000111565b604051601f8301601f19908116603f01168101908282118183101715620001ab57620001ab62000111565b81604052838152866020858801011115620001c4575f80fd5b836020870160208301375f602085830101528094505050505092915050565b6001600160a01b0381168114620001f8575f80fd5b50565b80356200020881620001e3565b919050565b5f608082840312156200021e575f80fd5b6040516080810181811067ffffffffffffffff8211171562000244576200024462000111565b8060405250809150823581526020830135602082015260408301356040820152606083013560608201525092915050565b5f610260828403121562000287575f80fd5b6200029162000125565b90506200029e82620001fb565b8152620002ae60208301620001fb565b6020820152620002c160408301620001fb565b6040820152606082013560608201526080820135608082015260a082013560a082015260c082013560c082015260e082013560e08201526101008083013581830152506101208083013581830152506101408083013581830152506101606200032c818401620001fb565b9082015261018062000340838201620001fb565b908201526101a062000354838201620001fb565b908201526101c062000368838201620001fb565b908201526101e06200037d848483016200020d565b9082015292915050565b5f805f805f805f805f806103808b8d031215620003a2575f80fd5b8a3567ffffffffffffffff80821115620003ba575f80fd5b620003c88e838f0162000152565b9b50620003d98e60208f0162000275565b9a50620003ea6102808e01620001fb565b99506102a08d013591508082111562000401575f80fd5b50620004108d828e0162000152565b975050620004226102c08c01620001fb565b9550620004336102e08c01620001fb565b9450620004446103008c01620001fb565b9350620004556103208c01620001fb565b9250620004666103408c01620001fb565b91506103608b013590509295989b9194979a5092959850565b5f60a0828403121562000490575f80fd5b60405160a0810181811067ffffffffffffffff82111715620004b657620004b662000111565b6040528251620004c681620001e3565b81526020830151620004d881620001e3565b60208201526040830151620004ed81620001e3565b604082015260608301516200050281620001e3565b60608201526080928301519281019290925250919050565b80516001600160a01b0316825260208101516200054260208401826001600160a01b03169052565b5060408101516200055e60408401826001600160a01b03169052565b50606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e083015261010080820151818401525061012080820151818401525061014080820151818401525061016080820151620005d1828501826001600160a01b03169052565b5050610180818101516001600160a01b03908116918401919091526101a0808301518216908401526101c080830151909116908301526101e090810151805191830191909152602081015161020083015260408101516102208301526060015161024090910152565b5f6103e08083528b5180828501525f91505b8082101562000670576020828e01015161040083860101526020820191506200064c565b61040091505f82828601015281601f19601f830116850101925050506200069b602083018b6200051a565b6001600160a01b038981166102808401528881166102a08401528781166102c08401528681166102e08401528581166103008401528481166103208401528351811661034084015260208401518116610360840152604084015181166103808401526060840151166103a083015260808301516103c0830152620000f556fe6103c060405234801562000011575f80fd5b5060405162001bc638038062001bc6833981016040819052620000349162000784565b60015f81905588516001600160a01b0390811660809081526020808c0151831660a0908152918c01516101a052908b01516101c05260c0808c01516101e090815260e0808e015161020052610120808f0151909352610100808f0151909152610140808f0151909152908d01805151909252815190920151909152805160409081015161016052905160609081015161018052908b01518216610240528a01516102605288166102205281908a908a908a908a908a908a908a908a90620000fc898262000941565b506001600160a01b03948516610280529284166102a0529083166102c05282166102e052811661030052845181166103208190526020860151821661034052604086015182166103605260608601518216610380526080808701516103a0525162000171955090911692509050600162000181565b5050505050505050505062000a4b565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b17909152620001db90859083906200024c16565b6200024657604080516001600160a01b03851660248201525f6044808301919091528251808303909101815260649091019091526020810180516001600160e01b0390811663095ea7b360e01b179091526200023a918691620002f616565b620002468482620002f6565b50505050565b5f805f846001600160a01b03168460405162000269919062000a0d565b5f604051808303815f865af19150503d805f8114620002a4576040519150601f19603f3d011682016040523d82523d5f602084013e620002a9565b606091505b5091509150818015620002d7575080511580620002d7575080806020019051810190620002d7919062000a2a565b8015620002ed57505f856001600160a01b03163b115b95945050505050565b5f6200030c6001600160a01b0384168362000367565b905080515f141580156200033357508080602001905181019062000331919062000a2a565b155b156200036257604051635274afe760e01b81526001600160a01b03841660048201526024015b60405180910390fd5b505050565b60606200037683835f6200037d565b9392505050565b606081471015620003a45760405163cd78605960e01b815230600482015260240162000359565b5f80856001600160a01b03168486604051620003c1919062000a0d565b5f6040518083038185875af1925050503d805f8114620003fd576040519150601f19603f3d011682016040523d82523d5f602084013e62000402565b606091505b509092509050620004158683836200041f565b9695505050505050565b6060826200043857620004328262000483565b62000376565b81511580156200045057506001600160a01b0384163b155b156200047b57604051639996b31560e01b81526001600160a01b038516600482015260240162000359565b508062000376565b805115620004945780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b634e487b7160e01b5f52604160045260245ffd5b60405161020081016001600160401b0381118282101715620004ea57620004ea620004b0565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200051b576200051b620004b0565b604052919050565b5f5b838110156200053f57818101518382015260200162000525565b50505f910152565b6001600160a01b0381168114620004ad575f80fd5b8051620005698162000547565b919050565b5f608082840312156200057f575f80fd5b604051608081016001600160401b0381118282101715620005a457620005a4620004b0565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b5f6102608284031215620005e7575f80fd5b620005f1620004c4565b9050620005fe826200055c565b81526200060e602083016200055c565b602082015262000621604083016200055c565b6040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015260e082015160e08201526101008083015181830152506101208083015181830152506101408083015181830152506101606200068c8184016200055c565b90820152610180620006a08382016200055c565b908201526101a0620006b48382016200055c565b908201526101c0620006c88382016200055c565b908201526101e0620006dd848483016200056e565b9082015292915050565b5f60a08284031215620006f8575f80fd5b60405160a081016001600160401b03811182821017156200071d576200071d620004b0565b80604052508091508251620007328162000547565b81526020830151620007448162000547565b60208201526040830151620007598162000547565b604082015260608301516200076e8162000547565b6060820152608092830151920191909152919050565b5f805f805f805f805f6103e08a8c0312156200079e575f80fd5b89516001600160401b0380821115620007b5575f80fd5b818c0191508c601f830112620007c9575f80fd5b815181811115620007de57620007de620004b0565b620007f3601f8201601f1916602001620004f0565b91508082528d60208285010111156200080a575f80fd5b6200081d81602084016020860162000523565b5099506200083190508b60208c01620005d5565b9750620008426102808b016200055c565b9650620008536102a08b016200055c565b9550620008646102c08b016200055c565b9450620008756102e08b016200055c565b9350620008866103008b016200055c565b9250620008976103208b016200055c565b9150620008a98b6103408c01620006e7565b90509295985092959850929598565b600181811c90821680620008cd57607f821691505b602082108103620008ec57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200036257805f5260205f20601f840160051c81016020851015620009195750805b601f840160051c820191505b818110156200093a575f815560010162000925565b5050505050565b81516001600160401b038111156200095d576200095d620004b0565b62000975816200096e8454620008b8565b84620008f2565b602080601f831160018114620009ab575f8415620009935750858301515b5f19600386901b1c1916600185901b17855562000a05565b5f85815260208120601f198616915b82811015620009db57888601518255948401946001909101908401620009ba565b5085821015620009f957878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b5f825162000a2081846020870162000523565b9190910192915050565b5f6020828403121562000a3b575f80fd5b8151801515811462000376575f80fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a05161104162000b855f395f50505f50505f50505f50505f50505f81816105d30152818161063d015261073401525f818161054e0152818161076301526107c001525f8181610508015261095601525f81816105a001526106d201525f81816101ca015281816103820152818161060e0152818161066f015281816106a10152818161070501528181610796015281816107f001528181610925015261098901525f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50505f50506110415ff3fe6080604052600436106101b6575f3560e01c80639032c726116100eb578063d899e11211610089578063e44808bc11610063578063e44808bc14610570578063eac3e7991461058f578063f3f70707146105c2578063f698da25146105f5576101b6565b8063d899e1121461053d578063dbbe80701461052a578063ded06231146103bc576101b6565b8063a6e8a859116100c5578063a6e8a859146104f7578063ab033ea9146102bf578063cba2e58d1461052a578063cbc13434146102fa576101b6565b80639032c726146104b95780639cd241af146104d8578063a22cb46514610487576101b6565b806330adf81f116101585780634c2ac1d9116101325780634c2ac1d91461045a5780634ed2d6ac1461046d5780637180c8ca1461048757806377d05ff4146104a6576101b6565b806330adf81f146103e95780633e691db91461041c578063414f826d1461043b576101b6565b806317fad7fc1161019457806317fad7fc146103335780631c0f12b61461035257806321b57d531461037157806329b23fc1146103bc576101b6565b806301681a62146102bf57806302329a29146102e0578063074a6de9146102fa575b3480156101c1575f80fd5b505f3660605f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168585604051610202929190610a5d565b5f60405180830381855af49150503d805f811461023a576040519150601f19603f3d011682016040523d82523d5f602084013e61023f565b606091505b5091509150811561026357604051638bb0a34b60e01b815260040160405180910390fd5b5f61026d82610a6c565b90506001600160e01b03198116636e64089360e11b1461028f57815160208301fd5b8151600319810160048401908152926102b091810160200190602401610ad9565b80519650602001945050505050f35b3480156102ca575f80fd5b506102de6102d9366004610b98565b610609565b005b3480156102eb575f80fd5b506102de6102d9366004610bce565b348015610305575f80fd5b50610319610314366004610bf7565b610636565b604080519283526020830191909152015b60405180910390f35b34801561033e575f80fd5b506102de61034d366004610c8b565b61066a565b34801561035d575f80fd5b506102de61036c366004610d1a565b61069c565b34801561037c575f80fd5b506103a47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161032a565b3480156103c7575f80fd5b506103db6103d6366004610d5f565b6106cc565b60405190815260200161032a565b3480156103f4575f80fd5b506103db7f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367381565b348015610427575f80fd5b506103db610436366004610db5565b6106ff565b348015610446575f80fd5b506102de610455366004610def565b61072f565b6103db610468366004610e0f565b61075d565b348015610478575f80fd5b506102de61036c366004610e6e565b348015610492575f80fd5b506102de6104a1366004610eb5565b610791565b6103db6104b4366004610bf7565b6107ba565b3480156104c4575f80fd5b506102de6104d3366004610ee8565b6107ec565b3480156104e3575f80fd5b506102de6104f2366004610f60565b610920565b348015610502575f80fd5b506103a47f000000000000000000000000000000000000000000000000000000000000000081565b610319610538366004610d5f565b61094f565b348015610548575f80fd5b506103a47f000000000000000000000000000000000000000000000000000000000000000081565b34801561057b575f80fd5b506102de61058a366004610f95565b610984565b34801561059a575f80fd5b506103a47f000000000000000000000000000000000000000000000000000000000000000081565b3480156105cd575f80fd5b506103a47f000000000000000000000000000000000000000000000000000000000000000081565b348015610600575f80fd5b506103db6109b5565b6106327f0000000000000000000000000000000000000000000000000000000000000000610a43565b5050565b5f806106617f0000000000000000000000000000000000000000000000000000000000000000610a43565b50935093915050565b6106937f0000000000000000000000000000000000000000000000000000000000000000610a43565b50505050505050565b6106c57f0000000000000000000000000000000000000000000000000000000000000000610a43565b5050505050565b5f6106f67f0000000000000000000000000000000000000000000000000000000000000000610a43565b50949350505050565b5f6107297f0000000000000000000000000000000000000000000000000000000000000000610a43565b50919050565b6107587f0000000000000000000000000000000000000000000000000000000000000000610a43565b505050565b5f6107877f0000000000000000000000000000000000000000000000000000000000000000610a43565b5095945050505050565b6107587f0000000000000000000000000000000000000000000000000000000000000000610a43565b5f6107e47f0000000000000000000000000000000000000000000000000000000000000000610a43565b509392505050565b5f807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166108206109b5565b60405160248101919091527f65619c8664d6db8aae8c236ad19598696159942a4245b23b45565cc18e97367360448201526001600160a01b03808c1660648301528a16608482015288151560a482015260c4810188905260ff871660e4820152610104810186905261012481018590526101440160408051601f198184030181529181526020820180516001600160e01b03166314e5f07b60e01b179052516108c99190610ff0565b5f60405180830381855af49150503d805f8114610901576040519150601f19603f3d011682016040523d82523d5f602084013e610906565b606091505b50915091508161091857805160208201fd5b805160208201f35b6109497f0000000000000000000000000000000000000000000000000000000000000000610a43565b50505050565b5f8061097a7f0000000000000000000000000000000000000000000000000000000000000000610a43565b5094509492505050565b6109ad7f0000000000000000000000000000000000000000000000000000000000000000610a43565b505050505050565b60408051808201825260018152603160f81b60209182015281517f2aef22f9d7df5f9d21c56d14029233f3fdaa91917727e1eb68e504d27072d6cd818301527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b60605f80836001600160a01b03165f366040516108c99291905b818382375f9101908152919050565b805160208201516001600160e01b03198082169291906004831015610a9b5780818460040360031b1b83161693505b505050919050565b634e487b7160e01b5f52604160045260245ffd5b5f5b83811015610ad1578181015183820152602001610ab9565b50505f910152565b5f60208284031215610ae9575f80fd5b815167ffffffffffffffff80821115610b00575f80fd5b818401915084601f830112610b13575f80fd5b815181811115610b2557610b25610aa3565b604051601f8201601f19908116603f01168101908382118183101715610b4d57610b4d610aa3565b81604052828152876020848701011115610b65575f80fd5b610b76836020830160208801610ab7565b979650505050505050565b6001600160a01b0381168114610b95575f80fd5b50565b5f60208284031215610ba8575f80fd5b8135610bb381610b81565b9392505050565b80358015158114610bc9575f80fd5b919050565b5f60208284031215610bde575f80fd5b610bb382610bba565b5f60608284031215610729575f80fd5b5f805f60608486031215610c09575f80fd5b8335925060208401359150604084013567ffffffffffffffff811115610c2d575f80fd5b610c3986828701610be7565b9150509250925092565b5f8083601f840112610c53575f80fd5b50813567ffffffffffffffff811115610c6a575f80fd5b6020830191508360208260051b8501011115610c84575f80fd5b9250929050565b5f805f805f8060808789031215610ca0575f80fd5b8635610cab81610b81565b95506020870135610cbb81610b81565b9450604087013567ffffffffffffffff80821115610cd7575f80fd5b610ce38a838b01610c43565b90965094506060890135915080821115610cfb575f80fd5b50610d0889828a01610c43565b979a9699509497509295939492505050565b5f805f8060808587031215610d2d575f80fd5b843593506020850135610d3f81610b81565b92506040850135610d4f81610b81565b9396929550929360600135925050565b5f805f8060808587031215610d72575f80fd5b843593506020850135925060408501359150606085013567ffffffffffffffff811115610d9d575f80fd5b610da987828801610be7565b91505092959194509250565b5f60208284031215610dc5575f80fd5b813567ffffffffffffffff811115610ddb575f80fd5b610de784828501610be7565b949350505050565b5f8060408385031215610e00575f80fd5b50508035926020909101359150565b5f805f805f60a08688031215610e23575f80fd5b85359450602086013593506040860135925060608601359150608086013567ffffffffffffffff811115610e55575f80fd5b610e6188828901610be7565b9150509295509295909350565b5f805f8060808587031215610e81575f80fd5b843593506020850135610e9381610b81565b9250604085013591506060850135610eaa81610b81565b939692955090935050565b5f8060408385031215610ec6575f80fd5b8235610ed181610b81565b9150610edf60208401610bba565b90509250929050565b5f805f805f805f60e0888a031215610efe575f80fd5b8735610f0981610b81565b96506020880135610f1981610b81565b9550610f2760408901610bba565b945060608801359350608088013560ff81168114610f43575f80fd5b9699959850939692959460a0840135945060c09093013592915050565b5f805f60608486031215610f72575f80fd5b833592506020840135610f8481610b81565b929592945050506040919091013590565b5f805f805f60a08688031215610fa9575f80fd5b853594506020860135610fbb81610b81565b93506040860135610fcb81610b81565b9250606086013591506080860135610fe281610b81565b809150509295509295909350565b5f8251611001818460208701610ab7565b919091019291505056fea2646970667358221220759b2b8e3355bf5090c2ac85f976a49ad610f273a5de50aec5f6ac95b141943664736f6c63430008180033a26469706673582212204388490608f3967014782864a470318cfce9354af6bb03f9e05e3c9692f2afe764736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MorphoBlueHyperdriveCoreDeployerContractFunctions(morphobluehyperdrivecoredeployer_abi, self.w3, address)  # type: ignore

    functions: MorphoBlueHyperdriveCoreDeployerContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MorphoBlueHyperdriveCoreDeployerContractFunctions(
            morphobluehyperdrivecoredeployer_abi, w3, None
        )

        return contract
