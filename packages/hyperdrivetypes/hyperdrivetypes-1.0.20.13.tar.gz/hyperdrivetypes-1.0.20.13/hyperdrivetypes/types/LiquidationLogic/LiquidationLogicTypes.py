"""Dataclasses for all structs in the LiquidationLogic contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs


@dataclass(kw_only=True)
class IsolationModeTotalDebtUpdatedEvent(BaseEvent):
    """The event type for event IsolationModeTotalDebtUpdated"""

    @dataclass(kw_only=True)
    class IsolationModeTotalDebtUpdatedEventArgs(BaseEventArgs):
        """The args to the event IsolationModeTotalDebtUpdated"""

        asset: str
        totalDebt: int

    # We redefine the args field with the specific event arg type.
    args: IsolationModeTotalDebtUpdatedEventArgs  # type: ignore[override]

    __name__: str = "IsolationModeTotalDebtUpdated"


@dataclass(kw_only=True)
class LiquidationCallEvent(BaseEvent):
    """The event type for event LiquidationCall"""

    @dataclass(kw_only=True)
    class LiquidationCallEventArgs(BaseEventArgs):
        """The args to the event LiquidationCall"""

        collateralAsset: str
        debtAsset: str
        user: str
        debtToCover: int
        liquidatedCollateralAmount: int
        liquidator: str
        receiveAToken: bool

    # We redefine the args field with the specific event arg type.
    args: LiquidationCallEventArgs  # type: ignore[override]

    __name__: str = "LiquidationCall"


@dataclass(kw_only=True)
class ReserveDataUpdatedEvent(BaseEvent):
    """The event type for event ReserveDataUpdated"""

    @dataclass(kw_only=True)
    class ReserveDataUpdatedEventArgs(BaseEventArgs):
        """The args to the event ReserveDataUpdated"""

        reserve: str
        liquidityRate: int
        stableBorrowRate: int
        variableBorrowRate: int
        liquidityIndex: int
        variableBorrowIndex: int

    # We redefine the args field with the specific event arg type.
    args: ReserveDataUpdatedEventArgs  # type: ignore[override]

    __name__: str = "ReserveDataUpdated"


@dataclass(kw_only=True)
class ReserveUsedAsCollateralDisabledEvent(BaseEvent):
    """The event type for event ReserveUsedAsCollateralDisabled"""

    @dataclass(kw_only=True)
    class ReserveUsedAsCollateralDisabledEventArgs(BaseEventArgs):
        """The args to the event ReserveUsedAsCollateralDisabled"""

        reserve: str
        user: str

    # We redefine the args field with the specific event arg type.
    args: ReserveUsedAsCollateralDisabledEventArgs  # type: ignore[override]

    __name__: str = "ReserveUsedAsCollateralDisabled"


@dataclass(kw_only=True)
class ReserveUsedAsCollateralEnabledEvent(BaseEvent):
    """The event type for event ReserveUsedAsCollateralEnabled"""

    @dataclass(kw_only=True)
    class ReserveUsedAsCollateralEnabledEventArgs(BaseEventArgs):
        """The args to the event ReserveUsedAsCollateralEnabled"""

        reserve: str
        user: str

    # We redefine the args field with the specific event arg type.
    args: ReserveUsedAsCollateralEnabledEventArgs  # type: ignore[override]

    __name__: str = "ReserveUsedAsCollateralEnabled"
