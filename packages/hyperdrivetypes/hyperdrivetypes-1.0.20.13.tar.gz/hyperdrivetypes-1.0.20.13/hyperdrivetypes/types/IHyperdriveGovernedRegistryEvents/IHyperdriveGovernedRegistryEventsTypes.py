"""Dataclasses for all structs in the IHyperdriveGovernedRegistryEvents contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# super() call methods are generic, while our version adds values & types
# pylint: disable=arguments-differ

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# unable to determine which imports will be used in the generated code
# pylint: disable=unused-import

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# We import this contract itself to ensure all nested structs have a fully qualified name.
# We use this to avoid namespace collisions, as well as having a uniform
# type structure to do lookups when functions return these structs.
# pylint: disable=import-self


from __future__ import annotations

from dataclasses import dataclass

from pypechain.core import BaseEvent, BaseEventArgs


@dataclass(kw_only=True)
class AdminUpdatedEvent(BaseEvent):
    """The event type for event AdminUpdated"""

    @dataclass(kw_only=True)
    class AdminUpdatedEventArgs(BaseEventArgs):
        """The args to the event AdminUpdated"""

        admin: str

    # We redefine the args field with the specific event arg type.
    args: AdminUpdatedEventArgs  # type: ignore[override]

    __name__: str = "AdminUpdated"


@dataclass(kw_only=True)
class FactoryInfoUpdatedEvent(BaseEvent):
    """The event type for event FactoryInfoUpdated"""

    @dataclass(kw_only=True)
    class FactoryInfoUpdatedEventArgs(BaseEventArgs):
        """The args to the event FactoryInfoUpdated"""

        factory: str
        data: int

    # We redefine the args field with the specific event arg type.
    args: FactoryInfoUpdatedEventArgs  # type: ignore[override]

    __name__: str = "FactoryInfoUpdated"


@dataclass(kw_only=True)
class InitializedEvent(BaseEvent):
    """The event type for event Initialized"""

    @dataclass(kw_only=True)
    class InitializedEventArgs(BaseEventArgs):
        """The args to the event Initialized"""

        name: str
        admin: str

    # We redefine the args field with the specific event arg type.
    args: InitializedEventArgs  # type: ignore[override]

    __name__: str = "Initialized"


@dataclass(kw_only=True)
class InstanceInfoUpdatedEvent(BaseEvent):
    """The event type for event InstanceInfoUpdated"""

    @dataclass(kw_only=True)
    class InstanceInfoUpdatedEventArgs(BaseEventArgs):
        """The args to the event InstanceInfoUpdated"""

        instance: str
        data: int
        factory: str

    # We redefine the args field with the specific event arg type.
    args: InstanceInfoUpdatedEventArgs  # type: ignore[override]

    __name__: str = "InstanceInfoUpdated"


@dataclass(kw_only=True)
class NameUpdatedEvent(BaseEvent):
    """The event type for event NameUpdated"""

    @dataclass(kw_only=True)
    class NameUpdatedEventArgs(BaseEventArgs):
        """The args to the event NameUpdated"""

        name: str

    # We redefine the args field with the specific event arg type.
    args: NameUpdatedEventArgs  # type: ignore[override]

    __name__: str = "NameUpdated"
