"""A web3.py Contract class for the MockAssetId contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, NamedTuple, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractFunctions,
)
from web3.types import BlockIdentifier, StateOverride, TxParams

structs = {}

mockassetid_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "assetIdToName",
            "inputs": [
                {"name": "_id", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "assetIdToSymbol",
            "inputs": [
                {"name": "_id", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "decodeAssetId",
            "inputs": [
                {"name": "_id", "type": "uint256", "internalType": "uint256"}
            ],
            "outputs": [
                {
                    "name": "",
                    "type": "uint8",
                    "internalType": "enum AssetId.AssetIdPrefix",
                },
                {"name": "", "type": "uint256", "internalType": "uint256"},
            ],
            "stateMutability": "pure",
        },
        {
            "type": "function",
            "name": "encodeAssetId",
            "inputs": [
                {
                    "name": "_prefix",
                    "type": "uint8",
                    "internalType": "enum AssetId.AssetIdPrefix",
                },
                {
                    "name": "_timestamp",
                    "type": "uint256",
                    "internalType": "uint256",
                },
            ],
            "outputs": [
                {"name": "", "type": "uint256", "internalType": "uint256"}
            ],
            "stateMutability": "pure",
        },
        {"type": "error", "name": "InvalidTimestamp", "inputs": []},
    ],
)


class MockAssetIdInvalidTimestampContractError(PypechainBaseError):
    """ContractError for InvalidTimestamp."""

    # Error name
    name: str = "InvalidTimestamp"
    # 4 byte error selector
    selector: str = "0xb7d09497"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidTimestamp()"
    # Error input types
    abi: ABI = mockassetid_abi


class MockAssetIdContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the MockAssetId contract."""

    InvalidTimestamp: MockAssetIdInvalidTimestampContractError

    def __init__(
        self,
    ) -> None:
        self.InvalidTimestamp = MockAssetIdInvalidTimestampContractError()

        self._all = [
            self.InvalidTimestamp,
        ]


class MockAssetIdAssetIdToNameContractFunction0(PypechainContractFunction):
    """ContractFunction for the assetIdToName(int) method."""

    _function_name = "assetIdToName"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockAssetIdContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockAssetIdAssetIdToNameContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the assetIdToName method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "assetIdToName"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _id: int) -> MockAssetIdAssetIdToNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockAssetIdAssetIdToNameContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockAssetIdAssetIdToNameContractFunction0._type_signature: MockAssetIdAssetIdToNameContractFunction0,
        }
        return out


class MockAssetIdAssetIdToSymbolContractFunction0(PypechainContractFunction):
    """ContractFunction for the assetIdToSymbol(int) method."""

    _function_name = "assetIdToSymbol"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockAssetIdContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class MockAssetIdAssetIdToSymbolContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the assetIdToSymbol method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "assetIdToSymbol"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _id: int) -> MockAssetIdAssetIdToSymbolContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockAssetIdAssetIdToSymbolContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockAssetIdAssetIdToSymbolContractFunction0._type_signature: MockAssetIdAssetIdToSymbolContractFunction0,
        }
        return out


class MockAssetIdDecodeAssetIdContractFunction0(PypechainContractFunction):
    """ContractFunction for the decodeAssetId(int) method."""

    _function_name = "decodeAssetId"
    _type_signature = expand_struct_type_str(tuple(["int"]), structs)
    _error_class = MockAssetIdContractErrors

    class ReturnValues(NamedTuple):
        """The return named tuple for DecodeAssetId."""

        arg1: int
        arg2: int

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> ReturnValues:
        """returns ReturnValues."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = [int, int]

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return self.ReturnValues(
            *rename_returned_types(structs, return_types, raw_values)
        )


class MockAssetIdDecodeAssetIdContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the decodeAssetId method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "decodeAssetId"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _id: int) -> MockAssetIdDecodeAssetIdContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockAssetIdDecodeAssetIdContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockAssetIdDecodeAssetIdContractFunction0._type_signature: MockAssetIdDecodeAssetIdContractFunction0,
        }
        return out


class MockAssetIdEncodeAssetIdContractFunction0(PypechainContractFunction):
    """ContractFunction for the encodeAssetId(int,int) method."""

    _function_name = "encodeAssetId"
    _type_signature = expand_struct_type_str(tuple(["int", "int"]), structs)
    _error_class = MockAssetIdContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> int:
        """returns int."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = int

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            int, rename_returned_types(structs, return_types, raw_values)
        )


class MockAssetIdEncodeAssetIdContractFunction(PypechainOverloadedFunctions):
    """ContractFunction for the encodeAssetId method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "encodeAssetId"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _prefix: int, _timestamp: int) -> MockAssetIdEncodeAssetIdContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> MockAssetIdEncodeAssetIdContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            MockAssetIdEncodeAssetIdContractFunction0._type_signature: MockAssetIdEncodeAssetIdContractFunction0,
        }
        return out


class MockAssetIdContractFunctions(ContractFunctions):
    """ContractFunctions for the MockAssetId contract."""

    assetIdToName: MockAssetIdAssetIdToNameContractFunction

    assetIdToSymbol: MockAssetIdAssetIdToSymbolContractFunction

    decodeAssetId: MockAssetIdDecodeAssetIdContractFunction

    encodeAssetId: MockAssetIdEncodeAssetIdContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.assetIdToName = MockAssetIdAssetIdToNameContractFunction.factory(
            "assetIdToName",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="assetIdToName",
        )
        self.assetIdToSymbol = (
            MockAssetIdAssetIdToSymbolContractFunction.factory(
                "assetIdToSymbol",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="assetIdToSymbol",
            )
        )
        self.decodeAssetId = MockAssetIdDecodeAssetIdContractFunction.factory(
            "decodeAssetId",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="decodeAssetId",
        )
        self.encodeAssetId = MockAssetIdEncodeAssetIdContractFunction.factory(
            "encodeAssetId",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="encodeAssetId",
        )


class MockAssetIdContract(Contract):
    """A web3.py Contract class for the MockAssetId contract."""

    abi: ABI = mockassetid_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr(
        "0x608060405234801561000f575f80fd5b506106978061001d5f395ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80633c8c28ad1461004e5780636322c751146100775780638a227c39146100a7578063957462ac146100c8575b5f80fd5b61006161005c366004610418565b6100db565b60405161006e9190610451565b60405180910390f35b610099610085366004610418565b60f881901c916001600160f81b0390911690565b60405161006e929190610497565b6100ba6100b53660046104c1565b6100ee565b60405190815260200161006e565b6100616100d6366004610418565b610104565b60605f6100e783610110565b9392505050565b5f806100fa8484610236565b9150505b92915050565b60605f6100e78361026a565b606060f882901c6001600160f81b0383165f61012b82610366565b90505f83600381111561014057610140610483565b03610172576040518060400160405280600d81526020016c048797065726472697665204c5609c1b815250935061022e565b600183600381111561018657610186610483565b036101b2578060405160200161019c91906104ee565b604051602081830303815290604052935061022e565b60028360038111156101c6576101c6610483565b036101dc578060405160200161019c9190610526565b60038360038111156101f0576101f0610483565b0361022e576040518060400160405280601b81526020017f48797065726472697665205769746864726177616c205368617265000000000081525093505b505050919050565b5f6001600160f81b0382111561025f5760405163b7d0949760e01b815260040160405180910390fd5b5060f89190911b1790565b606060f882901c6001600160f81b0383165f61028582610366565b90505f83600381111561029a5761029a610483565b036102cc576040518060400160405280600d81526020016c0485950455244524956452d4c5609c1b815250935061022e565b60018360038111156102e0576102e0610483565b036102f6578060405160200161019c919061055f565b600283600381111561030a5761030a610483565b03610320578060405160200161019c9190610596565b600383600381111561033457610334610483565b0361022e57505060408051808201909152600d81526c485950455244524956452d575360981b60208201529392505050565b60408051604e80825260808201909252606091905f90826020820181803683370190505090505f5b841561040a5761039f600a866105d5565b6103aa9060306105fc565b60f81b8260016103ba848761060f565b6103c4919061060f565b815181106103d4576103d4610622565b60200101906001600160f81b03191690815f1a905350806103f481610636565b91506104039050600a8661064e565b945061038e565b918290030190815292915050565b5f60208284031215610428575f80fd5b5035919050565b5f5b83811015610449578181015183820152602001610431565b50505f910152565b602081525f825180602084015261046f81604085016020870161042f565b601f01601f19169190910160400192915050565b634e487b7160e01b5f52602160045260245ffd5b60408101600484106104b757634e487b7160e01b5f52602160045260245ffd5b9281526020015290565b5f80604083850312156104d2575f80fd5b8235600481106104e0575f80fd5b946020939093013593505050565b700243cb832b9323934bb32902637b7339d1607d1b81525f825161051981601185016020870161042f565b9190910160110192915050565b710243cb832b9323934bb329029b437b93a1d160751b81525f825161055281601285016020870161042f565b9190910160120192915050565b6f242ca822a9222924ab2296a627a7239d60811b81525f825161058981601085016020870161042f565b9190910160100192915050565b70242ca822a9222924ab2296a9a427a92a1d60791b81525f825161051981601185016020870161042f565b634e487b7160e01b5f52601260045260245ffd5b5f826105e3576105e36105c1565b500690565b634e487b7160e01b5f52601160045260245ffd5b808201808211156100fe576100fe6105e8565b818103818111156100fe576100fe6105e8565b634e487b7160e01b5f52603260045260245ffd5b5f60018201610647576106476105e8565b5060010190565b5f8261065c5761065c6105c1565b50049056fea2646970667358221220e3ffe3046a620cf6036c06ba651df1d2ca4d5cd8bb0d7cd17a2e65ee6b3a887a64736f6c63430008180033"
    )

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = MockAssetIdContractFunctions(mockassetid_abi, self.w3, address)  # type: ignore

        self.errors = MockAssetIdContractErrors()

    errors: MockAssetIdContractErrors = MockAssetIdContractErrors()

    functions: MockAssetIdContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = MockAssetIdContractFunctions(
            mockassetid_abi, w3, None
        )
        contract.errors = MockAssetIdContractErrors()

        return contract
