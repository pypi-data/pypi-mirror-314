"""A web3.py Contract class for the IHyperdriveMatchingEngine contract.

DO NOT EDIT.  This file was generated by pypechain v0.0.49.
See documentation at https://github.com/delvtech/pypechain """

# contracts have PascalCase names
# pylint: disable=invalid-name

# contracts control how many attributes and arguments we have in generated code
# pylint: disable=too-many-instance-attributes
# pylint: disable=too-many-arguments

# we don't need else statement if the other conditionals all have return,
# but it's easier to generate
# pylint: disable=no-else-return

# This file is bound to get very long depending on contract sizes.
# pylint: disable=too-many-lines

# methods are overridden with specific arguments instead of generic *args, **kwargs
# pylint: disable=arguments-differ

# consumers have too many opinions on line length
# pylint: disable=line-too-long

# We use protected classes within pypechain
# pylint: disable=protected-access

# We sometimes define a variable that might not be returned in `call`,
# but we still may want to call the function
# pylint: disable=unused-variable


from __future__ import annotations

from typing import Any, Iterable, Sequence, Type, cast, overload

from eth_account.signers.local import LocalAccount
from eth_typing import ABI, ChecksumAddress, HexStr
from hexbytes import HexBytes
from pypechain.core import (
    PypechainBaseContractErrors,
    PypechainBaseError,
    PypechainContractFunction,
    PypechainOverloadedFunctions,
    combomethod_typed,
    dataclass_to_tuple,
    expand_struct_type_str,
    get_arg_type_names,
    rename_returned_types,
)
from typing_extensions import Self
from web3 import Web3
from web3._utils.events import EventLogErrorFlags
from web3._utils.filters import LogFilter
from web3.contract.contract import (
    Contract,
    ContractConstructor,
    ContractEvent,
    ContractEvents,
    ContractFunctions,
)
from web3.logs import WARN
from web3.types import BlockIdentifier, StateOverride, TxParams, TxReceipt

from ..IHyperdrive import IHyperdriveTypes as IHyperdrive
from ..IHyperdriveMatchingEngine import (
    IHyperdriveMatchingEngineTypes as IHyperdriveMatchingEngine,
)
from .IHyperdriveMatchingEngineTypes import (
    OrdersCancelledEvent,
    OrdersMatchedEvent,
)

structs = {
    "IHyperdrive.Options": IHyperdrive.Options,
    "IHyperdriveMatchingEngine.OrderIntent": IHyperdriveMatchingEngine.OrderIntent,
}

ihyperdrivematchingengine_abi: ABI = cast(
    ABI,
    [
        {
            "type": "function",
            "name": "OPTIONS_TYPEHASH",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "ORDER_INTENT_TYPEHASH",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "cancelOrders",
            "inputs": [
                {
                    "name": "_orders",
                    "type": "tuple[]",
                    "internalType": "struct IHyperdriveMatchingEngine.OrderIntent[]",
                    "components": [
                        {
                            "name": "trader",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "hyperdrive",
                            "type": "address",
                            "internalType": "contract IHyperdrive",
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "slippageGuard",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "options",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Options",
                            "components": [
                                {
                                    "name": "destination",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "asBase",
                                    "type": "bool",
                                    "internalType": "bool",
                                },
                                {
                                    "name": "extraData",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                            ],
                        },
                        {
                            "name": "orderType",
                            "type": "uint8",
                            "internalType": "enum IHyperdriveMatchingEngine.OrderType",
                        },
                        {
                            "name": "signature",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "expiry",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "salt",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                    ],
                }
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "hashOrderIntent",
            "inputs": [
                {
                    "name": "_order",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveMatchingEngine.OrderIntent",
                    "components": [
                        {
                            "name": "trader",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "hyperdrive",
                            "type": "address",
                            "internalType": "contract IHyperdrive",
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "slippageGuard",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "options",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Options",
                            "components": [
                                {
                                    "name": "destination",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "asBase",
                                    "type": "bool",
                                    "internalType": "bool",
                                },
                                {
                                    "name": "extraData",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                            ],
                        },
                        {
                            "name": "orderType",
                            "type": "uint8",
                            "internalType": "enum IHyperdriveMatchingEngine.OrderType",
                        },
                        {
                            "name": "signature",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "expiry",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "salt",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                    ],
                }
            ],
            "outputs": [
                {"name": "", "type": "bytes32", "internalType": "bytes32"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "isCancelled",
            "inputs": [
                {
                    "name": "orderHash",
                    "type": "bytes32",
                    "internalType": "bytes32",
                }
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "kind",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "matchOrders",
            "inputs": [
                {
                    "name": "_longOrder",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveMatchingEngine.OrderIntent",
                    "components": [
                        {
                            "name": "trader",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "hyperdrive",
                            "type": "address",
                            "internalType": "contract IHyperdrive",
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "slippageGuard",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "options",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Options",
                            "components": [
                                {
                                    "name": "destination",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "asBase",
                                    "type": "bool",
                                    "internalType": "bool",
                                },
                                {
                                    "name": "extraData",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                            ],
                        },
                        {
                            "name": "orderType",
                            "type": "uint8",
                            "internalType": "enum IHyperdriveMatchingEngine.OrderType",
                        },
                        {
                            "name": "signature",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "expiry",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "salt",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                    ],
                },
                {
                    "name": "_shortOrder",
                    "type": "tuple",
                    "internalType": "struct IHyperdriveMatchingEngine.OrderIntent",
                    "components": [
                        {
                            "name": "trader",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "hyperdrive",
                            "type": "address",
                            "internalType": "contract IHyperdrive",
                        },
                        {
                            "name": "amount",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "slippageGuard",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "minVaultSharePrice",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "options",
                            "type": "tuple",
                            "internalType": "struct IHyperdrive.Options",
                            "components": [
                                {
                                    "name": "destination",
                                    "type": "address",
                                    "internalType": "address",
                                },
                                {
                                    "name": "asBase",
                                    "type": "bool",
                                    "internalType": "bool",
                                },
                                {
                                    "name": "extraData",
                                    "type": "bytes",
                                    "internalType": "bytes",
                                },
                            ],
                        },
                        {
                            "name": "orderType",
                            "type": "uint8",
                            "internalType": "enum IHyperdriveMatchingEngine.OrderType",
                        },
                        {
                            "name": "signature",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                        {
                            "name": "expiry",
                            "type": "uint256",
                            "internalType": "uint256",
                        },
                        {
                            "name": "salt",
                            "type": "bytes32",
                            "internalType": "bytes32",
                        },
                    ],
                },
                {
                    "name": "_lpAmount",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {
                    "name": "_addLiquidityOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_removeLiquidityOptions",
                    "type": "tuple",
                    "internalType": "struct IHyperdrive.Options",
                    "components": [
                        {
                            "name": "destination",
                            "type": "address",
                            "internalType": "address",
                        },
                        {
                            "name": "asBase",
                            "type": "bool",
                            "internalType": "bool",
                        },
                        {
                            "name": "extraData",
                            "type": "bytes",
                            "internalType": "bytes",
                        },
                    ],
                },
                {
                    "name": "_feeRecipient",
                    "type": "address",
                    "internalType": "address",
                },
                {
                    "name": "_isLongFirst",
                    "type": "bool",
                    "internalType": "bool",
                },
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "morpho",
            "inputs": [],
            "outputs": [
                {
                    "name": "",
                    "type": "address",
                    "internalType": "contract IMorpho",
                }
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "name",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "onMorphoFlashLoan",
            "inputs": [
                {
                    "name": "assets",
                    "type": "uint256",
                    "internalType": "uint256",
                },
                {"name": "data", "type": "bytes", "internalType": "bytes"},
            ],
            "outputs": [],
            "stateMutability": "nonpayable",
        },
        {
            "type": "function",
            "name": "verifySignature",
            "inputs": [
                {"name": "_hash", "type": "bytes32", "internalType": "bytes32"},
                {
                    "name": "_signature",
                    "type": "bytes",
                    "internalType": "bytes",
                },
                {
                    "name": "_signer",
                    "type": "address",
                    "internalType": "address",
                },
            ],
            "outputs": [{"name": "", "type": "bool", "internalType": "bool"}],
            "stateMutability": "view",
        },
        {
            "type": "function",
            "name": "version",
            "inputs": [],
            "outputs": [
                {"name": "", "type": "string", "internalType": "string"}
            ],
            "stateMutability": "view",
        },
        {
            "type": "event",
            "name": "OrdersCancelled",
            "inputs": [
                {
                    "name": "trader",
                    "type": "address",
                    "indexed": True,
                    "internalType": "address",
                },
                {
                    "name": "orderHashes",
                    "type": "bytes32[]",
                    "indexed": False,
                    "internalType": "bytes32[]",
                },
            ],
            "anonymous": False,
        },
        {
            "type": "event",
            "name": "OrdersMatched",
            "inputs": [
                {
                    "name": "hyperdrive",
                    "type": "address",
                    "indexed": True,
                    "internalType": "contract IHyperdrive",
                },
                {
                    "name": "longOrderHash",
                    "type": "bytes32",
                    "indexed": True,
                    "internalType": "bytes32",
                },
                {
                    "name": "shortOrderHash",
                    "type": "bytes32",
                    "indexed": True,
                    "internalType": "bytes32",
                },
                {
                    "name": "long",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
                {
                    "name": "short",
                    "type": "address",
                    "indexed": False,
                    "internalType": "address",
                },
            ],
            "anonymous": False,
        },
        {"type": "error", "name": "AlreadyCancelled", "inputs": []},
        {"type": "error", "name": "AlreadyExpired", "inputs": []},
        {"type": "error", "name": "InvalidDestination", "inputs": []},
        {"type": "error", "name": "InvalidMatch", "inputs": []},
        {"type": "error", "name": "InvalidOrderType", "inputs": []},
        {"type": "error", "name": "InvalidSender", "inputs": []},
        {"type": "error", "name": "InvalidSettlementAsset", "inputs": []},
        {"type": "error", "name": "InvalidSignature", "inputs": []},
        {"type": "error", "name": "MismatchedHyperdrive", "inputs": []},
    ],
)


class IHyperdriveMatchingEngineAlreadyCancelledContractError(
    PypechainBaseError
):
    """ContractError for AlreadyCancelled."""

    # Error name
    name: str = "AlreadyCancelled"
    # 4 byte error selector
    selector: str = "0x54e37625"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AlreadyCancelled()"
    # Error input types
    abi: ABI = ihyperdrivematchingengine_abi


class IHyperdriveMatchingEngineAlreadyExpiredContractError(PypechainBaseError):
    """ContractError for AlreadyExpired."""

    # Error name
    name: str = "AlreadyExpired"
    # 4 byte error selector
    selector: str = "0xa0d64f8a"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "AlreadyExpired()"
    # Error input types
    abi: ABI = ihyperdrivematchingengine_abi


class IHyperdriveMatchingEngineInvalidDestinationContractError(
    PypechainBaseError
):
    """ContractError for InvalidDestination."""

    # Error name
    name: str = "InvalidDestination"
    # 4 byte error selector
    selector: str = "0xac6b05f5"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidDestination()"
    # Error input types
    abi: ABI = ihyperdrivematchingengine_abi


class IHyperdriveMatchingEngineInvalidMatchContractError(PypechainBaseError):
    """ContractError for InvalidMatch."""

    # Error name
    name: str = "InvalidMatch"
    # 4 byte error selector
    selector: str = "0x29ac473e"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidMatch()"
    # Error input types
    abi: ABI = ihyperdrivematchingengine_abi


class IHyperdriveMatchingEngineInvalidOrderTypeContractError(
    PypechainBaseError
):
    """ContractError for InvalidOrderType."""

    # Error name
    name: str = "InvalidOrderType"
    # 4 byte error selector
    selector: str = "0x688c176f"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidOrderType()"
    # Error input types
    abi: ABI = ihyperdrivematchingengine_abi


class IHyperdriveMatchingEngineInvalidSenderContractError(PypechainBaseError):
    """ContractError for InvalidSender."""

    # Error name
    name: str = "InvalidSender"
    # 4 byte error selector
    selector: str = "0xddb5de5e"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSender()"
    # Error input types
    abi: ABI = ihyperdrivematchingengine_abi


class IHyperdriveMatchingEngineInvalidSettlementAssetContractError(
    PypechainBaseError
):
    """ContractError for InvalidSettlementAsset."""

    # Error name
    name: str = "InvalidSettlementAsset"
    # 4 byte error selector
    selector: str = "0xabca264a"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSettlementAsset()"
    # Error input types
    abi: ABI = ihyperdrivematchingengine_abi


class IHyperdriveMatchingEngineInvalidSignatureContractError(
    PypechainBaseError
):
    """ContractError for InvalidSignature."""

    # Error name
    name: str = "InvalidSignature"
    # 4 byte error selector
    selector: str = "0x8baa579f"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "InvalidSignature()"
    # Error input types
    abi: ABI = ihyperdrivematchingengine_abi


class IHyperdriveMatchingEngineMismatchedHyperdriveContractError(
    PypechainBaseError
):
    """ContractError for MismatchedHyperdrive."""

    # Error name
    name: str = "MismatchedHyperdrive"
    # 4 byte error selector
    selector: str = "0x4cf1ffa4"
    # error signature, i.e. CustomError(uint256,bool)
    signature: str = "MismatchedHyperdrive()"
    # Error input types
    abi: ABI = ihyperdrivematchingengine_abi


class IHyperdriveMatchingEngineContractErrors(PypechainBaseContractErrors):
    """ContractErrors for the IHyperdriveMatchingEngine contract."""

    AlreadyCancelled: IHyperdriveMatchingEngineAlreadyCancelledContractError

    AlreadyExpired: IHyperdriveMatchingEngineAlreadyExpiredContractError

    InvalidDestination: IHyperdriveMatchingEngineInvalidDestinationContractError

    InvalidMatch: IHyperdriveMatchingEngineInvalidMatchContractError

    InvalidOrderType: IHyperdriveMatchingEngineInvalidOrderTypeContractError

    InvalidSender: IHyperdriveMatchingEngineInvalidSenderContractError

    InvalidSettlementAsset: (
        IHyperdriveMatchingEngineInvalidSettlementAssetContractError
    )

    InvalidSignature: IHyperdriveMatchingEngineInvalidSignatureContractError

    MismatchedHyperdrive: (
        IHyperdriveMatchingEngineMismatchedHyperdriveContractError
    )

    def __init__(
        self,
    ) -> None:
        self.AlreadyCancelled = (
            IHyperdriveMatchingEngineAlreadyCancelledContractError()
        )
        self.AlreadyExpired = (
            IHyperdriveMatchingEngineAlreadyExpiredContractError()
        )
        self.InvalidDestination = (
            IHyperdriveMatchingEngineInvalidDestinationContractError()
        )
        self.InvalidMatch = IHyperdriveMatchingEngineInvalidMatchContractError()
        self.InvalidOrderType = (
            IHyperdriveMatchingEngineInvalidOrderTypeContractError()
        )
        self.InvalidSender = (
            IHyperdriveMatchingEngineInvalidSenderContractError()
        )
        self.InvalidSettlementAsset = (
            IHyperdriveMatchingEngineInvalidSettlementAssetContractError()
        )
        self.InvalidSignature = (
            IHyperdriveMatchingEngineInvalidSignatureContractError()
        )
        self.MismatchedHyperdrive = (
            IHyperdriveMatchingEngineMismatchedHyperdriveContractError()
        )

        self._all = [
            self.AlreadyCancelled,
            self.AlreadyExpired,
            self.InvalidDestination,
            self.InvalidMatch,
            self.InvalidOrderType,
            self.InvalidSender,
            self.InvalidSettlementAsset,
            self.InvalidSignature,
            self.MismatchedHyperdrive,
        ]


class IHyperdriveMatchingEngineOPTIONS_TYPEHASHContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the OPTIONS_TYPEHASH() method."""

    _function_name = "OPTIONS_TYPEHASH"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveMatchingEngineOPTIONS_TYPEHASHContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the OPTIONS_TYPEHASH method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "OPTIONS_TYPEHASH"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IHyperdriveMatchingEngineOPTIONS_TYPEHASHContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineOPTIONS_TYPEHASHContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineOPTIONS_TYPEHASHContractFunction0._type_signature: IHyperdriveMatchingEngineOPTIONS_TYPEHASHContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineORDER_INTENT_TYPEHASHContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the ORDER_INTENT_TYPEHASH() method."""

    _function_name = "ORDER_INTENT_TYPEHASH"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveMatchingEngineORDER_INTENT_TYPEHASHContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the ORDER_INTENT_TYPEHASH method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "ORDER_INTENT_TYPEHASH"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IHyperdriveMatchingEngineORDER_INTENT_TYPEHASHContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineORDER_INTENT_TYPEHASHContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineORDER_INTENT_TYPEHASHContractFunction0._type_signature: IHyperdriveMatchingEngineORDER_INTENT_TYPEHASHContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineCancelOrdersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the cancelOrders(list[IHyperdriveMatchingEngine.OrderIntent]) method."""

    _function_name = "cancelOrders"
    _type_signature = expand_struct_type_str(
        tuple(["list[IHyperdriveMatchingEngine.OrderIntent]"]), structs
    )
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IHyperdriveMatchingEngineCancelOrdersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the cancelOrders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "cancelOrders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _orders: list[IHyperdriveMatchingEngine.OrderIntent]) -> IHyperdriveMatchingEngineCancelOrdersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineCancelOrdersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineCancelOrdersContractFunction0._type_signature: IHyperdriveMatchingEngineCancelOrdersContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineHashOrderIntentContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the hashOrderIntent(IHyperdriveMatchingEngine.OrderIntent) method."""

    _function_name = "hashOrderIntent"
    _type_signature = expand_struct_type_str(
        tuple(["IHyperdriveMatchingEngine.OrderIntent"]), structs
    )
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bytes:
        """returns bytes."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bytes

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bytes, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveMatchingEngineHashOrderIntentContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the hashOrderIntent method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "hashOrderIntent"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _order: IHyperdriveMatchingEngine.OrderIntent) -> IHyperdriveMatchingEngineHashOrderIntentContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineHashOrderIntentContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineHashOrderIntentContractFunction0._type_signature: IHyperdriveMatchingEngineHashOrderIntentContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineIsCancelledContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the isCancelled(bytes) method."""

    _function_name = "isCancelled"
    _type_signature = expand_struct_type_str(tuple(["bytes"]), structs)
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveMatchingEngineIsCancelledContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the isCancelled method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "isCancelled"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, orderHash: bytes) -> IHyperdriveMatchingEngineIsCancelledContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineIsCancelledContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineIsCancelledContractFunction0._type_signature: IHyperdriveMatchingEngineIsCancelledContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineKindContractFunction0(PypechainContractFunction):
    """ContractFunction for the kind() method."""

    _function_name = "kind"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveMatchingEngineKindContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the kind method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "kind"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IHyperdriveMatchingEngineKindContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineKindContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineKindContractFunction0._type_signature: IHyperdriveMatchingEngineKindContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineMatchOrdersContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the matchOrders(IHyperdriveMatchingEngine.OrderIntent,IHyperdriveMatchingEngine.OrderIntent,int,IHyperdrive.Options,IHyperdrive.Options,str,bool) method."""

    _function_name = "matchOrders"
    _type_signature = expand_struct_type_str(
        tuple(
            [
                "IHyperdriveMatchingEngine.OrderIntent",
                "IHyperdriveMatchingEngine.OrderIntent",
                "int",
                "IHyperdrive.Options",
                "IHyperdrive.Options",
                "str",
                "bool",
            ]
        ),
        structs,
    )
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IHyperdriveMatchingEngineMatchOrdersContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the matchOrders method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "matchOrders"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _longOrder: IHyperdriveMatchingEngine.OrderIntent, _shortOrder: IHyperdriveMatchingEngine.OrderIntent, _lpAmount: int, _addLiquidityOptions: IHyperdrive.Options, _removeLiquidityOptions: IHyperdrive.Options, _feeRecipient: str, _isLongFirst: bool) -> IHyperdriveMatchingEngineMatchOrdersContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineMatchOrdersContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineMatchOrdersContractFunction0._type_signature: IHyperdriveMatchingEngineMatchOrdersContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineMorphoContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the morpho() method."""

    _function_name = "morpho"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveMatchingEngineMorphoContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the morpho method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "morpho"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IHyperdriveMatchingEngineMorphoContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineMorphoContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineMorphoContractFunction0._type_signature: IHyperdriveMatchingEngineMorphoContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineNameContractFunction0(PypechainContractFunction):
    """ContractFunction for the name() method."""

    _function_name = "name"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveMatchingEngineNameContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the name method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "name"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IHyperdriveMatchingEngineNameContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineNameContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineNameContractFunction0._type_signature: IHyperdriveMatchingEngineNameContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineOnMorphoFlashLoanContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the onMorphoFlashLoan(int,bytes) method."""

    _function_name = "onMorphoFlashLoan"
    _type_signature = expand_struct_type_str(tuple(["int", "bytes"]), structs)
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> None:
        """returns None."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )


class IHyperdriveMatchingEngineOnMorphoFlashLoanContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the onMorphoFlashLoan method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "onMorphoFlashLoan"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, assets: int, data: bytes) -> IHyperdriveMatchingEngineOnMorphoFlashLoanContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineOnMorphoFlashLoanContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineOnMorphoFlashLoanContractFunction0._type_signature: IHyperdriveMatchingEngineOnMorphoFlashLoanContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineVerifySignatureContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the verifySignature(bytes,bytes,str) method."""

    _function_name = "verifySignature"
    _type_signature = expand_struct_type_str(
        tuple(["bytes", "bytes", "str"]), structs
    )
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> bool:
        """returns bool."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = bool

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            bool, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveMatchingEngineVerifySignatureContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the verifySignature method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "verifySignature"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self, _hash: bytes, _signature: bytes, _signer: str) -> IHyperdriveMatchingEngineVerifySignatureContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineVerifySignatureContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineVerifySignatureContractFunction0._type_signature: IHyperdriveMatchingEngineVerifySignatureContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineVersionContractFunction0(
    PypechainContractFunction
):
    """ContractFunction for the version() method."""

    _function_name = "version"
    _type_signature = expand_struct_type_str(tuple([]), structs)
    _error_class = IHyperdriveMatchingEngineContractErrors

    def call(
        self,
        transaction: TxParams | None = None,
        block_identifier: BlockIdentifier | None = None,
        state_override: StateOverride | None = None,
        ccip_read_enabled: bool | None = None,
    ) -> str:
        """returns str."""
        # We handle the block identifier = None case here for typing.
        if block_identifier is None:
            block_identifier = self.w3.eth.default_block

        # Define the expected return types from the smart contract call
        return_types = str

        # Call the function
        raw_values = self._call(
            transaction, block_identifier, state_override, ccip_read_enabled
        )

        return cast(
            str, rename_returned_types(structs, return_types, raw_values)
        )


class IHyperdriveMatchingEngineVersionContractFunction(
    PypechainOverloadedFunctions
):
    """ContractFunction for the version method."""

    # super() call methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ# disable this warning when there is overloading
    # pylint: disable=function-redefined

    _function_name = "version"

    # Make lookup for function signature -> overloaded function
    # The function signatures are python types, as we need to do a
    # lookup of arguments passed in to contract function
    _functions: dict[str, PypechainContractFunction]

    @overload
    def __call__(self) -> IHyperdriveMatchingEngineVersionContractFunction0:  # type: ignore
        ...

    def __call__(self, *args, **kwargs) -> IHyperdriveMatchingEngineVersionContractFunction:  # type: ignore
        # Special case when there are no args or kwargs
        if len(args) == 0 and len(kwargs) == 0:
            # We need to specify the element identifier as the function call without arguments.
            # Despite this setting the member variable `abi_element_identifier`
            # that's shared across this object, this field gets overwritten in the
            # clone if arguments are provided.
            self.abi_element_identifier = self._function_name + "()"
            clone = super().__call__()
        else:
            clone = super().__call__(
                *(dataclass_to_tuple(arg) for arg in args),
                **{key: dataclass_to_tuple(arg) for key, arg in kwargs.items()},
            )

        # Arguments is the flattened set of arguments from args and kwargs, ordered by the abi
        # We get the python types of the args passed in, but remapped from tuples -> dataclasses
        arg_types = get_arg_type_names(clone.arguments)

        # Grab the relevant kwargs when factory was called.
        factory_kwargs = self._factory_kwargs
        factory_kwargs["abi_element_identifier"] = clone.abi_element_identifier

        function_obj = self._overloaded_functions[arg_types].factory(
            self._function_name, **factory_kwargs
        )

        function_obj.args = clone.args
        function_obj.kwargs = clone.kwargs

        # The `@overload` of `__call__` takes care of setting the type of this object correctly
        return function_obj  # type: ignore

    @classmethod
    def factory(cls, class_name: str, **kwargs: Any) -> Self:
        out = super().factory(class_name, **kwargs)
        # Store the factory args for downstream consumption
        out._factory_kwargs = kwargs

        # We initialize our overridden functions here.
        # Note that we use the initialized object to ensure each function
        # is attached to the instantiated object
        # (attached to a specific web3 and contract address)
        out._overloaded_functions = {
            IHyperdriveMatchingEngineVersionContractFunction0._type_signature: IHyperdriveMatchingEngineVersionContractFunction0,
        }
        return out


class IHyperdriveMatchingEngineContractFunctions(ContractFunctions):
    """ContractFunctions for the IHyperdriveMatchingEngine contract."""

    OPTIONS_TYPEHASH: IHyperdriveMatchingEngineOPTIONS_TYPEHASHContractFunction

    ORDER_INTENT_TYPEHASH: (
        IHyperdriveMatchingEngineORDER_INTENT_TYPEHASHContractFunction
    )

    cancelOrders: IHyperdriveMatchingEngineCancelOrdersContractFunction

    hashOrderIntent: IHyperdriveMatchingEngineHashOrderIntentContractFunction

    isCancelled: IHyperdriveMatchingEngineIsCancelledContractFunction

    kind: IHyperdriveMatchingEngineKindContractFunction

    matchOrders: IHyperdriveMatchingEngineMatchOrdersContractFunction

    morpho: IHyperdriveMatchingEngineMorphoContractFunction

    name: IHyperdriveMatchingEngineNameContractFunction

    onMorphoFlashLoan: (
        IHyperdriveMatchingEngineOnMorphoFlashLoanContractFunction
    )

    verifySignature: IHyperdriveMatchingEngineVerifySignatureContractFunction

    version: IHyperdriveMatchingEngineVersionContractFunction

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
        decode_tuples: bool | None = False,
    ) -> None:
        super().__init__(abi, w3, address, decode_tuples)
        self.OPTIONS_TYPEHASH = (
            IHyperdriveMatchingEngineOPTIONS_TYPEHASHContractFunction.factory(
                "OPTIONS_TYPEHASH",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="OPTIONS_TYPEHASH",
            )
        )
        self.ORDER_INTENT_TYPEHASH = IHyperdriveMatchingEngineORDER_INTENT_TYPEHASHContractFunction.factory(
            "ORDER_INTENT_TYPEHASH",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="ORDER_INTENT_TYPEHASH",
        )
        self.cancelOrders = (
            IHyperdriveMatchingEngineCancelOrdersContractFunction.factory(
                "cancelOrders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="cancelOrders",
            )
        )
        self.hashOrderIntent = (
            IHyperdriveMatchingEngineHashOrderIntentContractFunction.factory(
                "hashOrderIntent",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="hashOrderIntent",
            )
        )
        self.isCancelled = (
            IHyperdriveMatchingEngineIsCancelledContractFunction.factory(
                "isCancelled",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="isCancelled",
            )
        )
        self.kind = IHyperdriveMatchingEngineKindContractFunction.factory(
            "kind",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="kind",
        )
        self.matchOrders = (
            IHyperdriveMatchingEngineMatchOrdersContractFunction.factory(
                "matchOrders",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="matchOrders",
            )
        )
        self.morpho = IHyperdriveMatchingEngineMorphoContractFunction.factory(
            "morpho",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="morpho",
        )
        self.name = IHyperdriveMatchingEngineNameContractFunction.factory(
            "name",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="name",
        )
        self.onMorphoFlashLoan = (
            IHyperdriveMatchingEngineOnMorphoFlashLoanContractFunction.factory(
                "onMorphoFlashLoan",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="onMorphoFlashLoan",
            )
        )
        self.verifySignature = (
            IHyperdriveMatchingEngineVerifySignatureContractFunction.factory(
                "verifySignature",
                w3=w3,
                contract_abi=abi,
                address=address,
                decode_tuples=decode_tuples,
                abi_element_identifier="verifySignature",
            )
        )
        self.version = IHyperdriveMatchingEngineVersionContractFunction.factory(
            "version",
            w3=w3,
            contract_abi=abi,
            address=address,
            decode_tuples=decode_tuples,
            abi_element_identifier="version",
        )


class IHyperdriveMatchingEngineOrdersCancelledContractEvent(ContractEvent):
    """ContractEvent for OrdersCancelled."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OrdersCancelledEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OrdersCancelledEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OrdersCancelledEvent.OrdersCancelledEventArgs(
                    trader=abi_event.args["trader"],
                    orderHashes=abi_event.args["orderHashes"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OrdersCancelledEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OrdersCancelledEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OrdersCancelledEvent.OrdersCancelledEventArgs(
                    trader=abi_event.args["trader"],
                    orderHashes=abi_event.args["orderHashes"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveMatchingEngineOrdersMatchedContractEvent(ContractEvent):
    """ContractEvent for OrdersMatched."""

    # super() get_logs and create_filter methods are generic, while our version adds values & types
    # pylint: disable=arguments-differ

    # pylint: disable=useless-parent-delegation
    def __init__(self, *argument_names: tuple[str]) -> None:
        super().__init__(*argument_names)

    @combomethod_typed
    def get_logs_typed(
        self,
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier | None = None,
        block_hash: HexBytes | None = None,
    ) -> Iterable[OrdersMatchedEvent]:
        """Extension of `get_logs` that return a typed dataclass of the event."""
        abi_events = super().get_logs(
            argument_filters=argument_filters,
            from_block=from_block,
            to_block=to_block,
            block_hash=block_hash,
        )
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OrdersMatchedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OrdersMatchedEvent.OrdersMatchedEventArgs(
                    hyperdrive=abi_event.args["hyperdrive"],
                    longOrderHash=abi_event.args["longOrderHash"],
                    shortOrderHash=abi_event.args["shortOrderHash"],
                    long=abi_event.args["long"],
                    short=abi_event.args["short"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def process_receipt_typed(
        self, txn_receipt: TxReceipt, errors: EventLogErrorFlags = WARN
    ) -> Iterable[OrdersMatchedEvent]:
        """Extension of `process_receipt` that return a typed dataclass of the event."""
        abi_events = super().process_receipt(txn_receipt, errors)
        # TODO there may be issues with this function if the user uses a middleware that changes event structure.
        return [
            OrdersMatchedEvent(
                log_index=abi_event.logIndex,
                transaction_index=abi_event.transactionIndex,
                transaction_hash=abi_event.transactionHash,
                address=abi_event.address,
                block_hash=abi_event.blockHash,
                block_number=abi_event.blockNumber,
                args=OrdersMatchedEvent.OrdersMatchedEventArgs(
                    hyperdrive=abi_event.args["hyperdrive"],
                    longOrderHash=abi_event.args["longOrderHash"],
                    shortOrderHash=abi_event.args["shortOrderHash"],
                    long=abi_event.args["long"],
                    short=abi_event.args["short"],
                ),
            )
            for abi_event in abi_events
        ]

    @combomethod_typed
    def create_filter(  # type: ignore
        self,
        *,  # PEP 3102
        argument_filters: dict[str, Any] | None = None,
        from_block: BlockIdentifier | None = None,
        to_block: BlockIdentifier = "latest",
        address: ChecksumAddress | None = None,
        topics: Sequence[Any] | None = None,
    ) -> LogFilter:
        return cast(
            LogFilter,
            super().create_filter(
                argument_filters=argument_filters,
                from_block=from_block,
                to_block=to_block,
                address=address,
                topics=topics,
            ),
        )


class IHyperdriveMatchingEngineContractEvents(ContractEvents):
    """ContractEvents for the IHyperdriveMatchingEngine contract."""

    OrdersCancelled: IHyperdriveMatchingEngineOrdersCancelledContractEvent

    OrdersMatched: IHyperdriveMatchingEngineOrdersMatchedContractEvent

    def __init__(
        self,
        abi: ABI,
        w3: "Web3",
        address: ChecksumAddress | None = None,
    ) -> None:
        super().__init__(abi, w3, address)
        self.OrdersCancelled = (
            IHyperdriveMatchingEngineOrdersCancelledContractEvent.factory(
                "OrdersCancelled",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OrdersCancelled",
            )
        )
        self.OrdersMatched = (
            IHyperdriveMatchingEngineOrdersMatchedContractEvent.factory(
                "OrdersMatched",
                w3=w3,
                contract_abi=abi,
                address=address,
                event_name="OrdersMatched",
            )
        )


class IHyperdriveMatchingEngineContract(Contract):
    """A web3.py Contract class for the IHyperdriveMatchingEngine contract."""

    abi: ABI = ihyperdrivematchingengine_abi
    # We change `bytecode` as needed for linking, but keep
    # `_raw_bytecode` unchanged as an original copy.
    # pylint: disable=line-too-long
    _raw_bytecode: HexStr | None = HexStr("0x")

    def __init__(self, address: ChecksumAddress | None = None) -> None:
        # Initialize parent Contract class
        super().__init__(address=address)
        self.functions = IHyperdriveMatchingEngineContractFunctions(ihyperdrivematchingengine_abi, self.w3, address)  # type: ignore
        self.events = IHyperdriveMatchingEngineContractEvents(ihyperdrivematchingengine_abi, self.w3, address)  # type: ignore
        self.errors = IHyperdriveMatchingEngineContractErrors()

    events: IHyperdriveMatchingEngineContractEvents

    errors: IHyperdriveMatchingEngineContractErrors = (
        IHyperdriveMatchingEngineContractErrors()
    )

    functions: IHyperdriveMatchingEngineContractFunctions

    @classmethod
    def constructor(cls) -> ContractConstructor:  # type: ignore
        """Creates a transaction with the contract's constructor function.

        Parameters
        ----------

        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.

        """
        cls.bytecode = cls._raw_bytecode
        if cls.bytecode is not None:

            # bytecode needs to be in hex for web3
            cls.bytecode = HexBytes(cls.bytecode)

        return super().constructor()

    @classmethod
    def deploy(cls, w3: Web3, account: LocalAccount | ChecksumAddress) -> Self:
        """Deploys an instance of the contract.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        account : LocalAccount
            The account to use to deploy the contract.

        Returns
        -------
        Self
            A deployed instance of the contract.
        """
        deployer = cls.factory(w3=w3)
        constructor_fn = deployer.constructor()

        # if an address is supplied, try to use a web3 default account
        if isinstance(account, str):
            tx_hash = constructor_fn.transact({"from": account})
            tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

            deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
            return deployed_contract

        # otherwise use the account provided.
        deployment_tx = constructor_fn.build_transaction()
        current_nonce = w3.eth.get_transaction_count(account.address, "pending")
        deployment_tx.update({"nonce": current_nonce})

        # Sign the transaction with local account private key
        signed_tx = account.sign_transaction(deployment_tx)

        # Send the signed transaction and wait for receipt
        tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
        tx_receipt = w3.eth.wait_for_transaction_receipt(tx_hash)

        deployed_contract = deployer(address=tx_receipt.contractAddress)  # type: ignore
        return deployed_contract

    @classmethod
    def factory(
        cls, w3: Web3, class_name: str | None = None, **kwargs: Any
    ) -> Type[Self]:
        """Initializes the contract object.

        Parameters
        ----------
        w3 : Web3
            A web3 instance.
        class_name: str | None
            The instance class name.

        Returns
        -------
        Self
            An instance of the contract class.
        """
        contract = super().factory(w3, class_name, **kwargs)
        contract.functions = IHyperdriveMatchingEngineContractFunctions(
            ihyperdrivematchingengine_abi, w3, None
        )
        contract.errors = IHyperdriveMatchingEngineContractErrors()

        return contract
