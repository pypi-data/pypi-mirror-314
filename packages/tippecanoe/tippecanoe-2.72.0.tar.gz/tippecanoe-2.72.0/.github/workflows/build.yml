name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
    tags:
      - "*.*.*"


jobs:
  build_wheels:
    name: Build ${{ matrix.build }}${{ matrix.arch }} wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: "x86_64"
            build: ""
            artifact_suffix: "linux_x86_64"
            use_qemu: false
          - os: ubuntu-latest
            arch: "i686"
            build: ""
            artifact_suffix: "linux_i686"
            use_qemu: false
          - os: ubuntu-latest
            arch: "aarch64"
            build: "manylinux_"
            artifact_suffix: "manylinux_aarch64"
            use_qemu: true
          - os: ubuntu-latest
            arch: "aarch64"
            build: "musllinux_"
            artifact_suffix: "musllinux_aarch64"
            use_qemu: true
          # tippecanoe appears to build but fail to run?
          # - os: ubuntu-latest
          #   arch: "ppc64le"
          #   build: "manylinux_"
          #   artifact_suffix: "manylinux_ppc64le"
          #   use_qemu: true
          - os: ubuntu-latest
            arch: "ppc64le"
            build: "musllinux_"
            artifact_suffix: "musllinux_ppc64le"
            use_qemu: true
          - os: ubuntu-latest
            arch: "s390x"
            build: "manylinux_"
            artifact_suffix: "manylinux_s390x"
            use_qemu: true
          - os: ubuntu-latest
            arch: "s390x"
            build: "musllinux_"
            artifact_suffix: "musllinux_s390x"
            use_qemu: true
          - os: macos-14
            arch: "arm64 x86_64"
            build: ""
            artifact_suffix: "macos"
            use_qemu: false

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ensure history is present for automatic versioning

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.2.0
        if: runner.os == 'Linux' && matrix.use_qemu

      - name: Set up MSYS
        uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.msystem }}
          install: >-
            mingw-w64-${{matrix.mingw_env}}-toolchain
        if: runner.os == 'Windows'

      - name: Install ninja (macOS)
        run: which ninja || brew install ninja
        if: runner.os == 'macOS'

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.22.0
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_BUILD: "cp312-${{ matrix.build }}*"
          MACOSX_DEPLOYMENT_TARGET: "10.14"

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-${{matrix.artifact_suffix}}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distributions
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # ensure history is present for automatic versioning

      - name: Build SDist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v4
        with:
          name: artifact-sdist
          path: dist/*.tar.gz

  check_dist:
    name: Check dist
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
      - run: pipx run twine check --strict dist/*

  pypi-publish:
    name: Upload release to PyPI
    runs-on: ubuntu-latest
    needs: [build_wheels, build_sdist, check_dist]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    environment:
      name: pypi
      url: https://pypi.org/p/tippecanoe
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - name: Download Python package dist artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true
    - name: Publish package distributions to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
