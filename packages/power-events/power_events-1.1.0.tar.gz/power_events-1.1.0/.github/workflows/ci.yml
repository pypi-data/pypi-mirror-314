name: Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  UV_PYTHON: "3.9"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_name }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  typos:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: crate-ci/typos@master

  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: "Install UV"
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: |
            pyproject.toml

      - name: "Install lint dependencies"
        run: uv sync --only-group lint

      - name: "Python format"
        run: uvx ruff format --diff .

      - name: "Python lint"
        run: uvx ruff check .

      - name: "Python type check"
        run: uv run mypy

  build-docs:
    name: "Build docs"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true

      - name: "Install docs dependencies"
        run: uv sync --only-group docs

      - run: uv run mkdocs build --strict

  tests:
    name: "Testing with Python ${{ matrix.python-version }}"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - "3.13"
          - "3.12"
          - "3.11"
          - "3.10"
          - "3.9"
      fail-fast: false
    steps:
      - uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: |
            pyproject.toml

      - name: "Install dev dependencies"
        run: uv sync --python ${{ matrix.python-version }} --only-dev

      - name: "Run tests"
        run: uv run pytest
        env:
          COVERAGE_FILE: .coverage.py${{ matrix.python-version }}
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: .coverage.py${{ matrix.python-version }}
          path: .coverage.py${{ matrix.python-version }}
          if-no-files-found: error
          include-hidden-files: true


  combine-coverage:
    name: "Combine coverages"
    runs-on: ubuntu-latest
    needs: [ tests ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Update pip
        run: pip install --upgrade pip
      - name: Install coverage
        run: pip install coverage[toml]

      - name: Download coverage files
        uses: actions/download-artifact@v4
        with:
          path: coverage
          merge-multiple: true

      - run: coverage combine coverage
      - run: coverage report
      - run: coverage html --title "Coverage for ${{ github.sha }}" -d htmlcov

      - name: Store coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data
          path: .coverage
          include-hidden-files: true

      - name: Upload coverage html
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov
          include-hidden-files: true
          if-no-files-found: error


  comment-coverage:
    name: "Comment coverage on PR"
    runs-on: ubuntu-latest
    needs: [ combine-coverage ]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Download coverage files
        uses: actions/download-artifact@v4
        with:
          name: coverage-data

      - name: Generate coverage comment
        id: coverage-comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Store coverage comment
        uses: actions/upload-artifact@v4
        if: steps.coverage-comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt


  report-coverage:
    name: Report coverages
    runs-on: ubuntu-latest
    needs: [ combine-coverage ]
    permissions:
      statuses: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Update pip
        run: pip install --upgrade pip

      - name: Download coverage files
        uses: actions/download-artifact@v4
        with:
          name: coverage-html
          path: htmlcov

      - run: pip install smokeshow

      - name: "Upload report"
        run: smokeshow upload htmlcov
        env:
          SMOKESHOW_GITHUB_STATUS_DESCRIPTION: Coverage {coverage-percentage}
          SMOKESHOW_GITHUB_COVERAGE_THRESHOLD: 100
          SMOKESHOW_GITHUB_CONTEXT: coverage
          SMOKESHOW_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SMOKESHOW_GITHUB_PR_HEAD_SHA: ${{ github.sha }}
          SMOKESHOW_AUTH_KEY: ${{ secrets.SMOKESHOW_KEY }}
