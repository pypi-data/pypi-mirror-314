[build-system]
requires = ["hatchling >= 1.25.0", "hatch-vcs >= 0.4.0 "]
build-backend = "hatchling.build"

[project]
name = "power-events"
dynamic = ["version"]
authors = [
    { name = "mathieu LETRONE", email = "mathieu.letrone@gmail.com" },
]
description = "Take control of your event routing."
readme = "README.md"
license = { file = "LICENSE" }

classifiers = [
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Intended Audience :: Developers",
    "Topic :: Utilities",
    "Typing :: Typed",
]

requires-python = ">=3.9"
dependencies = [
    "maypy>=1.1.2",
]

[project.urls]
"Homepage" = "https://pypi.org/project/power-events/"
"Documentation" = "https://mletrone.github.io/power-events/"
"Changelog" = "https://mletrone.github.io/power-events/changelog"
"Source" = "https://github.com/mLetrone/power-events"
"Tracker" = "https://github.com/mLetrone/power-events/issues"


[tool.hatch.build]
skip-excluded-dirs = true

[tool.hatch.version]
source = "vcs"
fallback-version = "0.0.0"

[tool.hatch.version.raw-options]
version_scheme = "python-simplified-semver"

[dependency-groups]
dev = [
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
    "pytest-html>=4.1.1",
    "pytest-sugar>=1.0.0",
    "pre-commit>=4.0.1",
    "commitizen>=3.31.0",
]
lint = [
    "ruff>=0.7.1",
    "mypy>=1.13.0",
# mypy should have all dependencies to run
    { include-group = "dev" },
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.5.42",
    "mkdocstrings[python]>=0.26.2",
    "termynal>=0.12.1",
    "mike>=2.1.3",
]

[tool.uv]
default-groups = ["dev", "lint"]

[tool.pytest.ini_options]
minversion = "8.0"
required_plugins = [
    "pytest-cov",
    "pytest-html",
]
testpaths = [
    "power_events",
    "tests"
]
addopts = [
    "--cov=power_events",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-report=html",
    "--html=tests-reports/index.html",
    "--self-contained-html",
]

[tool.coverage.run]
source = ["power_events"]
branch = true
parallel = true
relative_files = true
context = '${CONTEXT}'

[tool.coverage.report]
fail_under = 80
show_missing = true
omit = [
    "tests/*",
]
exclude_also = [
    "def __repr__",
    "def .+: \\.\\.\\.",
    "@overload",
    "return NotImplemented",
]
[tool.coverage.html]
directory = "tests-reports/coverage"

[tool.coverage.xml]
output = "tests-reports/coverage.xml"

[tool.mypy]
strict = true
show_error_context = true
show_column_numbers = true
show_error_codes = true
pretty = true
files = ["power_events", "tests"]

[tool.ruff]
target-version = "py39"
line-length = 100
indent-width = 4
output-format = "full"
show-fixes = true

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "B", # flake8-bugbear
    "C4", # flake8-comprehension
    "F", # pyflake
    "Q", # flake8-quotes
    "E", # pycodestyle
    "W",
    "D", # pydocstyle
    "I", # isort,
    "PL", # pylint
    "ERA", # eradicate
    "TRY", # tryceratops
    "RUF", # Ruff
]
ignore = [
    "A003", "D100", "D107", "PLC0105", "D105", "TRY003",
    #  Formatter compatibility (https://docs.astral.sh/ruff/formatter/#conflicting-lint-rules)
    "E501", "E111", "E114", "E117", "D206", "D300", "Q000", "Q001", "Q002", "Q003",
]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "E731",
    "PLR2004"
]

[tool.commitizen]
version_provider = "scm"
annotated_tag = true
changelog_incremental = true
name = "cz_customize" # use custom config
bump_message = ":rocket: bump: version $current_version â†’ $new_version"

[tool.commitizen.customize]
schema = "<emoji> <type>: <body>"
schema_pattern = ":.*:(\\s)(feat|fix|perf|refactor)(\\(\\S+\\))?!?:( [^\n\r]+)((\n\n.*)|(\\s*))?$"
commit_parser = ":.*:\\s(?P<change_type>feat|fix|refactor|perf)(\\(\\S+\\))?!?:\\s(?P<message>.*)"
bump_pattern = "^:.*:\\s(break|feat|fix|hotfix)"
bump_map = {"break" = "MAJOR", "feat" = "MINOR", "fix" = "PATCH", "hotfix" = "PATCH"}

[tool.commitizen.change_type_map]
feat = ":sparkles: Features"
fix = ":bug: Bug fixes"
refactor = ":recycle: Refactoring"
