# coding: utf-8

# Code generated by Kucoin Universal SDK Generator; DO NOT EDIT.

from __future__ import annotations
import pprint
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional


class GetSubAccountApiListData(BaseModel):
    """
    GetSubAccountApiListData

    Attributes:
        sub_name (str): 
        remark (str): 
        api_key (str): 
        api_version (int): 
        permission (str): 
        ip_whitelist (str): 
        created_at (int): 
        uid (int): 
        is_master (bool): 
    """

    sub_name: Optional[str] = Field(default=None, alias="subName")
    remark: Optional[str] = None
    api_key: Optional[str] = Field(default=None, alias="apiKey")
    api_version: Optional[int] = Field(default=None, alias="apiVersion")
    permission: Optional[str] = None
    ip_whitelist: Optional[str] = Field(default=None, alias="ipWhitelist")
    created_at: Optional[int] = Field(default=None, alias="createdAt")
    uid: Optional[int] = None
    is_master: Optional[bool] = Field(default=None, alias="isMaster")

    __properties: ClassVar[List[str]] = [
        "subName", "remark", "apiKey", "apiVersion", "permission",
        "ipWhitelist", "createdAt", "uid", "isMaster"
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=False,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_none=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[GetSubAccountApiListData]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        _dict = self.model_dump(
            by_alias=True,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
            cls,
            obj: Optional[Dict[str,
                               Any]]) -> Optional[GetSubAccountApiListData]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "subName": obj.get("subName"),
            "remark": obj.get("remark"),
            "apiKey": obj.get("apiKey"),
            "apiVersion": obj.get("apiVersion"),
            "permission": obj.get("permission"),
            "ipWhitelist": obj.get("ipWhitelist"),
            "createdAt": obj.get("createdAt"),
            "uid": obj.get("uid"),
            "isMaster": obj.get("isMaster")
        })
        return _obj
