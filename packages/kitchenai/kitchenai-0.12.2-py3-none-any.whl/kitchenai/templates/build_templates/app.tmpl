from kitchenai.contrib.kitchenai_sdk.kitchenai import KitchenAIApp
from kitchenai.contrib.kitchenai_sdk.api import QuerySchema, EmbedSchema

#This is where all the imports go




#Global variables go here. Make sure to include KitchenAIApp initialization.

kitchen = KitchenAIApp()

import logging

logger = logging.getLogger(__name__)

""""
These are the input and response schemas 

class QuerySchema(Schema):
    query: str
    metadata: dict[str, str] | None = None

class QueryResponseSchema(Schema):
    response: str

class AgentResponseSchema(Schema):
    response: str

class EmbedSchema(Schema):
    text: str
    metadata: dict[str, str] | None = None


""""

@kitchen.storage("file")
def chromadb_storage(dir: str, metadata: dict = {}, *args, **kwargs):
    """
    Store uploaded files into a vector store with metadata
    """

    #this is where the storage implementation goes. It deals with logic around processing a temporary file placed in the dir argument.


    return a dictionary with results of the storage process

@kitchen.embed("embed")
def embed(text: EmbedSchema, metadata: dict = {}, **kwargs):
    """Embed single pieces of text"""

    return a dictionary with the results of the embedding process

@kitchen.query("simple-query")
async def query(data: QuerySchema):
    #Function to test query against your vectorized database.

    return a QueryResponseSchema


@kitchen.query("chat")
async def query_chat(data: QuerySchema):
    #Use can have multiple functions of the same type given a different label

    return a QueryResponseSchema


@kitchen.agent("agent-create")
def agent_create(data: QuerySchema):

    #Agent functions act the same as query giving the user the ability to define Agent related functionality here.

    return an AgentResponseSchema
