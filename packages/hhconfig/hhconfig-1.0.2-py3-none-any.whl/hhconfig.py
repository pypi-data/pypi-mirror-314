#!/usr/bin/python3
# SPDX-License-Identifier: MIT
"""hhconfig

TK Graphical front-end for Hay Hoist console

"""

import sys
import json
from serial import Serial
from tkinter import *
from tkinter import filedialog
from tkinter import ttk
import threading
import queue
import logging

_log = logging.getLogger('hhconfig')
_log.setLevel(logging.WARNING)

# Constants
_VERSION = '1.0.2'
_HELP_HP1 = 'H-P1: Time in seconds hoist requires to move \
down from home to position P1 (feed)'

_HELP_P1P2 = 'P1-P2: Time in seconds hoist requires to move \
down from position P1 (feed) to P2 (ground)'

_HELP_MAN = 'Man: Manual override adjustment time in seconds'
_HELP_HOME = 'Home: Maximum time in seconds hoist will raise \
toward home position before flagging error condition'

_HELP_FEED = 'Feed: Return hoist automatically from P1 (feed) to \
home position after this many minutes (0 = disabled)'

_HELP_FEEDWEEK = 'Feeds/week: Schedule this many randomly spaced \
feeds per week (0 = disabled)'

_HELP_DOWN = 'Send down command to connected hoist'
_HELP_UP = 'Send up command to connected hoist'
_HELP_LOAD = 'Load configuration values from file and update connected device'
_HELP_SAVE = 'Save current configuration values to file'
_HELP_TOOL = 'Hyspec Hay Hoist config tool, MIT License.\n\
Source: https://pypi.org/project/hhconfig/\nSupport: https://hyspec.com.au/'

_HELP_PORT = 'Serial port device, select to re-connect hoist'
_HELP_STAT = 'Current status of connected hoist'
_HELP_FIRMWARE = 'Firmware version of connected hoist'
_SERPOLL = 0.1
_DEVPOLL = 2000
_BAUDRATE = 19200
_READLEN = 512
_CFGKEYS = {
    'H-P1': '1',
    'P1-P2': '2',
    'Man': 'm',
    'H': 'h',
    'Feed': 'f',
    'Feeds/week': 'n',
}
_TIMEKEYS = (
    'H-P1',
    'P1-P2',
    'Man',
    'H',
)
_INTKEYS = (
    'Feed',
    'Feeds/week',
)
_KEYSUBS = {
    '1': 'H-P1',
    'P1': 'H-P1',
    'P1 time': 'H-P1',
    '2': 'P1-P2',
    'P2': 'P1-P2',
    'P2 time': 'P1-P2',
    'm': 'Man',
    'Man time': 'Man',
    'h': 'H',
    'H time': 'H',
    'f': 'Feed',
    'Feed time': 'Feed',
    'Feed min': 'Feed',
    'n': 'Feeds/week',
}

_LOGODATA = bytes.fromhex('\
89504e470d0a1a0a0000000d494844520000009d000000360806000000ddfd9bfb000022\
bd7a5458745261772070726f66696c6520747970652065786966000078daad9b697224b9\
72adff63155a02e66139001c30d30eb47c7d0749b2aa6e97ee337b52b1bb8b4d6646207c\
388303e9ce7ffde775ffc19fee5374b9b45e47ad9e3f79e41127df74ffebcff9fa7b787f\
f57de6dff0f5b3f0f3aae0fef8c5f77781afdf7e5ebe2f1cf949e2eff4f9df9ffb255d28\
fd76a1faf377f8dbcf43f9979fa79fdbc73f56d4ebcf9de3ef3fb7148efffd4ffff5efbd\
d62fcfecf4ea3c73253ef5eba1be1ff17dc70b178149ef6d95afc6bf85efdbfb1a7c753f\
fd76217bf3db2fbe76182186e46fc8c1c20c379cf7f70e9b25e67862e3ef18774cef673d\
b538e24e3e85945dca29871b5b1ac9524f31ed7852e2a7f1672de1dd77bcdbedd0b9b105\
5e1903170bbce37db9ef6ffeb75f7fbdd0bd5b210a0a26a90f9f04c7a834044531e9bfbc\
8a8484fb5d47e505f8fbeb5fff90582e927995c2dc79c0e9d7e712ab845fb595dc4b74e2\
8585bff3e7cdcdbe2e4088b87761312191015f432aa106df626c2110c74e7e262b8fc9e5\
b8484128251aab8c39a54a727ad4bd794f0befb5b1c4cf8f69211251524d8dd48c34c955\
ce2557975beed4d02ca9e4524a2dadf432caaca9e65a6aadadaa17674b2db7d26a6badb7\
d1664f3df7d26b6fbdf7d1a71b71247ab58c3adae8638c39b9e9e4ca9377cf3ef9c18a2b\
adbccaaaabadbec69a9bf2d979975d77db7d8f3d9d454b96ad58b566dd86cd130ea574f2\
29a79e76fa19675e4aeda69b6fb9f5b6dbefb8f3276b2fabee8f9cfd3373ff3e6be12b6b\
24ccbd9c655ef49d357edcdaf72582e0a42867642ce640c69b32404147e5ccf7907354e6\
9c72e647a42b4a649545c9b1a08c91c17c422c37fce4ee57e6fe913747dfffffe62dfe9e\
39a7d4fd5f64ce29757fc9dc3ff3f697ac99f07dab0f3dc0a63654507da2fd78d18c9d7f\
7c206ed43babe87eb75ecc8c30ee7ae69a5c6e8fb9012bc243301608e552b2cdadfa26a0\
e9f67a6e3eac2d9c59489e8d1d88cdb6e877d1c31416b0fb49addd18cabe8d37af5cabb9\
744e2b8518b5c53399e5db48d9189947f2443e55a360f23e7ba75c939f2dce9b4a5bb513\
504a2ad2acd74f77fb8a3cc0c937c4bb771bdca8349ef30a7c2cb6bbe9fd13c7bd5cbfac\
7beec8a07d6ac58e3fa310b76234adb53c2dd5b6f6dac2f24c2dac004a0cc23a79c45dd3\
69b78d426c53592bb7ab7abb27b7b0743bdf67ebc37542aaffa59436bfab36b937318563\
7acef4c2d56f4197a0bfd7296faddd0ce09fe43dd387755977991aa9945f583b513be079\
d9698451cb3ec06b6261e7da5963586a2785d667bd8b4c51866d8e6e278735b277e5ae35\
587b6f16fbaddc98347c52b12869715f5c77f7aba5b0c6b43f6b021e57bb76153c8aa93a\
3d831eeceb15bfff5e4563f3f653cd3c91da2bd60c73f5b0c7dd67d88b10a9161cb83bf9\
e98050c34c46356dd282ec80188de0be9bf8a9248fff397fc47fbbefdf79fffb6f5133e4\
97aa3b212d96484b506bd420efd3db409aaa57dd74566c27a7eb76fd779199e59360fa7b\
72d50e1adcfb491d895322bf7fe53ebffb23b1c514d6735e0c4e3302b33be9786ffc8484\
f0fec4040c242aee2f617941a1aeff08cb5f1e3dff1e35f72f65ff5b5848c8df02c3cf7f\
02f35b5cdcef819160fc159a3f03f3c7c3877f46cefd0a5d8d00563a11446f9bc7aa6077\
cc004bcd36e7b41eec29d246b195e33f7d363c98a7ef1c17a1f479de15847b76c23f9b93\
15344457bb2181292b8f04720d702b97b8db290a8b232ebc38e40af20dba0fec1f930e2a\
67d9cee9d4d04fdc7352ce01acf1be4d6b9b94ce7be604fecabcb3c6e9c0f6cd95e9fa75\
e0a011200860b9c45c07788032a96357aebdd68c51d4322df70558c006678f78cdd3c4cb\
c52625478f2708ece56a4368f3ab56eeb63b3ef5f382a15a7e79231a2006e565f3bd39bb\
2ade68fb55f0df5efef2feb9f27e17d7957940d0fccc08cdf6bd46a9c1753077cfc3c3c0\
46e0580272eb45a05a3cac67164517dd44164aee48d5c63ad299504750cd01c76f110e28\
3a5ce04cdf57c98ba268759c04900595c702de6eacb39650a26897a29b7b8ebcc64cf50e\
567a78a854dc5769ddbf35a5a79eca412bf0ec9967827c78d50d30db58e967396f2d8ec5\
2c451642e775506daa3d6553e38d7933341677ae869a22f969536ef3175c9cf1d3a2ee17\
74c1dab4ac17254c348efede52ec4885920fbf3a10df4bc28198b10770b687eff593b6dd\
7c2967b5139a82dc9a6da88ebe3867a374164415adb40c57cd03e1417ca563332e3f20f6\
10c0256aff1e46520f899bebde955c8edfa2176d1c1e927bd65be68238dc2d7b2011c825\
520a367fbdb0e55a8e871749c832e267b29b343b3fdc39fbb3a0a60e41e5de6d418dcb91\
804be832b9cd2a884964129ee74408a8cd0031c3745342fc94957850da493a821ccf3848\
77a4c16f7327ae49a5203078ead142a49420eab150fc65d1571106820d136404a1830dbc\
81b5548b89e825b429eb6dd521ced04fed10f4324142a4e21511fb99905a48387a1e0180\
8219d5c0bc41172016294a42445a411990ab5dd71aafb67823057a811b81f389e0db8201\
69c9011f92c160e9a44ac63c1585cc6911255cb840f6552bac2e95be324890cfa8646ff2\
20c7f78b6c249a8032daa7eba188cb5b9a7c8d85803405bd426909b185c633471e4b9b47\
3db06cedeb919687be140eb2129e1418cc40d3088be6aa44e6d05add2e4cb5a5dc269530\
e17e7448417d50195019587d0f322f5d949fc29ac16bc072d4100c6b6a940ad4c0bdb775\
ba3b9ddb916ff76c67b86324779c1863fae9a0b4c1a1c6d20bcf6b7ba66deacf0071f206\
50b6a8301fb7f5f2b8f620506111f4987cf07d220f3ee3e5bd97139651e0dc17056b7172\
45bfd1d615838cef434d4a394d580ccc797804bd7456472121364591319369eebceac653\
48c62cb2bd2eba74b1cc9563e3bd6d21c4dafab554f759abe88fd57ed6eabf56fb3855cb\
f5fe7bc1462d97b5e1e005ef23c751c368633ad401c0651a588a9e223c2ba843682b08b0\
1c9a0bc7811afe88b126ea7a54cefbc5f30ade03f544afcd0f5f50a442c02717084e165c\
a0fa4ff603eb9142eae8661a2d231cb941a0d76e5ea03b0ec8ceb96ee10bb664f95db0e2\
5e0bf94df18848daff7b1dbf96e1fe5c07860a063a0bcfb493c707a448a00dc35e7de9ed\
102d20ee00cfb1f30aa003b9386768c791299b048d0841001140842056a2b5f0e03c199e\
a5924a0194ad8e1280876e85958f0c216fdc514063aed0ed0b28c55dc0e3bc1965dbb107\
604b0e18a334add2701d2cc0afa29dcea6b913bd8bb0a6ad30513cee9a8e608c41d74909\
64141fc0183b18d767ee50193e01bb51d1e23e25d89dc6ae43526aa4ed43d8d003ffccdc\
dcbb38eae3901fee45c50c451a3fa08b97a19203c5d181f41bffa84cf8a67cbf05d12366\
5f2ecc31d611cc4116a9813b20c9f460029c50804b852f4dc153e9e2c4bbd381af52c825\
6c9a05df31a15127774b36c2e1997b061ca8436c281c0e1710f57e717b270f5834feb9da\
2aea075cbbffe27e8cce51535dc119b8c035f92fc02beb8866f1989d4e98001432b93ceb\
4ef110414ca2dd83a181762395bdd2d8b8793d902a1aaab293e8bdab00e0140b322bbe6a\
45676eb0e319323cd393a8283d1b2d671c644b7a72cf0b516384b3c294cb63f929c68152\
c6702fb4a5b09132c15ce2ca5864c6dc27209147af540b5ea4438e9008609158257a6327\
4285f46225d42a1a638ee8b19bc89e01323630bc85d06defed5b0e5bfa35b9258d5eca41\
6545ab874662414850193e6cbce812433dc73679343440a811f6f7546ccd87be0093c338\
de7564dd9b37ccb30ee00c62168844f5ba3b3dbbe5de146a348f1c23dde3c1a608776c2a\
7cc2ee80c11e0ed73fa52ce1953426926d8c29a2255c9147184585864082f33710c98380\
e722334cc42d398316f2f8971641229491c701046b3908401826ac251f2e5ad7cc748098\
b97a1144a0062f4d810225a9682e0a3c921f1735d245648da658606e20918a8f003d30ff\
c4ae146088a25cf452028aab95997c43fa410623518f5c064f3b58aeb4e5de835f26eaac\
f7d38031dea331c959e2a89c10a16585ed351148201da045db6d840875478f3812dc41f3\
6b3c90c5825cf20bf43c8d8a2d742031c2543ca7bea00fbc9ea9cea1437a0b514bba1114\
cd9e868c07c324578dd4467344bed0d6a83e04792f48ed4e7192768a96c62403342bf8b6\
a83bd478365c8381d9d8223c44cf2b4e043d8dbf2325448071dd862b0cbdaec41bd781e2\
90072d223208581578e1bf7247dad16b0796030ddbac46ce4de305246ce395b9a2d3d076\
49da163f84dea0b8d4766afe75c0560252a4487190869ac5acf1f48bfa28d2fdb5f9e8a5\
ab34b29e01bca3e5325c08c22100116223d82b99d6a26d2c5bc8ac28af1ebdea0c400239\
3a8b4d1ba5834f93715b0f6dd07e58166a3f3ef12ce38d6d5d940e55191160870b6dec66\
4af27631f4962568464077651edfc8cf1a06a361eb28259ea20ccb87ac34149a2426ba0f\
811d5d10e0e255ac7d00b70146c02d37e2a21ae9e314e9041afd6aa0ba413f10b42023c8\
39421d1f29fd3584d91580d9083e4f3c21a349f1de202b3a07004dc9349036a82a009f9e\
d1aba05e467cc009f0efa61bda7486c75c0426c0ab436334f2261682776294675b459c4f\
95441868a04c8b59ca0bace6be6a7e24f73ee091c9709846b81a6490529e861605221044\
1befca9fd2510d35786d85008041da68cb4c10268d45c72a4ea6a7000be068c70905350e\
babf4188bd14b42556b5a8c8b6c4064296d50043534e268291ed8986a0ac41656a6fe4d8\
3a29e213a1cf9a8672129e3fba2cf7c888d31c14a2667c402a9a207aca0e2ac31806c468\
9b34f71412cd514611a449f8dd4035b5948bcac650cf9403da0301098b1a8e35613bd044\
81e6b96120d8215dba53719286035f02889029808ae716ba772c0c54c352684ed8ef3c4d\
04c4865bc0e680874bc969bceca92ad0a5d78d92a6d736f0855bc6d91bf2b6c26a14e041\
4203b8f467ca5405ad466562b3d645066da4dfc8595c082a1a45c7532166d1e25e901fe4\
8b31123c2ce698886db90a0d20d134bd22243079457e3cba4243141e1d8f8460005cdad0\
2c29a045b17db10267d43b404cdbf33ff4edf1e539bb45c7504f067621e11d3faee3163f\
35f202bc0f70750506d0232c2413b0f0970b6c8ac248ec5f2d144520460839cdf53b32de\
3b701b7c42844d2094072acfcf23d9cf36aa6540c118940058c49a20bcd4e04595336579\
aec1261a86524724a20964410cac3735d0d410adf06c55f3de0aec02fadae0caf61c4880\
d190ca040fb4839d21801d8243a0f788d46b04d22fde0a07a04b891c12f1d666d950ab72\
a91463305a926617b73cc9cc55340909b5399afb18557db4efb1c899f63644b50d7aa06b\
4917053fb7e95129c808ebadaeb1374907c52bbcdc57dfae21b6c954fc4c8eced67cfcb6\
2a6b75ad6bfe105a256df952e3efd17866f5cdeca56228658541a6ed70c61dadc3edf30d\
e497eba2644be7ed5524494d03c5943b30b4d5163080b62b9053d8cc4ac6547e2b3b2001\
62815b49d08d3428a12f4bbc47396bc4004d000c246287083c90a14e1a11405d7202da79\
23a7eba080a4812a3c815e00be33522e745c4c14fc0c3c855db00d3ad64e0effc23b65a0\
f890580dea81676823d44807a5501974d92670526428006c2894adde1b284cb2fc6a0d49\
c822e8e5681489a01fb4b68de04767835e4b420e4751e6d961c3c7e0093690550f3de857\
065a7ead40a43fa3f4025fa2153448941673fe2703200414f8c9017f5992f4a2320154fe\
0bf11042d55fcd102a77df437b67743f61b8c5c93390b2ca2a283aa40fcf5735b2429da8\
fb256d086714946b8570ecd38d03a60c2a71ee437a0adc7f8d860a7543d50832c8494f8a\
df21e719d7d5fca732e8a30cb4a90d690ae9ef454a284cbc49dbb86c68054ca53a4cbb14\
344701d9344da913d0a9c818bc2442ab779eb6604c77247783be8952b9d5034be4c85944\
5905af7d7a0460c367c0e71d6e2384bd609c51a73e42ad99ee90b395e8473cf3b535c599\
0b8264b50e528d9a3623c73d5c8de27cb6fdcf94ac5090301954d0cc13d6066d0ef5681a\
8da136d17a8e9e4c7b05881835aab9da4cf2cea42404c456d6660da58d1a16b39213b019\
155eefe871806849131c40c95d0faf06892b5002a561f82baa537a1f5a6d3b7b8d2fb05b\
111792dea5785f2d724742e8c0938a2cc85a7af049d960afaf364941db033c204b801112\
94621fa619e206839bf6cae12e8d6c45ade5d1dff26e9136c43fae12ff21cb20e789bdc0\
0c0e080a7f48fae8e7c483606326380dffcb96f152a289a6a394c1ec52936c8f5a82e742\
59803e54e193682c41bb1259fbac1517dba73739229eb1d3938410900713b163d579cd03\
50693beb62d1a3cf3a6097b8d1a4ebb1d7a87eede3c9fedda5b314fc8435471644bda421\
40b14e8cc8a847c9211c35bcbe149cee00a281ae540fca664b1adea421469f9160473a10\
9501582e4d0b34b4c71d696471f4b45097a8a72e201d3589c5299bc725ff9572d8da612b\
1a8d6a6b06c184680306f9f7503f0b2fa2993ffd8a066b9b8698da6aa5d61119133107b2\
71ad88dbdf9ab268beea0bfa0626e5898ee69b98b4dbddd200f3d685ea854e5023689203\
fac2f21843d6dd1a4615bf85d9023c35f6409723d100ed8190d4298889d3c565cf320897\
36ff890de60a045b0a23ccad597285af35cc523f6807454ef5e29a02d157815ec021cfec\
067a023cd0fe3f2d6fcd4201e800664a0af703e8537e9a1463f6a4ac48f22828033a58dd\
7207a10654330549f7916530055aa0018fe6cdb8b1e99f187acb919b02bee18f76425194\
37c082bafd08a5bcc670a28f075243537978211351ed3501f7d8a253c11212876f03f86a\
42ddb2dc8a38e252884c84cfdcfc60ba3cc7a2b55b32c8d01fcd1344fa64a7e14151ae90\
264048a266d206073530241580c040dcd2964ab391dd054b6f00ee71031dcaba47435d54\
7446e7e18279b0505947324de32661235549c2a86b287c26aaf59c9e1cd2260643b2740a\
44a622810638c329b80418f1412168c03d2e8ba4e90650dca246c5d7e3d550103c6443d5\
8237a1228390dd00b94ed0c0f0fb4afb00da7d48b6063c3c25c28a35a4af46590332d46d\
c7296b2fa222b4c655420b94227259f17a6d8435242916918e291b17740ebe354e1c01c1\
e6de60235874e8a62b0087001d688d0dc5d315613a243ad118f8355a898ea57381d32e06\
c01fe26a32fc7f3a9a82e5120835ef8ac6951cfd4767b1eafae6d5888e3cf1a2947b8c0d\
95ed6b46eb9308a28d08a704b153f4025ae5a29769b7fcf8cced6d3016e08e2f95f6c3bf\
f0c41a34e2398e0d6d919986ac8091428bb341b0d59885bca6e129d146183bc41a7c6021\
56edb845e0892a914f44fb63dc919c98d43c1bbd0aec5e7aa7e34aa908dd91e683ce0116\
2a1b81c91513662a1e390924761ed243d4376a8520a1df68fd3390f91e7b5b75ff59e08a\
8ad2ceda30a2f982a3b17644faf0fbb0c47dd43e37f51a182302b4537554891be2a3aee7\
20f4be564dbc35cbd61936fcd90e28368f22a0fdc0132a4d131728841e0e1a80015f1ea3\
b768a012d0ee7cf7cec4700b22862de9b054d2091e87a3be6d5eea8e25c9a01f845440c6\
61cfd0d298403066a33ae8bf8535c53403b8e81efa0ac0c5bc68cbcb0c0719e146bf90e0\
5d2746a2cac707103b6bdac6a24107850a9317ba9413a4aea0547fe68af18094f2138e75\
a0a6d06b115e6b3c7eac75caaca1d5853dc46324ac04fa5cd7512d2045f1c65d6d37e489\
903cb3bb7df1e6247d7556ba74e8040c1d30216ba9d007c6d228a893f0cf3d43b338b884\
b2a665a04f294c99aa1e9c7c35b147d87e46f33cde06a7a88713c117ee00cbeb8c210623\
4aa2b0029442effce06a2b4a234c0b82daab5f25cd7a8cb7530ba53eaa42130d2153d03e\
2bfc2e316398f0bc77aa3a3087ab4001689a64b9b8f6f659c08ecf2674d7eeb0dc350487\
d9cda076d6b8c0d367a496e64288a6da0720410c61281d0ae3099cac06cee3c8cb82c060\
dfd2b62eefeb0f77f7db638a426fed04b0e834852aac45e737d16fd3a4bd5c42b744308d\
f6ec74efd00931d13b20fe72ff3a2a69d06d65a27f501855f600a5b7f0aa08cf5c81b1e9\
1ec41f441a9a047dc14379cd0351c05cbaa8a2ab66dd1a5bec8fe207f19097a8646971bc\
b80ecfa0b361e4abc15430994bd4c43ccfbb695b8a67f5bbcb33e00cb627cea72101210f\
1a19f547a945ed96822e1da82572507d91c2b02f559c74b8c2abf8c88a0128d787ae5d38\
19483fb7ef3a870a6e450d110f24da5d05a0328b6d52e79431de0c190ace11f780f6d3a4\
87caa0767891690b0d5dcfb38870407e7a0d369d8b15512782ae7b9676d3296f40595b4c\
7b5d1d1044ef220c1a9c1e517d6405d2821c2d53bac0ad69807ba70ec421b1a02ab34094\
740d88b114ffe254938104db7305960998bd8db922e63c5d5da27d6f6dd553bb6ecfd381\
396407d50e47656488f42d34220fb4e8451d50c3558a10081af2e8e0f0499c4e2352323a\
96ebb7ab49cea16304e8c4b035b7de54a15c65d2b1c3c62d432ef0f3c96b1221d4bdf65a\
687bca9d6f93f6d84f733005ec818c460621e03bb6c7274d538474153d878c0e8bf25a3a\
ea8adc89b405483b75c445a100a904288ec02eb02b5d002828d688200da5fc903c048c20\
6d7414d05d3d22b408840ace5d0351299c7da0067006bfa68310e0844ed580c6420b6a60\
6d1a9dd4c61dd10f15f44fb5a922b9c1c82cb058af4377d4c49a903ae04d8e6d699c89b6\
41614e1d522195c42ac1e17969627135772440b430844f13d3f4fc5cea44fbbad33b0a14\
3480fcdfae7b07ba2929040fa490902eed73b285d0766405603bc5ef4d0139963b420e2d\
42d0b38ba83d8198b02e195084fcc4f9536b50367ee39dc1383ae159b54745d14eac8564\
ba8111b70a8ea1dec685469063bf66a368ae0e42cbb49ff639d85174ea5e7ba09814f9b2\
bd9b4ec3c2130d6f914b9a11778086dc3ad058a2f607a72d8933a0da63e1e947ca1b9357\
e8522284aa05ff36ce08213d2177086d7a2c305dcc255c125af89575d6994ed819031c74\
0c930c69f354b315ccbe6689276b1f248d35d2938e6f0f2f42290bfded346700d9e701fd\
0a5c81fbae3c5cadbbb67365abe9a8a03d3acc7d9a01c6865f8ec667862eadfd22e64630\
2787b791bc054168d6d4cbfee272552ada9b9b1aa24c88573b6916a455b6da149ed7396c\
9e390924bd233938774dcbb32c3fa8b0f0dc4007499c3ee8a0112bd7592a80521e992aae\
2dc7a2adb2bd757804b507af458d828bcef813481cb71765c0b99e25bc9ca9eb2ad15eda\
99c19f46ed420e32a29d3df41fc59763484e7796418d3a22d3d341cb03ef413b97c41dbf\
d383cfa02754834adf15f6c653401edaf59cf2120864dc33bc8623c68ea35ec9e786bf42\
d5e73510b0416ca1a31a21448cda7c07b0aa8095576c3855a617f1d77502df651d8d2e28\
0dcf9af5d901afbd96d7c01427a64d675449620289e9f5a509adbc3ff74702e036d6f091\
36779562e00d7bf7a911a47415850892e338e65d261c99a619c906a0713958b4a8e3b383\
de3e3112ce51034d7bd66a3af44c53d249f431aef89dfda6a27935cd89a8d6ac98421054\
0789056db8cafc20d5d1eaea84ea1030f1d2a5a204ed3f6873afe0a8c49fad7e9d3088d3\
cb59a46b780dd16b7b8730a4d8e7ae45bb0caee0160f79d491bd0476e38534034ef31d2e\
0674ab44a0df43fa33e31d23824b341ef01617f784fb971d719aee37d9014a11f8ddf928\
6688f6a179f686509ee125b90dd8bf250b8c3279adf04e88d30635869cc18b441604ff34\
5be0193d579fc106f7b5910f7eb7fa4e2b50fa9e0647a75649537e3ed0d3484efc0170e3\
320f45bde4099434d87ec84aee221940d150995d5b92dc7459d70961cda70776c4bf6367\
9020f44ceaaac35557a22c21e2695b5968a05f87d435456b88bf480c74d8519378900c9b\
0f992ff96b6c3fb12b519ded9013310dbc3fcba9b47c485401fe7769db6955388ca86bd7\
2e790dec3be202d5043da55060026e43bfcce635f5230b51872edbfbcc09d60515a32d6c\
2f61f3d2ef4bfe9c2c5970c88c189c5982bf53fb4a539b820760a319fdc4cd6c4dc1b4c7\
a3e1ff90e3c4c8461ddbd73e02519f3adfd7b4070bee6a270b191c8fc47ca60f9d6745d4\
2a3e220a4210353a89026d5243ed78227cf28629a4aa834e7c40219a4e8777269aeabf49\
aca203715d06e1aeabf301305a354d1fab0e5ab58a9f926dd3891ac950002a51423a1985\
8ed3c1ded9df61d88ef1237b89bed441520116c40c7817055c2380f311a0479657c7bbfd\
1a9fe6301dc4461bc1543a65719cc807033b2642421b112403930778adaa8d38024e2b58\
4e9f60a39714086cdc47e037cb9f03ab59a7ea8736d7a483d254a12e10c3cb40cca5c97a\
ea5e23ec872bf568366790dd4199f5a22918eb31f8cd09f651e093827e237cd40f41f591\
86295ad16da74d21b74d9af99213d3eea2443c35ebe55ad1b0a67d9124bd8efa0cf59d6e\
f49f4fc3bc7d3293432e5143a7aef39878c1fa0ec63e5cf91c8fbd54fedbcdd2e931790d\
c00dff0332a0c0e95a82459d4ed8e46c9d86a09fc0a7148b8e051730912ee45186308b74\
2417b56d0e8c6b079f946eb41f4424accc99377105782a8342a0a5267c41bbcbe8789cab\
8c264ab066f9438747a03eb73ece91c012044fd1a913b1542880256a025c594982912e2b\
a062d0b1497d6a8ec7c6ac04a27a8ac34edf1e6b44ec219d800ebc99698354dcb56f2d7e\
db8bcf5c380b6d58e82c4d0716a266057ca599f1c50e51b975facd746840f3f23b525e3a\
d78841c2d96025017c8455864331196137b803c08115028f424a3ddaeab84056ce4ae831\
ac56b96a42e48d3ee442c2313c1a24e38ab12ff4398e05cba86d1a6add5ba800b281a0b7\
1e67af61efc0a91f32f6ce25c3c685c7194307dbbf1c994e4f464d47795b267dd2989ae7\
78245a47a7390c5ebdda768197f046100e3d8940441f1f72d3d611c376da9cea463b60ef\
2ab7c914f9cec835aa571f14da6e6adb35bf2d9812969faf7dded9b982baa17a51e53299\
acb57d4ed7eb4c60d3b673d05e329862dc33b9ac473dfa7067de94df3b62e011257878a8\
44624b4ca173f8a81a1d93c7fd16582aeb3ce879961f5305af619a9b66e7b979b842924f\
47be0b175f05eaa1c8ae3695525d6f0462b69ee1ba591f27207bac4bfa6e384038f5fe62\
23514faa1a92463b8b44776aaf3ceb8c79d7295d7d84ab96a5c3799ad1e978a225380345\
b0b110432782b70ee4bda394db82e71e14cba06f757e149fe201a9aed91a488dd222575e\
fb5969602ab9217aca1178f89b77a3a34bb39d3436c747e0d3a11990bfd101516fa36181\
147efd208d92439e8b0a41155eec64e720d18395db9d2f304ac7d4b8d832584207952985\
dd755c14c6b90b6ac50e2656accf9f1540d10c2fe4a08ae2e535e085c37b59ad55083943\
0d9a06688a1028186db45db834e78805d094f37db6af1539441ac0459efacd6850b9a3b1\
3a844305e9ab80967ce943559071ccd96b6f9cb7c7a0b33588b0fd66b12d08eaaacbf037\
05ac4fca69235b614110eb18e5d1c7fa2099f7f131cca3d0591da2438f056d0c92e8e376\
d0316f4644c04288c9ac7d9b2465d90f2bf752513a278a56c66a56e20dc96cb0899a9117\
d1a7afc0778c8a6c1d84e6e056156742c482dc6089e6291aefd13f841c66aa602e7daf73\
3c18bd5975c38e417d8301ec8e69337839f0159b8c410e9a14c37f3a4c439f1c49682cda\
e51175e823641817b6d047b2b0dced25b063c711fb87a2744b1fd9a327a9eba41364fa27\
779dfed2962f5a1f4645faa3d900012887e5507201d4bae865d11c12b43dc5c683512adc\
89b01e08c774aa628624fa85080de2d8682a1d80f21a9e7a7407020616ef3a0fa60f8099\
78ada03991782840d33975d4954621975c60fba43b9f8095f0275b7423728462cb96a3c6\
aea4afaa2c0dcac698ebf08509ff81b74747fa2c4293a391cfaf9a27826fdc539a65296f\
ef4bc763d1a8dd50c640ed2007f20c1a077fa4c22b1c500bed85039b5133eca25de8a0d3\
c301aeec75eb536d4804f3da51f43a571be095f251fa5b471f67c56951d6a4fceb90b5bc\
43d221e70f72770debb4cd4811e5e9d11e349fbb9fcf3c751d68d0f937dc27bfb40c00a8\
25f4a1d39c28c6b9b6d2d4c7d189797daee199027d3c674b76b80c6bee270774c0979201\
072818681755101f1d01f5458768756e6b4ff40ce0959fe0cd4099d638f77674c2d598cc\
fd372e5b5612563d69450000000970485973000017110000171101ca26f33f0000000774\
494d4507e80c06172b1cad409541000020004944415478daedbd77981dc5b13efc56f7cc\
9cbc394bab9c7316120a080909a1002248808802936c6c631b303618dbd80413ec8b0922\
838d0926286750ce01e59c56daa0cdf9a499e9aeef8f5d6149686509fbde8febfbebe739\
cf9e67ce993edddb6f57d55b555d43f83734c54c02f001c8d065a5839c8aca0c1d8f0344\
a77d8f18606af80bfce33dd3199f03009ffef969d71afbe3c67b4ebdd0d4e77ce6ef9f71\
ed82c6f72d3e3f79ede47500880b190db66efd85190c1cc1ff40635686535a31c8292ee9\
455a09210498f9f4effc3be60f4003905a80833ed7dbaaf9566d787649a25a0030fe65c0\
d94a502cd2bd74d9ea1b2adf7d677468e6ccd66cc7020a8000be9e12e3ff763300b20056\
00dcc6ed9897dbb9f8a2d5cb0ed772ec680279fffbff451c4d3bfcccb3bff4bdf0e71140\
8c0860d9f8916e7cfdbb5a0c400a806a40cb51034ea4ffecc9cf23ac9ff39328fe974057\
c32cec9a9a3e050ffef4d9d01b6f0d4e6b96a1aaa74ead7172d22b0c12458ab5498de28e\
e9ff36e834d851c4316d98faabe5cb87e66fddeaeb35e58a22d922735f02d17f3be062cc\
545755deefd5250bfb37f7798da1b7dd72202129e904311c22924c649120ebdf846e0d47\
d794d954a638d62563d6cc8e95978fbadb7cfd15c9ac9efe9740178cd5763afaccaffe10\
7af3b3c1ce7df71e4cfdfd0fff9e9ad46e3181220057ff3b24e977bd9daaddcfdd480170\
00d9f1e71bc7f45c6b0af3fd4b872d0650f13f314e0b10074aca323f3a51e00fe526d7dd\
f9c273bf0d787dab2448112008900436708666fa76b28258434535cc7a0394a3eeb9f3da\
7d77dff763fb073f9f963060e0916f0d0aed46bdd18d5baf0dbdf0eaa0fc1b6e38dae7d9\
ff7a20e6355790826318f47f4e9b32b30520f19fac933876f478fb8d6bb77a0d65718f2e\
bdc200129939e17f608809070f1dba52f90356f7ee7d0a923cc11304b24f5a490d1be2eb\
662b851af3dfb08eecf0c1f28edd3e6cf1d3c73a9f9838fa86ea2d5baefa56a02b652672\
22d907defb7082919c859ebffcc9e7caebaef24bcbbec0853201841accbfb3f013e81a41\
527fd701e76a65ec3fb0ffbac77efdf8f794529ec6b99db1f9014053341c69919c114ab0\
a481871e7ee86ed8741513236e308466589aa1fe8d7b5630c1150c6db05178e070c74c8f\
5714161e4fbd61ea943fd8b6ad24a8c1f02782260166e62e9d3b6ffddd6f9f78869923a7\
74554744f10b967926719dd65581ae59e586049cbcfc946f27e9340bfb44792fcf8239ed\
e4c0bea568d77eb629fdb1f3bdddb66d13408bddbb778fdebe7dfb84e2e2e204c330a8ac\
ac0cf5f5f50daa3b182c7ef0c1079f60e61ddf751ea2b50e3df7ec7393d7ac5835948844\
d32b70925931a24458b37a756b805aff4f53ad9a4834b928bfa8ffc9bd70e62f9fc82fec\
9c9e92d69799951002966539175f7cf1e2582cf69994f2a0699a172408823651f186f5d9\
52818d8e1d977d2bd0a5083263870f760be51ff3590fff64b9b28c7de72d155cd75b5151\
71f5830f3e78fffcf9f37b1886e19352d299d2211a8dda13274e2cf37abdcb8510df69d0\
5996d572f7eeddfdcf09b8465cd1d7e8c37782d79fedd70b0a0a929e7df6d9814404ad35\
00703c1e1ff8eb5fff7ac87df7ddf72300072fe8473c6859b96ef340d34a8e36efdb67d7\
b7021d336795ffe59309de66e94ed23563972988faf39408466d6ded95d75f7ffdef0e1c\
38d0ac458b1651c33054515151100031334efa8e3a76ec686ddbb66d9a6ddbb77c43557d\
b76c39b8ae2bf2f2f23c4288ff08fb9488c0ccd05a3b2d5bb60c472211a3b6b636f0e493\
4f0e1b3b766c4f663e44e7c9b8d966192fdf7f99ff6f9f67b8b74f392a3b755e73c1a063\
8745bcf0d0009e37af7de5c57d0b335272577ac874cfcba7a754e62f7ff9cbbbf6efdfdf\
7cdab469f31e7cf0c1370cc348bbe38e3b1e5db162457b6a74266badd1a74f1f68ad4dc3\
30ccc6ddf69d05ddbe7dfba094c27f0ae8b4d6d05ac79f7df6d9cf274d9af457d7755b8c\
1d3bf6b1fdfbf7a7949797cb76edda5d8051a912cae77dd11795e556ca88114b14907fe1\
92cee050ecc8eeabddaaf240da98cbb790619cb7a80d87c31d162d5ad4332d2dadfc673f\
fbd9aba150e84b0099e9e9e9b712513b00a4b586e33868d3a60d9819cc0ca2efae93cf34\
4decd9b30786f19fe31d1242a04f9f3edb274f9efcb8611847945283b3b2b2f4a1438754\
6262a27b419d49d932b276e345d297529fd4abc7965a20f62db6a6935dfee1ecae3a3d33\
9a72d5c4f920113b4f2947c5c5c59e9a9a1ae9f57a2b89a8426b9d7df8f0e16b162e5cd8\
9b884808012104bc5e2ffc7effd7a2febbaa824e4ab6c2c2c2eff4c6f8362d3535550821\
4cad75cb356bd6dcb561c386cc6eddbaed6dd9b2e5f6f355ad51c552171f1e657ef4793a\
4f9d9c2f3a765a9b4ca42f687b6a9785ca3fd0bf66d6fcd6a9032f2a14a9cd76120975be\
bb27180c3a524a9d9f9fdfe1a69b6e7a353d3dddfef2cb2fbb29a5124e2512ddba758361\
18ecbaee7776515cd7856559a8aaaaa2fafa7a10d17f0cf0b4d658b264498f5b6eb9e56d\
c771d4faf5eb7b0b214a5f7cf1c557fd7efff1f3eda742d821ccf9b22fd7d69ba1d1c397\
0228062e3062604b849c637bc7e69e28b6f8b2619b95210f5f8064e0783c7e74c488117b\
56ac5871d1962d5bfa4929a1b5a6938b4544b06ddbbdf4d24bf7a6a5a595f0779841341a\
dbd6e6cd9bbb0348f94f019c1002aeeb8288ace5cb970f2022372121e1c41b6fbcf14497\
2e5d3e26a2f3f6c5a601ad2a37acbfc8355222c9fd7b6fd10d21d90b039d076e76f11bef\
77a7e6cda2cda65eb3d05514bb90fb2dcbca7ff5d5571f993e7dfa2df3e6cdebee388e0f\
a7c499995977ead4e9c05d77ddf55c6262e291efb87f8e6cdbeefbc61b6fbc2384481142\
e0bb4c78ce4728a4a5a55504028122a51400d87ebfbfeeda6baf3d7ee595577e909d9dbd\
5a0811396f23cc6549c7f75caa3f9f9b41775f7dc46cd5712d11e90b021d3b2cea8f1f1d\
50f9c59ad6094386142190bec36b9e9f6a3d65628e526acdc30f3fbcedfefbef4f61663f\
1a42305f4b768fc75301a05608f19d5e41ad3585c3613a70e080158fc7a3ffdb259c6559\
d19933673e999e9ebeb05100c40cc3a8f5783c71c7712217ba1e118920cf5bd9cfad2ab3\
52c78fd81a87fe3ac67cfe92ce4008fbf78ff6169558dee123360bf61dfa369393523280\
fac6d7ff6635c4d16874d78c1933ee6b0ce7fdaff5c93582ce69d6acd93a214471e31afd\
4b2d0168bd6fdbda41093022be8e0397b212b5170c3a86ce2affe0839e89b999d18cc9a3\
171171ecdcfe2b458e4b1936ab360e40fe9312025f6766c44c290f18f2dc8e65a57542d4\
551d0198e2943e6200bc0ce511e2a869cad2ff3f16cce7f31533f38cff14c64affa614ab\
282bc9c70e5cc23397a61b77de72c4dbbaedaa93aaf5bc4157c5ae70f38e0d7467cf6e6d\
8cb9f48448c9d846f2dcaa5541f83f98b3e5e1679fffdb0dec350cc30e400b06eb008814\
3233ecad73fff68bdbcf25f1e2ca31be5c7bf0f6fb7ef6de4f2d8fc777aa89c7c24190ca\
f297cf7df94ed6aa8c44c3ee745d574a29a5ebbaae10421291abb58610c2606617806466\
1886e12aa5a410c26854274a08e136be370188935e79c33074a34a95442488c869fc2d01\
c0d45a3b8dfd2ac330b452ca0040524ae7149791414492995d29a58ac7e3641886490dcd\
2522e5380e19866136ec49b844a4cee27afa7accaeeb2ad3345dc771a494d2f85a3e3464\
8c082222adb56a5c67f74c09e6baae202279729c5a6b4144279df15a4ae968ad0500f3a4\
cd7dea9c9a568a4ea06cfe82fe56699145132f5be90225a77f7e1e2d002754b7376f9455\
596359232edfa484ef9cacd566a6ea48bcebab6fcd9c7038929aa56d0557b8602302b2bd\
f03835fab74f4fa9f15ac639a51c09a3e5ccb9abae3fa4d09c6c4d27f390590b588e879f\
be6fe27ebfcf2839b943a3d1a828282818b779f3e641975f7ef9f2cf3efbac5f23ed8f7f\
fcf1c7b7de7cf3cd8bd6af5f3f341e8fd729a566ecd9b367dccc9933471b8621aebefaea\
f54aa9f71cc7c978e9a597eeaeadadcd4a4a4ab2efb8e38e9700ecd35a5b870f1fbe6cc3\
860d5d1dc7794b4a59198fc7bbbdfdf6dbb74d9d3a75ee9c3973fa0c1d3a7499d67ac7b1\
63c76ed8bf7f7f06334f27a27a6636962c5972eb962d5b060c1d3af4afccbc2e1c0ef77d\
f1c5176fb46ddbbce8a28b3e63e615d5d5d53d5e7bedb59b1dc7f18e1c397236332f3e55\
4230b377c9922593376dda345808615c79e5954b6cdbfe6cc78e1dc3162c5870bd945234\
6bd6ecc4cd37df3c7dfbf6ed6df2f3f3bb8f193366c53befbc337eead4a99f0038728a4d\
6aecdfbf7f546161612e33bfa7b556f9f9f9c3fefad7bf4e364dd3b42c6b472412792316\
8bb59d3e7dfaddf178dcd3b66ddb62c771a69ba659744ed039aa75ddba4d8394991d4bed\
da6fa3609c4640cecb392c81ccdabf7ddc4b6567c752ae9df885a98ce8b9a59cf61e2ead\
9dbcaba0b685431eb86c41680fa025bcda4233c15583dbb7f99081ba26fd605c238f57c5\
c67fb6e47837af0a92276ec1637b1a5eda846d9f880c1ed2eb53c5ea6bd5eaf57a53bff8\
e28b69914864d0aa55abaeddb56b571700b6d7eb0d3cfffcf31376eedcf983d75f7ffdc6\
eeddbbd70b2192df7cf3cd7b070e1cd8cae3f18cf8f4d34f070130f3f2f22e5db366cdf8\
71e3c6b57df7dd77af715d37d3755db3aaaaeab2ebaebbee0f7ff9cb5f1e504a7507e0c9\
cbcbbb66f1e2c583007478f1c5176f334d33999913fff0873f5c659a6610807b523ad5d5\
d55d7cecd8b1619d3a758a0168f1ab5ffdea89d6ad5b275e7cf1c55b5ab76e5d0220fb57\
bffad513ddba75eb3769d2a458ab56ad2acfc2de3b3ffbecb3778f1f3f3ea1a8a8e8f2ed\
dbb7b7330c0359595971221a695956cbeeddbb7fa5b5aeafafafefb064c9929fbff9e69b\
2f5996d5594a79e69a653ff3cc33f7fbfd7e5329a5b5d664599665dbf640c3305a0e1d3a\
f4a8c7e391478f1ebd7ef5ead5178f1b37cefccd6f7e737d381c6ec7dc741e788d8a4995\
5f329c97ac4c0fdc35e59868d36e0d09d21704ba7cd6c23d5030b06ec1276d68c4f0524a\
0c7e45069d53b592e6f43fbe3a7770cc4cb5848842900dc92e5825c2e1384fb9e1a25d99\
69a13582a84946441c0c7cf0e1c281258ee9b7a580322250a4a14940b08b5b47f53d38b0\
53b3f986304e15f72d3ffcf0c34e797979a90f3cf0c0e5a3478fdec9ccd5003072e4c894\
471f7d74c4d34f3ffd6a4a4aca92fcfcfc1e3b77eecc1e356ad4b2b973e796dc76db6dab\
8510bed5ab578f2d282868f7e69b6ff6bafefaeb377abddea3aeebe63cf4d0430fdc77df\
7d1d9839a0b5f63273d22bafbc32e0e1871fdebc71e3c69e83060d2a484f4fdf69db76a7\
3d7bf6f4e9d3a74f1440c8755d1242a42d5fbe3cede69b6f9e979a9abacfb6edf6cb972f\
6f366edcb875c3860d9bdfb265cbbd00bc5dba74c9983d7b76b70913260c0e068375a7da\
585a6bb969d3a6911b366ce8f4c9279f74cbcbcb2bb8f6da6be72ba5547a7a7acdac59b3\
ca6ebffdf6777af5ea3547085197959585193366a494969696df76db6dbfb32cabf814b5\
4ac5c5c57d4e9c38d1a36fdfbe0e110501a8848484f2d5ab5763ca9429aff5eedd7b0111\
f95f7bedb5bebffad5aff6e4e5e5f9a64e9dba3d313171efb96cbf007b02e54b660ef415\
e77b3c6346acd267a8d6f3025d0e2868e71db934a5b2d20a5d3272635cc873b256cd2c2b\
6bc24356add8d24508096aa40dcc260c2de1b74beca9d70d59a2a1aa9b26210e8144df25\
8bd60d310d4b185a819800b2a061201aa953578defb33406bbe01ff744e4ca952b87e6e6\
e6563ff0c0031f242727ef1f356ad45c218402c0b1582cf6f0c30fcfcac8c8982584e0ed\
dbb75f545f5f9ffbc0030fdc3760c080a3d9d9d98b6b6a6a725f7ae9a5ecf7df7f7fe19a\
356b6aeebdf7dee952ca8ab7de7aeb8ee6cd9bdb81406071381caed05a87239148cb8d1b\
37b6993973e6b0c71e7b6ccc3df7dcb3406b1d5ebd7af5e063c78e253ff5d4533f5cb56a\
d59d52cae0fbefbf7fe3679f7dd6afbebe7e3733db6bd7aeeda794ca7ae289271e9e376f\
de0421843163c68c21a5a5a5d91919196adab46915a150a8fe0c233fb47af5ea4e2fbcf0\
c2e29b6fbe79fa871f7ef83033ef06406bd6ac193870e040919c9cbc9588dc4660e9ae5d\
bbe63dfef8e32f30f3e153ed3929a567dbb66d7dcbcbcb931e7becb15fac5fbf7e8a94d2\
2c282848374db33c353575871042d5d5d5755cbe7c79f78f3efa68d40b2fbcd0f1861b6e\
f800ff24bd5e4ad5ba70d3e641e1606a2cb14bc70d31e01bbebd7fea4667addb17de72cf\
6772d59c56699bbefa69342df3ed04d13489d0cc89d3ffbefcdd1f3db36022cba03058c1\
26132659108ec2b0ae7af7a76f3f7ca3c5b19d1e4ff0ac3b26a6ede0c295879ebfeabef7\
a699be64c3d20e1ce942230862469bb470e1fa998fde6e98e12f424652435a246b2a2faf\
e8efba6e30212121afa2a2222b3737773311d9cc1c3c7efcf8e8dcdcdc2d428863cc2c4a\
4b4bfbd4d7d70f1242d8ad5ab5fa82998fc4e3f1c4f2f2f2ae393939478b8b8b07a5a7a7\
af9752961f3b76ecb2d6ad5b1f554ae1d8b1631d5ab468b104000a0a0ac6d6d6d6662727\
2797e6e6e6ce67e6486565e5d0dadada6e5a6bcec8c8581b0804761617175f128fc73ba4\
a7a72ff7fbfd7bb4d6adf2f2f2466badadacacacd5a15068475959d9e0cacacade4288ba\
76eddaad88c7e3c7fc7ebf3ac59ef31c3f7ebc7f7a7a7a819432df300c2da56466a69a9a\
9a1e4aa9acc4c4c4e58661c41baf75a9adad6d999b9bbb94e874273e331b65656503eaeb\
ebfb32b3cac9c9596659d6fe783c9e1b8bc55a252727af2522c7719c1685858557388e63\
6467676f0c04023b89287a0eac48fbc4de7b0ff61dfe54e89a29792d5e7a711291bc30d7\
1ac758c40fefbbf9989159b7ebb61b0eb3d6bdceed305554591b1bd073d42f0fc9fe4fb0\
d1ef37ecedf71863c0efd9e8ff04073b3f1a9fbf6ac713ccaeef9cde6ce6ee373ff0f27e\
abcfb36cf57f9c7d7d7ec772c0e32cfb3fc9de5e8fa83fbeb7e003664ef9a684643a696f\
9c697730b338cb77e5d9ae9f79ffb9de37f671e635716abf4d7c4f9c7aada9f19c6d6ce7\
9af7b9ae5dc8fccf1ce779e1453b49052f3dfbf141c0ae9e3777bac31c3a3bbb3d77dc2b\
58bb73cb70ed5679b2875dba81a1fe49ac95bcc78ee55f7db004b9e4f7823806680681c0\
522137c5acebdfb5dd1ae668933e3ee5b8c6be1365c367ac3c9ae3520ec88883d984160c\
0907b17055ecd2217d5603f03073a733a4b50d201f807da6dd719205368235e3d4fb9899\
59733509946828c1cc8900d2cf000ecef6fe1f029e8b88a88e885833fb08687eb6c53a5b\
38f9946b0ca082992b4e65ad5ab345845c00d6b9c2d1e7e85b01c83f29a51ac715029079\
d235741efd6800a54454d5f4f21b6debd66e1ce0f524c77d5ddaaf8b01e10b071dec8cf8\
677306c4db348fa58c19bd12649c33f6165768f7e49bcbc73b1e8f452a0680a160416a00\
8e5fdf7c4fc77569c9beafce65880a03891f7fb4766444f90264d6433a3e688ac152804d\
7edc39bedfee1e6d32563dfbe287f7cc5c5e32950d12266c680ea27d2bcff1b79f9d763b\
80a34da8fee6cbd7ed7df457cf7c3e4a78eb857633017810302b8bdf79fec7cf65e404f6\
ee3a5a3666d1979b061e3c52d12fafa44e86c3916f542a38dd696ec1af2a2a3f7cf9273f\
66155f43d2c38ee3769ff6e3175e2d2c4e49728d3ab088006c81cf98b6d40a52135c7821\
0c89ec4c83bbb7cfda7ad3a44bfe12736a1679cdc4b862a618d0f9ceefffe9e582a2408e\
b2ea8126fa3b3b104d74cea4fcd79fbfffde483c7ec06759adb7ef2f19bb74d5e67efbf3\
8a061d2d8cc8fa7a1b240016678e4f838503053fcc988a3dffebeb1e658ecd22f27ec3bc\
8a3a5aeaa27dc3fcf317a4f31d771eb55a7558e36982283609ba88cbc23db47348fce3d9\
adcda9579721abd9fab3392bbf5e5065cbe3a5d5bd56acd8d60a46e6696c9fd8458a5b1c\
be61fced7f8752d51c77250cfea6454944712d7a2c5abcb1bf343cc4608005081e002e38\
52ee4e1c376e1e581d816505d61d2a6f65f93cd25051301cd8d1b83ee9c83c0be0d2d7ed\
cafbe5e5f7fcf916e56de6d3461ac80672c4a1e2f75ebbeb536f8ac4effef8e9dbbf99be\
ab87b094d7f0b2903a010c0237ce8570fa395706a0518bef5dd5be202d2de91009c1b6ed\
9adb0f160f9bb5e644272de33ed750202d211481487f7d7fc35f82160e94a80791823c00\
cc5e9ad76ac1e2353d3ffbe029975d5ea0b5b6566dd87ff507cb8ef6f3fbd33dae70416c\
7edddfa922f26ce38b3aa5ee4d13c72c959a4eb82e2e79ea8dcf7efbe8cbeb7a4a99ea25\
cb144a02442e0c0d082d4ebbdf11024a1208f5e814700eb669d3ec9852f56705529dc17e\
f7ef0bfb5175bd27e1cad1eb1550dab4f3b849168250edfe9d9726da116f7cc845ebe3f4\
4fd2988499f6e9e26d53aa45d0f7cdf00ad0a577475d5c131956545ad31a24a0497f1373\
80d873a87cd8e67c9529fd02800b620186018646ef569eb2e183bb6d00c2767a66a66245\
e4b005162e34248aaae3220a58dfb43594b5fd40d1b8ebee7ee53af6b7f62965836c0389\
a82c79f599db9ee9d9bee5ae877fffee73efce3ed2834259a449c19131c48d7f9254a119\
41bbc2bee3b67b56d90d87cb41825abefeeebc6b63469a571b0cb009a97dd052c33dc3bd\
29b41780074a380018a6f4418b805873a8b8d5b66d877a8c19d47e911046ced2e55b2708\
5fba276630487b00d7036129b8e29fe7197448b26b6ebc66e8a77511a7f323bf7beb99e9\
8b8b7a89c49050b20eac09ac258809daa06fa6f4b017c45eb053c53ffaf9c4bd2921eb30\
51ea59c56b22ec8e251bd60d8af93362d91ddbae8e9f23d2d424e82c20adfebdcf7a39cd\
73636dae9eb8da266e720558b9545613edfdfa3b0b2fd2d22fce94fa0cc2b25da58983ae\
7ef276680b600f20638096a7ecc9c62d6618c2ebcd241736080a04030c175ad9fa07378d\
589a606003b3e466cdd2bf862a134341a120c2a95555ee40d67a0f356645449436f79fa8\
bc7cda8f5e7aa8229a90a205c12b6c7822076b5f7dfac63f8fbba4fb9c37de5afcb3773f\
adeeaa827ed266290c2de046a1d9150c41c0d90cf286835fba6f87cc6dadd2123f896b11\
d72a2ecb2376bf2fd71ee9482244c42e4ced07a92a44e3f51a089ce144af02998a2c4f02\
39ec8506430b1b7035021e3f1c1da623a5a2f70b1fedc8159e10c02ea4f640a092a3d130\
43079bcefe620634dc71637b6e0e7964c56b1f2db9e78d2f0a7b086f8ad0ca8660032a5c\
afe100243cd0ec02a71d312640168149703a57578e1edcfee398eb9ed599af5d6df0b13d\
23e88b55999eef5d7b44b46cbd36700e1fac717616c222ba7fefe0da45cb5b19d75f5d46\
09d96bbde7ca1016dabb6b5fc190c37566489826e0aa6f583ea690a0509a641d80d21e68\
19877132b2754aa5251204052f183644230e857061bb7664f0a0becb745dac0641219a67\
6744c14a09d602a440d0e0b80e945554b5ca494e270050ae32cb2aeb2effc923af3cb5a3\
d4d349488b4cd288c6d97dfd7753974d9e30f0839d796597fef8f90537c840a2a1841fa6\
b29022aaab1f7b68c2c23197f439e6f17af8ecfe4c066b3821bf5c98209c9dd220d6ae0e\
beffe9b22b8f447c41af1185d002a6c37cfdf84e071e7b78ca42b2113fdd0656f2edbfcd\
1df1ec5b3b7a9b560269a3068222c84936aabb7568b6cf3474f2e22f565eafd8976272b4\
416ada8aefbea1dba19ffdf09a453a4a917339bd5c97a35969624edef1e2ee0fff71eed5\
b6b7a361b9d5f0b10d8f13ad7efca12b665d31eae212d32408a26f7ad04841b9c41e4b1c\
0805dd853ed33c2b066292bce1cf97f4d2e5c566e284cb36d91025e78ecd9e0d748480de\
b76b70a8b6d22b860e588f9871ce5256f118b57f7efafc494a245b52d5816180a0410c68\
d120e9080daa06c286d1987c4a82c18dd02206080c050260437083916e0b035279f1d0a4\
ecfd9d5a26ad2222cd1ce19c8ce4d5d9a1404531288b48c2740cc4954449591954ab5428\
376e56c49c31f73ff1c9d35f6e0d7736cc0452604463f5eecb0f0f5b76d3a481bf06849a\
b178d354d7e74970a505cd5ec0a9e0dbaeebbceabea9431e70609737103f6ecc6e6978ef\
e120c08023180aac247999d9a6b8ad7acc98bd62a8b4b4549ae0081f945dee4c9b3c657a\
6e48bd064847c168cc5a659810e9c901b3a3c3bede21e54009852887f88eeb3b1c4d4a30\
b63a40fb8f666eb9c8b42014f9a0b4076c173b13474cf92cdb63fc4e074e3f712fb981a7\
b204346948d4030865fe7dfe96a7e3d43a31148dc2355d8449f0bd932f5ef7839b2e7d48\
1157120892f549e97d367868a2a60f58fb58b5ddbd65cdc02c5f4accdfbeefd230a8ee82\
41474046d1df3fbfd86cdb229e73f9a875aee7ecd4b7d15e9207f34a7a6df8ea502b7872\
a1594380c19060928d317a82a246e30efc0f36c80c01dd20a5489fd5574dd0b02365f6f8\
b1e33f578cbc061bd1cfcc5cd8228363a5a502d016040b001ed456568010163184863eff\
d25f9f9abd725f67e54d2726820a9f707ffffd11cbef9a7ad94388d7ed2ca897d7fef1f5\
257db548265014441a21591dbbf3cec9ebb55255a630cef8477b01d2383396d828eeadcd\
7b4f8cdc7c34960a2b043060b242efcec9c51d3a34ff4a73242645e269ba5031b79cbf68\
532f4fd047b652003ce0da5a7be425bde780e35573bedc3b6dedbed20cc39f0a66016184\
317a70e8f8d08bdacc24ae8e4924f1a9ea354600199abd643438cc6da6a2eafa8bfeeb8d\
05fdc9c8218735342ca4899ad8bddf1bb316c45526897fe9204a9c59aac37bfb995fac4e\
97774ec9335b64af4fa673e7e37d0374e51c11f6befd83cd8f66b5e269d795cbb49c55e7\
64ad24523e5eb8f99a3a11f21a70c02400cd6022086238f1309376989bd0039a1bb2702c\
5f90149910acbef6151111245c0cea9250d4b777a76582f5a971566ed92280af4a5d309b\
90228e24af5d969212da2b8c50e6f37ffa6cdaf31feeefcc86873411d8a9737f71739f15\
8fdc3be1a198e36e373c01ffce4d3b07d5d89e00f913205404808001bf2e2c2ac9b0eb43\
df73a1f8cc9861623054ef326fd0ece659c28cfd435552b3975f9b71b9e6a0075a429001\
8ad7a8ef4f1bbf28c56b6c233a03708ef6cd5b7ef8ea657b63194688a1a505531918df3f\
e3f090bead6702c859b262e344e94bf030b90069283bca43875f5eb97ef3c1a1ca75fb69\
51745a51486646283171b7d26aa51452c3847fddb6c383aa1d7f40f92250c20b698387f5\
ce3a9895e499edf4207900001b3449444154214838f8179b60d757f6f98c1181922a9fff\
9af15fd930cafe79ead337333efdb55bb70f3475d4eb1b3a62ad03f348d3528ee944657d\
bf373e583e5859a9426a1b8e10605800b9305495f3ecc31397040c279fa5c9c099a5b518\
824196e5c97efe8d15a3f79490971bd33c4f9eae72e3617dff9d57aef79bd84f67eca096\
2d13800d653020e0d8f9757f79e1ae37060deab5e5b937e73df4f86b6baf3242e912e480\
dc72f7ee316d573ef1f04d0f41d9dbfd96879939b46ac38141e4f1085231086d8141a847\
62e0d2eb5ffebe10cc0e9d4ec425d948b022f690de2d0effe4fe6bde8a32bfed23aa8fb3\
360aaba3e3566e3ad64dcb74828c831590aca3e1e1bd3b7ee1a89afa46c946826388db92\
84415de6cdff62a23710b2985d68b260c72bd54dd75cb20440defea2eaa9d3671f6c6b78\
d220753d949030cc003dfafcd27e3a6cf726e9820dd528e81affabf535ce47afdfff72af\
76d96bb45bc3b58eeaf2d27b8b264a6fd06028b86c42ea2afbf61baf9963091cc2bfa119\
5ab7abdeb079a09b9a51e56bdbf53305d45e30e80cb8ad6b66cf1d65e4e4c492c78d5e13\
850837ed818677dbce03830bc35682161216146c48302400179d73e4b11bafbce8b7295e\
b595a407dfe4b40ec096b1fd48e9f70e1fff70249bd95fd7166d280bc2f04894f7edd1e9\
43287d6682809b9e9e5aafdd62384ed4f9f085db974d1ad56fde9b3357def7e01f574cf3\
84d2030a61b85aba375d94b1ea95a7ee7ad08eab6d5eafe76bd578f478b1308426d2d106\
0243120e000a26192c04acc68a467c9261930f359c6c2ed886ee07ee7df5a1e5f37eb35d\
b3b3d261043ef864f965a5aedfaf4d8011856207b7de32ba20332b3912574e97da385bf5\
0e3c025e1d8dc7db2e5cb469d26b8bf6b4368d047885170e7bd029cd2c197569df95003c\
b3e72cbb042a1860054858d0ec812b6cc06708193005b904d17882941a0976bf4e4925e3\
c6f6592839ec8282e6fefd8597acdc51dcd2b20230d903475ae89dcdd5a306b55d2c35ec\
7f1570511533dc4387071aabd66526dc7ce35eab798bade7937d7c1ae88ad916ce9ec303\
e31fcfc895774c2e7453335605cea15a6b1d6efbe4f495577ab4b4145c38d20701058334\
5c90bee7e6f13b533d62af30bc4d4e5029377dfabb8b27d6cb0c7f40bb884b0613e0185e\
98f16a3c787d9f236d9a256fa16f50703e61f812d7aaaada0e2f3f31eecbebc7f4f9f3ac\
255fddf8bd9f7f314d24a70514c7613a4135be4764d5eb7ffee983d06a9bd77b9a8d161b\
deabfdfecf9716f5d2de2c0388821537b238403300b661ba066cf282a90e41aa43bd4881\
e30515d71b8991703c484924e271b3cfe733d7f766d322501cd016fc607cb4786bcb4fbf\
dcf84786e3100b83e13100a1eb23767a795d2410b012a466893a1904a2a5f1dffd6cfcdf\
5213ad2fc28a87be3f77cf70d36708501c51322061c3701d900e4209075ac44fd9bc0a8e\
ebe8712387ae0a029b49049999d3672dda344efbd34da51c30045885f56597f75f6b59c6\
6ea27fbd2891a1ad40f9ec59979aa5c55edf35976f64a0fabcee3bddc167faaa76eee991\
c0f58667d0d0953628ef1cc17dcfdea325576ddb95d7813c891044d0201013981de4c8ca\
ba0963fa7e0e219b9494ae726538ae86ac58b5b58f61669372ec463f3d83940d275a15bb\
624cbf3900cabf09568a659aeef1dffca8d3a23b6e19f6e28a8d87265cf3a337a7f992d2\
8231c784178a077788ed7a6ffae3bf30195b8571062960d44eb96ee43bc74bcb33be58b9\
a36741852b62e07f54496601c10c1836c1939110d321336a9b0dd109cd4834231cf04a40\
783d1b771d9ab2ab389a056936147bd65e3087505a160b80a81d846ccce78c372c3e0998\
5608360c302978ec13cef7c6b75d74d5b8416f41abf89c859b47ec385a95eef126a121c4\
42e89e4991ee9d9322e43288ad064308e6d77111a55574cae44bd6b1d661476b915f5c39\
ecb5bf2ceb49560b2238005c6478a2f577de3aee53625dfdef50ad52b81dc3eb36f58fe7\
3473725ab6de5ced3a910b069d17c8cc9f35777872cbac9ab4ab277c5a0d59dff4210e91\
f4feac75639411f230088a5d80240001d231be744887cd4921ff52718eb3141ad2fb9759\
abaf38582d4364b9700435ee20068483e17d72f2faf46c33fbacc5f834f4d8a103ff1abc\
b2ff821d070b6e9e78c75fa6c960eba09215f0c66df4cea5cab75e7df8eda0415ba5f14d\
b64982b4527af9130f4dddf7f84fae6f116626c771bfb63775a3ef484a84d61c2afbfd75\
37bdda976408600da934ba754a3f9190183a117390f1a7573ee9a985af21638d006d2884\
5109f23034ab86ded8027400048210040d06db369ba80eff6452972f7ff3c8ad8fb0760e\
42981de62f593fc2f4052541c32042b4b6c6fdf1e3d7fd75f2d83e7f334e3bb2d900386e\
08d6398aecfd4248c5ccc91b761ebbaad609241842818504510c970fc8389e1ef26e2771\
614747cf7e244199ead8de316af59aacd08d930f18b9b9eb53c8d217043aad948cecdd71\
89f8fb9c9695775f79222d29f5587213fa59d9b62828a919f4eedfd676728db486e40e6a\
9012a40d986c471fbaf7aa4f3d84b2a603d18a6c5775fb6cc6aa8bc94c94422bd8d284a1\
754358265aa7eebf6bea76034ee159076e112bad8b0f15568e9e7cc753b7b89e36414d04\
d331d131b5bce29de9bff9637a50be270d116f3ad4271480c2c6d759222d518a6babc39b\
2fbc6f784d13a46db0e9076231e7ae69572df65974f85859fd0d6bb75775636f06e97818\
1280c1a69b2de375ec6a26211ab0212280510530c367016949216ed32177ef7d77dcf1f7\
7eedd36793c3c75d2f899d47abc7fdf58bc2ce32900cc3890064a24bb6593261649f0f14\
45567b44f09c6a919d18851d6efd8797e7f5d69e90f012230e034adbf169378d9fe521fa\
b71008cd3a39fcfe8c8b6215e532e3ea094b34acfcf356cbffd8f922b5fae0f6eb0d551e\
481e3c7c0dc0f94d87598dc4af761cbdb1ccf1a7b0251acd6d056af4d0f56e975adc2227\
750b54dc6d1a74646ddf7f7cf2f243f5b92453203902080634418090e237abba75e9f8b1\
8e97d59c3df4524f6571f7a29bee7bf90785b5ed93c9530fa9359c8851ffeafb0fbdd83c\
1b2f79855573d6ace4f3388fe4421b0e9078f458d9a4755b2a3a44cd6c48230228076d03\
5439a44fbb599a5d7ae39db957d4c8e4006901832424887f78dbb0adbfbc63d06f1da5eb\
049d1e90a74657b994920d531c37102fa4c61356cc9c30f3f3f97dc9087a344b8008ca75\
f88e5b46e4257aa91cf027fe23ed881920a7a1db8673b71a148366dab3fde0555b0e95b7\
94fe1c901305995e5cdc2ea17e70af365fb0ae75348789609d8cf750e30951e31f1dabb0\
20c3fd274712dad76edcd43b98991df3b66db33986f3aff670ea7f3fc1fd6471f358fbe6\
352d478d9d0bd059f533bb71aa89a9b6bf9f3ea797e515220e1b401c860ec055041255ee\
9db78e5be1f19a7b49584dee4aa539f3cf6f2fee6f4a61da8261c382e546e11a1a8864f0\
0fa6f5dadf26cdbb9ea8d9594536492b61c68ccdb76dca8b77235f840ce5077314775e95\
70e8a20ee91f1251cd3777a7ebdb73acf4e2ba9a580218faf4fa23e2f4cc30cb6a76a2a6\
7eec2f7ef36effa8e5f799ecc08509a23af78e298397a624787654d6c77bcc5ab0aba7a1\
43e41a6560ca810c17456f1adfe97dbfd75a7c21753f5caea31a8d819fcedd7389617a05\
380a3609763c8a666d5aa6acdb75f44fdc60bf344045a356384e0111acb8e96909ad29dd\
909f74e89abb60cefabd979137cd043bb00d40720c5eafc72aadac1ba46c370964e3e401\
2dcdec29aaac1b6b6b27d7102610b7ab7b776ffe84e2faed92ce2e55b5cba6aad87f49f2\
974b93caeebe7baf37a7ed5988de3f019dad59c677ef1caadfff20477effb62264a6ed6b\
b21329ac43870a2fdb76a4ac8523d3e18106a8a148b3171acdfcd1fa31c3fbcc71d07482\
80a3950c87ed616b561676379c24d2d282806a30dca505db2eb6c78dbc767e8ca3954d0f\
dd6cbf68eeca111e8f949a6d0848c4eb22eea8d16397dae082b3527cc82e77fff4cd3fad\
3fe2b602f3196972a7241d30405a09c1ca43bea0884b17a05a08d8dc3b858f4ebbf5d237\
35e9f8b2cd79530f559b39b637dc707ec38d6250dfa4fd39cd52e75f08e00020062bf1b3\
39eb6edc53c2191ebf021143bb1a3ebf876e79e0bd4e4a59a727ac0ad22057012e814ca9\
a215f18f5e98b63eb76b6ee2c2a55b422c12c9450cd25050ae07cb763ac11ea3fef82b43\
6b05e1424b029380ab98c2303d4cae30ed2846f6483afcf7f71e9192cc2605461c715fd9\
dbb37ac7c311993ee9f255004e5c10eb6d882a20357c70db9420b4df1d34784dad42c139\
6e497bef9335e35d99e531c80f0736b490906c41a8080f1939685b62d0b7c97b8eda171a\
c2ffce87cb261e576e027bc2501406910dc58088a762d4c08c83dd3b359be369a29a779c\
d95cb4f9d065333695678a601ab4d0900c5cd425583476789fd982cb63df4c81773c6bbf\
3a7ac5ea9df5ed8381a0f50f27f5c9e70eb95f838e0850128809056682e424508cb885b7\
f6c83bafdef5683020d6d80ef57efbed796360060d200c7243309cb0fac9f76fdc99609c\
3be07dd62d04abe5a22f370c3502a9d26938cbdde01c07c3909a7c74bab65304414c42c2\
80868b8bdaca8ac997f7fcb28e613a516918ae1f4a0ab08e8229066512b996e1650858ae\
81935c5e18048fd6b0cd24c030dc7b7f7ce3971e8fb1ff9c09e5dae92457aeee5dddba85\
ddb25dab4d3aac2ea8968bd198139f55fcc1c76ddd96edaadb4e9834332ecf1e6b751ca6\
c3c7cbfb7cf8c9ea0e8699c33eb71cb621e09086102e126475fd8fee1a3dcb223a679907\
276e779c3567611f492d885d62e32403230d112f747f70c7ad33ac731453b6809c790b57\
8df748cba3d961661bcab1f50d570d5d6a01db4c91cedfdc5d46f2978b578c3203c28c48\
8bbf29e5ccd352b5853660da1698ebe0c3c1f8d05e29f9fff5879f3e969b963c4b88b82a\
2caae9f1d5b6a3696426b05759103a86e60935a53d3b647fc0fac2eab468b6e5fa5dc72e\
fdf4cbbde9d29bc92475e323862408020e11e2c6e96144018250a2c19daf637ad4c44b57\
03d89540103f9c76e9ae1ffe62460be14ff63a7600a004b0b0c1640364c3161231438098\
2189a1b40ba1ebd029f144d1c02e597f83e626dd5cda55161fdf3b89366c699678f7b507\
8dac665b0419fac2249d06c5f6ed1a1c99312fc777df8ff62121659fb709d66a188e515a\
59e1bd76cae04d4a788c04550bc95e3892a11521c347473aa404670a1276d3e9368ec82b\
8da4f6ea3f6077cf417c44020dbe3d8886a036e5bafdbab55fc78c2659a7abc1321a3d72\
c7155dc38ed060e982a0f5b8b14396c7e2eed9175cc1eddbbbebdeeffb92e2e54555a8ad\
89c2d56e03e9866838e2d820412099880d369312c9eed57d9073d990cecbda67a7adf59b\
e6162129ee2ad7f7d5d6bcacab265ebc3a2662c2600f981486f41fbc2b2525b0415e604d\
1082897ddb0e456f9f38708d36401629308bc67109100302fab410a2a60642a2d8820337\
7efd55c33f23bbba461b164f99d0ff914e5ddb6efc7cd6ba1107f30aa5edda0d648f7d20\
f67f3d578286d72464672421a7794b0c1bd4724b72c0b3d5904d3b8e89c8ca9f31af1d55\
96c99c2bafd8cb308a2f54aa1333876afff6fe33f937dd7c47d65f3e9a9e7ad3950f91f0\
c59b4e4bd75e16e43999b04467923ec55132ce5d568a157b40f036950ba61951299ab689\
b4664184c099d63f33e2429c9d458535931f083235dcc31a880820a0012d1ae7e2023506\
90e8822a0c6da540c4c5c9880fc3311ad3535d974948f8896138a421214e0ec45540c4f8\
16856858b3b7312f1fdf8c513741c600c8462fa006c7cc53367b8cd9f2003eddf83d7146\
7f8d5950304fbfee32eb88104d67893876acefe109d77ca0f7ed496bbf7ef5dd949afdb9\
615d60593766ee7460d2e45d07db362f73ab2b27b0d6ffc71f1df7ffda393686153fbaf7\
f787d3b3a3071fb967a3e658eeb7ca4c714a2bbac8594bb2b2875e1ce5c4e43cfa8e3f28\
e4ffb5f38816d8ff3d82c3869d68cf9edbc72cab3072ae9b7450836abe55ccd64c4d3910\
1dd0a322b2736f62a03e9aad1d678f68222df99488443ac84d23669349055d61d6084812\
5a2534e477b950e4406a0f40566dada4c30931b7a5b6504d90099add6a01990a38490e1b\
4763c49110cb4e241c835901da62578a3c0ddb6f699d09485642574a57045c091244f560\
c36768ad355190e002dab5c31ecf31bf43b9440c0d01c08d0aad929908440c050d0903ac\
059454906cb98ed495a6124c308e908e596c733b27e09698ae37039262ac3989c8f5b206\
48a326ecf11ef03b4e22d96e3bed3104407531294a7c2ad69a1a93771bb2a4e5d71933cc\
0408866223526f7041625cb67204151a52fb48e92c10c1150e0c65017000826b9371dc80\
4c143a96dae08cb5a0a588571ab42f59bba9c2e6e62c051c696b4b590244704494058baa\
2aa16a9463e790763d9a34040b6821942b54a5c148134e9c9801b242e55a18870cf1cf7d\
6c11a7c632aaca87177c3ab36f698b9c9aacb44e9f0a98dfaab0a5014905d9b74e5d5373\
ef5d534b9e78f2d16e4f3f62b1d687d17084ece4f900c5601587a8f71264e1862dd795ef\
da71591a640a579774b0b3727655161458cdc34ea7c8d69d5c966852eac5bd492fde4035\
6c14f47ae785e99bee7f645acf9fde7170e7ecc5816eb74d59bffdb9e993325bb56891d6\
a3df7bbe611d966dbcf2477f6e73d52529558b56d6e6fb0247073df38b970b172ebcc49e\
b9e47a5fa78e084d185558f5da47c9be8bbb52b07da7aa5df316053bb4eda20a962e5526\
3b895662c06df7a72766aff9d933437bdd3a39f18bbf7fec5e3276c291132fbdd285b353\
ea02ae0cb9d9c9bebafc225bc4a92ad0b75346d9c69db1eebf7de4d0e60f66ece8f3f4ef\
1f11c5e5a316ddfb93df8c7bf39955eb9e9adea3c7908b7d5f2d9e93d1ccef0fc40b0b6d\
959953dcf585277f58f8de47936a172c992adbe7ba15c55535fd7ff98bad7b9e7ffe52d4\
5679eb49d767376b5e5cb863576e76eb561515753519a45dbbfdb0614efee235aacb47cf\
7ef9d594c746747ae6d11764417efb6d7ffcd3d4a849e873e5446bc78c591c4a4c2eaf22\
6df67efcf1c52bffebe51e2d353a464fe43b99bd2e8e6cae2ead1efbdcef7e94f7ce3b3f\
2a9ff56557c576a8fd8d579bfb3f995b1f27ed6d37e90aabbee8c4a1e42baf58bdeaa5f7\
26b7ab89870ab95ab5edd02bbc75df0eefc53fbef7c491054b43ceba4d56bdc7136bf7c8\
2fff9a34b0f71f95d6a6000c343c80ee1f457b0008a21033b7e1d2fcee07eefff98f826b\
3625b6fedb2bf3cc9cdcd544dfae44afc1406dd2946bde3abe61758ff43ffceea2c28d4b\
df8df51970c2749da3ccac982041e4c64015ed1e7dea299de6ab49dcb6ebea92958bfa55\
1e2fb4dbbd367dc7b1effdfc22cfb0364e5e3da3ff4b4f6e3bfa939f5c1c5cf195d5eeee\
6958f3c79792ea376efc61abf440fbdaadbb7a5987f36246c05f947c20bf63c4157e8cbb\
bcdc3452b8465829b16a3bb9d94f6e9fd5b6efb05748788f6765b6bea266dac4b4ea790b\
44ce2befa5474c50f9dedd082cdfd0c2f0c6a9aac871fbfdf5cfb3b7def88301ba7976f3\
ba599fdfd9a27fff13659f7e9cd6a3bc54260f1eb4eec4f40fd2bbbef6e74ff31e9f7e6b\
5aaf0eb9d1e0963d2dafbc6e4dfd7fbd3acdbb7993745e79372bb95dee318f50a9c5f3e7\
4ceb9f13ec11dbbfae53eee62dc689e37b8c4c8f8fec6345d18eefff69f9ae69bf6d49b6\
95963f67d1e0d43eadb252fb0cda5e37f74b4fe18f1fbeb2ddddf7d71d7be1b7c919632f\
55cdeffec1aa92c9770f6ff1fc73b3dc01431f8c4e19679b696d23eeb29f763df280d522\
b87e9bf6a42418550b76875afcfcf6b2d88663a1d88e0dd929413f07a6debc2abae92b7f\
c58ab9b7b56a99e93117af97e15ecd6a42c34756b65f3c3d05902972f6c29c3e7f7beba3\
bd37fcf036f7c0f1dcce375f5fb2ffc5f7fd74e078c8bb71795afeb6f5bd7b2664f8cabf\
da45a11bc7d479264cdada72fc9b236369691939636f5c54134046aba1171ff677edfd97\
e889fc1145bffdc354c707bf271caf3e35ff5db249b64fa472b8aa6fc2a215413a51e6a9\
79eae9359dc6ddf07b68f5ad9f536b0822edc6f586ee4f3ffb50e18001bfac7ae1cfbd03\
cba77760c4da6b1098088a357cc34794c944df1b0af1da92addba9cb8f6f8becfdd993d2\
939bb9dbd6911e5d7e7afbee3d931fee15debd2fd51f735cabb642942d5c1aed77c565fe\
a217df6a9be0a0c65be6249497957a63870f0d8f24494b961c873ab06f6cbca674586ab8\
c25f7f7cbfebedd2ac23f6eebcdce8db756ec9e64d5dd206b656fbaac3615fc716719599\
94e8acd8188bf5ec13cbd4b5499115db85dab3a98f2b116fdeafdffa927b7ede27e3b357\
124b9e5e19f711bcf18283fd2ba25536a2f5a264cddac4a4f6e98e25c9aafe62650f2318\
54faee6b22b5bffe98d257bcaee245277ae63df77adfb436a95aafdb61d9b9e9b6c7866b\
27261ab5b53554bd6c4d336e9f7a00a23ed2f907d7657169953ef6e1ecda0e53ae50b1a3\
87636eef9423e98f4f9d78e2a9f713d4a4ab5a79fdbe6afb787e33d526cdd3a647fb40f9\
8e5d3ae7c5a78ec5a3ae1f3b2b2a8d745f716d49f994a4fc146ff9d28d49910e49aac580\
be70fda637a5756641d5ed0fa9f6073eafdcfafeac94cefd47ca70697e80fc5672f1a6f5\
f7c68f1cce75f6ee1d110ddac9b14307a3473a2497a53f75d7e1c32fbcd32d69e2189548\
94e16c3b6e96e5248a2e2d5a1bf143fb3aa6fdf256bdefb1ff0af7fbc5cfe7d5bc7a605c\
c64ddf9b1d0f70f8c4ac2577cae9d32f27b8e2d4f360d4c86c15012a2d148b5f72f9e18c\
7b6e9b9f3c68c8c710dedd647dfb47a27e6d7046b59206896c595132285a7c22d5a60632\
cd8de122c3b4a2de966d17c052b527e67e39b2d9b09e5cb86e4bb7ece1a337e77fb17260\
cec8de1beb97ad1d5baf5cca68d7ea78e5e192b6a1a1dd0fd8eb765f16b16847ee80be5b\
4a966eeca1fc6826aac25dd3dab55e5b71a23cd951941a149e80ebd8f5de1cdfdecae2f2\
c19e60dafcac61033e2b9db7fc87fe44335ae33a8713d3526bc9d52d2b4b8a8bd39ab7b0\
c386d3c32ac8ef14a9ae4b4968d7f5ef3a39b5285c7064904f06a5bf59d2f1da48559227\
ec8d95d716d9e91d3bec2fdcb47354b3dc8caae282a2e192ccb2ac36cd0f6bc905d5fb0a\
6259430615d454846beaab0a0765b6cef6d7ee3ed85ac238ea4bc8aa8b52d81f2e2aefad\
c88de50cec3e4b85b20e952d58f55b47445546cf2e73516a078c16c170c5d18a542e2eb8\
3ed9f21fe6e19dd7d7ed3c5693929be5d6edda7d9d637394fcc9eb137bb4de420123a97c\
fdee40cec8e19b2a96af99585f53d331949d51e4ca6846203f9c51979cb434d0a945457c\
f3eecec983fa1c2b5fb7ed2aa268c84cceda244b4a07c6fd89053e55a722b5aa53a853e6\
dae2f2ca9236978d9e0f87eb8fcf5f35acc5958377d7eecfebca65551965f5651d658c9d\
94ac169509cdbc76d9f64346cae8d1338eae5cd6a3cdf0112b84f094c64a0bc6a8d2921c\
6d9a7466e915a90136084672a8c697d562631c288a02b1e47fb136f1ff0750686fad32ef\
bbc50000000049454e44ae426082\
')


def _subkey(key):
    if key in _KEYSUBS:
        key = _KEYSUBS[key]
    return key


def _mkopt(parent,
           prompt,
           units,
           row,
           validator,
           update,
           help=None,
           helptext=''):
    prompt = ttk.Label(parent, text=prompt)
    prompt.grid(column=0, row=row, sticky=(E, ))
    svar = StringVar()
    ent = ttk.Entry(parent,
                    textvariable=svar,
                    width=6,
                    justify='right',
                    validate='key',
                    validatecommand=validator)
    ent.grid(column=1, row=row, sticky=(
        E,
        W,
    ))
    lbl = ttk.Label(parent, text=units)
    lbl.grid(column=2, row=row, sticky=(W, ), columnspan=2)
    ent.bind('<FocusOut>', update, add='+')
    if help is not None and helptext:
        prompt.bind('<Enter>',
                    lambda event, text=helptext: help(text),
                    add='+')
        ent.bind('<Enter>', lambda event, text=helptext: help(text), add='+')
        lbl.bind('<Enter>', lambda event, text=helptext: help(text), add='+')
    return svar


class SerialConsole(threading.Thread):
    """Serial console command/response wrapper"""

    # UI-safe functions

    def get_event(self):
        """Return next available event from response queue or None"""
        m = None
        try:
            m = self._equeue.get_nowait()
            self._equeue.task_done()
        except queue.Empty:
            pass
        return m

    def connected(self):
        """Return true if device is considered connected"""
        return self._portdev is not None and self.cfg is not None

    def update(self, cfg):
        """Update all keys in cfg on attached device"""
        self._cqueue.put_nowait(('_update', cfg))
        if len(cfg) > 1:
            self._cqueue.put_nowait(('_message', 'Device updated'))

    def down(self, data=None):
        """Request down trigger"""
        self._cqueue.put_nowait(('_down', data))

    def up(self, data=None):
        """Request up trigger"""
        self._cqueue.put_nowait(('_up', data))

    def exit(self, msg=None):
        """Request thread termination"""
        self._running = False
        self._cqueue.put_nowait(('_exit', msg))

    def setport(self, device=None):
        """Request new device address"""
        self._flush()
        self._cqueue.put_nowait(('_port', device))

    def status(self, data=None):
        """Request update of device status"""
        self._sreq += 1
        self._cqueue.put_nowait(('_status', data))

    def __init__(self):
        threading.Thread.__init__(self, daemon=True)
        self._sreq = 0
        self._portdev = None
        self.portdev = None
        self._cqueue = queue.Queue()
        self._equeue = queue.Queue()
        self._running = False
        self.cb = self._defcallback
        self.cfg = None

    # Thread-private functions

    def run(self):
        """Thread main loop, called by object.start()"""
        self._running = True
        while self._running:
            try:
                if self.connected():
                    if self._cqueue.qsize() != 0:
                        c = self._cqueue.get()
                    else:
                        self._readresponse()
                        c = self._cqueue.get_nowait()
                else:
                    c = self._cqueue.get()
                self._cqueue.task_done()
                self._proccmd(c)
            except queue.Empty:
                pass
            except Exception as e:
                _log.error('console %s: %s', e.__class__.__name__, e)
                self._close()

    def _send(self, buf):
        if self._portdev is not None:
            _log.debug('SEND: %r', buf)
            return self._portdev.write(buf)

    def _recv(self, len):
        rb = b''
        if self._portdev is not None:
            while not rb.endswith(b'\r\n'):
                nb = self._portdev.read(len)
                if nb == b'':
                    # timeout
                    break
                rb = rb + nb
            if rb:
                _log.debug('RECV: %r', rb)
        return rb

    def _update(self, cfg):
        for k in cfg:
            cmd = _CFGKEYS[k] + str(cfg[k]) + '\r\n'
            self._send(cmd.encode('ascii', 'ignore'))
            self._readresponse()

    def _status(self, data=None):
        self._send(b's')
        self._readresponse()
        if self._sreq != 0:
            _log.debug('No response to status request, closing device')
            self._close()

    def _setvalue(self, key, value):
        if self.cfg is None:
            self.cfg = {}
        if key == 'Firmware':
            self.cfg[key] = value
            self._equeue.put(('firmware', value))
        else:
            try:
                v = int(value)
                self.cfg[key] = v
                self._equeue.put(('set', key, v))
            except Exception as e:
                pass

    def _message(self, data=None):
        if data:
            self._equeue.put(('message', data))
            self.cb()

    def _readresponse(self, data=None):
        docb = False
        rb = self._recv(_READLEN)
        rv = rb.decode('ascii', 'ignore').strip().split('\n')
        for line in rv:
            l = line.strip()
            if l.startswith('State:'):
                self._sreq = 0
                statmsg = l.split(': ', maxsplit=1)[1].strip()
                self._equeue.put((
                    'status',
                    statmsg,
                ))
                docb = True
            elif ':' in l:
                if l.startswith('Trigger:'):
                    self._equeue.put(('message', l))
                    docb = True
            elif '=' in l:
                lv = l.split(' = ', maxsplit=1)
                if len(lv) == 2:
                    key = _subkey(lv[0].strip())
                    self._setvalue(key, lv[1].strip())
                    docb = True
                else:
                    _log.debug('Ignored unexpected response %r', l)
            elif '?' in l:
                pass
            else:
                if l:
                    self._equeue.put(('message', l))
                    docb = True

        if docb:
            self.cb()

    def _readstatus(self):
        rb = self._recv(_READLEN)
        ret = None
        if rb:
            m = rb.decode('ascii', 'ignore').strip()
            if m.startswith('State:'):
                ret = m.split(': ', maxsplit=1)[1].strip()
        return ret

    def _down(self, data=None):
        if self.connected():
            self._send(b'd')
            self._readresponse()

    def _up(self, data=None):
        if self.connected():
            self._send(b'u')
            self._readresponse()

    def _serialopen(self):
        if self._portdev is not None:
            _log.debug('Serial port already open')
            return True

        if self.portdev is not None:
            self._portdev = Serial(port=self.portdev,
                                   baudrate=_BAUDRATE,
                                   rtscts=False,
                                   timeout=_SERPOLL)
        return self._portdev is not None

    def _getvalues(self):
        self._send(b'v')
        self._readresponse()

    def _port(self, port):
        if self.connected():
            self._close()
        self.portdev = port
        if self._serialopen():
            self._status()
            self.cfg = {}
            self._getvalues()
            if len(self.cfg) > 0:
                self._equeue.put((
                    'connect',
                    None,
                ))
                self.cb()

    def _exit(self, msg):
        self._close()
        self._flush()
        self._running = False

    def _close(self):
        if self._portdev is not None:
            self.cfg = None
            self._portdev.close()
            self._portdev = None
            self._equeue.put((
                'disconnect',
                None,
            ))
            self.cb()

    def _flush(self):
        try:
            while True:
                self._cqueue.get_nowait()
                self._cqueue.task_done()
        except queue.Empty:
            pass

    def _proccmd(self, cmd):
        """Process a command tuple from the queue."""
        method = getattr(self, cmd[0], None)
        if method is not None:
            _log.debug('Serial command: %r', cmd)
            method(cmd[1])
        else:
            _log.error('Unknown serial command: %r', cmd)

    def _defcallback(self, evt=None):
        pass


class HHConfig:
    """TK configuration utility for Hay Hoist"""

    def getports(self):
        """Update the list of available comports"""
        self._ioports = []
        self._ionames = []
        devs = {}
        try:
            from serial.tools.list_ports import comports
            for port in comports():
                devs[port.device] = str(port)
        except Exception:
            pass
        for cp in sorted(devs):
            self._ioports.append(cp)
            self._ionames.append(devs[cp])

    def check_cent(self, newval, op):
        """Validate text entry for a time value in hundredths"""
        ret = False
        if newval:
            try:
                v = round(float(newval) * 100)
                if v >= 0 and v < 65536:
                    ret = True
            except Exception:
                pass
            if not ret:
                self.logvar.set('Invalid time entry')
        else:
            ret = True
        return ret

    def check_int(self, newval, op):
        """Verify text entry for int value"""
        ret = False
        if newval:
            try:
                v = int(newval)
                if v >= 0 and v < 65536:
                    ret = True
            except Exception:
                pass
            if not ret:
                self.logvar.set('Invalid entry')
        else:
            ret = True
        return ret

    def connect(self, data=None):
        """Handle device connection event"""
        # initiate transfer of ui-entered values to new device
        self.devval = {}
        if self.devio.connected():
            self.logvar.set('Device connected')
            for k in _CFGKEYS:
                self.devval[k] = None
                if k in self.uval and self.uval[k] is not None:
                    if k in self.devio.cfg and self.devio.cfg[k] == self.uval[
                            k]:
                        self.devval[k] = self.uval[k]
                else:
                    if k in self.devio.cfg and self.devio.cfg[k] is not None:
                        self.devval[k] = self.devio.cfg[k]
            self.dbut.state(['!disabled'])
            self.ubut.state(['!disabled'])
            self.uiupdate()

    def disconnect(self):
        """Handle device disconnection event"""
        if not self.devio.connected():
            if self.fwval.get():
                self.logvar.set('Device disconnected')
            self.statvar.set('[Not Connected]')
            self.devval = {}
            for k in _CFGKEYS:
                self.devval[k] = None
            self.fwval.set('')
            self.dbut.state(['disabled'])
            self.ubut.state(['disabled'])

    def devevent(self, data=None):
        """Extract and handle any pending events from the attached device"""
        while True:
            evt = self.devio.get_event()
            if evt is None:
                break

            _log.debug('Serial event: %r', evt)
            if evt[0] == 'status':
                self.statvar.set(evt[1])
                _log.debug('Received status: %s', evt[1])
            elif evt[0] == 'set':
                key = evt[1]
                val = evt[2]
                if key in _CFGKEYS:
                    self.devval[key] = val
                    self.logvar.set('Updated option ' + key)
                else:
                    _log.debug('Ignored config key: %r', key)
            elif evt[0] == 'firmware':
                self.fwval.set(evt[1])
            elif evt[0] == 'connect':
                self.connect()
            elif evt[0] == 'disconnect':
                self.disconnect()
            elif evt[0] == 'message':
                self.logvar.set(evt[1])
            else:
                _log.warning('Unknown serial event: %r', evt)

    def devcallback(self, data=None):
        """Trigger an event in tk main loop"""
        self.window.event_generate('<<SerialDevEvent>>')

    def devpoll(self):
        """Request update from attached device / reinit connection"""
        try:
            if self.devio.connected():
                self.devio.status()
            else:
                # not connected, begin a re-connnect sequence
                self.disconnect()
                oldport = None
                selid = self.portsel.current()
                if selid >= 0 and selid < len(self._ioports):
                    oldport = self._ioports[selid]

                oldports = set(self._ioports)
                self.getports()
                newports = set(self._ioports)
                if oldports != newports:
                    _log.info('Serial port devices updated')

                self.portsel.selection_clear()
                self.portsel['values'] = self._ionames
                if oldport is not None and oldport in self._ioports:
                    newsel = self._ioports.index(oldport)
                    self.portsel.current(newsel)
                else:
                    if self._ionames:
                        self.portsel.current(0)
                    else:
                        self.portsel.set('')
                self.portchange(None)

        except Exception as e:
            self.logvar.set('Error: %s' % (e.__class__.__name__, ))
            _log.error('devpoll %s: %s', e.__class__.__name__, e)
        finally:
            self.window.after(_DEVPOLL, self.devpoll)

    def xfertimeval(self, k):
        """Reformat time value for display in user interface"""
        v = None
        fv = None
        nv = self.uival[k].get()
        if nv:
            try:
                t = max(round(float(nv) * 100), 1)
                if t > 0 and t < 65536:
                    v = t
                    fv = '%0.2f' % (v / 100.0, )
            except Exception:
                pass
        else:
            if k in self.devval and self.devval[k] is not None:
                v = self.devval[k]
                fv = '%0.2f' % (v / 100.0, )

        self.uval[k] = v
        if fv is not None and fv != nv:
            self.uival[k].set(fv)

    def xferintval(self, k):
        """Reformat integer value for display in user interface"""
        v = None
        fv = None
        nv = self.uival[k].get()
        if nv:
            try:
                t = int(nv)
                if t >= 0 and t < 65536:
                    v = t
                    fv = '%d' % (v, )
            except Exception:
                pass
        else:
            if self.devval[k] is not None:
                v = self.devval[k]
                fv = '%d' % (v, )

        self.uval[k] = v
        if fv is not None and fv != nv:
            self.uival[k].set(fv)

    def uiupdate(self, data=None):
        """Check for required updates and send to attached device"""
        for k in _TIMEKEYS:
            self.xfertimeval(k)
        for k in _INTKEYS:
            self.xferintval(k)

        # if connected, update device
        if self.devio.connected():
            cfg = {}
            for k in self.devval:
                if k in self.uval and self.uval[k] is not None:
                    if self.uval[k] != self.devval[k]:
                        cfg[k] = self.uval[k]
            if cfg:
                _log.debug('Sending %d updated values to device', len(cfg))
                self.logvar.set('Updating device...')
                self.devio.update(cfg)

    def portchange(self, data):
        """Handle change of selected serial port"""
        selid = self.portsel.current()
        if selid is not None:
            if self._ioports and selid >= 0 and selid < len(self._ioports):
                self.devio.setport(self._ioports[selid])
        self.portsel.selection_clear()

    def triggerdown(self, data=None):
        """Request down trigger"""
        self.devio.down()

    def triggerup(self, data=None):
        """Request up trigger"""
        self.devio.up()

    def loadvalues(self, cfg):
        """Update each value in cfg to device and ui"""
        doupdate = False
        for key in cfg:
            k = _subkey(key)
            if k in _TIMEKEYS:
                try:
                    self.uival[k].set('%0.2f' % (cfg[key] / 100.0, ))
                    doupdate = True
                except Exception as e:
                    _log.error('%s loading time key %r: %s',
                               e.__class__.__name__, k, e)
            elif k in _INTKEYS:
                try:
                    self.uival[k].set('%d' % (cfg[key], ))
                    doupdate = True
                except Exception as e:
                    _log.error('%s loading int key %r: %s',
                               e.__class__.__name__, k, e)
            else:
                _log.debug('Ignored invalid config key %r', k)
        if doupdate:
            self.uiupdate()

    def flatconfig(self):
        """Return a flattened config for the current values"""
        cfg = {}
        for k in self.uval:
            if self.uval[k] is not None:
                cfg[k] = self.uval[k]
        return cfg

    def savefile(self):
        """Choose file and save current values"""
        filename = filedialog.asksaveasfilename(initialfile='hhconfig.json')
        if filename:
            try:
                cfg = self.flatconfig()
                with open(filename, 'w') as f:
                    json.dump(cfg, f, indent=1)
                self.logvar.set('Saved config to file')
            except Exception as e:
                _log.error('savefile %s: %s', e.__class__.__name__, e)
                self.logvar.set('Save config: %s' % (e.__class__.__name__, ))

    def loadfile(self):
        """Choose file and load values, update device if connected"""
        filename = filedialog.askopenfilename()
        if filename:
            try:
                cfg = None
                with open(filename) as f:
                    cfg = json.load(f)
                self.logvar.set('Load config from file')
                if cfg is not None and isinstance(cfg, dict):
                    self.loadvalues(cfg)
                else:
                    self.logvar.set('Ignored invalid config')
            except Exception as e:
                _log.error('loadfile %s: %s', e.__class__.__name__, e)
                self.logvar.set('Load config: %s' % (e.__class__.__name__, ))

    def setHelp(self, text):
        """Replace help text area contents"""
        self.help['state'] = 'normal'
        self.help.replace('1.0', 'end', text)
        self.help['state'] = 'disabled'

    def __init__(self, window=None, devio=None):
        self.devio = devio
        self.devio.cb = self.devcallback
        window.title('Hay Hoist Config')
        row = 0
        frame = ttk.Frame(window, padding="0 0 0 0")
        frame.grid(column=0, row=row, sticky=(
            E,
            S,
            W,
            N,
        ))
        frame.columnconfigure(2, weight=1)
        window.columnconfigure(0, weight=1)
        window.rowconfigure(0, weight=1)

        # header block / status
        self._logo = PhotoImage(data=_LOGODATA)
        hdr = ttk.Label(frame, text='Hay Hoist', background='White')
        hdr['image'] = self._logo
        hdr.grid(column=0, row=row, columnspan=4, sticky=(
            E,
            W,
        ))
        hdr.bind('<Enter>',
                 lambda event, text=_HELP_TOOL: self.setHelp(text),
                 add='+')
        row += 1

        #ttk.Separator(frame, orient=HORIZONTAL).grid(column=0,
        #row=row,
        #columnspan=4,
        #sticky=(
        #E,
        #W,
        #))
        #row += 1

        # Status indicator
        ttk.Label(frame, text="Status:").grid(column=0, row=row, sticky=(E, ))
        self.statvar = StringVar(value='[Not Connected]')
        statlbl = ttk.Label(frame,
                            textvariable=self.statvar,
                            font='TkHeadingFont')
        statlbl.grid(column=1, row=row, sticky=(
            E,
            W,
        ), columnspan=3)
        statlbl.bind('<Enter>',
                     lambda event, text=_HELP_STAT: self.setHelp(text),
                     add='+')
        row += 1

        # io port setting
        self._ioports = []
        self._ionames = []
        self.getports()
        ttk.Label(frame, text="Port:").grid(column=0, row=row, sticky=(E, ))
        self.portsel = ttk.Combobox(frame)
        self.portsel['values'] = self._ionames
        self.portsel.state(['readonly'])
        self.portsel.bind('<<ComboboxSelected>>', self.portchange)
        if self._ionames:
            self.portsel.current(0)
        self.portsel.grid(column=1, row=row, sticky=(
            E,
            W,
        ), columnspan=3)
        self.portsel.bind('<Enter>',
                          lambda event, text=_HELP_PORT: self.setHelp(text),
                          add='+')
        row += 1

        # device values
        self.devval = {}
        self.uval = {}
        for k in _CFGKEYS:
            self.devval[k] = None
            self.uval[k] = None

        # validators
        check_cent_wrapper = (window.register(self.check_cent), '%P', '%V')
        check_int_wrapper = (window.register(self.check_int), '%P', '%V')

        # config options
        self.uival = {}
        self.uival['H-P1'] = _mkopt(frame, "H-P1:", "seconds", row,
                                    check_cent_wrapper, self.uiupdate,
                                    self.setHelp, _HELP_HP1)
        row += 1
        self.uival['P1-P2'] = _mkopt(frame, "P1-P2:", "seconds", row,
                                     check_cent_wrapper, self.uiupdate,
                                     self.setHelp, _HELP_P1P2)
        row += 1
        self.uival['Man'] = _mkopt(frame, "Man:", "seconds", row,
                                   check_cent_wrapper, self.uiupdate,
                                   self.setHelp, _HELP_MAN)
        row += 1
        self.uival['H'] = _mkopt(frame, "Home:", "seconds", row,
                                 check_cent_wrapper, self.uiupdate,
                                 self.setHelp, _HELP_HOME)
        row += 1
        self.uival['Feed'] = _mkopt(frame, "Feed:", "minutes", row,
                                    check_int_wrapper, self.uiupdate,
                                    self.setHelp, _HELP_FEED)
        row += 1
        self.uival['Feeds/week'] = _mkopt(frame, "Feeds/week:", "(max 5000)",
                                          row, check_int_wrapper,
                                          self.uiupdate, self.setHelp,
                                          _HELP_FEEDWEEK)
        row += 1

        # firmware version label
        ttk.Label(frame, text='Firmware:').grid(column=0,
                                                row=row,
                                                sticky=(E, ))
        self.fwval = StringVar()
        fwlbl = ttk.Label(frame, textvariable=self.fwval)
        fwlbl.grid(column=1, row=row, sticky=(W, ), columnspan=3)
        fwlbl.bind('<Enter>',
                   lambda event, text=_HELP_FIRMWARE: self.setHelp(text),
                   add='+')
        row += 1

        # tool version
        ttk.Label(frame, text="Tool Version:").grid(column=0,
                                                    row=row,
                                                    sticky=(E, ))
        lbl = ttk.Label(frame, text=_VERSION)
        lbl.grid(column=1, row=row, sticky=(
            E,
            W,
        ), columnspan=3)
        lbl.bind('<Enter>',
                 lambda event, text=_HELP_TOOL: self.setHelp(text),
                 add='+')
        row += 1

        # help text area
        obg = frame._root().cget('bg')
        self.help = Text(frame,
                         width=40,
                         height=3,
                         padx=6,
                         pady=3,
                         bg=obg,
                         font='TkTooltipFont',
                         wrap="word",
                         state="disabled")
        self.help.grid(column=0, row=row, sticky=(
            N,
            S,
            E,
            W,
        ), columnspan=4)
        frame.rowconfigure(row, weight=1)
        row += 1

        # action buttons
        aframe = ttk.Frame(frame)
        aframe.grid(column=0, row=row, sticky=(
            E,
            W,
            S,
        ), columnspan=4)
        aframe.columnconfigure(0, weight=1)
        self.dbut = ttk.Button(aframe, text='Down', command=self.triggerdown)
        self.dbut.grid(column=1, row=0, sticky=(E, ))
        self.dbut.state(['disabled'])
        self.dbut.bind('<Enter>',
                       lambda event, text=_HELP_DOWN: self.setHelp(text),
                       add='+')
        self.ubut = ttk.Button(aframe, text='Up', command=self.triggerup)
        self.ubut.grid(column=2, row=0, sticky=(E, ))
        self.ubut.state(['disabled'])
        self.ubut.bind('<Enter>',
                       lambda event, text=_HELP_UP: self.setHelp(text),
                       add='+')
        lbut = ttk.Button(aframe, text='Load', command=self.loadfile)
        lbut.grid(column=3, row=0, sticky=(E, ))
        lbut.focus()
        lbut.bind('<Enter>',
                  lambda event, text=_HELP_LOAD: self.setHelp(text),
                  add='+')
        sbut = ttk.Button(aframe, text='Save', command=self.savefile)
        sbut.grid(column=4, row=0, sticky=(E, ))
        sbut.bind('<Enter>',
                  lambda event, text=_HELP_SAVE: self.setHelp(text),
                  add='+')
        row += 1

        #ttk.Separator(frame, orient=HORIZONTAL).grid(column=0,
        #row=row,
        #columnspan=4,
        #sticky=(
        #E,
        #W,
        #))
        #row += 1

        # status label
        self.logvar = StringVar(value='Waiting for device...')
        self.loglbl = ttk.Label(frame, textvariable=self.logvar)
        self.loglbl.grid(column=0, row=row, sticky=(
            W,
            E,
        ), columnspan=4)
        row += 1

        for child in frame.winfo_children():
            if child is not hdr:
                child.grid_configure(padx=6, pady=4)

        # connect event handlers
        window.bind('<Return>', self.uiupdate)
        window.bind('<<SerialDevEvent>>', self.devevent)
        self.window = window

        # start device polling
        self.devpoll()


def main():
    logging.basicConfig()
    if len(sys.argv) > 1 and sys.argv[1] == '-v':
        _log.setLevel(logging.DEBUG)
        _log.debug('Enabled debug logging')
    sio = SerialConsole()
    sio.start()
    win = Tk()
    app = HHConfig(window=win, devio=sio)
    win.mainloop()
    return 0


if __name__ == '__main__':
    sys.exit(main())
