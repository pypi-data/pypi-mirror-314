[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools", "setuptools_scm[toml]", "wheel"]


[project]
name = "mrbabel_data"
description = "Example dataset for demo and testing of mrbabel package."
readme = "README.rst"

requires-python = ">=3.10"
dynamic = ["version"]

license = {file = "LICENSE"}
keywords = ["mri", "i/o"]


authors = [
  {name = "Matteo Cencini", email = "matteo.cencini@gmail.com" } # Optional
]

# Classifiers help users find your project by categorizing it.
# For a list of valid classifiers, see https://pypi.org/classifiers/
classifiers = [  # Optional
  # How mature is this project? Common values are
  #   3 - Alpha
  #   4 - Beta
  #   5 - Production/Stable
  "Development Status :: 3 - Alpha",

  # Indicate who your project is intended for
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",

  # Specify the Python versions you support here. In particular, ensure
  # that you indicate you support Python 3. These classifiers are *not*
  # checked by "pip install". See instead "python_requires" below.
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]

# List URLs that are relevant to your project
# This field corresponds to the "Project-URL" and "Home-Page" metadata fields:
[project.urls]  # Optional
"Homepage" = "https://github.com/INFN-MRI/mrbabel_data"
"Bug Reports" = "https://github.com/INFN-MRI/mrbabel_data/issues"
"Source" = "https://github.com/INFN-MRI/mrbabel_data"

[tool.setuptools.packages.find]
where=["src"]

[tool.setuptools_scm]
write_to = "src/mrbabel_data/_version.py"
version_scheme = "python-simplified-semver"
local_scheme="no-local-version"
fallback_version="v99-dev"

# linting using ruff.
[tool.ruff]
src = ["src"]
select = ["E", "F", "B", "Q", "D", "UP", "ANN"]

ignore = [
    "ANN101", # missing type annotation for self
    "ANN102", # missing type annotation for cls in classmethod.
    "ANN204", # missing return type for __init__
    "D105", # missing docstring in magic method
    "D404", # Imperative mode is not necessary everywhere, trust me.
]

[tool.ruff.pydocstyle]
convention = "numpy"

[mypy]
ignore_missing_imports = true
