"""
This type stub file was generated by cyright.
"""

from enum import Enum
from typing import Any, Callable, Tuple

class SWMMObjects(Enum):
    """
    Enumeration of SWMM objects.

    :ivar SUBCATCH: Subcatchment object
    :type SUBCATCH: int 
    :ivar NODE: Node object
    :type NODE: int
    :ivar LINK: Link object
    :type LINK: int
    :ivar AQUIFER: Aquifer object
    :type AQUIFER: int
    :ivar SNOWPACK: Snowpack object
    :type SNOWPACK: int
    :ivar UNIT_HYDROGRAPH: Unit hydrograph object
    :type UNIT_HYDROGRAPH: int
    :ivar LID: LID object
    :type LID: int
    :ivar STREET: Street object
    :type STREET: int
    :ivar INLET: Inlet object
    :type INLET: int
    :ivar TRANSECT: Transect object
    :type TRANSECT: int
    :ivar XSECTION_SHAPE: Cross-section shape object
    :type XSECTION_SHAPE: int
    :ivar CONTROL_RULE: Control rule object
    :type CONTROL_RULE: int
    :ivar POLLUTANT: Pollutant object
    :type POLLUTANT: int
    :ivar LANDUSE: Land use object
    :type LANDUSE: int
    :ivar CURVE: Curve object
    :type CURVE: int
    :ivar TIMESERIES: Time series object
    :type TIMESERIES: int
    :ivar TIME_PATTERN: Time pattern object
    :type TIME_PATTERN: int
    :ivar SYSTEM: System object
    :type SYSTEM: int
    """
    RAIN_GAGE = ...
    SUBCATCH = ...
    NODE = ...
    LINK = ...
    AQUIFER = ...
    SNOWPACK = ...
    UNIT_HYDROGRAPH = ...
    LID = ...
    STREET = ...
    INLET = ...
    TRANSECT = ...
    XSECTION_SHAPE = ...
    CONTROL_RULE = ...
    POLLUTANT = ...
    LANDUSE = ...
    CURVE = ...
    TIMESERIES = ...
    TIME_PATTERN = ...
    SYSTEM = ...


class SWMMNodeTypes(Enum):
    """
    Enumeration of SWMM node types.

    :ivar JUNCTION: Junction node
    :type JUNCTION: int
    :ivar OUTFALL: Outfall node
    :type OUTFALL: int
    :ivar STORAGE: Storage node
    :type STORAGE: int
    :ivar DIVIDER: Divider node
    :type DIVIDER: int
    """
    JUNCTION = ...
    OUTFALL = ...
    STORAGE = ...
    DIVIDER = ...


class SWMMRainGageProperties(Enum):
    """
    Enumeration of SWMM raingage properties.

    :ivar GAGE_TOTAL_PRECIPITATION: Total precipitation
    :type GAGE_TOTAL_PRECIPITATION: int
    :ivar GAGE_SNOW_DEPTH: Snow depth
    :type GAGE_SNOW_DEPTH: int
    :ivar GAGE_SNOWFALL: Snowfall
    :type GAGE_SNOWFALL: int
    """
    GAGE_TOTAL_PRECIPITATION = ...
    GAGE_RAINFALL = ...
    GAGE_SNOWFALL = ...


class SWMMSubcatchmentProperties(Enum):
    """
    Enumeration of SWMM subcatchment properties.

    :ivar AREA: Area
    :type AREA: int
    :ivar RAINGAGE: Raingage
    :type RAINGAGE: int
    :ivar RAINFALL: Rainfall
    :type RAINFALL: int
    :ivar EVAPORATION: Evaporation
    :type EVAPORATION: int
    :ivar INFILTRATION: Infiltration
    :type INFILTRATION: int
    :ivar RUNOFF: Runoff
    :type RUNOFF: int
    :ivar REPORT_FLAG: Report flag
    :type REPORT_FLAG: int
    :ivar POLLUTANT_BUILDUP: Pollutant buildup
    :type POLLUTANT_BUILDUP: int
    :ivar POLLUTANT_PONDED_CONCENTRATION: Pollutant ponded concentration
    :type POLLUTANT_PONDED_CONCENTRATION: int
    :ivar POLLUTANT_TOTAL_LOAD: Pollutant total load
    :type POLLUTANT_TOTAL_LOAD: int
    """
    AREA = ...
    RAINGAGE = ...
    RAINFALL = ...
    EVAPORATION = ...
    INFILTRATION = ...
    RUNOFF = ...
    REPORT_FLAG = ...
    WIDTH = ...
    POLLUTANT_BUILDUP = ...
    POLLUTANT_PONDED_CONCENTRATION = ...
    POLLUTANT_RUNOFF_CONCENTRATION = ...


class SWMMNodeProperties(Enum):
    """
    Enumeration of SWMM node properties.

    :ivar TYPE: Node type
    :type TYPE: int
    :ivar ELEVATION: Elevation
    :type ELEVATION: int
    :ivar MAX_DEPTH: Maximum depth
    :type MAX_DEPTH: int
    :ivar DEPTH: Depth
    :type DEPTH: int
    :ivar HYDRAULIC_HEAD: Hydraulic head
    :type HYDRAULIC_HEAD: int
    :ivar VOLUME: Volume
    :type VOLUME: int
    :ivar LATERAL_INFLOW: Lateral inflow
    :type LATERAL_INFLOW: int
    :ivar TOTAL_INFLOW: Total inflow
    :type TOTAL_INFLOW: int
    :ivar FLOODING: Flooding
    :type FLOODING: int
    :ivar REPORT_FLAG: Report flag
    :type REPORT_FLAG: int
    """
    TYPE = ...
    ELEVATION = ...
    MAX_DEPTH = ...
    DEPTH = ...
    HYDRAULIC_HEAD = ...
    VOLUME = ...
    LATERAL_INFLOW = ...
    TOTAL_INFLOW = ...
    FLOODING = ...
    REPORT_FLAG = ...
    POLLUTANT_CONCENTRATION = ...
    POLLUTANT_INFLOW_CONCENTRATION = ...


class SWMMLinkProperties(Enum):
    """
    Enumeration of SWMM link properties.

    :ivar TYPE: Link type
    :type TYPE: int
    :ivar OFFSET1: Offset 1
    :type OFFSET1: int
    :ivar OFFSET2: Offset 2
    :type OFFSET2: int
    :ivar DIAMETER: Diameter
    :type DIAMETER: int
    :ivar LENGTH: Length
    :type LENGTH: int
    :ivar ROUGHNESS: Roughness
    :type ROUGHNESS: int
    :ivar INLET_HEIGHT: Inlet height
    :type INLET_HEIGHT: int
    :ivar OUTLET_HEIGHT: Outlet height
    :type OUTLET_HEIGHT: int
    :ivar INIT_FLOW: Initial flow
    :type INIT_FLOW: int
    :ivar FLOW_LIMIT: Flow limit
    :type FLOW_LIMIT: int
    :ivar REPORT_FLAG: Report flag
    :type REPORT_FLAG: int
    """
    TYPE = ...
    START_NODE = ...
    END_NODE = ...
    LENGTH = ...
    SLOPE = ...
    FULL_DEPTH = ...
    FULL_FLOW = ...
    SETTING = ...
    TIME_OPEN = ...
    TIME_CLOSED = ...
    FLOW = ...
    DEPTH = ...
    VELOCITY = ...
    TOP_WIDTH = ...
    REPORT_FLAG = ...
    POLLUTANT_CONCENTRATION = ...
    POLLUTANT_LOAD = ...


class SWMMSystemProperties(Enum):
    """
    Enumeration of SWMM system properties.
    """
    START_DATE = ...
    CURRENT_DATE = ...
    ELAPSED_TIME = ...
    ROUTING_STEP = ...
    MAX_ROUTING_STEP = ...
    REPORT_STEP = ...
    TOTAL_STEPS = ...
    NO_REPORT_FLAG = ...
    FLOW_UNITS = ...
    END_DATE = ...
    REPORT_START_DATE = ...
    UNIT_SYSTEM = ...
    SURCHARGE_METHOD = ...
    ALLOW_PONDING = ...
    INTERTIAL_DAMPING = ...
    NORMAL_FLOW_LIMITED = ...
    SKIP_STEADY_STATE = ...
    IGNORE_RAINFALL = ...
    IGNORE_RDII = ...
    IGNORE_SNOWMELT = ...
    IGNORE_GROUNDWATER = ...
    IGNORE_ROUTING = ...
    IGNORE_QUALITY = ...
    RULE_STEP = ...
    SWEEP_START = ...
    SWEEP_END = ...
    MAX_TRIALS = ...
    NUM_THREADS = ...
    MIN_ROUTE_STEP = ...
    LENGTHENING_STEP = ...
    START_DRY_DAYS = ...
    COURANT_FACTOR = ...
    MIN_SURF_AREA = ...
    MIN_SLOPE = ...
    RUNOFF_ERROR = ...
    FLOW_ERROR = ...
    QUAL_ERROR = ...
    HEAD_TOL = ...
    SYS_FLOW_TOL = ...
    LAT_FLOW_TOL = ...


class SWMMFlowUnits(Enum):
    """
    Enumeration of SWMM flow units.

    :ivar CFS: Cubic feet per second
    :type CFS: int
    :ivar GPM: Gallons per minute
    :type GPM: int
    :ivar MGD: Million gallons per day
    :type MGD: int
    :ivar CMS: Cubic meters per second
    :type CMS: int
    :ivar LPS: Liters per second
    :type LPS: int
    :ivar MLD: Million liters per day
    :type MLD: int
    """
    CFS = ...
    GPM = ...
    MGD = ...
    CMS = ...
    LPS = ...
    MLD = ...


class SWMMAPIErrors(Enum):
    """
    Enumeration of SWMM API errors.

    :ivar PROJECT_NOT_OPENED: Project not opened
    :type PROJECT_NOT_OPENED: int
    :ivar SIMULATION_NOT_STARTED: Simulation not started
    :type SIMULATION_NOT_STARTED: int
    :ivar SIMULATION_NOT_ENDED: Simulation not ended
    :type SIMULATION_NOT_ENDED: int    
    """
    PROJECT_NOT_OPENED = ...
    SIMULATION_NOT_STARTED = ...
    SIMULATION_NOT_ENDED = ...
    OBJECT_TYPE = ...
    OBJECT_INDEX = ...
    OBJECT_NAME = ...
    PROPERTY_TYPE = ...
    PROPERTY_VALUE = ...
    TIME_PERIOD = ...
    HOTSTART_FILE_OPEN = ...
    HOTSTART_FILE_FORMAT = ...


def run_solver(inp_file: str, rpt_file: str, out_file: str, swmm_progress_callback: Callable[[float], None] = ...) -> int:
    """
    Run a SWMM simulation with a progress callback.

    :param inp_file: Input file name
    :param rpt_file: Report file name
    :param out_file: Output file name
    :param progress_callback: Progress callback function
    :type progress_callback: callable
    :return: Error code (0 if successful)
    """
    ...

def decode_swmm_datetime(swmm_datetime: float) -> Any:
    """
    Decode a SWMM datetime into a datetime object.
    
    :param swmm_datetime: SWMM datetime float value
    :type swmm_datetime: float
    :return: datetime object
    :rtype: datetime
    """
    ...

def encode_swmm_datetime(dt: Any) -> float:
    """
    Encode a datetime object into a SWMM datetime float value.

    :param dt: datetime object
    :type dt: datetime
    :return: SWMM datetime float value
    :rtype: float
    """
    ...

def version() -> int:
    """
    Get the SWMM version.
    
    :return: SWMM version
    :rtype: str
    """
    ...

def get_error_message(error_code: int) -> str:
    """
    Get the error message for a SWMM error code.
    
    :param error_code: Error code
    :type error_code: int
    :return: Error message
    :rtype: str
    """
    ...

class SolverState(Enum):
    """
    An enumeration to represent the state of the solver.
    """
    CREATED = ...
    OPEN = ...
    STARTED = ...
    FINISHED = ...
    ENDED = ...
    REPORTED = ...
    CLOSED = ...


class CallbackType(Enum):
    """
    An enumeration to represent the type of callback.
    """
    BEFORE_INITIALIZE = ...
    BEFORE_OPEN = ...
    AFTER_OPEN = ...
    BEFORE_START = ...
    AFTER_START = ...
    BEFORE_STEP = ...
    AFTER_STEP = ...
    BEFORE_END = ...
    AFTER_END = ...
    BEFORE_REPORT = ...
    AFTER_REPORT = ...
    BEFORE_CLOSE = ...
    AFTER_CLOSE = ...


class SWMMSolverException(Exception):
    """
    Exception class for SWMM output file processing errors.
    """
    def __init__(self, message: str) -> None:
        """
        Constructor to initialize the exception message.

        :param message: Error message.
        :type message: str
        """
        ...
    


class Solver:
    """
    A class to represent a SWMM solver.
    """
    def __enter__(self): # -> Self@Solver:
        """
        Enter method for context manager.
        """
        ...
    
    def __exit__(self, exc_type, exc_value, traceback): # -> None:
        """
        Exit method for context manager.
        """
        ...
    
    def __iter__(self): # -> Self@Solver:
        """
        Iterator method for the solver.
        """
        ...
    
    def __next__(self): # -> double:
        """
        Next method for the solver.
        """
        ...
    
    @property
    def start_datetime(self) -> Any:
        """
        Get the start date of the simulation.
        
        :return: Start date
        :rtype: datetime
        """
        ...
    
    @start_datetime.setter
    def start_datetime(self, sim_start_datetime: Any) -> None:
        """
        Initialize the solver.
        
        :param sim_start_datetime: Start date of the simulation
        :return: Error code (0 if successful)
        """
        ...
    
    @property
    def end_datetime(self) -> Any:
        """
        Get the end date of the simulation.
        
        :return: End date
        :rtype: datetime
        """
        ...
    
    @end_datetime.setter
    def end_datetime(self, sim_end_datetime: Any) -> None:
        """
        Set the end date of the simulation.
        
        :param sim_end_datetime: End date of the simulation
        :return: Error code (0 if successful)
        """
        ...
    
    @property
    def current_datetime(self) -> Any:
        """
        Get the current date of the simulation.
        
        :return: Current date
        :rtype: datetime
        """
        ...
    
    def get_object_count(self, object_type: SWMMObjects) -> int:
        """
        Get the count of a SWMM object type.
        
        :param object_type: SWMM object type
        :type object_type: SWMMObjects
        :return: Object count
        :rtype: int
        """
        ...
    
    def get_object_name(self, object_type: SWMMObjects, index: int) -> str:
        """
        Get the name of a SWMM object.
        
        :param object_type: SWMM object type
        :type object_type: SWMMObjects
        :param index: Object index
        :type index: int
        :return: Object name
        :rtype: str
        """
        ...
    
    def set_value(self, property_type: SWMMObjects, index: int, value: double) -> None:
        """
        Set a SWMM system property value.
        
        :param property_type: System property type
        :type property_type: SWMMSystemProperties
        :param value: Property value
        :type value: double
        """
        ...
    
    def get_value(self, property_type: SWMMObjects, index: int): # -> double:
        """
        Get a SWMM system property value.
        
        :param property_type: System property type
        :type property_type: SWMMSystemProperties
        :return: Property value
        :rtype: double
        """
        ...
    
    @property
    def stride_step(self) -> int:
        """
        Get the stride step of the simulation.
        
        :return: Stride step
        :rtype: int
        """
        ...
    
    @stride_step.setter
    def stride_step(self, value: int): # -> None:
        """
        Set the stride time step of the simulation.
        
        :param value: Stride step in seconds
        :type value: int
        """
        ...
    
    @property
    def solver_state(self) -> SolverState:
        """
        Get the state of the solver.
        
        :return: Solver state
        :rtype: SolverState
        """
        ...
    
    def add_callback(self, callback_type: CallbackType, callback: Callable[[Solver], None]) -> None:
        """
        Add a callback to the solver.
        
        :param callback_type: Type of callback
        :type callback_type: CallbackType
        :param callback: Callback function
        :type callback: callable
        """
        ...
    
    def add_progress_callback(self, callback: Callable[[double], None]) -> None:
        """
        Add a progress callback to the solver.
        
        :param callback: Progress callback function
        :type callback: callable
        """
        ...
    
    def initialize(self) -> Any:
        """
        Initialize the solver.
        
        :param inp_file: Input file name
        :param rpt_file: Report file name
        :param out_file: Output file name

        """
        ...
    
    def step(self) -> float:
        """
        Step a SWMM simulation.
        
        :return: elapsed_time, current_date
        :rtype: Tuple[float, datetime]
        """
        ...
    
    def finalize(self) -> Any:
        """
        Finalize the solver.
        """
        ...
    
    def execute(self) -> Any:
        """
        Run the solver to completion.
        
        :return: Error code (0 if successful)
        """
        ...
    
    def use_hotstart(self, hotstart_file: str) -> Any:
        """
        Use a hotstart file.
        
        :param hotstart_file: Hotstart file name
        """
        ...
    
    def save_hotstart(self, hotstart_file: str) -> Any:
        """
        Save a hotstart file.
        
        :param hotstart_file: Hotstart file name
        """
        ...
    
    def get_mass_balance_error(self) -> Tuple[float, float, float]:
        """
        Get the mass balance error.
        
        :return: Mass balance error
        :rtype: Tuple[float, float, float]
        """
        ...
    


